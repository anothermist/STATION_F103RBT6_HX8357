
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011dc0  0800c398  0800c398  0001c398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e158  0801e158  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801e158  0801e158  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801e158  0801e158  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e158  0801e158  0002e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e15c  0801e15c  0002e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801e160  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  200001e8  0801e344  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0801e344  00030984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002149a  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bf  00000000  00000000  000516a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00019221  00000000  00000000  00054d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  0006df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e70  00000000  00000000  0006edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bdb3  00000000  00000000  00072c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005568  00000000  00000000  0008e9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  00093f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c37c 	.word	0x0800c37c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c37c 	.word	0x0800c37c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	460c      	mov	r4, r1
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	4628      	mov	r0, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <AT24XX_Read>:
        return true;
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
 80010d4:	b530      	push	{r4, r5, lr}
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80010d6:	2564      	movs	r5, #100	; 0x64
 80010d8:	2401      	movs	r4, #1
    uint16_t dt[1] = {0};
 80010da:	f04f 0c00 	mov.w	ip, #0
uint8_t AT24XX_Read(uint16_t address) {
 80010de:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80010e0:	ab05      	add	r3, sp, #20
uint8_t AT24XX_Read(uint16_t address) {
 80010e2:	4602      	mov	r2, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	21ae      	movs	r1, #174	; 0xae
 80010e8:	2310      	movs	r3, #16
 80010ea:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <AT24XX_Read+0x2c>)
    uint16_t dt[1] = {0};
 80010f0:	f8ad c014 	strh.w	ip, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80010f4:	f004 fbd2 	bl	800589c <HAL_I2C_Mem_Read>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 80010f8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80010fc:	b007      	add	sp, #28
 80010fe:	bd30      	pop	{r4, r5, pc}
 8001100:	20000750 	.word	0x20000750

08001104 <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t dt[1] = {0};
 8001106:	2200      	movs	r2, #0
void AT24XX_Update(uint16_t address, uint8_t val) {
 8001108:	4605      	mov	r5, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800110a:	2764      	movs	r7, #100	; 0x64
 800110c:	2601      	movs	r6, #1
void AT24XX_Update(uint16_t address, uint8_t val) {
 800110e:	460c      	mov	r4, r1
 8001110:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8001112:	ab05      	add	r3, sp, #20
 8001114:	9300      	str	r3, [sp, #0]
    uint16_t dt[1] = {0};
 8001116:	f8ad 2014 	strh.w	r2, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800111a:	2310      	movs	r3, #16
 800111c:	21ae      	movs	r1, #174	; 0xae
 800111e:	462a      	mov	r2, r5
 8001120:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <AT24XX_Update+0x58>)
 8001126:	f004 fbb9 	bl	800589c <HAL_I2C_Mem_Read>
    return dt[0];
 800112a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 800112e:	429c      	cmp	r4, r3
 8001130:	d101      	bne.n	8001136 <AT24XX_Update+0x32>
}
 8001132:	b007      	add	sp, #28
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8001136:	a905      	add	r1, sp, #20
 8001138:	9100      	str	r1, [sp, #0]
 800113a:	462a      	mov	r2, r5
 800113c:	2310      	movs	r3, #16
 800113e:	21ae      	movs	r1, #174	; 0xae
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <AT24XX_Update+0x58>)
 8001142:	9702      	str	r7, [sp, #8]
 8001144:	9601      	str	r6, [sp, #4]
    uint8_t save[] = {val};
 8001146:	f88d 4014 	strb.w	r4, [sp, #20]
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800114a:	f004 fa85 	bl	8005658 <HAL_I2C_Mem_Write>
 800114e:	2800      	cmp	r0, #0
 8001150:	d1ef      	bne.n	8001132 <AT24XX_Update+0x2e>
        HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f003 f872 	bl	800423c <HAL_Delay>
}
 8001158:	b007      	add	sp, #28
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	20000750 	.word	0x20000750

08001160 <BME280_getTemperature>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
}                                                                                        // round_nth(1.235, -2) = 1.24

float BME280_getTemperature(int8_t n) {
 8001160:	b570      	push	{r4, r5, r6, lr}
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001162:	2564      	movs	r5, #100	; 0x64
    cmd[0] = 0xFA; // temp_msb
 8001164:	f04f 0cfa 	mov.w	ip, #250	; 0xfa
float BME280_getTemperature(int8_t n) {
 8001168:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800116a:	4e30      	ldr	r6, [pc, #192]	; (800122c <BME280_getTemperature+0xcc>)
float BME280_getTemperature(int8_t n) {
 800116c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800116e:	aa03      	add	r2, sp, #12
 8001170:	9500      	str	r5, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	21ec      	movs	r1, #236	; 0xec
 8001176:	4630      	mov	r0, r6
    cmd[0] = 0xFA; // temp_msb
 8001178:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800117c:	f003 fe46 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001180:	f10d 020d 	add.w	r2, sp, #13
 8001184:	9500      	str	r5, [sp, #0]
 8001186:	2303      	movs	r3, #3
 8001188:	4630      	mov	r0, r6
 800118a:	21ec      	movs	r1, #236	; 0xec
 800118c:	f003 ffd4 	bl	8005138 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001190:	f89d 000e 	ldrb.w	r0, [sp, #14]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <BME280_getTemperature+0xd0>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001196:	f89d 300d 	ldrb.w	r3, [sp, #13]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800119a:	8811      	ldrh	r1, [r2, #0]
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800119c:	0100      	lsls	r0, r0, #4
 800119e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80011a2:	ebc1 1210 	rsb	r2, r1, r0, lsr #4
 80011a6:	fb02 f302 	mul.w	r3, r2, r2
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80011aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80011ae:	0049      	lsls	r1, r1, #1
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80011b0:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80011b4:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <BME280_getTemperature+0xd4>)
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80011b6:	ebc1 01d0 	rsb	r1, r1, r0, lsr #3
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <BME280_getTemperature+0xd8>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80011bc:	f9b2 2000 	ldrsh.w	r2, [r2]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80011c0:	f9b0 0000 	ldrsh.w	r0, [r0]
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80011c4:	0b1b      	lsrs	r3, r3, #12
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80011ca:	fb00 f101 	mul.w	r1, r0, r1

    t_fine = temp;
 80011ce:	4a1b      	ldr	r2, [pc, #108]	; (800123c <BME280_getTemperature+0xdc>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80011d0:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80011d2:	eb03 23d1 	add.w	r3, r3, r1, lsr #11
    t_fine = temp;
 80011d6:	6013      	str	r3, [r2, #0]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011d8:	4620      	mov	r0, r4
    temp = (temp * 5 + 128) >> 8;
 80011da:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011de:	f7ff f911 	bl	8000404 <__aeabi_i2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	2000      	movs	r0, #0
 80011e8:	4915      	ldr	r1, [pc, #84]	; (8001240 <BME280_getTemperature+0xe0>)
 80011ea:	f00a f9e5 	bl	800b5b8 <pow>
 80011ee:	460d      	mov	r5, r1
 80011f0:	4604      	mov	r4, r0
    temp = (temp * 5 + 128) >> 8;
 80011f2:	3680      	adds	r6, #128	; 0x80
    tempf = (float) temp;
 80011f4:	1230      	asrs	r0, r6, #8
 80011f6:	f7ff fd71 	bl	8000cdc <__aeabi_i2f>

    return round_nth((tempf / 100.0f), n);
 80011fa:	4912      	ldr	r1, [pc, #72]	; (8001244 <BME280_getTemperature+0xe4>)
 80011fc:	f7ff fe76 	bl	8000eec <__aeabi_fdiv>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001204:	4622      	mov	r2, r4
 8001206:	462b      	mov	r3, r5
 8001208:	f7ff fa90 	bl	800072c <__aeabi_ddiv>
 800120c:	2200      	movs	r2, #0
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <BME280_getTemperature+0xe8>)
 8001210:	f7fe ffac 	bl	800016c <__adddf3>
 8001214:	f00a f950 	bl	800b4b8 <floor>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f95a 	bl	80004d8 <__aeabi_dmul>
 8001224:	f7ff fc50 	bl	8000ac8 <__aeabi_d2f>
}
 8001228:	b004      	add	sp, #16
 800122a:	bd70      	pop	{r4, r5, r6, pc}
 800122c:	20000750 	.word	0x20000750
 8001230:	20000222 	.word	0x20000222
 8001234:	20000226 	.word	0x20000226
 8001238:	20000224 	.word	0x20000224
 800123c:	20000228 	.word	0x20000228
 8001240:	40240000 	.word	0x40240000
 8001244:	42c80000 	.word	0x42c80000
 8001248:	3fe00000 	.word	0x3fe00000

0800124c <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 800124c:	b5d0      	push	{r4, r6, r7, lr}
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800124e:	2664      	movs	r6, #100	; 0x64
    cmd[0] = 0xFD; // hum_msb
 8001250:	f04f 0cfd 	mov.w	ip, #253	; 0xfd
float BME280_getHumidity(int8_t n) {
 8001254:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001256:	4f3f      	ldr	r7, [pc, #252]	; (8001354 <BME280_getHumidity+0x108>)
float BME280_getHumidity(int8_t n) {
 8001258:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800125a:	aa03      	add	r2, sp, #12
 800125c:	9600      	str	r6, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	21ec      	movs	r1, #236	; 0xec
 8001262:	4638      	mov	r0, r7
    cmd[0] = 0xFD; // hum_msb
 8001264:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001268:	f003 fdd0 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 800126c:	f10d 020d 	add.w	r2, sp, #13
 8001270:	9600      	str	r6, [sp, #0]
 8001272:	2302      	movs	r3, #2
 8001274:	4638      	mov	r0, r7
 8001276:	21ec      	movs	r1, #236	; 0xec
 8001278:	f003 ff5e 	bl	8005138 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 800127c:	4a36      	ldr	r2, [pc, #216]	; (8001358 <BME280_getHumidity+0x10c>)
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <BME280_getHumidity+0x110>)
    v_x1 = t_fine - 76800;
 8001280:	6811      	ldr	r1, [r2, #0]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001282:	4837      	ldr	r0, [pc, #220]	; (8001360 <BME280_getHumidity+0x114>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001284:	881b      	ldrh	r3, [r3, #0]
    v_x1 = t_fine - 76800;
 8001286:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800128a:	f9b0 2000 	ldrsh.w	r2, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800128e:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001292:	fb01 f202 	mul.w	r2, r1, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001296:	4e33      	ldr	r6, [pc, #204]	; (8001364 <BME280_getHumidity+0x118>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001298:	12db      	asrs	r3, r3, #11
    hum_raw = (cmd[1] << 8) | cmd[2];
 800129a:	f8bd 000d 	ldrh.w	r0, [sp, #13]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800129e:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80012a8:	f9b6 2000 	ldrsh.w	r2, [r6]
    hum_raw = (cmd[1] << 8) | cmd[2];
 80012ac:	ba40      	rev16	r0, r0
 80012ae:	b280      	uxth	r0, r0
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80012b0:	0512      	lsls	r2, r2, #20
 80012b2:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
 80012b6:	482c      	ldr	r0, [pc, #176]	; (8001368 <BME280_getHumidity+0x11c>)
 80012b8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80012bc:	f9b0 0000 	ldrsh.w	r0, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012c0:	129b      	asrs	r3, r3, #10
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80012c2:	fb01 2210 	mls	r2, r1, r0, r2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80012c6:	4620      	mov	r0, r4
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012c8:	4c28      	ldr	r4, [pc, #160]	; (800136c <BME280_getHumidity+0x120>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012ce:	f9b4 4000 	ldrsh.w	r4, [r4]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012d2:	0bd2      	lsrs	r2, r2, #15
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012d4:	fb04 f303 	mul.w	r3, r4, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80012dc:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012de:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 80012e2:	13da      	asrs	r2, r3, #15
 80012e4:	fb02 f202 	mul.w	r2, r2, r2
 80012e8:	4921      	ldr	r1, [pc, #132]	; (8001370 <BME280_getHumidity+0x124>)
 80012ea:	11d4      	asrs	r4, r2, #7
 80012ec:	8809      	ldrh	r1, [r1, #0]
 80012ee:	fb01 f404 	mul.w	r4, r1, r4
 80012f2:	eba3 1324 	sub.w	r3, r3, r4, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80012f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80012fa:	f7ff f883 	bl	8000404 <__aeabi_i2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	2000      	movs	r0, #0
 8001304:	491b      	ldr	r1, [pc, #108]	; (8001374 <BME280_getHumidity+0x128>)
 8001306:	f00a f957 	bl	800b5b8 <pow>
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 800130a:	f1b4 5fc8 	cmp.w	r4, #419430400	; 0x19000000
 800130e:	bfa8      	it	ge
 8001310:	f04f 54c8 	movge.w	r4, #419430400	; 0x19000000
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001314:	460f      	mov	r7, r1
 8001316:	4606      	mov	r6, r0

    humf = (float) (v_x1 >> 12);
 8001318:	1320      	asrs	r0, r4, #12
 800131a:	f7ff fcdf 	bl	8000cdc <__aeabi_i2f>

    return round_nth((humf / 1024.0f), n);
 800131e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8001322:	f7ff fd2f 	bl	8000d84 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001326:	f7ff f87f 	bl	8000428 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 800132a:	4632      	mov	r2, r6
 800132c:	463b      	mov	r3, r7
 800132e:	f7ff f9fd 	bl	800072c <__aeabi_ddiv>
 8001332:	2200      	movs	r2, #0
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <BME280_getHumidity+0x12c>)
 8001336:	f7fe ff19 	bl	800016c <__adddf3>
 800133a:	f00a f8bd 	bl	800b4b8 <floor>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4630      	mov	r0, r6
 8001344:	4639      	mov	r1, r7
 8001346:	f7ff f8c7 	bl	80004d8 <__aeabi_dmul>
 800134a:	f7ff fbbd 	bl	8000ac8 <__aeabi_d2f>
}
 800134e:	b004      	add	sp, #16
 8001350:	bdd0      	pop	{r4, r6, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000750 	.word	0x20000750
 8001358:	20000228 	.word	0x20000228
 800135c:	20000208 	.word	0x20000208
 8001360:	2000020e 	.word	0x2000020e
 8001364:	2000020a 	.word	0x2000020a
 8001368:	2000020c 	.word	0x2000020c
 800136c:	20000206 	.word	0x20000206
 8001370:	20000204 	.word	0x20000204
 8001374:	40240000 	.word	0x40240000
 8001378:	3fe00000 	.word	0x3fe00000

0800137c <BME280_getPressure>:

float BME280_getPressure(void) {
 800137c:	b510      	push	{r4, lr}
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800137e:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF7; // press_msb
 8001380:	f04f 0cf7 	mov.w	ip, #247	; 0xf7
float BME280_getPressure(void) {
 8001384:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001386:	2301      	movs	r3, #1
 8001388:	21ec      	movs	r1, #236	; 0xec
 800138a:	aa03      	add	r2, sp, #12
 800138c:	9400      	str	r4, [sp, #0]
 800138e:	483e      	ldr	r0, [pc, #248]	; (8001488 <BME280_getPressure+0x10c>)
    cmd[0] = 0xF7; // press_msb
 8001390:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001394:	f003 fd3a 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001398:	2303      	movs	r3, #3
 800139a:	21ec      	movs	r1, #236	; 0xec
 800139c:	9400      	str	r4, [sp, #0]
 800139e:	f10d 020d 	add.w	r2, sp, #13
 80013a2:	4839      	ldr	r0, [pc, #228]	; (8001488 <BME280_getPressure+0x10c>)
 80013a4:	f003 fec8 	bl	8005138 <HAL_I2C_Master_Receive>
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <BME280_getPressure+0x110>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
    var2 = var2 + ((var1 * dig_P5) << 1);
    var2 = (var2 >> 2) + (dig_P4 << 16);
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80013aa:	4839      	ldr	r0, [pc, #228]	; (8001490 <BME280_getPressure+0x114>)
    var1 = (t_fine >> 1) - 64000;
 80013ac:	681a      	ldr	r2, [r3, #0]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80013ae:	4c39      	ldr	r4, [pc, #228]	; (8001494 <BME280_getPressure+0x118>)
    var1 = (t_fine >> 1) - 64000;
 80013b0:	1052      	asrs	r2, r2, #1
 80013b2:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80013b6:	1091      	asrs	r1, r2, #2
 80013b8:	fb01 f301 	mul.w	r3, r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80013bc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80013c0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80013c4:	fb02 f000 	mul.w	r0, r2, r0
 80013c8:	135c      	asrs	r4, r3, #13
 80013ca:	fb04 f101 	mul.w	r1, r4, r1
 80013ce:	1040      	asrs	r0, r0, #1
 80013d0:	eb00 00e1 	add.w	r0, r0, r1, asr #3
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80013d4:	4930      	ldr	r1, [pc, #192]	; (8001498 <BME280_getPressure+0x11c>)
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80013d6:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80013d8:	8809      	ldrh	r1, [r1, #0]
 80013da:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80013de:	fb01 f000 	mul.w	r0, r1, r0
    if (var1 == 0) {
 80013e2:	13c0      	asrs	r0, r0, #15
 80013e4:	d04c      	beq.n	8001480 <BME280_getPressure+0x104>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80013e6:	492d      	ldr	r1, [pc, #180]	; (800149c <BME280_getPressure+0x120>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80013e8:	4c2d      	ldr	r4, [pc, #180]	; (80014a0 <BME280_getPressure+0x124>)
    var2 = var2 + ((var1 * dig_P5) << 1);
 80013ea:	f9b1 1000 	ldrsh.w	r1, [r1]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80013ee:	f9b4 c000 	ldrsh.w	ip, [r4]
    var2 = var2 + ((var1 * dig_P5) << 1);
 80013f2:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80013f6:	12d9      	asrs	r1, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80013f8:	0052      	lsls	r2, r2, #1
 80013fa:	fb0c 2201 	mla	r2, ip, r1, r2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80013fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8001402:	4928      	ldr	r1, [pc, #160]	; (80014a4 <BME280_getPressure+0x128>)
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001404:	f89d 400e 	ldrb.w	r4, [sp, #14]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8001408:	f9b1 1000 	ldrsh.w	r1, [r1]
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001412:	f89d 400d 	ldrb.w	r4, [sp, #13]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	eb01 02a2 	add.w	r2, r1, r2, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800141c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
        return 0;
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8001420:	4921      	ldr	r1, [pc, #132]	; (80014a8 <BME280_getPressure+0x12c>)
 8001422:	eb03 3322 	add.w	r3, r3, r2, asr #12
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800142e:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 8001432:	2b00      	cmp	r3, #0
        press = (press << 1) / var1;
    } else {
        press = (press / var1) * 2;
 8001434:	bfb3      	iteet	lt
 8001436:	fbb3 f0f0 	udivlt	r0, r3, r0
        press = (press << 1) / var1;
 800143a:	005b      	lslge	r3, r3, #1
 800143c:	fbb3 f0f0 	udivge	r0, r3, r0
        press = (press / var1) * 2;
 8001440:	0040      	lsllt	r0, r0, #1
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001442:	08c3      	lsrs	r3, r0, #3
 8001444:	fb03 f203 	mul.w	r2, r3, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001448:	4918      	ldr	r1, [pc, #96]	; (80014ac <BME280_getPressure+0x130>)
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <BME280_getPressure+0x134>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800144c:	f9b1 4000 	ldrsh.w	r4, [r1]
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001450:	f9b3 1000 	ldrsh.w	r1, [r3]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001454:	0883      	lsrs	r3, r0, #2
 8001456:	fb04 f303 	mul.w	r3, r4, r3
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800145a:	0b52      	lsrs	r2, r2, #13
 800145c:	fb01 f202 	mul.w	r2, r1, r2
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001460:	4914      	ldr	r1, [pc, #80]	; (80014b4 <BME280_getPressure+0x138>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001462:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001468:	eb03 3322 	add.w	r3, r3, r2, asr #12
 800146c:	440b      	add	r3, r1

    pressf = (float) press;
 800146e:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8001472:	f7ff fc2f 	bl	8000cd4 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8001476:	4910      	ldr	r1, [pc, #64]	; (80014b8 <BME280_getPressure+0x13c>)
 8001478:	f7ff fd38 	bl	8000eec <__aeabi_fdiv>
}
 800147c:	b004      	add	sp, #16
 800147e:	bd10      	pop	{r4, pc}
        return 0;
 8001480:	2000      	movs	r0, #0
}
 8001482:	b004      	add	sp, #16
 8001484:	bd10      	pop	{r4, pc}
 8001486:	bf00      	nop
 8001488:	20000750 	.word	0x20000750
 800148c:	20000228 	.word	0x20000228
 8001490:	20000212 	.word	0x20000212
 8001494:	20000214 	.word	0x20000214
 8001498:	20000210 	.word	0x20000210
 800149c:	20000218 	.word	0x20000218
 80014a0:	2000021a 	.word	0x2000021a
 80014a4:	20000216 	.word	0x20000216
 80014a8:	fffff3cb 	.word	0xfffff3cb
 80014ac:	2000021e 	.word	0x2000021e
 80014b0:	20000220 	.word	0x20000220
 80014b4:	2000021c 	.word	0x2000021c
 80014b8:	42c80000 	.word	0x42c80000

080014bc <BME280_Init>:

void BME280_Init(void) {
 80014bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014be:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF2; // ctrl_hum
 80014c0:	f240 5cf2 	movw	ip, #1522	; 0x5f2
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014c4:	4d5e      	ldr	r5, [pc, #376]	; (8001640 <BME280_Init+0x184>)
void BME280_Init(void) {
 80014c6:	b088      	sub	sp, #32
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014c8:	aa03      	add	r2, sp, #12
 80014ca:	9400      	str	r4, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	21ec      	movs	r1, #236	; 0xec
 80014d0:	4628      	mov	r0, r5
    cmd[0] = 0xF2; // ctrl_hum
 80014d2:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014d6:	f003 fc99 	bl	8004e0c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80014da:	f24b 7cf4 	movw	ip, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014de:	9400      	str	r4, [sp, #0]
 80014e0:	aa03      	add	r2, sp, #12
 80014e2:	2302      	movs	r3, #2
 80014e4:	21ec      	movs	r1, #236	; 0xec
 80014e6:	4628      	mov	r0, r5
    cmd[0] = 0xF4; // ctrl_meas
 80014e8:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014ec:	f003 fc8e 	bl	8004e0c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 80014f0:	f24a 0cf5 	movw	ip, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014f4:	9400      	str	r4, [sp, #0]
 80014f6:	aa03      	add	r2, sp, #12
 80014f8:	2302      	movs	r3, #2
 80014fa:	21ec      	movs	r1, #236	; 0xec
 80014fc:	4628      	mov	r0, r5
    cmd[0] = 0xF5; // config
 80014fe:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001502:	f003 fc83 	bl	8004e0c <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 8001506:	f04f 0c88 	mov.w	ip, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800150a:	9400      	str	r4, [sp, #0]
 800150c:	aa03      	add	r2, sp, #12
 800150e:	2301      	movs	r3, #1
 8001510:	21ec      	movs	r1, #236	; 0xec
 8001512:	4628      	mov	r0, r5
    cmd[0] = 0x88; // read dig_T regs
 8001514:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001518:	f003 fc78 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800151c:	9400      	str	r4, [sp, #0]
 800151e:	aa03      	add	r2, sp, #12
 8001520:	2306      	movs	r3, #6
 8001522:	21ec      	movs	r1, #236	; 0xec
 8001524:	4628      	mov	r0, r5
 8001526:	f003 fe07 	bl	8005138 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 800152a:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 800152c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001530:	4a44      	ldr	r2, [pc, #272]	; (8001644 <BME280_Init+0x188>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001532:	9400      	str	r4, [sp, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001534:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001538:	8011      	strh	r1, [r2, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800153a:	4a43      	ldr	r2, [pc, #268]	; (8001648 <BME280_Init+0x18c>)
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800153c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001540:	8010      	strh	r0, [r2, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001542:	4a42      	ldr	r2, [pc, #264]	; (800164c <BME280_Init+0x190>)
    cmd[0] = 0x8E; // read dig_P regs
 8001544:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001548:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800154a:	2301      	movs	r3, #1
 800154c:	aa03      	add	r2, sp, #12
 800154e:	21ec      	movs	r1, #236	; 0xec
 8001550:	4628      	mov	r0, r5
 8001552:	f003 fc5b 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8001556:	9400      	str	r4, [sp, #0]
 8001558:	aa03      	add	r2, sp, #12
 800155a:	2312      	movs	r3, #18
 800155c:	21ec      	movs	r1, #236	; 0xec
 800155e:	4628      	mov	r0, r5
 8001560:	f003 fdea 	bl	8005138 <HAL_I2C_Master_Receive>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8001564:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8001566:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800156a:	4a39      	ldr	r2, [pc, #228]	; (8001650 <BME280_Init+0x194>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800156c:	9400      	str	r4, [sp, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800156e:	f8bd 600e 	ldrh.w	r6, [sp, #14]
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8001572:	8011      	strh	r1, [r2, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001574:	4a37      	ldr	r2, [pc, #220]	; (8001654 <BME280_Init+0x198>)
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001576:	f8bd e016 	ldrh.w	lr, [sp, #22]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800157a:	8016      	strh	r6, [r2, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800157c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8001580:	4a35      	ldr	r2, [pc, #212]	; (8001658 <BME280_Init+0x19c>)
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001582:	f8bd c018 	ldrh.w	ip, [sp, #24]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8001586:	8016      	strh	r6, [r2, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8001588:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 800158c:	4a33      	ldr	r2, [pc, #204]	; (800165c <BME280_Init+0x1a0>)
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800158e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8001592:	8016      	strh	r6, [r2, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001594:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8001598:	4a31      	ldr	r2, [pc, #196]	; (8001660 <BME280_Init+0x1a4>)
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800159a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800159e:	8016      	strh	r6, [r2, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <BME280_Init+0x1a8>)
    cmd[0] = 0xA1; // read dig_H regs
 80015a2:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80015a6:	f8a2 e000 	strh.w	lr, [r2]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80015aa:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <BME280_Init+0x1ac>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80015ac:	2301      	movs	r3, #1
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80015ae:	f8a2 c000 	strh.w	ip, [r2]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <BME280_Init+0x1b0>)
 80015b4:	8010      	strh	r0, [r2, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <BME280_Init+0x1b4>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80015b8:	4628      	mov	r0, r5
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80015ba:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80015bc:	aa03      	add	r2, sp, #12
 80015be:	21ec      	movs	r1, #236	; 0xec
 80015c0:	f003 fc24 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80015c4:	aa03      	add	r2, sp, #12
 80015c6:	9400      	str	r4, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	21ec      	movs	r1, #236	; 0xec
 80015cc:	4628      	mov	r0, r5
 80015ce:	f003 fdb3 	bl	8005138 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 80015d2:	f04f 0ce1 	mov.w	ip, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80015d6:	9400      	str	r4, [sp, #0]
 80015d8:	f10d 020d 	add.w	r2, sp, #13
 80015dc:	2301      	movs	r3, #1
 80015de:	21ec      	movs	r1, #236	; 0xec
 80015e0:	4628      	mov	r0, r5
    cmd[1] = 0xE1; // read dig_H regs
 80015e2:	f88d c00d 	strb.w	ip, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80015e6:	f003 fc11 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80015ea:	f10d 020d 	add.w	r2, sp, #13
 80015ee:	9400      	str	r4, [sp, #0]
 80015f0:	2307      	movs	r3, #7
 80015f2:	21ec      	movs	r1, #236	; 0xec
 80015f4:	4628      	mov	r0, r5
 80015f6:	f003 fd9f 	bl	8005138 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80015fa:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <BME280_Init+0x1b8>)
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001600:	f89d 3011 	ldrb.w	r3, [sp, #17]
    dig_H1 = cmd[0];
 8001604:	8014      	strh	r4, [r2, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8001606:	f8bd 400d 	ldrh.w	r4, [sp, #13]
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <BME280_Init+0x1bc>)
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 800160c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8001610:	8014      	strh	r4, [r2, #0]
    dig_H3 = cmd[3];
 8001612:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <BME280_Init+0x1c0>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8001618:	f89d 1012 	ldrb.w	r1, [sp, #18]
    dig_H3 = cmd[3];
 800161c:	8014      	strh	r4, [r2, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 800161e:	f003 020f 	and.w	r2, r3, #15
 8001622:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	4815      	ldr	r0, [pc, #84]	; (8001680 <BME280_Init+0x1c4>)
 800162a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 800162e:	4c15      	ldr	r4, [pc, #84]	; (8001684 <BME280_Init+0x1c8>)
    dig_H6 = cmd[7];
 8001630:	4915      	ldr	r1, [pc, #84]	; (8001688 <BME280_Init+0x1cc>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8001632:	8003      	strh	r3, [r0, #0]
    dig_H6 = cmd[7];
 8001634:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001638:	8022      	strh	r2, [r4, #0]
    dig_H6 = cmd[7];
 800163a:	800b      	strh	r3, [r1, #0]
}
 800163c:	b008      	add	sp, #32
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	20000750 	.word	0x20000750
 8001644:	20000222 	.word	0x20000222
 8001648:	20000224 	.word	0x20000224
 800164c:	20000226 	.word	0x20000226
 8001650:	20000210 	.word	0x20000210
 8001654:	20000212 	.word	0x20000212
 8001658:	20000214 	.word	0x20000214
 800165c:	20000216 	.word	0x20000216
 8001660:	20000218 	.word	0x20000218
 8001664:	2000021a 	.word	0x2000021a
 8001668:	2000021c 	.word	0x2000021c
 800166c:	2000021e 	.word	0x2000021e
 8001670:	20000220 	.word	0x20000220
 8001674:	20000204 	.word	0x20000204
 8001678:	20000206 	.word	0x20000206
 800167c:	20000208 	.word	0x20000208
 8001680:	2000020c 	.word	0x2000020c
 8001684:	2000020a 	.word	0x2000020a
 8001688:	2000020e 	.word	0x2000020e

0800168c <DS3231_Update>:

uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
 800168c:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd = 0;
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800168e:	2564      	movs	r5, #100	; 0x64
    uint8_t cmd = 0;
 8001690:	f04f 0c00 	mov.w	ip, #0
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001694:	4e11      	ldr	r6, [pc, #68]	; (80016dc <DS3231_Update+0x50>)
void DS3231_Update(void) {
 8001696:	b084      	sub	sp, #16
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001698:	4c11      	ldr	r4, [pc, #68]	; (80016e0 <DS3231_Update+0x54>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800169a:	f10d 020f 	add.w	r2, sp, #15
 800169e:	2301      	movs	r3, #1
 80016a0:	21d0      	movs	r1, #208	; 0xd0
 80016a2:	4630      	mov	r0, r6
 80016a4:	9500      	str	r5, [sp, #0]
    uint8_t cmd = 0;
 80016a6:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 80016aa:	f003 fbaf 	bl	8004e0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80016ae:	4622      	mov	r2, r4
 80016b0:	2313      	movs	r3, #19
 80016b2:	4630      	mov	r0, r6
 80016b4:	21d0      	movs	r1, #208	; 0xd0
 80016b6:	9500      	str	r5, [sp, #0]
 80016b8:	f003 fd3e 	bl	8005138 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 80016bc:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <DS3231_Update+0x58>)
 80016c2:	68e2      	ldr	r2, [r4, #12]
 80016c4:	6824      	ldr	r4, [r4, #0]
 80016c6:	f8c3 0005 	str.w	r0, [r3, #5]
 80016ca:	f8c3 4001 	str.w	r4, [r3, #1]
 80016ce:	f8c3 1009 	str.w	r1, [r3, #9]
 80016d2:	f8c3 200d 	str.w	r2, [r3, #13]
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 80016d6:	b004      	add	sp, #16
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	bf00      	nop
 80016dc:	20000750 	.word	0x20000750
 80016e0:	2000022c 	.word	0x2000022c
 80016e4:	20000240 	.word	0x20000240

080016e8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 80016e8:	b508      	push	{r3, lr}
	DS3231_Update();
 80016ea:	f7ff ffcf 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <DS3231_getSec+0x1c>)
 80016f0:	7818      	ldrb	r0, [r3, #0]
    return ((val / 16 * 10) + (val % 16));
 80016f2:	0903      	lsrs	r3, r0, #4
 80016f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016f8:	f000 000f 	and.w	r0, r0, #15
 80016fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001700:	b2c0      	uxtb	r0, r0
 8001702:	bd08      	pop	{r3, pc}
 8001704:	2000022c 	.word	0x2000022c

08001708 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8001708:	b508      	push	{r3, lr}
	DS3231_Update();
 800170a:	f7ff ffbf 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <DS3231_getMin+0x1c>)
 8001710:	7858      	ldrb	r0, [r3, #1]
    return ((val / 16 * 10) + (val % 16));
 8001712:	0903      	lsrs	r3, r0, #4
 8001714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001718:	f000 000f 	and.w	r0, r0, #15
 800171c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001720:	b2c0      	uxtb	r0, r0
 8001722:	bd08      	pop	{r3, pc}
 8001724:	2000022c 	.word	0x2000022c

08001728 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8001728:	b508      	push	{r3, lr}
	DS3231_Update();
 800172a:	f7ff ffaf 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <DS3231_getHrs+0x1c>)
 8001730:	7898      	ldrb	r0, [r3, #2]
    return ((val / 16 * 10) + (val % 16));
 8001732:	0903      	lsrs	r3, r0, #4
 8001734:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001738:	f000 000f 	and.w	r0, r0, #15
 800173c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001740:	b2c0      	uxtb	r0, r0
 8001742:	bd08      	pop	{r3, pc}
 8001744:	2000022c 	.word	0x2000022c

08001748 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8001748:	b508      	push	{r3, lr}
	DS3231_Update();
 800174a:	f7ff ff9f 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <DS3231_getDay+0x1c>)
 8001750:	78d8      	ldrb	r0, [r3, #3]
    return ((val / 16 * 10) + (val % 16));
 8001752:	0903      	lsrs	r3, r0, #4
 8001754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001758:	f000 000f 	and.w	r0, r0, #15
 800175c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001760:	b2c0      	uxtb	r0, r0
 8001762:	bd08      	pop	{r3, pc}
 8001764:	2000022c 	.word	0x2000022c

08001768 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8001768:	b508      	push	{r3, lr}
	DS3231_Update();
 800176a:	f7ff ff8f 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <DS3231_getDate+0x1c>)
 8001770:	7918      	ldrb	r0, [r3, #4]
    return ((val / 16 * 10) + (val % 16));
 8001772:	0903      	lsrs	r3, r0, #4
 8001774:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001778:	f000 000f 	and.w	r0, r0, #15
 800177c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001780:	b2c0      	uxtb	r0, r0
 8001782:	bd08      	pop	{r3, pc}
 8001784:	2000022c 	.word	0x2000022c

08001788 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8001788:	b508      	push	{r3, lr}
	DS3231_Update();
 800178a:	f7ff ff7f 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <DS3231_getMonth+0x1c>)
 8001790:	7958      	ldrb	r0, [r3, #5]
    return ((val / 16 * 10) + (val % 16));
 8001792:	0903      	lsrs	r3, r0, #4
 8001794:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001798:	f000 000f 	and.w	r0, r0, #15
 800179c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80017a0:	b2c0      	uxtb	r0, r0
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	2000022c 	.word	0x2000022c

080017a8 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 80017a8:	b508      	push	{r3, lr}
	DS3231_Update();
 80017aa:	f7ff ff6f 	bl	800168c <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <DS3231_getYear+0x1c>)
 80017b0:	7998      	ldrb	r0, [r3, #6]
    return ((val / 16 * 10) + (val % 16));
 80017b2:	0903      	lsrs	r3, r0, #4
 80017b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017b8:	f000 000f 	and.w	r0, r0, #15
 80017bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80017c0:	b2c0      	uxtb	r0, r0
 80017c2:	bd08      	pop	{r3, pc}
 80017c4:	2000022c 	.word	0x2000022c

080017c8 <DS3231_setSec>:
    t *= 0.25;
    t += tempMSB;
    return t;
}

void DS3231_setSec(uint8_t value) {
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[1] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80017cc:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 80017ce:	4d0c      	ldr	r5, [pc, #48]	; (8001800 <DS3231_setSec+0x38>)
void DS3231_setSec(uint8_t value) {
 80017d0:	b082      	sub	sp, #8
    DS3231_Update();
 80017d2:	f7ff ff5b 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80017d6:	fba5 5c04 	umull	r5, ip, r5, r4
 80017da:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80017de:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[1] = decToBcd(value);
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <DS3231_setSec+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 80017e4:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 80017e8:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80017ec:	9600      	str	r6, [sp, #0]
 80017ee:	2311      	movs	r3, #17
 80017f0:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 80017f2:	7054      	strb	r4, [r2, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <DS3231_setSec+0x40>)
 80017f6:	f003 fb09 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 80017fa:	b002      	add	sp, #8
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
 80017fe:	bf00      	nop
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	20000240 	.word	0x20000240
 8001808:	20000750 	.word	0x20000750

0800180c <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001810:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 8001812:	4d0c      	ldr	r5, [pc, #48]	; (8001844 <DS3231_setMin+0x38>)
void DS3231_setMin(uint8_t value) {
 8001814:	b082      	sub	sp, #8
    DS3231_Update();
 8001816:	f7ff ff39 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800181a:	fba5 5c04 	umull	r5, ip, r5, r4
 800181e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001822:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[2] = decToBcd(value);
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <DS3231_setMin+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 8001828:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 800182c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001830:	9600      	str	r6, [sp, #0]
 8001832:	2311      	movs	r3, #17
 8001834:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 8001836:	7094      	strb	r4, [r2, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <DS3231_setMin+0x40>)
 800183a:	f003 fae7 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 800183e:	b002      	add	sp, #8
 8001840:	bd70      	pop	{r4, r5, r6, pc}
 8001842:	bf00      	nop
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	20000240 	.word	0x20000240
 800184c:	20000750 	.word	0x20000750

08001850 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001854:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 8001856:	4d0c      	ldr	r5, [pc, #48]	; (8001888 <DS3231_setHrs+0x38>)
void DS3231_setHrs(uint8_t value) {
 8001858:	b082      	sub	sp, #8
    DS3231_Update();
 800185a:	f7ff ff17 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800185e:	fba5 5c04 	umull	r5, ip, r5, r4
 8001862:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001866:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[3] = decToBcd(value);
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <DS3231_setHrs+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 800186c:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 8001870:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001874:	9600      	str	r6, [sp, #0]
 8001876:	2311      	movs	r3, #17
 8001878:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 800187a:	70d4      	strb	r4, [r2, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <DS3231_setHrs+0x40>)
 800187e:	f003 fac5 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 8001882:	b002      	add	sp, #8
 8001884:	bd70      	pop	{r4, r5, r6, pc}
 8001886:	bf00      	nop
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	20000240 	.word	0x20000240
 8001890:	20000750 	.word	0x20000750

08001894 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001898:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 800189a:	4d0c      	ldr	r5, [pc, #48]	; (80018cc <DS3231_setDay+0x38>)
void DS3231_setDay(uint8_t value) {
 800189c:	b082      	sub	sp, #8
    DS3231_Update();
 800189e:	f7ff fef5 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80018a2:	fba5 5c04 	umull	r5, ip, r5, r4
 80018a6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80018aa:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[4] = decToBcd(value);
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <DS3231_setDay+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 80018b0:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 80018b4:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80018b8:	9600      	str	r6, [sp, #0]
 80018ba:	2311      	movs	r3, #17
 80018bc:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[4] = decToBcd(value);
 80018be:	7114      	strb	r4, [r2, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <DS3231_setDay+0x40>)
 80018c2:	f003 faa3 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 80018c6:	b002      	add	sp, #8
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
 80018ca:	bf00      	nop
 80018cc:	cccccccd 	.word	0xcccccccd
 80018d0:	20000240 	.word	0x20000240
 80018d4:	20000750 	.word	0x20000750

080018d8 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80018dc:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 80018de:	4d0c      	ldr	r5, [pc, #48]	; (8001910 <DS3231_setDate+0x38>)
void DS3231_setDate(uint8_t value) {
 80018e0:	b082      	sub	sp, #8
    DS3231_Update();
 80018e2:	f7ff fed3 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80018e6:	fba5 5c04 	umull	r5, ip, r5, r4
 80018ea:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80018ee:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[5] = decToBcd(value);
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <DS3231_setDate+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 80018f4:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 80018f8:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80018fc:	9600      	str	r6, [sp, #0]
 80018fe:	2311      	movs	r3, #17
 8001900:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8001902:	7154      	strb	r4, [r2, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <DS3231_setDate+0x40>)
 8001906:	f003 fa81 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 800190a:	b002      	add	sp, #8
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	bf00      	nop
 8001910:	cccccccd 	.word	0xcccccccd
 8001914:	20000240 	.word	0x20000240
 8001918:	20000750 	.word	0x20000750

0800191c <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001920:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 8001922:	4d0c      	ldr	r5, [pc, #48]	; (8001954 <DS3231_setMonth+0x38>)
void DS3231_setMonth(uint8_t value) {
 8001924:	b082      	sub	sp, #8
    DS3231_Update();
 8001926:	f7ff feb1 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800192a:	fba5 5c04 	umull	r5, ip, r5, r4
 800192e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001932:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[6] = decToBcd(value);
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <DS3231_setMonth+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 8001938:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 800193c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001940:	9600      	str	r6, [sp, #0]
 8001942:	2311      	movs	r3, #17
 8001944:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8001946:	7194      	strb	r4, [r2, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <DS3231_setMonth+0x40>)
 800194a:	f003 fa5f 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 800194e:	b002      	add	sp, #8
 8001950:	bd70      	pop	{r4, r5, r6, pc}
 8001952:	bf00      	nop
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	20000240 	.word	0x20000240
 800195c:	20000750 	.word	0x20000750

08001960 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	4604      	mov	r4, r0
    DS3231_Update();
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001964:	2664      	movs	r6, #100	; 0x64
    return ((val / 10 * 16) + (val % 10));
 8001966:	4d0c      	ldr	r5, [pc, #48]	; (8001998 <DS3231_setYear+0x38>)
void DS3231_setYear(uint8_t value) {
 8001968:	b082      	sub	sp, #8
    DS3231_Update();
 800196a:	f7ff fe8f 	bl	800168c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800196e:	fba5 5c04 	umull	r5, ip, r5, r4
 8001972:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001976:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    rtcBufferSet[7] = decToBcd(value);
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <DS3231_setYear+0x3c>)
    return ((val / 10 * 16) + (val % 10));
 800197c:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 8001980:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001984:	9600      	str	r6, [sp, #0]
 8001986:	2311      	movs	r3, #17
 8001988:	21d0      	movs	r1, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 800198a:	71d4      	strb	r4, [r2, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <DS3231_setYear+0x40>)
 800198e:	f003 fa3d 	bl	8004e0c <HAL_I2C_Master_Transmit>
}
 8001992:	b002      	add	sp, #8
 8001994:	bd70      	pop	{r4, r5, r6, pc}
 8001996:	bf00      	nop
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	20000240 	.word	0x20000240
 80019a0:	20000750 	.word	0x20000750

080019a4 <RGB>:
#include "hx8357.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80019a4:	0209      	lsls	r1, r1, #8
 80019a6:	eb01 4000 	add.w	r0, r1, r0, lsl #16
}
 80019aa:	4410      	add	r0, r2
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80019b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b4:	460c      	mov	r4, r1
 80019b6:	4605      	mov	r5, r0
 80019b8:	4694      	mov	ip, r2
	LCD_RS_R
 80019ba:	48cc      	ldr	r0, [pc, #816]	; (8001cec <LCD_Rect_Fill+0x33c>)
{
 80019bc:	b091      	sub	sp, #68	; 0x44
	LCD_RS_S
 80019be:	4680      	mov	r8, r0
{
 80019c0:	9501      	str	r5, [sp, #4]
  data[1] = x1 & 0xFF;
 80019c2:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019c6:	f104 3eff 	add.w	lr, r4, #4294967295
	data[0] = x1 >> 8;
 80019ca:	0a24      	lsrs	r4, r4, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019cc:	449e      	add	lr, r3
	data[0] = x1 >> 8;
 80019ce:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80019d2:	fb03 f40c 	mul.w	r4, r3, ip
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019d6:	9b01      	ldr	r3, [sp, #4]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80019d8:	4ec5      	ldr	r6, [pc, #788]	; (8001cf0 <LCD_Rect_Fill+0x340>)
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019da:	3b01      	subs	r3, #1
 80019dc:	449c      	add	ip, r3
 80019de:	fa1f f38c 	uxth.w	r3, ip
	LCD_RS_R
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
  data[3] = x2 & 0xFF;
 80019e6:	f88d e03f 	strb.w	lr, [sp, #63]	; 0x3f
  data[2] = x2 >> 8;
 80019ea:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80019ee:	f88d e03e 	strb.w	lr, [sp, #62]	; 0x3e
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019f2:	9302      	str	r3, [sp, #8]
{
 80019f4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80019f6:	940d      	str	r4, [sp, #52]	; 0x34
	LCD_RS_R
 80019f8:	f002 fec4 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a02:	4640      	mov	r0, r8
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001a04:	4dbb      	ldr	r5, [pc, #748]	; (8001cf4 <LCD_Rect_Fill+0x344>)
	LCD_CS_R
 8001a06:	f002 febd 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f002 feb8 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f002 feb3 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2108      	movs	r1, #8
 8001a22:	4628      	mov	r0, r5
 8001a24:	f002 feae 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f002 fea9 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001a32:	2200      	movs	r2, #0
 8001a34:	2102      	movs	r1, #2
 8001a36:	4628      	mov	r0, r5
 8001a38:	f002 fea4 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4628      	mov	r0, r5
 8001a42:	f002 fe9f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f002 fe99 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f002 fe93 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2104      	movs	r1, #4
 8001a62:	4630      	mov	r0, r6
 8001a64:	f002 fe8e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f002 fe89 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a72:	2201      	movs	r2, #1
 8001a74:	2110      	movs	r1, #16
 8001a76:	4630      	mov	r0, r6
 8001a78:	f002 fe84 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2120      	movs	r1, #32
 8001a80:	4630      	mov	r0, r6
 8001a82:	f002 fe7f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001a86:	2201      	movs	r2, #1
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f002 fe7a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001a90:	2200      	movs	r2, #0
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	4630      	mov	r0, r6
 8001a96:	f002 fe75 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f002 fe70 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f002 fe6b 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f002 fe66 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2102      	movs	r1, #2
 8001abc:	4640      	mov	r0, r8
 8001abe:	f002 fe61 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001ac2:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001acc:	4640      	mov	r0, r8
 8001ace:	46ca      	mov	sl, r9
 8001ad0:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
 8001ad4:	f002 fe56 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_S
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4640      	mov	r0, r8
 8001adc:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001ade:	f81a 4b01 	ldrb.w	r4, [sl], #1
	LCD_RS_S
 8001ae2:	f002 fe4f 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aec:	4640      	mov	r0, r8
 8001aee:	f002 fe49 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001af2:	2200      	movs	r2, #0
 8001af4:	2102      	movs	r1, #2
 8001af6:	4630      	mov	r0, r6
 8001af8:	f002 fe44 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	4630      	mov	r0, r6
 8001b02:	f002 fe3f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f002 fe3a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001b10:	2200      	movs	r2, #0
 8001b12:	2104      	movs	r1, #4
 8001b14:	4628      	mov	r0, r5
 8001b16:	f002 fe35 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f002 fe30 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f002 fe2b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b34:	4628      	mov	r0, r5
 8001b36:	f002 fe25 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b40:	4628      	mov	r0, r5
 8001b42:	f002 fe1f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b46:	09e2      	lsrs	r2, r4, #7
 8001b48:	bf18      	it	ne
 8001b4a:	2201      	movne	r2, #1
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f002 fe18 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b54:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001b58:	bf18      	it	ne
 8001b5a:	2201      	movne	r2, #1
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	4630      	mov	r0, r6
 8001b60:	f002 fe10 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001b64:	f014 0220 	ands.w	r2, r4, #32
 8001b68:	bf18      	it	ne
 8001b6a:	2201      	movne	r2, #1
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f002 fe08 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001b74:	f014 0210 	ands.w	r2, r4, #16
 8001b78:	bf18      	it	ne
 8001b7a:	2201      	movne	r2, #1
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f002 fe00 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001b84:	f014 0208 	ands.w	r2, r4, #8
 8001b88:	bf18      	it	ne
 8001b8a:	2201      	movne	r2, #1
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	4630      	mov	r0, r6
 8001b90:	f002 fdf8 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001b94:	f014 0204 	ands.w	r2, r4, #4
 8001b98:	bf18      	it	ne
 8001b9a:	2201      	movne	r2, #1
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f002 fdf0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ba4:	f014 0202 	ands.w	r2, r4, #2
 8001ba8:	bf18      	it	ne
 8001baa:	2201      	movne	r2, #1
 8001bac:	2110      	movs	r1, #16
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f002 fde8 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bb4:	f014 0401 	ands.w	r4, r4, #1
 8001bb8:	f000 82ea 	beq.w	8002190 <LCD_Rect_Fill+0x7e0>
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f002 fddf 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4640      	mov	r0, r8
 8001bcc:	f002 fdda 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4640      	mov	r0, r8
 8001bd6:	f002 fdd5 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be0:	4640      	mov	r0, r8
 8001be2:	f002 fdcf 	bl	8004784 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001be6:	45d3      	cmp	fp, sl
 8001be8:	f47f af76 	bne.w	8001ad8 <LCD_Rect_Fill+0x128>
  data[1] = y1;
 8001bec:	9b01      	ldr	r3, [sp, #4]
	LCD_RS_R
 8001bee:	2200      	movs	r2, #0
  data[1] = y1;
 8001bf0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	data[0] = y1 >> 8;
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  data[3] = y2;
 8001bfa:	9b02      	ldr	r3, [sp, #8]
	LCD_RS_R
 8001bfc:	2101      	movs	r1, #1
  data[2] = y2 >> 8;
 8001bfe:	ea4f 2c13 	mov.w	ip, r3, lsr #8
	LCD_RS_R
 8001c02:	483a      	ldr	r0, [pc, #232]	; (8001cec <LCD_Rect_Fill+0x33c>)
  data[3] = y2;
 8001c04:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  data[2] = y2 >> 8;
 8001c08:	f88d c03e 	strb.w	ip, [sp, #62]	; 0x3e
	LCD_RS_R
 8001c0c:	f002 fdba 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c16:	4835      	ldr	r0, [pc, #212]	; (8001cec <LCD_Rect_Fill+0x33c>)
 8001c18:	f002 fdb4 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2102      	movs	r1, #2
 8001c20:	4833      	ldr	r0, [pc, #204]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c22:	f002 fdaf 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001c26:	2200      	movs	r2, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4831      	ldr	r0, [pc, #196]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c2c:	f002 fdaa 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001c30:	2200      	movs	r2, #0
 8001c32:	2108      	movs	r1, #8
 8001c34:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c36:	f002 fda5 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c40:	f002 fda0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	482a      	ldr	r0, [pc, #168]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c4a:	f002 fd9b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	4828      	ldr	r0, [pc, #160]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c54:	f002 fd96 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c5e:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c60:	f002 fd90 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6a:	4822      	ldr	r0, [pc, #136]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001c6c:	f002 fd8a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c70:	2200      	movs	r2, #0
 8001c72:	2104      	movs	r1, #4
 8001c74:	481e      	ldr	r0, [pc, #120]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c76:	f002 fd85 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c80:	f002 fd80 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c8a:	f002 fd7b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c94:	f002 fd76 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001c9e:	f002 fd71 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <LCD_Rect_Fill+0x340>)
 8001ca8:	f002 fd6c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001cb2:	f002 fd67 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2120      	movs	r1, #32
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001cbc:	f002 fd62 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <LCD_Rect_Fill+0x33c>)
 8001cc6:	f002 fd5d 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <LCD_Rect_Fill+0x33c>)
 8001cd0:	f002 fd58 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cda:	4804      	ldr	r0, [pc, #16]	; (8001cec <LCD_Rect_Fill+0x33c>)
 8001cdc:	f002 fd52 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_S
 8001ce0:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8001cec <LCD_Rect_Fill+0x33c>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001ce4:	4e02      	ldr	r6, [pc, #8]	; (8001cf0 <LCD_Rect_Fill+0x340>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001ce6:	4d03      	ldr	r5, [pc, #12]	; (8001cf4 <LCD_Rect_Fill+0x344>)
 8001ce8:	e006      	b.n	8001cf8 <LCD_Rect_Fill+0x348>
 8001cea:	bf00      	nop
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	40010800 	.word	0x40010800
 8001cf4:	40011000 	.word	0x40011000
	LCD_RS_S
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001cfe:	f819 4b01 	ldrb.w	r4, [r9], #1
	LCD_RS_S
 8001d02:	f002 fd3f 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	f002 fd39 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001d12:	2200      	movs	r2, #0
 8001d14:	2102      	movs	r1, #2
 8001d16:	4630      	mov	r0, r6
 8001d18:	f002 fd34 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4630      	mov	r0, r6
 8001d22:	f002 fd2f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001d26:	2200      	movs	r2, #0
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f002 fd2a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001d30:	2200      	movs	r2, #0
 8001d32:	2104      	movs	r1, #4
 8001d34:	4628      	mov	r0, r5
 8001d36:	f002 fd25 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f002 fd20 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001d44:	2200      	movs	r2, #0
 8001d46:	2101      	movs	r1, #1
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f002 fd1b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d54:	4628      	mov	r0, r5
 8001d56:	f002 fd15 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d60:	4628      	mov	r0, r5
 8001d62:	f002 fd0f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d66:	09e2      	lsrs	r2, r4, #7
 8001d68:	bf18      	it	ne
 8001d6a:	2201      	movne	r2, #1
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f002 fd08 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d74:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001d78:	bf18      	it	ne
 8001d7a:	2201      	movne	r2, #1
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f002 fd00 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d84:	f014 0220 	ands.w	r2, r4, #32
 8001d88:	bf18      	it	ne
 8001d8a:	2201      	movne	r2, #1
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4630      	mov	r0, r6
 8001d90:	f002 fcf8 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d94:	f014 0210 	ands.w	r2, r4, #16
 8001d98:	bf18      	it	ne
 8001d9a:	2201      	movne	r2, #1
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	4630      	mov	r0, r6
 8001da0:	f002 fcf0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001da4:	f014 0208 	ands.w	r2, r4, #8
 8001da8:	bf18      	it	ne
 8001daa:	2201      	movne	r2, #1
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	4630      	mov	r0, r6
 8001db0:	f002 fce8 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001db4:	f014 0204 	ands.w	r2, r4, #4
 8001db8:	bf18      	it	ne
 8001dba:	2201      	movne	r2, #1
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f002 fce0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dc4:	f014 0202 	ands.w	r2, r4, #2
 8001dc8:	bf18      	it	ne
 8001dca:	2201      	movne	r2, #1
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f002 fcd8 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001dd4:	f014 0401 	ands.w	r4, r4, #1
 8001dd8:	f000 81d8 	beq.w	800218c <LCD_Rect_Fill+0x7dc>
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2120      	movs	r1, #32
 8001de0:	4628      	mov	r0, r5
 8001de2:	f002 fccf 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001de6:	2200      	movs	r2, #0
 8001de8:	2102      	movs	r1, #2
 8001dea:	4640      	mov	r0, r8
 8001dec:	f002 fcca 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001df0:	2201      	movs	r2, #1
 8001df2:	2102      	movs	r1, #2
 8001df4:	4640      	mov	r0, r8
 8001df6:	f002 fcc5 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e00:	4640      	mov	r0, r8
 8001e02:	f002 fcbf 	bl	8004784 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001e06:	45d9      	cmp	r9, fp
 8001e08:	f47f af76 	bne.w	8001cf8 <LCD_Rect_Fill+0x348>
	LCD_RS_R
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2101      	movs	r1, #1
 8001e10:	48cf      	ldr	r0, [pc, #828]	; (8002150 <LCD_Rect_Fill+0x7a0>)
 8001e12:	f002 fcb7 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1c:	48cc      	ldr	r0, [pc, #816]	; (8002150 <LCD_Rect_Fill+0x7a0>)
 8001e1e:	f002 fcb1 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001e22:	2200      	movs	r2, #0
 8001e24:	2102      	movs	r1, #2
 8001e26:	48cb      	ldr	r0, [pc, #812]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e28:	f002 fcac 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	48c8      	ldr	r0, [pc, #800]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e32:	f002 fca7 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001e36:	2200      	movs	r2, #0
 8001e38:	2108      	movs	r1, #8
 8001e3a:	48c7      	ldr	r0, [pc, #796]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e3c:	f002 fca2 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001e40:	2200      	movs	r2, #0
 8001e42:	2104      	movs	r1, #4
 8001e44:	48c4      	ldr	r0, [pc, #784]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e46:	f002 fc9d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	48c2      	ldr	r0, [pc, #776]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e50:	f002 fc98 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001e54:	2200      	movs	r2, #0
 8001e56:	2101      	movs	r1, #1
 8001e58:	48bf      	ldr	r0, [pc, #764]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e5a:	f002 fc93 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e64:	48bc      	ldr	r0, [pc, #752]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e66:	f002 fc8d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e70:	48b9      	ldr	r0, [pc, #740]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001e72:	f002 fc87 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	48b6      	ldr	r0, [pc, #728]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e7c:	f002 fc82 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e80:	2200      	movs	r2, #0
 8001e82:	2108      	movs	r1, #8
 8001e84:	48b3      	ldr	r0, [pc, #716]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e86:	f002 fc7d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	48b1      	ldr	r0, [pc, #708]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e90:	f002 fc78 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e94:	2200      	movs	r2, #0
 8001e96:	2120      	movs	r1, #32
 8001e98:	48ae      	ldr	r0, [pc, #696]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001e9a:	f002 fc73 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	48ac      	ldr	r0, [pc, #688]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001ea4:	f002 fc6e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	48a9      	ldr	r0, [pc, #676]	; (8002154 <LCD_Rect_Fill+0x7a4>)
 8001eae:	f002 fc69 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	48a8      	ldr	r0, [pc, #672]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001eb8:	f002 fc64 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	48a5      	ldr	r0, [pc, #660]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001ec2:	f002 fc5f 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2102      	movs	r1, #2
 8001eca:	48a1      	ldr	r0, [pc, #644]	; (8002150 <LCD_Rect_Fill+0x7a0>)
 8001ecc:	f002 fc5a 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	489e      	ldr	r0, [pc, #632]	; (8002150 <LCD_Rect_Fill+0x7a0>)
 8001ed6:	f002 fc55 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee0:	489b      	ldr	r0, [pc, #620]	; (8002150 <LCD_Rect_Fill+0x7a0>)
 8001ee2:	f002 fc4f 	bl	8004784 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80df 	beq.w	80020ac <LCD_Rect_Fill+0x6fc>
 8001eee:	f04f 0900 	mov.w	r9, #0
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001ef2:	f3c7 2685 	ubfx	r6, r7, #10, #6
 8001ef6:	f3c7 43c4 	ubfx	r3, r7, #19, #5
 8001efa:	0176      	lsls	r6, r6, #5
 8001efc:	ea46 26c3 	orr.w	r6, r6, r3, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001f00:	f3c3 1310 	ubfx	r3, r3, #4, #17
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f3c6 3380 	ubfx	r3, r6, #14, #1
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	f3c6 3340 	ubfx	r3, r6, #13, #1
 8001f10:	9303      	str	r3, [sp, #12]
 8001f12:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8001f16:	9304      	str	r3, [sp, #16]
 8001f18:	f3c6 23c0 	ubfx	r3, r6, #11, #1
 8001f1c:	9305      	str	r3, [sp, #20]
 8001f1e:	f3c6 2380 	ubfx	r3, r6, #10, #1
 8001f22:	9306      	str	r3, [sp, #24]
 8001f24:	f3c6 2340 	ubfx	r3, r6, #9, #1
 8001f28:	9307      	str	r3, [sp, #28]
 8001f2a:	f3c6 2300 	ubfx	r3, r6, #8, #1
 8001f2e:	9308      	str	r3, [sp, #32]
 8001f30:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8001f34:	9309      	str	r3, [sp, #36]	; 0x24
 8001f36:	f3c6 1380 	ubfx	r3, r6, #6, #1
 8001f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001f3c:	f3c7 1340 	ubfx	r3, r7, #5, #1
 8001f40:	930b      	str	r3, [sp, #44]	; 0x2c
	LCD_RS_S
 8001f42:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8002150 <LCD_Rect_Fill+0x7a0>
 8001f46:	f3c7 1300 	ubfx	r3, r7, #4, #1
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001f4a:	4d82      	ldr	r5, [pc, #520]	; (8002154 <LCD_Rect_Fill+0x7a4>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001f4c:	4c82      	ldr	r4, [pc, #520]	; (8002158 <LCD_Rect_Fill+0x7a8>)
 8001f4e:	f3c7 1bc0 	ubfx	fp, r7, #7, #1
 8001f52:	f3c7 1a80 	ubfx	sl, r7, #6, #1
 8001f56:	f3c6 1640 	ubfx	r6, r6, #5, #1
 8001f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8001f5c:	f3c7 07c0 	ubfx	r7, r7, #3, #1
	LCD_RS_S
 8001f60:	2201      	movs	r2, #1
 8001f62:	4640      	mov	r0, r8
 8001f64:	4611      	mov	r1, r2
 8001f66:	f002 fc0d 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f70:	4640      	mov	r0, r8
 8001f72:	f002 fc07 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001f76:	9b01      	ldr	r3, [sp, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ef 	beq.w	800215c <LCD_Rect_Fill+0x7ac>
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2102      	movs	r1, #2
 8001f82:	4628      	mov	r0, r5
 8001f84:	f002 fbfe 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001f88:	9b02      	ldr	r3, [sp, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80ef 	beq.w	800216e <LCD_Rect_Fill+0x7be>
 8001f90:	2201      	movs	r2, #1
 8001f92:	4628      	mov	r0, r5
 8001f94:	4611      	mov	r1, r2
 8001f96:	f002 fbf5 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001f9a:	9b03      	ldr	r3, [sp, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ef 	beq.w	8002180 <LCD_Rect_Fill+0x7d0>
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f002 fbec 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001fac:	9b04      	ldr	r3, [sp, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80c7 	beq.w	8002142 <LCD_Rect_Fill+0x792>
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f002 fbe3 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001fbe:	9b05      	ldr	r3, [sp, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80b8 	beq.w	8002136 <LCD_Rect_Fill+0x786>
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f002 fbda 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001fd0:	9b06      	ldr	r3, [sp, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a9 	beq.w	800212a <LCD_Rect_Fill+0x77a>
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4611      	mov	r1, r2
 8001fde:	f002 fbd1 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001fe2:	9b07      	ldr	r3, [sp, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8099 	beq.w	800211c <LCD_Rect_Fill+0x76c>
 8001fea:	2201      	movs	r2, #1
 8001fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f002 fbc7 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001ff6:	9b08      	ldr	r3, [sp, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8088 	beq.w	800210e <LCD_Rect_Fill+0x75e>
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002004:	4620      	mov	r0, r4
 8002006:	f002 fbbd 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d078      	beq.n	8002102 <LCD_Rect_Fill+0x752>
 8002010:	2201      	movs	r2, #1
 8002012:	2104      	movs	r1, #4
 8002014:	4628      	mov	r0, r5
 8002016:	f002 fbb5 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800201a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d06a      	beq.n	80020f6 <LCD_Rect_Fill+0x746>
 8002020:	2201      	movs	r2, #1
 8002022:	2108      	movs	r1, #8
 8002024:	4628      	mov	r0, r5
 8002026:	f002 fbad 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800202a:	2e00      	cmp	r6, #0
 800202c:	d05d      	beq.n	80020ea <LCD_Rect_Fill+0x73a>
 800202e:	2201      	movs	r2, #1
 8002030:	2110      	movs	r1, #16
 8002032:	4628      	mov	r0, r5
 8002034:	f002 fba6 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002038:	f1bb 0f00 	cmp.w	fp, #0
 800203c:	d04f      	beq.n	80020de <LCD_Rect_Fill+0x72e>
 800203e:	2201      	movs	r2, #1
 8002040:	2120      	movs	r1, #32
 8002042:	4628      	mov	r0, r5
 8002044:	f002 fb9e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002048:	f1ba 0f00 	cmp.w	sl, #0
 800204c:	d041      	beq.n	80020d2 <LCD_Rect_Fill+0x722>
 800204e:	2201      	movs	r2, #1
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	4628      	mov	r0, r5
 8002054:	f002 fb96 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800205a:	b3a3      	cbz	r3, 80020c6 <LCD_Rect_Fill+0x716>
 800205c:	2201      	movs	r2, #1
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	4628      	mov	r0, r5
 8002062:	f002 fb8f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002068:	b33b      	cbz	r3, 80020ba <LCD_Rect_Fill+0x70a>
 800206a:	2201      	movs	r2, #1
 800206c:	2110      	movs	r1, #16
 800206e:	4620      	mov	r0, r4
 8002070:	f002 fb88 	bl	8004784 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8002074:	f109 0901 	add.w	r9, r9, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002078:	b1df      	cbz	r7, 80020b2 <LCD_Rect_Fill+0x702>
 800207a:	2201      	movs	r2, #1
 800207c:	2120      	movs	r1, #32
 800207e:	4620      	mov	r0, r4
 8002080:	f002 fb80 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002084:	2200      	movs	r2, #0
 8002086:	2102      	movs	r1, #2
 8002088:	4640      	mov	r0, r8
 800208a:	f002 fb7b 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 800208e:	2201      	movs	r2, #1
 8002090:	2102      	movs	r1, #2
 8002092:	4640      	mov	r0, r8
 8002094:	f002 fb76 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209e:	4640      	mov	r0, r8
 80020a0:	f002 fb70 	bl	8004784 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80020a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020a6:	454b      	cmp	r3, r9
 80020a8:	f47f af5a 	bne.w	8001f60 <LCD_Rect_Fill+0x5b0>
}
 80020ac:	b011      	add	sp, #68	; 0x44
 80020ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80020b2:	2120      	movs	r1, #32
 80020b4:	4620      	mov	r0, r4
 80020b6:	463a      	mov	r2, r7
 80020b8:	e7e2      	b.n	8002080 <LCD_Rect_Fill+0x6d0>
 80020ba:	461a      	mov	r2, r3
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80020bc:	2110      	movs	r1, #16
 80020be:	4620      	mov	r0, r4
 80020c0:	f002 fb60 	bl	8004784 <HAL_GPIO_WritePin>
 80020c4:	e7d6      	b.n	8002074 <LCD_Rect_Fill+0x6c4>
 80020c6:	461a      	mov	r2, r3
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	4628      	mov	r0, r5
 80020cc:	f002 fb5a 	bl	8004784 <HAL_GPIO_WritePin>
 80020d0:	e7c9      	b.n	8002066 <LCD_Rect_Fill+0x6b6>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80020d2:	4652      	mov	r2, sl
 80020d4:	2140      	movs	r1, #64	; 0x40
 80020d6:	4628      	mov	r0, r5
 80020d8:	f002 fb54 	bl	8004784 <HAL_GPIO_WritePin>
 80020dc:	e7bc      	b.n	8002058 <LCD_Rect_Fill+0x6a8>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80020de:	465a      	mov	r2, fp
 80020e0:	2120      	movs	r1, #32
 80020e2:	4628      	mov	r0, r5
 80020e4:	f002 fb4e 	bl	8004784 <HAL_GPIO_WritePin>
 80020e8:	e7ae      	b.n	8002048 <LCD_Rect_Fill+0x698>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80020ea:	4632      	mov	r2, r6
 80020ec:	2110      	movs	r1, #16
 80020ee:	4628      	mov	r0, r5
 80020f0:	f002 fb48 	bl	8004784 <HAL_GPIO_WritePin>
 80020f4:	e7a0      	b.n	8002038 <LCD_Rect_Fill+0x688>
 80020f6:	461a      	mov	r2, r3
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80020f8:	2108      	movs	r1, #8
 80020fa:	4628      	mov	r0, r5
 80020fc:	f002 fb42 	bl	8004784 <HAL_GPIO_WritePin>
 8002100:	e793      	b.n	800202a <LCD_Rect_Fill+0x67a>
 8002102:	461a      	mov	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002104:	2104      	movs	r1, #4
 8002106:	4628      	mov	r0, r5
 8002108:	f002 fb3c 	bl	8004784 <HAL_GPIO_WritePin>
 800210c:	e785      	b.n	800201a <LCD_Rect_Fill+0x66a>
 800210e:	461a      	mov	r2, r3
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002114:	4620      	mov	r0, r4
 8002116:	f002 fb35 	bl	8004784 <HAL_GPIO_WritePin>
 800211a:	e776      	b.n	800200a <LCD_Rect_Fill+0x65a>
 800211c:	461a      	mov	r2, r3
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800211e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002122:	4620      	mov	r0, r4
 8002124:	f002 fb2e 	bl	8004784 <HAL_GPIO_WritePin>
 8002128:	e765      	b.n	8001ff6 <LCD_Rect_Fill+0x646>
 800212a:	461a      	mov	r2, r3
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800212c:	2101      	movs	r1, #1
 800212e:	4620      	mov	r0, r4
 8002130:	f002 fb28 	bl	8004784 <HAL_GPIO_WritePin>
 8002134:	e755      	b.n	8001fe2 <LCD_Rect_Fill+0x632>
 8002136:	461a      	mov	r2, r3
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002138:	2102      	movs	r1, #2
 800213a:	4620      	mov	r0, r4
 800213c:	f002 fb22 	bl	8004784 <HAL_GPIO_WritePin>
 8002140:	e746      	b.n	8001fd0 <LCD_Rect_Fill+0x620>
 8002142:	461a      	mov	r2, r3
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002144:	2104      	movs	r1, #4
 8002146:	4620      	mov	r0, r4
 8002148:	f002 fb1c 	bl	8004784 <HAL_GPIO_WritePin>
 800214c:	e737      	b.n	8001fbe <LCD_Rect_Fill+0x60e>
 800214e:	bf00      	nop
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40010800 	.word	0x40010800
 8002158:	40011000 	.word	0x40011000
 800215c:	461a      	mov	r2, r3
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800215e:	2102      	movs	r1, #2
 8002160:	4628      	mov	r0, r5
 8002162:	f002 fb0f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002166:	9b02      	ldr	r3, [sp, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f af11 	bne.w	8001f90 <LCD_Rect_Fill+0x5e0>
 800216e:	461a      	mov	r2, r3
 8002170:	2101      	movs	r1, #1
 8002172:	4628      	mov	r0, r5
 8002174:	f002 fb06 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002178:	9b03      	ldr	r3, [sp, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f af11 	bne.w	8001fa2 <LCD_Rect_Fill+0x5f2>
 8002180:	461a      	mov	r2, r3
 8002182:	2108      	movs	r1, #8
 8002184:	4620      	mov	r0, r4
 8002186:	f002 fafd 	bl	8004784 <HAL_GPIO_WritePin>
 800218a:	e70f      	b.n	8001fac <LCD_Rect_Fill+0x5fc>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800218c:	4622      	mov	r2, r4
 800218e:	e626      	b.n	8001dde <LCD_Rect_Fill+0x42e>
 8002190:	2120      	movs	r1, #32
 8002192:	4628      	mov	r0, r5
 8002194:	4622      	mov	r2, r4
 8002196:	e514      	b.n	8001bc2 <LCD_Rect_Fill+0x212>

08002198 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	b087      	sub	sp, #28
 800219e:	461c      	mov	r4, r3
 80021a0:	9305      	str	r3, [sp, #20]
	int deltaX = abs(x2 - x1);
	int deltaY = abs(y2 - y1);
 80021a2:	1a5b      	subs	r3, r3, r1
	int deltaX = abs(x2 - x1);
 80021a4:	1a15      	subs	r5, r2, r0
{
 80021a6:	468b      	mov	fp, r1
	int deltaY = abs(y2 - y1);
 80021a8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
	int deltaX = abs(x2 - x1);
 80021ac:	2d00      	cmp	r5, #0
	int deltaY = abs(y2 - y1);
 80021ae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80021b2:	460b      	mov	r3, r1
	int deltaX = abs(x2 - x1);
 80021b4:	bfb8      	it	lt
 80021b6:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 80021b8:	9104      	str	r1, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 80021ba:	4282      	cmp	r2, r0
 80021bc:	bf8c      	ite	hi
 80021be:	2101      	movhi	r1, #1
 80021c0:	f04f 31ff 	movls.w	r1, #4294967295
{
 80021c4:	4682      	mov	sl, r0
 80021c6:	4616      	mov	r6, r2
	int signY = y1 < y2 ? 1 : -1;
	int error = deltaX - deltaY;
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80021c8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	int signY = y1 < y2 ? 1 : -1;
 80021cc:	455c      	cmp	r4, fp
 80021ce:	bf8c      	ite	hi
 80021d0:	2701      	movhi	r7, #1
 80021d2:	f04f 37ff 	movls.w	r7, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80021d6:	9103      	str	r1, [sp, #12]
	int error = deltaX - deltaY;
 80021d8:	1aec      	subs	r4, r5, r3
		if (x1 == x2 && y1 == y2)
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80021da:	f1c3 0900 	rsb	r9, r3, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80021de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80021e0:	4643      	mov	r3, r8
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	4659      	mov	r1, fp
 80021e6:	4642      	mov	r2, r8
 80021e8:	4650      	mov	r0, sl
 80021ea:	f7ff fbe1 	bl	80019b0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80021ee:	45b2      	cmp	sl, r6
		error2 = error * 2;
 80021f0:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
		}
		if (error2 < deltaX)
		{
			error += deltaX;
			y1 += signY;
 80021f4:	eb0b 0207 	add.w	r2, fp, r7
		if (x1 == x2 && y1 == y2)
 80021f8:	d00e      	beq.n	8002218 <LCD_Line+0x80>
		if (error2 > -deltaY)
 80021fa:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 80021fe:	da05      	bge.n	800220c <LCD_Line+0x74>
			x1 += signX;
 8002200:	9903      	ldr	r1, [sp, #12]
 8002202:	448a      	add	sl, r1
			error -= deltaY;
 8002204:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 8002206:	fa1f fa8a 	uxth.w	sl, sl
			error -= deltaY;
 800220a:	1a64      	subs	r4, r4, r1
		if (error2 < deltaX)
 800220c:	429d      	cmp	r5, r3
 800220e:	dde6      	ble.n	80021de <LCD_Line+0x46>
			error += deltaX;
 8002210:	442c      	add	r4, r5
			y1 += signY;
 8002212:	fa1f fb82 	uxth.w	fp, r2
 8002216:	e7e2      	b.n	80021de <LCD_Line+0x46>
		if (x1 == x2 && y1 == y2)
 8002218:	9905      	ldr	r1, [sp, #20]
 800221a:	458b      	cmp	fp, r1
 800221c:	d1ed      	bne.n	80021fa <LCD_Line+0x62>
		}
	}
}
 800221e:	b007      	add	sp, #28
 8002220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002224 <LCD_Rect>:
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 8002228:	4402      	add	r2, r0
 800222a:	fa1f f982 	uxth.w	r9, r2
	int deltaX = abs(x2 - x1);
 800222e:	eba9 0600 	sub.w	r6, r9, r0
{
 8002232:	b087      	sub	sp, #28
	int deltaX = abs(x2 - x1);
 8002234:	2e00      	cmp	r6, #0
 8002236:	bfb8      	it	lt
 8002238:	4276      	neglt	r6, r6
{
 800223a:	9304      	str	r3, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 800223c:	4581      	cmp	r9, r0
 800223e:	bf8c      	ite	hi
 8002240:	2301      	movhi	r3, #1
 8002242:	f04f 33ff 	movls.w	r3, #4294967295
{
 8002246:	4604      	mov	r4, r0
 8002248:	4688      	mov	r8, r1
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800224a:	468a      	mov	sl, r1
	int deltaX = abs(x2 - x1);
 800224c:	4637      	mov	r7, r6
{
 800224e:	9d11      	ldr	r5, [sp, #68]	; 0x44
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002250:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
{
 8002254:	9003      	str	r0, [sp, #12]
	int signX = x1 < x2 ? 1 : -1;
 8002256:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002258:	465a      	mov	r2, fp
 800225a:	4651      	mov	r1, sl
 800225c:	4620      	mov	r0, r4
 800225e:	465b      	mov	r3, fp
 8002260:	9500      	str	r5, [sp, #0]
 8002262:	f7ff fba5 	bl	80019b0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8002266:	45a1      	cmp	r9, r4
			y1 += signY;
 8002268:	f10a 32ff 	add.w	r2, sl, #4294967295
		if (x1 == x2 && y1 == y2)
 800226c:	d00a      	beq.n	8002284 <LCD_Rect+0x60>
		if (error2 > -deltaY)
 800226e:	007b      	lsls	r3, r7, #1
 8002270:	d002      	beq.n	8002278 <LCD_Rect+0x54>
			x1 += signX;
 8002272:	9902      	ldr	r1, [sp, #8]
 8002274:	440c      	add	r4, r1
 8002276:	b2a4      	uxth	r4, r4
		if (error2 < deltaX)
 8002278:	429e      	cmp	r6, r3
 800227a:	dded      	ble.n	8002258 <LCD_Rect+0x34>
			error += deltaX;
 800227c:	4437      	add	r7, r6
			y1 += signY;
 800227e:	fa1f fa82 	uxth.w	sl, r2
 8002282:	e7e9      	b.n	8002258 <LCD_Rect+0x34>
		if (x1 == x2 && y1 == y2)
 8002284:	45d0      	cmp	r8, sl
 8002286:	d1f2      	bne.n	800226e <LCD_Rect+0x4a>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8002288:	9b04      	ldr	r3, [sp, #16]
	int deltaX = abs(x2 - x1);
 800228a:	46b1      	mov	r9, r6
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800228c:	4443      	add	r3, r8
 800228e:	b29b      	uxth	r3, r3
 8002290:	461f      	mov	r7, r3
 8002292:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002296:	9304      	str	r3, [sp, #16]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002298:	465a      	mov	r2, fp
 800229a:	4639      	mov	r1, r7
 800229c:	4650      	mov	r0, sl
 800229e:	465b      	mov	r3, fp
 80022a0:	9500      	str	r5, [sp, #0]
 80022a2:	f7ff fb85 	bl	80019b0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80022a6:	45a2      	cmp	sl, r4
			y1 += signY;
 80022a8:	f107 32ff 	add.w	r2, r7, #4294967295
		if (x1 == x2 && y1 == y2)
 80022ac:	d00b      	beq.n	80022c6 <LCD_Rect+0xa2>
		if (error2 > -deltaY)
 80022ae:	ea5f 0349 	movs.w	r3, r9, lsl #1
 80022b2:	d003      	beq.n	80022bc <LCD_Rect+0x98>
			x1 += signX;
 80022b4:	9902      	ldr	r1, [sp, #8]
 80022b6:	448a      	add	sl, r1
 80022b8:	fa1f fa8a 	uxth.w	sl, sl
		if (error2 < deltaX)
 80022bc:	42b3      	cmp	r3, r6
 80022be:	daeb      	bge.n	8002298 <LCD_Rect+0x74>
			error += deltaX;
 80022c0:	44b1      	add	r9, r6
			y1 += signY;
 80022c2:	b297      	uxth	r7, r2
 80022c4:	e7e8      	b.n	8002298 <LCD_Rect+0x74>
		if (x1 == x2 && y1 == y2)
 80022c6:	9b04      	ldr	r3, [sp, #16]
 80022c8:	42bb      	cmp	r3, r7
 80022ca:	d1f0      	bne.n	80022ae <LCD_Rect+0x8a>
	int error = deltaX - deltaY;
 80022cc:	4641      	mov	r1, r8
	int deltaY = abs(y2 - y1);
 80022ce:	eba7 0208 	sub.w	r2, r7, r8
 80022d2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80022d6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80022da:	9304      	str	r3, [sp, #16]
	int error = deltaX - deltaY;
 80022dc:	425b      	negs	r3, r3
	int signY = y1 < y2 ? 1 : -1;
 80022de:	45b8      	cmp	r8, r7
 80022e0:	bf34      	ite	cc
 80022e2:	f04f 0a01 	movcc.w	sl, #1
 80022e6:	f04f 3aff 	movcs.w	sl, #4294967295
	int error = deltaX - deltaY;
 80022ea:	9405      	str	r4, [sp, #20]
 80022ec:	4699      	mov	r9, r3
 80022ee:	4644      	mov	r4, r8
 80022f0:	46d8      	mov	r8, fp
 80022f2:	468b      	mov	fp, r1
 80022f4:	9e03      	ldr	r6, [sp, #12]
 80022f6:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80022f8:	4621      	mov	r1, r4
 80022fa:	4643      	mov	r3, r8
 80022fc:	4642      	mov	r2, r8
 80022fe:	4630      	mov	r0, r6
 8002300:	9500      	str	r5, [sp, #0]
 8002302:	f7ff fb55 	bl	80019b0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8002306:	9b03      	ldr	r3, [sp, #12]
		error2 = error * 2;
 8002308:	ea4f 0249 	mov.w	r2, r9, lsl #1
		if (x1 == x2 && y1 == y2)
 800230c:	42b3      	cmp	r3, r6
			y1 += signY;
 800230e:	eb04 010a 	add.w	r1, r4, sl
		if (x1 == x2 && y1 == y2)
 8002312:	d00c      	beq.n	800232e <LCD_Rect+0x10a>
		if (error2 > -deltaY)
 8002314:	9b02      	ldr	r3, [sp, #8]
 8002316:	ebb3 0f49 	cmp.w	r3, r9, lsl #1
 800231a:	da04      	bge.n	8002326 <LCD_Rect+0x102>
			error -= deltaY;
 800231c:	9b04      	ldr	r3, [sp, #16]
			x1 += signX;
 800231e:	3e01      	subs	r6, #1
			error -= deltaY;
 8002320:	eba9 0903 	sub.w	r9, r9, r3
			x1 += signX;
 8002324:	b2b6      	uxth	r6, r6
		if (error2 < deltaX)
 8002326:	2a00      	cmp	r2, #0
 8002328:	d0e6      	beq.n	80022f8 <LCD_Rect+0xd4>
			y1 += signY;
 800232a:	b28c      	uxth	r4, r1
 800232c:	e7e4      	b.n	80022f8 <LCD_Rect+0xd4>
		if (x1 == x2 && y1 == y2)
 800232e:	42bc      	cmp	r4, r7
 8002330:	d1f0      	bne.n	8002314 <LCD_Rect+0xf0>
	int error = deltaX - deltaY;
 8002332:	465b      	mov	r3, fp
 8002334:	9c05      	ldr	r4, [sp, #20]
 8002336:	46c3      	mov	fp, r8
 8002338:	46a1      	mov	r9, r4
 800233a:	4698      	mov	r8, r3
 800233c:	9e02      	ldr	r6, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800233e:	465b      	mov	r3, fp
 8002340:	465a      	mov	r2, fp
 8002342:	4641      	mov	r1, r8
 8002344:	4648      	mov	r0, r9
 8002346:	9500      	str	r5, [sp, #0]
 8002348:	f7ff fb32 	bl	80019b0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800234c:	45a1      	cmp	r9, r4
		error2 = error * 2;
 800234e:	ea4f 0346 	mov.w	r3, r6, lsl #1
			y1 += signY;
 8002352:	eb08 020a 	add.w	r2, r8, sl
		if (x1 == x2 && y1 == y2)
 8002356:	d00e      	beq.n	8002376 <LCD_Rect+0x152>
		if (error2 > -deltaY)
 8002358:	9902      	ldr	r1, [sp, #8]
 800235a:	ebb1 0f46 	cmp.w	r1, r6, lsl #1
 800235e:	da05      	bge.n	800236c <LCD_Rect+0x148>
			error -= deltaY;
 8002360:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 8002362:	f109 39ff 	add.w	r9, r9, #4294967295
			error -= deltaY;
 8002366:	1a76      	subs	r6, r6, r1
			x1 += signX;
 8002368:	fa1f f989 	uxth.w	r9, r9
		if (error2 < deltaX)
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0e6      	beq.n	800233e <LCD_Rect+0x11a>
			y1 += signY;
 8002370:	fa1f f882 	uxth.w	r8, r2
 8002374:	e7e3      	b.n	800233e <LCD_Rect+0x11a>
		if (x1 == x2 && y1 == y2)
 8002376:	45b8      	cmp	r8, r7
 8002378:	d1ee      	bne.n	8002358 <LCD_Rect+0x134>
	LCD_Line(x, y, x, y + h, size, color24);
	LCD_Line(x + w, y, x + w, y + h, size, color24);
}
 800237a:	b007      	add	sp, #28
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002380 <LCD_Circle>:
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8002384:	2700      	movs	r7, #0
{
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800238c:	9307      	str	r3, [sp, #28]
 800238e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
	P = 1 - radius;
 8002390:	f1c2 0301 	rsb	r3, r2, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8002394:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	b_ = radius;
 8002398:	9205      	str	r2, [sp, #20]
	P = 1 - radius;
 800239a:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 800239c:	fa1f fb82 	uxth.w	fp, r2
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	b2bd      	uxth	r5, r7
 80023a4:	eb0b 0903 	add.w	r9, fp, r3
 80023a8:	9b02      	ldr	r3, [sp, #8]
 80023aa:	fa1f f989 	uxth.w	r9, r9
 80023ae:	442b      	add	r3, r5
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	9304      	str	r3, [sp, #16]
		if (fill == 1)
 80023b4:	9b07      	ldr	r3, [sp, #28]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d072      	beq.n	80024a0 <LCD_Circle+0x120>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80023ba:	4649      	mov	r1, r9
 80023bc:	4623      	mov	r3, r4
 80023be:	4622      	mov	r2, r4
 80023c0:	9804      	ldr	r0, [sp, #16]
 80023c2:	9600      	str	r6, [sp, #0]
 80023c4:	f7ff faf4 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80023c8:	9b02      	ldr	r3, [sp, #8]
 80023ca:	9903      	ldr	r1, [sp, #12]
 80023cc:	eb0b 0a03 	add.w	sl, fp, r3
 80023d0:	eb01 0805 	add.w	r8, r1, r5
 80023d4:	fa1f fa8a 	uxth.w	sl, sl
 80023d8:	fa1f f888 	uxth.w	r8, r8
 80023dc:	4641      	mov	r1, r8
 80023de:	4650      	mov	r0, sl
 80023e0:	4623      	mov	r3, r4
 80023e2:	4622      	mov	r2, r4
 80023e4:	9600      	str	r6, [sp, #0]
 80023e6:	f7ff fae3 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80023ea:	9a02      	ldr	r2, [sp, #8]
 80023ec:	4649      	mov	r1, r9
 80023ee:	eba2 0905 	sub.w	r9, r2, r5
 80023f2:	fa1f f989 	uxth.w	r9, r9
 80023f6:	4623      	mov	r3, r4
 80023f8:	4622      	mov	r2, r4
 80023fa:	4648      	mov	r0, r9
 80023fc:	9600      	str	r6, [sp, #0]
 80023fe:	f7ff fad7 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8002402:	9a02      	ldr	r2, [sp, #8]
 8002404:	4641      	mov	r1, r8
 8002406:	eba2 080b 	sub.w	r8, r2, fp
 800240a:	fa1f f888 	uxth.w	r8, r8
 800240e:	4623      	mov	r3, r4
 8002410:	4622      	mov	r2, r4
 8002412:	4640      	mov	r0, r8
 8002414:	9600      	str	r6, [sp, #0]
 8002416:	f7ff facb 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	4650      	mov	r0, sl
 800241e:	1b5d      	subs	r5, r3, r5
 8002420:	b2ad      	uxth	r5, r5
 8002422:	4623      	mov	r3, r4
 8002424:	4622      	mov	r2, r4
 8002426:	4629      	mov	r1, r5
 8002428:	9600      	str	r6, [sp, #0]
 800242a:	f7ff fac1 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800242e:	9b03      	ldr	r3, [sp, #12]
 8002430:	4622      	mov	r2, r4
 8002432:	eba3 0a0b 	sub.w	sl, r3, fp
 8002436:	fa1f fa8a 	uxth.w	sl, sl
 800243a:	4623      	mov	r3, r4
 800243c:	4651      	mov	r1, sl
 800243e:	9804      	ldr	r0, [sp, #16]
 8002440:	9600      	str	r6, [sp, #0]
 8002442:	f7ff fab5 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8002446:	4651      	mov	r1, sl
 8002448:	4648      	mov	r0, r9
 800244a:	4623      	mov	r3, r4
 800244c:	4622      	mov	r2, r4
 800244e:	9600      	str	r6, [sp, #0]
 8002450:	f7ff faae 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8002454:	4623      	mov	r3, r4
 8002456:	4622      	mov	r2, r4
 8002458:	4629      	mov	r1, r5
 800245a:	4640      	mov	r0, r8
 800245c:	9600      	str	r6, [sp, #0]
 800245e:	f7ff faa7 	bl	80019b0 <LCD_Rect_Fill>
		}
		if (P < 0)
		{
			P = (P + 3) + (2 * a_);
 8002462:	9806      	ldr	r0, [sp, #24]
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8002464:	9d05      	ldr	r5, [sp, #20]
		if (P < 0)
 8002466:	2800      	cmp	r0, #0
			P = (P + 3) + (2 * a_);
 8002468:	f100 0103 	add.w	r1, r0, #3
			P = (P + 5) + (2 * (a_ - b_));
 800246c:	eba7 0205 	sub.w	r2, r7, r5
 8002470:	f100 0305 	add.w	r3, r0, #5
		if (P < 0)
 8002474:	db0b      	blt.n	800248e <LCD_Circle+0x10e>
			P = (P + 5) + (2 * (a_ - b_));
 8002476:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800247a:	9306      	str	r3, [sp, #24]
			a_++;
			b_--;
 800247c:	9b05      	ldr	r3, [sp, #20]
 800247e:	3701      	adds	r7, #1
 8002480:	3b01      	subs	r3, #1
	while (a_ <= b_)
 8002482:	42bb      	cmp	r3, r7
			b_--;
 8002484:	9305      	str	r3, [sp, #20]
	while (a_ <= b_)
 8002486:	db08      	blt.n	800249a <LCD_Circle+0x11a>
 8002488:	fa1f fb83 	uxth.w	fp, r3
 800248c:	e788      	b.n	80023a0 <LCD_Circle+0x20>
			P = (P + 3) + (2 * a_);
 800248e:	eb01 0347 	add.w	r3, r1, r7, lsl #1
 8002492:	3701      	adds	r7, #1
	while (a_ <= b_)
 8002494:	42af      	cmp	r7, r5
			P = (P + 3) + (2 * a_);
 8002496:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 8002498:	dd82      	ble.n	80023a0 <LCD_Circle+0x20>
		}
	}
}
 800249a:	b009      	add	sp, #36	; 0x24
 800249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80024a0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80024a4:	9b02      	ldr	r3, [sp, #8]
 80024a6:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80024aa:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80024ae:	f109 0901 	add.w	r9, r9, #1
 80024b2:	f108 0801 	add.w	r8, r8, #1
 80024b6:	fa1f f989 	uxth.w	r9, r9
 80024ba:	fa1f f888 	uxth.w	r8, r8
 80024be:	1b58      	subs	r0, r3, r5
 80024c0:	ebaa 010b 	sub.w	r1, sl, fp
 80024c4:	4643      	mov	r3, r8
 80024c6:	464a      	mov	r2, r9
 80024c8:	9600      	str	r6, [sp, #0]
 80024ca:	b289      	uxth	r1, r1
 80024cc:	b280      	uxth	r0, r0
 80024ce:	f7ff fa6f 	bl	80019b0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80024d2:	4652      	mov	r2, sl
 80024d4:	9802      	ldr	r0, [sp, #8]
 80024d6:	1b51      	subs	r1, r2, r5
 80024d8:	eba0 000b 	sub.w	r0, r0, fp
 80024dc:	464b      	mov	r3, r9
 80024de:	4642      	mov	r2, r8
 80024e0:	9600      	str	r6, [sp, #0]
 80024e2:	b289      	uxth	r1, r1
 80024e4:	b280      	uxth	r0, r0
 80024e6:	f7ff fa63 	bl	80019b0 <LCD_Rect_Fill>
 80024ea:	e7ba      	b.n	8002462 <LCD_Circle+0xe2>

080024ec <LCD_Font>:
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80024ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f0:	4615      	mov	r5, r2
 80024f2:	b091      	sub	sp, #68	; 0x44
 80024f4:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 80024f8:	9205      	str	r2, [sp, #20]
	int16_t cursor_x = x;
	int16_t cursor_y = y;
 80024fa:	b20a      	sxth	r2, r1
	int16_t cursor_x = x;
 80024fc:	b206      	sxth	r6, r0
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
	int16_t cursor_y = y;
 8002502:	9202      	str	r2, [sp, #8]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002504:	689a      	ldr	r2, [r3, #8]
{
 8002506:	9407      	str	r4, [sp, #28]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002508:	ac0d      	add	r4, sp, #52	; 0x34
 800250a:	c407      	stmia	r4!, {r0, r1, r2}
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800250c:	4628      	mov	r0, r5
	int16_t cursor_x = x;
 800250e:	9608      	str	r6, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002510:	f7fd fe1e 	bl	8000150 <strlen>
 8002514:	2800      	cmp	r0, #0
 8002516:	d075      	beq.n	8002604 <LCD_Font+0x118>
 8002518:	f04f 0b00 	mov.w	fp, #0
	int16_t cursor_x = x;
 800251c:	4634      	mov	r4, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800251e:	465b      	mov	r3, fp
	{
		char c = text[text_pos];
 8002520:	9a05      	ldr	r2, [sp, #20]
 8002522:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 8002524:	2b0a      	cmp	r3, #10
 8002526:	f000 8096 	beq.w	8002656 <LCD_Font+0x16a>
		{
			cursor_x = x;
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800252a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800252e:	429a      	cmp	r2, r3
 8002530:	d861      	bhi.n	80025f6 <LCD_Font+0x10a>
 8002532:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8002536:	4299      	cmp	r1, r3
 8002538:	d35d      	bcc.n	80025f6 <LCD_Font+0x10a>
 800253a:	2b0d      	cmp	r3, #13
 800253c:	d05b      	beq.n	80025f6 <LCD_Font+0x10a>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800253e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 8002546:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 800254a:	6869      	ldr	r1, [r5, #4]
 800254c:	aa0b      	add	r2, sp, #44	; 0x2c
 800254e:	c203      	stmia	r2!, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002550:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8002554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	uint16_t bo = glyph -> bitmapOffset;
 8002556:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800255a:	9306      	str	r3, [sp, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8084 	beq.w	800266a <LCD_Font+0x17e>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
 8002562:	f04f 0a00 	mov.w	sl, #0
 8002566:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	uint8_t bits = 0, bit = 0;
 800256a:	4656      	mov	r6, sl
 800256c:	4657      	mov	r7, sl
 800256e:	4693      	mov	fp, r2
			cursor_x += glyph.xAdvance * size;
 8002570:	b2a3      	uxth	r3, r4
 8002572:	9304      	str	r3, [sp, #16]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002574:	f89d 902e 	ldrb.w	r9, [sp, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8002578:	f8bd 301c 	ldrh.w	r3, [sp, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800257c:	f1b9 0f00 	cmp.w	r9, #0
 8002580:	d027      	beq.n	80025d2 <LCD_Font+0xe6>
 8002582:	2500      	movs	r5, #0
 8002584:	4628      	mov	r0, r5
			if(bit == 0)
 8002586:	2e00      	cmp	r6, #0
 8002588:	d05c      	beq.n	8002644 <LCD_Font+0x158>
			bit >>= 1;
 800258a:	4634      	mov	r4, r6
 800258c:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 800258e:	403c      	ands	r4, r7
				set_pixels++;
 8002590:	f100 0201 	add.w	r2, r0, #1
			if(bits & bit)
 8002594:	d039      	beq.n	800260a <LCD_Font+0x11e>
				set_pixels++;
 8002596:	b290      	uxth	r0, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002598:	3501      	adds	r5, #1
 800259a:	b2ea      	uxtb	r2, r5
 800259c:	454a      	cmp	r2, r9
 800259e:	d3f2      	bcc.n	8002586 <LCD_Font+0x9a>
		if (set_pixels > 0)
 80025a0:	b1b8      	cbz	r0, 80025d2 <LCD_Font+0xe6>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80025a2:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 80025a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80025a8:	4449      	add	r1, r9
 80025aa:	1a09      	subs	r1, r1, r0
 80025ac:	9200      	str	r2, [sp, #0]
 80025ae:	fb03 f200 	mul.w	r2, r3, r0
 80025b2:	9804      	ldr	r0, [sp, #16]
 80025b4:	9c02      	ldr	r4, [sp, #8]
 80025b6:	fb01 0003 	mla	r0, r1, r3, r0
 80025ba:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 80025be:	b292      	uxth	r2, r2
 80025c0:	4451      	add	r1, sl
 80025c2:	fb01 4103 	mla	r1, r1, r3, r4
 80025c6:	b280      	uxth	r0, r0
 80025c8:	b289      	uxth	r1, r1
 80025ca:	9303      	str	r3, [sp, #12]
 80025cc:	f7ff f9f0 	bl	80019b0 <LCD_Rect_Fill>
 80025d0:	9b03      	ldr	r3, [sp, #12]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80025d2:	9906      	ldr	r1, [sp, #24]
 80025d4:	f10a 0a01 	add.w	sl, sl, #1
 80025d8:	fa5f f28a 	uxtb.w	r2, sl
 80025dc:	428a      	cmp	r2, r1
 80025de:	d3cd      	bcc.n	800257c <LCD_Font+0x90>
 80025e0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			cursor_x += glyph.xAdvance * size;
 80025e4:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80025e8:	9a04      	ldr	r2, [sp, #16]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80025ea:	9805      	ldr	r0, [sp, #20]
			cursor_x += glyph.xAdvance * size;
 80025ec:	fb04 2303 	mla	r3, r4, r3, r2
 80025f0:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80025f2:	f7fd fdad 	bl	8000150 <strlen>
 80025f6:	f10b 0b01 	add.w	fp, fp, #1
 80025fa:	fa1f fb8b 	uxth.w	fp, fp
 80025fe:	4583      	cmp	fp, r0
 8002600:	465b      	mov	r3, fp
 8002602:	d38d      	bcc.n	8002520 <LCD_Font+0x34>
		}
	}
}
 8002604:	b011      	add	sp, #68	; 0x44
 8002606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 800260a:	2800      	cmp	r0, #0
 800260c:	d0c4      	beq.n	8002598 <LCD_Font+0xac>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800260e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002610:	fb03 f200 	mul.w	r2, r3, r0
 8002614:	9100      	str	r1, [sp, #0]
 8002616:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 800261a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800261e:	4429      	add	r1, r5
 8002620:	1a08      	subs	r0, r1, r0
 8002622:	9904      	ldr	r1, [sp, #16]
 8002624:	b292      	uxth	r2, r2
 8002626:	fb00 1003 	mla	r0, r0, r3, r1
 800262a:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 800262e:	b280      	uxth	r0, r0
 8002630:	4451      	add	r1, sl
 8002632:	fb01 c103 	mla	r1, r1, r3, ip
 8002636:	b289      	uxth	r1, r1
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	f7ff f9b9 	bl	80019b0 <LCD_Rect_Fill>
				set_pixels = 0;
 800263e:	4620      	mov	r0, r4
 8002640:	9b03      	ldr	r3, [sp, #12]
 8002642:	e7a9      	b.n	8002598 <LCD_Font+0xac>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002644:	f108 0201 	add.w	r2, r8, #1
 8002648:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 800264c:	2480      	movs	r4, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800264e:	2640      	movs	r6, #64	; 0x40
 8002650:	fa1f f882 	uxth.w	r8, r2
 8002654:	e79b      	b.n	800258e <LCD_Font+0xa2>
			cursor_y += font.yAdvance * size;
 8002656:	9a02      	ldr	r2, [sp, #8]
 8002658:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800265c:	9907      	ldr	r1, [sp, #28]
			cursor_x = x;
 800265e:	9c08      	ldr	r4, [sp, #32]
			cursor_y += font.yAdvance * size;
 8002660:	fb03 2301 	mla	r3, r3, r1, r2
 8002664:	b21b      	sxth	r3, r3
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	e7c5      	b.n	80025f6 <LCD_Font+0x10a>
			cursor_x += glyph.xAdvance * size;
 800266a:	b2a3      	uxth	r3, r4
 800266c:	9304      	str	r3, [sp, #16]
			cursor_y += font.yAdvance * size;
 800266e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002672:	e7b7      	b.n	80025e4 <LCD_Font+0xf8>

08002674 <LCD_Init>:

void LCD_Init(void)
{	
 8002674:	b570      	push	{r4, r5, r6, lr}
	LCD_RST_R
 8002676:	4efd      	ldr	r6, [pc, #1012]	; (8002a6c <LCD_Init+0x3f8>)
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800267e:	4630      	mov	r0, r6
 8002680:	f002 f880 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002684:	20c8      	movs	r0, #200	; 0xc8
 8002686:	f001 fdd9 	bl	800423c <HAL_Delay>
	LCD_RST_S
 800268a:	4630      	mov	r0, r6
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002692:	4df7      	ldr	r5, [pc, #988]	; (8002a70 <LCD_Init+0x3fc>)
	LCD_RST_S
 8002694:	f002 f876 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_R
 8002698:	4630      	mov	r0, r6
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	f002 f871 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 80026a2:	4630      	mov	r0, r6
 80026a4:	2200      	movs	r2, #0
 80026a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80026aa:	4cf2      	ldr	r4, [pc, #968]	; (8002a74 <LCD_Init+0x400>)
	LCD_CS_R
 80026ac:	f002 f86a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80026b0:	4628      	mov	r0, r5
 80026b2:	2200      	movs	r2, #0
 80026b4:	2102      	movs	r1, #2
 80026b6:	f002 f865 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80026ba:	4628      	mov	r0, r5
 80026bc:	2200      	movs	r2, #0
 80026be:	2101      	movs	r1, #1
 80026c0:	f002 f860 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80026c4:	4620      	mov	r0, r4
 80026c6:	2200      	movs	r2, #0
 80026c8:	2108      	movs	r1, #8
 80026ca:	f002 f85b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80026ce:	4620      	mov	r0, r4
 80026d0:	2200      	movs	r2, #0
 80026d2:	2104      	movs	r1, #4
 80026d4:	f002 f856 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80026d8:	4620      	mov	r0, r4
 80026da:	2200      	movs	r2, #0
 80026dc:	2102      	movs	r1, #2
 80026de:	f002 f851 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80026e2:	4620      	mov	r0, r4
 80026e4:	2200      	movs	r2, #0
 80026e6:	2101      	movs	r1, #1
 80026e8:	f002 f84c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80026ec:	4620      	mov	r0, r4
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f4:	f002 f846 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80026f8:	4620      	mov	r0, r4
 80026fa:	2200      	movs	r2, #0
 80026fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002700:	f002 f840 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002704:	4628      	mov	r0, r5
 8002706:	2200      	movs	r2, #0
 8002708:	2104      	movs	r1, #4
 800270a:	f002 f83b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800270e:	4628      	mov	r0, r5
 8002710:	2200      	movs	r2, #0
 8002712:	2108      	movs	r1, #8
 8002714:	f002 f836 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002718:	4628      	mov	r0, r5
 800271a:	2200      	movs	r2, #0
 800271c:	2110      	movs	r1, #16
 800271e:	f002 f831 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002722:	4628      	mov	r0, r5
 8002724:	2201      	movs	r2, #1
 8002726:	2120      	movs	r1, #32
 8002728:	f002 f82c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800272c:	4628      	mov	r0, r5
 800272e:	2200      	movs	r2, #0
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	f002 f827 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002736:	4628      	mov	r0, r5
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	f002 f822 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002740:	4620      	mov	r0, r4
 8002742:	2200      	movs	r2, #0
 8002744:	2110      	movs	r1, #16
 8002746:	f002 f81d 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800274a:	4620      	mov	r0, r4
 800274c:	2201      	movs	r2, #1
 800274e:	2120      	movs	r1, #32
 8002750:	f002 f818 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002754:	4630      	mov	r0, r6
 8002756:	2200      	movs	r2, #0
 8002758:	2102      	movs	r1, #2
 800275a:	f002 f813 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 800275e:	4630      	mov	r0, r6
 8002760:	2201      	movs	r2, #1
 8002762:	2102      	movs	r1, #2
 8002764:	f002 f80e 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276e:	4630      	mov	r0, r6
 8002770:	f002 f808 	bl	8004784 <HAL_GPIO_WritePin>
	
  LCD_Send_Cmd(HX8357_SLPOUT);
  HAL_Delay(120);
 8002774:	2078      	movs	r0, #120	; 0x78
 8002776:	f001 fd61 	bl	800423c <HAL_Delay>
	LCD_RS_R
 800277a:	4630      	mov	r0, r6
 800277c:	2200      	movs	r2, #0
 800277e:	2101      	movs	r1, #1
 8002780:	f002 f800 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 8002784:	4630      	mov	r0, r6
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800278c:	f001 fffa 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002790:	4628      	mov	r0, r5
 8002792:	2200      	movs	r2, #0
 8002794:	2102      	movs	r1, #2
 8002796:	f001 fff5 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800279a:	4628      	mov	r0, r5
 800279c:	2200      	movs	r2, #0
 800279e:	2101      	movs	r1, #1
 80027a0:	f001 fff0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80027a4:	4620      	mov	r0, r4
 80027a6:	2200      	movs	r2, #0
 80027a8:	2108      	movs	r1, #8
 80027aa:	f001 ffeb 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80027ae:	4620      	mov	r0, r4
 80027b0:	2200      	movs	r2, #0
 80027b2:	2104      	movs	r1, #4
 80027b4:	f001 ffe6 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80027b8:	4620      	mov	r0, r4
 80027ba:	2200      	movs	r2, #0
 80027bc:	2102      	movs	r1, #2
 80027be:	f001 ffe1 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80027c2:	4620      	mov	r0, r4
 80027c4:	2200      	movs	r2, #0
 80027c6:	2101      	movs	r1, #1
 80027c8:	f001 ffdc 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80027cc:	4620      	mov	r0, r4
 80027ce:	2200      	movs	r2, #0
 80027d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d4:	f001 ffd6 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80027d8:	4620      	mov	r0, r4
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e0:	f001 ffd0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027e4:	4628      	mov	r0, r5
 80027e6:	2200      	movs	r2, #0
 80027e8:	2104      	movs	r1, #4
 80027ea:	f001 ffcb 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027ee:	4628      	mov	r0, r5
 80027f0:	2200      	movs	r2, #0
 80027f2:	2108      	movs	r1, #8
 80027f4:	f001 ffc6 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027f8:	4628      	mov	r0, r5
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	f001 ffc1 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002802:	4628      	mov	r0, r5
 8002804:	2201      	movs	r2, #1
 8002806:	2120      	movs	r1, #32
 8002808:	f001 ffbc 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800280c:	4628      	mov	r0, r5
 800280e:	2201      	movs	r2, #1
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	f001 ffb7 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002816:	4628      	mov	r0, r5
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	f001 ffb2 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002820:	4620      	mov	r0, r4
 8002822:	2201      	movs	r2, #1
 8002824:	2110      	movs	r1, #16
 8002826:	f001 ffad 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800282a:	4620      	mov	r0, r4
 800282c:	2200      	movs	r2, #0
 800282e:	2120      	movs	r1, #32
 8002830:	f001 ffa8 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002834:	4630      	mov	r0, r6
 8002836:	2200      	movs	r2, #0
 8002838:	2102      	movs	r1, #2
 800283a:	f001 ffa3 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 800283e:	4630      	mov	r0, r6
 8002840:	2201      	movs	r2, #1
 8002842:	2102      	movs	r1, #2
 8002844:	f001 ff9e 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002848:	4630      	mov	r0, r6
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002850:	f001 ff98 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_S
 8002854:	2201      	movs	r2, #1
 8002856:	4630      	mov	r0, r6
 8002858:	4611      	mov	r1, r2
 800285a:	f001 ff93 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R	
 800285e:	4630      	mov	r0, r6
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002866:	f001 ff8d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800286a:	4628      	mov	r0, r5
 800286c:	2200      	movs	r2, #0
 800286e:	2102      	movs	r1, #2
 8002870:	f001 ff88 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002874:	4628      	mov	r0, r5
 8002876:	2200      	movs	r2, #0
 8002878:	2101      	movs	r1, #1
 800287a:	f001 ff83 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800287e:	4620      	mov	r0, r4
 8002880:	2200      	movs	r2, #0
 8002882:	2108      	movs	r1, #8
 8002884:	f001 ff7e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002888:	4620      	mov	r0, r4
 800288a:	2200      	movs	r2, #0
 800288c:	2104      	movs	r1, #4
 800288e:	f001 ff79 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002892:	4620      	mov	r0, r4
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	f001 ff74 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800289c:	4620      	mov	r0, r4
 800289e:	2200      	movs	r2, #0
 80028a0:	2101      	movs	r1, #1
 80028a2:	f001 ff6f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80028a6:	4620      	mov	r0, r4
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ae:	f001 ff69 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80028b2:	4620      	mov	r0, r4
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ba:	f001 ff63 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80028be:	4628      	mov	r0, r5
 80028c0:	2200      	movs	r2, #0
 80028c2:	2104      	movs	r1, #4
 80028c4:	f001 ff5e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80028c8:	4628      	mov	r0, r5
 80028ca:	2201      	movs	r2, #1
 80028cc:	2108      	movs	r1, #8
 80028ce:	f001 ff59 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80028d2:	4628      	mov	r0, r5
 80028d4:	2200      	movs	r2, #0
 80028d6:	2110      	movs	r1, #16
 80028d8:	f001 ff54 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80028dc:	4628      	mov	r0, r5
 80028de:	2201      	movs	r2, #1
 80028e0:	2120      	movs	r1, #32
 80028e2:	f001 ff4f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028e6:	4628      	mov	r0, r5
 80028e8:	2200      	movs	r2, #0
 80028ea:	2140      	movs	r1, #64	; 0x40
 80028ec:	f001 ff4a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028f0:	4628      	mov	r0, r5
 80028f2:	2201      	movs	r2, #1
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	f001 ff45 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80028fa:	4620      	mov	r0, r4
 80028fc:	2200      	movs	r2, #0
 80028fe:	2110      	movs	r1, #16
 8002900:	f001 ff40 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002904:	4620      	mov	r0, r4
 8002906:	2201      	movs	r2, #1
 8002908:	2120      	movs	r1, #32
 800290a:	f001 ff3b 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 800290e:	4630      	mov	r0, r6
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	f001 ff36 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002918:	4630      	mov	r0, r6
 800291a:	2201      	movs	r2, #1
 800291c:	2102      	movs	r1, #2
 800291e:	f001 ff31 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002922:	2201      	movs	r2, #1
 8002924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002928:	4630      	mov	r0, r6
 800292a:	f001 ff2b 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_Send_Cmd(HX8357_COLMOD);
	LCD_Send_Dat(0x55);
  HAL_Delay(5);
 800292e:	2005      	movs	r0, #5
 8002930:	f001 fc84 	bl	800423c <HAL_Delay>
	LCD_RS_R
 8002934:	4630      	mov	r0, r6
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	f001 ff23 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 800293e:	4630      	mov	r0, r6
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002946:	f001 ff1d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800294a:	4628      	mov	r0, r5
 800294c:	2200      	movs	r2, #0
 800294e:	2102      	movs	r1, #2
 8002950:	f001 ff18 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002954:	4628      	mov	r0, r5
 8002956:	2200      	movs	r2, #0
 8002958:	2101      	movs	r1, #1
 800295a:	f001 ff13 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800295e:	4620      	mov	r0, r4
 8002960:	2200      	movs	r2, #0
 8002962:	2108      	movs	r1, #8
 8002964:	f001 ff0e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002968:	4620      	mov	r0, r4
 800296a:	2200      	movs	r2, #0
 800296c:	2104      	movs	r1, #4
 800296e:	f001 ff09 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002972:	4620      	mov	r0, r4
 8002974:	2200      	movs	r2, #0
 8002976:	2102      	movs	r1, #2
 8002978:	f001 ff04 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800297c:	4620      	mov	r0, r4
 800297e:	2200      	movs	r2, #0
 8002980:	2101      	movs	r1, #1
 8002982:	f001 feff 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002986:	4620      	mov	r0, r4
 8002988:	2200      	movs	r2, #0
 800298a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800298e:	f001 fef9 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002992:	4620      	mov	r0, r4
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800299a:	f001 fef3 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800299e:	4628      	mov	r0, r5
 80029a0:	2200      	movs	r2, #0
 80029a2:	2104      	movs	r1, #4
 80029a4:	f001 feee 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80029a8:	4628      	mov	r0, r5
 80029aa:	2200      	movs	r2, #0
 80029ac:	2108      	movs	r1, #8
 80029ae:	f001 fee9 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029b2:	4628      	mov	r0, r5
 80029b4:	2201      	movs	r2, #1
 80029b6:	2110      	movs	r1, #16
 80029b8:	f001 fee4 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029bc:	4628      	mov	r0, r5
 80029be:	2200      	movs	r2, #0
 80029c0:	2120      	movs	r1, #32
 80029c2:	f001 fedf 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029c6:	4628      	mov	r0, r5
 80029c8:	2201      	movs	r2, #1
 80029ca:	2140      	movs	r1, #64	; 0x40
 80029cc:	f001 feda 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029d0:	4628      	mov	r0, r5
 80029d2:	2200      	movs	r2, #0
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	f001 fed5 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80029da:	4620      	mov	r0, r4
 80029dc:	2200      	movs	r2, #0
 80029de:	2110      	movs	r1, #16
 80029e0:	f001 fed0 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80029e4:	4620      	mov	r0, r4
 80029e6:	2201      	movs	r2, #1
 80029e8:	2120      	movs	r1, #32
 80029ea:	f001 fecb 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 80029ee:	4630      	mov	r0, r6
 80029f0:	2200      	movs	r2, #0
 80029f2:	2102      	movs	r1, #2
 80029f4:	f001 fec6 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 80029f8:	4630      	mov	r0, r6
 80029fa:	2201      	movs	r2, #1
 80029fc:	2102      	movs	r1, #2
 80029fe:	f001 fec1 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002a02:	4630      	mov	r0, r6
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0a:	f001 febb 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_R
 8002a0e:	4630      	mov	r0, r6
 8002a10:	2200      	movs	r2, #0
 8002a12:	2101      	movs	r1, #1
 8002a14:	f001 feb6 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R
 8002a18:	4630      	mov	r0, r6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a20:	f001 feb0 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002a24:	4628      	mov	r0, r5
 8002a26:	2200      	movs	r2, #0
 8002a28:	2102      	movs	r1, #2
 8002a2a:	f001 feab 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002a2e:	4628      	mov	r0, r5
 8002a30:	2200      	movs	r2, #0
 8002a32:	2101      	movs	r1, #1
 8002a34:	f001 fea6 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002a38:	4620      	mov	r0, r4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	f001 fea1 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002a42:	4620      	mov	r0, r4
 8002a44:	2200      	movs	r2, #0
 8002a46:	2104      	movs	r1, #4
 8002a48:	f001 fe9c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2102      	movs	r1, #2
 8002a52:	f001 fe97 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002a56:	4620      	mov	r0, r4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	f001 fe92 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002a60:	4620      	mov	r0, r4
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a68:	e006      	b.n	8002a78 <LCD_Init+0x404>
 8002a6a:	bf00      	nop
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40011000 	.word	0x40011000
 8002a78:	f001 fe84 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a84:	f001 fe7e 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a88:	4628      	mov	r0, r5
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	f001 fe79 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a92:	4628      	mov	r0, r5
 8002a94:	2200      	movs	r2, #0
 8002a96:	2108      	movs	r1, #8
 8002a98:	f001 fe74 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	f001 fe6f 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2120      	movs	r1, #32
 8002aac:	f001 fe6a 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2140      	movs	r1, #64	; 0x40
 8002ab6:	f001 fe65 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002aba:	4628      	mov	r0, r5
 8002abc:	2201      	movs	r2, #1
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	f001 fe60 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2110      	movs	r1, #16
 8002aca:	f001 fe5b 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002ace:	4620      	mov	r0, r4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	f001 fe56 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002ad8:	4630      	mov	r0, r6
 8002ada:	2200      	movs	r2, #0
 8002adc:	2102      	movs	r1, #2
 8002ade:	f001 fe51 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	f001 fe4c 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002aec:	4630      	mov	r0, r6
 8002aee:	2201      	movs	r2, #1
 8002af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002af4:	f001 fe46 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_RS_S
 8002af8:	2201      	movs	r2, #1
 8002afa:	4630      	mov	r0, r6
 8002afc:	4611      	mov	r1, r2
 8002afe:	f001 fe41 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8002b02:	4630      	mov	r0, r6
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b0a:	f001 fe3b 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002b0e:	4628      	mov	r0, r5
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	f001 fe36 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002b18:	4628      	mov	r0, r5
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f001 fe31 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002b22:	4620      	mov	r0, r4
 8002b24:	2200      	movs	r2, #0
 8002b26:	2108      	movs	r1, #8
 8002b28:	f001 fe2c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2104      	movs	r1, #4
 8002b32:	f001 fe27 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002b36:	4620      	mov	r0, r4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	f001 fe22 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002b40:	4620      	mov	r0, r4
 8002b42:	2200      	movs	r2, #0
 8002b44:	2101      	movs	r1, #1
 8002b46:	f001 fe1d 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b52:	f001 fe17 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002b56:	4620      	mov	r0, r4
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b5e:	f001 fe11 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002b62:	4628      	mov	r0, r5
 8002b64:	2200      	movs	r2, #0
 8002b66:	2104      	movs	r1, #4
 8002b68:	f001 fe0c 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2108      	movs	r1, #8
 8002b72:	f001 fe07 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002b76:	4628      	mov	r0, r5
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	f001 fe02 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002b80:	4628      	mov	r0, r5
 8002b82:	2200      	movs	r2, #0
 8002b84:	2120      	movs	r1, #32
 8002b86:	f001 fdfd 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	f001 fdf8 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002b94:	4628      	mov	r0, r5
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	f001 fdf3 	bl	8004784 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	f001 fdee 	bl	8004784 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002ba8:	4620      	mov	r0, r4
 8002baa:	2200      	movs	r2, #0
 8002bac:	2120      	movs	r1, #32
 8002bae:	f001 fde9 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	f001 fde4 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	f001 fddf 	bl	8004784 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002bc6:	4630      	mov	r0, r6
  LCD_Send_Cmd(HX8357_DISPON);
	
	LCD_Orientation(DEFAULT_ORIENTATION);
}
 8002bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_CS_S
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bd2:	f001 bdd7 	b.w	8004784 <HAL_GPIO_WritePin>
 8002bd6:	bf00      	nop

08002bd8 <uartDecode>:
	}
}

void uartDecode() {

	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002bd8:	f244 5343 	movw	r3, #17731	; 0x4543
void uartDecode() {
 8002bdc:	b570      	push	{r4, r5, r6, lr}
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002bde:	4d33      	ldr	r5, [pc, #204]	; (8002cac <uartDecode+0xd4>)
void uartDecode() {
 8002be0:	b086      	sub	sp, #24
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002be2:	882a      	ldrh	r2, [r5, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d114      	bne.n	8002c12 <uartDecode+0x3a>
 8002be8:	2400      	movs	r4, #0
		for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002bea:	b2a0      	uxth	r0, r4
 8002bec:	2100      	movs	r1, #0
 8002bee:	3401      	adds	r4, #1
 8002bf0:	f7fe fa88 	bl	8001104 <AT24XX_Update>
 8002bf4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002bf8:	d1f7      	bne.n	8002bea <uartDecode+0x12>
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002bfa:	4e2d      	ldr	r6, [pc, #180]	; (8002cb0 <uartDecode+0xd8>)
 8002bfc:	ac01      	add	r4, sp, #4
 8002bfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c02:	6831      	ldr	r1, [r6, #0]
		HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002c04:	2364      	movs	r3, #100	; 0x64
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002c06:	6021      	str	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002c08:	2214      	movs	r2, #20
 8002c0a:	482a      	ldr	r0, [pc, #168]	; (8002cb4 <uartDecode+0xdc>)
 8002c0c:	a901      	add	r1, sp, #4
 8002c0e:	f003 fe93 	bl	8006938 <HAL_UART_Transmit>
	}

	if (memcmp(rx_buffer, "RT", 2) == 0) {
 8002c12:	f245 4352 	movw	r3, #21586	; 0x5452
 8002c16:	882a      	ldrh	r2, [r5, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d007      	beq.n	8002c2c <uartDecode+0x54>

		val[1] = rx_buffer[14];
		DS3231_setDay(atoi(val));
	}

	for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4822      	ldr	r0, [pc, #136]	; (8002cac <uartDecode+0xd4>)
}
 8002c22:	b006      	add	sp, #24
 8002c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8002c28:	f004 b81c 	b.w	8006c64 <memset>
		val[0] = rx_buffer[2];
 8002c2c:	886b      	ldrh	r3, [r5, #2]
		DS3231_setHrs(atoi(val));
 8002c2e:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[2];
 8002c30:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setHrs(atoi(val));
 8002c34:	f003 ffce 	bl	8006bd4 <atoi>
 8002c38:	b2c0      	uxtb	r0, r0
 8002c3a:	f7fe fe09 	bl	8001850 <DS3231_setHrs>
		val[0] = rx_buffer[4];
 8002c3e:	88ab      	ldrh	r3, [r5, #4]
		DS3231_setMin(atoi(val));
 8002c40:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[4];
 8002c42:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setMin(atoi(val));
 8002c46:	f003 ffc5 	bl	8006bd4 <atoi>
 8002c4a:	b2c0      	uxtb	r0, r0
 8002c4c:	f7fe fdde 	bl	800180c <DS3231_setMin>
		val[0] = rx_buffer[6];
 8002c50:	88eb      	ldrh	r3, [r5, #6]
		DS3231_setSec(atoi(val));
 8002c52:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[6];
 8002c54:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setSec(atoi(val));
 8002c58:	f003 ffbc 	bl	8006bd4 <atoi>
 8002c5c:	b2c0      	uxtb	r0, r0
 8002c5e:	f7fe fdb3 	bl	80017c8 <DS3231_setSec>
		val[0] = rx_buffer[8];
 8002c62:	892b      	ldrh	r3, [r5, #8]
		DS3231_setDate(atoi(val));
 8002c64:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[8];
 8002c66:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setDate(atoi(val));
 8002c6a:	f003 ffb3 	bl	8006bd4 <atoi>
 8002c6e:	b2c0      	uxtb	r0, r0
 8002c70:	f7fe fe32 	bl	80018d8 <DS3231_setDate>
		val[0] = rx_buffer[10];
 8002c74:	896b      	ldrh	r3, [r5, #10]
		DS3231_setMonth(atoi(val));
 8002c76:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[10];
 8002c78:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setMonth(atoi(val));
 8002c7c:	f003 ffaa 	bl	8006bd4 <atoi>
 8002c80:	b2c0      	uxtb	r0, r0
 8002c82:	f7fe fe4b 	bl	800191c <DS3231_setMonth>
		val[0] = rx_buffer[12];
 8002c86:	89ab      	ldrh	r3, [r5, #12]
		DS3231_setYear(atoi(val));
 8002c88:	a801      	add	r0, sp, #4
		val[0] = rx_buffer[12];
 8002c8a:	f8ad 3004 	strh.w	r3, [sp, #4]
		DS3231_setYear(atoi(val));
 8002c8e:	f003 ffa1 	bl	8006bd4 <atoi>
 8002c92:	b2c0      	uxtb	r0, r0
 8002c94:	f7fe fe64 	bl	8001960 <DS3231_setYear>
		val[1] = rx_buffer[14];
 8002c98:	7bab      	ldrb	r3, [r5, #14]
		DS3231_setDay(atoi(val));
 8002c9a:	a801      	add	r0, sp, #4
		val[1] = rx_buffer[14];
 8002c9c:	f88d 3005 	strb.w	r3, [sp, #5]
		DS3231_setDay(atoi(val));
 8002ca0:	f003 ff98 	bl	8006bd4 <atoi>
 8002ca4:	b2c0      	uxtb	r0, r0
 8002ca6:	f7fe fdf5 	bl	8001894 <DS3231_setDay>
 8002caa:	e7b7      	b.n	8002c1c <uartDecode+0x44>
 8002cac:	20000850 	.word	0x20000850
 8002cb0:	0800c398 	.word	0x0800c398
 8002cb4:	200007ec 	.word	0x200007ec

08002cb8 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb8:	2300      	movs	r3, #0
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cba:	2201      	movs	r2, #1
{
 8002cbc:	b5d0      	push	{r4, r6, r7, lr}
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cbe:	2001      	movs	r0, #1
{
 8002cc0:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc6:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ccc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002cd0:	e9cd 3303 	strd	r3, r3, [sp, #12]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd4:	9308      	str	r3, [sp, #32]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd6:	9300      	str	r3, [sp, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd8:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cda:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ce0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ce4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cee:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf0:	f002 ff9c 	bl	8005c2c <HAL_RCC_OscConfig>
 8002cf4:	b108      	cbz	r0, 8002cfa <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf6:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <SystemClock_Config+0x40>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cfa:	4603      	mov	r3, r0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cfc:	260f      	movs	r6, #15
 8002cfe:	2702      	movs	r7, #2
 8002d00:	2200      	movs	r2, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d02:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d0c:	e9cd 6700 	strd	r6, r7, [sp]
 8002d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d14:	f003 f97a 	bl	800600c <HAL_RCC_ClockConfig>
 8002d18:	b108      	cbz	r0, 8002d1e <SystemClock_Config+0x66>
 8002d1a:	b672      	cpsid	i
	while (1)
 8002d1c:	e7fe      	b.n	8002d1c <SystemClock_Config+0x64>
}
 8002d1e:	b010      	add	sp, #64	; 0x40
 8002d20:	bdd0      	pop	{r4, r6, r7, pc}
 8002d22:	bf00      	nop

08002d24 <main>:
{
 8002d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	2400      	movs	r4, #0
{
 8002d2a:	b0a3      	sub	sp, #140	; 0x8c
	HAL_Init();
 8002d2c:	f001 fa62 	bl	80041f4 <HAL_Init>
	SystemClock_Config();
 8002d30:	f7ff ffc2 	bl	8002cb8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8002d38:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3c:	4d94      	ldr	r5, [pc, #592]	; (8002f90 <main+0x26c>)
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002d3e:	f24e 013f 	movw	r1, #57407	; 0xe03f
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002d44:	4622      	mov	r2, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	f043 0310 	orr.w	r3, r3, #16
 8002d4a:	61ab      	str	r3, [r5, #24]
 8002d4c:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002d4e:	4891      	ldr	r0, [pc, #580]	; (8002f94 <main+0x270>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	9306      	str	r3, [sp, #24]
 8002d56:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d58:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002d5a:	2600      	movs	r6, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	61ab      	str	r3, [r5, #24]
 8002d62:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002d64:	2703      	movs	r7, #3
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	9307      	str	r3, [sp, #28]
 8002d6c:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	69ab      	ldr	r3, [r5, #24]
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	61ab      	str	r3, [r5, #24]
 8002d76:	69ab      	ldr	r3, [r5, #24]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	9308      	str	r3, [sp, #32]
 8002d7e:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	69ab      	ldr	r3, [r5, #24]
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	61ab      	str	r3, [r5, #24]
 8002d88:	69ab      	ldr	r3, [r5, #24]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002d92:	f001 fcf7 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002d96:	4622      	mov	r2, r4
 8002d98:	21ff      	movs	r1, #255	; 0xff
 8002d9a:	487f      	ldr	r0, [pc, #508]	; (8002f98 <main+0x274>)
 8002d9c:	f001 fcf2 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002da0:	4622      	mov	r2, r4
 8002da2:	f640 4103 	movw	r1, #3075	; 0xc03
 8002da6:	487d      	ldr	r0, [pc, #500]	; (8002f9c <main+0x278>)
 8002da8:	f001 fcec 	bl	8004784 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED_Pin;
 8002dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db0:	2301      	movs	r3, #1
 8002db2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002db6:	2200      	movs	r2, #0
 8002db8:	2302      	movs	r3, #2
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002dba:	4876      	ldr	r0, [pc, #472]	; (8002f94 <main+0x270>)
 8002dbc:	a91a      	add	r1, sp, #104	; 0x68
	GPIO_InitStruct.Pin = LED_Pin;
 8002dbe:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f001 fbd1 	bl	8004568 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002dc6:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8002dca:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dcc:	4871      	ldr	r0, [pc, #452]	; (8002f94 <main+0x270>)
 8002dce:	a91a      	add	r1, sp, #104	; 0x68
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002dd0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002dd4:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd8:	f001 fbc6 	bl	8004568 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	486d      	ldr	r0, [pc, #436]	; (8002f98 <main+0x274>)
 8002de2:	a91a      	add	r1, sp, #104	; 0x68
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002de4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002de8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f001 fbbc 	bl	8004568 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002df0:	f640 4203 	movw	r2, #3075	; 0xc03
 8002df4:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	4869      	ldr	r0, [pc, #420]	; (8002f9c <main+0x278>)
 8002df8:	a91a      	add	r1, sp, #104	; 0x68
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002dfa:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002dfe:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e02:	f001 fbb1 	bl	8004568 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002e06:	2300      	movs	r3, #0
 8002e08:	2204      	movs	r2, #4
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	4864      	ldr	r0, [pc, #400]	; (8002f9c <main+0x278>)
 8002e0c:	a91a      	add	r1, sp, #104	; 0x68
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002e0e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	941c      	str	r4, [sp, #112]	; 0x70
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002e14:	f001 fba8 	bl	8004568 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8002e18:	4861      	ldr	r0, [pc, #388]	; (8002fa0 <main+0x27c>)
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <main+0x280>)
	hi2c1.Init.OwnAddress2 = 0;
 8002e1c:	e9c0 4405 	strd	r4, r4, [r0, #20]
	hi2c1.Instance = I2C1;
 8002e20:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002e22:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <main+0x284>)
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e24:	e9c0 4407 	strd	r4, r4, [r0, #28]
	hi2c1.Init.ClockSpeed = 400000;
 8002e28:	6043      	str	r3, [r0, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e2e:	6084      	str	r4, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002e30:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e32:	6103      	str	r3, [r0, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	f001 ff22 	bl	8004c7c <HAL_I2C_Init>
 8002e38:	b108      	cbz	r0, 8002e3e <main+0x11a>
 8002e3a:	b672      	cpsid	i
	while (1)
 8002e3c:	e7fe      	b.n	8002e3c <main+0x118>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002e3e:	4604      	mov	r4, r0
 8002e40:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e42:	4602      	mov	r2, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	616b      	str	r3, [r5, #20]
 8002e4a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e4c:	4601      	mov	r1, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002e4e:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e52:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002e54:	9305      	str	r3, [sp, #20]
 8002e56:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e58:	f001 fa14 	bl	8004284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e5c:	200c      	movs	r0, #12
 8002e5e:	f001 fa4f 	bl	8004300 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002e62:	4622      	mov	r2, r4
 8002e64:	4621      	mov	r1, r4
 8002e66:	200e      	movs	r0, #14
 8002e68:	f001 fa0c 	bl	8004284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002e6c:	200e      	movs	r0, #14
 8002e6e:	f001 fa47 	bl	8004300 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002e72:	4622      	mov	r2, r4
 8002e74:	4621      	mov	r1, r4
 8002e76:	200f      	movs	r0, #15
 8002e78:	f001 fa04 	bl	8004284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002e7c:	200f      	movs	r0, #15
 8002e7e:	f001 fa3f 	bl	8004300 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e82:	4622      	mov	r2, r4
 8002e84:	4621      	mov	r1, r4
 8002e86:	2010      	movs	r0, #16
 8002e88:	f001 f9fc 	bl	8004284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e8c:	2010      	movs	r0, #16
 8002e8e:	f001 fa37 	bl	8004300 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002e92:	4622      	mov	r2, r4
 8002e94:	4621      	mov	r1, r4
 8002e96:	2011      	movs	r0, #17
 8002e98:	f001 f9f4 	bl	8004284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002e9c:	2011      	movs	r0, #17
 8002e9e:	f001 fa2f 	bl	8004300 <HAL_NVIC_EnableIRQ>
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea2:	230c      	movs	r3, #12
	huart1.Init.BaudRate = 9600;
 8002ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
	huart1.Instance = USART1;
 8002ea8:	4840      	ldr	r0, [pc, #256]	; (8002fac <main+0x288>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002eaa:	6143      	str	r3, [r0, #20]
	huart1.Instance = USART1;
 8002eac:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <main+0x28c>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002eae:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb2:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002eb6:	6104      	str	r4, [r0, #16]
	huart1.Init.BaudRate = 9600;
 8002eb8:	6042      	str	r2, [r0, #4]
	huart1.Instance = USART1;
 8002eba:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ebc:	f003 fcce 	bl	800685c <HAL_UART_Init>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	b108      	cbz	r0, 8002ec8 <main+0x1a4>
 8002ec4:	b672      	cpsid	i
	while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <main+0x1a2>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ec8:	4601      	mov	r1, r0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ece:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8002ed2:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8002ed6:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eda:	900e      	str	r0, [sp, #56]	; 0x38
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	900a      	str	r0, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ede:	9012      	str	r0, [sp, #72]	; 0x48
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee0:	9011      	str	r0, [sp, #68]	; 0x44
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee2:	900b      	str	r0, [sp, #44]	; 0x2c
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	a81a      	add	r0, sp, #104	; 0x68
 8002ee8:	f003 febc 	bl	8006c64 <memset>
	htim1.Init.Period = 65535;
 8002eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
	htim1.Instance = TIM1;
 8002ef0:	4d30      	ldr	r5, [pc, #192]	; (8002fb4 <main+0x290>)
	htim1.Init.Period = 65535;
 8002ef2:	60eb      	str	r3, [r5, #12]
	htim1.Instance = TIM1;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <main+0x294>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ef6:	4628      	mov	r0, r5
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 8002efc:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	61ac      	str	r4, [r5, #24]
	htim1.Instance = TIM1;
 8002f02:	602b      	str	r3, [r5, #0]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f04:	f003 f972 	bl	80061ec <HAL_TIM_Base_Init>
 8002f08:	b108      	cbz	r0, 8002f0e <main+0x1ea>
 8002f0a:	b672      	cpsid	i
	while (1)
 8002f0c:	e7fe      	b.n	8002f0c <main+0x1e8>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f12:	4628      	mov	r0, r5
 8002f14:	a90e      	add	r1, sp, #56	; 0x38
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f16:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f18:	f003 fb9e 	bl	8006658 <HAL_TIM_ConfigClockSource>
 8002f1c:	b108      	cbz	r0, 8002f22 <main+0x1fe>
 8002f1e:	b672      	cpsid	i
	while (1)
 8002f20:	e7fe      	b.n	8002f20 <main+0x1fc>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f22:	4628      	mov	r0, r5
 8002f24:	f003 f9d2 	bl	80062cc <HAL_TIM_PWM_Init>
 8002f28:	b108      	cbz	r0, 8002f2e <main+0x20a>
 8002f2a:	b672      	cpsid	i
	while (1)
 8002f2c:	e7fe      	b.n	8002f2c <main+0x208>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2e:	2600      	movs	r6, #0
 8002f30:	2700      	movs	r7, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f32:	4628      	mov	r0, r5
 8002f34:	a90a      	add	r1, sp, #40	; 0x28
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3a:	f003 fc33 	bl	80067a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	b108      	cbz	r0, 8002f46 <main+0x222>
 8002f42:	b672      	cpsid	i
	while (1)
 8002f44:	e7fe      	b.n	8002f44 <main+0x220>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f46:	f04f 0860 	mov.w	r8, #96	; 0x60
 8002f4a:	f04f 0900 	mov.w	r9, #0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f4e:	9018      	str	r0, [sp, #96]	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f50:	a912      	add	r1, sp, #72	; 0x48
 8002f52:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f54:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 8002f58:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 8002f5c:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f60:	f003 fa7e 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8002f64:	b108      	cbz	r0, 8002f6a <main+0x246>
 8002f66:	b672      	cpsid	i
	while (1)
 8002f68:	e7fe      	b.n	8002f68 <main+0x244>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f70:	9021      	str	r0, [sp, #132]	; 0x84
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f72:	a91a      	add	r1, sp, #104	; 0x68
 8002f74:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f76:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8002f7a:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8002f7e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f82:	f003 fc41 	bl	8006808 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f86:	4604      	mov	r4, r0
 8002f88:	b1c0      	cbz	r0, 8002fbc <main+0x298>
 8002f8a:	b672      	cpsid	i
	while (1)
 8002f8c:	e7fe      	b.n	8002f8c <main+0x268>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40011000 	.word	0x40011000
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	40010c00 	.word	0x40010c00
 8002fa0:	20000750 	.word	0x20000750
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	00061a80 	.word	0x00061a80
 8002fac:	200007ec 	.word	0x200007ec
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	200007a4 	.word	0x200007a4
 8002fb8:	40012c00 	.word	0x40012c00
	HAL_TIM_MspPostInit(&htim1);
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 ffa1 	bl	8003f04 <HAL_TIM_MspPostInit>
	LCD_Init();
 8002fc2:	f7ff fb57 	bl	8002674 <LCD_Init>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8002fc6:	23ff      	movs	r3, #255	; 0xff
 8002fc8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4620      	mov	r0, r4
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fd6:	f7fe fceb 	bl	80019b0 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8002fda:	2101      	movs	r1, #1
 8002fdc:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002fe6:	9400      	str	r4, [sp, #0]
 8002fe8:	f7fe fce2 	bl	80019b0 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 8002fec:	f44f 087f 	mov.w	r8, #16711680	; 0xff0000
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	217f      	movs	r1, #127	; 0x7f
 8002ff4:	e9cd 3800 	strd	r3, r8, [sp]
 8002ff8:	2014      	movs	r0, #20
 8002ffa:	4bc6      	ldr	r3, [pc, #792]	; (8003314 <main+0x5f0>)
 8002ffc:	4ac6      	ldr	r2, [pc, #792]	; (8003318 <main+0x5f4>)
 8002ffe:	f7ff fa75 	bl	80024ec <LCD_Font>
	if (clearEEPROM) for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003002:	4bc6      	ldr	r3, [pc, #792]	; (800331c <main+0x5f8>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 82ba 	bne.w	8003580 <main+0x85c>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 800300c:	f04f 0c00 	mov.w	ip, #0
 8003010:	2501      	movs	r5, #1
 8003012:	217f      	movs	r1, #127	; 0x7f
 8003014:	2014      	movs	r0, #20
 8003016:	4bbf      	ldr	r3, [pc, #764]	; (8003314 <main+0x5f0>)
 8003018:	4abf      	ldr	r2, [pc, #764]	; (8003318 <main+0x5f4>)
 800301a:	e9cd 5c00 	strd	r5, ip, [sp]
 800301e:	f7ff fa65 	bl	80024ec <LCD_Font>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8003022:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003026:	217f      	movs	r1, #127	; 0x7f
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2014      	movs	r0, #20
 800302c:	4bb9      	ldr	r3, [pc, #740]	; (8003314 <main+0x5f0>)
 800302e:	4abc      	ldr	r2, [pc, #752]	; (8003320 <main+0x5fc>)
 8003030:	9500      	str	r5, [sp, #0]
 8003032:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003036:	f240 571e 	movw	r7, #1310	; 0x51e
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 800303a:	4eba      	ldr	r6, [pc, #744]	; (8003324 <main+0x600>)
 800303c:	f7ff fa56 	bl	80024ec <LCD_Font>
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003040:	4620      	mov	r0, r4
 8003042:	f7fe f847 	bl	80010d4 <AT24XX_Read>
 8003046:	4605      	mov	r5, r0
 8003048:	1c60      	adds	r0, r4, #1
 800304a:	b280      	uxth	r0, r0
 800304c:	f7fe f842 	bl	80010d4 <AT24XX_Read>
 8003050:	3402      	adds	r4, #2
 8003052:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8003054:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003058:	42bc      	cmp	r4, r7
 800305a:	f826 5b02 	strh.w	r5, [r6], #2
 800305e:	d1ef      	bne.n	8003040 <main+0x31c>
 8003060:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003064:	f640 1706 	movw	r7, #2310	; 0x906
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003068:	4eaf      	ldr	r6, [pc, #700]	; (8003328 <main+0x604>)
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800306a:	4620      	mov	r0, r4
 800306c:	f7fe f832 	bl	80010d4 <AT24XX_Read>
 8003070:	4605      	mov	r5, r0
 8003072:	1c60      	adds	r0, r4, #1
 8003074:	b280      	uxth	r0, r0
 8003076:	f7fe f82d 	bl	80010d4 <AT24XX_Read>
 800307a:	3402      	adds	r4, #2
 800307c:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 800307e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003082:	42bc      	cmp	r4, r7
 8003084:	f826 5b02 	strh.w	r5, [r6], #2
 8003088:	d1ef      	bne.n	800306a <main+0x346>
 800308a:	f640 34b8 	movw	r4, #3000	; 0xbb8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800308e:	f640 47ee 	movw	r7, #3310	; 0xcee
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003092:	4ea6      	ldr	r6, [pc, #664]	; (800332c <main+0x608>)
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003094:	4620      	mov	r0, r4
 8003096:	f7fe f81d 	bl	80010d4 <AT24XX_Read>
 800309a:	4605      	mov	r5, r0
 800309c:	1c60      	adds	r0, r4, #1
 800309e:	b280      	uxth	r0, r0
 80030a0:	f7fe f818 	bl	80010d4 <AT24XX_Read>
 80030a4:	3402      	adds	r4, #2
 80030a6:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 80030a8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80030ac:	42bc      	cmp	r4, r7
 80030ae:	f826 5b02 	strh.w	r5, [r6], #2
 80030b2:	d1ef      	bne.n	8003094 <main+0x370>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 80030b4:	2401      	movs	r4, #1
 80030b6:	2500      	movs	r5, #0
 80030b8:	4b96      	ldr	r3, [pc, #600]	; (8003314 <main+0x5f0>)
 80030ba:	4a99      	ldr	r2, [pc, #612]	; (8003320 <main+0x5fc>)
 80030bc:	2014      	movs	r0, #20
 80030be:	217f      	movs	r1, #127	; 0x7f
 80030c0:	e9cd 4500 	strd	r4, r5, [sp]
 80030c4:	f7ff fa12 	bl	80024ec <LCD_Font>
	BME280_Init();
 80030c8:	f7fe f9f8 	bl	80014bc <BME280_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80030cc:	4629      	mov	r1, r5
 80030ce:	4898      	ldr	r0, [pc, #608]	; (8003330 <main+0x60c>)
 80030d0:	f003 f96a 	bl	80063a8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80030d4:	4622      	mov	r2, r4
 80030d6:	4997      	ldr	r1, [pc, #604]	; (8003334 <main+0x610>)
 80030d8:	4897      	ldr	r0, [pc, #604]	; (8003338 <main+0x614>)
 80030da:	f003 fcb5 	bl	8006a48 <HAL_UART_Receive_IT>
	uint8_t uartTransmit[] = "UART OK\r\n";
 80030de:	4a97      	ldr	r2, [pc, #604]	; (800333c <main+0x618>)
 80030e0:	ac0a      	add	r4, sp, #40	; 0x28
 80030e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030e4:	c403      	stmia	r4!, {r0, r1}
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80030e6:	2364      	movs	r3, #100	; 0x64
	uint8_t uartTransmit[] = "UART OK\r\n";
 80030e8:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80030ea:	a90a      	add	r1, sp, #40	; 0x28
 80030ec:	220a      	movs	r2, #10
 80030ee:	4892      	ldr	r0, [pc, #584]	; (8003338 <main+0x614>)
 80030f0:	f003 fc22 	bl	8006938 <HAL_UART_Transmit>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 80030f4:	4b92      	ldr	r3, [pc, #584]	; (8003340 <main+0x61c>)
 80030f6:	ac1a      	add	r4, sp, #104	; 0x68
 80030f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fa:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit_DMA(&huart1, uartTransmitDMA, sizeof(uartTransmitDMA));
 80030fc:	220e      	movs	r2, #14
 80030fe:	488e      	ldr	r0, [pc, #568]	; (8003338 <main+0x614>)
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8003100:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart1, uartTransmitDMA, sizeof(uartTransmitDMA));
 8003102:	a91a      	add	r1, sp, #104	; 0x68
						int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8003104:	2600      	movs	r6, #0
 8003106:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8003344 <main+0x620>
 800310a:	4f8f      	ldr	r7, [pc, #572]	; (8003348 <main+0x624>)
	HAL_UART_Transmit_DMA(&huart1, uartTransmitDMA, sizeof(uartTransmitDMA));
 800310c:	f003 fcc6 	bl	8006a9c <HAL_UART_Transmit_DMA>
		if (rx_index != 0) {
 8003110:	4b8e      	ldr	r3, [pc, #568]	; (800334c <main+0x628>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 823c 	bne.w	8003592 <main+0x86e>
		rtcSec = DS3231_getSec();
 800311a:	f7fe fae5 	bl	80016e8 <DS3231_getSec>
		if (rtcSecLast != rtcSec) {
 800311e:	4b8c      	ldr	r3, [pc, #560]	; (8003350 <main+0x62c>)
		rtcSec = DS3231_getSec();
 8003120:	4d8c      	ldr	r5, [pc, #560]	; (8003354 <main+0x630>)
		if (rtcSecLast != rtcSec) {
 8003122:	781a      	ldrb	r2, [r3, #0]
		rtcSec = DS3231_getSec();
 8003124:	7028      	strb	r0, [r5, #0]
		if (rtcSecLast != rtcSec) {
 8003126:	4282      	cmp	r2, r0
 8003128:	d0f2      	beq.n	8003110 <main+0x3ec>
			rtcMin = DS3231_getMin();
 800312a:	f7fe faed 	bl	8001708 <DS3231_getMin>
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 800312e:	2401      	movs	r4, #1
			rtcMin = DS3231_getMin();
 8003130:	4b89      	ldr	r3, [pc, #548]	; (8003358 <main+0x634>)
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8003132:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800335c <main+0x638>
			rtcMin = DS3231_getMin();
 8003136:	7018      	strb	r0, [r3, #0]
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8003138:	2208      	movs	r2, #8
 800313a:	2300      	movs	r3, #0
 800313c:	2123      	movs	r1, #35	; 0x23
 800313e:	20ac      	movs	r0, #172	; 0xac
 8003140:	9400      	str	r4, [sp, #0]
 8003142:	f8cd 8004 	str.w	r8, [sp, #4]
 8003146:	f7ff f91b 	bl	8002380 <LCD_Circle>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 800314a:	2300      	movs	r3, #0
 800314c:	2208      	movs	r2, #8
 800314e:	214b      	movs	r1, #75	; 0x4b
 8003150:	20ac      	movs	r0, #172	; 0xac
 8003152:	e9cd 4800 	strd	r4, r8, [sp]
 8003156:	f7ff f913 	bl	8002380 <LCD_Circle>
			if (rtcSec % 2 != 0) {
 800315a:	782d      	ldrb	r5, [r5, #0]
 800315c:	4025      	ands	r5, r4
 800315e:	f000 8221 	beq.w	80035a4 <main+0x880>
				LCD_Circle(172, 35, 7, 1, 1, ORANGE);
 8003162:	4623      	mov	r3, r4
 8003164:	2207      	movs	r2, #7
 8003166:	2123      	movs	r1, #35	; 0x23
 8003168:	20ac      	movs	r0, #172	; 0xac
 800316a:	e9cd 4800 	strd	r4, r8, [sp]
 800316e:	f7ff f907 	bl	8002380 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, ORANGE);
 8003172:	2207      	movs	r2, #7
 8003174:	214b      	movs	r1, #75	; 0x4b
 8003176:	20ac      	movs	r0, #172	; 0xac
 8003178:	4623      	mov	r3, r4
 800317a:	e9cd 4800 	strd	r4, r8, [sp]
 800317e:	f7ff f8ff 	bl	8002380 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003182:	2200      	movs	r2, #0
 8003184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003188:	4875      	ldr	r0, [pc, #468]	; (8003360 <main+0x63c>)
 800318a:	f001 fafb 	bl	8004784 <HAL_GPIO_WritePin>
			if (rtcMinLast != rtcMin) {
 800318e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8003364 <main+0x640>
 8003192:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8003358 <main+0x634>
 8003196:	f898 2000 	ldrb.w	r2, [r8]
 800319a:	f899 3000 	ldrb.w	r3, [r9]
 800319e:	429a      	cmp	r2, r3
 80031a0:	f000 81e9 	beq.w	8003576 <main+0x852>
				rtcHrs = DS3231_getHrs();
 80031a4:	f7fe fac0 	bl	8001728 <DS3231_getHrs>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80031a8:	2401      	movs	r4, #1
 80031aa:	2500      	movs	r5, #0
				rtcHrs = DS3231_getHrs();
 80031ac:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8003368 <main+0x644>
				sprintf(clockPrint, "%02d", rtcMinLast);
 80031b0:	f898 2000 	ldrb.w	r2, [r8]
 80031b4:	496d      	ldr	r1, [pc, #436]	; (800336c <main+0x648>)
				rtcHrs = DS3231_getHrs();
 80031b6:	f88b 0000 	strb.w	r0, [fp]
				sprintf(clockPrint, "%02d", rtcMinLast);
 80031ba:	a812      	add	r0, sp, #72	; 0x48
 80031bc:	f004 fbcc 	bl	8007958 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80031c0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800335c <main+0x638>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80031c4:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <main+0x64c>)
 80031c6:	2164      	movs	r1, #100	; 0x64
 80031c8:	20b4      	movs	r0, #180	; 0xb4
 80031ca:	aa12      	add	r2, sp, #72	; 0x48
 80031cc:	e9cd 4500 	strd	r4, r5, [sp]
 80031d0:	f7ff f98c 	bl	80024ec <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 80031d4:	f899 2000 	ldrb.w	r2, [r9]
 80031d8:	4964      	ldr	r1, [pc, #400]	; (800336c <main+0x648>)
 80031da:	a812      	add	r0, sp, #72	; 0x48
 80031dc:	f004 fbbc 	bl	8007958 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80031e0:	4b63      	ldr	r3, [pc, #396]	; (8003370 <main+0x64c>)
 80031e2:	aa12      	add	r2, sp, #72	; 0x48
 80031e4:	2164      	movs	r1, #100	; 0x64
 80031e6:	20b4      	movs	r0, #180	; 0xb4
 80031e8:	e9cd 4800 	strd	r4, r8, [sp]
 80031ec:	f7ff f97e 	bl	80024ec <LCD_Font>
				if (rtcHrsLast != rtcHrs) {
 80031f0:	4b60      	ldr	r3, [pc, #384]	; (8003374 <main+0x650>)
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	f89b 3000 	ldrb.w	r3, [fp]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	f040 820b 	bne.w	8003614 <main+0x8f0>
				rtcMinLast = rtcMin;
 80031fe:	4b56      	ldr	r3, [pc, #344]	; (8003358 <main+0x634>)
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <main+0x640>)
 8003202:	781b      	ldrb	r3, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
				rtcMinLast = rtcMin;
 8003208:	7013      	strb	r3, [r2, #0]
				temperature = BME280_getTemperature(-1);
 800320a:	f7fd ffa9 	bl	8001160 <BME280_getTemperature>
 800320e:	f7fd f90b 	bl	8000428 <__aeabi_f2d>
 8003212:	4c59      	ldr	r4, [pc, #356]	; (8003378 <main+0x654>)
 8003214:	e9c4 0100 	strd	r0, r1, [r4]
				humidity = BME280_getHumidity(-1);
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	f7fe f816 	bl	800124c <BME280_getHumidity>
 8003220:	f7fd f902 	bl	8000428 <__aeabi_f2d>
 8003224:	e9ca 0100 	strd	r0, r1, [sl]
				pressure = (uint16_t)BME280_getPressure();
 8003228:	f7fe f8a8 	bl	800137c <BME280_getPressure>
 800322c:	f7fd fefa 	bl	8001024 <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8003230:	f46f 7e96 	mvn.w	lr, #300	; 0x12c
 8003234:	f240 321e 	movw	r2, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 8003238:	4950      	ldr	r1, [pc, #320]	; (800337c <main+0x658>)
 800323a:	b283      	uxth	r3, r0
 800323c:	800b      	strh	r3, [r1, #0]
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800323e:	4473      	add	r3, lr
 8003240:	b29b      	uxth	r3, r3
 8003242:	4293      	cmp	r3, r2
 8003244:	f200 8197 	bhi.w	8003576 <main+0x852>
 8003248:	cc30      	ldmia	r4, {r4, r5}
 800324a:	2200      	movs	r2, #0
 800324c:	4620      	mov	r0, r4
 800324e:	4629      	mov	r1, r5
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <main+0x65c>)
 8003252:	f7fd fbb3 	bl	80009bc <__aeabi_dcmplt>
 8003256:	2800      	cmp	r0, #0
 8003258:	f000 818d 	beq.w	8003576 <main+0x852>
 800325c:	2200      	movs	r2, #0
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	4b48      	ldr	r3, [pc, #288]	; (8003384 <main+0x660>)
 8003264:	f7fd fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 8003268:	2800      	cmp	r0, #0
 800326a:	f000 8184 	beq.w	8003576 <main+0x852>
 800326e:	e9da 8900 	ldrd	r8, r9, [sl]
 8003272:	2200      	movs	r2, #0
 8003274:	2300      	movs	r3, #0
 8003276:	4640      	mov	r0, r8
 8003278:	4649      	mov	r1, r9
 800327a:	f7fd fbbd 	bl	80009f8 <__aeabi_dcmpgt>
 800327e:	2800      	cmp	r0, #0
 8003280:	f000 8179 	beq.w	8003576 <main+0x852>
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	2200      	movs	r2, #0
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <main+0x664>)
 800328c:	f7fd fb96 	bl	80009bc <__aeabi_dcmplt>
 8003290:	2800      	cmp	r0, #0
 8003292:	f000 8170 	beq.w	8003576 <main+0x852>
					if (temperature != temperatureLast) {
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <main+0x668>)
 8003298:	4620      	mov	r0, r4
 800329a:	4629      	mov	r1, r5
 800329c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032a0:	4622      	mov	r2, r4
 80032a2:	462b      	mov	r3, r5
 80032a4:	f7fd fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f040 80a0 	bne.w	80033ee <main+0x6ca>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80032ae:	4632      	mov	r2, r6
 80032b0:	463b      	mov	r3, r7
 80032b2:	4620      	mov	r0, r4
 80032b4:	4629      	mov	r1, r5
 80032b6:	f7fd fb95 	bl	80009e4 <__aeabi_dcmpge>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	f040 8545 	bne.w	8003d4a <main+0x1026>
 80032c0:	2200      	movs	r2, #0
 80032c2:	2300      	movs	r3, #0
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fd fb78 	bl	80009bc <__aeabi_dcmplt>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	f040 8533 	bne.w	8003d38 <main+0x1014>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80032d2:	4632      	mov	r2, r6
 80032d4:	463b      	mov	r3, r7
 80032d6:	4620      	mov	r0, r4
 80032d8:	4629      	mov	r1, r5
 80032da:	f7fd fb6f 	bl	80009bc <__aeabi_dcmplt>
 80032de:	b140      	cbz	r0, 80032f2 <main+0x5ce>
 80032e0:	2200      	movs	r2, #0
 80032e2:	2300      	movs	r3, #0
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fd fb86 	bl	80009f8 <__aeabi_dcmpgt>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f040 8299 	bne.w	8003824 <main+0xb00>
						else if (temperatureLast <= -10) {
 80032f2:	2200      	movs	r2, #0
 80032f4:	4620      	mov	r0, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <main+0x66c>)
 80032fa:	f7fd fb69 	bl	80009d0 <__aeabi_dcmple>
 80032fe:	2800      	cmp	r0, #0
 8003300:	f040 84e4 	bne.w	8003ccc <main+0xfa8>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8003304:	491c      	ldr	r1, [pc, #112]	; (8003378 <main+0x654>)
 8003306:	4632      	mov	r2, r6
 8003308:	e9d1 4500 	ldrd	r4, r5, [r1]
 800330c:	463b      	mov	r3, r7
 800330e:	4620      	mov	r0, r4
 8003310:	4629      	mov	r1, r5
 8003312:	e03f      	b.n	8003394 <main+0x670>
 8003314:	0801b680 	.word	0x0801b680
 8003318:	0800c3ac 	.word	0x0800c3ac
 800331c:	20000251 	.word	0x20000251
 8003320:	0800c3bc 	.word	0x0800c3bc
 8003324:	200004c4 	.word	0x200004c4
 8003328:	20000254 	.word	0x20000254
 800332c:	2000038c 	.word	0x2000038c
 8003330:	200007a4 	.word	0x200007a4
 8003334:	20000950 	.word	0x20000950
 8003338:	200007ec 	.word	0x200007ec
 800333c:	0800c408 	.word	0x0800c408
 8003340:	0800c414 	.word	0x0800c414
 8003344:	20000830 	.word	0x20000830
 8003348:	40240000 	.word	0x40240000
 800334c:	20000951 	.word	0x20000951
 8003350:	20000002 	.word	0x20000002
 8003354:	2000084c 	.word	0x2000084c
 8003358:	20000849 	.word	0x20000849
 800335c:	00ffa500 	.word	0x00ffa500
 8003360:	40011000 	.word	0x40011000
 8003364:	20000001 	.word	0x20000001
 8003368:	20000848 	.word	0x20000848
 800336c:	0800c3cc 	.word	0x0800c3cc
 8003370:	0800c470 	.word	0x0800c470
 8003374:	20000000 	.word	0x20000000
 8003378:	20000958 	.word	0x20000958
 800337c:	20000840 	.word	0x20000840
 8003380:	40554000 	.word	0x40554000
 8003384:	c0440000 	.word	0xc0440000
 8003388:	40590000 	.word	0x40590000
 800338c:	20000960 	.word	0x20000960
 8003390:	c0240000 	.word	0xc0240000
 8003394:	f7fd fb26 	bl	80009e4 <__aeabi_dcmpge>
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 8436 	bne.w	8003c0a <main+0xee6>
 800339e:	2200      	movs	r2, #0
 80033a0:	2300      	movs	r3, #0
 80033a2:	4620      	mov	r0, r4
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fd fb09 	bl	80009bc <__aeabi_dcmplt>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	f040 8424 	bne.w	8003bf8 <main+0xed4>
						else if (temperature < 10 && temperature > 0) {
 80033b0:	4632      	mov	r2, r6
 80033b2:	463b      	mov	r3, r7
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fd fb00 	bl	80009bc <__aeabi_dcmplt>
 80033bc:	b140      	cbz	r0, 80033d0 <main+0x6ac>
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	4620      	mov	r0, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd fb17 	bl	80009f8 <__aeabi_dcmpgt>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f040 8493 	bne.w	8003cf6 <main+0xfd2>
						else if (temperature <= -10) {
 80033d0:	2200      	movs	r2, #0
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <main+0x8b0>)
 80033d8:	f7fd fafa 	bl	80009d0 <__aeabi_dcmple>
 80033dc:	2800      	cmp	r0, #0
 80033de:	f040 84bb 	bne.w	8003d58 <main+0x1034>
						temperatureLast = temperature;
 80033e2:	4b7d      	ldr	r3, [pc, #500]	; (80035d8 <main+0x8b4>)
 80033e4:	497d      	ldr	r1, [pc, #500]	; (80035dc <main+0x8b8>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	e9c1 2300 	strd	r2, r3, [r1]
					if (humidity != humidityLast) {
 80033ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80033f2:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <main+0x8bc>)
 80033f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033f8:	4642      	mov	r2, r8
 80033fa:	464b      	mov	r3, r9
 80033fc:	f7fd fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8003400:	4604      	mov	r4, r0
 8003402:	2800      	cmp	r0, #0
 8003404:	f000 8412 	beq.w	8003c2c <main+0xf08>
					if (pressureLast != pressure) {
 8003408:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <main+0x8c0>)
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <main+0x8c4>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	4293      	cmp	r3, r2
 8003412:	d036      	beq.n	8003482 <main+0x75e>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8003414:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003418:	bf2c      	ite	cs
 800341a:	4974      	ldrcs	r1, [pc, #464]	; (80035ec <main+0x8c8>)
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 800341c:	4974      	ldrcc	r1, [pc, #464]	; (80035f0 <main+0x8cc>)
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 800341e:	a80e      	add	r0, sp, #56	; 0x38
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8003420:	f004 fa9a 	bl	8007958 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8003424:	2301      	movs	r3, #1
 8003426:	2000      	movs	r0, #0
 8003428:	21bb      	movs	r1, #187	; 0xbb
 800342a:	e9cd 3000 	strd	r3, r0, [sp]
 800342e:	aa0e      	add	r2, sp, #56	; 0x38
 8003430:	f240 1041 	movw	r0, #321	; 0x141
 8003434:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <main+0x8d0>)
 8003436:	f7ff f859 	bl	80024ec <LCD_Font>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 800343a:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <main+0x8c4>)
 800343c:	a80e      	add	r0, sp, #56	; 0x38
 800343e:	881a      	ldrh	r2, [r3, #0]
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8003440:	2401      	movs	r4, #1
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8003442:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003446:	bf2c      	ite	cs
 8003448:	4968      	ldrcs	r1, [pc, #416]	; (80035ec <main+0x8c8>)
						else sprintf(weatherPrintP, "0%02dP", pressure);
 800344a:	4969      	ldrcc	r1, [pc, #420]	; (80035f0 <main+0x8cc>)
 800344c:	f004 fa84 	bl	8007958 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8003450:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003454:	21bb      	movs	r1, #187	; 0xbb
 8003456:	f240 1041 	movw	r0, #321	; 0x141
 800345a:	e9cd 4300 	strd	r4, r3, [sp]
 800345e:	aa0e      	add	r2, sp, #56	; 0x38
 8003460:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <main+0x8d0>)
 8003462:	f7ff f843 	bl	80024ec <LCD_Font>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8003466:	2300      	movs	r3, #0
 8003468:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <main+0x8d4>)
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	21bb      	movs	r1, #187	; 0xbb
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <main+0x8d0>)
 8003470:	f240 1041 	movw	r0, #321	; 0x141
 8003474:	9400      	str	r4, [sp, #0]
 8003476:	f7ff f839 	bl	80024ec <LCD_Font>
						pressureLast = pressure;
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <main+0x8c4>)
 800347c:	4a59      	ldr	r2, [pc, #356]	; (80035e4 <main+0x8c0>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	8013      	strh	r3, [r2, #0]
					if (AT24XX_Read(0) != rtcHrs) {
 8003482:	2000      	movs	r0, #0
 8003484:	f7fd fe26 	bl	80010d4 <AT24XX_Read>
 8003488:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <main+0x8d8>)
 800348a:	7819      	ldrb	r1, [r3, #0]
 800348c:	4288      	cmp	r0, r1
 800348e:	f040 8306 	bne.w	8003a9e <main+0xd7a>
					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8003492:	2501      	movs	r5, #1
 8003494:	23ff      	movs	r3, #255	; 0xff
 8003496:	21bd      	movs	r1, #189	; 0xbd
 8003498:	2002      	movs	r0, #2
 800349a:	229d      	movs	r2, #157	; 0x9d
 800349c:	e9cd 5300 	strd	r5, r3, [sp]
 80034a0:	2381      	movs	r3, #129	; 0x81
 80034a2:	f7fe febf 	bl	8002224 <LCD_Rect>
						int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 80034a6:	494c      	ldr	r1, [pc, #304]	; (80035d8 <main+0x8b4>)
 80034a8:	4632      	mov	r2, r6
 80034aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ae:	463b      	mov	r3, r7
 80034b0:	f7fd f812 	bl	80004d8 <__aeabi_dmul>
 80034b4:	f7fd fac0 	bl	8000a38 <__aeabi_d2iz>
						LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80034b8:	f04f 0800 	mov.w	r8, #0
 80034bc:	229e      	movs	r2, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80034be:	f1a0 04c0 	sub.w	r4, r0, #192	; 0xc0
						LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80034c2:	f240 133d 	movw	r3, #317	; 0x13d
 80034c6:	21bf      	movs	r1, #191	; 0xbf
 80034c8:	4610      	mov	r0, r2
 80034ca:	9500      	str	r5, [sp, #0]
 80034cc:	f8cd 8004 	str.w	r8, [sp, #4]
						int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 80034d0:	b224      	sxth	r4, r4
						LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80034d2:	f7fe fe61 	bl	8002198 <LCD_Line>
						if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80034d6:	4544      	cmp	r4, r8
 80034d8:	f300 82c9 	bgt.w	8003a6e <main+0xd4a>
					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 80034dc:	2501      	movs	r5, #1
 80034de:	23ff      	movs	r3, #255	; 0xff
 80034e0:	21bd      	movs	r1, #189	; 0xbd
 80034e2:	20a1      	movs	r0, #161	; 0xa1
 80034e4:	229d      	movs	r2, #157	; 0x9d
 80034e6:	e9cd 5300 	strd	r5, r3, [sp]
 80034ea:	2381      	movs	r3, #129	; 0x81
 80034ec:	f7fe fe9a 	bl	8002224 <LCD_Rect>
						valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 80034f0:	e9da 0100 	ldrd	r0, r1, [sl]
 80034f4:	4632      	mov	r2, r6
 80034f6:	463b      	mov	r3, r7
 80034f8:	f7fc ffee 	bl	80004d8 <__aeabi_dmul>
 80034fc:	f7fd fa9c 	bl	8000a38 <__aeabi_d2iz>
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8003500:	f04f 0800 	mov.w	r8, #0
 8003504:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003508:	b284      	uxth	r4, r0
 800350a:	3c64      	subs	r4, #100	; 0x64
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800350c:	21bf      	movs	r1, #191	; 0xbf
 800350e:	461a      	mov	r2, r3
 8003510:	4618      	mov	r0, r3
 8003512:	9500      	str	r5, [sp, #0]
 8003514:	f8cd 8004 	str.w	r8, [sp, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003518:	01e4      	lsls	r4, r4, #7
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800351a:	f7fe fe3d 	bl	8002198 <LCD_Line>
						if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 800351e:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 8003522:	f280 8287 	bge.w	8003a34 <main+0xd10>
					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8003526:	2501      	movs	r5, #1
 8003528:	23ff      	movs	r3, #255	; 0xff
 800352a:	229d      	movs	r2, #157	; 0x9d
 800352c:	21bd      	movs	r1, #189	; 0xbd
 800352e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003532:	e9cd 5300 	strd	r5, r3, [sp]
 8003536:	2381      	movs	r3, #129	; 0x81
 8003538:	f7fe fe74 	bl	8002224 <LCD_Rect>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800353c:	f46f 716a 	mvn.w	r1, #936	; 0x3a8
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8003540:	f04f 0800 	mov.w	r8, #0
 8003544:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <main+0x8c4>)
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 800354a:	9500      	str	r5, [sp, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800354c:	881c      	ldrh	r4, [r3, #0]
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 800354e:	4610      	mov	r0, r2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003550:	440c      	add	r4, r1
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8003552:	f240 133d 	movw	r3, #317	; 0x13d
 8003556:	21bf      	movs	r1, #191	; 0xbf
						valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8003558:	b224      	sxth	r4, r4
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 800355a:	f8cd 8004 	str.w	r8, [sp, #4]
 800355e:	f7fe fe1b 	bl	8002198 <LCD_Line>
						if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8003562:	4544      	cmp	r4, r8
 8003564:	f300 824d 	bgt.w	8003a02 <main+0xcde>
					if (!viewGraphs) {
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <main+0x8dc>)
 800356a:	f893 b000 	ldrb.w	fp, [r3]
 800356e:	f1bb 0f00 	cmp.w	fp, #0
 8003572:	f000 8169 	beq.w	8003848 <main+0xb24>
			rtcSecLast = rtcSec;
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <main+0x8e0>)
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <main+0x8e4>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	7013      	strb	r3, [r2, #0]
	{
 800357e:	e5c7      	b.n	8003110 <main+0x3ec>
	if (clearEEPROM) for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003580:	b2a0      	uxth	r0, r4
 8003582:	2100      	movs	r1, #0
 8003584:	3401      	adds	r4, #1
 8003586:	f7fd fdbd 	bl	8001104 <AT24XX_Update>
 800358a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800358e:	d1f7      	bne.n	8003580 <main+0x85c>
 8003590:	e53c      	b.n	800300c <main+0x2e8>
			HAL_Delay(200);
 8003592:	20c8      	movs	r0, #200	; 0xc8
 8003594:	f000 fe52 	bl	800423c <HAL_Delay>
			rx_index = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	4a1c      	ldr	r2, [pc, #112]	; (800360c <main+0x8e8>)
 800359c:	7013      	strb	r3, [r2, #0]
			uartDecode();
 800359e:	f7ff fb1b 	bl	8002bd8 <uartDecode>
 80035a2:	e5ba      	b.n	800311a <main+0x3f6>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 80035a4:	4623      	mov	r3, r4
 80035a6:	2207      	movs	r2, #7
 80035a8:	2123      	movs	r1, #35	; 0x23
 80035aa:	20ac      	movs	r0, #172	; 0xac
 80035ac:	e9cd 4500 	strd	r4, r5, [sp]
 80035b0:	f7fe fee6 	bl	8002380 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 80035b4:	214b      	movs	r1, #75	; 0x4b
 80035b6:	20ac      	movs	r0, #172	; 0xac
 80035b8:	4623      	mov	r3, r4
 80035ba:	2207      	movs	r2, #7
 80035bc:	e9cd 4500 	strd	r4, r5, [sp]
 80035c0:	f7fe fede 	bl	8002380 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80035c4:	4622      	mov	r2, r4
 80035c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ca:	4811      	ldr	r0, [pc, #68]	; (8003610 <main+0x8ec>)
 80035cc:	f001 f8da 	bl	8004784 <HAL_GPIO_WritePin>
 80035d0:	e5dd      	b.n	800318e <main+0x46a>
 80035d2:	bf00      	nop
 80035d4:	c0240000 	.word	0xc0240000
 80035d8:	20000958 	.word	0x20000958
 80035dc:	20000960 	.word	0x20000960
 80035e0:	20000838 	.word	0x20000838
 80035e4:	20000842 	.word	0x20000842
 80035e8:	20000840 	.word	0x20000840
 80035ec:	0800c3cc 	.word	0x0800c3cc
 80035f0:	0800c400 	.word	0x0800c400
 80035f4:	0801b680 	.word	0x0801b680
 80035f8:	0800c3d4 	.word	0x0800c3d4
 80035fc:	20000848 	.word	0x20000848
 8003600:	20000968 	.word	0x20000968
 8003604:	2000084c 	.word	0x2000084c
 8003608:	20000002 	.word	0x20000002
 800360c:	20000951 	.word	0x20000951
 8003610:	40011000 	.word	0x40011000
					rtcDay = DS3231_getDay();
 8003614:	f7fe f898 	bl	8001748 <DS3231_getDay>
 8003618:	f8df b314 	ldr.w	fp, [pc, #788]	; 8003930 <main+0xc0c>
					rtcDate = DS3231_getDate();
 800361c:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8003934 <main+0xc10>
					rtcDay = DS3231_getDay();
 8003620:	f88b 0000 	strb.w	r0, [fp]
					rtcDate = DS3231_getDate();
 8003624:	f7fe f8a0 	bl	8001768 <DS3231_getDate>
 8003628:	f889 0000 	strb.w	r0, [r9]
					rtcMonth = DS3231_getMonth();
 800362c:	f7fe f8ac 	bl	8001788 <DS3231_getMonth>
 8003630:	4bc1      	ldr	r3, [pc, #772]	; (8003938 <main+0xc14>)
 8003632:	7018      	strb	r0, [r3, #0]
					rtcYear = DS3231_getYear();
 8003634:	f7fe f8b8 	bl	80017a8 <DS3231_getYear>
 8003638:	4bc0      	ldr	r3, [pc, #768]	; (800393c <main+0xc18>)
					sprintf(clockPrint, "%02d", rtcHrsLast);
 800363a:	49c1      	ldr	r1, [pc, #772]	; (8003940 <main+0xc1c>)
					rtcYear = DS3231_getYear();
 800363c:	7018      	strb	r0, [r3, #0]
					sprintf(clockPrint, "%02d", rtcHrsLast);
 800363e:	4bc1      	ldr	r3, [pc, #772]	; (8003944 <main+0xc20>)
 8003640:	a812      	add	r0, sp, #72	; 0x48
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	f004 f988 	bl	8007958 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003648:	2164      	movs	r1, #100	; 0x64
 800364a:	4628      	mov	r0, r5
 800364c:	4bbe      	ldr	r3, [pc, #760]	; (8003948 <main+0xc24>)
 800364e:	aa12      	add	r2, sp, #72	; 0x48
 8003650:	e9cd 4500 	strd	r4, r5, [sp]
 8003654:	f7fe ff4a 	bl	80024ec <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8003658:	4bbc      	ldr	r3, [pc, #752]	; (800394c <main+0xc28>)
 800365a:	49b9      	ldr	r1, [pc, #740]	; (8003940 <main+0xc1c>)
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	a812      	add	r0, sp, #72	; 0x48
 8003660:	f004 f97a 	bl	8007958 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003664:	4bb8      	ldr	r3, [pc, #736]	; (8003948 <main+0xc24>)
 8003666:	aa12      	add	r2, sp, #72	; 0x48
 8003668:	2164      	movs	r1, #100	; 0x64
 800366a:	4628      	mov	r0, r5
 800366c:	e9cd 4800 	strd	r4, r8, [sp]
 8003670:	f7fe ff3c 	bl	80024ec <LCD_Font>
					if (rtcDayLast != rtcDay) {
 8003674:	4bb6      	ldr	r3, [pc, #728]	; (8003950 <main+0xc2c>)
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	f89b 3000 	ldrb.w	r3, [fp]
 800367c:	429a      	cmp	r2, r3
 800367e:	f000 80b3 	beq.w	80037e8 <main+0xac4>
						sprintf(clockPrint, "%02d", rtcDateLast);
 8003682:	4bb4      	ldr	r3, [pc, #720]	; (8003954 <main+0xc30>)
 8003684:	49ae      	ldr	r1, [pc, #696]	; (8003940 <main+0xc1c>)
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	a812      	add	r0, sp, #72	; 0x48
 800368a:	f004 f965 	bl	8007958 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800368e:	4bb2      	ldr	r3, [pc, #712]	; (8003958 <main+0xc34>)
 8003690:	2128      	movs	r1, #40	; 0x28
 8003692:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003696:	aa12      	add	r2, sp, #72	; 0x48
 8003698:	e9cd 4500 	strd	r4, r5, [sp]
 800369c:	f7fe ff26 	bl	80024ec <LCD_Font>
						sprintf(clockPrint, "%02d", rtcDate);
 80036a0:	f899 2000 	ldrb.w	r2, [r9]
 80036a4:	49a6      	ldr	r1, [pc, #664]	; (8003940 <main+0xc1c>)
 80036a6:	a812      	add	r0, sp, #72	; 0x48
 80036a8:	f004 f956 	bl	8007958 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80036ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b0:	2128      	movs	r1, #40	; 0x28
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80036b8:	4ba7      	ldr	r3, [pc, #668]	; (8003958 <main+0xc34>)
 80036ba:	9400      	str	r4, [sp, #0]
 80036bc:	aa12      	add	r2, sp, #72	; 0x48
 80036be:	f7fe ff15 	bl	80024ec <LCD_Font>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 80036c2:	f899 3000 	ldrb.w	r3, [r9]
 80036c6:	2b09      	cmp	r3, #9
 80036c8:	f240 80a2 	bls.w	8003810 <main+0xaec>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80036cc:	f04f 0b0c 	mov.w	fp, #12
 80036d0:	4b99      	ldr	r3, [pc, #612]	; (8003938 <main+0xc14>)
 80036d2:	2501      	movs	r5, #1
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	f04f 0900 	mov.w	r9, #0
 80036da:	320a      	adds	r2, #10
 80036dc:	fbb2 fcfb 	udiv	ip, r2, fp
 80036e0:	fb0b 221c 	mls	r2, fp, ip, r2
 80036e4:	f8df c274 	ldr.w	ip, [pc, #628]	; 800395c <main+0xc38>
 80036e8:	215a      	movs	r1, #90	; 0x5a
 80036ea:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80036ee:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80036f2:	e9cd 5900 	strd	r5, r9, [sp]
 80036f6:	4b98      	ldr	r3, [pc, #608]	; (8003958 <main+0xc34>)
 80036f8:	f7fe fef8 	bl	80024ec <LCD_Font>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 80036fc:	4b8e      	ldr	r3, [pc, #568]	; (8003938 <main+0xc14>)
 80036fe:	9500      	str	r5, [sp, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f8df c258 	ldr.w	ip, [pc, #600]	; 800395c <main+0xc38>
 8003706:	330b      	adds	r3, #11
 8003708:	fbb3 f2fb 	udiv	r2, r3, fp
 800370c:	fb0b 3312 	mls	r3, fp, r2, r3
 8003710:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8003714:	f64f 73ff 	movw	r3, #65535	; 0xffff
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 8003718:	f04f 08ff 	mov.w	r8, #255	; 0xff
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800371c:	2407      	movs	r4, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800371e:	215a      	movs	r1, #90	; 0x5a
 8003720:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <main+0xc34>)
 8003728:	f7fe fee0 	bl	80024ec <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 800372c:	4a8c      	ldr	r2, [pc, #560]	; (8003960 <main+0xc3c>)
 800372e:	f8df b224 	ldr.w	fp, [pc, #548]	; 8003954 <main+0xc30>
 8003732:	7813      	ldrb	r3, [r2, #0]
 8003734:	4a8b      	ldr	r2, [pc, #556]	; (8003964 <main+0xc40>)
 8003736:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	7813      	ldrb	r3, [r2, #0]
 800373e:	498a      	ldr	r1, [pc, #552]	; (8003968 <main+0xc44>)
 8003740:	f89b 2000 	ldrb.w	r2, [fp]
 8003744:	a812      	add	r0, sp, #72	; 0x48
 8003746:	f004 f907 	bl	8007958 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800374a:	2191      	movs	r1, #145	; 0x91
 800374c:	20b4      	movs	r0, #180	; 0xb4
 800374e:	e9cd 5900 	strd	r5, r9, [sp]
 8003752:	4b81      	ldr	r3, [pc, #516]	; (8003958 <main+0xc34>)
 8003754:	aa12      	add	r2, sp, #72	; 0x48
 8003756:	f7fe fec9 	bl	80024ec <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 800375a:	4a78      	ldr	r2, [pc, #480]	; (800393c <main+0xc18>)
 800375c:	4982      	ldr	r1, [pc, #520]	; (8003968 <main+0xc44>)
 800375e:	7813      	ldrb	r3, [r2, #0]
 8003760:	4a74      	ldr	r2, [pc, #464]	; (8003934 <main+0xc10>)
 8003762:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4b73      	ldr	r3, [pc, #460]	; (8003938 <main+0xc14>)
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	a812      	add	r0, sp, #72	; 0x48
 8003770:	f004 f8f2 	bl	8007958 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 8003774:	ab12      	add	r3, sp, #72	; 0x48
 8003776:	461a      	mov	r2, r3
 8003778:	2191      	movs	r1, #145	; 0x91
 800377a:	20b4      	movs	r0, #180	; 0xb4
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <main+0xc34>)
 800377e:	e9cd 5800 	strd	r5, r8, [sp]
 8003782:	f7fe feb3 	bl	80024ec <LCD_Font>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8003786:	e9cd 5900 	strd	r5, r9, [sp]
 800378a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003930 <main+0xc0c>
 800378e:	2191      	movs	r1, #145	; 0x91
 8003790:	f899 2000 	ldrb.w	r2, [r9]
 8003794:	2014      	movs	r0, #20
 8003796:	3205      	adds	r2, #5
 8003798:	fbb2 fcf4 	udiv	ip, r2, r4
 800379c:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 80037a0:	eba2 020c 	sub.w	r2, r2, ip
 80037a4:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800396c <main+0xc48>
 80037a8:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <main+0xc34>)
 80037aa:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80037ae:	f7fe fe9d 	bl	80024ec <LCD_Font>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80037b2:	e9cd 5800 	strd	r5, r8, [sp]
 80037b6:	f899 2000 	ldrb.w	r2, [r9]
 80037ba:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800396c <main+0xc48>
 80037be:	3206      	adds	r2, #6
 80037c0:	fbb2 f4f4 	udiv	r4, r2, r4
 80037c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80037c8:	1b14      	subs	r4, r2, r4
 80037ca:	2191      	movs	r1, #145	; 0x91
 80037cc:	4b62      	ldr	r3, [pc, #392]	; (8003958 <main+0xc34>)
 80037ce:	f85c 2024 	ldr.w	r2, [ip, r4, lsl #2]
 80037d2:	2014      	movs	r0, #20
 80037d4:	f7fe fe8a 	bl	80024ec <LCD_Font>
						rtcDayLast = rtcDay;
 80037d8:	f899 3000 	ldrb.w	r3, [r9]
 80037dc:	495c      	ldr	r1, [pc, #368]	; (8003950 <main+0xc2c>)
						rtcDateLast = rtcDate;
 80037de:	4a55      	ldr	r2, [pc, #340]	; (8003934 <main+0xc10>)
						rtcDayLast = rtcDay;
 80037e0:	700b      	strb	r3, [r1, #0]
						rtcDateLast = rtcDate;
 80037e2:	7813      	ldrb	r3, [r2, #0]
 80037e4:	f88b 3000 	strb.w	r3, [fp]
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80037e8:	2300      	movs	r3, #0
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80037ea:	4a61      	ldr	r2, [pc, #388]	; (8003970 <main+0xc4c>)
 80037ec:	6353      	str	r3, [r2, #52]	; 0x34
 80037ee:	3301      	adds	r3, #1
 80037f0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80037f4:	d1fa      	bne.n	80037ec <main+0xac8>
					rtcMonthLast = rtcMonth;
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <main+0xc14>)
 80037f8:	4a5a      	ldr	r2, [pc, #360]	; (8003964 <main+0xc40>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	7013      	strb	r3, [r2, #0]
					rtcYearLast = rtcYear;
 80037fe:	4b4f      	ldr	r3, [pc, #316]	; (800393c <main+0xc18>)
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <main+0xc3c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	7013      	strb	r3, [r2, #0]
					rtcHrsLast = rtcHrs;
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <main+0xc28>)
 8003808:	4a4e      	ldr	r2, [pc, #312]	; (8003944 <main+0xc20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	7013      	strb	r3, [r2, #0]
 800380e:	e4f6      	b.n	80031fe <main+0x4da>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8003810:	2128      	movs	r1, #40	; 0x28
 8003812:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003816:	e9cd 4500 	strd	r4, r5, [sp]
 800381a:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <main+0xc34>)
 800381c:	4a55      	ldr	r2, [pc, #340]	; (8003974 <main+0xc50>)
 800381e:	f7fe fe65 	bl	80024ec <LCD_Font>
 8003822:	e753      	b.n	80036cc <main+0x9a8>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8003824:	4622      	mov	r2, r4
 8003826:	462b      	mov	r3, r5
 8003828:	4953      	ldr	r1, [pc, #332]	; (8003978 <main+0xc54>)
 800382a:	a80e      	add	r0, sp, #56	; 0x38
 800382c:	f004 f894 	bl	8007958 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003830:	2301      	movs	r3, #1
 8003832:	f04f 0c00 	mov.w	ip, #0
 8003836:	21bb      	movs	r1, #187	; 0xbb
 8003838:	e9cd 3c00 	strd	r3, ip, [sp]
 800383c:	201b      	movs	r0, #27
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <main+0xc34>)
 8003840:	aa0e      	add	r2, sp, #56	; 0x38
 8003842:	f7fe fe53 	bl	80024ec <LCD_Font>
 8003846:	e55d      	b.n	8003304 <main+0x5e0>
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8003848:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800384c:	259d      	movs	r5, #157	; 0x9d
 800384e:	f04f 0801 	mov.w	r8, #1
 8003852:	465f      	mov	r7, fp
 8003854:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800397c <main+0xc58>
 8003858:	e003      	b.n	8003862 <main+0xb3e>
						for (uint16_t i = 0; i < 155 ; i++) {
 800385a:	3d01      	subs	r5, #1
 800385c:	b2ad      	uxth	r5, r5
 800385e:	2d02      	cmp	r5, #2
 8003860:	d029      	beq.n	80038b6 <main+0xb92>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003862:	f839 4b02 	ldrh.w	r4, [r9], #2
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8003866:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800386a:	3cc0      	subs	r4, #192	; 0xc0
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 800386c:	462a      	mov	r2, r5
 800386e:	4628      	mov	r0, r5
 8003870:	21bf      	movs	r1, #191	; 0xbf
 8003872:	e9cd 8700 	strd	r8, r7, [sp]
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8003876:	b224      	sxth	r4, r4
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8003878:	f7fe fc8e 	bl	8002198 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 800387c:	2c00      	cmp	r4, #0
 800387e:	ddec      	ble.n	800385a <main+0xb36>
 8003880:	2c7f      	cmp	r4, #127	; 0x7f
 8003882:	bfa8      	it	ge
 8003884:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003886:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 800388a:	0052      	lsls	r2, r2, #1
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	2100      	movs	r1, #0
 8003890:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8003894:	f7fe f886 	bl	80019a4 <RGB>
 8003898:	4684      	mov	ip, r0
 800389a:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 800389e:	462a      	mov	r2, r5
 80038a0:	4628      	mov	r0, r5
 80038a2:	f240 133d 	movw	r3, #317	; 0x13d
 80038a6:	f8cd 8000 	str.w	r8, [sp]
 80038aa:	b2a1      	uxth	r1, r4
 80038ac:	f8cd c004 	str.w	ip, [sp, #4]
 80038b0:	f7fe fc72 	bl	8002198 <LCD_Line>
 80038b4:	e7d1      	b.n	800385a <main+0xb36>
 80038b6:	f44f 759e 	mov.w	r5, #316	; 0x13c
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	f04f 0801 	mov.w	r8, #1
 80038c2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8003980 <main+0xc5c>
 80038c6:	e003      	b.n	80038d0 <main+0xbac>
						for (uint16_t i = 0; i < 155 ; i++) {
 80038c8:	3d01      	subs	r5, #1
 80038ca:	b2ad      	uxth	r5, r5
 80038cc:	2da1      	cmp	r5, #161	; 0xa1
 80038ce:	d059      	beq.n	8003984 <main+0xc60>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038d0:	f839 4b02 	ldrh.w	r4, [r9], #2
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80038d4:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038d8:	3c64      	subs	r4, #100	; 0x64
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80038da:	462a      	mov	r2, r5
 80038dc:	4628      	mov	r0, r5
 80038de:	21bf      	movs	r1, #191	; 0xbf
 80038e0:	e9cd 8b00 	strd	r8, fp, [sp]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038e4:	01e4      	lsls	r4, r4, #7
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80038e6:	f7fe fc57 	bl	8002198 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 80038ea:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80038ee:	dbeb      	blt.n	80038c8 <main+0xba4>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80038f4:	fb94 f4f3 	sdiv	r4, r4, r3
 80038f8:	b224      	sxth	r4, r4
 80038fa:	2c7f      	cmp	r4, #127	; 0x7f
 80038fc:	bfa8      	it	ge
 80038fe:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003900:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	2100      	movs	r1, #0
 800390a:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 800390e:	f7fe f849 	bl	80019a4 <RGB>
 8003912:	4607      	mov	r7, r0
 8003914:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8003918:	462a      	mov	r2, r5
 800391a:	4628      	mov	r0, r5
 800391c:	f240 133d 	movw	r3, #317	; 0x13d
 8003920:	f8cd 8000 	str.w	r8, [sp]
 8003924:	b289      	uxth	r1, r1
 8003926:	9701      	str	r7, [sp, #4]
 8003928:	f7fe fc36 	bl	8002198 <LCD_Line>
 800392c:	e7cc      	b.n	80038c8 <main+0xba4>
 800392e:	bf00      	nop
 8003930:	20000846 	.word	0x20000846
 8003934:	20000844 	.word	0x20000844
 8003938:	2000084a 	.word	0x2000084a
 800393c:	2000084d 	.word	0x2000084d
 8003940:	0800c3cc 	.word	0x0800c3cc
 8003944:	20000000 	.word	0x20000000
 8003948:	0800c470 	.word	0x0800c470
 800394c:	20000848 	.word	0x20000848
 8003950:	20000847 	.word	0x20000847
 8003954:	20000845 	.word	0x20000845
 8003958:	0801b680 	.word	0x0801b680
 800395c:	0801dc24 	.word	0x0801dc24
 8003960:	2000084e 	.word	0x2000084e
 8003964:	2000084b 	.word	0x2000084b
 8003968:	0800c3d8 	.word	0x0800c3d8
 800396c:	0801dc08 	.word	0x0801dc08
 8003970:	40012c00 	.word	0x40012c00
 8003974:	0800c3d4 	.word	0x0800c3d4
 8003978:	0800c3e8 	.word	0x0800c3e8
 800397c:	200004c4 	.word	0x200004c4
 8003980:	20000254 	.word	0x20000254
 8003984:	f240 15db 	movw	r5, #475	; 0x1db
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8003988:	f04f 0b00 	mov.w	fp, #0
 800398c:	f04f 0801 	mov.w	r8, #1
 8003990:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8003c9c <main+0xf78>
 8003994:	e004      	b.n	80039a0 <main+0xc7c>
						for (uint16_t i = 0; i < 155 ; i++) {
 8003996:	3d01      	subs	r5, #1
 8003998:	b2ad      	uxth	r5, r5
 800399a:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800399e:	d02a      	beq.n	80039f6 <main+0xcd2>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80039a0:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
 80039a4:	f839 4b02 	ldrh.w	r4, [r9], #2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 80039a8:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80039ac:	4414      	add	r4, r2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 80039ae:	4628      	mov	r0, r5
 80039b0:	462a      	mov	r2, r5
 80039b2:	21bf      	movs	r1, #191	; 0xbf
 80039b4:	e9cd 8b00 	strd	r8, fp, [sp]
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 80039b8:	b224      	sxth	r4, r4
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 80039ba:	f7fe fbed 	bl	8002198 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80039be:	2c00      	cmp	r4, #0
 80039c0:	dde9      	ble.n	8003996 <main+0xc72>
 80039c2:	2c7f      	cmp	r4, #127	; 0x7f
 80039c4:	bfa8      	it	ge
 80039c6:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80039c8:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80039cc:	0052      	lsls	r2, r2, #1
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	2100      	movs	r1, #0
 80039d2:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 80039d6:	f7fd ffe5 	bl	80019a4 <RGB>
 80039da:	4607      	mov	r7, r0
 80039dc:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 80039e0:	462a      	mov	r2, r5
 80039e2:	4628      	mov	r0, r5
 80039e4:	f240 133d 	movw	r3, #317	; 0x13d
 80039e8:	f8cd 8000 	str.w	r8, [sp]
 80039ec:	b2a1      	uxth	r1, r4
 80039ee:	9701      	str	r7, [sp, #4]
 80039f0:	f7fe fbd2 	bl	8002198 <LCD_Line>
 80039f4:	e7cf      	b.n	8003996 <main+0xc72>
						viewGraphs = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80039fc:	4aa8      	ldr	r2, [pc, #672]	; (8003ca0 <main+0xf7c>)
 80039fe:	7013      	strb	r3, [r2, #0]
 8003a00:	e5b9      	b.n	8003576 <main+0x852>
 8003a02:	2c7f      	cmp	r4, #127	; 0x7f
 8003a04:	bfa8      	it	ge
 8003a06:	247f      	movge	r4, #127	; 0x7f
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003a08:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
						if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8003a0c:	40aa      	lsls	r2, r5
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	4641      	mov	r1, r8
 8003a12:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8003a16:	f7fd ffc5 	bl	80019a4 <RGB>
 8003a1a:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8003a1e:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8003a22:	9001      	str	r0, [sp, #4]
 8003a24:	f240 133d 	movw	r3, #317	; 0x13d
 8003a28:	4610      	mov	r0, r2
 8003a2a:	9500      	str	r5, [sp, #0]
 8003a2c:	b2a1      	uxth	r1, r4
 8003a2e:	f7fe fbb3 	bl	8002198 <LCD_Line>
 8003a32:	e599      	b.n	8003568 <main+0x844>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003a34:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003a38:	fb94 f4f3 	sdiv	r4, r4, r3
 8003a3c:	b224      	sxth	r4, r4
 8003a3e:	2c7f      	cmp	r4, #127	; 0x7f
 8003a40:	bfa8      	it	ge
 8003a42:	247f      	movge	r4, #127	; 0x7f
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003a44:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
						if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8003a48:	40aa      	lsls	r2, r5
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8003a52:	f7fd ffa7 	bl	80019a4 <RGB>
 8003a56:	f240 133d 	movw	r3, #317	; 0x13d
 8003a5a:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8003a5e:	9001      	str	r0, [sp, #4]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	9500      	str	r5, [sp, #0]
 8003a66:	b289      	uxth	r1, r1
 8003a68:	f7fe fb96 	bl	8002198 <LCD_Line>
 8003a6c:	e55b      	b.n	8003526 <main+0x802>
 8003a6e:	2c7f      	cmp	r4, #127	; 0x7f
 8003a70:	bfa8      	it	ge
 8003a72:	247f      	movge	r4, #127	; 0x7f
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003a74:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
						if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8003a78:	40aa      	lsls	r2, r5
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8003a82:	f7fd ff8f 	bl	80019a4 <RGB>
 8003a86:	229e      	movs	r2, #158	; 0x9e
 8003a88:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8003a8c:	9001      	str	r0, [sp, #4]
 8003a8e:	f240 133d 	movw	r3, #317	; 0x13d
 8003a92:	4610      	mov	r0, r2
 8003a94:	9500      	str	r5, [sp, #0]
 8003a96:	b2a1      	uxth	r1, r4
 8003a98:	f7fe fb7e 	bl	8002198 <LCD_Line>
 8003a9c:	e51e      	b.n	80034dc <main+0x7b8>
						AT24XX_Update(0, rtcHrs);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7fd fb30 	bl	8001104 <AT24XX_Update>
 8003aa4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003aa8:	f240 591e 	movw	r9, #1310	; 0x51e
						AT24XX_Update(0, rtcHrs);
 8003aac:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8003ca4 <main+0xf80>
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7fd fb0f 	bl	80010d4 <AT24XX_Read>
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	1c60      	adds	r0, r4, #1
 8003aba:	b280      	uxth	r0, r0
 8003abc:	f7fd fb0a 	bl	80010d4 <AT24XX_Read>
 8003ac0:	3402      	adds	r4, #2
 8003ac2:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8003ac4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003ac8:	454c      	cmp	r4, r9
 8003aca:	f828 5b02 	strh.w	r5, [r8], #2
 8003ace:	d1ef      	bne.n	8003ab0 <main+0xd8c>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8003ad0:	4974      	ldr	r1, [pc, #464]	; (8003ca4 <main+0xf80>)
 8003ad2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003ad6:	1c88      	adds	r0, r1, #2
 8003ad8:	f003 f8aa 	bl	8006c30 <memmove>
						hT[0] = (uint16_t) (temperature * 10);
 8003adc:	4972      	ldr	r1, [pc, #456]	; (8003ca8 <main+0xf84>)
 8003ade:	4632      	mov	r2, r6
 8003ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	f7fc fcf7 	bl	80004d8 <__aeabi_dmul>
 8003aea:	f7fc ffcd 	bl	8000a88 <__aeabi_d2uiz>
 8003aee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) {
 8003af2:	f240 581e 	movw	r8, #1310	; 0x51e
						hT[0] = (uint16_t) (temperature * 10);
 8003af6:	4d6b      	ldr	r5, [pc, #428]	; (8003ca4 <main+0xf80>)
 8003af8:	8028      	strh	r0, [r5, #0]
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8003afa:	4620      	mov	r0, r4
 8003afc:	7829      	ldrb	r1, [r5, #0]
 8003afe:	f7fd fb01 	bl	8001104 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8003b02:	f835 1b02 	ldrh.w	r1, [r5], #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003b06:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8003b08:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003b0a:	0a09      	lsrs	r1, r1, #8
 8003b0c:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8003b0e:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003b10:	f7fd faf8 	bl	8001104 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8003b14:	4544      	cmp	r4, r8
 8003b16:	d1f0      	bne.n	8003afa <main+0xdd6>
 8003b18:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003b1c:	f640 1906 	movw	r9, #2310	; 0x906
 8003b20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003cac <main+0xf88>
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7fd fad5 	bl	80010d4 <AT24XX_Read>
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	1c60      	adds	r0, r4, #1
 8003b2e:	b280      	uxth	r0, r0
 8003b30:	f7fd fad0 	bl	80010d4 <AT24XX_Read>
 8003b34:	3402      	adds	r4, #2
 8003b36:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8003b38:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003b3c:	454c      	cmp	r4, r9
 8003b3e:	f828 5b02 	strh.w	r5, [r8], #2
 8003b42:	d1ef      	bne.n	8003b24 <main+0xe00>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8003b44:	4959      	ldr	r1, [pc, #356]	; (8003cac <main+0xf88>)
 8003b46:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003b4a:	1c88      	adds	r0, r1, #2
 8003b4c:	f003 f870 	bl	8006c30 <memmove>
						hH[0] = (uint16_t) (humidity * 10);
 8003b50:	e9da 0100 	ldrd	r0, r1, [sl]
 8003b54:	4632      	mov	r2, r6
 8003b56:	463b      	mov	r3, r7
 8003b58:	f7fc fcbe 	bl	80004d8 <__aeabi_dmul>
 8003b5c:	f7fc ff94 	bl	8000a88 <__aeabi_d2uiz>
 8003b60:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) {
 8003b64:	f640 1806 	movw	r8, #2310	; 0x906
						hH[0] = (uint16_t) (humidity * 10);
 8003b68:	4d50      	ldr	r5, [pc, #320]	; (8003cac <main+0xf88>)
 8003b6a:	8028      	strh	r0, [r5, #0]
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	7829      	ldrb	r1, [r5, #0]
 8003b70:	f7fd fac8 	bl	8001104 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8003b74:	f835 1b02 	ldrh.w	r1, [r5], #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003b78:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8003b7a:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003b7c:	0a09      	lsrs	r1, r1, #8
 8003b7e:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8003b80:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003b82:	f7fd fabf 	bl	8001104 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8003b86:	4544      	cmp	r4, r8
 8003b88:	d1f0      	bne.n	8003b6c <main+0xe48>
 8003b8a:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003b8e:	f640 49ee 	movw	r9, #3310	; 0xcee
 8003b92:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8003c9c <main+0xf78>
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7fd fa9c 	bl	80010d4 <AT24XX_Read>
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	1c60      	adds	r0, r4, #1
 8003ba0:	b280      	uxth	r0, r0
 8003ba2:	f7fd fa97 	bl	80010d4 <AT24XX_Read>
 8003ba6:	3402      	adds	r4, #2
 8003ba8:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8003baa:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003bae:	454c      	cmp	r4, r9
 8003bb0:	f828 5b02 	strh.w	r5, [r8], #2
 8003bb4:	d1ef      	bne.n	8003b96 <main+0xe72>
						hP[0] = (uint16_t)pressure;
 8003bb6:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) {
 8003bba:	f640 48ee 	movw	r8, #3310	; 0xcee
						hP[0] = (uint16_t)pressure;
 8003bbe:	4d37      	ldr	r5, [pc, #220]	; (8003c9c <main+0xf78>)
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8003bc0:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	1ca8      	adds	r0, r5, #2
 8003bc8:	f003 f832 	bl	8006c30 <memmove>
						hP[0] = (uint16_t)pressure;
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <main+0xf8c>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	802b      	strh	r3, [r5, #0]
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	7829      	ldrb	r1, [r5, #0]
 8003bd6:	f7fd fa95 	bl	8001104 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8003bda:	f835 1b02 	ldrh.w	r1, [r5], #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8003bde:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8003be0:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8003be2:	0a09      	lsrs	r1, r1, #8
 8003be4:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8003be6:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8003be8:	f7fd fa8c 	bl	8001104 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8003bec:	4544      	cmp	r4, r8
 8003bee:	d1f0      	bne.n	8003bd2 <main+0xeae>
						viewGraphs = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4a2b      	ldr	r2, [pc, #172]	; (8003ca0 <main+0xf7c>)
 8003bf4:	7013      	strb	r3, [r2, #0]
 8003bf6:	e44c      	b.n	8003492 <main+0x76e>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <main+0xf90>)
 8003c00:	f7fc fefa 	bl	80009f8 <__aeabi_dcmpgt>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f43f abd3 	beq.w	80033b0 <main+0x68c>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	492a      	ldr	r1, [pc, #168]	; (8003cb8 <main+0xf94>)
 8003c10:	a80e      	add	r0, sp, #56	; 0x38
 8003c12:	f003 fea1 	bl	8007958 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003c16:	2001      	movs	r0, #1
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <main+0xf98>)
 8003c1a:	21bb      	movs	r1, #187	; 0xbb
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	aa0e      	add	r2, sp, #56	; 0x38
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <main+0xf9c>)
 8003c22:	9000      	str	r0, [sp, #0]
 8003c24:	f7fe fc62 	bl	80024ec <LCD_Font>
 8003c28:	f7ff bbdb 	b.w	80033e2 <main+0x6be>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	4924      	ldr	r1, [pc, #144]	; (8003cc4 <main+0xfa0>)
 8003c32:	a80e      	add	r0, sp, #56	; 0x38
 8003c34:	f003 fe90 	bl	8007958 <siprintf>
						if (humidityLast >= 10)
 8003c38:	4923      	ldr	r1, [pc, #140]	; (8003cc8 <main+0xfa4>)
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c40:	463b      	mov	r3, r7
 8003c42:	f7fc fecf 	bl	80009e4 <__aeabi_dcmpge>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d06c      	beq.n	8003d24 <main+0x1000>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	21bb      	movs	r1, #187	; 0xbb
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	20a0      	movs	r0, #160	; 0xa0
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <main+0xf9c>)
 8003c54:	9401      	str	r4, [sp, #4]
 8003c56:	aa0e      	add	r2, sp, #56	; 0x38
 8003c58:	f7fe fc48 	bl	80024ec <LCD_Font>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 8003c5c:	e9da 2300 	ldrd	r2, r3, [sl]
 8003c60:	4918      	ldr	r1, [pc, #96]	; (8003cc4 <main+0xfa0>)
 8003c62:	a80e      	add	r0, sp, #56	; 0x38
 8003c64:	f003 fe78 	bl	8007958 <siprintf>
						if (humidity >= 10)
 8003c68:	e9da 0100 	ldrd	r0, r1, [sl]
 8003c6c:	4632      	mov	r2, r6
 8003c6e:	463b      	mov	r3, r7
 8003c70:	f7fc feb8 	bl	80009e4 <__aeabi_dcmpge>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003c74:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003c78:	2301      	movs	r3, #1
 8003c7a:	21bb      	movs	r1, #187	; 0xbb
 8003c7c:	e9cd 3400 	strd	r3, r4, [sp]
 8003c80:	aa0e      	add	r2, sp, #56	; 0x38
						if (humidity >= 10)
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d049      	beq.n	8003d1a <main+0xff6>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003c86:	20a0      	movs	r0, #160	; 0xa0
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <main+0xf9c>)
 8003c8a:	f7fe fc2f 	bl	80024ec <LCD_Font>
						humidityLast = humidity;
 8003c8e:	e9da 2300 	ldrd	r2, r3, [sl]
 8003c92:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <main+0xfa4>)
 8003c94:	e9c1 2300 	strd	r2, r3, [r1]
 8003c98:	f7ff bbb6 	b.w	8003408 <main+0x6e4>
 8003c9c:	2000038c 	.word	0x2000038c
 8003ca0:	20000968 	.word	0x20000968
 8003ca4:	200004c4 	.word	0x200004c4
 8003ca8:	20000958 	.word	0x20000958
 8003cac:	20000254 	.word	0x20000254
 8003cb0:	20000840 	.word	0x20000840
 8003cb4:	c0240000 	.word	0xc0240000
 8003cb8:	0800c3e8 	.word	0x0800c3e8
 8003cbc:	00ffa500 	.word	0x00ffa500
 8003cc0:	0801b680 	.word	0x0801b680
 8003cc4:	0800c3f8 	.word	0x0800c3f8
 8003cc8:	20000838 	.word	0x20000838
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7fc feb2 	bl	8000a38 <__aeabi_d2iz>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4926      	ldr	r1, [pc, #152]	; (8003d70 <main+0x104c>)
 8003cd8:	a80e      	add	r0, sp, #56	; 0x38
 8003cda:	b252      	sxtb	r2, r2
 8003cdc:	f003 fe3c 	bl	8007958 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	21bb      	movs	r1, #187	; 0xbb
 8003ce6:	e9cd 0300 	strd	r0, r3, [sp]
 8003cea:	aa0e      	add	r2, sp, #56	; 0x38
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <main+0x1050>)
 8003cee:	f7fe fbfd 	bl	80024ec <LCD_Font>
 8003cf2:	f7ff bb07 	b.w	8003304 <main+0x5e0>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8003cf6:	462b      	mov	r3, r5
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003cf8:	2501      	movs	r5, #1
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	491e      	ldr	r1, [pc, #120]	; (8003d78 <main+0x1054>)
 8003cfe:	a80e      	add	r0, sp, #56	; 0x38
 8003d00:	f003 fe2a 	bl	8007958 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <main+0x1058>)
 8003d06:	21bb      	movs	r1, #187	; 0xbb
 8003d08:	e9cd 5300 	strd	r5, r3, [sp]
 8003d0c:	201b      	movs	r0, #27
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <main+0x1050>)
 8003d10:	aa0e      	add	r2, sp, #56	; 0x38
 8003d12:	f7fe fbeb 	bl	80024ec <LCD_Font>
 8003d16:	f7ff bb64 	b.w	80033e2 <main+0x6be>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003d1a:	20ba      	movs	r0, #186	; 0xba
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <main+0x1050>)
 8003d1e:	f7fe fbe5 	bl	80024ec <LCD_Font>
 8003d22:	e7b4      	b.n	8003c8e <main+0xf6a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8003d24:	2301      	movs	r3, #1
 8003d26:	9001      	str	r0, [sp, #4]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	21bb      	movs	r1, #187	; 0xbb
 8003d2c:	20ba      	movs	r0, #186	; 0xba
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <main+0x1050>)
 8003d30:	aa0e      	add	r2, sp, #56	; 0x38
 8003d32:	f7fe fbdb 	bl	80024ec <LCD_Font>
 8003d36:	e791      	b.n	8003c5c <main+0xf38>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <main+0x105c>)
 8003d40:	f7fc fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f43f aac4 	beq.w	80032d2 <main+0x5ae>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	490a      	ldr	r1, [pc, #40]	; (8003d78 <main+0x1054>)
 8003d50:	a80e      	add	r0, sp, #56	; 0x38
 8003d52:	f003 fe01 	bl	8007958 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003d56:	e7c3      	b.n	8003ce0 <main+0xfbc>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7fc fe6c 	bl	8000a38 <__aeabi_d2iz>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4903      	ldr	r1, [pc, #12]	; (8003d70 <main+0x104c>)
 8003d64:	a80e      	add	r0, sp, #56	; 0x38
 8003d66:	b252      	sxtb	r2, r2
 8003d68:	f003 fdf6 	bl	8007958 <siprintf>
 8003d6c:	e753      	b.n	8003c16 <main+0xef2>
 8003d6e:	bf00      	nop
 8003d70:	0800c3f0 	.word	0x0800c3f0
 8003d74:	0801b680 	.word	0x0801b680
 8003d78:	0800c3e8 	.word	0x0800c3e8
 8003d7c:	00ffa500 	.word	0x00ffa500
 8003d80:	c0240000 	.word	0xc0240000

08003d84 <Error_Handler>:
 8003d84:	b672      	cpsid	i
	while (1)
 8003d86:	e7fe      	b.n	8003d86 <Error_Handler+0x2>

08003d88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_MspInit+0x3c>)
{
 8003d8a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d8c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d8e:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	619a      	str	r2, [r3, #24]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	f002 0201 	and.w	r2, r2, #1
 8003d9c:	9200      	str	r2, [sp, #0]
 8003d9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003da6:	61da      	str	r2, [r3, #28]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003db2:	684b      	ldr	r3, [r1, #4]
 8003db4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dbe:	b002      	add	sp, #8
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40010000 	.word	0x40010000

08003dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dce:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_I2C_MspInit+0xb0>)
 8003dd2:	6802      	ldr	r2, [r0, #0]
{
 8003dd4:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8003dd6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003ddc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003de2:	b007      	add	sp, #28
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4f26      	ldr	r7, [pc, #152]	; (8003e80 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003de8:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dea:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	f043 0308 	orr.w	r3, r3, #8
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4605      	mov	r5, r0
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e00:	2312      	movs	r3, #18
 8003e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e06:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e08:	481e      	ldr	r0, [pc, #120]	; (8003e84 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e0a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0c:	f000 fbac 	bl	8004568 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e10:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003e12:	4e1d      	ldr	r6, [pc, #116]	; (8003e88 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e18:	60b4      	str	r4, [r6, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e1e:	2210      	movs	r2, #16
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e24:	9301      	str	r3, [sp, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e26:	2380      	movs	r3, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003e28:	4918      	ldr	r1, [pc, #96]	; (8003e8c <HAL_I2C_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003e2a:	4630      	mov	r0, r6
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003e2c:	6031      	str	r1, [r6, #0]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003e2e:	e9c6 4405 	strd	r4, r4, [r6, #20]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e32:	9901      	ldr	r1, [sp, #4]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e34:	6134      	str	r4, [r6, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e36:	61f4      	str	r4, [r6, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e38:	6072      	str	r2, [r6, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e3a:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003e3c:	f000 fa86 	bl	800434c <HAL_DMA_Init>
 8003e40:	b9a8      	cbnz	r0, 8003e6e <HAL_I2C_MspInit+0xa2>
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e42:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e44:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003e46:	4c12      	ldr	r4, [pc, #72]	; (8003e90 <HAL_I2C_MspInit+0xc4>)
 8003e48:	4912      	ldr	r1, [pc, #72]	; (8003e94 <HAL_I2C_MspInit+0xc8>)
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003e4a:	4620      	mov	r0, r4
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003e4c:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e52:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003e56:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003e5a:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003e5c:	6021      	str	r1, [r4, #0]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e5e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003e60:	f000 fa74 	bl	800434c <HAL_DMA_Init>
 8003e64:	b930      	cbnz	r0, 8003e74 <HAL_I2C_MspInit+0xa8>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003e66:	63ac      	str	r4, [r5, #56]	; 0x38
 8003e68:	6265      	str	r5, [r4, #36]	; 0x24
}
 8003e6a:	b007      	add	sp, #28
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003e6e:	f7ff ff89 	bl	8003d84 <Error_Handler>
 8003e72:	e7e6      	b.n	8003e42 <HAL_I2C_MspInit+0x76>
      Error_Handler();
 8003e74:	f7ff ff86 	bl	8003d84 <Error_Handler>
 8003e78:	e7f5      	b.n	8003e66 <HAL_I2C_MspInit+0x9a>
 8003e7a:	bf00      	nop
 8003e7c:	40005400 	.word	0x40005400
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010c00 	.word	0x40010c00
 8003e88:	20000640 	.word	0x20000640
 8003e8c:	4002006c 	.word	0x4002006c
 8003e90:	200005fc 	.word	0x200005fc
 8003e94:	40020080 	.word	0x40020080

08003e98 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_TIM_Base_MspInit+0x5c>)
 8003e9a:	6802      	ldr	r2, [r0, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d000      	beq.n	8003ea2 <HAL_TIM_Base_MspInit+0xa>
 8003ea0:	4770      	bx	lr
{
 8003ea2:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_TIM1_CLK_ENABLE();

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4604      	mov	r4, r0
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ea8:	2680      	movs	r6, #128	; 0x80
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eaa:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003eb2:	4d11      	ldr	r5, [pc, #68]	; (8003ef8 <HAL_TIM_Base_MspInit+0x60>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_TIM_Base_MspInit+0x64>)
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eb6:	e9c5 6003 	strd	r6, r0, [r5, #12]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eba:	e9c5 3301 	strd	r3, r3, [r5, #4]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ebe:	e9c5 3306 	strd	r3, r3, [r5, #24]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ec2:	6169      	str	r1, [r5, #20]
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ec4:	6993      	ldr	r3, [r2, #24]
{
 8003ec6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ecc:	6193      	str	r3, [r2, #24]
 8003ece:	6993      	ldr	r3, [r2, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003ed0:	4628      	mov	r0, r5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	9301      	str	r3, [sp, #4]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eda:	9a01      	ldr	r2, [sp, #4]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003edc:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003ede:	f000 fa35 	bl	800434c <HAL_DMA_Init>
 8003ee2:	b918      	cbnz	r0, 8003eec <HAL_TIM_Base_MspInit+0x54>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003ee4:	6265      	str	r5, [r4, #36]	; 0x24
 8003ee6:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003eec:	f7ff ff4a 	bl	8003d84 <Error_Handler>
 8003ef0:	e7f8      	b.n	8003ee4 <HAL_TIM_Base_MspInit+0x4c>
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	20000684 	.word	0x20000684
 8003efc:	40021000 	.word	0x40021000
 8003f00:	4002001c 	.word	0x4002001c

08003f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	2300      	movs	r3, #0
{
 8003f06:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_TIM_MspPostInit+0x50>)
 8003f0a:	6801      	ldr	r1, [r0, #0]
{
 8003f0c:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8003f0e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f14:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8003f18:	d001      	beq.n	8003f1e <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f1e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003f22:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f24:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003f2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f30:	4809      	ldr	r0, [pc, #36]	; (8003f58 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	f042 0204 	orr.w	r2, r2, #4
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f42:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4a:	f000 fb0d 	bl	8004568 <HAL_GPIO_Init>
}
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40010800 	.word	0x40010800

08003f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f5c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5e:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_UART_MspInit+0xc8>)
 8003f62:	6802      	ldr	r2, [r0, #0]
{
 8003f64:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8003f66:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003f6c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8003f70:	d001      	beq.n	8003f76 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f72:	b006      	add	sp, #24
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f76:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f82:	619a      	str	r2, [r3, #24]
 8003f84:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f86:	4828      	ldr	r0, [pc, #160]	; (8004028 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f8c:	9200      	str	r2, [sp, #0]
 8003f8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f90:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003f92:	4e26      	ldr	r6, [pc, #152]	; (800402c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	619a      	str	r2, [r3, #24]
 8003f9a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa8:	2103      	movs	r1, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003faa:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fac:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fae:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f000 fad8 	bl	8004568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fbc:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	481a      	ldr	r0, [pc, #104]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fc0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc8:	f000 face 	bl	8004568 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fcc:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fce:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fd2:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fd4:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003fdc:	6031      	str	r1, [r6, #0]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fde:	60b4      	str	r4, [r6, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fe0:	6072      	str	r2, [r6, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe2:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fe4:	f000 f9b2 	bl	800434c <HAL_DMA_Init>
 8003fe8:	b9a8      	cbnz	r0, 8004016 <HAL_UART_MspInit+0xba>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fea:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fec:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003fee:	4c11      	ldr	r4, [pc, #68]	; (8004034 <HAL_UART_MspInit+0xd8>)
 8003ff0:	4911      	ldr	r1, [pc, #68]	; (8004038 <HAL_UART_MspInit+0xdc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ff2:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ff4:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff6:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ffa:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003ffe:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004002:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004004:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004006:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004008:	f000 f9a0 	bl	800434c <HAL_DMA_Init>
 800400c:	b930      	cbnz	r0, 800401c <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800400e:	63ac      	str	r4, [r5, #56]	; 0x38
 8004010:	6265      	str	r5, [r4, #36]	; 0x24
}
 8004012:	b006      	add	sp, #24
 8004014:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004016:	f7ff feb5 	bl	8003d84 <Error_Handler>
 800401a:	e7e6      	b.n	8003fea <HAL_UART_MspInit+0x8e>
      Error_Handler();
 800401c:	f7ff feb2 	bl	8003d84 <Error_Handler>
 8004020:	e7f5      	b.n	800400e <HAL_UART_MspInit+0xb2>
 8004022:	bf00      	nop
 8004024:	40013800 	.word	0x40013800
 8004028:	40010800 	.word	0x40010800
 800402c:	2000070c 	.word	0x2000070c
 8004030:	40020044 	.word	0x40020044
 8004034:	200006c8 	.word	0x200006c8
 8004038:	40020058 	.word	0x40020058

0800403c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800403c:	e7fe      	b.n	800403c <NMI_Handler>
 800403e:	bf00      	nop

08004040 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004040:	e7fe      	b.n	8004040 <HardFault_Handler>
 8004042:	bf00      	nop

08004044 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004044:	e7fe      	b.n	8004044 <MemManage_Handler>
 8004046:	bf00      	nop

08004048 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004048:	e7fe      	b.n	8004048 <BusFault_Handler>
 800404a:	bf00      	nop

0800404c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800404c:	e7fe      	b.n	800404c <UsageFault_Handler>
 800404e:	bf00      	nop

08004050 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop

08004054 <DebugMon_Handler>:
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <PendSV_Handler>:
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800405c:	f000 b8dc 	b.w	8004218 <HAL_IncTick>

08004060 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <DMA1_Channel2_IRQHandler+0x8>)
 8004062:	f000 b9ed 	b.w	8004440 <HAL_DMA_IRQHandler>
 8004066:	bf00      	nop
 8004068:	20000684 	.word	0x20000684

0800406c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <DMA1_Channel4_IRQHandler+0x8>)
 800406e:	f000 b9e7 	b.w	8004440 <HAL_DMA_IRQHandler>
 8004072:	bf00      	nop
 8004074:	2000070c 	.word	0x2000070c

08004078 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <DMA1_Channel5_IRQHandler+0x8>)
 800407a:	f000 b9e1 	b.w	8004440 <HAL_DMA_IRQHandler>
 800407e:	bf00      	nop
 8004080:	200006c8 	.word	0x200006c8

08004084 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004084:	4801      	ldr	r0, [pc, #4]	; (800408c <DMA1_Channel6_IRQHandler+0x8>)
 8004086:	f000 b9db 	b.w	8004440 <HAL_DMA_IRQHandler>
 800408a:	bf00      	nop
 800408c:	20000640 	.word	0x20000640

08004090 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <DMA1_Channel7_IRQHandler+0x8>)
 8004092:	f000 b9d5 	b.w	8004440 <HAL_DMA_IRQHandler>
 8004096:	bf00      	nop
 8004098:	200005fc 	.word	0x200005fc

0800409c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800409c:	2001      	movs	r0, #1
 800409e:	4770      	bx	lr

080040a0 <_kill>:

int _kill(int pid, int sig)
{
 80040a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040a2:	f002 fd9b 	bl	8006bdc <__errno>
 80040a6:	2216      	movs	r2, #22
 80040a8:	4603      	mov	r3, r0
	return -1;
}
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80040ae:	601a      	str	r2, [r3, #0]
}
 80040b0:	bd08      	pop	{r3, pc}
 80040b2:	bf00      	nop

080040b4 <_exit>:

void _exit (int status)
{
 80040b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040b6:	f002 fd91 	bl	8006bdc <__errno>
 80040ba:	2316      	movs	r3, #22
 80040bc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040be:	e7fe      	b.n	80040be <_exit+0xa>

080040c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c2:	1e16      	subs	r6, r2, #0
 80040c4:	dd07      	ble.n	80040d6 <_read+0x16>
 80040c6:	460c      	mov	r4, r1
 80040c8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80040ca:	f3af 8000 	nop.w
 80040ce:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d2:	42a5      	cmp	r5, r4
 80040d4:	d1f9      	bne.n	80040ca <_read+0xa>
	}

return len;
}
 80040d6:	4630      	mov	r0, r6
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
 80040da:	bf00      	nop

080040dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040de:	1e16      	subs	r6, r2, #0
 80040e0:	dd07      	ble.n	80040f2 <_write+0x16>
 80040e2:	460c      	mov	r4, r1
 80040e4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80040e6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80040ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	42ac      	cmp	r4, r5
 80040f0:	d1f9      	bne.n	80040e6 <_write+0xa>
	}
	return len;
}
 80040f2:	4630      	mov	r0, r6
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
 80040f6:	bf00      	nop

080040f8 <_close>:

int _close(int file)
{
	return -1;
}
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop

08004100 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004104:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004106:	604b      	str	r3, [r1, #4]
}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800410c:	2001      	movs	r0, #1
 800410e:	4770      	bx	lr

08004110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004110:	2000      	movs	r0, #0
 8004112:	4770      	bx	lr

08004114 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004114:	490d      	ldr	r1, [pc, #52]	; (800414c <_sbrk+0x38>)
{
 8004116:	4603      	mov	r3, r0
 8004118:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800411a:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <_sbrk+0x3c>)
 800411c:	4c0d      	ldr	r4, [pc, #52]	; (8004154 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800411e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004120:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004122:	b120      	cbz	r0, 800412e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004124:	4403      	add	r3, r0
 8004126:	4293      	cmp	r3, r2
 8004128:	d807      	bhi.n	800413a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800412a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800412c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800412e:	4c0a      	ldr	r4, [pc, #40]	; (8004158 <_sbrk+0x44>)
 8004130:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8004132:	4403      	add	r3, r0
 8004134:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8004136:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004138:	d9f7      	bls.n	800412a <_sbrk+0x16>
    errno = ENOMEM;
 800413a:	f002 fd4f 	bl	8006bdc <__errno>
 800413e:	220c      	movs	r2, #12
 8004140:	4603      	mov	r3, r0
    return (void *)-1;
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	2000096c 	.word	0x2000096c
 8004150:	20005000 	.word	0x20005000
 8004154:	00000400 	.word	0x00000400
 8004158:	20000988 	.word	0x20000988

0800415c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800415c:	480c      	ldr	r0, [pc, #48]	; (8004190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800415e:	490d      	ldr	r1, [pc, #52]	; (8004194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004160:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004164:	e002      	b.n	800416c <LoopCopyDataInit>

08004166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800416a:	3304      	adds	r3, #4

0800416c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800416c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800416e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004170:	d3f9      	bcc.n	8004166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004174:	4c0a      	ldr	r4, [pc, #40]	; (80041a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004178:	e001      	b.n	800417e <LoopFillZerobss>

0800417a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800417a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800417c:	3204      	adds	r2, #4

0800417e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800417e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004180:	d3fb      	bcc.n	800417a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004182:	f000 f811 	bl	80041a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004186:	f002 fd2f 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800418a:	f7fe fdcb 	bl	8002d24 <main>
  bx lr
 800418e:	4770      	bx	lr
  ldr r0, =_sdata
 8004190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004194:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004198:	0801e160 	.word	0x0801e160
  ldr r2, =_sbss
 800419c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80041a0:	20000984 	.word	0x20000984

080041a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041a4:	e7fe      	b.n	80041a4 <ADC1_2_IRQHandler>
	...

080041a8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b2:	4a0d      	ldr	r2, [pc, #52]	; (80041e8 <HAL_InitTick+0x3c>)
{
 80041b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b6:	7811      	ldrb	r1, [r2, #0]
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_InitTick+0x40>)
 80041ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	fbb2 f0f3 	udiv	r0, r2, r3
 80041c4:	f000 f8aa 	bl	800431c <HAL_SYSTICK_Config>
 80041c8:	b908      	cbnz	r0, 80041ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ca:	2d0f      	cmp	r5, #15
 80041cc:	d901      	bls.n	80041d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80041ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80041d0:	bd38      	pop	{r3, r4, r5, pc}
 80041d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	4602      	mov	r2, r0
 80041d6:	4629      	mov	r1, r5
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f000 f852 	bl	8004284 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_InitTick+0x44>)
 80041e2:	4620      	mov	r0, r4
 80041e4:	601d      	str	r5, [r3, #0]
}
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000008 	.word	0x20000008
 80041ec:	20000004 	.word	0x20000004
 80041f0:	2000000c 	.word	0x2000000c

080041f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f4:	4a07      	ldr	r2, [pc, #28]	; (8004214 <HAL_Init+0x20>)
{
 80041f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	f043 0310 	orr.w	r3, r3, #16
 8004200:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004202:	f000 f82d 	bl	8004260 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004206:	200f      	movs	r0, #15
 8004208:	f7ff ffd0 	bl	80041ac <HAL_InitTick>
  HAL_MspInit();
 800420c:	f7ff fdbc 	bl	8003d88 <HAL_MspInit>
}
 8004210:	2000      	movs	r0, #0
 8004212:	bd08      	pop	{r3, pc}
 8004214:	40022000 	.word	0x40022000

08004218 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <HAL_IncTick+0x10>)
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_IncTick+0x14>)
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	440b      	add	r3, r1
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000970 	.word	0x20000970
 800422c:	20000008 	.word	0x20000008

08004230 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <HAL_GetTick+0x8>)
 8004232:	6818      	ldr	r0, [r3, #0]
}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000970 	.word	0x20000970

0800423c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7ff fff6 	bl	8004230 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004244:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004246:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004248:	d002      	beq.n	8004250 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_Delay+0x20>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004250:	f7ff ffee 	bl	8004230 <HAL_GetTick>
 8004254:	1b40      	subs	r0, r0, r5
 8004256:	42a0      	cmp	r0, r4
 8004258:	d3fa      	bcc.n	8004250 <HAL_Delay+0x14>
  {
  }
}
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	20000008 	.word	0x20000008

08004260 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004260:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004264:	4906      	ldr	r1, [pc, #24]	; (8004280 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004266:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800427c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004286:	b500      	push	{lr}
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800428e:	f1c3 0e07 	rsb	lr, r3, #7
 8004292:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004296:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800429a:	bf28      	it	cs
 800429c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a0:	f1bc 0f06 	cmp.w	ip, #6
 80042a4:	d91b      	bls.n	80042de <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042aa:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ac:	fa0c fc03 	lsl.w	ip, ip, r3
 80042b0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 3cff 	mov.w	ip, #4294967295
 80042b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80042bc:	ea21 010c 	bic.w	r1, r1, ip
 80042c0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80042c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80042c8:	db0c      	blt.n	80042e4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	0109      	lsls	r1, r1, #4
 80042cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80042d0:	b2c9      	uxtb	r1, r1
 80042d2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80042d6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042da:	f85d fb04 	ldr.w	pc, [sp], #4
 80042de:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e0:	4613      	mov	r3, r2
 80042e2:	e7e7      	b.n	80042b4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_NVIC_SetPriority+0x78>)
 80042e6:	f000 000f 	and.w	r0, r0, #15
 80042ea:	0109      	lsls	r1, r1, #4
 80042ec:	b2c9      	uxtb	r1, r1
 80042ee:	4403      	add	r3, r0
 80042f0:	7619      	strb	r1, [r3, #24]
 80042f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042f6:	bf00      	nop
 80042f8:	e000ed00 	.word	0xe000ed00
 80042fc:	e000ecfc 	.word	0xe000ecfc

08004300 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004300:	2800      	cmp	r0, #0
 8004302:	db07      	blt.n	8004314 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004304:	2301      	movs	r3, #1
 8004306:	f000 011f 	and.w	r1, r0, #31
 800430a:	4a03      	ldr	r2, [pc, #12]	; (8004318 <HAL_NVIC_EnableIRQ+0x18>)
 800430c:	0940      	lsrs	r0, r0, #5
 800430e:	408b      	lsls	r3, r1
 8004310:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e100 	.word	0xe000e100

0800431c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800431c:	3801      	subs	r0, #1
 800431e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004322:	d20f      	bcs.n	8004344 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004324:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800432c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004330:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	4c05      	ldr	r4, [pc, #20]	; (8004348 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004334:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004336:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800433a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800433c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800433e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004340:	6119      	str	r1, [r3, #16]
 8004342:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004344:	2001      	movs	r0, #1
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800434c:	b340      	cbz	r0, 80043a0 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800434e:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004350:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004352:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8004356:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004358:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 800435a:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800435e:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004360:	4910      	ldr	r1, [pc, #64]	; (80043a4 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004362:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004364:	4d10      	ldr	r5, [pc, #64]	; (80043a8 <HAL_DMA_Init+0x5c>)
 8004366:	4401      	add	r1, r0
 8004368:	fba5 5101 	umull	r5, r1, r5, r1
 800436c:	0909      	lsrs	r1, r1, #4
 800436e:	0089      	lsls	r1, r1, #2
 8004370:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004374:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004376:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 800437c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004380:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004382:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8004386:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 800438c:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 800438e:	4907      	ldr	r1, [pc, #28]	; (80043ac <HAL_DMA_Init+0x60>)
 8004390:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8004392:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8004394:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8004398:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800439c:	bc30      	pop	{r4, r5}
 800439e:	4770      	bx	lr
    return HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
}
 80043a2:	4770      	bx	lr
 80043a4:	bffdfff8 	.word	0xbffdfff8
 80043a8:	cccccccd 	.word	0xcccccccd
 80043ac:	40020000 	.word	0x40020000

080043b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b0:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043b2:	f890 0020 	ldrb.w	r0, [r0, #32]
 80043b6:	2801      	cmp	r0, #1
 80043b8:	d03f      	beq.n	800443a <HAL_DMA_Start_IT+0x8a>
{
 80043ba:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 80043bc:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043be:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 80043c2:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80043c6:	42a0      	cmp	r0, r4
 80043c8:	d005      	beq.n	80043d6 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043ca:	2300      	movs	r3, #0
 80043cc:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80043d0:	2002      	movs	r0, #2
  }    
  return status;
}
 80043d2:	bc30      	pop	{r4, r5}
 80043d4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d6:	2402      	movs	r4, #2
 80043d8:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043dc:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043de:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e2:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80043e6:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043ea:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 80043ec:	6825      	ldr	r5, [r4, #0]
 80043ee:	f025 0501 	bic.w	r5, r5, #1
 80043f2:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043f4:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 80043f8:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043fa:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004400:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8004402:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004406:	bf0b      	itete	eq
 8004408:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800440a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800440c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800440e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8004410:	b153      	cbz	r3, 8004428 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f043 030e 	orr.w	r3, r3, #14
 8004418:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800441a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6023      	str	r3, [r4, #0]
}
 8004424:	bc30      	pop	{r4, r5}
 8004426:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f023 0304 	bic.w	r3, r3, #4
 800442e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f043 030a 	orr.w	r3, r3, #10
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	e7ef      	b.n	800441a <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 800443a:	2002      	movs	r0, #2
}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop

08004440 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004440:	2204      	movs	r2, #4
{
 8004442:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004444:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004446:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004448:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800444a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800444c:	408a      	lsls	r2, r1
 800444e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004450:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004452:	d01f      	beq.n	8004494 <HAL_DMA_IRQHandler+0x54>
 8004454:	076a      	lsls	r2, r5, #29
 8004456:	d51d      	bpl.n	8004494 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	0691      	lsls	r1, r2, #26
 800445c:	d403      	bmi.n	8004466 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	f022 0204 	bic.w	r2, r2, #4
 8004464:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004466:	4a3e      	ldr	r2, [pc, #248]	; (8004560 <HAL_DMA_IRQHandler+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d050      	beq.n	800450e <HAL_DMA_IRQHandler+0xce>
 800446c:	3214      	adds	r2, #20
 800446e:	4293      	cmp	r3, r2
 8004470:	d060      	beq.n	8004534 <HAL_DMA_IRQHandler+0xf4>
 8004472:	3214      	adds	r2, #20
 8004474:	4293      	cmp	r3, r2
 8004476:	d067      	beq.n	8004548 <HAL_DMA_IRQHandler+0x108>
 8004478:	3214      	adds	r2, #20
 800447a:	4293      	cmp	r3, r2
 800447c:	d06a      	beq.n	8004554 <HAL_DMA_IRQHandler+0x114>
 800447e:	3214      	adds	r2, #20
 8004480:	4293      	cmp	r3, r2
 8004482:	d05c      	beq.n	800453e <HAL_DMA_IRQHandler+0xfe>
 8004484:	3214      	adds	r2, #20
 8004486:	4293      	cmp	r3, r2
 8004488:	bf0c      	ite	eq
 800448a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800448e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004492:	e03d      	b.n	8004510 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004494:	2202      	movs	r2, #2
 8004496:	408a      	lsls	r2, r1
 8004498:	4222      	tst	r2, r4
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xa2>
 800449c:	07aa      	lsls	r2, r5, #30
 800449e:	d520      	bpl.n	80044e2 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	0691      	lsls	r1, r2, #26
 80044a4:	d406      	bmi.n	80044b4 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80044a6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f022 020a 	bic.w	r2, r2, #10
 80044ae:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80044b0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <HAL_DMA_IRQHandler+0x120>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xde>
 80044ba:	3214      	adds	r2, #20
 80044bc:	4293      	cmp	r3, r2
 80044be:	d041      	beq.n	8004544 <HAL_DMA_IRQHandler+0x104>
 80044c0:	3214      	adds	r2, #20
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d043      	beq.n	800454e <HAL_DMA_IRQHandler+0x10e>
 80044c6:	3214      	adds	r2, #20
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d035      	beq.n	8004538 <HAL_DMA_IRQHandler+0xf8>
 80044cc:	3214      	adds	r2, #20
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d043      	beq.n	800455a <HAL_DMA_IRQHandler+0x11a>
 80044d2:	3214      	adds	r2, #20
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf0c      	ite	eq
 80044d8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80044dc:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80044e0:	e01e      	b.n	8004520 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044e2:	2208      	movs	r2, #8
 80044e4:	408a      	lsls	r2, r1
 80044e6:	4222      	tst	r2, r4
 80044e8:	d017      	beq.n	800451a <HAL_DMA_IRQHandler+0xda>
 80044ea:	072a      	lsls	r2, r5, #28
 80044ec:	d515      	bpl.n	800451a <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ee:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 80044f0:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f4:	f022 020e 	bic.w	r2, r2, #14
 80044f8:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044fa:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 80044fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044fe:	fa03 f101 	lsl.w	r1, r3, r1
 8004502:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004504:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004506:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004508:	b13a      	cbz	r2, 800451a <HAL_DMA_IRQHandler+0xda>
}
 800450a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800450c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800450e:	2304      	movs	r3, #4
 8004510:	4914      	ldr	r1, [pc, #80]	; (8004564 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004512:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004514:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004516:	2a00      	cmp	r2, #0
 8004518:	d1f7      	bne.n	800450a <HAL_DMA_IRQHandler+0xca>
}
 800451a:	bc70      	pop	{r4, r5, r6}
 800451c:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800451e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8004520:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004522:	4c10      	ldr	r4, [pc, #64]	; (8004564 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8004524:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004526:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004528:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800452c:	2a00      	cmp	r2, #0
 800452e:	d0f4      	beq.n	800451a <HAL_DMA_IRQHandler+0xda>
}
 8004530:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004532:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	e7eb      	b.n	8004510 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453c:	e7f0      	b.n	8004520 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800453e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004542:	e7e5      	b.n	8004510 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004544:	2320      	movs	r3, #32
 8004546:	e7eb      	b.n	8004520 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454c:	e7e0      	b.n	8004510 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800454e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004552:	e7e5      	b.n	8004520 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004558:	e7da      	b.n	8004510 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800455a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800455e:	e7df      	b.n	8004520 <HAL_DMA_IRQHandler+0xe0>
 8004560:	40020008 	.word	0x40020008
 8004564:	40020000 	.word	0x40020000

08004568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456c:	680e      	ldr	r6, [r1, #0]
{
 800456e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004570:	2e00      	cmp	r6, #0
 8004572:	f000 80b5 	beq.w	80046e0 <HAL_GPIO_Init+0x178>
 8004576:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004578:	4f7a      	ldr	r7, [pc, #488]	; (8004764 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 800457a:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 800457c:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800457e:	4d7a      	ldr	r5, [pc, #488]	; (8004768 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8004580:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800476c <HAL_GPIO_Init+0x204>
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8004586:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004588:	fa36 f403 	lsrs.w	r4, r6, r3
 800458c:	f102 0204 	add.w	r2, r2, #4
 8004590:	f000 80a6 	beq.w	80046e0 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8004594:	2401      	movs	r4, #1
 8004596:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8004598:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800459c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80045a0:	d1f1      	bne.n	8004586 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80045a2:	684e      	ldr	r6, [r1, #4]
 80045a4:	2e12      	cmp	r6, #18
 80045a6:	f200 809e 	bhi.w	80046e6 <HAL_GPIO_Init+0x17e>
 80045aa:	2e12      	cmp	r6, #18
 80045ac:	d81a      	bhi.n	80045e4 <HAL_GPIO_Init+0x7c>
 80045ae:	e8df f006 	tbb	[pc, r6]
 80045b2:	b9a7      	.short	0xb9a7
 80045b4:	1919ceb5 	.word	0x1919ceb5
 80045b8:	19191919 	.word	0x19191919
 80045bc:	19191919 	.word	0x19191919
 80045c0:	b1191919 	.word	0xb1191919
 80045c4:	bc          	.byte	0xbc
 80045c5:	00          	.byte	0x00
 80045c6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004770 <HAL_GPIO_Init+0x208>
 80045ca:	4576      	cmp	r6, lr
 80045cc:	f000 8098 	beq.w	8004700 <HAL_GPIO_Init+0x198>
 80045d0:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80045d4:	4576      	cmp	r6, lr
 80045d6:	f000 8093 	beq.w	8004700 <HAL_GPIO_Init+0x198>
 80045da:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80045de:	4576      	cmp	r6, lr
 80045e0:	f000 808e 	beq.w	8004700 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80045e8:	bf9c      	itt	ls
 80045ea:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045ec:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045ee:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f2:	bf84      	itt	hi
 80045f4:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045f8:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045fc:	f8de 4000 	ldr.w	r4, [lr]
 8004600:	fa0a f90b 	lsl.w	r9, sl, fp
 8004604:	fa06 fb0b 	lsl.w	fp, r6, fp
 8004608:	ea24 040b 	bic.w	r4, r4, fp
 800460c:	ea44 0409 	orr.w	r4, r4, r9
 8004610:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004614:	684c      	ldr	r4, [r1, #4]
 8004616:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800461a:	d079      	beq.n	8004710 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800461c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004620:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004624:	f04e 0e01 	orr.w	lr, lr, #1
 8004628:	f8c7 e018 	str.w	lr, [r7, #24]
 800462c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004630:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004634:	f00e 0e01 	and.w	lr, lr, #1
 8004638:	f8cd e004 	str.w	lr, [sp, #4]
 800463c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8004640:	f023 0e03 	bic.w	lr, r3, #3
 8004644:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8004648:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800464c:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004650:	fa06 f609 	lsl.w	r6, r6, r9
 8004654:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004658:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004774 <HAL_GPIO_Init+0x20c>
 800465c:	4558      	cmp	r0, fp
 800465e:	d013      	beq.n	8004688 <HAL_GPIO_Init+0x120>
 8004660:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8004664:	4558      	cmp	r0, fp
 8004666:	d06b      	beq.n	8004740 <HAL_GPIO_Init+0x1d8>
 8004668:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8004778 <HAL_GPIO_Init+0x210>
 800466c:	4558      	cmp	r0, fp
 800466e:	d060      	beq.n	8004732 <HAL_GPIO_Init+0x1ca>
 8004670:	f8df b108 	ldr.w	fp, [pc, #264]	; 800477c <HAL_GPIO_Init+0x214>
 8004674:	4558      	cmp	r0, fp
 8004676:	bf0c      	ite	eq
 8004678:	f04f 0b03 	moveq.w	fp, #3
 800467c:	f04f 0b04 	movne.w	fp, #4
 8004680:	fa0b f909 	lsl.w	r9, fp, r9
 8004684:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004688:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800468c:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800468e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004692:	bf14      	ite	ne
 8004694:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004698:	ea26 060c 	biceq.w	r6, r6, ip
 800469c:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800469e:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046a0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80046a4:	bf14      	ite	ne
 80046a6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046aa:	ea26 060c 	biceq.w	r6, r6, ip
 80046ae:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80046b0:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80046b6:	bf14      	ite	ne
 80046b8:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046bc:	ea26 060c 	biceq.w	r6, r6, ip
 80046c0:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046c2:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80046c6:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046c8:	d01f      	beq.n	800470a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ca:	ea44 040c 	orr.w	r4, r4, ip
 80046ce:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d0:	680e      	ldr	r6, [r1, #0]
	position++;
 80046d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80046d8:	f102 0204 	add.w	r2, r2, #4
 80046dc:	f47f af5a 	bne.w	8004594 <HAL_GPIO_Init+0x2c>
  }
}
 80046e0:	b003      	add	sp, #12
 80046e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80046e6:	4546      	cmp	r6, r8
 80046e8:	d00a      	beq.n	8004700 <HAL_GPIO_Init+0x198>
 80046ea:	f67f af6c 	bls.w	80045c6 <HAL_GPIO_Init+0x5e>
 80046ee:	f8df e090 	ldr.w	lr, [pc, #144]	; 8004780 <HAL_GPIO_Init+0x218>
 80046f2:	4576      	cmp	r6, lr
 80046f4:	d004      	beq.n	8004700 <HAL_GPIO_Init+0x198>
 80046f6:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80046fa:	4576      	cmp	r6, lr
 80046fc:	f47f af72 	bne.w	80045e4 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004700:	688e      	ldr	r6, [r1, #8]
 8004702:	bb3e      	cbnz	r6, 8004754 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004704:	f04f 0a04 	mov.w	sl, #4
 8004708:	e76c      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800470a:	ea24 040c 	bic.w	r4, r4, ip
 800470e:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004710:	680e      	ldr	r6, [r1, #0]
 8004712:	e738      	b.n	8004586 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004714:	68cc      	ldr	r4, [r1, #12]
 8004716:	f104 0a04 	add.w	sl, r4, #4
          break;
 800471a:	e763      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800471c:	68cc      	ldr	r4, [r1, #12]
 800471e:	f104 0a08 	add.w	sl, r4, #8
          break;
 8004722:	e75f      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004724:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8004728:	e75c      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800472a:	68cc      	ldr	r4, [r1, #12]
 800472c:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8004730:	e758      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004732:	f04f 0b02 	mov.w	fp, #2
 8004736:	fa0b f909 	lsl.w	r9, fp, r9
 800473a:	ea46 0609 	orr.w	r6, r6, r9
 800473e:	e7a3      	b.n	8004688 <HAL_GPIO_Init+0x120>
 8004740:	f04f 0b01 	mov.w	fp, #1
 8004744:	fa0b f909 	lsl.w	r9, fp, r9
 8004748:	ea46 0609 	orr.w	r6, r6, r9
 800474c:	e79c      	b.n	8004688 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 800474e:	f04f 0a00 	mov.w	sl, #0
 8004752:	e747      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004754:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004756:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800475a:	bf0c      	ite	eq
 800475c:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800475e:	6144      	strne	r4, [r0, #20]
 8004760:	e740      	b.n	80045e4 <HAL_GPIO_Init+0x7c>
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	40010400 	.word	0x40010400
 800476c:	10220000 	.word	0x10220000
 8004770:	10120000 	.word	0x10120000
 8004774:	40010800 	.word	0x40010800
 8004778:	40011000 	.word	0x40011000
 800477c:	40011400 	.word	0x40011400
 8004780:	10310000 	.word	0x10310000

08004784 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004784:	b902      	cbnz	r2, 8004788 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004786:	0409      	lsls	r1, r1, #16
 8004788:	6101      	str	r1, [r0, #16]
  }
}
 800478a:	4770      	bx	lr

0800478c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	4606      	mov	r6, r0
 8004792:	468a      	mov	sl, r1
 8004794:	4617      	mov	r7, r2
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004796:	6804      	ldr	r4, [r0, #0]
{
 8004798:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479a:	6823      	ldr	r3, [r4, #0]
{
 800479c:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a2:	6023      	str	r3, [r4, #0]
{
 80047a4:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
 80047a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80047ac:	d136      	bne.n	800481c <I2C_RequestMemoryWrite+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ae:	6965      	ldr	r5, [r4, #20]
 80047b0:	07e8      	lsls	r0, r5, #31
 80047b2:	d5fc      	bpl.n	80047ae <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b4:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 80047b8:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80047ba:	f1b9 3fff 	cmp.w	r9, #4294967295
 80047be:	d003      	beq.n	80047c8 <I2C_RequestMemoryWrite+0x3c>
 80047c0:	e052      	b.n	8004868 <I2C_RequestMemoryWrite+0xdc>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c2:	6961      	ldr	r1, [r4, #20]
 80047c4:	054d      	lsls	r5, r1, #21
 80047c6:	d460      	bmi.n	800488a <I2C_RequestMemoryWrite+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c8:	6961      	ldr	r1, [r4, #20]
 80047ca:	078b      	lsls	r3, r1, #30
 80047cc:	d5f9      	bpl.n	80047c2 <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	6963      	ldr	r3, [r4, #20]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	69a3      	ldr	r3, [r4, #24]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047dc:	f1b9 3fff 	cmp.w	r9, #4294967295
 80047e0:	f040 80a4 	bne.w	800492c <I2C_RequestMemoryWrite+0x1a0>
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	061a      	lsls	r2, r3, #24
 80047e8:	d467      	bmi.n	80048ba <I2C_RequestMemoryWrite+0x12e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ea:	6963      	ldr	r3, [r4, #20]
 80047ec:	055b      	lsls	r3, r3, #21
 80047ee:	d5f9      	bpl.n	80047e4 <I2C_RequestMemoryWrite+0x58>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80047f8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047fc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004804:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004810:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004812:	2b04      	cmp	r3, #4
 8004814:	f000 8083 	beq.w	800491e <I2C_RequestMemoryWrite+0x192>
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
 800481a:	e04b      	b.n	80048b4 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481c:	6963      	ldr	r3, [r4, #20]
 800481e:	07d9      	lsls	r1, r3, #31
 8004820:	d4c8      	bmi.n	80047b4 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7ff fd05 	bl	8004230 <HAL_GetTick>
 8004826:	eba0 000b 	sub.w	r0, r0, fp
 800482a:	4581      	cmp	r9, r0
 800482c:	d304      	bcc.n	8004838 <I2C_RequestMemoryWrite+0xac>
 800482e:	f1b9 0f00 	cmp.w	r9, #0
 8004832:	d001      	beq.n	8004838 <I2C_RequestMemoryWrite+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004834:	6834      	ldr	r4, [r6, #0]
 8004836:	e7b7      	b.n	80047a8 <I2C_RequestMemoryWrite+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004838:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800483a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800483c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800483e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004842:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004848:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800484a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800484e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004852:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004854:	680b      	ldr	r3, [r1, #0]
 8004856:	05dc      	lsls	r4, r3, #23
 8004858:	d538      	bpl.n	80048cc <I2C_RequestMemoryWrite+0x140>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485a:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 800485e:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004860:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004862:	b003      	add	sp, #12
 8004864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	0798      	lsls	r0, r3, #30
 800486c:	d4af      	bmi.n	80047ce <I2C_RequestMemoryWrite+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486e:	6963      	ldr	r3, [r4, #20]
 8004870:	055a      	lsls	r2, r3, #21
 8004872:	d40a      	bmi.n	800488a <I2C_RequestMemoryWrite+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004874:	f7ff fcdc 	bl	8004230 <HAL_GetTick>
 8004878:	eba0 000b 	sub.w	r0, r0, fp
 800487c:	4581      	cmp	r9, r0
 800487e:	d367      	bcc.n	8004950 <I2C_RequestMemoryWrite+0x1c4>
 8004880:	f1b9 0f00 	cmp.w	r9, #0
 8004884:	d064      	beq.n	8004950 <I2C_RequestMemoryWrite+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004886:	6834      	ldr	r4, [r6, #0]
 8004888:	e797      	b.n	80047ba <I2C_RequestMemoryWrite+0x2e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800488a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	2120      	movs	r1, #32
    return HAL_ERROR;
 8004892:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800489a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489c:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800489e:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048a0:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a8:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80048aa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	6433      	str	r3, [r6, #64]	; 0x40
}
 80048b4:	b003      	add	sp, #12
 80048b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ba:	f1b8 0f01 	cmp.w	r8, #1
 80048be:	d109      	bne.n	80048d4 <I2C_RequestMemoryWrite+0x148>
  return HAL_OK;
 80048c0:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c2:	b2ff      	uxtb	r7, r7
 80048c4:	6127      	str	r7, [r4, #16]
}
 80048c6:	b003      	add	sp, #12
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 80048cc:	2003      	movs	r0, #3
}
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d4:	0a3b      	lsrs	r3, r7, #8
 80048d6:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80048dc:	d147      	bne.n	800496e <I2C_RequestMemoryWrite+0x1e2>
 80048de:	6963      	ldr	r3, [r4, #20]
 80048e0:	0619      	lsls	r1, r3, #24
 80048e2:	d4ed      	bmi.n	80048c0 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e4:	6963      	ldr	r3, [r4, #20]
 80048e6:	055a      	lsls	r2, r3, #21
 80048e8:	d5f9      	bpl.n	80048de <I2C_RequestMemoryWrite+0x152>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80048ea:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ee:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80048f2:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80048f4:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048f6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fa:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fe:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004900:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6433      	str	r3, [r6, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800490c:	2b04      	cmp	r3, #4
 800490e:	d183      	bne.n	8004818 <I2C_RequestMemoryWrite+0x8c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004910:	6832      	ldr	r2, [r6, #0]
      return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e7ca      	b.n	80048b4 <I2C_RequestMemoryWrite+0x128>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e7c3      	b.n	80048b4 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492c:	6963      	ldr	r3, [r4, #20]
 800492e:	061d      	lsls	r5, r3, #24
 8004930:	d4c3      	bmi.n	80048ba <I2C_RequestMemoryWrite+0x12e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004932:	6963      	ldr	r3, [r4, #20]
 8004934:	0559      	lsls	r1, r3, #21
 8004936:	f53f af5b 	bmi.w	80047f0 <I2C_RequestMemoryWrite+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7ff fc79 	bl	8004230 <HAL_GetTick>
 800493e:	eba0 030b 	sub.w	r3, r0, fp
 8004942:	4599      	cmp	r9, r3
 8004944:	d324      	bcc.n	8004990 <I2C_RequestMemoryWrite+0x204>
 8004946:	f1b9 0f00 	cmp.w	r9, #0
 800494a:	d021      	beq.n	8004990 <I2C_RequestMemoryWrite+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800494c:	6834      	ldr	r4, [r6, #0]
 800494e:	e745      	b.n	80047dc <I2C_RequestMemoryWrite+0x50>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004950:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004952:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004954:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004956:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004966:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496a:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800496c:	e7a2      	b.n	80048b4 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800496e:	6963      	ldr	r3, [r4, #20]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	d4a5      	bmi.n	80048c0 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004974:	6963      	ldr	r3, [r4, #20]
 8004976:	0558      	lsls	r0, r3, #21
 8004978:	d4b7      	bmi.n	80048ea <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497a:	f7ff fc59 	bl	8004230 <HAL_GetTick>
 800497e:	eba0 030b 	sub.w	r3, r0, fp
 8004982:	4599      	cmp	r9, r3
 8004984:	d312      	bcc.n	80049ac <I2C_RequestMemoryWrite+0x220>
 8004986:	f1b9 0f00 	cmp.w	r9, #0
 800498a:	d00f      	beq.n	80049ac <I2C_RequestMemoryWrite+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498c:	6834      	ldr	r4, [r6, #0]
 800498e:	e7a3      	b.n	80048d8 <I2C_RequestMemoryWrite+0x14c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004990:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004992:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004994:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004996:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800499a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049a0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	f043 0320 	orr.w	r3, r3, #32
 80049a8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80049aa:	e731      	b.n	8004810 <I2C_RequestMemoryWrite+0x84>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049ac:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049b0:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049b2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049b6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ba:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049bc:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	f043 0320 	orr.w	r3, r3, #32
 80049c4:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80049c6:	e7a0      	b.n	800490a <I2C_RequestMemoryWrite+0x17e>

080049c8 <I2C_RequestMemoryRead>:
{
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	4606      	mov	r6, r0
 80049ce:	468b      	mov	fp, r1
 80049d0:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	6804      	ldr	r4, [r0, #0]
{
 80049d4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	6823      	ldr	r3, [r4, #0]
{
 80049d8:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049de:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e0:	6823      	ldr	r3, [r4, #0]
{
 80049e2:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80049ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80049f0:	d139      	bne.n	8004a66 <I2C_RequestMemoryRead+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	6965      	ldr	r5, [r4, #20]
 80049f4:	07eb      	lsls	r3, r5, #31
 80049f6:	d5fc      	bpl.n	80049f2 <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049f8:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	fa5f fb8b 	uxtb.w	fp, fp
 8004a02:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004a06:	d003      	beq.n	8004a10 <I2C_RequestMemoryRead+0x48>
 8004a08:	e06b      	b.n	8004ae2 <I2C_RequestMemoryRead+0x11a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a0a:	6961      	ldr	r1, [r4, #20]
 8004a0c:	054a      	lsls	r2, r1, #21
 8004a0e:	d450      	bmi.n	8004ab2 <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a10:	6961      	ldr	r1, [r4, #20]
 8004a12:	0789      	lsls	r1, r1, #30
 8004a14:	d5f9      	bpl.n	8004a0a <I2C_RequestMemoryRead+0x42>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	6963      	ldr	r3, [r4, #20]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	69a3      	ldr	r3, [r4, #24]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004a28:	f040 80bf 	bne.w	8004baa <I2C_RequestMemoryRead+0x1e2>
 8004a2c:	6963      	ldr	r3, [r4, #20]
 8004a2e:	0618      	lsls	r0, r3, #24
 8004a30:	d46a      	bmi.n	8004b08 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a32:	6963      	ldr	r3, [r4, #20]
 8004a34:	0559      	lsls	r1, r3, #21
 8004a36:	d5f9      	bpl.n	8004a2c <I2C_RequestMemoryRead+0x64>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a3a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a3c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004a40:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a42:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a4c:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004a4e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a58:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d073      	beq.n	8004b46 <I2C_RequestMemoryRead+0x17e>
    return HAL_ERROR;
 8004a5e:	2001      	movs	r0, #1
}
 8004a60:	b003      	add	sp, #12
 8004a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a66:	6963      	ldr	r3, [r4, #20]
 8004a68:	07dd      	lsls	r5, r3, #31
 8004a6a:	d4c5      	bmi.n	80049f8 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7ff fbe0 	bl	8004230 <HAL_GetTick>
 8004a70:	eba0 0009 	sub.w	r0, r0, r9
 8004a74:	4582      	cmp	sl, r0
 8004a76:	d304      	bcc.n	8004a82 <I2C_RequestMemoryRead+0xba>
 8004a78:	f1ba 0f00 	cmp.w	sl, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7e:	6834      	ldr	r4, [r6, #0]
 8004a80:	e7b4      	b.n	80049ec <I2C_RequestMemoryRead+0x24>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a82:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a84:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a86:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a88:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a8c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a92:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a94:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004a98:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a9e:	680b      	ldr	r3, [r1, #0]
 8004aa0:	05da      	lsls	r2, r3, #23
 8004aa2:	d540      	bpl.n	8004b26 <I2C_RequestMemoryRead+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004aa8:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aaa:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004aac:	b003      	add	sp, #12
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	2120      	movs	r1, #32
    return HAL_ERROR;
 8004aba:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac2:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac4:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac8:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004acc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad0:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004ad2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004adc:	b003      	add	sp, #12
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae2:	6963      	ldr	r3, [r4, #20]
 8004ae4:	079b      	lsls	r3, r3, #30
 8004ae6:	d496      	bmi.n	8004a16 <I2C_RequestMemoryRead+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae8:	6963      	ldr	r3, [r4, #20]
 8004aea:	0558      	lsls	r0, r3, #21
 8004aec:	d4e1      	bmi.n	8004ab2 <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7ff fb9f 	bl	8004230 <HAL_GetTick>
 8004af2:	eba0 0009 	sub.w	r0, r0, r9
 8004af6:	4582      	cmp	sl, r0
 8004af8:	f0c0 808f 	bcc.w	8004c1a <I2C_RequestMemoryRead+0x252>
 8004afc:	f1ba 0f00 	cmp.w	sl, #0
 8004b00:	f000 808b 	beq.w	8004c1a <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b04:	6834      	ldr	r4, [r6, #0]
 8004b06:	e77c      	b.n	8004a02 <I2C_RequestMemoryRead+0x3a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b08:	f1b8 0f01 	cmp.w	r8, #1
 8004b0c:	d10f      	bne.n	8004b2e <I2C_RequestMemoryRead+0x166>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0e:	b2ff      	uxtb	r7, r7
 8004b10:	6127      	str	r7, [r4, #16]
 8004b12:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004b16:	d16e      	bne.n	8004bf6 <I2C_RequestMemoryRead+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b18:	6963      	ldr	r3, [r4, #20]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	d41a      	bmi.n	8004b54 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b1e:	6963      	ldr	r3, [r4, #20]
 8004b20:	055f      	lsls	r7, r3, #21
 8004b22:	d5f9      	bpl.n	8004b18 <I2C_RequestMemoryRead+0x150>
 8004b24:	e788      	b.n	8004a38 <I2C_RequestMemoryRead+0x70>
    return HAL_TIMEOUT;
 8004b26:	2003      	movs	r0, #3
}
 8004b28:	b003      	add	sp, #12
 8004b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b2e:	0a3b      	lsrs	r3, r7, #8
 8004b30:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b32:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004b36:	d17f      	bne.n	8004c38 <I2C_RequestMemoryRead+0x270>
 8004b38:	6963      	ldr	r3, [r4, #20]
 8004b3a:	061d      	lsls	r5, r3, #24
 8004b3c:	d4e7      	bmi.n	8004b0e <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3e:	6963      	ldr	r3, [r4, #20]
 8004b40:	0558      	lsls	r0, r3, #21
 8004b42:	d5f9      	bpl.n	8004b38 <I2C_RequestMemoryRead+0x170>
 8004b44:	e778      	b.n	8004a38 <I2C_RequestMemoryRead+0x70>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8004b48:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e7c3      	b.n	8004adc <I2C_RequestMemoryRead+0x114>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004b5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004b60:	d113      	bne.n	8004b8a <I2C_RequestMemoryRead+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b62:	6963      	ldr	r3, [r4, #20]
 8004b64:	07d8      	lsls	r0, r3, #31
 8004b66:	d5fc      	bpl.n	8004b62 <I2C_RequestMemoryRead+0x19a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b68:	f04b 0301 	orr.w	r3, fp, #1
 8004b6c:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004b6e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004b72:	d003      	beq.n	8004b7c <I2C_RequestMemoryRead+0x1b4>
 8004b74:	e02b      	b.n	8004bce <I2C_RequestMemoryRead+0x206>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b76:	6963      	ldr	r3, [r4, #20]
 8004b78:	055b      	lsls	r3, r3, #21
 8004b7a:	d49a      	bmi.n	8004ab2 <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b7c:	6963      	ldr	r3, [r4, #20]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	f013 0302 	ands.w	r3, r3, #2
 8004b84:	d1f7      	bne.n	8004b76 <I2C_RequestMemoryRead+0x1ae>
  return HAL_OK;
 8004b86:	4618      	mov	r0, r3
 8004b88:	e7a8      	b.n	8004adc <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b8a:	6963      	ldr	r3, [r4, #20]
 8004b8c:	07d9      	lsls	r1, r3, #31
 8004b8e:	d4eb      	bmi.n	8004b68 <I2C_RequestMemoryRead+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b90:	f7ff fb4e 	bl	8004230 <HAL_GetTick>
 8004b94:	eba0 0309 	sub.w	r3, r0, r9
 8004b98:	459a      	cmp	sl, r3
 8004b9a:	f4ff af72 	bcc.w	8004a82 <I2C_RequestMemoryRead+0xba>
 8004b9e:	f1ba 0f00 	cmp.w	sl, #0
 8004ba2:	f43f af6e 	beq.w	8004a82 <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba6:	6834      	ldr	r4, [r6, #0]
 8004ba8:	e7d8      	b.n	8004b5c <I2C_RequestMemoryRead+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	061a      	lsls	r2, r3, #24
 8004bae:	d4ab      	bmi.n	8004b08 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb0:	6963      	ldr	r3, [r4, #20]
 8004bb2:	055d      	lsls	r5, r3, #21
 8004bb4:	f53f af40 	bmi.w	8004a38 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb8:	f7ff fb3a 	bl	8004230 <HAL_GetTick>
 8004bbc:	eba0 0309 	sub.w	r3, r0, r9
 8004bc0:	459a      	cmp	sl, r3
 8004bc2:	d34c      	bcc.n	8004c5e <I2C_RequestMemoryRead+0x296>
 8004bc4:	f1ba 0f00 	cmp.w	sl, #0
 8004bc8:	d049      	beq.n	8004c5e <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bca:	6834      	ldr	r4, [r6, #0]
 8004bcc:	e72a      	b.n	8004a24 <I2C_RequestMemoryRead+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bce:	6963      	ldr	r3, [r4, #20]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	f013 0302 	ands.w	r3, r3, #2
 8004bd6:	d0d6      	beq.n	8004b86 <I2C_RequestMemoryRead+0x1be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd8:	6963      	ldr	r3, [r4, #20]
 8004bda:	055a      	lsls	r2, r3, #21
 8004bdc:	f53f af69 	bmi.w	8004ab2 <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be0:	f7ff fb26 	bl	8004230 <HAL_GetTick>
 8004be4:	eba0 0309 	sub.w	r3, r0, r9
 8004be8:	459a      	cmp	sl, r3
 8004bea:	d316      	bcc.n	8004c1a <I2C_RequestMemoryRead+0x252>
 8004bec:	f1ba 0f00 	cmp.w	sl, #0
 8004bf0:	d013      	beq.n	8004c1a <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bf2:	6834      	ldr	r4, [r6, #0]
 8004bf4:	e7bb      	b.n	8004b6e <I2C_RequestMemoryRead+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf6:	6963      	ldr	r3, [r4, #20]
 8004bf8:	061d      	lsls	r5, r3, #24
 8004bfa:	d4ab      	bmi.n	8004b54 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bfc:	6963      	ldr	r3, [r4, #20]
 8004bfe:	055a      	lsls	r2, r3, #21
 8004c00:	f53f af1a 	bmi.w	8004a38 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7ff fb14 	bl	8004230 <HAL_GetTick>
 8004c08:	eba0 0309 	sub.w	r3, r0, r9
 8004c0c:	459a      	cmp	sl, r3
 8004c0e:	d326      	bcc.n	8004c5e <I2C_RequestMemoryRead+0x296>
 8004c10:	f1ba 0f00 	cmp.w	sl, #0
 8004c14:	d023      	beq.n	8004c5e <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c16:	6834      	ldr	r4, [r6, #0]
 8004c18:	e77b      	b.n	8004b12 <I2C_RequestMemoryRead+0x14a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c20:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c24:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8004c2a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004c30:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004c36:	e751      	b.n	8004adc <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c38:	6963      	ldr	r3, [r4, #20]
 8004c3a:	0619      	lsls	r1, r3, #24
 8004c3c:	f53f af67 	bmi.w	8004b0e <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c40:	6963      	ldr	r3, [r4, #20]
 8004c42:	055b      	lsls	r3, r3, #21
 8004c44:	f53f aef8 	bmi.w	8004a38 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c48:	f7ff faf2 	bl	8004230 <HAL_GetTick>
 8004c4c:	eba0 0309 	sub.w	r3, r0, r9
 8004c50:	459a      	cmp	sl, r3
 8004c52:	d304      	bcc.n	8004c5e <I2C_RequestMemoryRead+0x296>
 8004c54:	f1ba 0f00 	cmp.w	sl, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5a:	6834      	ldr	r4, [r6, #0]
 8004c5c:	e769      	b.n	8004b32 <I2C_RequestMemoryRead+0x16a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c5e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c60:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c62:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c64:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c68:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c6e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	f043 0320 	orr.w	r3, r3, #32
 8004c76:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004c78:	e6ee      	b.n	8004a58 <I2C_RequestMemoryRead+0x90>
 8004c7a:	bf00      	nop

08004c7c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	f000 80b9 	beq.w	8004df4 <HAL_I2C_Init+0x178>
{
 8004c82:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c88:	4604      	mov	r4, r0
 8004c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8098 	beq.w	8004dc4 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004c96:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cb2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f001 fa7a 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	494f      	ldr	r1, [pc, #316]	; (8004df8 <HAL_I2C_Init+0x17c>)
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d84f      	bhi.n	8004d60 <HAL_I2C_Init+0xe4>
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <HAL_I2C_Init+0x180>)
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	d97c      	bls.n	8004dc0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004cc6:	4d4e      	ldr	r5, [pc, #312]	; (8004e00 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc8:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004cca:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cce:	1e43      	subs	r3, r0, #1
 8004cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd4:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004cda:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cdc:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cde:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ce2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004ce6:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004cea:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cec:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cee:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cf0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cf4:	ea41 010c 	orr.w	r1, r1, ip
 8004cf8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cfa:	69d1      	ldr	r1, [r2, #28]
 8004cfc:	ea13 0f0e 	tst.w	r3, lr
 8004d00:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004d04:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d08:	d161      	bne.n	8004dce <HAL_I2C_Init+0x152>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d10:	6811      	ldr	r1, [r2, #0]
 8004d12:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004d16:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004d1a:	4303      	orrs	r3, r0
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d20:	6891      	ldr	r1, [r2, #8]
 8004d22:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004d26:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004d2a:	4303      	orrs	r3, r0
 8004d2c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d34:	68d0      	ldr	r0, [r2, #12]
 8004d36:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8004d3a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	4303      	orrs	r3, r0
 8004d42:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004d44:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d46:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d50:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004d5c:	4608      	mov	r0, r1
}
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d60:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <HAL_I2C_Init+0x188>)
 8004d62:	4290      	cmp	r0, r2
 8004d64:	d92c      	bls.n	8004dc0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004d66:	4d26      	ldr	r5, [pc, #152]	; (8004e00 <HAL_I2C_Init+0x184>)
 8004d68:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004d70:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d74:	fb02 f101 	mul.w	r1, r2, r1
 8004d78:	4d23      	ldr	r5, [pc, #140]	; (8004e08 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d7a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d7c:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d80:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d82:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d84:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004d88:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004d8c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d8e:	6a15      	ldr	r5, [r2, #32]
 8004d90:	3101      	adds	r1, #1
 8004d92:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004d96:	4329      	orrs	r1, r5
 8004d98:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d9a:	69d1      	ldr	r1, [r2, #28]
 8004d9c:	68a5      	ldr	r5, [r4, #8]
 8004d9e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004da2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004da6:	b9ad      	cbnz	r5, 8004dd4 <HAL_I2C_Init+0x158>
 8004da8:	3801      	subs	r0, #1
 8004daa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db8:	b1d3      	cbz	r3, 8004df0 <HAL_I2C_Init+0x174>
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	e7a5      	b.n	8004d0c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004dc0:	2001      	movs	r0, #1
}
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004dc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004dc8:	f7ff f800 	bl	8003dcc <HAL_I2C_MspInit>
 8004dcc:	e762      	b.n	8004c94 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd2:	e79b      	b.n	8004d0c <HAL_I2C_Init+0x90>
 8004dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dd8:	3801      	subs	r0, #1
 8004dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	b113      	cbz	r3, 8004df0 <HAL_I2C_Init+0x174>
 8004dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dee:	e78d      	b.n	8004d0c <HAL_I2C_Init+0x90>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e78b      	b.n	8004d0c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004df4:	2001      	movs	r0, #1
}
 8004df6:	4770      	bx	lr
 8004df8:	000186a0 	.word	0x000186a0
 8004dfc:	001e847f 	.word	0x001e847f
 8004e00:	431bde83 	.word	0x431bde83
 8004e04:	003d08ff 	.word	0x003d08ff
 8004e08:	10624dd3 	.word	0x10624dd3

08004e0c <HAL_I2C_Master_Transmit>:
{
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	4605      	mov	r5, r0
 8004e12:	b083      	sub	sp, #12
 8004e14:	4699      	mov	r9, r3
 8004e16:	4688      	mov	r8, r1
 8004e18:	4692      	mov	sl, r2
 8004e1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004e1c:	f7ff fa08 	bl	8004230 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d003      	beq.n	8004e30 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8004e28:	2002      	movs	r0, #2
}
 8004e2a:	b003      	add	sp, #12
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e30:	4606      	mov	r6, r0
 8004e32:	e005      	b.n	8004e40 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7ff f9fc 	bl	8004230 <HAL_GetTick>
 8004e38:	1b80      	subs	r0, r0, r6
 8004e3a:	2819      	cmp	r0, #25
 8004e3c:	f200 80f8 	bhi.w	8005030 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e40:	682c      	ldr	r4, [r5, #0]
 8004e42:	69a3      	ldr	r3, [r4, #24]
 8004e44:	ea6f 0c03 	mvn.w	ip, r3
 8004e48:	f01c 0b02 	ands.w	fp, ip, #2
 8004e4c:	d0f2      	beq.n	8004e34 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8004e4e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d0e8      	beq.n	8004e28 <HAL_I2C_Master_Transmit+0x1c>
 8004e56:	2301      	movs	r3, #1
 8004e58:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	07d9      	lsls	r1, r3, #31
 8004e60:	d571      	bpl.n	8004f46 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e62:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e64:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e66:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e6e:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e70:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e74:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e78:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004e7a:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e80:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8004e84:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004e86:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8004e8a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d006      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x94>
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d004      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x94>
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d002      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004e9c:	2b12      	cmp	r3, #18
 8004e9e:	d103      	bne.n	8004ea8 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	1c7b      	adds	r3, r7, #1
 8004eaa:	d13e      	bne.n	8004f2a <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eac:	6963      	ldr	r3, [r4, #20]
 8004eae:	07d8      	lsls	r0, r3, #31
 8004eb0:	d5fc      	bpl.n	8004eac <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb2:	692b      	ldr	r3, [r5, #16]
 8004eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb8:	d14a      	bne.n	8004f50 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eba:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8004ebe:	6121      	str	r1, [r4, #16]
 8004ec0:	1c78      	adds	r0, r7, #1
 8004ec2:	d004      	beq.n	8004ece <HAL_I2C_Master_Transmit+0xc2>
 8004ec4:	e0dd      	b.n	8005082 <HAL_I2C_Master_Transmit+0x276>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ec6:	6963      	ldr	r3, [r4, #20]
 8004ec8:	055a      	lsls	r2, r3, #21
 8004eca:	f100 80c2 	bmi.w	8005052 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	0799      	lsls	r1, r3, #30
 8004ed2:	d5f8      	bpl.n	8004ec6 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	9201      	str	r2, [sp, #4]
 8004ed8:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8004eda:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004edc:	9201      	str	r2, [sp, #4]
 8004ede:	69a2      	ldr	r2, [r4, #24]
 8004ee0:	9201      	str	r2, [sp, #4]
 8004ee2:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d075      	beq.n	8004fd4 <HAL_I2C_Master_Transmit+0x1c8>
 8004ee8:	1c79      	adds	r1, r7, #1
 8004eea:	f040 8081 	bne.w	8004ff0 <HAL_I2C_Master_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eee:	6963      	ldr	r3, [r4, #20]
 8004ef0:	061a      	lsls	r2, r3, #24
 8004ef2:	d441      	bmi.n	8004f78 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef4:	6963      	ldr	r3, [r4, #20]
 8004ef6:	055b      	lsls	r3, r3, #21
 8004ef8:	d5f9      	bpl.n	8004eee <HAL_I2C_Master_Transmit+0xe2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efe:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004f02:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f04:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f06:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004f10:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	f000 80e6 	beq.w	80050ee <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 8004f22:	2001      	movs	r0, #1
}
 8004f24:	b003      	add	sp, #12
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2a:	6963      	ldr	r3, [r4, #20]
 8004f2c:	07d9      	lsls	r1, r3, #31
 8004f2e:	d4c0      	bmi.n	8004eb2 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f30:	f7ff f97e 	bl	8004230 <HAL_GetTick>
 8004f34:	1b80      	subs	r0, r0, r6
 8004f36:	4287      	cmp	r7, r0
 8004f38:	f0c0 80b3 	bcc.w	80050a2 <HAL_I2C_Master_Transmit+0x296>
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	f000 80b0 	beq.w	80050a2 <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f42:	682c      	ldr	r4, [r5, #0]
 8004f44:	e7b0      	b.n	8004ea8 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	e788      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f50:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8004f54:	f003 0306 	and.w	r3, r3, #6
 8004f58:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004f5c:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004f5e:	1c7b      	adds	r3, r7, #1
 8004f60:	d003      	beq.n	8004f6a <HAL_I2C_Master_Transmit+0x15e>
 8004f62:	e0b5      	b.n	80050d0 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f64:	6963      	ldr	r3, [r4, #20]
 8004f66:	0559      	lsls	r1, r3, #21
 8004f68:	d473      	bmi.n	8005052 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f6a:	6963      	ldr	r3, [r4, #20]
 8004f6c:	0718      	lsls	r0, r3, #28
 8004f6e:	d5f9      	bpl.n	8004f64 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f70:	fa5f f388 	uxtb.w	r3, r8
 8004f74:	6123      	str	r3, [r4, #16]
 8004f76:	e7a3      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f78:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8004f7a:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f7e:	4601      	mov	r1, r0
 8004f80:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8004f84:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f88:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8004f8a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8004f8c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f94:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8004f96:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f98:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8004f9a:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f9c:	d50c      	bpl.n	8004fb8 <HAL_I2C_Master_Transmit+0x1ac>
 8004f9e:	b15a      	cbz	r2, 8004fb8 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa0:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 8004fa2:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa6:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8004fa8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004faa:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004fb0:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004fb4:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8004fb6:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8004fb8:	1c78      	adds	r0, r7, #1
 8004fba:	d129      	bne.n	8005010 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fbc:	6963      	ldr	r3, [r4, #20]
 8004fbe:	0759      	lsls	r1, r3, #29
 8004fc0:	d405      	bmi.n	8004fce <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc2:	6963      	ldr	r3, [r4, #20]
 8004fc4:	055a      	lsls	r2, r3, #21
 8004fc6:	d498      	bmi.n	8004efa <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc8:	6963      	ldr	r3, [r4, #20]
 8004fca:	0759      	lsls	r1, r3, #29
 8004fcc:	d5f9      	bpl.n	8004fc2 <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8004fce:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d189      	bne.n	8004ee8 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8004fda:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004fe6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8004fee:	e71c      	b.n	8004e2a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ff0:	6963      	ldr	r3, [r4, #20]
 8004ff2:	0618      	lsls	r0, r3, #24
 8004ff4:	d4c0      	bmi.n	8004f78 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff6:	6963      	ldr	r3, [r4, #20]
 8004ff8:	0558      	lsls	r0, r3, #21
 8004ffa:	f53f af7e 	bmi.w	8004efa <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7ff f917 	bl	8004230 <HAL_GetTick>
 8005002:	1b80      	subs	r0, r0, r6
 8005004:	4287      	cmp	r7, r0
 8005006:	d379      	bcc.n	80050fc <HAL_I2C_Master_Transmit+0x2f0>
 8005008:	2f00      	cmp	r7, #0
 800500a:	d077      	beq.n	80050fc <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800500c:	682c      	ldr	r4, [r5, #0]
 800500e:	e76b      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005010:	6963      	ldr	r3, [r4, #20]
 8005012:	075b      	lsls	r3, r3, #29
 8005014:	d4db      	bmi.n	8004fce <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005016:	6963      	ldr	r3, [r4, #20]
 8005018:	055b      	lsls	r3, r3, #21
 800501a:	f53f af6e 	bmi.w	8004efa <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501e:	f7ff f907 	bl	8004230 <HAL_GetTick>
 8005022:	1b80      	subs	r0, r0, r6
 8005024:	4287      	cmp	r7, r0
 8005026:	d369      	bcc.n	80050fc <HAL_I2C_Master_Transmit+0x2f0>
 8005028:	2f00      	cmp	r7, #0
 800502a:	d067      	beq.n	80050fc <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800502c:	682c      	ldr	r4, [r5, #0]
 800502e:	e7c3      	b.n	8004fb8 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005030:	2320      	movs	r3, #32
      return HAL_BUSY;
 8005032:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005034:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005038:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800503c:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005042:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005046:	f043 0320 	orr.w	r3, r3, #32
 800504a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800504c:	b003      	add	sp, #12
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005054:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	2120      	movs	r1, #32
      return HAL_ERROR;
 800505a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005062:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005064:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005070:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005072:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800507c:	b003      	add	sp, #12
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005082:	6963      	ldr	r3, [r4, #20]
 8005084:	079b      	lsls	r3, r3, #30
 8005086:	f53f af25 	bmi.w	8004ed4 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508a:	6963      	ldr	r3, [r4, #20]
 800508c:	055b      	lsls	r3, r3, #21
 800508e:	d4e0      	bmi.n	8005052 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005090:	f7ff f8ce 	bl	8004230 <HAL_GetTick>
 8005094:	1b80      	subs	r0, r0, r6
 8005096:	4287      	cmp	r7, r0
 8005098:	d33e      	bcc.n	8005118 <HAL_I2C_Master_Transmit+0x30c>
 800509a:	2f00      	cmp	r7, #0
 800509c:	d03c      	beq.n	8005118 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800509e:	682c      	ldr	r4, [r5, #0]
 80050a0:	e70e      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050a2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050a6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ac:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b2:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80050b8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050bc:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050be:	680b      	ldr	r3, [r1, #0]
 80050c0:	05da      	lsls	r2, r3, #23
 80050c2:	f57f af2e 	bpl.w	8004f22 <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80050ca:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050cc:	642b      	str	r3, [r5, #64]	; 0x40
 80050ce:	e6ac      	b.n	8004e2a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d0:	6963      	ldr	r3, [r4, #20]
 80050d2:	071a      	lsls	r2, r3, #28
 80050d4:	f53f af4c 	bmi.w	8004f70 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d8:	6963      	ldr	r3, [r4, #20]
 80050da:	055a      	lsls	r2, r3, #21
 80050dc:	d4b9      	bmi.n	8005052 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7ff f8a7 	bl	8004230 <HAL_GetTick>
 80050e2:	1b83      	subs	r3, r0, r6
 80050e4:	429f      	cmp	r7, r3
 80050e6:	d317      	bcc.n	8005118 <HAL_I2C_Master_Transmit+0x30c>
 80050e8:	b1b7      	cbz	r7, 8005118 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ea:	682c      	ldr	r4, [r5, #0]
 80050ec:	e737      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 80050f0:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e696      	b.n	8004e2a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050fc:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80050fe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005100:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005102:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005106:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800510a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800510c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8005116:	e700      	b.n	8004f1a <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800511a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800511c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005122:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005128:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800512e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8005134:	e679      	b.n	8004e2a <HAL_I2C_Master_Transmit+0x1e>
 8005136:	bf00      	nop

08005138 <HAL_I2C_Master_Receive>:
{
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 800513e:	2400      	movs	r4, #0
{
 8005140:	b087      	sub	sp, #28
 8005142:	4699      	mov	r9, r3
 8005144:	4688      	mov	r8, r1
 8005146:	4692      	mov	sl, r2
 8005148:	9f10      	ldr	r7, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 800514a:	9400      	str	r4, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 800514c:	f7ff f870 	bl	8004230 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8005154:	2b20      	cmp	r3, #32
 8005156:	d003      	beq.n	8005160 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8005158:	2002      	movs	r0, #2
}
 800515a:	b007      	add	sp, #28
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005160:	4606      	mov	r6, r0
 8005162:	e005      	b.n	8005170 <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005164:	f7ff f864 	bl	8004230 <HAL_GetTick>
 8005168:	1b80      	subs	r0, r0, r6
 800516a:	2819      	cmp	r0, #25
 800516c:	f200 80ac 	bhi.w	80052c8 <HAL_I2C_Master_Receive+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005170:	682c      	ldr	r4, [r5, #0]
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	ea6f 0c03 	mvn.w	ip, r3
 8005178:	f01c 0b02 	ands.w	fp, ip, #2
 800517c:	d0f2      	beq.n	8005164 <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 800517e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d0e8      	beq.n	8005158 <HAL_I2C_Master_Receive+0x20>
 8005186:	2301      	movs	r3, #1
 8005188:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	d564      	bpl.n	800525c <HAL_I2C_Master_Receive+0x124>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005192:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005194:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005196:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519e:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051a0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051a4:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051a8:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80051aa:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ae:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80051b4:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80051b8:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	6823      	ldr	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051bc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 80051c2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051c8:	d007      	beq.n	80051da <HAL_I2C_Master_Receive+0xa2>
 80051ca:	2a01      	cmp	r2, #1
 80051cc:	d005      	beq.n	80051da <HAL_I2C_Master_Receive+0xa2>
 80051ce:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80051d2:	d002      	beq.n	80051da <HAL_I2C_Master_Receive+0xa2>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80051d6:	2b11      	cmp	r3, #17
 80051d8:	d103      	bne.n	80051e2 <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	1c78      	adds	r0, r7, #1
 80051e4:	d12c      	bne.n	8005240 <HAL_I2C_Master_Receive+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e6:	6963      	ldr	r3, [r4, #20]
 80051e8:	07d9      	lsls	r1, r3, #31
 80051ea:	d5fc      	bpl.n	80051e6 <HAL_I2C_Master_Receive+0xae>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ec:	692b      	ldr	r3, [r5, #16]
 80051ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f2:	d138      	bne.n	8005266 <HAL_I2C_Master_Receive+0x12e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051f4:	f048 0801 	orr.w	r8, r8, #1
 80051f8:	fa5f f388 	uxtb.w	r3, r8
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	1c79      	adds	r1, r7, #1
 8005200:	d003      	beq.n	800520a <HAL_I2C_Master_Receive+0xd2>
 8005202:	e111      	b.n	8005428 <HAL_I2C_Master_Receive+0x2f0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005204:	6963      	ldr	r3, [r4, #20]
 8005206:	055b      	lsls	r3, r3, #21
 8005208:	d46f      	bmi.n	80052ea <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520a:	6963      	ldr	r3, [r4, #20]
 800520c:	079a      	lsls	r2, r3, #30
 800520e:	d5f9      	bpl.n	8005204 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 8005210:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 8081 	bne.w	800531a <HAL_I2C_Master_Receive+0x1e2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	6963      	ldr	r3, [r4, #20]
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	69a3      	ldr	r3, [r4, #24]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	2220      	movs	r2, #32
    return HAL_OK;
 8005230:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005232:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005236:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800523e:	e78c      	b.n	800515a <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005240:	6963      	ldr	r3, [r4, #20]
 8005242:	07da      	lsls	r2, r3, #31
 8005244:	d4d2      	bmi.n	80051ec <HAL_I2C_Master_Receive+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005246:	f7fe fff3 	bl	8004230 <HAL_GetTick>
 800524a:	1b80      	subs	r0, r0, r6
 800524c:	4287      	cmp	r7, r0
 800524e:	f0c0 80d4 	bcc.w	80053fa <HAL_I2C_Master_Receive+0x2c2>
 8005252:	2f00      	cmp	r7, #0
 8005254:	f000 80d1 	beq.w	80053fa <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005258:	682c      	ldr	r4, [r5, #0]
 800525a:	e7c2      	b.n	80051e2 <HAL_I2C_Master_Receive+0xaa>
      __HAL_I2C_ENABLE(hi2c);
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	e795      	b.n	8005192 <HAL_I2C_Master_Receive+0x5a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005266:	ea4f 19e8 	mov.w	r9, r8, asr #7
 800526a:	f009 0906 	and.w	r9, r9, #6
 800526e:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8005272:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005274:	1c78      	adds	r0, r7, #1
 8005276:	d003      	beq.n	8005280 <HAL_I2C_Master_Receive+0x148>
 8005278:	e100      	b.n	800547c <HAL_I2C_Master_Receive+0x344>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527a:	6963      	ldr	r3, [r4, #20]
 800527c:	055a      	lsls	r2, r3, #21
 800527e:	d434      	bmi.n	80052ea <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005280:	6963      	ldr	r3, [r4, #20]
 8005282:	0719      	lsls	r1, r3, #28
 8005284:	d5f9      	bpl.n	800527a <HAL_I2C_Master_Receive+0x142>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005286:	fa5f f388 	uxtb.w	r3, r8
 800528a:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800528c:	1c79      	adds	r1, r7, #1
 800528e:	d003      	beq.n	8005298 <HAL_I2C_Master_Receive+0x160>
 8005290:	e1c0      	b.n	8005614 <HAL_I2C_Master_Receive+0x4dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005292:	6963      	ldr	r3, [r4, #20]
 8005294:	055b      	lsls	r3, r3, #21
 8005296:	d428      	bmi.n	80052ea <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005298:	6963      	ldr	r3, [r4, #20]
 800529a:	079a      	lsls	r2, r3, #30
 800529c:	d5f9      	bpl.n	8005292 <HAL_I2C_Master_Receive+0x15a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529e:	2300      	movs	r3, #0
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	6963      	ldr	r3, [r4, #20]
 80052a4:	9305      	str	r3, [sp, #20]
 80052a6:	69a3      	ldr	r3, [r4, #24]
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b2:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80052b4:	1c79      	adds	r1, r7, #1
 80052b6:	f040 81c0 	bne.w	800563a <HAL_I2C_Master_Receive+0x502>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ba:	6963      	ldr	r3, [r4, #20]
 80052bc:	07da      	lsls	r2, r3, #31
 80052be:	d5fc      	bpl.n	80052ba <HAL_I2C_Master_Receive+0x182>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052c0:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e79a      	b.n	80051fe <HAL_I2C_Master_Receive+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 80052c8:	2320      	movs	r3, #32
      return HAL_BUSY;
 80052ca:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052cc:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052d0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052d4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052da:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052de:	f043 0320 	orr.w	r3, r3, #32
 80052e2:	642b      	str	r3, [r5, #64]	; 0x40
}
 80052e4:	b007      	add	sp, #28
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ea:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ec:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f0:	2120      	movs	r1, #32
      return HAL_ERROR;
 80052f2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fa:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fc:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005300:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005304:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005308:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800530a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005314:	b007      	add	sp, #28
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 800531a:	2b01      	cmp	r3, #1
 800531c:	f000 8167 	beq.w	80055ee <HAL_I2C_Master_Receive+0x4b6>
    else if (hi2c->XferSize == 2U)
 8005320:	2b02      	cmp	r3, #2
 8005322:	f000 8108 	beq.w	8005536 <HAL_I2C_Master_Receive+0x3fe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005326:	2100      	movs	r1, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800532e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	9104      	str	r1, [sp, #16]
 8005332:	6962      	ldr	r2, [r4, #20]
 8005334:	9204      	str	r2, [sp, #16]
 8005336:	69a2      	ldr	r2, [r4, #24]
 8005338:	9204      	str	r2, [sp, #16]
 800533a:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 800533c:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800533e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8005588 <HAL_I2C_Master_Receive+0x450>
 8005342:	f8df 8248 	ldr.w	r8, [pc, #584]	; 800558c <HAL_I2C_Master_Receive+0x454>
      if (hi2c->XferSize <= 3U)
 8005346:	d834      	bhi.n	80053b2 <HAL_I2C_Master_Receive+0x27a>
        if (hi2c->XferSize == 1U)
 8005348:	2b01      	cmp	r3, #1
 800534a:	f000 811b 	beq.w	8005584 <HAL_I2C_Master_Receive+0x44c>
        else if (hi2c->XferSize == 2U)
 800534e:	2b02      	cmp	r3, #2
 8005350:	f040 80b0 	bne.w	80054b4 <HAL_I2C_Master_Receive+0x37c>
 8005354:	1c7a      	adds	r2, r7, #1
 8005356:	f040 8106 	bne.w	8005566 <HAL_I2C_Master_Receive+0x42e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800535a:	6963      	ldr	r3, [r4, #20]
 800535c:	075b      	lsls	r3, r3, #29
 800535e:	d5fc      	bpl.n	800535a <HAL_I2C_Master_Receive+0x222>
 8005360:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	682b      	ldr	r3, [r5, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005364:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005372:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005374:	3b01      	subs	r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	856b      	strh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800537a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800537c:	3301      	adds	r3, #1
 800537e:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8005380:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	852b      	strh	r3, [r5, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005386:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800538e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005390:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 8005392:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8005394:	3a01      	subs	r2, #1
 8005396:	b292      	uxth	r2, r2
 8005398:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800539a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800539c:	3b01      	subs	r3, #1
 800539e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80053a0:	3201      	adds	r2, #1
          hi2c->XferSize--;
 80053a2:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 80053a4:	626a      	str	r2, [r5, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f43f af40 	beq.w	800522c <HAL_I2C_Master_Receive+0xf4>
      if (hi2c->XferSize <= 3U)
 80053ac:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 80053b0:	d9ca      	bls.n	8005348 <HAL_I2C_Master_Receive+0x210>
 80053b2:	b957      	cbnz	r7, 80053ca <HAL_I2C_Master_Receive+0x292>
 80053b4:	e048      	b.n	8005448 <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	06da      	lsls	r2, r3, #27
 80053ba:	f100 80fa 	bmi.w	80055b2 <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fe ff37 	bl	8004230 <HAL_GetTick>
 80053c2:	1b80      	subs	r0, r0, r6
 80053c4:	4287      	cmp	r7, r0
 80053c6:	d348      	bcc.n	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c8:	682c      	ldr	r4, [r5, #0]
 80053ca:	6963      	ldr	r3, [r4, #20]
 80053cc:	0659      	lsls	r1, r3, #25
 80053ce:	d5f2      	bpl.n	80053b6 <HAL_I2C_Master_Receive+0x27e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	6922      	ldr	r2, [r4, #16]
 80053d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053d4:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80053d6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d8:	6829      	ldr	r1, [r5, #0]
        hi2c->XferCount--;
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80053e0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80053e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053e4:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80053ea:	1c54      	adds	r4, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053ec:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80053ee:	852b      	strh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80053f0:	626c      	str	r4, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f2:	d5d8      	bpl.n	80053a6 <HAL_I2C_Master_Receive+0x26e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	690b      	ldr	r3, [r1, #16]
 80053f6:	7053      	strb	r3, [r2, #1]
 80053f8:	e7ca      	b.n	8005390 <HAL_I2C_Master_Receive+0x258>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053fa:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80053fc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053fe:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005400:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005404:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005408:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800540a:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8005410:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005416:	680b      	ldr	r3, [r1, #0]
 8005418:	05dc      	lsls	r4, r3, #23
 800541a:	f140 808a 	bpl.w	8005532 <HAL_I2C_Master_Receive+0x3fa>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800541e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8005422:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005424:	642b      	str	r3, [r5, #64]	; 0x40
 8005426:	e698      	b.n	800515a <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005428:	6963      	ldr	r3, [r4, #20]
 800542a:	0798      	lsls	r0, r3, #30
 800542c:	f53f aef0 	bmi.w	8005210 <HAL_I2C_Master_Receive+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005430:	6963      	ldr	r3, [r4, #20]
 8005432:	0558      	lsls	r0, r3, #21
 8005434:	f53f af59 	bmi.w	80052ea <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005438:	f7fe fefa 	bl	8004230 <HAL_GetTick>
 800543c:	1b83      	subs	r3, r0, r6
 800543e:	429f      	cmp	r7, r3
 8005440:	d30b      	bcc.n	800545a <HAL_I2C_Master_Receive+0x322>
 8005442:	b157      	cbz	r7, 800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005444:	682c      	ldr	r4, [r5, #0]
 8005446:	e6da      	b.n	80051fe <HAL_I2C_Master_Receive+0xc6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005448:	6963      	ldr	r3, [r4, #20]
 800544a:	065b      	lsls	r3, r3, #25
 800544c:	d4c0      	bmi.n	80053d0 <HAL_I2C_Master_Receive+0x298>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800544e:	6963      	ldr	r3, [r4, #20]
 8005450:	06da      	lsls	r2, r3, #27
 8005452:	f100 80ae 	bmi.w	80055b2 <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fe feeb 	bl	8004230 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800545a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800545c:	2320      	movs	r3, #32
          return HAL_ERROR;
 800545e:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005460:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005462:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005466:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800546a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800546c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	f043 0320 	orr.w	r3, r3, #32
 8005474:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005476:	b007      	add	sp, #28
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800547c:	6963      	ldr	r3, [r4, #20]
 800547e:	071b      	lsls	r3, r3, #28
 8005480:	f53f af01 	bmi.w	8005286 <HAL_I2C_Master_Receive+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005484:	6963      	ldr	r3, [r4, #20]
 8005486:	055b      	lsls	r3, r3, #21
 8005488:	f53f af2f 	bmi.w	80052ea <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548c:	f7fe fed0 	bl	8004230 <HAL_GetTick>
 8005490:	1b83      	subs	r3, r0, r6
 8005492:	429f      	cmp	r7, r3
 8005494:	d3e1      	bcc.n	800545a <HAL_I2C_Master_Receive+0x322>
 8005496:	2f00      	cmp	r7, #0
 8005498:	d0df      	beq.n	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800549a:	682c      	ldr	r4, [r5, #0]
 800549c:	e6ea      	b.n	8005274 <HAL_I2C_Master_Receive+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549e:	6963      	ldr	r3, [r4, #20]
 80054a0:	075b      	lsls	r3, r3, #29
 80054a2:	d40c      	bmi.n	80054be <HAL_I2C_Master_Receive+0x386>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a4:	f7fe fec4 	bl	8004230 <HAL_GetTick>
 80054a8:	1b80      	subs	r0, r0, r6
 80054aa:	4287      	cmp	r7, r0
 80054ac:	d3d5      	bcc.n	800545a <HAL_I2C_Master_Receive+0x322>
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	d0d3      	beq.n	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b2:	682c      	ldr	r4, [r5, #0]
 80054b4:	1c79      	adds	r1, r7, #1
 80054b6:	d1f2      	bne.n	800549e <HAL_I2C_Master_Receive+0x366>
 80054b8:	6963      	ldr	r3, [r4, #20]
 80054ba:	075a      	lsls	r2, r3, #29
 80054bc:	d5fc      	bpl.n	80054b8 <HAL_I2C_Master_Receive+0x380>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c4:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054c6:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054ce:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054d0:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 80054d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 80054dc:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 80054e4:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 80054ea:	b292      	uxth	r2, r2
 80054ec:	856a      	strh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054ee:	9300      	str	r3, [sp, #0]
          hi2c->XferSize--;
 80054f0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 80054f6:	1c4b      	adds	r3, r1, #1
 80054f8:	626b      	str	r3, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054fa:	e003      	b.n	8005504 <HAL_I2C_Master_Receive+0x3cc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	0750      	lsls	r0, r2, #29
 8005502:	d468      	bmi.n	80055d6 <HAL_I2C_Master_Receive+0x49e>
            count--;
 8005504:	9b00      	ldr	r3, [sp, #0]
 8005506:	3b01      	subs	r3, #1
 8005508:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f5      	bne.n	80054fc <HAL_I2C_Master_Receive+0x3c4>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	632b      	str	r3, [r5, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005514:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800551e:	f042 0220 	orr.w	r2, r2, #32
 8005522:	642a      	str	r2, [r5, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005524:	b662      	cpsie	i
              return HAL_ERROR;
 8005526:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 8005528:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800552c:	b007      	add	sp, #28
 800552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8005532:	2001      	movs	r0, #1
 8005534:	e611      	b.n	800515a <HAL_I2C_Master_Receive+0x22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800553c:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800553e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005540:	2200      	movs	r2, #0
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	9203      	str	r2, [sp, #12]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	9203      	str	r2, [sp, #12]
 800554a:	699a      	ldr	r2, [r3, #24]
 800554c:	9203      	str	r2, [sp, #12]
 800554e:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005558:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800555a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	f43f ae65 	beq.w	800522c <HAL_I2C_Master_Receive+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005562:	682c      	ldr	r4, [r5, #0]
 8005564:	e6ea      	b.n	800533c <HAL_I2C_Master_Receive+0x204>
 8005566:	6963      	ldr	r3, [r4, #20]
 8005568:	0758      	lsls	r0, r3, #29
 800556a:	f53f aef9 	bmi.w	8005360 <HAL_I2C_Master_Receive+0x228>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fe fe5f 	bl	8004230 <HAL_GetTick>
 8005572:	1b80      	subs	r0, r0, r6
 8005574:	4287      	cmp	r7, r0
 8005576:	f4ff af70 	bcc.w	800545a <HAL_I2C_Master_Receive+0x322>
 800557a:	2f00      	cmp	r7, #0
 800557c:	f43f af6d 	beq.w	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	682c      	ldr	r4, [r5, #0]
 8005582:	e6e7      	b.n	8005354 <HAL_I2C_Master_Receive+0x21c>
 8005584:	b977      	cbnz	r7, 80055a4 <HAL_I2C_Master_Receive+0x46c>
 8005586:	e02d      	b.n	80055e4 <HAL_I2C_Master_Receive+0x4ac>
 8005588:	20000004 	.word	0x20000004
 800558c:	14f8b589 	.word	0x14f8b589
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005590:	6963      	ldr	r3, [r4, #20]
 8005592:	06d8      	lsls	r0, r3, #27
 8005594:	d40d      	bmi.n	80055b2 <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fe fe4b 	bl	8004230 <HAL_GetTick>
 800559a:	1b80      	subs	r0, r0, r6
 800559c:	4287      	cmp	r7, r0
 800559e:	f4ff af5c 	bcc.w	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a2:	682c      	ldr	r4, [r5, #0]
 80055a4:	6963      	ldr	r3, [r4, #20]
 80055a6:	065b      	lsls	r3, r3, #25
 80055a8:	d5f2      	bpl.n	8005590 <HAL_I2C_Master_Receive+0x458>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055aa:	6922      	ldr	r2, [r4, #16]
 80055ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055ae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055b0:	e6ee      	b.n	8005390 <HAL_I2C_Master_Receive+0x258>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b2:	2300      	movs	r3, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b4:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b8:	2220      	movs	r2, #32
          return HAL_ERROR;
 80055ba:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055c8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80055ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055ce:	642a      	str	r2, [r5, #64]	; 0x40
}
 80055d0:	b007      	add	sp, #28
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055dc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	704b      	strb	r3, [r1, #1]
 80055e2:	e6c6      	b.n	8005372 <HAL_I2C_Master_Receive+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e4:	6963      	ldr	r3, [r4, #20]
 80055e6:	0659      	lsls	r1, r3, #25
 80055e8:	f57f af31 	bpl.w	800544e <HAL_I2C_Master_Receive+0x316>
 80055ec:	e7dd      	b.n	80055aa <HAL_I2C_Master_Receive+0x472>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f4:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055f6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f8:	2200      	movs	r2, #0
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	9202      	str	r2, [sp, #8]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	9202      	str	r2, [sp, #8]
 8005606:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005610:	b662      	cpsie	i
}
 8005612:	e7a2      	b.n	800555a <HAL_I2C_Master_Receive+0x422>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005614:	6963      	ldr	r3, [r4, #20]
 8005616:	0798      	lsls	r0, r3, #30
 8005618:	f53f ae41 	bmi.w	800529e <HAL_I2C_Master_Receive+0x166>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561c:	6963      	ldr	r3, [r4, #20]
 800561e:	0558      	lsls	r0, r3, #21
 8005620:	f53f ae63 	bmi.w	80052ea <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005624:	f7fe fe04 	bl	8004230 <HAL_GetTick>
 8005628:	1b83      	subs	r3, r0, r6
 800562a:	429f      	cmp	r7, r3
 800562c:	f4ff af15 	bcc.w	800545a <HAL_I2C_Master_Receive+0x322>
 8005630:	2f00      	cmp	r7, #0
 8005632:	f43f af12 	beq.w	800545a <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005636:	682c      	ldr	r4, [r5, #0]
 8005638:	e628      	b.n	800528c <HAL_I2C_Master_Receive+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800563a:	6963      	ldr	r3, [r4, #20]
 800563c:	07db      	lsls	r3, r3, #31
 800563e:	f53f ae3f 	bmi.w	80052c0 <HAL_I2C_Master_Receive+0x188>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fe fdf5 	bl	8004230 <HAL_GetTick>
 8005646:	1b83      	subs	r3, r0, r6
 8005648:	429f      	cmp	r7, r3
 800564a:	f4ff aed6 	bcc.w	80053fa <HAL_I2C_Master_Receive+0x2c2>
 800564e:	2f00      	cmp	r7, #0
 8005650:	f43f aed3 	beq.w	80053fa <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005654:	682c      	ldr	r4, [r5, #0]
 8005656:	e62d      	b.n	80052b4 <HAL_I2C_Master_Receive+0x17c>

08005658 <HAL_I2C_Mem_Write>:
{
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	b083      	sub	sp, #12
 8005660:	4699      	mov	r9, r3
 8005662:	460f      	mov	r7, r1
 8005664:	4690      	mov	r8, r2
 8005666:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800566a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7fe fde0 	bl	8004230 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005670:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005674:	2b20      	cmp	r3, #32
 8005676:	d004      	beq.n	8005682 <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 8005678:	2702      	movs	r7, #2
}
 800567a:	4638      	mov	r0, r7
 800567c:	b003      	add	sp, #12
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	4605      	mov	r5, r0
 8005684:	e005      	b.n	8005692 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fe fdd3 	bl	8004230 <HAL_GetTick>
 800568a:	1b40      	subs	r0, r0, r5
 800568c:	2819      	cmp	r0, #25
 800568e:	f200 80c0 	bhi.w	8005812 <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	6983      	ldr	r3, [r0, #24]
 8005696:	ea6f 0c03 	mvn.w	ip, r3
 800569a:	f01c 0b02 	ands.w	fp, ip, #2
 800569e:	d0f2      	beq.n	8005686 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80056a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d0e7      	beq.n	8005678 <HAL_I2C_Mem_Write+0x20>
 80056a8:	2301      	movs	r3, #1
 80056aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056ae:	6803      	ldr	r3, [r0, #0]
 80056b0:	07db      	lsls	r3, r3, #31
 80056b2:	f140 808e 	bpl.w	80057d2 <HAL_I2C_Mem_Write+0x17a>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056b6:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056b8:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056bc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056c0:	f04f 0821 	mov.w	r8, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c4:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c6:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c8:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ca:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80056ce:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80056d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056d2:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056d4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056d8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056dc:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e0:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80056e4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80056ea:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ec:	486a      	ldr	r0, [pc, #424]	; (8005898 <HAL_I2C_Mem_Write+0x240>)
 80056ee:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff f84b 	bl	800478c <I2C_RequestMemoryWrite>
 80056f6:	4607      	mov	r7, r0
 80056f8:	bb00      	cbnz	r0, 800573c <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 80056fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80ba 	beq.w	8005876 <HAL_I2C_Mem_Write+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	1c71      	adds	r1, r6, #1
 8005706:	d169      	bne.n	80057dc <HAL_I2C_Mem_Write+0x184>
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	0612      	lsls	r2, r2, #24
 800570c:	d41b      	bmi.n	8005746 <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	0550      	lsls	r0, r2, #21
 8005712:	d5f9      	bpl.n	8005708 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005716:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005724:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005728:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800572a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005736:	2b04      	cmp	r3, #4
 8005738:	f000 808a 	beq.w	8005850 <HAL_I2C_Mem_Write+0x1f8>
      return HAL_ERROR;
 800573c:	2701      	movs	r7, #1
}
 800573e:	4638      	mov	r0, r7
 8005740:	b003      	add	sp, #12
 8005742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005748:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574c:	4602      	mov	r2, r0
 800574e:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 8005752:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005756:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 800575a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800575c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800575e:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8005760:	3a01      	subs	r2, #1
 8005762:	b292      	uxth	r2, r2
 8005764:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005766:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 8005768:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800576a:	0752      	lsls	r2, r2, #29
 800576c:	d52e      	bpl.n	80057cc <HAL_I2C_Mem_Write+0x174>
 800576e:	bb09      	cbnz	r1, 80057b4 <HAL_I2C_Mem_Write+0x15c>
 8005770:	1c72      	adds	r2, r6, #1
 8005772:	d174      	bne.n	800585e <HAL_I2C_Mem_Write+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	0750      	lsls	r0, r2, #29
 8005778:	d45d      	bmi.n	8005836 <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	0551      	lsls	r1, r2, #21
 800577e:	d5f9      	bpl.n	8005774 <HAL_I2C_Mem_Write+0x11c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005782:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005788:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800578c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005794:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005796:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d1ca      	bne.n	800573c <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80057a8:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057aa:	6813      	ldr	r3, [r2, #0]
 80057ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e762      	b.n	800567a <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b4:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80057b6:	f1ac 0102 	sub.w	r1, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ba:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80057bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80057be:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 80057c0:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 80057c2:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80057c4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80057c6:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80057c8:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80057ca:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d199      	bne.n	8005704 <HAL_I2C_Mem_Write+0xac>
 80057d0:	e7ce      	b.n	8005770 <HAL_I2C_Mem_Write+0x118>
      __HAL_I2C_ENABLE(hi2c);
 80057d2:	6803      	ldr	r3, [r0, #0]
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6003      	str	r3, [r0, #0]
 80057da:	e76c      	b.n	80056b6 <HAL_I2C_Mem_Write+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	0611      	lsls	r1, r2, #24
 80057e0:	d4b1      	bmi.n	8005746 <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	0550      	lsls	r0, r2, #21
 80057e6:	d495      	bmi.n	8005714 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e8:	f7fe fd22 	bl	8004230 <HAL_GetTick>
 80057ec:	1b40      	subs	r0, r0, r5
 80057ee:	4286      	cmp	r6, r0
 80057f0:	d301      	bcc.n	80057f6 <HAL_I2C_Mem_Write+0x19e>
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d185      	bne.n	8005702 <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057f6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80057f8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057fa:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005800:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005806:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	f043 0320 	orr.w	r3, r3, #32
 800580e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005810:	e790      	b.n	8005734 <HAL_I2C_Mem_Write+0xdc>
      return HAL_BUSY;
 8005812:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8005814:	2320      	movs	r3, #32
}
 8005816:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005818:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800581c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005820:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005826:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800582a:	f043 0320 	orr.w	r3, r3, #32
 800582e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005830:	b003      	add	sp, #12
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005836:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005838:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005840:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005842:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005846:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800584e:	e714      	b.n	800567a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005850:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8005852:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	6813      	ldr	r3, [r2, #0]
 8005856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	e70d      	b.n	800567a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	0752      	lsls	r2, r2, #29
 8005862:	d4e8      	bmi.n	8005836 <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	0551      	lsls	r1, r2, #21
 8005868:	d48a      	bmi.n	8005780 <HAL_I2C_Mem_Write+0x128>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fe fce1 	bl	8004230 <HAL_GetTick>
 800586e:	1b43      	subs	r3, r0, r5
 8005870:	429e      	cmp	r6, r3
 8005872:	d302      	bcc.n	800587a <HAL_I2C_Mem_Write+0x222>
 8005874:	b10e      	cbz	r6, 800587a <HAL_I2C_Mem_Write+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	e77a      	b.n	8005770 <HAL_I2C_Mem_Write+0x118>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800587a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800587c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800587e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005884:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005888:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800588a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800588e:	f043 0320 	orr.w	r3, r3, #32
 8005892:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005894:	e784      	b.n	80057a0 <HAL_I2C_Mem_Write+0x148>
 8005896:	bf00      	nop
 8005898:	ffff0000 	.word	0xffff0000

0800589c <HAL_I2C_Mem_Read>:
{
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 80058a0:	2400      	movs	r4, #0
{
 80058a2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80058a4:	9403      	str	r4, [sp, #12]
{
 80058a6:	4604      	mov	r4, r0
 80058a8:	4699      	mov	r9, r3
 80058aa:	460f      	mov	r7, r1
 80058ac:	4690      	mov	r8, r2
 80058ae:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 80058b2:	9e14      	ldr	r6, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 80058b4:	f7fe fcbc 	bl	8004230 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d004      	beq.n	80058ca <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 80058c0:	2702      	movs	r7, #2
}
 80058c2:	4638      	mov	r0, r7
 80058c4:	b009      	add	sp, #36	; 0x24
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	4605      	mov	r5, r0
 80058cc:	e005      	b.n	80058da <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fe fcaf 	bl	8004230 <HAL_GetTick>
 80058d2:	1b40      	subs	r0, r0, r5
 80058d4:	2819      	cmp	r0, #25
 80058d6:	f200 80c1 	bhi.w	8005a5c <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	6983      	ldr	r3, [r0, #24]
 80058de:	ea6f 0c03 	mvn.w	ip, r3
 80058e2:	f01c 0b02 	ands.w	fp, ip, #2
 80058e6:	d0f2      	beq.n	80058ce <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 80058e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d0e7      	beq.n	80058c0 <HAL_I2C_Mem_Read+0x24>
 80058f0:	2301      	movs	r3, #1
 80058f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058f6:	6803      	ldr	r3, [r0, #0]
 80058f8:	07d9      	lsls	r1, r3, #31
 80058fa:	d539      	bpl.n	8005970 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058fc:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058fe:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005902:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005906:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800590a:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590c:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800590e:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005910:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8005914:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8005916:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005918:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591a:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800591e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005922:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005926:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800592a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800592e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005930:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005932:	489c      	ldr	r0, [pc, #624]	; (8005ba4 <HAL_I2C_Mem_Read+0x308>)
 8005934:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff f846 	bl	80049c8 <I2C_RequestMemoryRead>
 800593c:	4607      	mov	r7, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	f040 809e 	bne.w	8005a80 <HAL_I2C_Mem_Read+0x1e4>
    if (hi2c->XferSize == 0U)
 8005944:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005946:	b9c2      	cbnz	r2, 800597a <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	9004      	str	r0, [sp, #16]
 800594c:	695a      	ldr	r2, [r3, #20]
 800594e:	9204      	str	r2, [sp, #16]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	9204      	str	r2, [sp, #16]
 8005954:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800595e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005960:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005962:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005966:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800596e:	e7a8      	b.n	80058c2 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8005970:	6803      	ldr	r3, [r0, #0]
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6003      	str	r3, [r0, #0]
 8005978:	e7c0      	b.n	80058fc <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800597a:	2a01      	cmp	r2, #1
 800597c:	f000 8143 	beq.w	8005c06 <HAL_I2C_Mem_Read+0x36a>
    else if (hi2c->XferSize == 2U)
 8005980:	2a02      	cmp	r2, #2
 8005982:	f000 80cd 	beq.w	8005b20 <HAL_I2C_Mem_Read+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6819      	ldr	r1, [r3, #0]
 800598a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800598e:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005990:	9007      	str	r0, [sp, #28]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	9107      	str	r1, [sp, #28]
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	9107      	str	r1, [sp, #28]
 800599a:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 800599c:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800599e:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005ba8 <HAL_I2C_Mem_Read+0x30c>
 80059a2:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8005bac <HAL_I2C_Mem_Read+0x310>
      if (hi2c->XferSize <= 3U)
 80059a6:	d832      	bhi.n	8005a0e <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 80059a8:	2a01      	cmp	r2, #1
 80059aa:	f000 80f8 	beq.w	8005b9e <HAL_I2C_Mem_Read+0x302>
        else if (hi2c->XferSize == 2U)
 80059ae:	2a02      	cmp	r2, #2
 80059b0:	d176      	bne.n	8005aa0 <HAL_I2C_Mem_Read+0x204>
 80059b2:	1c71      	adds	r1, r6, #1
 80059b4:	f040 80cc 	bne.w	8005b50 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	0752      	lsls	r2, r2, #29
 80059bc:	d5fc      	bpl.n	80059b8 <HAL_I2C_Mem_Read+0x11c>
  __ASM volatile ("cpsid i" : : : "memory");
 80059be:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80059d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80059d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059da:	3301      	adds	r3, #1
 80059dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80059de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80059e0:	3b01      	subs	r3, #1
 80059e2:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80059e4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ec:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80059ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80059f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80059f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80059fa:	3a01      	subs	r2, #1
 80059fc:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80059fe:	3301      	adds	r3, #1
          hi2c->XferSize--;
 8005a00:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005a02:	6263      	str	r3, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	d0aa      	beq.n	800595e <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8005a08:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a0a:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8005a0c:	d9cc      	bls.n	80059a8 <HAL_I2C_Mem_Read+0x10c>
 8005a0e:	b95e      	cbnz	r6, 8005a28 <HAL_I2C_Mem_Read+0x18c>
 8005a10:	e0aa      	b.n	8005b68 <HAL_I2C_Mem_Read+0x2cc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	06d0      	lsls	r0, r2, #27
 8005a16:	f100 80d8 	bmi.w	8005bca <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fe fc09 	bl	8004230 <HAL_GetTick>
 8005a1e:	1b40      	subs	r0, r0, r5
 8005a20:	4286      	cmp	r6, r0
 8005a22:	f0c0 80aa 	bcc.w	8005b7a <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	0652      	lsls	r2, r2, #25
 8005a2c:	d5f1      	bpl.n	8005a12 <HAL_I2C_Mem_Read+0x176>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a32:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8005a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a36:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005a3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005a3e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a40:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8005a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005a44:	3a01      	subs	r2, #1
 8005a46:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8005a48:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a4c:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8005a4e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005a50:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a54:	d5d6      	bpl.n	8005a04 <HAL_I2C_Mem_Read+0x168>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	690a      	ldr	r2, [r1, #16]
 8005a58:	705a      	strb	r2, [r3, #1]
 8005a5a:	e7c8      	b.n	80059ee <HAL_I2C_Mem_Read+0x152>
      return HAL_BUSY;
 8005a5c:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a5e:	2320      	movs	r3, #32
}
 8005a60:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a62:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a6a:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005a70:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a74:	f043 0320 	orr.w	r3, r3, #32
 8005a78:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005a7a:	b009      	add	sp, #36	; 0x24
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8005a80:	2701      	movs	r7, #1
}
 8005a82:	4638      	mov	r0, r7
 8005a84:	b009      	add	sp, #36	; 0x24
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	0752      	lsls	r2, r2, #29
 8005a8e:	d40c      	bmi.n	8005aaa <HAL_I2C_Mem_Read+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a90:	f7fe fbce 	bl	8004230 <HAL_GetTick>
 8005a94:	1b40      	subs	r0, r0, r5
 8005a96:	4286      	cmp	r6, r0
 8005a98:	d36f      	bcc.n	8005b7a <HAL_I2C_Mem_Read+0x2de>
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	d06d      	beq.n	8005b7a <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	1c70      	adds	r0, r6, #1
 8005aa2:	d1f2      	bne.n	8005a8a <HAL_I2C_Mem_Read+0x1ee>
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	0751      	lsls	r1, r2, #29
 8005aa8:	d5fc      	bpl.n	8005aa4 <HAL_I2C_Mem_Read+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab2:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aba:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005abc:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8005ac0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ac2:	08db      	lsrs	r3, r3, #3
 8005ac4:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8005ac8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8005ad0:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ad2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8005ad6:	b292      	uxth	r2, r2
 8005ad8:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ada:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8005adc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005ae2:	1c4b      	adds	r3, r1, #1
 8005ae4:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ae6:	e003      	b.n	8005af0 <HAL_I2C_Mem_Read+0x254>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	0750      	lsls	r0, r2, #29
 8005aee:	d47f      	bmi.n	8005bf0 <HAL_I2C_Mem_Read+0x354>
            count--;
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f5      	bne.n	8005ae8 <HAL_I2C_Mem_Read+0x24c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b0a:	f042 0220 	orr.w	r2, r2, #32
 8005b0e:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005b10:	b662      	cpsie	i
              return HAL_ERROR;
 8005b12:	2701      	movs	r7, #1
}
 8005b14:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8005b16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005b1a:	b009      	add	sp, #36	; 0x24
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b2a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	9006      	str	r0, [sp, #24]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	9206      	str	r2, [sp, #24]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	9206      	str	r2, [sp, #24]
 8005b38:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b42:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8005b44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005b46:	2a00      	cmp	r2, #0
 8005b48:	f43f af09 	beq.w	800595e <HAL_I2C_Mem_Read+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	e725      	b.n	800599c <HAL_I2C_Mem_Read+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	075b      	lsls	r3, r3, #29
 8005b54:	f53f af33 	bmi.w	80059be <HAL_I2C_Mem_Read+0x122>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fe fb6a 	bl	8004230 <HAL_GetTick>
 8005b5c:	1b40      	subs	r0, r0, r5
 8005b5e:	4286      	cmp	r6, r0
 8005b60:	d30b      	bcc.n	8005b7a <HAL_I2C_Mem_Read+0x2de>
 8005b62:	b156      	cbz	r6, 8005b7a <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	e724      	b.n	80059b2 <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	0652      	lsls	r2, r2, #25
 8005b6c:	f53f af5f 	bmi.w	8005a2e <HAL_I2C_Mem_Read+0x192>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	06d1      	lsls	r1, r2, #27
 8005b74:	d429      	bmi.n	8005bca <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fe fb5b 	bl	8004230 <HAL_GetTick>
          return HAL_ERROR;
 8005b7a:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b7c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b7e:	2320      	movs	r3, #32
}
 8005b80:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b82:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b88:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005b8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	f043 0320 	orr.w	r3, r3, #32
 8005b96:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005b98:	b009      	add	sp, #36	; 0x24
 8005b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9e:	b96e      	cbnz	r6, 8005bbc <HAL_I2C_Mem_Read+0x320>
 8005ba0:	e02d      	b.n	8005bfe <HAL_I2C_Mem_Read+0x362>
 8005ba2:	bf00      	nop
 8005ba4:	ffff0000 	.word	0xffff0000
 8005ba8:	20000004 	.word	0x20000004
 8005bac:	14f8b589 	.word	0x14f8b589
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb0:	f7fe fb3e 	bl	8004230 <HAL_GetTick>
 8005bb4:	1b40      	subs	r0, r0, r5
 8005bb6:	4286      	cmp	r6, r0
 8005bb8:	d3df      	bcc.n	8005b7a <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	0651      	lsls	r1, r2, #25
 8005bc0:	f53f af12 	bmi.w	80059e8 <HAL_I2C_Mem_Read+0x14c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	06d2      	lsls	r2, r2, #27
 8005bc8:	d5f2      	bpl.n	8005bb0 <HAL_I2C_Mem_Read+0x314>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bca:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8005bce:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd0:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bd2:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd4:	6158      	str	r0, [r3, #20]
}
 8005bd6:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bda:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bde:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005be4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005be8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005bea:	b009      	add	sp, #36	; 0x24
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	704b      	strb	r3, [r1, #1]
 8005bfc:	e6e8      	b.n	80059d0 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	0650      	lsls	r0, r2, #25
 8005c02:	d5b5      	bpl.n	8005b70 <HAL_I2C_Mem_Read+0x2d4>
 8005c04:	e6f0      	b.n	80059e8 <HAL_I2C_Mem_Read+0x14c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	6813      	ldr	r3, [r2, #0]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c10:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	9005      	str	r0, [sp, #20]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	9205      	str	r2, [sp, #20]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	9205      	str	r2, [sp, #20]
 8005c1e:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c28:	b662      	cpsie	i
}
 8005c2a:	e78b      	b.n	8005b44 <HAL_I2C_Mem_Read+0x2a8>

08005c2c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f000 81b6 	beq.w	8005f9e <HAL_RCC_OscConfig+0x372>
{
 8005c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c36:	6803      	ldr	r3, [r0, #0]
 8005c38:	4604      	mov	r4, r0
 8005c3a:	07dd      	lsls	r5, r3, #31
{
 8005c3c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3e:	d535      	bpl.n	8005cac <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c40:	499a      	ldr	r1, [pc, #616]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005c42:	684a      	ldr	r2, [r1, #4]
 8005c44:	f002 020c 	and.w	r2, r2, #12
 8005c48:	2a04      	cmp	r2, #4
 8005c4a:	f000 80ef 	beq.w	8005e2c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c4e:	684a      	ldr	r2, [r1, #4]
 8005c50:	f002 020c 	and.w	r2, r2, #12
 8005c54:	2a08      	cmp	r2, #8
 8005c56:	f000 80e5 	beq.w	8005e24 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5a:	6863      	ldr	r3, [r4, #4]
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c60:	d010      	beq.n	8005c84 <HAL_RCC_OscConfig+0x58>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 810c 	beq.w	8005e80 <HAL_RCC_OscConfig+0x254>
 8005c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c6c:	f000 8182 	beq.w	8005f74 <HAL_RCC_OscConfig+0x348>
 8005c70:	4b8e      	ldr	r3, [pc, #568]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	e004      	b.n	8005c8e <HAL_RCC_OscConfig+0x62>
 8005c84:	4a89      	ldr	r2, [pc, #548]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fe facf 	bl	8004230 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c92:	4e86      	ldr	r6, [pc, #536]	; (8005eac <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8005c94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	e005      	b.n	8005ca4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fe faca 	bl	8004230 <HAL_GetTick>
 8005c9c:	1b40      	subs	r0, r0, r5
 8005c9e:	2864      	cmp	r0, #100	; 0x64
 8005ca0:	f200 80ea 	bhi.w	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca4:	6833      	ldr	r3, [r6, #0]
 8005ca6:	039a      	lsls	r2, r3, #14
 8005ca8:	d5f6      	bpl.n	8005c98 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	079f      	lsls	r7, r3, #30
 8005cae:	d528      	bpl.n	8005d02 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cb0:	4a7e      	ldr	r2, [pc, #504]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005cb2:	6851      	ldr	r1, [r2, #4]
 8005cb4:	f011 0f0c 	tst.w	r1, #12
 8005cb8:	f000 808d 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005cbc:	6851      	ldr	r1, [r2, #4]
 8005cbe:	f001 010c 	and.w	r1, r1, #12
 8005cc2:	2908      	cmp	r1, #8
 8005cc4:	f000 8083 	beq.w	8005dce <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8118 	beq.w	8005f00 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4b77      	ldr	r3, [pc, #476]	; (8005eb0 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	4e75      	ldr	r6, [pc, #468]	; (8005eac <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8005cd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005cd8:	f7fe faaa 	bl	8004230 <HAL_GetTick>
 8005cdc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cde:	e005      	b.n	8005cec <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce0:	f7fe faa6 	bl	8004230 <HAL_GetTick>
 8005ce4:	1b40      	subs	r0, r0, r5
 8005ce6:	2802      	cmp	r0, #2
 8005ce8:	f200 80c6 	bhi.w	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	0798      	lsls	r0, r3, #30
 8005cf0:	d5f6      	bpl.n	8005ce0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf2:	6833      	ldr	r3, [r6, #0]
 8005cf4:	6962      	ldr	r2, [r4, #20]
 8005cf6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005cfa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005cfe:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	071a      	lsls	r2, r3, #28
 8005d04:	d41f      	bmi.n	8005d46 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d06:	075d      	lsls	r5, r3, #29
 8005d08:	d542      	bpl.n	8005d90 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0a:	4b68      	ldr	r3, [pc, #416]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	00d0      	lsls	r0, r2, #3
 8005d10:	d57d      	bpl.n	8005e0e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8005d12:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d14:	4e67      	ldr	r6, [pc, #412]	; (8005eb4 <HAL_RCC_OscConfig+0x288>)
 8005d16:	6833      	ldr	r3, [r6, #0]
 8005d18:	05d9      	lsls	r1, r3, #23
 8005d1a:	f140 809d 	bpl.w	8005e58 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f000 80fe 	beq.w	8005f22 <HAL_RCC_OscConfig+0x2f6>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80ca 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x294>
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	4b5f      	ldr	r3, [pc, #380]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	f000 812c 	beq.w	8005f8e <HAL_RCC_OscConfig+0x362>
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	621a      	str	r2, [r3, #32]
 8005d3c:	6a1a      	ldr	r2, [r3, #32]
 8005d3e:	f022 0204 	bic.w	r2, r2, #4
 8005d42:	621a      	str	r2, [r3, #32]
 8005d44:	e0f2      	b.n	8005f2c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d46:	69a3      	ldr	r3, [r4, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d04f      	beq.n	8005dec <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4b58      	ldr	r3, [pc, #352]	; (8005eb0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d50:	4e56      	ldr	r6, [pc, #344]	; (8005eac <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8005d52:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005d56:	f7fe fa6b 	bl	8004230 <HAL_GetTick>
 8005d5a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d5c:	e005      	b.n	8005d6a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5e:	f7fe fa67 	bl	8004230 <HAL_GetTick>
 8005d62:	1b40      	subs	r0, r0, r5
 8005d64:	2802      	cmp	r0, #2
 8005d66:	f200 8087 	bhi.w	8005e78 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d6c:	079b      	lsls	r3, r3, #30
 8005d6e:	d5f6      	bpl.n	8005d5e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d70:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <HAL_RCC_OscConfig+0x28c>)
 8005d72:	4a52      	ldr	r2, [pc, #328]	; (8005ebc <HAL_RCC_OscConfig+0x290>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	0a5b      	lsrs	r3, r3, #9
 8005d7c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005d7e:	bf00      	nop
  }
  while (Delay --);
 8005d80:	9b01      	ldr	r3, [sp, #4]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	9201      	str	r2, [sp, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f9      	bne.n	8005d7e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	075d      	lsls	r5, r3, #29
 8005d8e:	d4bc      	bmi.n	8005d0a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d90:	69e0      	ldr	r0, [r4, #28]
 8005d92:	b1c0      	cbz	r0, 8005dc6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d94:	4d45      	ldr	r5, [pc, #276]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005d96:	686b      	ldr	r3, [r5, #4]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	f000 80d8 	beq.w	8005f52 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8005da2:	2200      	movs	r2, #0
 8005da4:	4b42      	ldr	r3, [pc, #264]	; (8005eb0 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005daa:	f000 80fa 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8005dae:	f7fe fa3f 	bl	8004230 <HAL_GetTick>
 8005db2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db4:	e004      	b.n	8005dc0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fe fa3b 	bl	8004230 <HAL_GetTick>
 8005dba:	1b00      	subs	r0, r0, r4
 8005dbc:	2802      	cmp	r0, #2
 8005dbe:	d85b      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	019b      	lsls	r3, r3, #6
 8005dc4:	d4f7      	bmi.n	8005db6 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8005dc6:	2000      	movs	r0, #0
}
 8005dc8:	b002      	add	sp, #8
 8005dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005dce:	6852      	ldr	r2, [r2, #4]
 8005dd0:	03d6      	lsls	r6, r2, #15
 8005dd2:	f53f af79 	bmi.w	8005cc8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd6:	4a35      	ldr	r2, [pc, #212]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	0795      	lsls	r5, r2, #30
 8005ddc:	d530      	bpl.n	8005e40 <HAL_RCC_OscConfig+0x214>
 8005dde:	6922      	ldr	r2, [r4, #16]
 8005de0:	2a01      	cmp	r2, #1
 8005de2:	d02d      	beq.n	8005e40 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8005de4:	2001      	movs	r0, #1
}
 8005de6:	b002      	add	sp, #8
 8005de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dee:	4e2f      	ldr	r6, [pc, #188]	; (8005eac <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8005df0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005df4:	f7fe fa1c 	bl	8004230 <HAL_GetTick>
 8005df8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dfa:	e004      	b.n	8005e06 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfc:	f7fe fa18 	bl	8004230 <HAL_GetTick>
 8005e00:	1b40      	subs	r0, r0, r5
 8005e02:	2802      	cmp	r0, #2
 8005e04:	d838      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e08:	079f      	lsls	r7, r3, #30
 8005e0a:	d4f7      	bmi.n	8005dfc <HAL_RCC_OscConfig+0x1d0>
 8005e0c:	e7bd      	b.n	8005d8a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8005e10:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e16:	61da      	str	r2, [r3, #28]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8005e22:	e777      	b.n	8005d14 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e24:	684a      	ldr	r2, [r1, #4]
 8005e26:	03d0      	lsls	r0, r2, #15
 8005e28:	f57f af17 	bpl.w	8005c5a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	0391      	lsls	r1, r2, #14
 8005e32:	f57f af3b 	bpl.w	8005cac <HAL_RCC_OscConfig+0x80>
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	f47f af37 	bne.w	8005cac <HAL_RCC_OscConfig+0x80>
 8005e3e:	e7d1      	b.n	8005de4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	491a      	ldr	r1, [pc, #104]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005e42:	6960      	ldr	r0, [r4, #20]
 8005e44:	680a      	ldr	r2, [r1, #0]
 8005e46:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005e4a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005e4e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e50:	071a      	lsls	r2, r3, #28
 8005e52:	f57f af58 	bpl.w	8005d06 <HAL_RCC_OscConfig+0xda>
 8005e56:	e776      	b.n	8005d46 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005e60:	f7fe f9e6 	bl	8004230 <HAL_GetTick>
 8005e64:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	6833      	ldr	r3, [r6, #0]
 8005e68:	05da      	lsls	r2, r3, #23
 8005e6a:	f53f af58 	bmi.w	8005d1e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6e:	f7fe f9df 	bl	8004230 <HAL_GetTick>
 8005e72:	1bc0      	subs	r0, r0, r7
 8005e74:	2864      	cmp	r0, #100	; 0x64
 8005e76:	d9f6      	bls.n	8005e66 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8005e78:	2003      	movs	r0, #3
}
 8005e7a:	b002      	add	sp, #8
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e80:	4d0a      	ldr	r5, [pc, #40]	; (8005eac <HAL_RCC_OscConfig+0x280>)
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e92:	f7fe f9cd 	bl	8004230 <HAL_GetTick>
 8005e96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e98:	e004      	b.n	8005ea4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9a:	f7fe f9c9 	bl	8004230 <HAL_GetTick>
 8005e9e:	1b80      	subs	r0, r0, r6
 8005ea0:	2864      	cmp	r0, #100	; 0x64
 8005ea2:	d8e9      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	039b      	lsls	r3, r3, #14
 8005ea8:	d4f7      	bmi.n	8005e9a <HAL_RCC_OscConfig+0x26e>
 8005eaa:	e6fe      	b.n	8005caa <HAL_RCC_OscConfig+0x7e>
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	42420000 	.word	0x42420000
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	20000004 	.word	0x20000004
 8005ebc:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec0:	4e50      	ldr	r6, [pc, #320]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec6:	6a33      	ldr	r3, [r6, #32]
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	6233      	str	r3, [r6, #32]
 8005ece:	6a33      	ldr	r3, [r6, #32]
 8005ed0:	f023 0304 	bic.w	r3, r3, #4
 8005ed4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8005ed6:	f7fe f9ab 	bl	8004230 <HAL_GetTick>
 8005eda:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005edc:	e004      	b.n	8005ee8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fe f9a7 	bl	8004230 <HAL_GetTick>
 8005ee2:	1bc0      	subs	r0, r0, r7
 8005ee4:	4540      	cmp	r0, r8
 8005ee6:	d8c7      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee8:	6a33      	ldr	r3, [r6, #32]
 8005eea:	0798      	lsls	r0, r3, #30
 8005eec:	d4f7      	bmi.n	8005ede <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	f43f af4e 	beq.w	8005d90 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef4:	4a43      	ldr	r2, [pc, #268]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
 8005ef6:	69d3      	ldr	r3, [r2, #28]
 8005ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005efc:	61d3      	str	r3, [r2, #28]
 8005efe:	e747      	b.n	8005d90 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005f00:	4a41      	ldr	r2, [pc, #260]	; (8006008 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	4e40      	ldr	r6, [pc, #256]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8005f04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f06:	f7fe f993 	bl	8004230 <HAL_GetTick>
 8005f0a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0c:	e004      	b.n	8005f18 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fe f98f 	bl	8004230 <HAL_GetTick>
 8005f12:	1b40      	subs	r0, r0, r5
 8005f14:	2802      	cmp	r0, #2
 8005f16:	d8af      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	0799      	lsls	r1, r3, #30
 8005f1c:	d4f7      	bmi.n	8005f0e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	e6ef      	b.n	8005d02 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f22:	4a38      	ldr	r2, [pc, #224]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
 8005f24:	6a13      	ldr	r3, [r2, #32]
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8005f2c:	f7fe f980 	bl	8004230 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005f34:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f36:	4f33      	ldr	r7, [pc, #204]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
 8005f38:	e004      	b.n	8005f44 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3a:	f7fe f979 	bl	8004230 <HAL_GetTick>
 8005f3e:	1b80      	subs	r0, r0, r6
 8005f40:	4540      	cmp	r0, r8
 8005f42:	d899      	bhi.n	8005e78 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	079b      	lsls	r3, r3, #30
 8005f48:	d5f7      	bpl.n	8005f3a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8005f4a:	2d00      	cmp	r5, #0
 8005f4c:	f43f af20 	beq.w	8005d90 <HAL_RCC_OscConfig+0x164>
 8005f50:	e7d0      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f52:	2801      	cmp	r0, #1
 8005f54:	f43f af38 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8005f58:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	6a22      	ldr	r2, [r4, #32]
 8005f5c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005f60:	4291      	cmp	r1, r2
 8005f62:	f47f af3f 	bne.w	8005de4 <HAL_RCC_OscConfig+0x1b8>
 8005f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8005f6c:	1a18      	subs	r0, r3, r0
 8005f6e:	bf18      	it	ne
 8005f70:	2001      	movne	r0, #1
 8005f72:	e729      	b.n	8005dc8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e67f      	b.n	8005c8e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8e:	f042 0204 	orr.w	r2, r2, #4
 8005f92:	621a      	str	r2, [r3, #32]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	621a      	str	r2, [r3, #32]
 8005f9c:	e7c6      	b.n	8005f2c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
}
 8005fa0:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005fa2:	f7fe f945 	bl	8004230 <HAL_GetTick>
 8005fa6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa8:	e005      	b.n	8005fb6 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fe f941 	bl	8004230 <HAL_GetTick>
 8005fae:	1b80      	subs	r0, r0, r6
 8005fb0:	2802      	cmp	r0, #2
 8005fb2:	f63f af61 	bhi.w	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	0199      	lsls	r1, r3, #6
 8005fba:	d4f6      	bmi.n	8005faa <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005fbc:	6a23      	ldr	r3, [r4, #32]
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fc4:	686a      	ldr	r2, [r5, #4]
 8005fc6:	68a1      	ldr	r1, [r4, #8]
 8005fc8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005fd0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd2:	4d0c      	ldr	r5, [pc, #48]	; (8006004 <HAL_RCC_OscConfig+0x3d8>)
 8005fd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fd6:	686a      	ldr	r2, [r5, #4]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8005fde:	490a      	ldr	r1, [pc, #40]	; (8006008 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005fe4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005fe6:	f7fe f923 	bl	8004230 <HAL_GetTick>
 8005fea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fec:	e005      	b.n	8005ffa <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fee:	f7fe f91f 	bl	8004230 <HAL_GetTick>
 8005ff2:	1b00      	subs	r0, r0, r4
 8005ff4:	2802      	cmp	r0, #2
 8005ff6:	f63f af3f 	bhi.w	8005e78 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	d5f6      	bpl.n	8005fee <HAL_RCC_OscConfig+0x3c2>
 8006000:	e6e1      	b.n	8005dc6 <HAL_RCC_OscConfig+0x19a>
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000
 8006008:	42420000 	.word	0x42420000

0800600c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800600c:	2800      	cmp	r0, #0
 800600e:	f000 80b1 	beq.w	8006174 <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006012:	4a5e      	ldr	r2, [pc, #376]	; (800618c <HAL_RCC_ClockConfig+0x180>)
{
 8006014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	4604      	mov	r4, r0
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	428b      	cmp	r3, r1
 8006022:	460d      	mov	r5, r1
{
 8006024:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006026:	d20d      	bcs.n	8006044 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006028:	6813      	ldr	r3, [r2, #0]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	430b      	orrs	r3, r1
 8006030:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006032:	6813      	ldr	r3, [r2, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	428b      	cmp	r3, r1
 800603a:	d003      	beq.n	8006044 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
}
 800603e:	b006      	add	sp, #24
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079e      	lsls	r6, r3, #30
 8006048:	d514      	bpl.n	8006074 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604a:	0758      	lsls	r0, r3, #29
 800604c:	d504      	bpl.n	8006058 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800604e:	4950      	ldr	r1, [pc, #320]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 8006050:	684a      	ldr	r2, [r1, #4]
 8006052:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006056:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006058:	0719      	lsls	r1, r3, #28
 800605a:	d504      	bpl.n	8006066 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800605c:	494c      	ldr	r1, [pc, #304]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 800605e:	684a      	ldr	r2, [r1, #4]
 8006060:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8006064:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006066:	494a      	ldr	r1, [pc, #296]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 8006068:	68a0      	ldr	r0, [r4, #8]
 800606a:	684a      	ldr	r2, [r1, #4]
 800606c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006070:	4302      	orrs	r2, r0
 8006072:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	d520      	bpl.n	80060ba <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006078:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b45      	ldr	r3, [pc, #276]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006080:	d07a      	beq.n	8006178 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006082:	2a02      	cmp	r2, #2
 8006084:	d073      	beq.n	800616e <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006086:	079e      	lsls	r6, r3, #30
 8006088:	d5d8      	bpl.n	800603c <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800608a:	4e41      	ldr	r6, [pc, #260]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006090:	6873      	ldr	r3, [r6, #4]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	4313      	orrs	r3, r2
 8006098:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800609a:	f7fe f8c9 	bl	8004230 <HAL_GetTick>
 800609e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a0:	e004      	b.n	80060ac <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a2:	f7fe f8c5 	bl	8004230 <HAL_GetTick>
 80060a6:	1bc0      	subs	r0, r0, r7
 80060a8:	4540      	cmp	r0, r8
 80060aa:	d868      	bhi.n	800617e <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ac:	6873      	ldr	r3, [r6, #4]
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80060b8:	d1f3      	bne.n	80060a2 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060ba:	4a34      	ldr	r2, [pc, #208]	; (800618c <HAL_RCC_ClockConfig+0x180>)
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	42ab      	cmp	r3, r5
 80060c4:	d909      	bls.n	80060da <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	432b      	orrs	r3, r5
 80060ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d0:	6813      	ldr	r3, [r2, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	42ab      	cmp	r3, r5
 80060d8:	d1b0      	bne.n	800603c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	0758      	lsls	r0, r3, #29
 80060de:	d506      	bpl.n	80060ee <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e0:	492b      	ldr	r1, [pc, #172]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 80060e2:	68e0      	ldr	r0, [r4, #12]
 80060e4:	684a      	ldr	r2, [r1, #4]
 80060e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060ea:	4302      	orrs	r2, r0
 80060ec:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ee:	0719      	lsls	r1, r3, #28
 80060f0:	d507      	bpl.n	8006102 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060f2:	4a27      	ldr	r2, [pc, #156]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 80060f4:	6921      	ldr	r1, [r4, #16]
 80060f6:	6853      	ldr	r3, [r2, #4]
 80060f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80060fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006100:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006102:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <HAL_RCC_ClockConfig+0x188>)
 8006108:	ad06      	add	r5, sp, #24
 800610a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800610c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8006110:	491f      	ldr	r1, [pc, #124]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006112:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8006116:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006118:	f002 030c 	and.w	r3, r2, #12
 800611c:	2b08      	cmp	r3, #8
 800611e:	d011      	beq.n	8006144 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8006120:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_RCC_ClockConfig+0x184>)
 8006124:	481d      	ldr	r0, [pc, #116]	; (800619c <HAL_RCC_ClockConfig+0x190>)
 8006126:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8006128:	491d      	ldr	r1, [pc, #116]	; (80061a0 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800612a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800612e:	5c80      	ldrb	r0, [r0, r2]
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <HAL_RCC_ClockConfig+0x198>)
 8006132:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8006134:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006136:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8006138:	f7fe f838 	bl	80041ac <HAL_InitTick>
  return HAL_OK;
 800613c:	2000      	movs	r0, #0
}
 800613e:	b006      	add	sp, #24
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006144:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8006148:	3318      	adds	r3, #24
 800614a:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800614c:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800614e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006152:	d516      	bpl.n	8006182 <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006154:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006156:	4910      	ldr	r1, [pc, #64]	; (8006198 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006158:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800615c:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006160:	3218      	adds	r2, #24
 8006162:	446a      	add	r2, sp
 8006164:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006168:	fbb3 f3f2 	udiv	r3, r3, r2
 800616c:	e7d9      	b.n	8006122 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616e:	019f      	lsls	r7, r3, #6
 8006170:	d48b      	bmi.n	800608a <HAL_RCC_ClockConfig+0x7e>
 8006172:	e763      	b.n	800603c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8006174:	2001      	movs	r0, #1
}
 8006176:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006178:	039b      	lsls	r3, r3, #14
 800617a:	d486      	bmi.n	800608a <HAL_RCC_ClockConfig+0x7e>
 800617c:	e75e      	b.n	800603c <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 800617e:	2003      	movs	r0, #3
 8006180:	e75d      	b.n	800603e <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <HAL_RCC_ClockConfig+0x19c>)
 8006184:	fb02 f303 	mul.w	r3, r2, r3
 8006188:	e7cb      	b.n	8006122 <HAL_RCC_ClockConfig+0x116>
 800618a:	bf00      	nop
 800618c:	40022000 	.word	0x40022000
 8006190:	40021000 	.word	0x40021000
 8006194:	0801dc6c 	.word	0x0801dc6c
 8006198:	007a1200 	.word	0x007a1200
 800619c:	0801dc54 	.word	0x0801dc54
 80061a0:	2000000c 	.word	0x2000000c
 80061a4:	20000004 	.word	0x20000004
 80061a8:	003d0900 	.word	0x003d0900

080061ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4905      	ldr	r1, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80061b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80061b8:	5ccb      	ldrb	r3, [r1, r3]
 80061ba:	6810      	ldr	r0, [r2, #0]
}
 80061bc:	40d8      	lsrs	r0, r3
 80061be:	4770      	bx	lr
 80061c0:	40021000 	.word	0x40021000
 80061c4:	20000004 	.word	0x20000004
 80061c8:	0801dc64 	.word	0x0801dc64

080061cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80061ce:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4905      	ldr	r1, [pc, #20]	; (80061e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80061d4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80061d8:	5ccb      	ldrb	r3, [r1, r3]
 80061da:	6810      	ldr	r0, [r2, #0]
}
 80061dc:	40d8      	lsrs	r0, r3
 80061de:	4770      	bx	lr
 80061e0:	40021000 	.word	0x40021000
 80061e4:	20000004 	.word	0x20000004
 80061e8:	0801dc64 	.word	0x0801dc64

080061ec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d066      	beq.n	80062be <HAL_TIM_Base_Init+0xd2>
{
 80061f0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061f6:	4604      	mov	r4, r0
 80061f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d045      	beq.n	800628c <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006202:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	492f      	ldr	r1, [pc, #188]	; (80062c4 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800620c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620e:	d042      	beq.n	8006296 <HAL_TIM_Base_Init+0xaa>
 8006210:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006214:	d011      	beq.n	800623a <HAL_TIM_Base_Init+0x4e>
 8006216:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800621a:	428a      	cmp	r2, r1
 800621c:	d00d      	beq.n	800623a <HAL_TIM_Base_Init+0x4e>
 800621e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006222:	428a      	cmp	r2, r1
 8006224:	d009      	beq.n	800623a <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006226:	69a0      	ldr	r0, [r4, #24]
 8006228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622c:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8006230:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006232:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006236:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	e010      	b.n	800625c <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 800623a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006240:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006242:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800624a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006252:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006254:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006256:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006258:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800625a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800625c:	2301      	movs	r3, #1
 800625e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006268:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800626c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006270:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006284:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006288:	2000      	movs	r0, #0
}
 800628a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800628c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006290:	f7fd fe02 	bl	8003e98 <HAL_TIM_Base_MspInit>
 8006294:	e7b4      	b.n	8006200 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8006296:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800629e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a6:	69a1      	ldr	r1, [r4, #24]
 80062a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ac:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80062ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b0:	68e3      	ldr	r3, [r4, #12]
 80062b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80062b8:	6963      	ldr	r3, [r4, #20]
 80062ba:	6313      	str	r3, [r2, #48]	; 0x30
 80062bc:	e7ce      	b.n	800625c <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 80062be:	2001      	movs	r0, #1
}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40012c00 	.word	0x40012c00

080062c8 <HAL_TIM_PWM_MspInit>:
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d066      	beq.n	800639e <HAL_TIM_PWM_Init+0xd2>
{
 80062d0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80062d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062d6:	4604      	mov	r4, r0
 80062d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d045      	beq.n	800636c <HAL_TIM_PWM_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e4:	492f      	ldr	r1, [pc, #188]	; (80063a4 <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80062ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ee:	d042      	beq.n	8006376 <HAL_TIM_PWM_Init+0xaa>
 80062f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80062f4:	d011      	beq.n	800631a <HAL_TIM_PWM_Init+0x4e>
 80062f6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80062fa:	428a      	cmp	r2, r1
 80062fc:	d00d      	beq.n	800631a <HAL_TIM_PWM_Init+0x4e>
 80062fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006302:	428a      	cmp	r2, r1
 8006304:	d009      	beq.n	800631a <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006306:	69a0      	ldr	r0, [r4, #24]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800630e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8006310:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006312:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006314:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006316:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006318:	e010      	b.n	800633c <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 800631a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006320:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006322:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006330:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006332:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006334:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006336:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006338:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800633a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800633c:	2301      	movs	r3, #1
 800633e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006340:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006348:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800634c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006350:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006364:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006368:	2000      	movs	r0, #0
}
 800636a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800636c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006370:	f7ff ffaa 	bl	80062c8 <HAL_TIM_PWM_MspInit>
 8006374:	e7b4      	b.n	80062e0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8006376:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800637e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006384:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006386:	69a1      	ldr	r1, [r4, #24]
 8006388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800638e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006390:	68e3      	ldr	r3, [r4, #12]
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	6963      	ldr	r3, [r4, #20]
 800639a:	6313      	str	r3, [r2, #48]	; 0x30
 800639c:	e7ce      	b.n	800633c <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 800639e:	2001      	movs	r0, #1
}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00

080063a8 <HAL_TIM_PWM_Start>:
 80063a8:	bb41      	cbnz	r1, 80063fc <HAL_TIM_PWM_Start+0x54>
 80063aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d138      	bne.n	8006424 <HAL_TIM_PWM_Start+0x7c>
 80063b2:	2302      	movs	r3, #2
 80063b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80063b8:	2201      	movs	r2, #1
 80063ba:	6803      	ldr	r3, [r0, #0]
 80063bc:	f001 011f 	and.w	r1, r1, #31
 80063c0:	6a18      	ldr	r0, [r3, #32]
 80063c2:	fa02 f101 	lsl.w	r1, r2, r1
 80063c6:	ea20 0001 	bic.w	r0, r0, r1
 80063ca:	b410      	push	{r4}
 80063cc:	6218      	str	r0, [r3, #32]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	4c21      	ldr	r4, [pc, #132]	; (8006458 <HAL_TIM_PWM_Start+0xb0>)
 80063d2:	4311      	orrs	r1, r2
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	6219      	str	r1, [r3, #32]
 80063d8:	d026      	beq.n	8006428 <HAL_TIM_PWM_Start+0x80>
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d027      	beq.n	8006430 <HAL_TIM_PWM_Start+0x88>
 80063e0:	4a1e      	ldr	r2, [pc, #120]	; (800645c <HAL_TIM_PWM_Start+0xb4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d024      	beq.n	8006430 <HAL_TIM_PWM_Start+0x88>
 80063e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d020      	beq.n	8006430 <HAL_TIM_PWM_Start+0x88>
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	2000      	movs	r0, #0
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	bc10      	pop	{r4}
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	4770      	bx	lr
 80063fc:	2904      	cmp	r1, #4
 80063fe:	d01f      	beq.n	8006440 <HAL_TIM_PWM_Start+0x98>
 8006400:	2908      	cmp	r1, #8
 8006402:	d00b      	beq.n	800641c <HAL_TIM_PWM_Start+0x74>
 8006404:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10b      	bne.n	8006424 <HAL_TIM_PWM_Start+0x7c>
 800640c:	2904      	cmp	r1, #4
 800640e:	d01b      	beq.n	8006448 <HAL_TIM_PWM_Start+0xa0>
 8006410:	2908      	cmp	r1, #8
 8006412:	d01d      	beq.n	8006450 <HAL_TIM_PWM_Start+0xa8>
 8006414:	2302      	movs	r3, #2
 8006416:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800641a:	e7cd      	b.n	80063b8 <HAL_TIM_PWM_Start+0x10>
 800641c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006420:	2b01      	cmp	r3, #1
 8006422:	d015      	beq.n	8006450 <HAL_TIM_PWM_Start+0xa8>
 8006424:	2001      	movs	r0, #1
 8006426:	4770      	bx	lr
 8006428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	f002 0207 	and.w	r2, r2, #7
 8006436:	2a06      	cmp	r2, #6
 8006438:	d1d9      	bne.n	80063ee <HAL_TIM_PWM_Start+0x46>
 800643a:	2000      	movs	r0, #0
 800643c:	bc10      	pop	{r4}
 800643e:	4770      	bx	lr
 8006440:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006444:	2b01      	cmp	r3, #1
 8006446:	d1ed      	bne.n	8006424 <HAL_TIM_PWM_Start+0x7c>
 8006448:	2302      	movs	r3, #2
 800644a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800644e:	e7b3      	b.n	80063b8 <HAL_TIM_PWM_Start+0x10>
 8006450:	2302      	movs	r3, #2
 8006452:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006456:	e7af      	b.n	80063b8 <HAL_TIM_PWM_Start+0x10>
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400

08006460 <HAL_TIM_PWM_ConfigChannel>:
{
 8006460:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006462:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8006466:	2801      	cmp	r0, #1
 8006468:	f000 80c0 	beq.w	80065ec <HAL_TIM_PWM_ConfigChannel+0x18c>
 800646c:	2001      	movs	r0, #1
{
 800646e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006470:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8006474:	2a0c      	cmp	r2, #12
 8006476:	d82d      	bhi.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x74>
 8006478:	e8df f002 	tbb	[pc, r2]
 800647c:	2c2c2c07 	.word	0x2c2c2c07
 8006480:	2c2c2c60 	.word	0x2c2c2c60
 8006484:	2c2c2c8d 	.word	0x2c2c2c8d
 8006488:	32          	.byte	0x32
 8006489:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800648a:	681a      	ldr	r2, [r3, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	6a10      	ldr	r0, [r2, #32]
 8006490:	f020 0001 	bic.w	r0, r0, #1
 8006494:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8006496:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006498:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800649a:	6994      	ldr	r4, [r2, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649c:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	4334      	orrs	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a6:	688e      	ldr	r6, [r1, #8]
 80064a8:	4330      	orrs	r0, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064aa:	4e6a      	ldr	r6, [pc, #424]	; (8006654 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80064ac:	42b2      	cmp	r2, r6
 80064ae:	f000 809f 	beq.w	80065f0 <HAL_TIM_PWM_ConfigChannel+0x190>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b2:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064b4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80064b6:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b8:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80064ba:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064be:	6990      	ldr	r0, [r2, #24]
 80064c0:	f040 0008 	orr.w	r0, r0, #8
 80064c4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064c6:	6990      	ldr	r0, [r2, #24]
 80064c8:	f020 0004 	bic.w	r0, r0, #4
 80064cc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ce:	6991      	ldr	r1, [r2, #24]
 80064d0:	4321      	orrs	r1, r4
 80064d2:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80064da:	4610      	mov	r0, r2
}
 80064dc:	bcf0      	pop	{r4, r5, r6, r7}
 80064de:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064e0:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e4:	6a10      	ldr	r0, [r2, #32]
 80064e6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80064ea:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80064ec:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80064ee:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80064f0:	69d4      	ldr	r4, [r2, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f2:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fa:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064fe:	688e      	ldr	r6, [r1, #8]
 8006500:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	4e53      	ldr	r6, [pc, #332]	; (8006654 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8006506:	42b2      	cmp	r2, r6
 8006508:	f000 808e 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650c:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800650e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006510:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006512:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8006514:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006516:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006518:	69d0      	ldr	r0, [r2, #28]
 800651a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800651e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006520:	69d0      	ldr	r0, [r2, #28]
 8006522:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8006526:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006528:	69d1      	ldr	r1, [r2, #28]
 800652a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800652e:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 8006536:	4610      	mov	r0, r2
}
 8006538:	bcf0      	pop	{r4, r5, r6, r7}
 800653a:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800653c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006540:	6a10      	ldr	r0, [r2, #32]
 8006542:	f020 0010 	bic.w	r0, r0, #16
 8006546:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8006548:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800654a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800654c:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800654e:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006552:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006556:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800655a:	688e      	ldr	r6, [r1, #8]
 800655c:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	4e3c      	ldr	r6, [pc, #240]	; (8006654 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8006562:	42b2      	cmp	r2, r6
 8006564:	d051      	beq.n	800660a <HAL_TIM_PWM_ConfigChannel+0x1aa>
  TIMx->CR2 = tmpcr2;
 8006566:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8006568:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800656a:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800656c:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 800656e:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006570:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006572:	6990      	ldr	r0, [r2, #24]
 8006574:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006578:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800657a:	6990      	ldr	r0, [r2, #24]
 800657c:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8006580:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006582:	6991      	ldr	r1, [r2, #24]
 8006584:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8006588:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 8006590:	4610      	mov	r0, r2
}
 8006592:	bcf0      	pop	{r4, r5, r6, r7}
 8006594:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006598:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800659a:	6a10      	ldr	r0, [r2, #32]
 800659c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80065a0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80065a2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80065a4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80065a6:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80065a8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065ac:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b2:	688e      	ldr	r6, [r1, #8]
 80065b4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065b8:	4e26      	ldr	r6, [pc, #152]	; (8006654 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80065ba:	42b2      	cmp	r2, r6
 80065bc:	d03a      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CR2 = tmpcr2;
 80065be:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80065c0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80065c2:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c4:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 80065c6:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80065c8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ca:	69d0      	ldr	r0, [r2, #28]
 80065cc:	f040 0008 	orr.w	r0, r0, #8
 80065d0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065d2:	69d0      	ldr	r0, [r2, #28]
 80065d4:	f020 0004 	bic.w	r0, r0, #4
 80065d8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065da:	69d1      	ldr	r1, [r2, #28]
 80065dc:	4321      	orrs	r1, r4
 80065de:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80065e6:	4610      	mov	r0, r2
}
 80065e8:	bcf0      	pop	{r4, r5, r6, r7}
 80065ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80065ec:	2002      	movs	r0, #2
}
 80065ee:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80065f0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80065f2:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 80065f6:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065f8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fc:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8006600:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8006602:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006606:	4335      	orrs	r5, r6
 8006608:	e753      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800660a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800660c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006610:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006614:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006618:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800661c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800661e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006622:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8006626:	e79e      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006628:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800662e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8006632:	e76b      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006634:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006636:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800663a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800663e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006642:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8006646:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8006648:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006650:	e7b5      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x15e>
 8006652:	bf00      	nop
 8006654:	40012c00 	.word	0x40012c00

08006658 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006658:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800665c:	2a01      	cmp	r2, #1
 800665e:	d075      	beq.n	800674c <HAL_TIM_ConfigClockSource+0xf4>
{
 8006660:	b430      	push	{r4, r5}
 8006662:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006664:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006666:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8006668:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800666a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006672:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006674:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006676:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800667a:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800667e:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006680:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006682:	d065      	beq.n	8006750 <HAL_TIM_ConfigClockSource+0xf8>
 8006684:	d831      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x92>
 8006686:	2a40      	cmp	r2, #64	; 0x40
 8006688:	d048      	beq.n	800671c <HAL_TIM_ConfigClockSource+0xc4>
 800668a:	d921      	bls.n	80066d0 <HAL_TIM_ConfigClockSource+0x78>
 800668c:	2a50      	cmp	r2, #80	; 0x50
 800668e:	d116      	bne.n	80066be <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006690:	684c      	ldr	r4, [r1, #4]
 8006692:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006694:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006696:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800669a:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669c:	6a04      	ldr	r4, [r0, #32]
 800669e:	f024 0401 	bic.w	r4, r4, #1
 80066a2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a4:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066aa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80066b0:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b2:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066b8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066bc:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 80066be:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 80066ca:	4610      	mov	r0, r2
}
 80066cc:	bc30      	pop	{r4, r5}
 80066ce:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80066d0:	2a20      	cmp	r2, #32
 80066d2:	d002      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x82>
 80066d4:	d91e      	bls.n	8006714 <HAL_TIM_ConfigClockSource+0xbc>
 80066d6:	2a30      	cmp	r2, #48	; 0x30
 80066d8:	d1f1      	bne.n	80066be <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 80066da:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066dc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e0:	430a      	orrs	r2, r1
 80066e2:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80066e6:	6082      	str	r2, [r0, #8]
}
 80066e8:	e7e9      	b.n	80066be <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80066ea:	2a70      	cmp	r2, #112	; 0x70
 80066ec:	d049      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x12a>
 80066ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80066f2:	d1e4      	bne.n	80066be <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80066f8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fa:	432a      	orrs	r2, r5
 80066fc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fe:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006702:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006706:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006708:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670a:	6882      	ldr	r2, [r0, #8]
 800670c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006710:	6082      	str	r2, [r0, #8]
      break;
 8006712:	e7d4      	b.n	80066be <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006714:	f032 0110 	bics.w	r1, r2, #16
 8006718:	d1d1      	bne.n	80066be <HAL_TIM_ConfigClockSource+0x66>
 800671a:	e7de      	b.n	80066da <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671c:	684c      	ldr	r4, [r1, #4]
 800671e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006720:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006722:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006726:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006728:	6a04      	ldr	r4, [r0, #32]
 800672a:	f024 0401 	bic.w	r4, r4, #1
 800672e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006730:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006732:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006736:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800673a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800673c:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800673e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006740:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006744:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006748:	6082      	str	r2, [r0, #8]
}
 800674a:	e7b8      	b.n	80066be <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800674c:	2002      	movs	r0, #2
}
 800674e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006750:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006752:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006754:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006758:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675c:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800675e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006762:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8006766:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006768:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800676a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800676e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006772:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006774:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800677e:	6082      	str	r2, [r0, #8]
}
 8006780:	e79d      	b.n	80066be <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006782:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006786:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006788:	432a      	orrs	r2, r5
 800678a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678c:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006794:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8006796:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006798:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800679a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800679e:	6082      	str	r2, [r0, #8]
      break;
 80067a0:	e78d      	b.n	80066be <HAL_TIM_ConfigClockSource+0x66>
 80067a2:	bf00      	nop

080067a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80067a8:	2a01      	cmp	r2, #1
 80067aa:	d027      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80067ac:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ae:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b0:	681a      	ldr	r2, [r3, #0]
{
 80067b2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80067b8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ba:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067bc:	4d10      	ldr	r5, [pc, #64]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80067be:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c2:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80067c6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80067c8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ca:	d009      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80067cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80067d0:	d006      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80067d2:	480c      	ldr	r0, [pc, #48]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80067d4:	4282      	cmp	r2, r0
 80067d6:	d003      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80067d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80067dc:	4282      	cmp	r2, r0
 80067de:	d104      	bne.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80067ea:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80067f2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f6:	4610      	mov	r0, r2
}
 80067f8:	bc30      	pop	{r4, r5}
 80067fa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80067fc:	2002      	movs	r0, #2
}
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40000400 	.word	0x40000400

08006808 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006808:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d023      	beq.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 8006810:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006812:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006816:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006820:	6848      	ldr	r0, [r1, #4]
 8006822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006826:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006828:	6808      	ldr	r0, [r1, #0]
 800682a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800682e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006830:	6908      	ldr	r0, [r1, #16]
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8006836:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006838:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800683a:	694c      	ldr	r4, [r1, #20]
 800683c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006840:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006842:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8006844:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800684a:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 800684c:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800684e:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c

  return HAL_OK;
 8006852:	4660      	mov	r0, ip
}
 8006854:	bc10      	pop	{r4}
 8006856:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006858:	2002      	movs	r0, #2
}
 800685a:	4770      	bx	lr

0800685c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800685c:	2800      	cmp	r0, #0
 800685e:	d064      	beq.n	800692a <HAL_UART_Init+0xce>
{
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006866:	4604      	mov	r4, r0
 8006868:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800686c:	2b00      	cmp	r3, #0
 800686e:	d054      	beq.n	800691a <HAL_UART_Init+0xbe>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006870:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006876:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8006878:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800687a:	4302      	orrs	r2, r0
 800687c:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800687e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006882:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 8006884:	68d8      	ldr	r0, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006886:	69a6      	ldr	r6, [r4, #24]
  __HAL_UART_DISABLE(huart);
 8006888:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800688c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800688e:	6919      	ldr	r1, [r3, #16]


  if(huart->Instance == USART1)
 8006890:	4d27      	ldr	r5, [pc, #156]	; (8006930 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006892:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006896:	4339      	orrs	r1, r7
 8006898:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800689a:	68d9      	ldr	r1, [r3, #12]
  if(huart->Instance == USART1)
 800689c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 800689e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80068a2:	f021 010c 	bic.w	r1, r1, #12
 80068a6:	ea42 0201 	orr.w	r2, r2, r1
 80068aa:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ac:	695a      	ldr	r2, [r3, #20]
 80068ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068b2:	ea42 0206 	orr.w	r2, r2, r6
 80068b6:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80068b8:	d034      	beq.n	8006924 <HAL_UART_Init+0xc8>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068ba:	f7ff fc77 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80068ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ce:	2664      	movs	r6, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80068d2:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d6:	4817      	ldr	r0, [pc, #92]	; (8006934 <HAL_UART_Init+0xd8>)
 80068d8:	6821      	ldr	r1, [r4, #0]
 80068da:	fba0 7203 	umull	r7, r2, r0, r3
 80068de:	0952      	lsrs	r2, r2, #5
 80068e0:	fb06 3312 	mls	r3, r6, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	fba0 0303 	umull	r0, r3, r0, r3
 80068ec:	0112      	lsls	r2, r2, #4
 80068ee:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80068f2:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f4:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 80068f6:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80068fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fe:	694b      	ldr	r3, [r1, #20]
 8006900:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006904:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8006906:	68cb      	ldr	r3, [r1, #12]
 8006908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800690c:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690e:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006910:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
}
 8006918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800691a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800691e:	f7fd fb1d 	bl	8003f5c <HAL_UART_MspInit>
 8006922:	e7a5      	b.n	8006870 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8006924:	f7ff fc52 	bl	80061cc <HAL_RCC_GetPCLK2Freq>
 8006928:	e7c9      	b.n	80068be <HAL_UART_Init+0x62>
    return HAL_ERROR;
 800692a:	2001      	movs	r0, #1
}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40013800 	.word	0x40013800
 8006934:	51eb851f 	.word	0x51eb851f

08006938 <HAL_UART_Transmit>:
{
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800693e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006942:	2b20      	cmp	r3, #32
 8006944:	d168      	bne.n	8006a18 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8006946:	4688      	mov	r8, r1
 8006948:	2900      	cmp	r1, #0
 800694a:	d040      	beq.n	80069ce <HAL_UART_Transmit+0x96>
 800694c:	4617      	mov	r7, r2
 800694e:	2a00      	cmp	r2, #0
 8006950:	d03d      	beq.n	80069ce <HAL_UART_Transmit+0x96>
    __HAL_LOCK(huart);
 8006952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006956:	4604      	mov	r4, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d05d      	beq.n	8006a18 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800695e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 8006964:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800696c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8006970:	f7fd fc5e 	bl	8004230 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006976:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800697c:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800697e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	d04d      	beq.n	8006a1e <HAL_UART_Transmit+0xe6>
    __HAL_UNLOCK(huart);
 8006982:	2300      	movs	r3, #0
 8006984:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8006988:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d058      	beq.n	8006a42 <HAL_UART_Transmit+0x10a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	1c69      	adds	r1, r5, #1
 8006994:	d11e      	bne.n	80069d4 <HAL_UART_Transmit+0x9c>
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	0612      	lsls	r2, r2, #24
 800699a:	d5fc      	bpl.n	8006996 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 800699c:	f1b8 0f00 	cmp.w	r8, #0
 80069a0:	d035      	beq.n	8006a0e <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a2:	f818 2b01 	ldrb.w	r2, [r8], #1
 80069a6:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80069a8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80069aa:	3a01      	subs	r2, #1
 80069ac:	b292      	uxth	r2, r2
 80069ae:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069b0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80069b2:	b292      	uxth	r2, r2
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d1ec      	bne.n	8006992 <HAL_UART_Transmit+0x5a>
 80069b8:	1c68      	adds	r0, r5, #1
 80069ba:	d136      	bne.n	8006a2a <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	0651      	lsls	r1, r2, #25
 80069c0:	d5fc      	bpl.n	80069bc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80069c2:	2320      	movs	r3, #32
 80069c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80069c8:	2000      	movs	r0, #0
}
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80069ce:	2001      	movs	r0, #1
}
 80069d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	0617      	lsls	r7, r2, #24
 80069d8:	d4e0      	bmi.n	800699c <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069da:	b12d      	cbz	r5, 80069e8 <HAL_UART_Transmit+0xb0>
 80069dc:	f7fd fc28 	bl	8004230 <HAL_GetTick>
 80069e0:	1b80      	subs	r0, r0, r6
 80069e2:	4285      	cmp	r5, r0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e4:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069e6:	d2d4      	bcs.n	8006992 <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 80069e8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80069ea:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ec:	68da      	ldr	r2, [r3, #12]
      return HAL_TIMEOUT;
 80069ee:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80069fe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8006a02:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8006a06:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0e:	f839 2b02 	ldrh.w	r2, [r9], #2
 8006a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a16:	e7c6      	b.n	80069a6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8006a18:	2002      	movs	r0, #2
}
 8006a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ae      	bne.n	8006982 <HAL_UART_Transmit+0x4a>
 8006a24:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006a26:	4698      	mov	r8, r3
 8006a28:	e7ab      	b.n	8006982 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	0652      	lsls	r2, r2, #25
 8006a2e:	d4c8      	bmi.n	80069c2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	d0d9      	beq.n	80069e8 <HAL_UART_Transmit+0xb0>
 8006a34:	f7fd fbfc 	bl	8004230 <HAL_GetTick>
 8006a38:	1b83      	subs	r3, r0, r6
 8006a3a:	429d      	cmp	r5, r3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3c:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a3e:	d2bb      	bcs.n	80069b8 <HAL_UART_Transmit+0x80>
 8006a40:	e7d2      	b.n	80069e8 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	e7b8      	b.n	80069b8 <HAL_UART_Transmit+0x80>
 8006a46:	bf00      	nop

08006a48 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d122      	bne.n	8006a96 <HAL_UART_Receive_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8006a50:	b1f9      	cbz	r1, 8006a92 <HAL_UART_Receive_IT+0x4a>
 8006a52:	b1f2      	cbz	r2, 8006a92 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d01c      	beq.n	8006a96 <HAL_UART_Receive_IT+0x4e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a5e:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8006a62:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a64:	6801      	ldr	r1, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8006a68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8006a6c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a70:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 8006a74:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a76:	68ca      	ldr	r2, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006a78:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7e:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a80:	694b      	ldr	r3, [r1, #20]
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a88:	68cb      	ldr	r3, [r1, #12]
 8006a8a:	f043 0320 	orr.w	r3, r3, #32
 8006a8e:	60cb      	str	r3, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006a90:	4770      	bx	lr
      return HAL_ERROR;
 8006a92:	2001      	movs	r0, #1
 8006a94:	4770      	bx	lr
    return HAL_BUSY;
 8006a96:	2002      	movs	r0, #2
}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop

08006a9c <HAL_UART_Transmit_DMA>:
{
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8006aa4:	2820      	cmp	r0, #32
 8006aa6:	d12d      	bne.n	8006b04 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	b351      	cbz	r1, 8006b00 <HAL_UART_Transmit_DMA+0x64>
 8006aaa:	b34a      	cbz	r2, 8006b00 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 8006aac:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8006ab0:	2801      	cmp	r0, #1
 8006ab2:	d027      	beq.n	8006b04 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8006ab6:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aba:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006abe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006ac0:	4f11      	ldr	r7, [pc, #68]	; (8006b08 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ac2:	4e12      	ldr	r6, [pc, #72]	; (8006b0c <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 8006ac4:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8006ac6:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8006aca:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 8006acc:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad0:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ad8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006adc:	4e0c      	ldr	r6, [pc, #48]	; (8006b10 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ade:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 8006ae0:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ae2:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ae4:	f7fd fc64 	bl	80043b0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aec:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8006aee:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006af0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8006af2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006afc:	615a      	str	r2, [r3, #20]
}
 8006afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006b00:	2001      	movs	r0, #1
}
 8006b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006b04:	2002      	movs	r0, #2
}
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b59 	.word	0x08006b59

08006b14 <HAL_UART_TxCpltCallback>:
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <UART_DMATransmitCplt>:
{
 8006b18:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b1a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f013 0320 	ands.w	r3, r3, #32
 8006b24:	d10a      	bne.n	8006b3c <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b26:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8006b28:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b2a:	6953      	ldr	r3, [r2, #20]
 8006b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b30:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b32:	68d3      	ldr	r3, [r2, #12]
 8006b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b38:	60d3      	str	r3, [r2, #12]
}
 8006b3a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006b3c:	f7ff ffea 	bl	8006b14 <HAL_UART_TxCpltCallback>
}
 8006b40:	bd08      	pop	{r3, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_UART_TxHalfCpltCallback>:
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <UART_DMATxHalfCplt>:
{
 8006b48:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006b4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006b4c:	f7ff fffa 	bl	8006b44 <HAL_UART_TxHalfCpltCallback>
}
 8006b50:	bd08      	pop	{r3, pc}
 8006b52:	bf00      	nop

08006b54 <HAL_UART_ErrorCallback>:
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <UART_DMAError>:
{
 8006b58:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006b64:	2a21      	cmp	r2, #33	; 0x21
 8006b66:	d00b      	beq.n	8006b80 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b68:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b6a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006b6e:	2a22      	cmp	r2, #34	; 0x22
 8006b70:	d016      	beq.n	8006ba0 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b74:	f043 0310 	orr.w	r3, r3, #16
 8006b78:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8006b7a:	f7ff ffeb 	bl	8006b54 <HAL_UART_ErrorCallback>
}
 8006b7e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b80:	0609      	lsls	r1, r1, #24
 8006b82:	d5f1      	bpl.n	8006b68 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8006b84:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8006b86:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8006b88:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b90:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b98:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006b9c:	2a22      	cmp	r2, #34	; 0x22
 8006b9e:	d1e8      	bne.n	8006b72 <UART_DMAError+0x1a>
 8006ba0:	064a      	lsls	r2, r1, #25
 8006ba2:	d5e6      	bpl.n	8006b72 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006bba:	2a01      	cmp	r2, #1
 8006bbc:	d103      	bne.n	8006bc6 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	f022 0210 	bic.w	r2, r2, #16
 8006bc4:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006bca:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006bd0:	e7cf      	b.n	8006b72 <UART_DMAError+0x1a>
 8006bd2:	bf00      	nop

08006bd4 <atoi>:
 8006bd4:	220a      	movs	r2, #10
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	f001 bd6e 	b.w	80086b8 <strtol>

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000010 	.word	0x20000010

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	2600      	movs	r6, #0
 8006bec:	4d0c      	ldr	r5, [pc, #48]	; (8006c20 <__libc_init_array+0x38>)
 8006bee:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bf0:	1b64      	subs	r4, r4, r5
 8006bf2:	10a4      	asrs	r4, r4, #2
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	f005 fbc0 	bl	800c37c <_init>
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	4d0a      	ldr	r5, [pc, #40]	; (8006c28 <__libc_init_array+0x40>)
 8006c00:	4c0a      	ldr	r4, [pc, #40]	; (8006c2c <__libc_init_array+0x44>)
 8006c02:	1b64      	subs	r4, r4, r5
 8006c04:	10a4      	asrs	r4, r4, #2
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	0801e158 	.word	0x0801e158
 8006c24:	0801e158 	.word	0x0801e158
 8006c28:	0801e158 	.word	0x0801e158
 8006c2c:	0801e15c 	.word	0x0801e15c

08006c30 <memmove>:
 8006c30:	4288      	cmp	r0, r1
 8006c32:	b510      	push	{r4, lr}
 8006c34:	eb01 0402 	add.w	r4, r1, r2
 8006c38:	d902      	bls.n	8006c40 <memmove+0x10>
 8006c3a:	4284      	cmp	r4, r0
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	d807      	bhi.n	8006c50 <memmove+0x20>
 8006c40:	1e43      	subs	r3, r0, #1
 8006c42:	42a1      	cmp	r1, r4
 8006c44:	d008      	beq.n	8006c58 <memmove+0x28>
 8006c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c4e:	e7f8      	b.n	8006c42 <memmove+0x12>
 8006c50:	4601      	mov	r1, r0
 8006c52:	4402      	add	r2, r0
 8006c54:	428a      	cmp	r2, r1
 8006c56:	d100      	bne.n	8006c5a <memmove+0x2a>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c62:	e7f7      	b.n	8006c54 <memmove+0x24>

08006c64 <memset>:
 8006c64:	4603      	mov	r3, r0
 8006c66:	4402      	add	r2, r0
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <memset+0xa>
 8006c6c:	4770      	bx	lr
 8006c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c72:	e7f9      	b.n	8006c68 <memset+0x4>

08006c74 <__cvt>:
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7a:	461f      	mov	r7, r3
 8006c7c:	bfbb      	ittet	lt
 8006c7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	461f      	movlt	r7, r3
 8006c84:	2300      	movge	r3, #0
 8006c86:	232d      	movlt	r3, #45	; 0x2d
 8006c88:	b088      	sub	sp, #32
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c90:	7013      	strb	r3, [r2, #0]
 8006c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c98:	f023 0820 	bic.w	r8, r3, #32
 8006c9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ca0:	d005      	beq.n	8006cae <__cvt+0x3a>
 8006ca2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ca6:	d100      	bne.n	8006caa <__cvt+0x36>
 8006ca8:	3501      	adds	r5, #1
 8006caa:	2302      	movs	r3, #2
 8006cac:	e000      	b.n	8006cb0 <__cvt+0x3c>
 8006cae:	2303      	movs	r3, #3
 8006cb0:	aa07      	add	r2, sp, #28
 8006cb2:	9204      	str	r2, [sp, #16]
 8006cb4:	aa06      	add	r2, sp, #24
 8006cb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cba:	e9cd 3500 	strd	r3, r5, [sp]
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	f001 fd91 	bl	80087e8 <_dtoa_r>
 8006cc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cca:	4606      	mov	r6, r0
 8006ccc:	d102      	bne.n	8006cd4 <__cvt+0x60>
 8006cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cd0:	07db      	lsls	r3, r3, #31
 8006cd2:	d522      	bpl.n	8006d1a <__cvt+0xa6>
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd8:	eb06 0905 	add.w	r9, r6, r5
 8006cdc:	d110      	bne.n	8006d00 <__cvt+0x8c>
 8006cde:	7833      	ldrb	r3, [r6, #0]
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d10a      	bne.n	8006cfa <__cvt+0x86>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf0:	b918      	cbnz	r0, 8006cfa <__cvt+0x86>
 8006cf2:	f1c5 0501 	rsb	r5, r5, #1
 8006cf6:	f8ca 5000 	str.w	r5, [sl]
 8006cfa:	f8da 3000 	ldr.w	r3, [sl]
 8006cfe:	4499      	add	r9, r3
 8006d00:	2200      	movs	r2, #0
 8006d02:	2300      	movs	r3, #0
 8006d04:	4620      	mov	r0, r4
 8006d06:	4639      	mov	r1, r7
 8006d08:	f7f9 fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8006d0c:	b108      	cbz	r0, 8006d12 <__cvt+0x9e>
 8006d0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d12:	2230      	movs	r2, #48	; 0x30
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	454b      	cmp	r3, r9
 8006d18:	d307      	bcc.n	8006d2a <__cvt+0xb6>
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d20:	1b9b      	subs	r3, r3, r6
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	b008      	add	sp, #32
 8006d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	9107      	str	r1, [sp, #28]
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e7f0      	b.n	8006d14 <__cvt+0xa0>

08006d32 <__exponent>:
 8006d32:	4603      	mov	r3, r0
 8006d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d36:	2900      	cmp	r1, #0
 8006d38:	f803 2b02 	strb.w	r2, [r3], #2
 8006d3c:	bfb6      	itet	lt
 8006d3e:	222d      	movlt	r2, #45	; 0x2d
 8006d40:	222b      	movge	r2, #43	; 0x2b
 8006d42:	4249      	neglt	r1, r1
 8006d44:	2909      	cmp	r1, #9
 8006d46:	7042      	strb	r2, [r0, #1]
 8006d48:	dd2b      	ble.n	8006da2 <__exponent+0x70>
 8006d4a:	f10d 0407 	add.w	r4, sp, #7
 8006d4e:	46a4      	mov	ip, r4
 8006d50:	270a      	movs	r7, #10
 8006d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d56:	460a      	mov	r2, r1
 8006d58:	46a6      	mov	lr, r4
 8006d5a:	fb07 1516 	mls	r5, r7, r6, r1
 8006d5e:	2a63      	cmp	r2, #99	; 0x63
 8006d60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006d64:	4631      	mov	r1, r6
 8006d66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d6e:	dcf0      	bgt.n	8006d52 <__exponent+0x20>
 8006d70:	3130      	adds	r1, #48	; 0x30
 8006d72:	f1ae 0502 	sub.w	r5, lr, #2
 8006d76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	1c44      	adds	r4, r0, #1
 8006d7e:	4561      	cmp	r1, ip
 8006d80:	d30a      	bcc.n	8006d98 <__exponent+0x66>
 8006d82:	f10d 0209 	add.w	r2, sp, #9
 8006d86:	eba2 020e 	sub.w	r2, r2, lr
 8006d8a:	4565      	cmp	r5, ip
 8006d8c:	bf88      	it	hi
 8006d8e:	2200      	movhi	r2, #0
 8006d90:	4413      	add	r3, r2
 8006d92:	1a18      	subs	r0, r3, r0
 8006d94:	b003      	add	sp, #12
 8006d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006da0:	e7ed      	b.n	8006d7e <__exponent+0x4c>
 8006da2:	2330      	movs	r3, #48	; 0x30
 8006da4:	3130      	adds	r1, #48	; 0x30
 8006da6:	7083      	strb	r3, [r0, #2]
 8006da8:	70c1      	strb	r1, [r0, #3]
 8006daa:	1d03      	adds	r3, r0, #4
 8006dac:	e7f1      	b.n	8006d92 <__exponent+0x60>
	...

08006db0 <_printf_float>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	b091      	sub	sp, #68	; 0x44
 8006db6:	460c      	mov	r4, r1
 8006db8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	f002 fe65 	bl	8009a90 <_localeconv_r>
 8006dc6:	6803      	ldr	r3, [r0, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	9309      	str	r3, [sp, #36]	; 0x24
 8006dcc:	f7f9 f9c0 	bl	8000150 <strlen>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	930e      	str	r3, [sp, #56]	; 0x38
 8006dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd8:	900a      	str	r0, [sp, #40]	; 0x28
 8006dda:	3307      	adds	r3, #7
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	f103 0208 	add.w	r2, r3, #8
 8006de4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006de8:	f8d4 b000 	ldr.w	fp, [r4]
 8006dec:	f8c8 2000 	str.w	r2, [r8]
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006df8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006dfc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	4640      	mov	r0, r8
 8006e08:	4b9c      	ldr	r3, [pc, #624]	; (800707c <_printf_float+0x2cc>)
 8006e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e0c:	f7f9 fdfe 	bl	8000a0c <__aeabi_dcmpun>
 8006e10:	bb70      	cbnz	r0, 8006e70 <_printf_float+0xc0>
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	4640      	mov	r0, r8
 8006e18:	4b98      	ldr	r3, [pc, #608]	; (800707c <_printf_float+0x2cc>)
 8006e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e1c:	f7f9 fdd8 	bl	80009d0 <__aeabi_dcmple>
 8006e20:	bb30      	cbnz	r0, 8006e70 <_printf_float+0xc0>
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	4651      	mov	r1, sl
 8006e2a:	f7f9 fdc7 	bl	80009bc <__aeabi_dcmplt>
 8006e2e:	b110      	cbz	r0, 8006e36 <_printf_float+0x86>
 8006e30:	232d      	movs	r3, #45	; 0x2d
 8006e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e36:	4b92      	ldr	r3, [pc, #584]	; (8007080 <_printf_float+0x2d0>)
 8006e38:	4892      	ldr	r0, [pc, #584]	; (8007084 <_printf_float+0x2d4>)
 8006e3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e3e:	bf94      	ite	ls
 8006e40:	4698      	movls	r8, r3
 8006e42:	4680      	movhi	r8, r0
 8006e44:	2303      	movs	r3, #3
 8006e46:	f04f 0a00 	mov.w	sl, #0
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	f02b 0304 	bic.w	r3, fp, #4
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	4633      	mov	r3, r6
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	9700      	str	r7, [sp, #0]
 8006e5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006e5c:	f000 f9d4 	bl	8007208 <_printf_common>
 8006e60:	3001      	adds	r0, #1
 8006e62:	f040 8090 	bne.w	8006f86 <_printf_float+0x1d6>
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	b011      	add	sp, #68	; 0x44
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	4642      	mov	r2, r8
 8006e72:	4653      	mov	r3, sl
 8006e74:	4640      	mov	r0, r8
 8006e76:	4651      	mov	r1, sl
 8006e78:	f7f9 fdc8 	bl	8000a0c <__aeabi_dcmpun>
 8006e7c:	b148      	cbz	r0, 8006e92 <_printf_float+0xe2>
 8006e7e:	f1ba 0f00 	cmp.w	sl, #0
 8006e82:	bfb8      	it	lt
 8006e84:	232d      	movlt	r3, #45	; 0x2d
 8006e86:	4880      	ldr	r0, [pc, #512]	; (8007088 <_printf_float+0x2d8>)
 8006e88:	bfb8      	it	lt
 8006e8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e8e:	4b7f      	ldr	r3, [pc, #508]	; (800708c <_printf_float+0x2dc>)
 8006e90:	e7d3      	b.n	8006e3a <_printf_float+0x8a>
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	d142      	bne.n	8006f22 <_printf_float+0x172>
 8006e9c:	2306      	movs	r3, #6
 8006e9e:	6063      	str	r3, [r4, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	9206      	str	r2, [sp, #24]
 8006ea4:	aa0e      	add	r2, sp, #56	; 0x38
 8006ea6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006eaa:	aa0d      	add	r2, sp, #52	; 0x34
 8006eac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006eb0:	9203      	str	r2, [sp, #12]
 8006eb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006eb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006eba:	6023      	str	r3, [r4, #0]
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	4653      	mov	r3, sl
 8006ec6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ec8:	f7ff fed4 	bl	8006c74 <__cvt>
 8006ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ece:	4680      	mov	r8, r0
 8006ed0:	2947      	cmp	r1, #71	; 0x47
 8006ed2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ed4:	d108      	bne.n	8006ee8 <_printf_float+0x138>
 8006ed6:	1cc8      	adds	r0, r1, #3
 8006ed8:	db02      	blt.n	8006ee0 <_printf_float+0x130>
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	4299      	cmp	r1, r3
 8006ede:	dd40      	ble.n	8006f62 <_printf_float+0x1b2>
 8006ee0:	f1a9 0902 	sub.w	r9, r9, #2
 8006ee4:	fa5f f989 	uxtb.w	r9, r9
 8006ee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006eec:	d81f      	bhi.n	8006f2e <_printf_float+0x17e>
 8006eee:	464a      	mov	r2, r9
 8006ef0:	3901      	subs	r1, #1
 8006ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ef6:	910d      	str	r1, [sp, #52]	; 0x34
 8006ef8:	f7ff ff1b 	bl	8006d32 <__exponent>
 8006efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006efe:	4682      	mov	sl, r0
 8006f00:	1813      	adds	r3, r2, r0
 8006f02:	2a01      	cmp	r2, #1
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	dc02      	bgt.n	8006f0e <_printf_float+0x15e>
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	07d2      	lsls	r2, r2, #31
 8006f0c:	d501      	bpl.n	8006f12 <_printf_float+0x162>
 8006f0e:	3301      	adds	r3, #1
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d09b      	beq.n	8006e52 <_printf_float+0xa2>
 8006f1a:	232d      	movs	r3, #45	; 0x2d
 8006f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f20:	e797      	b.n	8006e52 <_printf_float+0xa2>
 8006f22:	2947      	cmp	r1, #71	; 0x47
 8006f24:	d1bc      	bne.n	8006ea0 <_printf_float+0xf0>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1ba      	bne.n	8006ea0 <_printf_float+0xf0>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e7b7      	b.n	8006e9e <_printf_float+0xee>
 8006f2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f32:	d118      	bne.n	8006f66 <_printf_float+0x1b6>
 8006f34:	2900      	cmp	r1, #0
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	dd0b      	ble.n	8006f52 <_printf_float+0x1a2>
 8006f3a:	6121      	str	r1, [r4, #16]
 8006f3c:	b913      	cbnz	r3, 8006f44 <_printf_float+0x194>
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	07d0      	lsls	r0, r2, #31
 8006f42:	d502      	bpl.n	8006f4a <_printf_float+0x19a>
 8006f44:	3301      	adds	r3, #1
 8006f46:	440b      	add	r3, r1
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	f04f 0a00 	mov.w	sl, #0
 8006f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f50:	e7df      	b.n	8006f12 <_printf_float+0x162>
 8006f52:	b913      	cbnz	r3, 8006f5a <_printf_float+0x1aa>
 8006f54:	6822      	ldr	r2, [r4, #0]
 8006f56:	07d2      	lsls	r2, r2, #31
 8006f58:	d501      	bpl.n	8006f5e <_printf_float+0x1ae>
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	e7f4      	b.n	8006f48 <_printf_float+0x198>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7f2      	b.n	8006f48 <_printf_float+0x198>
 8006f62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	db05      	blt.n	8006f78 <_printf_float+0x1c8>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	6121      	str	r1, [r4, #16]
 8006f70:	07d8      	lsls	r0, r3, #31
 8006f72:	d5ea      	bpl.n	8006f4a <_printf_float+0x19a>
 8006f74:	1c4b      	adds	r3, r1, #1
 8006f76:	e7e7      	b.n	8006f48 <_printf_float+0x198>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	bfcc      	ite	gt
 8006f7c:	2201      	movgt	r2, #1
 8006f7e:	f1c1 0202 	rsble	r2, r1, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	e7e0      	b.n	8006f48 <_printf_float+0x198>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	055a      	lsls	r2, r3, #21
 8006f8a:	d407      	bmi.n	8006f9c <_printf_float+0x1ec>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	4642      	mov	r2, r8
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	d12b      	bne.n	8006ff2 <_printf_float+0x242>
 8006f9a:	e764      	b.n	8006e66 <_printf_float+0xb6>
 8006f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fa0:	f240 80dd 	bls.w	800715e <_printf_float+0x3ae>
 8006fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2300      	movs	r3, #0
 8006fac:	f7f9 fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d033      	beq.n	800701c <_printf_float+0x26c>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	4a35      	ldr	r2, [pc, #212]	; (8007090 <_printf_float+0x2e0>)
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f43f af51 	beq.w	8006e66 <_printf_float+0xb6>
 8006fc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	db02      	blt.n	8006fd2 <_printf_float+0x222>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	07d8      	lsls	r0, r3, #31
 8006fd0:	d50f      	bpl.n	8006ff2 <_printf_float+0x242>
 8006fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f af42 	beq.w	8006e66 <_printf_float+0xb6>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	f104 091a 	add.w	r9, r4, #26
 8006fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4543      	cmp	r3, r8
 8006ff0:	dc09      	bgt.n	8007006 <_printf_float+0x256>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	079b      	lsls	r3, r3, #30
 8006ff6:	f100 8102 	bmi.w	80071fe <_printf_float+0x44e>
 8006ffa:	68e0      	ldr	r0, [r4, #12]
 8006ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ffe:	4298      	cmp	r0, r3
 8007000:	bfb8      	it	lt
 8007002:	4618      	movlt	r0, r3
 8007004:	e731      	b.n	8006e6a <_printf_float+0xba>
 8007006:	2301      	movs	r3, #1
 8007008:	464a      	mov	r2, r9
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f af28 	beq.w	8006e66 <_printf_float+0xb6>
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	e7e6      	b.n	8006fea <_printf_float+0x23a>
 800701c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800701e:	2b00      	cmp	r3, #0
 8007020:	dc38      	bgt.n	8007094 <_printf_float+0x2e4>
 8007022:	2301      	movs	r3, #1
 8007024:	4631      	mov	r1, r6
 8007026:	4628      	mov	r0, r5
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <_printf_float+0x2e0>)
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f af1a 	beq.w	8006e66 <_printf_float+0xb6>
 8007032:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007036:	4313      	orrs	r3, r2
 8007038:	d102      	bne.n	8007040 <_printf_float+0x290>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	07d9      	lsls	r1, r3, #31
 800703e:	d5d8      	bpl.n	8006ff2 <_printf_float+0x242>
 8007040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af0b 	beq.w	8006e66 <_printf_float+0xb6>
 8007050:	f04f 0900 	mov.w	r9, #0
 8007054:	f104 0a1a 	add.w	sl, r4, #26
 8007058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800705a:	425b      	negs	r3, r3
 800705c:	454b      	cmp	r3, r9
 800705e:	dc01      	bgt.n	8007064 <_printf_float+0x2b4>
 8007060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007062:	e794      	b.n	8006f8e <_printf_float+0x1de>
 8007064:	2301      	movs	r3, #1
 8007066:	4652      	mov	r2, sl
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f aef9 	beq.w	8006e66 <_printf_float+0xb6>
 8007074:	f109 0901 	add.w	r9, r9, #1
 8007078:	e7ee      	b.n	8007058 <_printf_float+0x2a8>
 800707a:	bf00      	nop
 800707c:	7fefffff 	.word	0x7fefffff
 8007080:	0801dc84 	.word	0x0801dc84
 8007084:	0801dc88 	.word	0x0801dc88
 8007088:	0801dc90 	.word	0x0801dc90
 800708c:	0801dc8c 	.word	0x0801dc8c
 8007090:	0801dc94 	.word	0x0801dc94
 8007094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007098:	429a      	cmp	r2, r3
 800709a:	bfa8      	it	ge
 800709c:	461a      	movge	r2, r3
 800709e:	2a00      	cmp	r2, #0
 80070a0:	4691      	mov	r9, r2
 80070a2:	dc37      	bgt.n	8007114 <_printf_float+0x364>
 80070a4:	f04f 0b00 	mov.w	fp, #0
 80070a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ac:	f104 021a 	add.w	r2, r4, #26
 80070b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070b4:	ebaa 0309 	sub.w	r3, sl, r9
 80070b8:	455b      	cmp	r3, fp
 80070ba:	dc33      	bgt.n	8007124 <_printf_float+0x374>
 80070bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070c0:	429a      	cmp	r2, r3
 80070c2:	db3b      	blt.n	800713c <_printf_float+0x38c>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07da      	lsls	r2, r3, #31
 80070c8:	d438      	bmi.n	800713c <_printf_float+0x38c>
 80070ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070ce:	eba3 020a 	sub.w	r2, r3, sl
 80070d2:	eba3 0901 	sub.w	r9, r3, r1
 80070d6:	4591      	cmp	r9, r2
 80070d8:	bfa8      	it	ge
 80070da:	4691      	movge	r9, r2
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	dc34      	bgt.n	800714c <_printf_float+0x39c>
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ea:	f104 0a1a 	add.w	sl, r4, #26
 80070ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	eba3 0309 	sub.w	r3, r3, r9
 80070f8:	4543      	cmp	r3, r8
 80070fa:	f77f af7a 	ble.w	8006ff2 <_printf_float+0x242>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f aeac 	beq.w	8006e66 <_printf_float+0xb6>
 800710e:	f108 0801 	add.w	r8, r8, #1
 8007112:	e7ec      	b.n	80070ee <_printf_float+0x33e>
 8007114:	4613      	mov	r3, r2
 8007116:	4631      	mov	r1, r6
 8007118:	4642      	mov	r2, r8
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	d1c0      	bne.n	80070a4 <_printf_float+0x2f4>
 8007122:	e6a0      	b.n	8006e66 <_printf_float+0xb6>
 8007124:	2301      	movs	r3, #1
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	920b      	str	r2, [sp, #44]	; 0x2c
 800712c:	47b8      	blx	r7
 800712e:	3001      	adds	r0, #1
 8007130:	f43f ae99 	beq.w	8006e66 <_printf_float+0xb6>
 8007134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007136:	f10b 0b01 	add.w	fp, fp, #1
 800713a:	e7b9      	b.n	80070b0 <_printf_float+0x300>
 800713c:	4631      	mov	r1, r6
 800713e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	d1bf      	bne.n	80070ca <_printf_float+0x31a>
 800714a:	e68c      	b.n	8006e66 <_printf_float+0xb6>
 800714c:	464b      	mov	r3, r9
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	eb08 020a 	add.w	r2, r8, sl
 8007156:	47b8      	blx	r7
 8007158:	3001      	adds	r0, #1
 800715a:	d1c2      	bne.n	80070e2 <_printf_float+0x332>
 800715c:	e683      	b.n	8006e66 <_printf_float+0xb6>
 800715e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007160:	2a01      	cmp	r2, #1
 8007162:	dc01      	bgt.n	8007168 <_printf_float+0x3b8>
 8007164:	07db      	lsls	r3, r3, #31
 8007166:	d537      	bpl.n	80071d8 <_printf_float+0x428>
 8007168:	2301      	movs	r3, #1
 800716a:	4642      	mov	r2, r8
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae77 	beq.w	8006e66 <_printf_float+0xb6>
 8007178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f ae6f 	beq.w	8006e66 <_printf_float+0xb6>
 8007188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	f7f9 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007194:	b9d8      	cbnz	r0, 80071ce <_printf_float+0x41e>
 8007196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007198:	f108 0201 	add.w	r2, r8, #1
 800719c:	3b01      	subs	r3, #1
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	d10e      	bne.n	80071c6 <_printf_float+0x416>
 80071a8:	e65d      	b.n	8006e66 <_printf_float+0xb6>
 80071aa:	2301      	movs	r3, #1
 80071ac:	464a      	mov	r2, r9
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f ae56 	beq.w	8006e66 <_printf_float+0xb6>
 80071ba:	f108 0801 	add.w	r8, r8, #1
 80071be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c0:	3b01      	subs	r3, #1
 80071c2:	4543      	cmp	r3, r8
 80071c4:	dcf1      	bgt.n	80071aa <_printf_float+0x3fa>
 80071c6:	4653      	mov	r3, sl
 80071c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071cc:	e6e0      	b.n	8006f90 <_printf_float+0x1e0>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	f104 091a 	add.w	r9, r4, #26
 80071d6:	e7f2      	b.n	80071be <_printf_float+0x40e>
 80071d8:	2301      	movs	r3, #1
 80071da:	4642      	mov	r2, r8
 80071dc:	e7df      	b.n	800719e <_printf_float+0x3ee>
 80071de:	2301      	movs	r3, #1
 80071e0:	464a      	mov	r2, r9
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f ae3c 	beq.w	8006e66 <_printf_float+0xb6>
 80071ee:	f108 0801 	add.w	r8, r8, #1
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071f6:	1a5b      	subs	r3, r3, r1
 80071f8:	4543      	cmp	r3, r8
 80071fa:	dcf0      	bgt.n	80071de <_printf_float+0x42e>
 80071fc:	e6fd      	b.n	8006ffa <_printf_float+0x24a>
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	f104 0919 	add.w	r9, r4, #25
 8007206:	e7f4      	b.n	80071f2 <_printf_float+0x442>

08007208 <_printf_common>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	4616      	mov	r6, r2
 800720e:	4699      	mov	r9, r3
 8007210:	688a      	ldr	r2, [r1, #8]
 8007212:	690b      	ldr	r3, [r1, #16]
 8007214:	4607      	mov	r7, r0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfb8      	it	lt
 800721a:	4613      	movlt	r3, r2
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007222:	460c      	mov	r4, r1
 8007224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007228:	b10a      	cbz	r2, 800722e <_printf_common+0x26>
 800722a:	3301      	adds	r3, #1
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	0699      	lsls	r1, r3, #26
 8007232:	bf42      	ittt	mi
 8007234:	6833      	ldrmi	r3, [r6, #0]
 8007236:	3302      	addmi	r3, #2
 8007238:	6033      	strmi	r3, [r6, #0]
 800723a:	6825      	ldr	r5, [r4, #0]
 800723c:	f015 0506 	ands.w	r5, r5, #6
 8007240:	d106      	bne.n	8007250 <_printf_common+0x48>
 8007242:	f104 0a19 	add.w	sl, r4, #25
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	6832      	ldr	r2, [r6, #0]
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	42ab      	cmp	r3, r5
 800724e:	dc28      	bgt.n	80072a2 <_printf_common+0x9a>
 8007250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007254:	1e13      	subs	r3, r2, #0
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	bf18      	it	ne
 800725a:	2301      	movne	r3, #1
 800725c:	0692      	lsls	r2, r2, #26
 800725e:	d42d      	bmi.n	80072bc <_printf_common+0xb4>
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007268:	47c0      	blx	r8
 800726a:	3001      	adds	r0, #1
 800726c:	d020      	beq.n	80072b0 <_printf_common+0xa8>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	68e5      	ldr	r5, [r4, #12]
 8007272:	f003 0306 	and.w	r3, r3, #6
 8007276:	2b04      	cmp	r3, #4
 8007278:	bf18      	it	ne
 800727a:	2500      	movne	r5, #0
 800727c:	6832      	ldr	r2, [r6, #0]
 800727e:	f04f 0600 	mov.w	r6, #0
 8007282:	68a3      	ldr	r3, [r4, #8]
 8007284:	bf08      	it	eq
 8007286:	1aad      	subeq	r5, r5, r2
 8007288:	6922      	ldr	r2, [r4, #16]
 800728a:	bf08      	it	eq
 800728c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007290:	4293      	cmp	r3, r2
 8007292:	bfc4      	itt	gt
 8007294:	1a9b      	subgt	r3, r3, r2
 8007296:	18ed      	addgt	r5, r5, r3
 8007298:	341a      	adds	r4, #26
 800729a:	42b5      	cmp	r5, r6
 800729c:	d11a      	bne.n	80072d4 <_printf_common+0xcc>
 800729e:	2000      	movs	r0, #0
 80072a0:	e008      	b.n	80072b4 <_printf_common+0xac>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4652      	mov	r2, sl
 80072a6:	4649      	mov	r1, r9
 80072a8:	4638      	mov	r0, r7
 80072aa:	47c0      	blx	r8
 80072ac:	3001      	adds	r0, #1
 80072ae:	d103      	bne.n	80072b8 <_printf_common+0xb0>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b8:	3501      	adds	r5, #1
 80072ba:	e7c4      	b.n	8007246 <_printf_common+0x3e>
 80072bc:	2030      	movs	r0, #48	; 0x30
 80072be:	18e1      	adds	r1, r4, r3
 80072c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ca:	4422      	add	r2, r4
 80072cc:	3302      	adds	r3, #2
 80072ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072d2:	e7c5      	b.n	8007260 <_printf_common+0x58>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4622      	mov	r2, r4
 80072d8:	4649      	mov	r1, r9
 80072da:	4638      	mov	r0, r7
 80072dc:	47c0      	blx	r8
 80072de:	3001      	adds	r0, #1
 80072e0:	d0e6      	beq.n	80072b0 <_printf_common+0xa8>
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7d9      	b.n	800729a <_printf_common+0x92>
	...

080072e8 <_printf_i>:
 80072e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	7e0f      	ldrb	r7, [r1, #24]
 80072ee:	4691      	mov	r9, r2
 80072f0:	2f78      	cmp	r7, #120	; 0x78
 80072f2:	4680      	mov	r8, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	469a      	mov	sl, r3
 80072f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072fe:	d807      	bhi.n	8007310 <_printf_i+0x28>
 8007300:	2f62      	cmp	r7, #98	; 0x62
 8007302:	d80a      	bhi.n	800731a <_printf_i+0x32>
 8007304:	2f00      	cmp	r7, #0
 8007306:	f000 80d9 	beq.w	80074bc <_printf_i+0x1d4>
 800730a:	2f58      	cmp	r7, #88	; 0x58
 800730c:	f000 80a4 	beq.w	8007458 <_printf_i+0x170>
 8007310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007318:	e03a      	b.n	8007390 <_printf_i+0xa8>
 800731a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800731e:	2b15      	cmp	r3, #21
 8007320:	d8f6      	bhi.n	8007310 <_printf_i+0x28>
 8007322:	a101      	add	r1, pc, #4	; (adr r1, 8007328 <_printf_i+0x40>)
 8007324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007328:	08007381 	.word	0x08007381
 800732c:	08007395 	.word	0x08007395
 8007330:	08007311 	.word	0x08007311
 8007334:	08007311 	.word	0x08007311
 8007338:	08007311 	.word	0x08007311
 800733c:	08007311 	.word	0x08007311
 8007340:	08007395 	.word	0x08007395
 8007344:	08007311 	.word	0x08007311
 8007348:	08007311 	.word	0x08007311
 800734c:	08007311 	.word	0x08007311
 8007350:	08007311 	.word	0x08007311
 8007354:	080074a3 	.word	0x080074a3
 8007358:	080073c5 	.word	0x080073c5
 800735c:	08007485 	.word	0x08007485
 8007360:	08007311 	.word	0x08007311
 8007364:	08007311 	.word	0x08007311
 8007368:	080074c5 	.word	0x080074c5
 800736c:	08007311 	.word	0x08007311
 8007370:	080073c5 	.word	0x080073c5
 8007374:	08007311 	.word	0x08007311
 8007378:	08007311 	.word	0x08007311
 800737c:	0800748d 	.word	0x0800748d
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	1d1a      	adds	r2, r3, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	602a      	str	r2, [r5, #0]
 8007388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800738c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007390:	2301      	movs	r3, #1
 8007392:	e0a4      	b.n	80074de <_printf_i+0x1f6>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	6829      	ldr	r1, [r5, #0]
 8007398:	0606      	lsls	r6, r0, #24
 800739a:	f101 0304 	add.w	r3, r1, #4
 800739e:	d50a      	bpl.n	80073b6 <_printf_i+0xce>
 80073a0:	680e      	ldr	r6, [r1, #0]
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	da03      	bge.n	80073b0 <_printf_i+0xc8>
 80073a8:	232d      	movs	r3, #45	; 0x2d
 80073aa:	4276      	negs	r6, r6
 80073ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b0:	230a      	movs	r3, #10
 80073b2:	485e      	ldr	r0, [pc, #376]	; (800752c <_printf_i+0x244>)
 80073b4:	e019      	b.n	80073ea <_printf_i+0x102>
 80073b6:	680e      	ldr	r6, [r1, #0]
 80073b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	bf18      	it	ne
 80073c0:	b236      	sxthne	r6, r6
 80073c2:	e7ef      	b.n	80073a4 <_printf_i+0xbc>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	1d19      	adds	r1, r3, #4
 80073ca:	6029      	str	r1, [r5, #0]
 80073cc:	0601      	lsls	r1, r0, #24
 80073ce:	d501      	bpl.n	80073d4 <_printf_i+0xec>
 80073d0:	681e      	ldr	r6, [r3, #0]
 80073d2:	e002      	b.n	80073da <_printf_i+0xf2>
 80073d4:	0646      	lsls	r6, r0, #25
 80073d6:	d5fb      	bpl.n	80073d0 <_printf_i+0xe8>
 80073d8:	881e      	ldrh	r6, [r3, #0]
 80073da:	2f6f      	cmp	r7, #111	; 0x6f
 80073dc:	bf0c      	ite	eq
 80073de:	2308      	moveq	r3, #8
 80073e0:	230a      	movne	r3, #10
 80073e2:	4852      	ldr	r0, [pc, #328]	; (800752c <_printf_i+0x244>)
 80073e4:	2100      	movs	r1, #0
 80073e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ea:	6865      	ldr	r5, [r4, #4]
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	bfa8      	it	ge
 80073f0:	6821      	ldrge	r1, [r4, #0]
 80073f2:	60a5      	str	r5, [r4, #8]
 80073f4:	bfa4      	itt	ge
 80073f6:	f021 0104 	bicge.w	r1, r1, #4
 80073fa:	6021      	strge	r1, [r4, #0]
 80073fc:	b90e      	cbnz	r6, 8007402 <_printf_i+0x11a>
 80073fe:	2d00      	cmp	r5, #0
 8007400:	d04d      	beq.n	800749e <_printf_i+0x1b6>
 8007402:	4615      	mov	r5, r2
 8007404:	fbb6 f1f3 	udiv	r1, r6, r3
 8007408:	fb03 6711 	mls	r7, r3, r1, r6
 800740c:	5dc7      	ldrb	r7, [r0, r7]
 800740e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007412:	4637      	mov	r7, r6
 8007414:	42bb      	cmp	r3, r7
 8007416:	460e      	mov	r6, r1
 8007418:	d9f4      	bls.n	8007404 <_printf_i+0x11c>
 800741a:	2b08      	cmp	r3, #8
 800741c:	d10b      	bne.n	8007436 <_printf_i+0x14e>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	07de      	lsls	r6, r3, #31
 8007422:	d508      	bpl.n	8007436 <_printf_i+0x14e>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	6861      	ldr	r1, [r4, #4]
 8007428:	4299      	cmp	r1, r3
 800742a:	bfde      	ittt	le
 800742c:	2330      	movle	r3, #48	; 0x30
 800742e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007432:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007436:	1b52      	subs	r2, r2, r5
 8007438:	6122      	str	r2, [r4, #16]
 800743a:	464b      	mov	r3, r9
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f8cd a000 	str.w	sl, [sp]
 8007444:	aa03      	add	r2, sp, #12
 8007446:	f7ff fedf 	bl	8007208 <_printf_common>
 800744a:	3001      	adds	r0, #1
 800744c:	d14c      	bne.n	80074e8 <_printf_i+0x200>
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	b004      	add	sp, #16
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	4834      	ldr	r0, [pc, #208]	; (800752c <_printf_i+0x244>)
 800745a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800745e:	6829      	ldr	r1, [r5, #0]
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	f851 6b04 	ldr.w	r6, [r1], #4
 8007466:	6029      	str	r1, [r5, #0]
 8007468:	061d      	lsls	r5, r3, #24
 800746a:	d514      	bpl.n	8007496 <_printf_i+0x1ae>
 800746c:	07df      	lsls	r7, r3, #31
 800746e:	bf44      	itt	mi
 8007470:	f043 0320 	orrmi.w	r3, r3, #32
 8007474:	6023      	strmi	r3, [r4, #0]
 8007476:	b91e      	cbnz	r6, 8007480 <_printf_i+0x198>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	f023 0320 	bic.w	r3, r3, #32
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	2310      	movs	r3, #16
 8007482:	e7af      	b.n	80073e4 <_printf_i+0xfc>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	f043 0320 	orr.w	r3, r3, #32
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	2378      	movs	r3, #120	; 0x78
 800748e:	4828      	ldr	r0, [pc, #160]	; (8007530 <_printf_i+0x248>)
 8007490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007494:	e7e3      	b.n	800745e <_printf_i+0x176>
 8007496:	0659      	lsls	r1, r3, #25
 8007498:	bf48      	it	mi
 800749a:	b2b6      	uxthmi	r6, r6
 800749c:	e7e6      	b.n	800746c <_printf_i+0x184>
 800749e:	4615      	mov	r5, r2
 80074a0:	e7bb      	b.n	800741a <_printf_i+0x132>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	6826      	ldr	r6, [r4, #0]
 80074a6:	1d18      	adds	r0, r3, #4
 80074a8:	6961      	ldr	r1, [r4, #20]
 80074aa:	6028      	str	r0, [r5, #0]
 80074ac:	0635      	lsls	r5, r6, #24
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	d501      	bpl.n	80074b6 <_printf_i+0x1ce>
 80074b2:	6019      	str	r1, [r3, #0]
 80074b4:	e002      	b.n	80074bc <_printf_i+0x1d4>
 80074b6:	0670      	lsls	r0, r6, #25
 80074b8:	d5fb      	bpl.n	80074b2 <_printf_i+0x1ca>
 80074ba:	8019      	strh	r1, [r3, #0]
 80074bc:	2300      	movs	r3, #0
 80074be:	4615      	mov	r5, r2
 80074c0:	6123      	str	r3, [r4, #16]
 80074c2:	e7ba      	b.n	800743a <_printf_i+0x152>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	2100      	movs	r1, #0
 80074c8:	1d1a      	adds	r2, r3, #4
 80074ca:	602a      	str	r2, [r5, #0]
 80074cc:	681d      	ldr	r5, [r3, #0]
 80074ce:	6862      	ldr	r2, [r4, #4]
 80074d0:	4628      	mov	r0, r5
 80074d2:	f002 fafb 	bl	8009acc <memchr>
 80074d6:	b108      	cbz	r0, 80074dc <_printf_i+0x1f4>
 80074d8:	1b40      	subs	r0, r0, r5
 80074da:	6060      	str	r0, [r4, #4]
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	6123      	str	r3, [r4, #16]
 80074e0:	2300      	movs	r3, #0
 80074e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e6:	e7a8      	b.n	800743a <_printf_i+0x152>
 80074e8:	462a      	mov	r2, r5
 80074ea:	4649      	mov	r1, r9
 80074ec:	4640      	mov	r0, r8
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	47d0      	blx	sl
 80074f2:	3001      	adds	r0, #1
 80074f4:	d0ab      	beq.n	800744e <_printf_i+0x166>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	079b      	lsls	r3, r3, #30
 80074fa:	d413      	bmi.n	8007524 <_printf_i+0x23c>
 80074fc:	68e0      	ldr	r0, [r4, #12]
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	4298      	cmp	r0, r3
 8007502:	bfb8      	it	lt
 8007504:	4618      	movlt	r0, r3
 8007506:	e7a4      	b.n	8007452 <_printf_i+0x16a>
 8007508:	2301      	movs	r3, #1
 800750a:	4632      	mov	r2, r6
 800750c:	4649      	mov	r1, r9
 800750e:	4640      	mov	r0, r8
 8007510:	47d0      	blx	sl
 8007512:	3001      	adds	r0, #1
 8007514:	d09b      	beq.n	800744e <_printf_i+0x166>
 8007516:	3501      	adds	r5, #1
 8007518:	68e3      	ldr	r3, [r4, #12]
 800751a:	9903      	ldr	r1, [sp, #12]
 800751c:	1a5b      	subs	r3, r3, r1
 800751e:	42ab      	cmp	r3, r5
 8007520:	dcf2      	bgt.n	8007508 <_printf_i+0x220>
 8007522:	e7eb      	b.n	80074fc <_printf_i+0x214>
 8007524:	2500      	movs	r5, #0
 8007526:	f104 0619 	add.w	r6, r4, #25
 800752a:	e7f5      	b.n	8007518 <_printf_i+0x230>
 800752c:	0801dc96 	.word	0x0801dc96
 8007530:	0801dca7 	.word	0x0801dca7

08007534 <_scanf_float>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	b087      	sub	sp, #28
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	688b      	ldr	r3, [r1, #8]
 800753e:	4617      	mov	r7, r2
 8007540:	1e5a      	subs	r2, r3, #1
 8007542:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007546:	bf85      	ittet	hi
 8007548:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800754c:	195b      	addhi	r3, r3, r5
 800754e:	2300      	movls	r3, #0
 8007550:	9302      	strhi	r3, [sp, #8]
 8007552:	bf88      	it	hi
 8007554:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007558:	468b      	mov	fp, r1
 800755a:	f04f 0500 	mov.w	r5, #0
 800755e:	bf8c      	ite	hi
 8007560:	608b      	strhi	r3, [r1, #8]
 8007562:	9302      	strls	r3, [sp, #8]
 8007564:	680b      	ldr	r3, [r1, #0]
 8007566:	4680      	mov	r8, r0
 8007568:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800756c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007570:	460c      	mov	r4, r1
 8007572:	465e      	mov	r6, fp
 8007574:	46aa      	mov	sl, r5
 8007576:	46a9      	mov	r9, r5
 8007578:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800757c:	9501      	str	r5, [sp, #4]
 800757e:	68a2      	ldr	r2, [r4, #8]
 8007580:	b152      	cbz	r2, 8007598 <_scanf_float+0x64>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b4e      	cmp	r3, #78	; 0x4e
 8007588:	d864      	bhi.n	8007654 <_scanf_float+0x120>
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d83c      	bhi.n	8007608 <_scanf_float+0xd4>
 800758e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007592:	b2c8      	uxtb	r0, r1
 8007594:	280e      	cmp	r0, #14
 8007596:	d93a      	bls.n	800760e <_scanf_float+0xda>
 8007598:	f1b9 0f00 	cmp.w	r9, #0
 800759c:	d003      	beq.n	80075a6 <_scanf_float+0x72>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075aa:	f1ba 0f01 	cmp.w	sl, #1
 80075ae:	f200 8113 	bhi.w	80077d8 <_scanf_float+0x2a4>
 80075b2:	455e      	cmp	r6, fp
 80075b4:	f200 8105 	bhi.w	80077c2 <_scanf_float+0x28e>
 80075b8:	2501      	movs	r5, #1
 80075ba:	4628      	mov	r0, r5
 80075bc:	b007      	add	sp, #28
 80075be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075c6:	2a0d      	cmp	r2, #13
 80075c8:	d8e6      	bhi.n	8007598 <_scanf_float+0x64>
 80075ca:	a101      	add	r1, pc, #4	; (adr r1, 80075d0 <_scanf_float+0x9c>)
 80075cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075d0:	0800770f 	.word	0x0800770f
 80075d4:	08007599 	.word	0x08007599
 80075d8:	08007599 	.word	0x08007599
 80075dc:	08007599 	.word	0x08007599
 80075e0:	0800776f 	.word	0x0800776f
 80075e4:	08007747 	.word	0x08007747
 80075e8:	08007599 	.word	0x08007599
 80075ec:	08007599 	.word	0x08007599
 80075f0:	0800771d 	.word	0x0800771d
 80075f4:	08007599 	.word	0x08007599
 80075f8:	08007599 	.word	0x08007599
 80075fc:	08007599 	.word	0x08007599
 8007600:	08007599 	.word	0x08007599
 8007604:	080076d5 	.word	0x080076d5
 8007608:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800760c:	e7db      	b.n	80075c6 <_scanf_float+0x92>
 800760e:	290e      	cmp	r1, #14
 8007610:	d8c2      	bhi.n	8007598 <_scanf_float+0x64>
 8007612:	a001      	add	r0, pc, #4	; (adr r0, 8007618 <_scanf_float+0xe4>)
 8007614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007618:	080076c7 	.word	0x080076c7
 800761c:	08007599 	.word	0x08007599
 8007620:	080076c7 	.word	0x080076c7
 8007624:	0800775b 	.word	0x0800775b
 8007628:	08007599 	.word	0x08007599
 800762c:	08007675 	.word	0x08007675
 8007630:	080076b1 	.word	0x080076b1
 8007634:	080076b1 	.word	0x080076b1
 8007638:	080076b1 	.word	0x080076b1
 800763c:	080076b1 	.word	0x080076b1
 8007640:	080076b1 	.word	0x080076b1
 8007644:	080076b1 	.word	0x080076b1
 8007648:	080076b1 	.word	0x080076b1
 800764c:	080076b1 	.word	0x080076b1
 8007650:	080076b1 	.word	0x080076b1
 8007654:	2b6e      	cmp	r3, #110	; 0x6e
 8007656:	d809      	bhi.n	800766c <_scanf_float+0x138>
 8007658:	2b60      	cmp	r3, #96	; 0x60
 800765a:	d8b2      	bhi.n	80075c2 <_scanf_float+0x8e>
 800765c:	2b54      	cmp	r3, #84	; 0x54
 800765e:	d077      	beq.n	8007750 <_scanf_float+0x21c>
 8007660:	2b59      	cmp	r3, #89	; 0x59
 8007662:	d199      	bne.n	8007598 <_scanf_float+0x64>
 8007664:	2d07      	cmp	r5, #7
 8007666:	d197      	bne.n	8007598 <_scanf_float+0x64>
 8007668:	2508      	movs	r5, #8
 800766a:	e029      	b.n	80076c0 <_scanf_float+0x18c>
 800766c:	2b74      	cmp	r3, #116	; 0x74
 800766e:	d06f      	beq.n	8007750 <_scanf_float+0x21c>
 8007670:	2b79      	cmp	r3, #121	; 0x79
 8007672:	e7f6      	b.n	8007662 <_scanf_float+0x12e>
 8007674:	6821      	ldr	r1, [r4, #0]
 8007676:	05c8      	lsls	r0, r1, #23
 8007678:	d51a      	bpl.n	80076b0 <_scanf_float+0x17c>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007680:	6021      	str	r1, [r4, #0]
 8007682:	f109 0901 	add.w	r9, r9, #1
 8007686:	b11b      	cbz	r3, 8007690 <_scanf_float+0x15c>
 8007688:	3b01      	subs	r3, #1
 800768a:	3201      	adds	r2, #1
 800768c:	9302      	str	r3, [sp, #8]
 800768e:	60a2      	str	r2, [r4, #8]
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	3b01      	subs	r3, #1
 8007694:	60a3      	str	r3, [r4, #8]
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	3301      	adds	r3, #1
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3b01      	subs	r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	607b      	str	r3, [r7, #4]
 80076a4:	f340 8084 	ble.w	80077b0 <_scanf_float+0x27c>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	e766      	b.n	800757e <_scanf_float+0x4a>
 80076b0:	eb1a 0f05 	cmn.w	sl, r5
 80076b4:	f47f af70 	bne.w	8007598 <_scanf_float+0x64>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	f806 3b01 	strb.w	r3, [r6], #1
 80076c4:	e7e4      	b.n	8007690 <_scanf_float+0x15c>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	0610      	lsls	r0, r2, #24
 80076ca:	f57f af65 	bpl.w	8007598 <_scanf_float+0x64>
 80076ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076d2:	e7f4      	b.n	80076be <_scanf_float+0x18a>
 80076d4:	f1ba 0f00 	cmp.w	sl, #0
 80076d8:	d10e      	bne.n	80076f8 <_scanf_float+0x1c4>
 80076da:	f1b9 0f00 	cmp.w	r9, #0
 80076de:	d10e      	bne.n	80076fe <_scanf_float+0x1ca>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076ea:	d108      	bne.n	80076fe <_scanf_float+0x1ca>
 80076ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076f0:	f04f 0a01 	mov.w	sl, #1
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	e7e3      	b.n	80076c0 <_scanf_float+0x18c>
 80076f8:	f1ba 0f02 	cmp.w	sl, #2
 80076fc:	d055      	beq.n	80077aa <_scanf_float+0x276>
 80076fe:	2d01      	cmp	r5, #1
 8007700:	d002      	beq.n	8007708 <_scanf_float+0x1d4>
 8007702:	2d04      	cmp	r5, #4
 8007704:	f47f af48 	bne.w	8007598 <_scanf_float+0x64>
 8007708:	3501      	adds	r5, #1
 800770a:	b2ed      	uxtb	r5, r5
 800770c:	e7d8      	b.n	80076c0 <_scanf_float+0x18c>
 800770e:	f1ba 0f01 	cmp.w	sl, #1
 8007712:	f47f af41 	bne.w	8007598 <_scanf_float+0x64>
 8007716:	f04f 0a02 	mov.w	sl, #2
 800771a:	e7d1      	b.n	80076c0 <_scanf_float+0x18c>
 800771c:	b97d      	cbnz	r5, 800773e <_scanf_float+0x20a>
 800771e:	f1b9 0f00 	cmp.w	r9, #0
 8007722:	f47f af3c 	bne.w	800759e <_scanf_float+0x6a>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800772c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007730:	f47f af39 	bne.w	80075a6 <_scanf_float+0x72>
 8007734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007738:	2501      	movs	r5, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	e7c0      	b.n	80076c0 <_scanf_float+0x18c>
 800773e:	2d03      	cmp	r5, #3
 8007740:	d0e2      	beq.n	8007708 <_scanf_float+0x1d4>
 8007742:	2d05      	cmp	r5, #5
 8007744:	e7de      	b.n	8007704 <_scanf_float+0x1d0>
 8007746:	2d02      	cmp	r5, #2
 8007748:	f47f af26 	bne.w	8007598 <_scanf_float+0x64>
 800774c:	2503      	movs	r5, #3
 800774e:	e7b7      	b.n	80076c0 <_scanf_float+0x18c>
 8007750:	2d06      	cmp	r5, #6
 8007752:	f47f af21 	bne.w	8007598 <_scanf_float+0x64>
 8007756:	2507      	movs	r5, #7
 8007758:	e7b2      	b.n	80076c0 <_scanf_float+0x18c>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	0591      	lsls	r1, r2, #22
 800775e:	f57f af1b 	bpl.w	8007598 <_scanf_float+0x64>
 8007762:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	f8cd 9004 	str.w	r9, [sp, #4]
 800776c:	e7a8      	b.n	80076c0 <_scanf_float+0x18c>
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007774:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007778:	d006      	beq.n	8007788 <_scanf_float+0x254>
 800777a:	0550      	lsls	r0, r2, #21
 800777c:	f57f af0c 	bpl.w	8007598 <_scanf_float+0x64>
 8007780:	f1b9 0f00 	cmp.w	r9, #0
 8007784:	f43f af0f 	beq.w	80075a6 <_scanf_float+0x72>
 8007788:	0591      	lsls	r1, r2, #22
 800778a:	bf58      	it	pl
 800778c:	9901      	ldrpl	r1, [sp, #4]
 800778e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007792:	bf58      	it	pl
 8007794:	eba9 0101 	subpl.w	r1, r9, r1
 8007798:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800779c:	f04f 0900 	mov.w	r9, #0
 80077a0:	bf58      	it	pl
 80077a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	e78a      	b.n	80076c0 <_scanf_float+0x18c>
 80077aa:	f04f 0a03 	mov.w	sl, #3
 80077ae:	e787      	b.n	80076c0 <_scanf_float+0x18c>
 80077b0:	4639      	mov	r1, r7
 80077b2:	4640      	mov	r0, r8
 80077b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077b8:	4798      	blx	r3
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aedf 	beq.w	800757e <_scanf_float+0x4a>
 80077c0:	e6ea      	b.n	8007598 <_scanf_float+0x64>
 80077c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c6:	463a      	mov	r2, r7
 80077c8:	4640      	mov	r0, r8
 80077ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077ce:	4798      	blx	r3
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	e6ec      	b.n	80075b2 <_scanf_float+0x7e>
 80077d8:	1e6b      	subs	r3, r5, #1
 80077da:	2b06      	cmp	r3, #6
 80077dc:	d825      	bhi.n	800782a <_scanf_float+0x2f6>
 80077de:	2d02      	cmp	r5, #2
 80077e0:	d836      	bhi.n	8007850 <_scanf_float+0x31c>
 80077e2:	455e      	cmp	r6, fp
 80077e4:	f67f aee8 	bls.w	80075b8 <_scanf_float+0x84>
 80077e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ec:	463a      	mov	r2, r7
 80077ee:	4640      	mov	r0, r8
 80077f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077f4:	4798      	blx	r3
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	e7f1      	b.n	80077e2 <_scanf_float+0x2ae>
 80077fe:	9802      	ldr	r0, [sp, #8]
 8007800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007804:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007808:	463a      	mov	r2, r7
 800780a:	9002      	str	r0, [sp, #8]
 800780c:	4640      	mov	r0, r8
 800780e:	4798      	blx	r3
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	3b01      	subs	r3, #1
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781a:	fa5f fa8a 	uxtb.w	sl, sl
 800781e:	f1ba 0f02 	cmp.w	sl, #2
 8007822:	d1ec      	bne.n	80077fe <_scanf_float+0x2ca>
 8007824:	3d03      	subs	r5, #3
 8007826:	b2ed      	uxtb	r5, r5
 8007828:	1b76      	subs	r6, r6, r5
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	05da      	lsls	r2, r3, #23
 800782e:	d52f      	bpl.n	8007890 <_scanf_float+0x35c>
 8007830:	055b      	lsls	r3, r3, #21
 8007832:	d510      	bpl.n	8007856 <_scanf_float+0x322>
 8007834:	455e      	cmp	r6, fp
 8007836:	f67f aebf 	bls.w	80075b8 <_scanf_float+0x84>
 800783a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800783e:	463a      	mov	r2, r7
 8007840:	4640      	mov	r0, r8
 8007842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007846:	4798      	blx	r3
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	3b01      	subs	r3, #1
 800784c:	6123      	str	r3, [r4, #16]
 800784e:	e7f1      	b.n	8007834 <_scanf_float+0x300>
 8007850:	46aa      	mov	sl, r5
 8007852:	9602      	str	r6, [sp, #8]
 8007854:	e7df      	b.n	8007816 <_scanf_float+0x2e2>
 8007856:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	2965      	cmp	r1, #101	; 0x65
 800785e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007862:	f106 35ff 	add.w	r5, r6, #4294967295
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	d00c      	beq.n	8007884 <_scanf_float+0x350>
 800786a:	2945      	cmp	r1, #69	; 0x45
 800786c:	d00a      	beq.n	8007884 <_scanf_float+0x350>
 800786e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007872:	463a      	mov	r2, r7
 8007874:	4640      	mov	r0, r8
 8007876:	4798      	blx	r3
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800787e:	3b01      	subs	r3, #1
 8007880:	1eb5      	subs	r5, r6, #2
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	463a      	mov	r2, r7
 8007886:	4640      	mov	r0, r8
 8007888:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800788c:	4798      	blx	r3
 800788e:	462e      	mov	r6, r5
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	f015 0510 	ands.w	r5, r5, #16
 8007896:	d155      	bne.n	8007944 <_scanf_float+0x410>
 8007898:	7035      	strb	r5, [r6, #0]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a4:	d11b      	bne.n	80078de <_scanf_float+0x3aa>
 80078a6:	9b01      	ldr	r3, [sp, #4]
 80078a8:	454b      	cmp	r3, r9
 80078aa:	eba3 0209 	sub.w	r2, r3, r9
 80078ae:	d123      	bne.n	80078f8 <_scanf_float+0x3c4>
 80078b0:	2200      	movs	r2, #0
 80078b2:	4659      	mov	r1, fp
 80078b4:	4640      	mov	r0, r8
 80078b6:	f000 fe7b 	bl	80085b0 <_strtod_r>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	f012 0f02 	tst.w	r2, #2
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	d021      	beq.n	800790e <_scanf_float+0x3da>
 80078ca:	1d1a      	adds	r2, r3, #4
 80078cc:	9903      	ldr	r1, [sp, #12]
 80078ce:	600a      	str	r2, [r1, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	e9c3 6700 	strd	r6, r7, [r3]
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	60e3      	str	r3, [r4, #12]
 80078dc:	e66d      	b.n	80075ba <_scanf_float+0x86>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0e5      	beq.n	80078b0 <_scanf_float+0x37c>
 80078e4:	9905      	ldr	r1, [sp, #20]
 80078e6:	230a      	movs	r3, #10
 80078e8:	462a      	mov	r2, r5
 80078ea:	4640      	mov	r0, r8
 80078ec:	3101      	adds	r1, #1
 80078ee:	f000 fee1 	bl	80086b4 <_strtol_r>
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	9e05      	ldr	r6, [sp, #20]
 80078f6:	1ac2      	subs	r2, r0, r3
 80078f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80078fc:	429e      	cmp	r6, r3
 80078fe:	bf28      	it	cs
 8007900:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007904:	4630      	mov	r0, r6
 8007906:	4910      	ldr	r1, [pc, #64]	; (8007948 <_scanf_float+0x414>)
 8007908:	f000 f826 	bl	8007958 <siprintf>
 800790c:	e7d0      	b.n	80078b0 <_scanf_float+0x37c>
 800790e:	f012 0f04 	tst.w	r2, #4
 8007912:	f103 0204 	add.w	r2, r3, #4
 8007916:	d1d9      	bne.n	80078cc <_scanf_float+0x398>
 8007918:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800791c:	f8cc 2000 	str.w	r2, [ip]
 8007920:	f8d3 8000 	ldr.w	r8, [r3]
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	f7f9 f870 	bl	8000a0c <__aeabi_dcmpun>
 800792c:	b128      	cbz	r0, 800793a <_scanf_float+0x406>
 800792e:	4807      	ldr	r0, [pc, #28]	; (800794c <_scanf_float+0x418>)
 8007930:	f000 f80e 	bl	8007950 <nanf>
 8007934:	f8c8 0000 	str.w	r0, [r8]
 8007938:	e7cd      	b.n	80078d6 <_scanf_float+0x3a2>
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f9 f8c3 	bl	8000ac8 <__aeabi_d2f>
 8007942:	e7f7      	b.n	8007934 <_scanf_float+0x400>
 8007944:	2500      	movs	r5, #0
 8007946:	e638      	b.n	80075ba <_scanf_float+0x86>
 8007948:	0801dcb8 	.word	0x0801dcb8
 800794c:	0801e0c0 	.word	0x0801e0c0

08007950 <nanf>:
 8007950:	4800      	ldr	r0, [pc, #0]	; (8007954 <nanf+0x4>)
 8007952:	4770      	bx	lr
 8007954:	7fc00000 	.word	0x7fc00000

08007958 <siprintf>:
 8007958:	b40e      	push	{r1, r2, r3}
 800795a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800795e:	b500      	push	{lr}
 8007960:	b09c      	sub	sp, #112	; 0x70
 8007962:	ab1d      	add	r3, sp, #116	; 0x74
 8007964:	9002      	str	r0, [sp, #8]
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	9107      	str	r1, [sp, #28]
 800796a:	9104      	str	r1, [sp, #16]
 800796c:	4808      	ldr	r0, [pc, #32]	; (8007990 <siprintf+0x38>)
 800796e:	4909      	ldr	r1, [pc, #36]	; (8007994 <siprintf+0x3c>)
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	9105      	str	r1, [sp, #20]
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	a902      	add	r1, sp, #8
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	f002 fec6 	bl	800a70c <_svfiprintf_r>
 8007980:	2200      	movs	r2, #0
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	b01c      	add	sp, #112	; 0x70
 8007988:	f85d eb04 	ldr.w	lr, [sp], #4
 800798c:	b003      	add	sp, #12
 800798e:	4770      	bx	lr
 8007990:	20000010 	.word	0x20000010
 8007994:	ffff0208 	.word	0xffff0208

08007998 <sulp>:
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	460f      	mov	r7, r1
 800799e:	4690      	mov	r8, r2
 80079a0:	f002 fc20 	bl	800a1e4 <__ulp>
 80079a4:	4604      	mov	r4, r0
 80079a6:	460d      	mov	r5, r1
 80079a8:	f1b8 0f00 	cmp.w	r8, #0
 80079ac:	d011      	beq.n	80079d2 <sulp+0x3a>
 80079ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	dd0b      	ble.n	80079d2 <sulp+0x3a>
 80079ba:	2400      	movs	r4, #0
 80079bc:	051b      	lsls	r3, r3, #20
 80079be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079c6:	4622      	mov	r2, r4
 80079c8:	462b      	mov	r3, r5
 80079ca:	f7f8 fd85 	bl	80004d8 <__aeabi_dmul>
 80079ce:	4604      	mov	r4, r0
 80079d0:	460d      	mov	r5, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079da:	0000      	movs	r0, r0
 80079dc:	0000      	movs	r0, r0
	...

080079e0 <_strtod_l>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	469b      	mov	fp, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	b09f      	sub	sp, #124	; 0x7c
 80079ea:	931a      	str	r3, [sp, #104]	; 0x68
 80079ec:	4b9e      	ldr	r3, [pc, #632]	; (8007c68 <_strtod_l+0x288>)
 80079ee:	4682      	mov	sl, r0
 80079f0:	681f      	ldr	r7, [r3, #0]
 80079f2:	460e      	mov	r6, r1
 80079f4:	4638      	mov	r0, r7
 80079f6:	9215      	str	r2, [sp, #84]	; 0x54
 80079f8:	f7f8 fbaa 	bl	8000150 <strlen>
 80079fc:	f04f 0800 	mov.w	r8, #0
 8007a00:	4604      	mov	r4, r0
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	9619      	str	r6, [sp, #100]	; 0x64
 8007a08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	2a2b      	cmp	r2, #43	; 0x2b
 8007a0e:	d04c      	beq.n	8007aaa <_strtod_l+0xca>
 8007a10:	d83a      	bhi.n	8007a88 <_strtod_l+0xa8>
 8007a12:	2a0d      	cmp	r2, #13
 8007a14:	d833      	bhi.n	8007a7e <_strtod_l+0x9e>
 8007a16:	2a08      	cmp	r2, #8
 8007a18:	d833      	bhi.n	8007a82 <_strtod_l+0xa2>
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d03d      	beq.n	8007a9a <_strtod_l+0xba>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	930a      	str	r3, [sp, #40]	; 0x28
 8007a22:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a24:	782b      	ldrb	r3, [r5, #0]
 8007a26:	2b30      	cmp	r3, #48	; 0x30
 8007a28:	f040 80aa 	bne.w	8007b80 <_strtod_l+0x1a0>
 8007a2c:	786b      	ldrb	r3, [r5, #1]
 8007a2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a32:	2b58      	cmp	r3, #88	; 0x58
 8007a34:	d166      	bne.n	8007b04 <_strtod_l+0x124>
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	4650      	mov	r0, sl
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	ab1a      	add	r3, sp, #104	; 0x68
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4a8a      	ldr	r2, [pc, #552]	; (8007c6c <_strtod_l+0x28c>)
 8007a42:	f8cd b008 	str.w	fp, [sp, #8]
 8007a46:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a48:	a919      	add	r1, sp, #100	; 0x64
 8007a4a:	f001 fd23 	bl	8009494 <__gethex>
 8007a4e:	f010 0607 	ands.w	r6, r0, #7
 8007a52:	4604      	mov	r4, r0
 8007a54:	d005      	beq.n	8007a62 <_strtod_l+0x82>
 8007a56:	2e06      	cmp	r6, #6
 8007a58:	d129      	bne.n	8007aae <_strtod_l+0xce>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	9519      	str	r5, [sp, #100]	; 0x64
 8007a60:	930a      	str	r3, [sp, #40]	; 0x28
 8007a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 858a 	bne.w	800857e <_strtod_l+0xb9e>
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6c:	b1d3      	cbz	r3, 8007aa4 <_strtod_l+0xc4>
 8007a6e:	4642      	mov	r2, r8
 8007a70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	b01f      	add	sp, #124	; 0x7c
 8007a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	2a20      	cmp	r2, #32
 8007a80:	d1cd      	bne.n	8007a1e <_strtod_l+0x3e>
 8007a82:	3301      	adds	r3, #1
 8007a84:	9319      	str	r3, [sp, #100]	; 0x64
 8007a86:	e7bf      	b.n	8007a08 <_strtod_l+0x28>
 8007a88:	2a2d      	cmp	r2, #45	; 0x2d
 8007a8a:	d1c8      	bne.n	8007a1e <_strtod_l+0x3e>
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	9219      	str	r2, [sp, #100]	; 0x64
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1c3      	bne.n	8007a22 <_strtod_l+0x42>
 8007a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a9c:	9619      	str	r6, [sp, #100]	; 0x64
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 856b 	bne.w	800857a <_strtod_l+0xb9a>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	e7e4      	b.n	8007a74 <_strtod_l+0x94>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	e7ef      	b.n	8007a8e <_strtod_l+0xae>
 8007aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ab0:	b13a      	cbz	r2, 8007ac2 <_strtod_l+0xe2>
 8007ab2:	2135      	movs	r1, #53	; 0x35
 8007ab4:	a81c      	add	r0, sp, #112	; 0x70
 8007ab6:	f002 fc99 	bl	800a3ec <__copybits>
 8007aba:	4650      	mov	r0, sl
 8007abc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007abe:	f002 f861 	bl	8009b84 <_Bfree>
 8007ac2:	3e01      	subs	r6, #1
 8007ac4:	2e04      	cmp	r6, #4
 8007ac6:	d806      	bhi.n	8007ad6 <_strtod_l+0xf6>
 8007ac8:	e8df f006 	tbb	[pc, r6]
 8007acc:	1714030a 	.word	0x1714030a
 8007ad0:	0a          	.byte	0x0a
 8007ad1:	00          	.byte	0x00
 8007ad2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007ad6:	0721      	lsls	r1, r4, #28
 8007ad8:	d5c3      	bpl.n	8007a62 <_strtod_l+0x82>
 8007ada:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007ade:	e7c0      	b.n	8007a62 <_strtod_l+0x82>
 8007ae0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007ae2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007ae6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007aea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007aee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007af2:	e7f0      	b.n	8007ad6 <_strtod_l+0xf6>
 8007af4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c70 <_strtod_l+0x290>
 8007af8:	e7ed      	b.n	8007ad6 <_strtod_l+0xf6>
 8007afa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007afe:	f04f 38ff 	mov.w	r8, #4294967295
 8007b02:	e7e8      	b.n	8007ad6 <_strtod_l+0xf6>
 8007b04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	9219      	str	r2, [sp, #100]	; 0x64
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b30      	cmp	r3, #48	; 0x30
 8007b0e:	d0f9      	beq.n	8007b04 <_strtod_l+0x124>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0a6      	beq.n	8007a62 <_strtod_l+0x82>
 8007b14:	2301      	movs	r3, #1
 8007b16:	9307      	str	r3, [sp, #28]
 8007b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	469b      	mov	fp, r3
 8007b22:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b26:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b28:	7805      	ldrb	r5, [r0, #0]
 8007b2a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007b2e:	b2d9      	uxtb	r1, r3
 8007b30:	2909      	cmp	r1, #9
 8007b32:	d927      	bls.n	8007b84 <_strtod_l+0x1a4>
 8007b34:	4622      	mov	r2, r4
 8007b36:	4639      	mov	r1, r7
 8007b38:	f002 fefe 	bl	800a938 <strncmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d033      	beq.n	8007ba8 <_strtod_l+0x1c8>
 8007b40:	2000      	movs	r0, #0
 8007b42:	462a      	mov	r2, r5
 8007b44:	465c      	mov	r4, fp
 8007b46:	4603      	mov	r3, r0
 8007b48:	9004      	str	r0, [sp, #16]
 8007b4a:	2a65      	cmp	r2, #101	; 0x65
 8007b4c:	d001      	beq.n	8007b52 <_strtod_l+0x172>
 8007b4e:	2a45      	cmp	r2, #69	; 0x45
 8007b50:	d114      	bne.n	8007b7c <_strtod_l+0x19c>
 8007b52:	b91c      	cbnz	r4, 8007b5c <_strtod_l+0x17c>
 8007b54:	9a07      	ldr	r2, [sp, #28]
 8007b56:	4302      	orrs	r2, r0
 8007b58:	d09f      	beq.n	8007a9a <_strtod_l+0xba>
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b5e:	1c72      	adds	r2, r6, #1
 8007b60:	9219      	str	r2, [sp, #100]	; 0x64
 8007b62:	7872      	ldrb	r2, [r6, #1]
 8007b64:	2a2b      	cmp	r2, #43	; 0x2b
 8007b66:	d079      	beq.n	8007c5c <_strtod_l+0x27c>
 8007b68:	2a2d      	cmp	r2, #45	; 0x2d
 8007b6a:	f000 8083 	beq.w	8007c74 <_strtod_l+0x294>
 8007b6e:	2700      	movs	r7, #0
 8007b70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b74:	2909      	cmp	r1, #9
 8007b76:	f240 8083 	bls.w	8007c80 <_strtod_l+0x2a0>
 8007b7a:	9619      	str	r6, [sp, #100]	; 0x64
 8007b7c:	2500      	movs	r5, #0
 8007b7e:	e09f      	b.n	8007cc0 <_strtod_l+0x2e0>
 8007b80:	2300      	movs	r3, #0
 8007b82:	e7c8      	b.n	8007b16 <_strtod_l+0x136>
 8007b84:	f1bb 0f08 	cmp.w	fp, #8
 8007b88:	bfd5      	itete	le
 8007b8a:	9906      	ldrle	r1, [sp, #24]
 8007b8c:	9905      	ldrgt	r1, [sp, #20]
 8007b8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b92:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007b96:	f100 0001 	add.w	r0, r0, #1
 8007b9a:	bfd4      	ite	le
 8007b9c:	9306      	strle	r3, [sp, #24]
 8007b9e:	9305      	strgt	r3, [sp, #20]
 8007ba0:	f10b 0b01 	add.w	fp, fp, #1
 8007ba4:	9019      	str	r0, [sp, #100]	; 0x64
 8007ba6:	e7be      	b.n	8007b26 <_strtod_l+0x146>
 8007ba8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007baa:	191a      	adds	r2, r3, r4
 8007bac:	9219      	str	r2, [sp, #100]	; 0x64
 8007bae:	5d1a      	ldrb	r2, [r3, r4]
 8007bb0:	f1bb 0f00 	cmp.w	fp, #0
 8007bb4:	d036      	beq.n	8007c24 <_strtod_l+0x244>
 8007bb6:	465c      	mov	r4, fp
 8007bb8:	9004      	str	r0, [sp, #16]
 8007bba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bbe:	2b09      	cmp	r3, #9
 8007bc0:	d912      	bls.n	8007be8 <_strtod_l+0x208>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e7c1      	b.n	8007b4a <_strtod_l+0x16a>
 8007bc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bc8:	3001      	adds	r0, #1
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	9219      	str	r2, [sp, #100]	; 0x64
 8007bce:	785a      	ldrb	r2, [r3, #1]
 8007bd0:	2a30      	cmp	r2, #48	; 0x30
 8007bd2:	d0f8      	beq.n	8007bc6 <_strtod_l+0x1e6>
 8007bd4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	f200 84d5 	bhi.w	8008588 <_strtod_l+0xba8>
 8007bde:	9004      	str	r0, [sp, #16]
 8007be0:	2000      	movs	r0, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007be6:	9308      	str	r3, [sp, #32]
 8007be8:	3a30      	subs	r2, #48	; 0x30
 8007bea:	f100 0301 	add.w	r3, r0, #1
 8007bee:	d013      	beq.n	8007c18 <_strtod_l+0x238>
 8007bf0:	9904      	ldr	r1, [sp, #16]
 8007bf2:	1905      	adds	r5, r0, r4
 8007bf4:	4419      	add	r1, r3
 8007bf6:	9104      	str	r1, [sp, #16]
 8007bf8:	4623      	mov	r3, r4
 8007bfa:	210a      	movs	r1, #10
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	d113      	bne.n	8007c28 <_strtod_l+0x248>
 8007c00:	1823      	adds	r3, r4, r0
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	f104 0401 	add.w	r4, r4, #1
 8007c08:	4404      	add	r4, r0
 8007c0a:	dc1b      	bgt.n	8007c44 <_strtod_l+0x264>
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	9906      	ldr	r1, [sp, #24]
 8007c10:	fb03 2301 	mla	r3, r3, r1, r2
 8007c14:	9306      	str	r3, [sp, #24]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	1c51      	adds	r1, r2, #1
 8007c1e:	9119      	str	r1, [sp, #100]	; 0x64
 8007c20:	7852      	ldrb	r2, [r2, #1]
 8007c22:	e7ca      	b.n	8007bba <_strtod_l+0x1da>
 8007c24:	4658      	mov	r0, fp
 8007c26:	e7d3      	b.n	8007bd0 <_strtod_l+0x1f0>
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	dc04      	bgt.n	8007c36 <_strtod_l+0x256>
 8007c2c:	9f06      	ldr	r7, [sp, #24]
 8007c2e:	434f      	muls	r7, r1
 8007c30:	9706      	str	r7, [sp, #24]
 8007c32:	3301      	adds	r3, #1
 8007c34:	e7e2      	b.n	8007bfc <_strtod_l+0x21c>
 8007c36:	1c5f      	adds	r7, r3, #1
 8007c38:	2f10      	cmp	r7, #16
 8007c3a:	bfde      	ittt	le
 8007c3c:	9f05      	ldrle	r7, [sp, #20]
 8007c3e:	434f      	mulle	r7, r1
 8007c40:	9705      	strle	r7, [sp, #20]
 8007c42:	e7f6      	b.n	8007c32 <_strtod_l+0x252>
 8007c44:	2c10      	cmp	r4, #16
 8007c46:	bfdf      	itttt	le
 8007c48:	230a      	movle	r3, #10
 8007c4a:	9905      	ldrle	r1, [sp, #20]
 8007c4c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007c50:	9305      	strle	r3, [sp, #20]
 8007c52:	e7e0      	b.n	8007c16 <_strtod_l+0x236>
 8007c54:	2300      	movs	r3, #0
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e77b      	b.n	8007b54 <_strtod_l+0x174>
 8007c5c:	2700      	movs	r7, #0
 8007c5e:	1cb2      	adds	r2, r6, #2
 8007c60:	9219      	str	r2, [sp, #100]	; 0x64
 8007c62:	78b2      	ldrb	r2, [r6, #2]
 8007c64:	e784      	b.n	8007b70 <_strtod_l+0x190>
 8007c66:	bf00      	nop
 8007c68:	0801df08 	.word	0x0801df08
 8007c6c:	0801dcc0 	.word	0x0801dcc0
 8007c70:	7ff00000 	.word	0x7ff00000
 8007c74:	2701      	movs	r7, #1
 8007c76:	e7f2      	b.n	8007c5e <_strtod_l+0x27e>
 8007c78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c7a:	1c51      	adds	r1, r2, #1
 8007c7c:	9119      	str	r1, [sp, #100]	; 0x64
 8007c7e:	7852      	ldrb	r2, [r2, #1]
 8007c80:	2a30      	cmp	r2, #48	; 0x30
 8007c82:	d0f9      	beq.n	8007c78 <_strtod_l+0x298>
 8007c84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c88:	2908      	cmp	r1, #8
 8007c8a:	f63f af77 	bhi.w	8007b7c <_strtod_l+0x19c>
 8007c8e:	f04f 0e0a 	mov.w	lr, #10
 8007c92:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007c96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c98:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c9c:	1c51      	adds	r1, r2, #1
 8007c9e:	9119      	str	r1, [sp, #100]	; 0x64
 8007ca0:	7852      	ldrb	r2, [r2, #1]
 8007ca2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007ca6:	2d09      	cmp	r5, #9
 8007ca8:	d935      	bls.n	8007d16 <_strtod_l+0x336>
 8007caa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cac:	1b49      	subs	r1, r1, r5
 8007cae:	2908      	cmp	r1, #8
 8007cb0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007cb4:	dc02      	bgt.n	8007cbc <_strtod_l+0x2dc>
 8007cb6:	4565      	cmp	r5, ip
 8007cb8:	bfa8      	it	ge
 8007cba:	4665      	movge	r5, ip
 8007cbc:	b107      	cbz	r7, 8007cc0 <_strtod_l+0x2e0>
 8007cbe:	426d      	negs	r5, r5
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d14c      	bne.n	8007d5e <_strtod_l+0x37e>
 8007cc4:	9907      	ldr	r1, [sp, #28]
 8007cc6:	4301      	orrs	r1, r0
 8007cc8:	f47f aecb 	bne.w	8007a62 <_strtod_l+0x82>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f aee4 	bne.w	8007a9a <_strtod_l+0xba>
 8007cd2:	2a69      	cmp	r2, #105	; 0x69
 8007cd4:	d026      	beq.n	8007d24 <_strtod_l+0x344>
 8007cd6:	dc23      	bgt.n	8007d20 <_strtod_l+0x340>
 8007cd8:	2a49      	cmp	r2, #73	; 0x49
 8007cda:	d023      	beq.n	8007d24 <_strtod_l+0x344>
 8007cdc:	2a4e      	cmp	r2, #78	; 0x4e
 8007cde:	f47f aedc 	bne.w	8007a9a <_strtod_l+0xba>
 8007ce2:	499d      	ldr	r1, [pc, #628]	; (8007f58 <_strtod_l+0x578>)
 8007ce4:	a819      	add	r0, sp, #100	; 0x64
 8007ce6:	f001 fe23 	bl	8009930 <__match>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f43f aed5 	beq.w	8007a9a <_strtod_l+0xba>
 8007cf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b28      	cmp	r3, #40	; 0x28
 8007cf6:	d12c      	bne.n	8007d52 <_strtod_l+0x372>
 8007cf8:	4998      	ldr	r1, [pc, #608]	; (8007f5c <_strtod_l+0x57c>)
 8007cfa:	aa1c      	add	r2, sp, #112	; 0x70
 8007cfc:	a819      	add	r0, sp, #100	; 0x64
 8007cfe:	f001 fe2b 	bl	8009958 <__hexnan>
 8007d02:	2805      	cmp	r0, #5
 8007d04:	d125      	bne.n	8007d52 <_strtod_l+0x372>
 8007d06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d14:	e6a5      	b.n	8007a62 <_strtod_l+0x82>
 8007d16:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007d1a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007d1e:	e7bc      	b.n	8007c9a <_strtod_l+0x2ba>
 8007d20:	2a6e      	cmp	r2, #110	; 0x6e
 8007d22:	e7dc      	b.n	8007cde <_strtod_l+0x2fe>
 8007d24:	498e      	ldr	r1, [pc, #568]	; (8007f60 <_strtod_l+0x580>)
 8007d26:	a819      	add	r0, sp, #100	; 0x64
 8007d28:	f001 fe02 	bl	8009930 <__match>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f43f aeb4 	beq.w	8007a9a <_strtod_l+0xba>
 8007d32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d34:	498b      	ldr	r1, [pc, #556]	; (8007f64 <_strtod_l+0x584>)
 8007d36:	3b01      	subs	r3, #1
 8007d38:	a819      	add	r0, sp, #100	; 0x64
 8007d3a:	9319      	str	r3, [sp, #100]	; 0x64
 8007d3c:	f001 fdf8 	bl	8009930 <__match>
 8007d40:	b910      	cbnz	r0, 8007d48 <_strtod_l+0x368>
 8007d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d44:	3301      	adds	r3, #1
 8007d46:	9319      	str	r3, [sp, #100]	; 0x64
 8007d48:	f04f 0800 	mov.w	r8, #0
 8007d4c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007f68 <_strtod_l+0x588>
 8007d50:	e687      	b.n	8007a62 <_strtod_l+0x82>
 8007d52:	4886      	ldr	r0, [pc, #536]	; (8007f6c <_strtod_l+0x58c>)
 8007d54:	f002 fdda 	bl	800a90c <nan>
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4689      	mov	r9, r1
 8007d5c:	e681      	b.n	8007a62 <_strtod_l+0x82>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	f1bb 0f00 	cmp.w	fp, #0
 8007d64:	bf08      	it	eq
 8007d66:	46a3      	moveq	fp, r4
 8007d68:	1aeb      	subs	r3, r5, r3
 8007d6a:	2c10      	cmp	r4, #16
 8007d6c:	9806      	ldr	r0, [sp, #24]
 8007d6e:	4626      	mov	r6, r4
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	bfa8      	it	ge
 8007d74:	2610      	movge	r6, #16
 8007d76:	f7f8 fb35 	bl	80003e4 <__aeabi_ui2d>
 8007d7a:	2c09      	cmp	r4, #9
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	dd13      	ble.n	8007daa <_strtod_l+0x3ca>
 8007d82:	4b7b      	ldr	r3, [pc, #492]	; (8007f70 <_strtod_l+0x590>)
 8007d84:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d88:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d8c:	f7f8 fba4 	bl	80004d8 <__aeabi_dmul>
 8007d90:	4680      	mov	r8, r0
 8007d92:	9805      	ldr	r0, [sp, #20]
 8007d94:	4689      	mov	r9, r1
 8007d96:	f7f8 fb25 	bl	80003e4 <__aeabi_ui2d>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 f9e3 	bl	800016c <__adddf3>
 8007da6:	4680      	mov	r8, r0
 8007da8:	4689      	mov	r9, r1
 8007daa:	2c0f      	cmp	r4, #15
 8007dac:	dc36      	bgt.n	8007e1c <_strtod_l+0x43c>
 8007dae:	9b07      	ldr	r3, [sp, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f43f ae56 	beq.w	8007a62 <_strtod_l+0x82>
 8007db6:	dd22      	ble.n	8007dfe <_strtod_l+0x41e>
 8007db8:	2b16      	cmp	r3, #22
 8007dba:	dc09      	bgt.n	8007dd0 <_strtod_l+0x3f0>
 8007dbc:	496c      	ldr	r1, [pc, #432]	; (8007f70 <_strtod_l+0x590>)
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	e7c3      	b.n	8007d58 <_strtod_l+0x378>
 8007dd0:	9a07      	ldr	r2, [sp, #28]
 8007dd2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	db20      	blt.n	8007e1c <_strtod_l+0x43c>
 8007dda:	4d65      	ldr	r5, [pc, #404]	; (8007f70 <_strtod_l+0x590>)
 8007ddc:	f1c4 040f 	rsb	r4, r4, #15
 8007de0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007de4:	4642      	mov	r2, r8
 8007de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dea:	464b      	mov	r3, r9
 8007dec:	f7f8 fb74 	bl	80004d8 <__aeabi_dmul>
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	1b1c      	subs	r4, r3, r4
 8007df4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dfc:	e7e5      	b.n	8007dca <_strtod_l+0x3ea>
 8007dfe:	9b07      	ldr	r3, [sp, #28]
 8007e00:	3316      	adds	r3, #22
 8007e02:	db0b      	blt.n	8007e1c <_strtod_l+0x43c>
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	4640      	mov	r0, r8
 8007e08:	1b5d      	subs	r5, r3, r5
 8007e0a:	4b59      	ldr	r3, [pc, #356]	; (8007f70 <_strtod_l+0x590>)
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e16:	f7f8 fc89 	bl	800072c <__aeabi_ddiv>
 8007e1a:	e79d      	b.n	8007d58 <_strtod_l+0x378>
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	1ba6      	subs	r6, r4, r6
 8007e20:	441e      	add	r6, r3
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	dd74      	ble.n	8007f10 <_strtod_l+0x530>
 8007e26:	f016 030f 	ands.w	r3, r6, #15
 8007e2a:	d00a      	beq.n	8007e42 <_strtod_l+0x462>
 8007e2c:	4950      	ldr	r1, [pc, #320]	; (8007f70 <_strtod_l+0x590>)
 8007e2e:	4642      	mov	r2, r8
 8007e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e38:	464b      	mov	r3, r9
 8007e3a:	f7f8 fb4d 	bl	80004d8 <__aeabi_dmul>
 8007e3e:	4680      	mov	r8, r0
 8007e40:	4689      	mov	r9, r1
 8007e42:	f036 060f 	bics.w	r6, r6, #15
 8007e46:	d052      	beq.n	8007eee <_strtod_l+0x50e>
 8007e48:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007e4c:	dd27      	ble.n	8007e9e <_strtod_l+0x4be>
 8007e4e:	f04f 0b00 	mov.w	fp, #0
 8007e52:	f8cd b010 	str.w	fp, [sp, #16]
 8007e56:	f8cd b020 	str.w	fp, [sp, #32]
 8007e5a:	f8cd b018 	str.w	fp, [sp, #24]
 8007e5e:	2322      	movs	r3, #34	; 0x22
 8007e60:	f04f 0800 	mov.w	r8, #0
 8007e64:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007f68 <_strtod_l+0x588>
 8007e68:	f8ca 3000 	str.w	r3, [sl]
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f43f adf7 	beq.w	8007a62 <_strtod_l+0x82>
 8007e74:	4650      	mov	r0, sl
 8007e76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e78:	f001 fe84 	bl	8009b84 <_Bfree>
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	9906      	ldr	r1, [sp, #24]
 8007e80:	f001 fe80 	bl	8009b84 <_Bfree>
 8007e84:	4650      	mov	r0, sl
 8007e86:	9904      	ldr	r1, [sp, #16]
 8007e88:	f001 fe7c 	bl	8009b84 <_Bfree>
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	9908      	ldr	r1, [sp, #32]
 8007e90:	f001 fe78 	bl	8009b84 <_Bfree>
 8007e94:	4659      	mov	r1, fp
 8007e96:	4650      	mov	r0, sl
 8007e98:	f001 fe74 	bl	8009b84 <_Bfree>
 8007e9c:	e5e1      	b.n	8007a62 <_strtod_l+0x82>
 8007e9e:	4b35      	ldr	r3, [pc, #212]	; (8007f74 <_strtod_l+0x594>)
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	9305      	str	r3, [sp, #20]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	461f      	mov	r7, r3
 8007eaa:	1136      	asrs	r6, r6, #4
 8007eac:	2e01      	cmp	r6, #1
 8007eae:	dc21      	bgt.n	8007ef4 <_strtod_l+0x514>
 8007eb0:	b10b      	cbz	r3, 8007eb6 <_strtod_l+0x4d6>
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4689      	mov	r9, r1
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <_strtod_l+0x594>)
 8007eb8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ebc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	f7f8 fb06 	bl	80004d8 <__aeabi_dmul>
 8007ecc:	4b26      	ldr	r3, [pc, #152]	; (8007f68 <_strtod_l+0x588>)
 8007ece:	460a      	mov	r2, r1
 8007ed0:	400b      	ands	r3, r1
 8007ed2:	4929      	ldr	r1, [pc, #164]	; (8007f78 <_strtod_l+0x598>)
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	428b      	cmp	r3, r1
 8007ed8:	d8b9      	bhi.n	8007e4e <_strtod_l+0x46e>
 8007eda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ede:	428b      	cmp	r3, r1
 8007ee0:	bf86      	itte	hi
 8007ee2:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ee6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007f7c <_strtod_l+0x59c>
 8007eea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9305      	str	r3, [sp, #20]
 8007ef2:	e07f      	b.n	8007ff4 <_strtod_l+0x614>
 8007ef4:	07f2      	lsls	r2, r6, #31
 8007ef6:	d505      	bpl.n	8007f04 <_strtod_l+0x524>
 8007ef8:	9b05      	ldr	r3, [sp, #20]
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 faeb 	bl	80004d8 <__aeabi_dmul>
 8007f02:	2301      	movs	r3, #1
 8007f04:	9a05      	ldr	r2, [sp, #20]
 8007f06:	3701      	adds	r7, #1
 8007f08:	3208      	adds	r2, #8
 8007f0a:	1076      	asrs	r6, r6, #1
 8007f0c:	9205      	str	r2, [sp, #20]
 8007f0e:	e7cd      	b.n	8007eac <_strtod_l+0x4cc>
 8007f10:	d0ed      	beq.n	8007eee <_strtod_l+0x50e>
 8007f12:	4276      	negs	r6, r6
 8007f14:	f016 020f 	ands.w	r2, r6, #15
 8007f18:	d00a      	beq.n	8007f30 <_strtod_l+0x550>
 8007f1a:	4b15      	ldr	r3, [pc, #84]	; (8007f70 <_strtod_l+0x590>)
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f22:	4649      	mov	r1, r9
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fc00 	bl	800072c <__aeabi_ddiv>
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4689      	mov	r9, r1
 8007f30:	1136      	asrs	r6, r6, #4
 8007f32:	d0dc      	beq.n	8007eee <_strtod_l+0x50e>
 8007f34:	2e1f      	cmp	r6, #31
 8007f36:	dd23      	ble.n	8007f80 <_strtod_l+0x5a0>
 8007f38:	f04f 0b00 	mov.w	fp, #0
 8007f3c:	f8cd b010 	str.w	fp, [sp, #16]
 8007f40:	f8cd b020 	str.w	fp, [sp, #32]
 8007f44:	f8cd b018 	str.w	fp, [sp, #24]
 8007f48:	2322      	movs	r3, #34	; 0x22
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	f04f 0900 	mov.w	r9, #0
 8007f52:	f8ca 3000 	str.w	r3, [sl]
 8007f56:	e789      	b.n	8007e6c <_strtod_l+0x48c>
 8007f58:	0801dc91 	.word	0x0801dc91
 8007f5c:	0801dcd4 	.word	0x0801dcd4
 8007f60:	0801dc89 	.word	0x0801dc89
 8007f64:	0801de14 	.word	0x0801de14
 8007f68:	7ff00000 	.word	0x7ff00000
 8007f6c:	0801e0c0 	.word	0x0801e0c0
 8007f70:	0801dfa0 	.word	0x0801dfa0
 8007f74:	0801df78 	.word	0x0801df78
 8007f78:	7ca00000 	.word	0x7ca00000
 8007f7c:	7fefffff 	.word	0x7fefffff
 8007f80:	f016 0310 	ands.w	r3, r6, #16
 8007f84:	bf18      	it	ne
 8007f86:	236a      	movne	r3, #106	; 0x6a
 8007f88:	4640      	mov	r0, r8
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4fb0      	ldr	r7, [pc, #704]	; (8008254 <_strtod_l+0x874>)
 8007f92:	07f2      	lsls	r2, r6, #31
 8007f94:	d504      	bpl.n	8007fa0 <_strtod_l+0x5c0>
 8007f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9a:	f7f8 fa9d 	bl	80004d8 <__aeabi_dmul>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	1076      	asrs	r6, r6, #1
 8007fa2:	f107 0708 	add.w	r7, r7, #8
 8007fa6:	d1f4      	bne.n	8007f92 <_strtod_l+0x5b2>
 8007fa8:	b10b      	cbz	r3, 8007fae <_strtod_l+0x5ce>
 8007faa:	4680      	mov	r8, r0
 8007fac:	4689      	mov	r9, r1
 8007fae:	9b05      	ldr	r3, [sp, #20]
 8007fb0:	b1c3      	cbz	r3, 8007fe4 <_strtod_l+0x604>
 8007fb2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007fb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	dd11      	ble.n	8007fe4 <_strtod_l+0x604>
 8007fc0:	2b1f      	cmp	r3, #31
 8007fc2:	f340 8127 	ble.w	8008214 <_strtod_l+0x834>
 8007fc6:	2b34      	cmp	r3, #52	; 0x34
 8007fc8:	bfd8      	it	le
 8007fca:	f04f 33ff 	movle.w	r3, #4294967295
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	bfcf      	iteee	gt
 8007fd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007fd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007fdc:	fa03 f202 	lslle.w	r2, r3, r2
 8007fe0:	ea02 0901 	andle.w	r9, r2, r1
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1a1      	bne.n	8007f38 <_strtod_l+0x558>
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4650      	mov	r0, sl
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	9908      	ldr	r1, [sp, #32]
 8008000:	f001 fe28 	bl	8009c54 <__s2b>
 8008004:	9008      	str	r0, [sp, #32]
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f af21 	beq.w	8007e4e <_strtod_l+0x46e>
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	1b5d      	subs	r5, r3, r5
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	f8cd b010 	str.w	fp, [sp, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	bfb4      	ite	lt
 800801e:	462b      	movlt	r3, r5
 8008020:	2300      	movge	r3, #0
 8008022:	930e      	str	r3, [sp, #56]	; 0x38
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800802a:	9314      	str	r3, [sp, #80]	; 0x50
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	4650      	mov	r0, sl
 8008030:	6859      	ldr	r1, [r3, #4]
 8008032:	f001 fd67 	bl	8009b04 <_Balloc>
 8008036:	9006      	str	r0, [sp, #24]
 8008038:	2800      	cmp	r0, #0
 800803a:	f43f af10 	beq.w	8007e5e <_strtod_l+0x47e>
 800803e:	9b08      	ldr	r3, [sp, #32]
 8008040:	300c      	adds	r0, #12
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	f103 010c 	add.w	r1, r3, #12
 8008048:	3202      	adds	r2, #2
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	f001 fd4c 	bl	8009ae8 <memcpy>
 8008050:	ab1c      	add	r3, sp, #112	; 0x70
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	ab1b      	add	r3, sp, #108	; 0x6c
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	4650      	mov	r0, sl
 800805e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008062:	f002 f939 	bl	800a2d8 <__d2b>
 8008066:	901a      	str	r0, [sp, #104]	; 0x68
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f aef8 	beq.w	8007e5e <_strtod_l+0x47e>
 800806e:	2101      	movs	r1, #1
 8008070:	4650      	mov	r0, sl
 8008072:	f001 fe87 	bl	8009d84 <__i2b>
 8008076:	4603      	mov	r3, r0
 8008078:	9004      	str	r0, [sp, #16]
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f aeef 	beq.w	8007e5e <_strtod_l+0x47e>
 8008080:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008082:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008084:	2d00      	cmp	r5, #0
 8008086:	bfab      	itete	ge
 8008088:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800808a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800808c:	18ee      	addge	r6, r5, r3
 800808e:	1b5c      	sublt	r4, r3, r5
 8008090:	9b05      	ldr	r3, [sp, #20]
 8008092:	bfa8      	it	ge
 8008094:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008096:	eba5 0503 	sub.w	r5, r5, r3
 800809a:	4415      	add	r5, r2
 800809c:	4b6e      	ldr	r3, [pc, #440]	; (8008258 <_strtod_l+0x878>)
 800809e:	f105 35ff 	add.w	r5, r5, #4294967295
 80080a2:	bfb8      	it	lt
 80080a4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80080a6:	429d      	cmp	r5, r3
 80080a8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080ac:	f280 80c4 	bge.w	8008238 <_strtod_l+0x858>
 80080b0:	1b5b      	subs	r3, r3, r5
 80080b2:	2b1f      	cmp	r3, #31
 80080b4:	f04f 0701 	mov.w	r7, #1
 80080b8:	eba2 0203 	sub.w	r2, r2, r3
 80080bc:	f300 80b1 	bgt.w	8008222 <_strtod_l+0x842>
 80080c0:	2500      	movs	r5, #0
 80080c2:	fa07 f303 	lsl.w	r3, r7, r3
 80080c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c8:	18b7      	adds	r7, r6, r2
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	42be      	cmp	r6, r7
 80080ce:	4414      	add	r4, r2
 80080d0:	441c      	add	r4, r3
 80080d2:	4633      	mov	r3, r6
 80080d4:	bfa8      	it	ge
 80080d6:	463b      	movge	r3, r7
 80080d8:	42a3      	cmp	r3, r4
 80080da:	bfa8      	it	ge
 80080dc:	4623      	movge	r3, r4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfc2      	ittt	gt
 80080e2:	1aff      	subgt	r7, r7, r3
 80080e4:	1ae4      	subgt	r4, r4, r3
 80080e6:	1af6      	subgt	r6, r6, r3
 80080e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd17      	ble.n	800811e <_strtod_l+0x73e>
 80080ee:	461a      	mov	r2, r3
 80080f0:	4650      	mov	r0, sl
 80080f2:	9904      	ldr	r1, [sp, #16]
 80080f4:	f001 ff04 	bl	8009f00 <__pow5mult>
 80080f8:	9004      	str	r0, [sp, #16]
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f43f aeaf 	beq.w	8007e5e <_strtod_l+0x47e>
 8008100:	4601      	mov	r1, r0
 8008102:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008104:	4650      	mov	r0, sl
 8008106:	f001 fe53 	bl	8009db0 <__multiply>
 800810a:	9009      	str	r0, [sp, #36]	; 0x24
 800810c:	2800      	cmp	r0, #0
 800810e:	f43f aea6 	beq.w	8007e5e <_strtod_l+0x47e>
 8008112:	4650      	mov	r0, sl
 8008114:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008116:	f001 fd35 	bl	8009b84 <_Bfree>
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	931a      	str	r3, [sp, #104]	; 0x68
 800811e:	2f00      	cmp	r7, #0
 8008120:	f300 808e 	bgt.w	8008240 <_strtod_l+0x860>
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	dd08      	ble.n	800813c <_strtod_l+0x75c>
 800812a:	4650      	mov	r0, sl
 800812c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800812e:	9906      	ldr	r1, [sp, #24]
 8008130:	f001 fee6 	bl	8009f00 <__pow5mult>
 8008134:	9006      	str	r0, [sp, #24]
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f ae91 	beq.w	8007e5e <_strtod_l+0x47e>
 800813c:	2c00      	cmp	r4, #0
 800813e:	dd08      	ble.n	8008152 <_strtod_l+0x772>
 8008140:	4622      	mov	r2, r4
 8008142:	4650      	mov	r0, sl
 8008144:	9906      	ldr	r1, [sp, #24]
 8008146:	f001 ff35 	bl	8009fb4 <__lshift>
 800814a:	9006      	str	r0, [sp, #24]
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f ae86 	beq.w	8007e5e <_strtod_l+0x47e>
 8008152:	2e00      	cmp	r6, #0
 8008154:	dd08      	ble.n	8008168 <_strtod_l+0x788>
 8008156:	4632      	mov	r2, r6
 8008158:	4650      	mov	r0, sl
 800815a:	9904      	ldr	r1, [sp, #16]
 800815c:	f001 ff2a 	bl	8009fb4 <__lshift>
 8008160:	9004      	str	r0, [sp, #16]
 8008162:	2800      	cmp	r0, #0
 8008164:	f43f ae7b 	beq.w	8007e5e <_strtod_l+0x47e>
 8008168:	4650      	mov	r0, sl
 800816a:	9a06      	ldr	r2, [sp, #24]
 800816c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800816e:	f001 ffad 	bl	800a0cc <__mdiff>
 8008172:	4683      	mov	fp, r0
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f ae72 	beq.w	8007e5e <_strtod_l+0x47e>
 800817a:	2400      	movs	r4, #0
 800817c:	68c3      	ldr	r3, [r0, #12]
 800817e:	9904      	ldr	r1, [sp, #16]
 8008180:	60c4      	str	r4, [r0, #12]
 8008182:	930b      	str	r3, [sp, #44]	; 0x2c
 8008184:	f001 ff86 	bl	800a094 <__mcmp>
 8008188:	42a0      	cmp	r0, r4
 800818a:	da6b      	bge.n	8008264 <_strtod_l+0x884>
 800818c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818e:	ea53 0308 	orrs.w	r3, r3, r8
 8008192:	f040 8091 	bne.w	80082b8 <_strtod_l+0x8d8>
 8008196:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800819a:	2b00      	cmp	r3, #0
 800819c:	f040 808c 	bne.w	80082b8 <_strtod_l+0x8d8>
 80081a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081a4:	0d1b      	lsrs	r3, r3, #20
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081ac:	f240 8084 	bls.w	80082b8 <_strtod_l+0x8d8>
 80081b0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80081b4:	b91b      	cbnz	r3, 80081be <_strtod_l+0x7de>
 80081b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	dd7c      	ble.n	80082b8 <_strtod_l+0x8d8>
 80081be:	4659      	mov	r1, fp
 80081c0:	2201      	movs	r2, #1
 80081c2:	4650      	mov	r0, sl
 80081c4:	f001 fef6 	bl	8009fb4 <__lshift>
 80081c8:	9904      	ldr	r1, [sp, #16]
 80081ca:	4683      	mov	fp, r0
 80081cc:	f001 ff62 	bl	800a094 <__mcmp>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	dd71      	ble.n	80082b8 <_strtod_l+0x8d8>
 80081d4:	9905      	ldr	r1, [sp, #20]
 80081d6:	464b      	mov	r3, r9
 80081d8:	4a20      	ldr	r2, [pc, #128]	; (800825c <_strtod_l+0x87c>)
 80081da:	2900      	cmp	r1, #0
 80081dc:	f000 808c 	beq.w	80082f8 <_strtod_l+0x918>
 80081e0:	ea02 0109 	and.w	r1, r2, r9
 80081e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081e8:	f300 8086 	bgt.w	80082f8 <_strtod_l+0x918>
 80081ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081f0:	f77f aeaa 	ble.w	8007f48 <_strtod_l+0x568>
 80081f4:	4640      	mov	r0, r8
 80081f6:	4649      	mov	r1, r9
 80081f8:	4b19      	ldr	r3, [pc, #100]	; (8008260 <_strtod_l+0x880>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	f7f8 f96c 	bl	80004d8 <__aeabi_dmul>
 8008200:	460b      	mov	r3, r1
 8008202:	4303      	orrs	r3, r0
 8008204:	bf08      	it	eq
 8008206:	2322      	moveq	r3, #34	; 0x22
 8008208:	4680      	mov	r8, r0
 800820a:	4689      	mov	r9, r1
 800820c:	bf08      	it	eq
 800820e:	f8ca 3000 	streq.w	r3, [sl]
 8008212:	e62f      	b.n	8007e74 <_strtod_l+0x494>
 8008214:	f04f 32ff 	mov.w	r2, #4294967295
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	ea03 0808 	and.w	r8, r3, r8
 8008220:	e6e0      	b.n	8007fe4 <_strtod_l+0x604>
 8008222:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008226:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800822a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800822e:	35e2      	adds	r5, #226	; 0xe2
 8008230:	fa07 f505 	lsl.w	r5, r7, r5
 8008234:	970f      	str	r7, [sp, #60]	; 0x3c
 8008236:	e747      	b.n	80080c8 <_strtod_l+0x6e8>
 8008238:	2301      	movs	r3, #1
 800823a:	2500      	movs	r5, #0
 800823c:	930f      	str	r3, [sp, #60]	; 0x3c
 800823e:	e743      	b.n	80080c8 <_strtod_l+0x6e8>
 8008240:	463a      	mov	r2, r7
 8008242:	4650      	mov	r0, sl
 8008244:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008246:	f001 feb5 	bl	8009fb4 <__lshift>
 800824a:	901a      	str	r0, [sp, #104]	; 0x68
 800824c:	2800      	cmp	r0, #0
 800824e:	f47f af69 	bne.w	8008124 <_strtod_l+0x744>
 8008252:	e604      	b.n	8007e5e <_strtod_l+0x47e>
 8008254:	0801dce8 	.word	0x0801dce8
 8008258:	fffffc02 	.word	0xfffffc02
 800825c:	7ff00000 	.word	0x7ff00000
 8008260:	39500000 	.word	0x39500000
 8008264:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008268:	d165      	bne.n	8008336 <_strtod_l+0x956>
 800826a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800826c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008270:	b35a      	cbz	r2, 80082ca <_strtod_l+0x8ea>
 8008272:	4a99      	ldr	r2, [pc, #612]	; (80084d8 <_strtod_l+0xaf8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d12b      	bne.n	80082d0 <_strtod_l+0x8f0>
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	4641      	mov	r1, r8
 800827c:	b303      	cbz	r3, 80082c0 <_strtod_l+0x8e0>
 800827e:	464a      	mov	r2, r9
 8008280:	4b96      	ldr	r3, [pc, #600]	; (80084dc <_strtod_l+0xafc>)
 8008282:	4013      	ands	r3, r2
 8008284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008288:	f04f 32ff 	mov.w	r2, #4294967295
 800828c:	d81b      	bhi.n	80082c6 <_strtod_l+0x8e6>
 800828e:	0d1b      	lsrs	r3, r3, #20
 8008290:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	4299      	cmp	r1, r3
 800829a:	d119      	bne.n	80082d0 <_strtod_l+0x8f0>
 800829c:	4b90      	ldr	r3, [pc, #576]	; (80084e0 <_strtod_l+0xb00>)
 800829e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d102      	bne.n	80082aa <_strtod_l+0x8ca>
 80082a4:	3101      	adds	r1, #1
 80082a6:	f43f adda 	beq.w	8007e5e <_strtod_l+0x47e>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	4b8b      	ldr	r3, [pc, #556]	; (80084dc <_strtod_l+0xafc>)
 80082b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b2:	401a      	ands	r2, r3
 80082b4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d19a      	bne.n	80081f4 <_strtod_l+0x814>
 80082be:	e5d9      	b.n	8007e74 <_strtod_l+0x494>
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	e7e8      	b.n	8008298 <_strtod_l+0x8b8>
 80082c6:	4613      	mov	r3, r2
 80082c8:	e7e6      	b.n	8008298 <_strtod_l+0x8b8>
 80082ca:	ea53 0308 	orrs.w	r3, r3, r8
 80082ce:	d081      	beq.n	80081d4 <_strtod_l+0x7f4>
 80082d0:	b1e5      	cbz	r5, 800830c <_strtod_l+0x92c>
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	421d      	tst	r5, r3
 80082d6:	d0ef      	beq.n	80082b8 <_strtod_l+0x8d8>
 80082d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	9a05      	ldr	r2, [sp, #20]
 80082e0:	b1c3      	cbz	r3, 8008314 <_strtod_l+0x934>
 80082e2:	f7ff fb59 	bl	8007998 <sulp>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ee:	f7f7 ff3d 	bl	800016c <__adddf3>
 80082f2:	4680      	mov	r8, r0
 80082f4:	4689      	mov	r9, r1
 80082f6:	e7df      	b.n	80082b8 <_strtod_l+0x8d8>
 80082f8:	4013      	ands	r3, r2
 80082fa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082fe:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008302:	f04f 38ff 	mov.w	r8, #4294967295
 8008306:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800830a:	e7d5      	b.n	80082b8 <_strtod_l+0x8d8>
 800830c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830e:	ea13 0f08 	tst.w	r3, r8
 8008312:	e7e0      	b.n	80082d6 <_strtod_l+0x8f6>
 8008314:	f7ff fb40 	bl	8007998 <sulp>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008320:	f7f7 ff22 	bl	8000168 <__aeabi_dsub>
 8008324:	2200      	movs	r2, #0
 8008326:	2300      	movs	r3, #0
 8008328:	4680      	mov	r8, r0
 800832a:	4689      	mov	r9, r1
 800832c:	f7f8 fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008330:	2800      	cmp	r0, #0
 8008332:	d0c1      	beq.n	80082b8 <_strtod_l+0x8d8>
 8008334:	e608      	b.n	8007f48 <_strtod_l+0x568>
 8008336:	4658      	mov	r0, fp
 8008338:	9904      	ldr	r1, [sp, #16]
 800833a:	f002 f829 	bl	800a390 <__ratio>
 800833e:	2200      	movs	r2, #0
 8008340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f8 fb42 	bl	80009d0 <__aeabi_dcmple>
 800834c:	2800      	cmp	r0, #0
 800834e:	d070      	beq.n	8008432 <_strtod_l+0xa52>
 8008350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d042      	beq.n	80083dc <_strtod_l+0x9fc>
 8008356:	2600      	movs	r6, #0
 8008358:	4f62      	ldr	r7, [pc, #392]	; (80084e4 <_strtod_l+0xb04>)
 800835a:	4d62      	ldr	r5, [pc, #392]	; (80084e4 <_strtod_l+0xb04>)
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008362:	0d1b      	lsrs	r3, r3, #20
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	930f      	str	r3, [sp, #60]	; 0x3c
 8008368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800836a:	4b5f      	ldr	r3, [pc, #380]	; (80084e8 <_strtod_l+0xb08>)
 800836c:	429a      	cmp	r2, r3
 800836e:	f040 80c3 	bne.w	80084f8 <_strtod_l+0xb18>
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	4640      	mov	r0, r8
 8008376:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800837a:	4649      	mov	r1, r9
 800837c:	f001 ff32 	bl	800a1e4 <__ulp>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f8a6 	bl	80004d8 <__aeabi_dmul>
 800838c:	4642      	mov	r2, r8
 800838e:	464b      	mov	r3, r9
 8008390:	f7f7 feec 	bl	800016c <__adddf3>
 8008394:	460b      	mov	r3, r1
 8008396:	4951      	ldr	r1, [pc, #324]	; (80084dc <_strtod_l+0xafc>)
 8008398:	4a54      	ldr	r2, [pc, #336]	; (80084ec <_strtod_l+0xb0c>)
 800839a:	4019      	ands	r1, r3
 800839c:	4291      	cmp	r1, r2
 800839e:	4680      	mov	r8, r0
 80083a0:	d95d      	bls.n	800845e <_strtod_l+0xa7e>
 80083a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083a4:	4b4e      	ldr	r3, [pc, #312]	; (80084e0 <_strtod_l+0xb00>)
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d103      	bne.n	80083b2 <_strtod_l+0x9d2>
 80083aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ac:	3301      	adds	r3, #1
 80083ae:	f43f ad56 	beq.w	8007e5e <_strtod_l+0x47e>
 80083b2:	f04f 38ff 	mov.w	r8, #4294967295
 80083b6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80084e0 <_strtod_l+0xb00>
 80083ba:	4650      	mov	r0, sl
 80083bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083be:	f001 fbe1 	bl	8009b84 <_Bfree>
 80083c2:	4650      	mov	r0, sl
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	f001 fbdd 	bl	8009b84 <_Bfree>
 80083ca:	4650      	mov	r0, sl
 80083cc:	9904      	ldr	r1, [sp, #16]
 80083ce:	f001 fbd9 	bl	8009b84 <_Bfree>
 80083d2:	4659      	mov	r1, fp
 80083d4:	4650      	mov	r0, sl
 80083d6:	f001 fbd5 	bl	8009b84 <_Bfree>
 80083da:	e627      	b.n	800802c <_strtod_l+0x64c>
 80083dc:	f1b8 0f00 	cmp.w	r8, #0
 80083e0:	d119      	bne.n	8008416 <_strtod_l+0xa36>
 80083e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083e8:	b9e3      	cbnz	r3, 8008424 <_strtod_l+0xa44>
 80083ea:	2200      	movs	r2, #0
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	4b3c      	ldr	r3, [pc, #240]	; (80084e4 <_strtod_l+0xb04>)
 80083f2:	f7f8 fae3 	bl	80009bc <__aeabi_dcmplt>
 80083f6:	b9c8      	cbnz	r0, 800842c <_strtod_l+0xa4c>
 80083f8:	2200      	movs	r2, #0
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	4b3c      	ldr	r3, [pc, #240]	; (80084f0 <_strtod_l+0xb10>)
 8008400:	f7f8 f86a 	bl	80004d8 <__aeabi_dmul>
 8008404:	4604      	mov	r4, r0
 8008406:	460d      	mov	r5, r1
 8008408:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800840c:	9416      	str	r4, [sp, #88]	; 0x58
 800840e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008410:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008414:	e7a2      	b.n	800835c <_strtod_l+0x97c>
 8008416:	f1b8 0f01 	cmp.w	r8, #1
 800841a:	d103      	bne.n	8008424 <_strtod_l+0xa44>
 800841c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	f43f ad92 	beq.w	8007f48 <_strtod_l+0x568>
 8008424:	2600      	movs	r6, #0
 8008426:	2400      	movs	r4, #0
 8008428:	4f32      	ldr	r7, [pc, #200]	; (80084f4 <_strtod_l+0xb14>)
 800842a:	e796      	b.n	800835a <_strtod_l+0x97a>
 800842c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800842e:	4d30      	ldr	r5, [pc, #192]	; (80084f0 <_strtod_l+0xb10>)
 8008430:	e7ea      	b.n	8008408 <_strtod_l+0xa28>
 8008432:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <_strtod_l+0xb10>)
 8008434:	2200      	movs	r2, #0
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 f84d 	bl	80004d8 <__aeabi_dmul>
 800843e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	b933      	cbnz	r3, 8008454 <_strtod_l+0xa74>
 8008446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800844a:	9010      	str	r0, [sp, #64]	; 0x40
 800844c:	9311      	str	r3, [sp, #68]	; 0x44
 800844e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008452:	e783      	b.n	800835c <_strtod_l+0x97c>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800845c:	e7f7      	b.n	800844e <_strtod_l+0xa6e>
 800845e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1a8      	bne.n	80083ba <_strtod_l+0x9da>
 8008468:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800846c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	051b      	lsls	r3, r3, #20
 8008472:	429a      	cmp	r2, r3
 8008474:	d1a1      	bne.n	80083ba <_strtod_l+0x9da>
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f8 fdf3 	bl	8001064 <__aeabi_d2lz>
 800847e:	f7f7 fffd 	bl	800047c <__aeabi_l2d>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f7 fe6d 	bl	8000168 <__aeabi_dsub>
 800848e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008494:	ea43 0308 	orr.w	r3, r3, r8
 8008498:	4313      	orrs	r3, r2
 800849a:	4604      	mov	r4, r0
 800849c:	460d      	mov	r5, r1
 800849e:	d066      	beq.n	800856e <_strtod_l+0xb8e>
 80084a0:	a309      	add	r3, pc, #36	; (adr r3, 80084c8 <_strtod_l+0xae8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 fa89 	bl	80009bc <__aeabi_dcmplt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f47f ace2 	bne.w	8007e74 <_strtod_l+0x494>
 80084b0:	a307      	add	r3, pc, #28	; (adr r3, 80084d0 <_strtod_l+0xaf0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 fa9d 	bl	80009f8 <__aeabi_dcmpgt>
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f af7b 	beq.w	80083ba <_strtod_l+0x9da>
 80084c4:	e4d6      	b.n	8007e74 <_strtod_l+0x494>
 80084c6:	bf00      	nop
 80084c8:	94a03595 	.word	0x94a03595
 80084cc:	3fdfffff 	.word	0x3fdfffff
 80084d0:	35afe535 	.word	0x35afe535
 80084d4:	3fe00000 	.word	0x3fe00000
 80084d8:	000fffff 	.word	0x000fffff
 80084dc:	7ff00000 	.word	0x7ff00000
 80084e0:	7fefffff 	.word	0x7fefffff
 80084e4:	3ff00000 	.word	0x3ff00000
 80084e8:	7fe00000 	.word	0x7fe00000
 80084ec:	7c9fffff 	.word	0x7c9fffff
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	bff00000 	.word	0xbff00000
 80084f8:	9b05      	ldr	r3, [sp, #20]
 80084fa:	b313      	cbz	r3, 8008542 <_strtod_l+0xb62>
 80084fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008502:	d81e      	bhi.n	8008542 <_strtod_l+0xb62>
 8008504:	a326      	add	r3, pc, #152	; (adr r3, 80085a0 <_strtod_l+0xbc0>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f8 fa5f 	bl	80009d0 <__aeabi_dcmple>
 8008512:	b190      	cbz	r0, 800853a <_strtod_l+0xb5a>
 8008514:	4629      	mov	r1, r5
 8008516:	4620      	mov	r0, r4
 8008518:	f7f8 fab6 	bl	8000a88 <__aeabi_d2uiz>
 800851c:	2801      	cmp	r0, #1
 800851e:	bf38      	it	cc
 8008520:	2001      	movcc	r0, #1
 8008522:	f7f7 ff5f 	bl	80003e4 <__aeabi_ui2d>
 8008526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	b9d3      	cbnz	r3, 8008564 <_strtod_l+0xb84>
 800852e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008532:	9012      	str	r0, [sp, #72]	; 0x48
 8008534:	9313      	str	r3, [sp, #76]	; 0x4c
 8008536:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800853a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800853c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008540:	1a9f      	subs	r7, r3, r2
 8008542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008546:	f001 fe4d 	bl	800a1e4 <__ulp>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4630      	mov	r0, r6
 8008550:	4639      	mov	r1, r7
 8008552:	f7f7 ffc1 	bl	80004d8 <__aeabi_dmul>
 8008556:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800855a:	f7f7 fe07 	bl	800016c <__adddf3>
 800855e:	4680      	mov	r8, r0
 8008560:	4689      	mov	r9, r1
 8008562:	e77e      	b.n	8008462 <_strtod_l+0xa82>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800856c:	e7e3      	b.n	8008536 <_strtod_l+0xb56>
 800856e:	a30e      	add	r3, pc, #56	; (adr r3, 80085a8 <_strtod_l+0xbc8>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f8 fa22 	bl	80009bc <__aeabi_dcmplt>
 8008578:	e7a1      	b.n	80084be <_strtod_l+0xade>
 800857a:	2300      	movs	r3, #0
 800857c:	930a      	str	r3, [sp, #40]	; 0x28
 800857e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008580:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	f7ff ba71 	b.w	8007a6a <_strtod_l+0x8a>
 8008588:	2a65      	cmp	r2, #101	; 0x65
 800858a:	f43f ab63 	beq.w	8007c54 <_strtod_l+0x274>
 800858e:	2a45      	cmp	r2, #69	; 0x45
 8008590:	f43f ab60 	beq.w	8007c54 <_strtod_l+0x274>
 8008594:	2301      	movs	r3, #1
 8008596:	f7ff bb95 	b.w	8007cc4 <_strtod_l+0x2e4>
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w
 80085a0:	ffc00000 	.word	0xffc00000
 80085a4:	41dfffff 	.word	0x41dfffff
 80085a8:	94a03595 	.word	0x94a03595
 80085ac:	3fcfffff 	.word	0x3fcfffff

080085b0 <_strtod_r>:
 80085b0:	4b01      	ldr	r3, [pc, #4]	; (80085b8 <_strtod_r+0x8>)
 80085b2:	f7ff ba15 	b.w	80079e0 <_strtod_l>
 80085b6:	bf00      	nop
 80085b8:	20000078 	.word	0x20000078

080085bc <_strtol_l.constprop.0>:
 80085bc:	2b01      	cmp	r3, #1
 80085be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c2:	4680      	mov	r8, r0
 80085c4:	d001      	beq.n	80085ca <_strtol_l.constprop.0+0xe>
 80085c6:	2b24      	cmp	r3, #36	; 0x24
 80085c8:	d906      	bls.n	80085d8 <_strtol_l.constprop.0+0x1c>
 80085ca:	f7fe fb07 	bl	8006bdc <__errno>
 80085ce:	2316      	movs	r3, #22
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	2000      	movs	r0, #0
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	460d      	mov	r5, r1
 80085da:	4f35      	ldr	r7, [pc, #212]	; (80086b0 <_strtol_l.constprop.0+0xf4>)
 80085dc:	4628      	mov	r0, r5
 80085de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085e2:	5de6      	ldrb	r6, [r4, r7]
 80085e4:	f016 0608 	ands.w	r6, r6, #8
 80085e8:	d1f8      	bne.n	80085dc <_strtol_l.constprop.0+0x20>
 80085ea:	2c2d      	cmp	r4, #45	; 0x2d
 80085ec:	d12f      	bne.n	800864e <_strtol_l.constprop.0+0x92>
 80085ee:	2601      	movs	r6, #1
 80085f0:	782c      	ldrb	r4, [r5, #0]
 80085f2:	1c85      	adds	r5, r0, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d057      	beq.n	80086a8 <_strtol_l.constprop.0+0xec>
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d109      	bne.n	8008610 <_strtol_l.constprop.0+0x54>
 80085fc:	2c30      	cmp	r4, #48	; 0x30
 80085fe:	d107      	bne.n	8008610 <_strtol_l.constprop.0+0x54>
 8008600:	7828      	ldrb	r0, [r5, #0]
 8008602:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008606:	2858      	cmp	r0, #88	; 0x58
 8008608:	d149      	bne.n	800869e <_strtol_l.constprop.0+0xe2>
 800860a:	2310      	movs	r3, #16
 800860c:	786c      	ldrb	r4, [r5, #1]
 800860e:	3502      	adds	r5, #2
 8008610:	2700      	movs	r7, #0
 8008612:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008616:	f10e 3eff 	add.w	lr, lr, #4294967295
 800861a:	fbbe f9f3 	udiv	r9, lr, r3
 800861e:	4638      	mov	r0, r7
 8008620:	fb03 ea19 	mls	sl, r3, r9, lr
 8008624:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008628:	f1bc 0f09 	cmp.w	ip, #9
 800862c:	d814      	bhi.n	8008658 <_strtol_l.constprop.0+0x9c>
 800862e:	4664      	mov	r4, ip
 8008630:	42a3      	cmp	r3, r4
 8008632:	dd22      	ble.n	800867a <_strtol_l.constprop.0+0xbe>
 8008634:	2f00      	cmp	r7, #0
 8008636:	db1d      	blt.n	8008674 <_strtol_l.constprop.0+0xb8>
 8008638:	4581      	cmp	r9, r0
 800863a:	d31b      	bcc.n	8008674 <_strtol_l.constprop.0+0xb8>
 800863c:	d101      	bne.n	8008642 <_strtol_l.constprop.0+0x86>
 800863e:	45a2      	cmp	sl, r4
 8008640:	db18      	blt.n	8008674 <_strtol_l.constprop.0+0xb8>
 8008642:	2701      	movs	r7, #1
 8008644:	fb00 4003 	mla	r0, r0, r3, r4
 8008648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800864c:	e7ea      	b.n	8008624 <_strtol_l.constprop.0+0x68>
 800864e:	2c2b      	cmp	r4, #43	; 0x2b
 8008650:	bf04      	itt	eq
 8008652:	782c      	ldrbeq	r4, [r5, #0]
 8008654:	1c85      	addeq	r5, r0, #2
 8008656:	e7cd      	b.n	80085f4 <_strtol_l.constprop.0+0x38>
 8008658:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800865c:	f1bc 0f19 	cmp.w	ip, #25
 8008660:	d801      	bhi.n	8008666 <_strtol_l.constprop.0+0xaa>
 8008662:	3c37      	subs	r4, #55	; 0x37
 8008664:	e7e4      	b.n	8008630 <_strtol_l.constprop.0+0x74>
 8008666:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800866a:	f1bc 0f19 	cmp.w	ip, #25
 800866e:	d804      	bhi.n	800867a <_strtol_l.constprop.0+0xbe>
 8008670:	3c57      	subs	r4, #87	; 0x57
 8008672:	e7dd      	b.n	8008630 <_strtol_l.constprop.0+0x74>
 8008674:	f04f 37ff 	mov.w	r7, #4294967295
 8008678:	e7e6      	b.n	8008648 <_strtol_l.constprop.0+0x8c>
 800867a:	2f00      	cmp	r7, #0
 800867c:	da07      	bge.n	800868e <_strtol_l.constprop.0+0xd2>
 800867e:	2322      	movs	r3, #34	; 0x22
 8008680:	4670      	mov	r0, lr
 8008682:	f8c8 3000 	str.w	r3, [r8]
 8008686:	2a00      	cmp	r2, #0
 8008688:	d0a4      	beq.n	80085d4 <_strtol_l.constprop.0+0x18>
 800868a:	1e69      	subs	r1, r5, #1
 800868c:	e005      	b.n	800869a <_strtol_l.constprop.0+0xde>
 800868e:	b106      	cbz	r6, 8008692 <_strtol_l.constprop.0+0xd6>
 8008690:	4240      	negs	r0, r0
 8008692:	2a00      	cmp	r2, #0
 8008694:	d09e      	beq.n	80085d4 <_strtol_l.constprop.0+0x18>
 8008696:	2f00      	cmp	r7, #0
 8008698:	d1f7      	bne.n	800868a <_strtol_l.constprop.0+0xce>
 800869a:	6011      	str	r1, [r2, #0]
 800869c:	e79a      	b.n	80085d4 <_strtol_l.constprop.0+0x18>
 800869e:	2430      	movs	r4, #48	; 0x30
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1b5      	bne.n	8008610 <_strtol_l.constprop.0+0x54>
 80086a4:	2308      	movs	r3, #8
 80086a6:	e7b3      	b.n	8008610 <_strtol_l.constprop.0+0x54>
 80086a8:	2c30      	cmp	r4, #48	; 0x30
 80086aa:	d0a9      	beq.n	8008600 <_strtol_l.constprop.0+0x44>
 80086ac:	230a      	movs	r3, #10
 80086ae:	e7af      	b.n	8008610 <_strtol_l.constprop.0+0x54>
 80086b0:	0801dd11 	.word	0x0801dd11

080086b4 <_strtol_r>:
 80086b4:	f7ff bf82 	b.w	80085bc <_strtol_l.constprop.0>

080086b8 <strtol>:
 80086b8:	4613      	mov	r3, r2
 80086ba:	460a      	mov	r2, r1
 80086bc:	4601      	mov	r1, r0
 80086be:	4802      	ldr	r0, [pc, #8]	; (80086c8 <strtol+0x10>)
 80086c0:	6800      	ldr	r0, [r0, #0]
 80086c2:	f7ff bf7b 	b.w	80085bc <_strtol_l.constprop.0>
 80086c6:	bf00      	nop
 80086c8:	20000010 	.word	0x20000010

080086cc <quorem>:
 80086cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	6903      	ldr	r3, [r0, #16]
 80086d2:	690c      	ldr	r4, [r1, #16]
 80086d4:	4607      	mov	r7, r0
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	f2c0 8082 	blt.w	80087e0 <quorem+0x114>
 80086dc:	3c01      	subs	r4, #1
 80086de:	f100 0514 	add.w	r5, r0, #20
 80086e2:	f101 0814 	add.w	r8, r1, #20
 80086e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086f4:	3301      	adds	r3, #1
 80086f6:	429a      	cmp	r2, r3
 80086f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80086fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008704:	d331      	bcc.n	800876a <quorem+0x9e>
 8008706:	f04f 0e00 	mov.w	lr, #0
 800870a:	4640      	mov	r0, r8
 800870c:	46ac      	mov	ip, r5
 800870e:	46f2      	mov	sl, lr
 8008710:	f850 2b04 	ldr.w	r2, [r0], #4
 8008714:	b293      	uxth	r3, r2
 8008716:	fb06 e303 	mla	r3, r6, r3, lr
 800871a:	0c12      	lsrs	r2, r2, #16
 800871c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008720:	b29b      	uxth	r3, r3
 8008722:	fb06 e202 	mla	r2, r6, r2, lr
 8008726:	ebaa 0303 	sub.w	r3, sl, r3
 800872a:	f8dc a000 	ldr.w	sl, [ip]
 800872e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008732:	fa1f fa8a 	uxth.w	sl, sl
 8008736:	4453      	add	r3, sl
 8008738:	f8dc a000 	ldr.w	sl, [ip]
 800873c:	b292      	uxth	r2, r2
 800873e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008746:	b29b      	uxth	r3, r3
 8008748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800874c:	4581      	cmp	r9, r0
 800874e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008752:	f84c 3b04 	str.w	r3, [ip], #4
 8008756:	d2db      	bcs.n	8008710 <quorem+0x44>
 8008758:	f855 300b 	ldr.w	r3, [r5, fp]
 800875c:	b92b      	cbnz	r3, 800876a <quorem+0x9e>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	3b04      	subs	r3, #4
 8008762:	429d      	cmp	r5, r3
 8008764:	461a      	mov	r2, r3
 8008766:	d32f      	bcc.n	80087c8 <quorem+0xfc>
 8008768:	613c      	str	r4, [r7, #16]
 800876a:	4638      	mov	r0, r7
 800876c:	f001 fc92 	bl	800a094 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	db25      	blt.n	80087c0 <quorem+0xf4>
 8008774:	4628      	mov	r0, r5
 8008776:	f04f 0c00 	mov.w	ip, #0
 800877a:	3601      	adds	r6, #1
 800877c:	f858 1b04 	ldr.w	r1, [r8], #4
 8008780:	f8d0 e000 	ldr.w	lr, [r0]
 8008784:	b28b      	uxth	r3, r1
 8008786:	ebac 0303 	sub.w	r3, ip, r3
 800878a:	fa1f f28e 	uxth.w	r2, lr
 800878e:	4413      	add	r3, r2
 8008790:	0c0a      	lsrs	r2, r1, #16
 8008792:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800879a:	b29b      	uxth	r3, r3
 800879c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087a0:	45c1      	cmp	r9, r8
 80087a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087a6:	f840 3b04 	str.w	r3, [r0], #4
 80087aa:	d2e7      	bcs.n	800877c <quorem+0xb0>
 80087ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b4:	b922      	cbnz	r2, 80087c0 <quorem+0xf4>
 80087b6:	3b04      	subs	r3, #4
 80087b8:	429d      	cmp	r5, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	d30a      	bcc.n	80087d4 <quorem+0x108>
 80087be:	613c      	str	r4, [r7, #16]
 80087c0:	4630      	mov	r0, r6
 80087c2:	b003      	add	sp, #12
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	3b04      	subs	r3, #4
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d1cb      	bne.n	8008768 <quorem+0x9c>
 80087d0:	3c01      	subs	r4, #1
 80087d2:	e7c6      	b.n	8008762 <quorem+0x96>
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	3b04      	subs	r3, #4
 80087d8:	2a00      	cmp	r2, #0
 80087da:	d1f0      	bne.n	80087be <quorem+0xf2>
 80087dc:	3c01      	subs	r4, #1
 80087de:	e7eb      	b.n	80087b8 <quorem+0xec>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7ee      	b.n	80087c2 <quorem+0xf6>
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4616      	mov	r6, r2
 80087ee:	461f      	mov	r7, r3
 80087f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80087f2:	b099      	sub	sp, #100	; 0x64
 80087f4:	4605      	mov	r5, r0
 80087f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80087fe:	b974      	cbnz	r4, 800881e <_dtoa_r+0x36>
 8008800:	2010      	movs	r0, #16
 8008802:	f001 f949 	bl	8009a98 <malloc>
 8008806:	4602      	mov	r2, r0
 8008808:	6268      	str	r0, [r5, #36]	; 0x24
 800880a:	b920      	cbnz	r0, 8008816 <_dtoa_r+0x2e>
 800880c:	21ea      	movs	r1, #234	; 0xea
 800880e:	4ba8      	ldr	r3, [pc, #672]	; (8008ab0 <_dtoa_r+0x2c8>)
 8008810:	48a8      	ldr	r0, [pc, #672]	; (8008ab4 <_dtoa_r+0x2cc>)
 8008812:	f002 f8b3 	bl	800a97c <__assert_func>
 8008816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800881a:	6004      	str	r4, [r0, #0]
 800881c:	60c4      	str	r4, [r0, #12]
 800881e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	b151      	cbz	r1, 800883a <_dtoa_r+0x52>
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	2301      	movs	r3, #1
 8008828:	4093      	lsls	r3, r2
 800882a:	604a      	str	r2, [r1, #4]
 800882c:	608b      	str	r3, [r1, #8]
 800882e:	4628      	mov	r0, r5
 8008830:	f001 f9a8 	bl	8009b84 <_Bfree>
 8008834:	2200      	movs	r2, #0
 8008836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	1e3b      	subs	r3, r7, #0
 800883c:	bfaf      	iteee	ge
 800883e:	2300      	movge	r3, #0
 8008840:	2201      	movlt	r2, #1
 8008842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008846:	9305      	strlt	r3, [sp, #20]
 8008848:	bfa8      	it	ge
 800884a:	f8c8 3000 	strge.w	r3, [r8]
 800884e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008852:	4b99      	ldr	r3, [pc, #612]	; (8008ab8 <_dtoa_r+0x2d0>)
 8008854:	bfb8      	it	lt
 8008856:	f8c8 2000 	strlt.w	r2, [r8]
 800885a:	ea33 0309 	bics.w	r3, r3, r9
 800885e:	d119      	bne.n	8008894 <_dtoa_r+0xac>
 8008860:	f242 730f 	movw	r3, #9999	; 0x270f
 8008864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800886c:	4333      	orrs	r3, r6
 800886e:	f000 857f 	beq.w	8009370 <_dtoa_r+0xb88>
 8008872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008874:	b953      	cbnz	r3, 800888c <_dtoa_r+0xa4>
 8008876:	4b91      	ldr	r3, [pc, #580]	; (8008abc <_dtoa_r+0x2d4>)
 8008878:	e022      	b.n	80088c0 <_dtoa_r+0xd8>
 800887a:	4b91      	ldr	r3, [pc, #580]	; (8008ac0 <_dtoa_r+0x2d8>)
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	3308      	adds	r3, #8
 8008880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	9803      	ldr	r0, [sp, #12]
 8008886:	b019      	add	sp, #100	; 0x64
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	4b8b      	ldr	r3, [pc, #556]	; (8008abc <_dtoa_r+0x2d4>)
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	3303      	adds	r3, #3
 8008892:	e7f5      	b.n	8008880 <_dtoa_r+0x98>
 8008894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800889c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088a0:	2200      	movs	r2, #0
 80088a2:	2300      	movs	r3, #0
 80088a4:	f7f8 f880 	bl	80009a8 <__aeabi_dcmpeq>
 80088a8:	4680      	mov	r8, r0
 80088aa:	b158      	cbz	r0, 80088c4 <_dtoa_r+0xdc>
 80088ac:	2301      	movs	r3, #1
 80088ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8558 	beq.w	800936a <_dtoa_r+0xb82>
 80088ba:	4882      	ldr	r0, [pc, #520]	; (8008ac4 <_dtoa_r+0x2dc>)
 80088bc:	6018      	str	r0, [r3, #0]
 80088be:	1e43      	subs	r3, r0, #1
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	e7df      	b.n	8008884 <_dtoa_r+0x9c>
 80088c4:	ab16      	add	r3, sp, #88	; 0x58
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	ab17      	add	r3, sp, #92	; 0x5c
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4628      	mov	r0, r5
 80088ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80088d2:	f001 fd01 	bl	800a2d8 <__d2b>
 80088d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80088da:	4683      	mov	fp, r0
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d07f      	beq.n	80089e0 <_dtoa_r+0x1f8>
 80088e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80088ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80088f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80088f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b72      	ldr	r3, [pc, #456]	; (8008ac8 <_dtoa_r+0x2e0>)
 80088fe:	f7f7 fc33 	bl	8000168 <__aeabi_dsub>
 8008902:	a365      	add	r3, pc, #404	; (adr r3, 8008a98 <_dtoa_r+0x2b0>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fde6 	bl	80004d8 <__aeabi_dmul>
 800890c:	a364      	add	r3, pc, #400	; (adr r3, 8008aa0 <_dtoa_r+0x2b8>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fc2b 	bl	800016c <__adddf3>
 8008916:	4606      	mov	r6, r0
 8008918:	4620      	mov	r0, r4
 800891a:	460f      	mov	r7, r1
 800891c:	f7f7 fd72 	bl	8000404 <__aeabi_i2d>
 8008920:	a361      	add	r3, pc, #388	; (adr r3, 8008aa8 <_dtoa_r+0x2c0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fdd7 	bl	80004d8 <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 fc1b 	bl	800016c <__adddf3>
 8008936:	4606      	mov	r6, r0
 8008938:	460f      	mov	r7, r1
 800893a:	f7f8 f87d 	bl	8000a38 <__aeabi_d2iz>
 800893e:	2200      	movs	r2, #0
 8008940:	4682      	mov	sl, r0
 8008942:	2300      	movs	r3, #0
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f8 f838 	bl	80009bc <__aeabi_dcmplt>
 800894c:	b148      	cbz	r0, 8008962 <_dtoa_r+0x17a>
 800894e:	4650      	mov	r0, sl
 8008950:	f7f7 fd58 	bl	8000404 <__aeabi_i2d>
 8008954:	4632      	mov	r2, r6
 8008956:	463b      	mov	r3, r7
 8008958:	f7f8 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800895c:	b908      	cbnz	r0, 8008962 <_dtoa_r+0x17a>
 800895e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008962:	f1ba 0f16 	cmp.w	sl, #22
 8008966:	d858      	bhi.n	8008a1a <_dtoa_r+0x232>
 8008968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800896c:	4b57      	ldr	r3, [pc, #348]	; (8008acc <_dtoa_r+0x2e4>)
 800896e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f8 f821 	bl	80009bc <__aeabi_dcmplt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d04f      	beq.n	8008a1e <_dtoa_r+0x236>
 800897e:	2300      	movs	r3, #0
 8008980:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008984:	930f      	str	r3, [sp, #60]	; 0x3c
 8008986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008988:	1b1c      	subs	r4, r3, r4
 800898a:	1e63      	subs	r3, r4, #1
 800898c:	9309      	str	r3, [sp, #36]	; 0x24
 800898e:	bf49      	itett	mi
 8008990:	f1c4 0301 	rsbmi	r3, r4, #1
 8008994:	2300      	movpl	r3, #0
 8008996:	9306      	strmi	r3, [sp, #24]
 8008998:	2300      	movmi	r3, #0
 800899a:	bf54      	ite	pl
 800899c:	9306      	strpl	r3, [sp, #24]
 800899e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80089a0:	f1ba 0f00 	cmp.w	sl, #0
 80089a4:	db3d      	blt.n	8008a22 <_dtoa_r+0x23a>
 80089a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089ac:	4453      	add	r3, sl
 80089ae:	9309      	str	r3, [sp, #36]	; 0x24
 80089b0:	2300      	movs	r3, #0
 80089b2:	930a      	str	r3, [sp, #40]	; 0x28
 80089b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	f200 808c 	bhi.w	8008ad4 <_dtoa_r+0x2ec>
 80089bc:	2b05      	cmp	r3, #5
 80089be:	bfc4      	itt	gt
 80089c0:	3b04      	subgt	r3, #4
 80089c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80089c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c6:	bfc8      	it	gt
 80089c8:	2400      	movgt	r4, #0
 80089ca:	f1a3 0302 	sub.w	r3, r3, #2
 80089ce:	bfd8      	it	le
 80089d0:	2401      	movle	r4, #1
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	f200 808a 	bhi.w	8008aec <_dtoa_r+0x304>
 80089d8:	e8df f003 	tbb	[pc, r3]
 80089dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80089e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80089e4:	441c      	add	r4, r3
 80089e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	bfc3      	ittte	gt
 80089ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80089f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80089fa:	f1c3 0320 	rsble	r3, r3, #32
 80089fe:	bfc6      	itte	gt
 8008a00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a04:	4318      	orrgt	r0, r3
 8008a06:	fa06 f003 	lslle.w	r0, r6, r3
 8008a0a:	f7f7 fceb 	bl	80003e4 <__aeabi_ui2d>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a14:	3c01      	subs	r4, #1
 8008a16:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a18:	e76f      	b.n	80088fa <_dtoa_r+0x112>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e7b2      	b.n	8008984 <_dtoa_r+0x19c>
 8008a1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a20:	e7b1      	b.n	8008986 <_dtoa_r+0x19e>
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	eba3 030a 	sub.w	r3, r3, sl
 8008a28:	9306      	str	r3, [sp, #24]
 8008a2a:	f1ca 0300 	rsb	r3, sl, #0
 8008a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a30:	2300      	movs	r3, #0
 8008a32:	930e      	str	r3, [sp, #56]	; 0x38
 8008a34:	e7be      	b.n	80089b4 <_dtoa_r+0x1cc>
 8008a36:	2300      	movs	r3, #0
 8008a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc58      	bgt.n	8008af2 <_dtoa_r+0x30a>
 8008a40:	f04f 0901 	mov.w	r9, #1
 8008a44:	464b      	mov	r3, r9
 8008a46:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008a4e:	2200      	movs	r2, #0
 8008a50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008a52:	6042      	str	r2, [r0, #4]
 8008a54:	2204      	movs	r2, #4
 8008a56:	f102 0614 	add.w	r6, r2, #20
 8008a5a:	429e      	cmp	r6, r3
 8008a5c:	6841      	ldr	r1, [r0, #4]
 8008a5e:	d94e      	bls.n	8008afe <_dtoa_r+0x316>
 8008a60:	4628      	mov	r0, r5
 8008a62:	f001 f84f 	bl	8009b04 <_Balloc>
 8008a66:	9003      	str	r0, [sp, #12]
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d14c      	bne.n	8008b06 <_dtoa_r+0x31e>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <_dtoa_r+0x2e8>)
 8008a74:	e6cc      	b.n	8008810 <_dtoa_r+0x28>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7de      	b.n	8008a38 <_dtoa_r+0x250>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a80:	eb0a 0903 	add.w	r9, sl, r3
 8008a84:	f109 0301 	add.w	r3, r9, #1
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	9308      	str	r3, [sp, #32]
 8008a8c:	bfb8      	it	lt
 8008a8e:	2301      	movlt	r3, #1
 8008a90:	e7dd      	b.n	8008a4e <_dtoa_r+0x266>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7f2      	b.n	8008a7c <_dtoa_r+0x294>
 8008a96:	bf00      	nop
 8008a98:	636f4361 	.word	0x636f4361
 8008a9c:	3fd287a7 	.word	0x3fd287a7
 8008aa0:	8b60c8b3 	.word	0x8b60c8b3
 8008aa4:	3fc68a28 	.word	0x3fc68a28
 8008aa8:	509f79fb 	.word	0x509f79fb
 8008aac:	3fd34413 	.word	0x3fd34413
 8008ab0:	0801de1e 	.word	0x0801de1e
 8008ab4:	0801de35 	.word	0x0801de35
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	0801de1a 	.word	0x0801de1a
 8008ac0:	0801de11 	.word	0x0801de11
 8008ac4:	0801dc95 	.word	0x0801dc95
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	0801dfa0 	.word	0x0801dfa0
 8008ad0:	0801de90 	.word	0x0801de90
 8008ad4:	2401      	movs	r4, #1
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ada:	9322      	str	r3, [sp, #136]	; 0x88
 8008adc:	f04f 39ff 	mov.w	r9, #4294967295
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2312      	movs	r3, #18
 8008ae4:	f8cd 9020 	str.w	r9, [sp, #32]
 8008ae8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008aea:	e7b0      	b.n	8008a4e <_dtoa_r+0x266>
 8008aec:	2301      	movs	r3, #1
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	e7f4      	b.n	8008adc <_dtoa_r+0x2f4>
 8008af2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008af6:	464b      	mov	r3, r9
 8008af8:	f8cd 9020 	str.w	r9, [sp, #32]
 8008afc:	e7a7      	b.n	8008a4e <_dtoa_r+0x266>
 8008afe:	3101      	adds	r1, #1
 8008b00:	6041      	str	r1, [r0, #4]
 8008b02:	0052      	lsls	r2, r2, #1
 8008b04:	e7a7      	b.n	8008a56 <_dtoa_r+0x26e>
 8008b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b08:	9a03      	ldr	r2, [sp, #12]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	2b0e      	cmp	r3, #14
 8008b10:	f200 80a8 	bhi.w	8008c64 <_dtoa_r+0x47c>
 8008b14:	2c00      	cmp	r4, #0
 8008b16:	f000 80a5 	beq.w	8008c64 <_dtoa_r+0x47c>
 8008b1a:	f1ba 0f00 	cmp.w	sl, #0
 8008b1e:	dd34      	ble.n	8008b8a <_dtoa_r+0x3a2>
 8008b20:	4a9a      	ldr	r2, [pc, #616]	; (8008d8c <_dtoa_r+0x5a4>)
 8008b22:	f00a 030f 	and.w	r3, sl, #15
 8008b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008b3a:	d016      	beq.n	8008b6a <_dtoa_r+0x382>
 8008b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b40:	4b93      	ldr	r3, [pc, #588]	; (8008d90 <_dtoa_r+0x5a8>)
 8008b42:	2703      	movs	r7, #3
 8008b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b48:	f7f7 fdf0 	bl	800072c <__aeabi_ddiv>
 8008b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b50:	f004 040f 	and.w	r4, r4, #15
 8008b54:	4e8e      	ldr	r6, [pc, #568]	; (8008d90 <_dtoa_r+0x5a8>)
 8008b56:	b954      	cbnz	r4, 8008b6e <_dtoa_r+0x386>
 8008b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b60:	f7f7 fde4 	bl	800072c <__aeabi_ddiv>
 8008b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b68:	e029      	b.n	8008bbe <_dtoa_r+0x3d6>
 8008b6a:	2702      	movs	r7, #2
 8008b6c:	e7f2      	b.n	8008b54 <_dtoa_r+0x36c>
 8008b6e:	07e1      	lsls	r1, r4, #31
 8008b70:	d508      	bpl.n	8008b84 <_dtoa_r+0x39c>
 8008b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b7a:	f7f7 fcad 	bl	80004d8 <__aeabi_dmul>
 8008b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b82:	3701      	adds	r7, #1
 8008b84:	1064      	asrs	r4, r4, #1
 8008b86:	3608      	adds	r6, #8
 8008b88:	e7e5      	b.n	8008b56 <_dtoa_r+0x36e>
 8008b8a:	f000 80a5 	beq.w	8008cd8 <_dtoa_r+0x4f0>
 8008b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b92:	f1ca 0400 	rsb	r4, sl, #0
 8008b96:	4b7d      	ldr	r3, [pc, #500]	; (8008d8c <_dtoa_r+0x5a4>)
 8008b98:	f004 020f 	and.w	r2, r4, #15
 8008b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	2702      	movs	r7, #2
 8008baa:	2300      	movs	r3, #0
 8008bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bb0:	4e77      	ldr	r6, [pc, #476]	; (8008d90 <_dtoa_r+0x5a8>)
 8008bb2:	1124      	asrs	r4, r4, #4
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	f040 8084 	bne.w	8008cc2 <_dtoa_r+0x4da>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1d2      	bne.n	8008b64 <_dtoa_r+0x37c>
 8008bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 808b 	beq.w	8008cdc <_dtoa_r+0x4f4>
 8008bc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4b6f      	ldr	r3, [pc, #444]	; (8008d94 <_dtoa_r+0x5ac>)
 8008bd6:	f7f7 fef1 	bl	80009bc <__aeabi_dcmplt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d07e      	beq.n	8008cdc <_dtoa_r+0x4f4>
 8008bde:	9b08      	ldr	r3, [sp, #32]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d07b      	beq.n	8008cdc <_dtoa_r+0x4f4>
 8008be4:	f1b9 0f00 	cmp.w	r9, #0
 8008be8:	dd38      	ble.n	8008c5c <_dtoa_r+0x474>
 8008bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4b69      	ldr	r3, [pc, #420]	; (8008d98 <_dtoa_r+0x5b0>)
 8008bf2:	f7f7 fc71 	bl	80004d8 <__aeabi_dmul>
 8008bf6:	464c      	mov	r4, r9
 8008bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008c00:	3701      	adds	r7, #1
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7f7 fbfe 	bl	8000404 <__aeabi_i2d>
 8008c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0c:	f7f7 fc64 	bl	80004d8 <__aeabi_dmul>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b62      	ldr	r3, [pc, #392]	; (8008d9c <_dtoa_r+0x5b4>)
 8008c14:	f7f7 faaa 	bl	800016c <__adddf3>
 8008c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c20:	9611      	str	r6, [sp, #68]	; 0x44
 8008c22:	2c00      	cmp	r4, #0
 8008c24:	d15d      	bne.n	8008ce2 <_dtoa_r+0x4fa>
 8008c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b5c      	ldr	r3, [pc, #368]	; (8008da0 <_dtoa_r+0x5b8>)
 8008c2e:	f7f7 fa9b 	bl	8000168 <__aeabi_dsub>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c3a:	4633      	mov	r3, r6
 8008c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c3e:	f7f7 fedb 	bl	80009f8 <__aeabi_dcmpgt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f040 829c 	bne.w	8009180 <_dtoa_r+0x998>
 8008c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c52:	f7f7 feb3 	bl	80009bc <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f040 8290 	bne.w	800917c <_dtoa_r+0x994>
 8008c5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f2c0 8152 	blt.w	8008f10 <_dtoa_r+0x728>
 8008c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c70:	f300 814e 	bgt.w	8008f10 <_dtoa_r+0x728>
 8008c74:	4b45      	ldr	r3, [pc, #276]	; (8008d8c <_dtoa_r+0x5a4>)
 8008c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f280 80db 	bge.w	8008e40 <_dtoa_r+0x658>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f300 80d7 	bgt.w	8008e40 <_dtoa_r+0x658>
 8008c92:	f040 8272 	bne.w	800917a <_dtoa_r+0x992>
 8008c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4b40      	ldr	r3, [pc, #256]	; (8008da0 <_dtoa_r+0x5b8>)
 8008c9e:	f7f7 fc1b 	bl	80004d8 <__aeabi_dmul>
 8008ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ca6:	f7f7 fe9d 	bl	80009e4 <__aeabi_dcmpge>
 8008caa:	9c08      	ldr	r4, [sp, #32]
 8008cac:	4626      	mov	r6, r4
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f040 8248 	bne.w	8009144 <_dtoa_r+0x95c>
 8008cb4:	2331      	movs	r3, #49	; 0x31
 8008cb6:	9f03      	ldr	r7, [sp, #12]
 8008cb8:	f10a 0a01 	add.w	sl, sl, #1
 8008cbc:	f807 3b01 	strb.w	r3, [r7], #1
 8008cc0:	e244      	b.n	800914c <_dtoa_r+0x964>
 8008cc2:	07e2      	lsls	r2, r4, #31
 8008cc4:	d505      	bpl.n	8008cd2 <_dtoa_r+0x4ea>
 8008cc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cca:	f7f7 fc05 	bl	80004d8 <__aeabi_dmul>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	3701      	adds	r7, #1
 8008cd2:	1064      	asrs	r4, r4, #1
 8008cd4:	3608      	adds	r6, #8
 8008cd6:	e76d      	b.n	8008bb4 <_dtoa_r+0x3cc>
 8008cd8:	2702      	movs	r7, #2
 8008cda:	e770      	b.n	8008bbe <_dtoa_r+0x3d6>
 8008cdc:	46d0      	mov	r8, sl
 8008cde:	9c08      	ldr	r4, [sp, #32]
 8008ce0:	e78f      	b.n	8008c02 <_dtoa_r+0x41a>
 8008ce2:	9903      	ldr	r1, [sp, #12]
 8008ce4:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <_dtoa_r+0x5a4>)
 8008ce6:	4421      	add	r1, r4
 8008ce8:	9112      	str	r1, [sp, #72]	; 0x48
 8008cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008cf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d055      	beq.n	8008da8 <_dtoa_r+0x5c0>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4929      	ldr	r1, [pc, #164]	; (8008da4 <_dtoa_r+0x5bc>)
 8008d00:	f7f7 fd14 	bl	800072c <__aeabi_ddiv>
 8008d04:	463b      	mov	r3, r7
 8008d06:	4632      	mov	r2, r6
 8008d08:	f7f7 fa2e 	bl	8000168 <__aeabi_dsub>
 8008d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d10:	9f03      	ldr	r7, [sp, #12]
 8008d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d16:	f7f7 fe8f 	bl	8000a38 <__aeabi_d2iz>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	f7f7 fb72 	bl	8000404 <__aeabi_i2d>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d28:	f7f7 fa1e 	bl	8000168 <__aeabi_dsub>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	3430      	adds	r4, #48	; 0x30
 8008d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d3a:	f807 4b01 	strb.w	r4, [r7], #1
 8008d3e:	f7f7 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d174      	bne.n	8008e30 <_dtoa_r+0x648>
 8008d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	4911      	ldr	r1, [pc, #68]	; (8008d94 <_dtoa_r+0x5ac>)
 8008d4e:	f7f7 fa0b 	bl	8000168 <__aeabi_dsub>
 8008d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d56:	f7f7 fe31 	bl	80009bc <__aeabi_dcmplt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f040 80b7 	bne.w	8008ece <_dtoa_r+0x6e6>
 8008d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d62:	429f      	cmp	r7, r3
 8008d64:	f43f af7a 	beq.w	8008c5c <_dtoa_r+0x474>
 8008d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <_dtoa_r+0x5b0>)
 8008d70:	f7f7 fbb2 	bl	80004d8 <__aeabi_dmul>
 8008d74:	2200      	movs	r2, #0
 8008d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <_dtoa_r+0x5b0>)
 8008d80:	f7f7 fbaa 	bl	80004d8 <__aeabi_dmul>
 8008d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d88:	e7c3      	b.n	8008d12 <_dtoa_r+0x52a>
 8008d8a:	bf00      	nop
 8008d8c:	0801dfa0 	.word	0x0801dfa0
 8008d90:	0801df78 	.word	0x0801df78
 8008d94:	3ff00000 	.word	0x3ff00000
 8008d98:	40240000 	.word	0x40240000
 8008d9c:	401c0000 	.word	0x401c0000
 8008da0:	40140000 	.word	0x40140000
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 fb94 	bl	80004d8 <__aeabi_dmul>
 8008db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008db6:	9c03      	ldr	r4, [sp, #12]
 8008db8:	9314      	str	r3, [sp, #80]	; 0x50
 8008dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dbe:	f7f7 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8008dc2:	9015      	str	r0, [sp, #84]	; 0x54
 8008dc4:	f7f7 fb1e 	bl	8000404 <__aeabi_i2d>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd0:	f7f7 f9ca 	bl	8000168 <__aeabi_dsub>
 8008dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	3330      	adds	r3, #48	; 0x30
 8008dda:	f804 3b01 	strb.w	r3, [r4], #1
 8008dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008de0:	460f      	mov	r7, r1
 8008de2:	429c      	cmp	r4, r3
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	d124      	bne.n	8008e34 <_dtoa_r+0x64c>
 8008dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dee:	4bb0      	ldr	r3, [pc, #704]	; (80090b0 <_dtoa_r+0x8c8>)
 8008df0:	f7f7 f9bc 	bl	800016c <__adddf3>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fdfc 	bl	80009f8 <__aeabi_dcmpgt>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d163      	bne.n	8008ecc <_dtoa_r+0x6e4>
 8008e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e08:	2000      	movs	r0, #0
 8008e0a:	49a9      	ldr	r1, [pc, #676]	; (80090b0 <_dtoa_r+0x8c8>)
 8008e0c:	f7f7 f9ac 	bl	8000168 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fdd0 	bl	80009bc <__aeabi_dcmplt>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f43f af1d 	beq.w	8008c5c <_dtoa_r+0x474>
 8008e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e24:	1e7b      	subs	r3, r7, #1
 8008e26:	9314      	str	r3, [sp, #80]	; 0x50
 8008e28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e2c:	2b30      	cmp	r3, #48	; 0x30
 8008e2e:	d0f8      	beq.n	8008e22 <_dtoa_r+0x63a>
 8008e30:	46c2      	mov	sl, r8
 8008e32:	e03b      	b.n	8008eac <_dtoa_r+0x6c4>
 8008e34:	4b9f      	ldr	r3, [pc, #636]	; (80090b4 <_dtoa_r+0x8cc>)
 8008e36:	f7f7 fb4f 	bl	80004d8 <__aeabi_dmul>
 8008e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e3e:	e7bc      	b.n	8008dba <_dtoa_r+0x5d2>
 8008e40:	9f03      	ldr	r7, [sp, #12]
 8008e42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fc6d 	bl	800072c <__aeabi_ddiv>
 8008e52:	f7f7 fdf1 	bl	8000a38 <__aeabi_d2iz>
 8008e56:	4604      	mov	r4, r0
 8008e58:	f7f7 fad4 	bl	8000404 <__aeabi_i2d>
 8008e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 f97c 	bl	8000168 <__aeabi_dsub>
 8008e70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008e74:	f807 6b01 	strb.w	r6, [r7], #1
 8008e78:	9e03      	ldr	r6, [sp, #12]
 8008e7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008e7e:	1bbe      	subs	r6, r7, r6
 8008e80:	45b4      	cmp	ip, r6
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	d136      	bne.n	8008ef6 <_dtoa_r+0x70e>
 8008e88:	f7f7 f970 	bl	800016c <__adddf3>
 8008e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e90:	4680      	mov	r8, r0
 8008e92:	4689      	mov	r9, r1
 8008e94:	f7f7 fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8008e98:	bb58      	cbnz	r0, 8008ef2 <_dtoa_r+0x70a>
 8008e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8008ea6:	b108      	cbz	r0, 8008eac <_dtoa_r+0x6c4>
 8008ea8:	07e1      	lsls	r1, r4, #31
 8008eaa:	d422      	bmi.n	8008ef2 <_dtoa_r+0x70a>
 8008eac:	4628      	mov	r0, r5
 8008eae:	4659      	mov	r1, fp
 8008eb0:	f000 fe68 	bl	8009b84 <_Bfree>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	703b      	strb	r3, [r7, #0]
 8008eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eba:	f10a 0001 	add.w	r0, sl, #1
 8008ebe:	6018      	str	r0, [r3, #0]
 8008ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f43f acde 	beq.w	8008884 <_dtoa_r+0x9c>
 8008ec8:	601f      	str	r7, [r3, #0]
 8008eca:	e4db      	b.n	8008884 <_dtoa_r+0x9c>
 8008ecc:	4627      	mov	r7, r4
 8008ece:	463b      	mov	r3, r7
 8008ed0:	461f      	mov	r7, r3
 8008ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed6:	2a39      	cmp	r2, #57	; 0x39
 8008ed8:	d107      	bne.n	8008eea <_dtoa_r+0x702>
 8008eda:	9a03      	ldr	r2, [sp, #12]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d1f7      	bne.n	8008ed0 <_dtoa_r+0x6e8>
 8008ee0:	2230      	movs	r2, #48	; 0x30
 8008ee2:	9903      	ldr	r1, [sp, #12]
 8008ee4:	f108 0801 	add.w	r8, r8, #1
 8008ee8:	700a      	strb	r2, [r1, #0]
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	3201      	adds	r2, #1
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	e79e      	b.n	8008e30 <_dtoa_r+0x648>
 8008ef2:	46d0      	mov	r8, sl
 8008ef4:	e7eb      	b.n	8008ece <_dtoa_r+0x6e6>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4b6e      	ldr	r3, [pc, #440]	; (80090b4 <_dtoa_r+0x8cc>)
 8008efa:	f7f7 faed 	bl	80004d8 <__aeabi_dmul>
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	4680      	mov	r8, r0
 8008f04:	4689      	mov	r9, r1
 8008f06:	f7f7 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d09b      	beq.n	8008e46 <_dtoa_r+0x65e>
 8008f0e:	e7cd      	b.n	8008eac <_dtoa_r+0x6c4>
 8008f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	f000 80d0 	beq.w	80090b8 <_dtoa_r+0x8d0>
 8008f18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f1a:	2a01      	cmp	r2, #1
 8008f1c:	f300 80ae 	bgt.w	800907c <_dtoa_r+0x894>
 8008f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	f000 80a6 	beq.w	8009074 <_dtoa_r+0x88c>
 8008f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f2e:	9f06      	ldr	r7, [sp, #24]
 8008f30:	9a06      	ldr	r2, [sp, #24]
 8008f32:	2101      	movs	r1, #1
 8008f34:	441a      	add	r2, r3
 8008f36:	9206      	str	r2, [sp, #24]
 8008f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	441a      	add	r2, r3
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	f000 ff20 	bl	8009d84 <__i2b>
 8008f44:	4606      	mov	r6, r0
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	dd0c      	ble.n	8008f64 <_dtoa_r+0x77c>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd09      	ble.n	8008f64 <_dtoa_r+0x77c>
 8008f50:	42bb      	cmp	r3, r7
 8008f52:	bfa8      	it	ge
 8008f54:	463b      	movge	r3, r7
 8008f56:	9a06      	ldr	r2, [sp, #24]
 8008f58:	1aff      	subs	r7, r7, r3
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	9206      	str	r2, [sp, #24]
 8008f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	b1f3      	cbz	r3, 8008fa6 <_dtoa_r+0x7be>
 8008f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80a8 	beq.w	80090c0 <_dtoa_r+0x8d8>
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	dd10      	ble.n	8008f96 <_dtoa_r+0x7ae>
 8008f74:	4631      	mov	r1, r6
 8008f76:	4622      	mov	r2, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 ffc1 	bl	8009f00 <__pow5mult>
 8008f7e:	465a      	mov	r2, fp
 8008f80:	4601      	mov	r1, r0
 8008f82:	4606      	mov	r6, r0
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 ff13 	bl	8009db0 <__multiply>
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 fdf8 	bl	8009b84 <_Bfree>
 8008f94:	46c3      	mov	fp, r8
 8008f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f98:	1b1a      	subs	r2, r3, r4
 8008f9a:	d004      	beq.n	8008fa6 <_dtoa_r+0x7be>
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 ffae 	bl	8009f00 <__pow5mult>
 8008fa4:	4683      	mov	fp, r0
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 feeb 	bl	8009d84 <__i2b>
 8008fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f340 8086 	ble.w	80090c4 <_dtoa_r+0x8dc>
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4601      	mov	r1, r0
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f000 ff9f 	bl	8009f00 <__pow5mult>
 8008fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	dd7f      	ble.n	80090ca <_dtoa_r+0x8e2>
 8008fca:	f04f 0800 	mov.w	r8, #0
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fd4:	6918      	ldr	r0, [r3, #16]
 8008fd6:	f000 fe87 	bl	8009ce8 <__hi0bits>
 8008fda:	f1c0 0020 	rsb	r0, r0, #32
 8008fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe0:	4418      	add	r0, r3
 8008fe2:	f010 001f 	ands.w	r0, r0, #31
 8008fe6:	f000 8092 	beq.w	800910e <_dtoa_r+0x926>
 8008fea:	f1c0 0320 	rsb	r3, r0, #32
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	f340 808a 	ble.w	8009108 <_dtoa_r+0x920>
 8008ff4:	f1c0 001c 	rsb	r0, r0, #28
 8008ff8:	9b06      	ldr	r3, [sp, #24]
 8008ffa:	4407      	add	r7, r0
 8008ffc:	4403      	add	r3, r0
 8008ffe:	9306      	str	r3, [sp, #24]
 8009000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009002:	4403      	add	r3, r0
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	dd05      	ble.n	8009018 <_dtoa_r+0x830>
 800900c:	4659      	mov	r1, fp
 800900e:	461a      	mov	r2, r3
 8009010:	4628      	mov	r0, r5
 8009012:	f000 ffcf 	bl	8009fb4 <__lshift>
 8009016:	4683      	mov	fp, r0
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd05      	ble.n	800902a <_dtoa_r+0x842>
 800901e:	4621      	mov	r1, r4
 8009020:	461a      	mov	r2, r3
 8009022:	4628      	mov	r0, r5
 8009024:	f000 ffc6 	bl	8009fb4 <__lshift>
 8009028:	4604      	mov	r4, r0
 800902a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d070      	beq.n	8009112 <_dtoa_r+0x92a>
 8009030:	4621      	mov	r1, r4
 8009032:	4658      	mov	r0, fp
 8009034:	f001 f82e 	bl	800a094 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	da6a      	bge.n	8009112 <_dtoa_r+0x92a>
 800903c:	2300      	movs	r3, #0
 800903e:	4659      	mov	r1, fp
 8009040:	220a      	movs	r2, #10
 8009042:	4628      	mov	r0, r5
 8009044:	f000 fdc0 	bl	8009bc8 <__multadd>
 8009048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904a:	4683      	mov	fp, r0
 800904c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8194 	beq.w	800937e <_dtoa_r+0xb96>
 8009056:	4631      	mov	r1, r6
 8009058:	2300      	movs	r3, #0
 800905a:	220a      	movs	r2, #10
 800905c:	4628      	mov	r0, r5
 800905e:	f000 fdb3 	bl	8009bc8 <__multadd>
 8009062:	f1b9 0f00 	cmp.w	r9, #0
 8009066:	4606      	mov	r6, r0
 8009068:	f300 8093 	bgt.w	8009192 <_dtoa_r+0x9aa>
 800906c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800906e:	2b02      	cmp	r3, #2
 8009070:	dc57      	bgt.n	8009122 <_dtoa_r+0x93a>
 8009072:	e08e      	b.n	8009192 <_dtoa_r+0x9aa>
 8009074:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800907a:	e757      	b.n	8008f2c <_dtoa_r+0x744>
 800907c:	9b08      	ldr	r3, [sp, #32]
 800907e:	1e5c      	subs	r4, r3, #1
 8009080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009082:	42a3      	cmp	r3, r4
 8009084:	bfb7      	itett	lt
 8009086:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009088:	1b1c      	subge	r4, r3, r4
 800908a:	1ae2      	sublt	r2, r4, r3
 800908c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800908e:	bfbe      	ittt	lt
 8009090:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009092:	189b      	addlt	r3, r3, r2
 8009094:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009096:	9b08      	ldr	r3, [sp, #32]
 8009098:	bfb8      	it	lt
 800909a:	2400      	movlt	r4, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfbb      	ittet	lt
 80090a0:	9b06      	ldrlt	r3, [sp, #24]
 80090a2:	9a08      	ldrlt	r2, [sp, #32]
 80090a4:	9f06      	ldrge	r7, [sp, #24]
 80090a6:	1a9f      	sublt	r7, r3, r2
 80090a8:	bfac      	ite	ge
 80090aa:	9b08      	ldrge	r3, [sp, #32]
 80090ac:	2300      	movlt	r3, #0
 80090ae:	e73f      	b.n	8008f30 <_dtoa_r+0x748>
 80090b0:	3fe00000 	.word	0x3fe00000
 80090b4:	40240000 	.word	0x40240000
 80090b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090ba:	9f06      	ldr	r7, [sp, #24]
 80090bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80090be:	e742      	b.n	8008f46 <_dtoa_r+0x75e>
 80090c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090c2:	e76b      	b.n	8008f9c <_dtoa_r+0x7b4>
 80090c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	dc19      	bgt.n	80090fe <_dtoa_r+0x916>
 80090ca:	9b04      	ldr	r3, [sp, #16]
 80090cc:	b9bb      	cbnz	r3, 80090fe <_dtoa_r+0x916>
 80090ce:	9b05      	ldr	r3, [sp, #20]
 80090d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d4:	b99b      	cbnz	r3, 80090fe <_dtoa_r+0x916>
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090dc:	0d1b      	lsrs	r3, r3, #20
 80090de:	051b      	lsls	r3, r3, #20
 80090e0:	b183      	cbz	r3, 8009104 <_dtoa_r+0x91c>
 80090e2:	f04f 0801 	mov.w	r8, #1
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	3301      	adds	r3, #1
 80090ea:	9306      	str	r3, [sp, #24]
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	3301      	adds	r3, #1
 80090f0:	9309      	str	r3, [sp, #36]	; 0x24
 80090f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f af6a 	bne.w	8008fce <_dtoa_r+0x7e6>
 80090fa:	2001      	movs	r0, #1
 80090fc:	e76f      	b.n	8008fde <_dtoa_r+0x7f6>
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	e7f6      	b.n	80090f2 <_dtoa_r+0x90a>
 8009104:	4698      	mov	r8, r3
 8009106:	e7f4      	b.n	80090f2 <_dtoa_r+0x90a>
 8009108:	f43f af7d 	beq.w	8009006 <_dtoa_r+0x81e>
 800910c:	4618      	mov	r0, r3
 800910e:	301c      	adds	r0, #28
 8009110:	e772      	b.n	8008ff8 <_dtoa_r+0x810>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dc36      	bgt.n	8009186 <_dtoa_r+0x99e>
 8009118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800911a:	2b02      	cmp	r3, #2
 800911c:	dd33      	ble.n	8009186 <_dtoa_r+0x99e>
 800911e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009122:	f1b9 0f00 	cmp.w	r9, #0
 8009126:	d10d      	bne.n	8009144 <_dtoa_r+0x95c>
 8009128:	4621      	mov	r1, r4
 800912a:	464b      	mov	r3, r9
 800912c:	2205      	movs	r2, #5
 800912e:	4628      	mov	r0, r5
 8009130:	f000 fd4a 	bl	8009bc8 <__multadd>
 8009134:	4601      	mov	r1, r0
 8009136:	4604      	mov	r4, r0
 8009138:	4658      	mov	r0, fp
 800913a:	f000 ffab 	bl	800a094 <__mcmp>
 800913e:	2800      	cmp	r0, #0
 8009140:	f73f adb8 	bgt.w	8008cb4 <_dtoa_r+0x4cc>
 8009144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009146:	9f03      	ldr	r7, [sp, #12]
 8009148:	ea6f 0a03 	mvn.w	sl, r3
 800914c:	f04f 0800 	mov.w	r8, #0
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 fd16 	bl	8009b84 <_Bfree>
 8009158:	2e00      	cmp	r6, #0
 800915a:	f43f aea7 	beq.w	8008eac <_dtoa_r+0x6c4>
 800915e:	f1b8 0f00 	cmp.w	r8, #0
 8009162:	d005      	beq.n	8009170 <_dtoa_r+0x988>
 8009164:	45b0      	cmp	r8, r6
 8009166:	d003      	beq.n	8009170 <_dtoa_r+0x988>
 8009168:	4641      	mov	r1, r8
 800916a:	4628      	mov	r0, r5
 800916c:	f000 fd0a 	bl	8009b84 <_Bfree>
 8009170:	4631      	mov	r1, r6
 8009172:	4628      	mov	r0, r5
 8009174:	f000 fd06 	bl	8009b84 <_Bfree>
 8009178:	e698      	b.n	8008eac <_dtoa_r+0x6c4>
 800917a:	2400      	movs	r4, #0
 800917c:	4626      	mov	r6, r4
 800917e:	e7e1      	b.n	8009144 <_dtoa_r+0x95c>
 8009180:	46c2      	mov	sl, r8
 8009182:	4626      	mov	r6, r4
 8009184:	e596      	b.n	8008cb4 <_dtoa_r+0x4cc>
 8009186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80fd 	beq.w	800938c <_dtoa_r+0xba4>
 8009192:	2f00      	cmp	r7, #0
 8009194:	dd05      	ble.n	80091a2 <_dtoa_r+0x9ba>
 8009196:	4631      	mov	r1, r6
 8009198:	463a      	mov	r2, r7
 800919a:	4628      	mov	r0, r5
 800919c:	f000 ff0a 	bl	8009fb4 <__lshift>
 80091a0:	4606      	mov	r6, r0
 80091a2:	f1b8 0f00 	cmp.w	r8, #0
 80091a6:	d05c      	beq.n	8009262 <_dtoa_r+0xa7a>
 80091a8:	4628      	mov	r0, r5
 80091aa:	6871      	ldr	r1, [r6, #4]
 80091ac:	f000 fcaa 	bl	8009b04 <_Balloc>
 80091b0:	4607      	mov	r7, r0
 80091b2:	b928      	cbnz	r0, 80091c0 <_dtoa_r+0x9d8>
 80091b4:	4602      	mov	r2, r0
 80091b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ba:	4b7f      	ldr	r3, [pc, #508]	; (80093b8 <_dtoa_r+0xbd0>)
 80091bc:	f7ff bb28 	b.w	8008810 <_dtoa_r+0x28>
 80091c0:	6932      	ldr	r2, [r6, #16]
 80091c2:	f106 010c 	add.w	r1, r6, #12
 80091c6:	3202      	adds	r2, #2
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	300c      	adds	r0, #12
 80091cc:	f000 fc8c 	bl	8009ae8 <memcpy>
 80091d0:	2201      	movs	r2, #1
 80091d2:	4639      	mov	r1, r7
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 feed 	bl	8009fb4 <__lshift>
 80091da:	46b0      	mov	r8, r6
 80091dc:	4606      	mov	r6, r0
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	9308      	str	r3, [sp, #32]
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	444b      	add	r3, r9
 80091e8:	930a      	str	r3, [sp, #40]	; 0x28
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	9309      	str	r3, [sp, #36]	; 0x24
 80091f2:	9b08      	ldr	r3, [sp, #32]
 80091f4:	4621      	mov	r1, r4
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4658      	mov	r0, fp
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	f7ff fa66 	bl	80086cc <quorem>
 8009200:	4603      	mov	r3, r0
 8009202:	4641      	mov	r1, r8
 8009204:	3330      	adds	r3, #48	; 0x30
 8009206:	9006      	str	r0, [sp, #24]
 8009208:	4658      	mov	r0, fp
 800920a:	930b      	str	r3, [sp, #44]	; 0x2c
 800920c:	f000 ff42 	bl	800a094 <__mcmp>
 8009210:	4632      	mov	r2, r6
 8009212:	4681      	mov	r9, r0
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 ff58 	bl	800a0cc <__mdiff>
 800921c:	68c2      	ldr	r2, [r0, #12]
 800921e:	4607      	mov	r7, r0
 8009220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009222:	bb02      	cbnz	r2, 8009266 <_dtoa_r+0xa7e>
 8009224:	4601      	mov	r1, r0
 8009226:	4658      	mov	r0, fp
 8009228:	f000 ff34 	bl	800a094 <__mcmp>
 800922c:	4602      	mov	r2, r0
 800922e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009230:	4639      	mov	r1, r7
 8009232:	4628      	mov	r0, r5
 8009234:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009238:	f000 fca4 	bl	8009b84 <_Bfree>
 800923c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800923e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009240:	9f08      	ldr	r7, [sp, #32]
 8009242:	ea43 0102 	orr.w	r1, r3, r2
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	430b      	orrs	r3, r1
 800924a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800924c:	d10d      	bne.n	800926a <_dtoa_r+0xa82>
 800924e:	2b39      	cmp	r3, #57	; 0x39
 8009250:	d029      	beq.n	80092a6 <_dtoa_r+0xabe>
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	dd01      	ble.n	800925c <_dtoa_r+0xa74>
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	3331      	adds	r3, #49	; 0x31
 800925c:	9a04      	ldr	r2, [sp, #16]
 800925e:	7013      	strb	r3, [r2, #0]
 8009260:	e776      	b.n	8009150 <_dtoa_r+0x968>
 8009262:	4630      	mov	r0, r6
 8009264:	e7b9      	b.n	80091da <_dtoa_r+0x9f2>
 8009266:	2201      	movs	r2, #1
 8009268:	e7e2      	b.n	8009230 <_dtoa_r+0xa48>
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	db06      	blt.n	800927e <_dtoa_r+0xa96>
 8009270:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009272:	ea41 0909 	orr.w	r9, r1, r9
 8009276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009278:	ea59 0101 	orrs.w	r1, r9, r1
 800927c:	d120      	bne.n	80092c0 <_dtoa_r+0xad8>
 800927e:	2a00      	cmp	r2, #0
 8009280:	ddec      	ble.n	800925c <_dtoa_r+0xa74>
 8009282:	4659      	mov	r1, fp
 8009284:	2201      	movs	r2, #1
 8009286:	4628      	mov	r0, r5
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	f000 fe93 	bl	8009fb4 <__lshift>
 800928e:	4621      	mov	r1, r4
 8009290:	4683      	mov	fp, r0
 8009292:	f000 feff 	bl	800a094 <__mcmp>
 8009296:	2800      	cmp	r0, #0
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	dc02      	bgt.n	80092a2 <_dtoa_r+0xaba>
 800929c:	d1de      	bne.n	800925c <_dtoa_r+0xa74>
 800929e:	07da      	lsls	r2, r3, #31
 80092a0:	d5dc      	bpl.n	800925c <_dtoa_r+0xa74>
 80092a2:	2b39      	cmp	r3, #57	; 0x39
 80092a4:	d1d8      	bne.n	8009258 <_dtoa_r+0xa70>
 80092a6:	2339      	movs	r3, #57	; 0x39
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	7013      	strb	r3, [r2, #0]
 80092ac:	463b      	mov	r3, r7
 80092ae:	461f      	mov	r7, r3
 80092b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	2a39      	cmp	r2, #57	; 0x39
 80092b8:	d050      	beq.n	800935c <_dtoa_r+0xb74>
 80092ba:	3201      	adds	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	e747      	b.n	8009150 <_dtoa_r+0x968>
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	dd03      	ble.n	80092cc <_dtoa_r+0xae4>
 80092c4:	2b39      	cmp	r3, #57	; 0x39
 80092c6:	d0ee      	beq.n	80092a6 <_dtoa_r+0xabe>
 80092c8:	3301      	adds	r3, #1
 80092ca:	e7c7      	b.n	800925c <_dtoa_r+0xa74>
 80092cc:	9a08      	ldr	r2, [sp, #32]
 80092ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092d4:	428a      	cmp	r2, r1
 80092d6:	d02a      	beq.n	800932e <_dtoa_r+0xb46>
 80092d8:	4659      	mov	r1, fp
 80092da:	2300      	movs	r3, #0
 80092dc:	220a      	movs	r2, #10
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fc72 	bl	8009bc8 <__multadd>
 80092e4:	45b0      	cmp	r8, r6
 80092e6:	4683      	mov	fp, r0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	f04f 020a 	mov.w	r2, #10
 80092f0:	4641      	mov	r1, r8
 80092f2:	4628      	mov	r0, r5
 80092f4:	d107      	bne.n	8009306 <_dtoa_r+0xb1e>
 80092f6:	f000 fc67 	bl	8009bc8 <__multadd>
 80092fa:	4680      	mov	r8, r0
 80092fc:	4606      	mov	r6, r0
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	3301      	adds	r3, #1
 8009302:	9308      	str	r3, [sp, #32]
 8009304:	e775      	b.n	80091f2 <_dtoa_r+0xa0a>
 8009306:	f000 fc5f 	bl	8009bc8 <__multadd>
 800930a:	4631      	mov	r1, r6
 800930c:	4680      	mov	r8, r0
 800930e:	2300      	movs	r3, #0
 8009310:	220a      	movs	r2, #10
 8009312:	4628      	mov	r0, r5
 8009314:	f000 fc58 	bl	8009bc8 <__multadd>
 8009318:	4606      	mov	r6, r0
 800931a:	e7f0      	b.n	80092fe <_dtoa_r+0xb16>
 800931c:	f1b9 0f00 	cmp.w	r9, #0
 8009320:	bfcc      	ite	gt
 8009322:	464f      	movgt	r7, r9
 8009324:	2701      	movle	r7, #1
 8009326:	f04f 0800 	mov.w	r8, #0
 800932a:	9a03      	ldr	r2, [sp, #12]
 800932c:	4417      	add	r7, r2
 800932e:	4659      	mov	r1, fp
 8009330:	2201      	movs	r2, #1
 8009332:	4628      	mov	r0, r5
 8009334:	9308      	str	r3, [sp, #32]
 8009336:	f000 fe3d 	bl	8009fb4 <__lshift>
 800933a:	4621      	mov	r1, r4
 800933c:	4683      	mov	fp, r0
 800933e:	f000 fea9 	bl	800a094 <__mcmp>
 8009342:	2800      	cmp	r0, #0
 8009344:	dcb2      	bgt.n	80092ac <_dtoa_r+0xac4>
 8009346:	d102      	bne.n	800934e <_dtoa_r+0xb66>
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	07db      	lsls	r3, r3, #31
 800934c:	d4ae      	bmi.n	80092ac <_dtoa_r+0xac4>
 800934e:	463b      	mov	r3, r7
 8009350:	461f      	mov	r7, r3
 8009352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009356:	2a30      	cmp	r2, #48	; 0x30
 8009358:	d0fa      	beq.n	8009350 <_dtoa_r+0xb68>
 800935a:	e6f9      	b.n	8009150 <_dtoa_r+0x968>
 800935c:	9a03      	ldr	r2, [sp, #12]
 800935e:	429a      	cmp	r2, r3
 8009360:	d1a5      	bne.n	80092ae <_dtoa_r+0xac6>
 8009362:	2331      	movs	r3, #49	; 0x31
 8009364:	f10a 0a01 	add.w	sl, sl, #1
 8009368:	e779      	b.n	800925e <_dtoa_r+0xa76>
 800936a:	4b14      	ldr	r3, [pc, #80]	; (80093bc <_dtoa_r+0xbd4>)
 800936c:	f7ff baa8 	b.w	80088c0 <_dtoa_r+0xd8>
 8009370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009372:	2b00      	cmp	r3, #0
 8009374:	f47f aa81 	bne.w	800887a <_dtoa_r+0x92>
 8009378:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <_dtoa_r+0xbd8>)
 800937a:	f7ff baa1 	b.w	80088c0 <_dtoa_r+0xd8>
 800937e:	f1b9 0f00 	cmp.w	r9, #0
 8009382:	dc03      	bgt.n	800938c <_dtoa_r+0xba4>
 8009384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009386:	2b02      	cmp	r3, #2
 8009388:	f73f aecb 	bgt.w	8009122 <_dtoa_r+0x93a>
 800938c:	9f03      	ldr	r7, [sp, #12]
 800938e:	4621      	mov	r1, r4
 8009390:	4658      	mov	r0, fp
 8009392:	f7ff f99b 	bl	80086cc <quorem>
 8009396:	9a03      	ldr	r2, [sp, #12]
 8009398:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800939c:	f807 3b01 	strb.w	r3, [r7], #1
 80093a0:	1aba      	subs	r2, r7, r2
 80093a2:	4591      	cmp	r9, r2
 80093a4:	ddba      	ble.n	800931c <_dtoa_r+0xb34>
 80093a6:	4659      	mov	r1, fp
 80093a8:	2300      	movs	r3, #0
 80093aa:	220a      	movs	r2, #10
 80093ac:	4628      	mov	r0, r5
 80093ae:	f000 fc0b 	bl	8009bc8 <__multadd>
 80093b2:	4683      	mov	fp, r0
 80093b4:	e7eb      	b.n	800938e <_dtoa_r+0xba6>
 80093b6:	bf00      	nop
 80093b8:	0801de90 	.word	0x0801de90
 80093bc:	0801dc94 	.word	0x0801dc94
 80093c0:	0801de11 	.word	0x0801de11

080093c4 <rshift>:
 80093c4:	6903      	ldr	r3, [r0, #16]
 80093c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093ce:	f100 0414 	add.w	r4, r0, #20
 80093d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093d6:	dd46      	ble.n	8009466 <rshift+0xa2>
 80093d8:	f011 011f 	ands.w	r1, r1, #31
 80093dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093e4:	d10c      	bne.n	8009400 <rshift+0x3c>
 80093e6:	4629      	mov	r1, r5
 80093e8:	f100 0710 	add.w	r7, r0, #16
 80093ec:	42b1      	cmp	r1, r6
 80093ee:	d335      	bcc.n	800945c <rshift+0x98>
 80093f0:	1a9b      	subs	r3, r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	1eea      	subs	r2, r5, #3
 80093f6:	4296      	cmp	r6, r2
 80093f8:	bf38      	it	cc
 80093fa:	2300      	movcc	r3, #0
 80093fc:	4423      	add	r3, r4
 80093fe:	e015      	b.n	800942c <rshift+0x68>
 8009400:	46a1      	mov	r9, r4
 8009402:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009406:	f1c1 0820 	rsb	r8, r1, #32
 800940a:	40cf      	lsrs	r7, r1
 800940c:	f105 0e04 	add.w	lr, r5, #4
 8009410:	4576      	cmp	r6, lr
 8009412:	46f4      	mov	ip, lr
 8009414:	d816      	bhi.n	8009444 <rshift+0x80>
 8009416:	1a9a      	subs	r2, r3, r2
 8009418:	0092      	lsls	r2, r2, #2
 800941a:	3a04      	subs	r2, #4
 800941c:	3501      	adds	r5, #1
 800941e:	42ae      	cmp	r6, r5
 8009420:	bf38      	it	cc
 8009422:	2200      	movcc	r2, #0
 8009424:	18a3      	adds	r3, r4, r2
 8009426:	50a7      	str	r7, [r4, r2]
 8009428:	b107      	cbz	r7, 800942c <rshift+0x68>
 800942a:	3304      	adds	r3, #4
 800942c:	42a3      	cmp	r3, r4
 800942e:	eba3 0204 	sub.w	r2, r3, r4
 8009432:	bf08      	it	eq
 8009434:	2300      	moveq	r3, #0
 8009436:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800943a:	6102      	str	r2, [r0, #16]
 800943c:	bf08      	it	eq
 800943e:	6143      	streq	r3, [r0, #20]
 8009440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009444:	f8dc c000 	ldr.w	ip, [ip]
 8009448:	fa0c fc08 	lsl.w	ip, ip, r8
 800944c:	ea4c 0707 	orr.w	r7, ip, r7
 8009450:	f849 7b04 	str.w	r7, [r9], #4
 8009454:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009458:	40cf      	lsrs	r7, r1
 800945a:	e7d9      	b.n	8009410 <rshift+0x4c>
 800945c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009460:	f847 cf04 	str.w	ip, [r7, #4]!
 8009464:	e7c2      	b.n	80093ec <rshift+0x28>
 8009466:	4623      	mov	r3, r4
 8009468:	e7e0      	b.n	800942c <rshift+0x68>

0800946a <__hexdig_fun>:
 800946a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800946e:	2b09      	cmp	r3, #9
 8009470:	d802      	bhi.n	8009478 <__hexdig_fun+0xe>
 8009472:	3820      	subs	r0, #32
 8009474:	b2c0      	uxtb	r0, r0
 8009476:	4770      	bx	lr
 8009478:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800947c:	2b05      	cmp	r3, #5
 800947e:	d801      	bhi.n	8009484 <__hexdig_fun+0x1a>
 8009480:	3847      	subs	r0, #71	; 0x47
 8009482:	e7f7      	b.n	8009474 <__hexdig_fun+0xa>
 8009484:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009488:	2b05      	cmp	r3, #5
 800948a:	d801      	bhi.n	8009490 <__hexdig_fun+0x26>
 800948c:	3827      	subs	r0, #39	; 0x27
 800948e:	e7f1      	b.n	8009474 <__hexdig_fun+0xa>
 8009490:	2000      	movs	r0, #0
 8009492:	4770      	bx	lr

08009494 <__gethex>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	b08b      	sub	sp, #44	; 0x2c
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	4bb2      	ldr	r3, [pc, #712]	; (8009768 <__gethex+0x2d4>)
 800949e:	9002      	str	r0, [sp, #8]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	468b      	mov	fp, r1
 80094a4:	4618      	mov	r0, r3
 80094a6:	4690      	mov	r8, r2
 80094a8:	9303      	str	r3, [sp, #12]
 80094aa:	f7f6 fe51 	bl	8000150 <strlen>
 80094ae:	4682      	mov	sl, r0
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	f8db 2000 	ldr.w	r2, [fp]
 80094b6:	4403      	add	r3, r0
 80094b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	1c93      	adds	r3, r2, #2
 80094c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094c8:	32fe      	adds	r2, #254	; 0xfe
 80094ca:	18d1      	adds	r1, r2, r3
 80094cc:	461f      	mov	r7, r3
 80094ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094d2:	9101      	str	r1, [sp, #4]
 80094d4:	2830      	cmp	r0, #48	; 0x30
 80094d6:	d0f8      	beq.n	80094ca <__gethex+0x36>
 80094d8:	f7ff ffc7 	bl	800946a <__hexdig_fun>
 80094dc:	4604      	mov	r4, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d13a      	bne.n	8009558 <__gethex+0xc4>
 80094e2:	4652      	mov	r2, sl
 80094e4:	4638      	mov	r0, r7
 80094e6:	9903      	ldr	r1, [sp, #12]
 80094e8:	f001 fa26 	bl	800a938 <strncmp>
 80094ec:	4605      	mov	r5, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d166      	bne.n	80095c0 <__gethex+0x12c>
 80094f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80094f6:	eb07 060a 	add.w	r6, r7, sl
 80094fa:	f7ff ffb6 	bl	800946a <__hexdig_fun>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d060      	beq.n	80095c4 <__gethex+0x130>
 8009502:	4633      	mov	r3, r6
 8009504:	7818      	ldrb	r0, [r3, #0]
 8009506:	461f      	mov	r7, r3
 8009508:	2830      	cmp	r0, #48	; 0x30
 800950a:	f103 0301 	add.w	r3, r3, #1
 800950e:	d0f9      	beq.n	8009504 <__gethex+0x70>
 8009510:	f7ff ffab 	bl	800946a <__hexdig_fun>
 8009514:	2301      	movs	r3, #1
 8009516:	fab0 f480 	clz	r4, r0
 800951a:	4635      	mov	r5, r6
 800951c:	0964      	lsrs	r4, r4, #5
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	463a      	mov	r2, r7
 8009522:	4616      	mov	r6, r2
 8009524:	7830      	ldrb	r0, [r6, #0]
 8009526:	3201      	adds	r2, #1
 8009528:	f7ff ff9f 	bl	800946a <__hexdig_fun>
 800952c:	2800      	cmp	r0, #0
 800952e:	d1f8      	bne.n	8009522 <__gethex+0x8e>
 8009530:	4652      	mov	r2, sl
 8009532:	4630      	mov	r0, r6
 8009534:	9903      	ldr	r1, [sp, #12]
 8009536:	f001 f9ff 	bl	800a938 <strncmp>
 800953a:	b980      	cbnz	r0, 800955e <__gethex+0xca>
 800953c:	b94d      	cbnz	r5, 8009552 <__gethex+0xbe>
 800953e:	eb06 050a 	add.w	r5, r6, sl
 8009542:	462a      	mov	r2, r5
 8009544:	4616      	mov	r6, r2
 8009546:	7830      	ldrb	r0, [r6, #0]
 8009548:	3201      	adds	r2, #1
 800954a:	f7ff ff8e 	bl	800946a <__hexdig_fun>
 800954e:	2800      	cmp	r0, #0
 8009550:	d1f8      	bne.n	8009544 <__gethex+0xb0>
 8009552:	1bad      	subs	r5, r5, r6
 8009554:	00ad      	lsls	r5, r5, #2
 8009556:	e004      	b.n	8009562 <__gethex+0xce>
 8009558:	2400      	movs	r4, #0
 800955a:	4625      	mov	r5, r4
 800955c:	e7e0      	b.n	8009520 <__gethex+0x8c>
 800955e:	2d00      	cmp	r5, #0
 8009560:	d1f7      	bne.n	8009552 <__gethex+0xbe>
 8009562:	7833      	ldrb	r3, [r6, #0]
 8009564:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009568:	2b50      	cmp	r3, #80	; 0x50
 800956a:	d139      	bne.n	80095e0 <__gethex+0x14c>
 800956c:	7873      	ldrb	r3, [r6, #1]
 800956e:	2b2b      	cmp	r3, #43	; 0x2b
 8009570:	d02a      	beq.n	80095c8 <__gethex+0x134>
 8009572:	2b2d      	cmp	r3, #45	; 0x2d
 8009574:	d02c      	beq.n	80095d0 <__gethex+0x13c>
 8009576:	f04f 0900 	mov.w	r9, #0
 800957a:	1c71      	adds	r1, r6, #1
 800957c:	7808      	ldrb	r0, [r1, #0]
 800957e:	f7ff ff74 	bl	800946a <__hexdig_fun>
 8009582:	1e43      	subs	r3, r0, #1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b18      	cmp	r3, #24
 8009588:	d82a      	bhi.n	80095e0 <__gethex+0x14c>
 800958a:	f1a0 0210 	sub.w	r2, r0, #16
 800958e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009592:	f7ff ff6a 	bl	800946a <__hexdig_fun>
 8009596:	1e43      	subs	r3, r0, #1
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b18      	cmp	r3, #24
 800959c:	d91b      	bls.n	80095d6 <__gethex+0x142>
 800959e:	f1b9 0f00 	cmp.w	r9, #0
 80095a2:	d000      	beq.n	80095a6 <__gethex+0x112>
 80095a4:	4252      	negs	r2, r2
 80095a6:	4415      	add	r5, r2
 80095a8:	f8cb 1000 	str.w	r1, [fp]
 80095ac:	b1d4      	cbz	r4, 80095e4 <__gethex+0x150>
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf14      	ite	ne
 80095b4:	2700      	movne	r7, #0
 80095b6:	2706      	moveq	r7, #6
 80095b8:	4638      	mov	r0, r7
 80095ba:	b00b      	add	sp, #44	; 0x2c
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	463e      	mov	r6, r7
 80095c2:	4625      	mov	r5, r4
 80095c4:	2401      	movs	r4, #1
 80095c6:	e7cc      	b.n	8009562 <__gethex+0xce>
 80095c8:	f04f 0900 	mov.w	r9, #0
 80095cc:	1cb1      	adds	r1, r6, #2
 80095ce:	e7d5      	b.n	800957c <__gethex+0xe8>
 80095d0:	f04f 0901 	mov.w	r9, #1
 80095d4:	e7fa      	b.n	80095cc <__gethex+0x138>
 80095d6:	230a      	movs	r3, #10
 80095d8:	fb03 0202 	mla	r2, r3, r2, r0
 80095dc:	3a10      	subs	r2, #16
 80095de:	e7d6      	b.n	800958e <__gethex+0xfa>
 80095e0:	4631      	mov	r1, r6
 80095e2:	e7e1      	b.n	80095a8 <__gethex+0x114>
 80095e4:	4621      	mov	r1, r4
 80095e6:	1bf3      	subs	r3, r6, r7
 80095e8:	3b01      	subs	r3, #1
 80095ea:	2b07      	cmp	r3, #7
 80095ec:	dc0a      	bgt.n	8009604 <__gethex+0x170>
 80095ee:	9802      	ldr	r0, [sp, #8]
 80095f0:	f000 fa88 	bl	8009b04 <_Balloc>
 80095f4:	4604      	mov	r4, r0
 80095f6:	b940      	cbnz	r0, 800960a <__gethex+0x176>
 80095f8:	4602      	mov	r2, r0
 80095fa:	21de      	movs	r1, #222	; 0xde
 80095fc:	4b5b      	ldr	r3, [pc, #364]	; (800976c <__gethex+0x2d8>)
 80095fe:	485c      	ldr	r0, [pc, #368]	; (8009770 <__gethex+0x2dc>)
 8009600:	f001 f9bc 	bl	800a97c <__assert_func>
 8009604:	3101      	adds	r1, #1
 8009606:	105b      	asrs	r3, r3, #1
 8009608:	e7ef      	b.n	80095ea <__gethex+0x156>
 800960a:	f04f 0b00 	mov.w	fp, #0
 800960e:	f100 0914 	add.w	r9, r0, #20
 8009612:	f1ca 0301 	rsb	r3, sl, #1
 8009616:	f8cd 9010 	str.w	r9, [sp, #16]
 800961a:	f8cd b004 	str.w	fp, [sp, #4]
 800961e:	9308      	str	r3, [sp, #32]
 8009620:	42b7      	cmp	r7, r6
 8009622:	d33f      	bcc.n	80096a4 <__gethex+0x210>
 8009624:	9f04      	ldr	r7, [sp, #16]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	f847 3b04 	str.w	r3, [r7], #4
 800962c:	eba7 0709 	sub.w	r7, r7, r9
 8009630:	10bf      	asrs	r7, r7, #2
 8009632:	6127      	str	r7, [r4, #16]
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fb57 	bl	8009ce8 <__hi0bits>
 800963a:	017f      	lsls	r7, r7, #5
 800963c:	f8d8 6000 	ldr.w	r6, [r8]
 8009640:	1a3f      	subs	r7, r7, r0
 8009642:	42b7      	cmp	r7, r6
 8009644:	dd62      	ble.n	800970c <__gethex+0x278>
 8009646:	1bbf      	subs	r7, r7, r6
 8009648:	4639      	mov	r1, r7
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fef1 	bl	800a432 <__any_on>
 8009650:	4682      	mov	sl, r0
 8009652:	b1a8      	cbz	r0, 8009680 <__gethex+0x1ec>
 8009654:	f04f 0a01 	mov.w	sl, #1
 8009658:	1e7b      	subs	r3, r7, #1
 800965a:	1159      	asrs	r1, r3, #5
 800965c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009660:	f003 021f 	and.w	r2, r3, #31
 8009664:	fa0a f202 	lsl.w	r2, sl, r2
 8009668:	420a      	tst	r2, r1
 800966a:	d009      	beq.n	8009680 <__gethex+0x1ec>
 800966c:	4553      	cmp	r3, sl
 800966e:	dd05      	ble.n	800967c <__gethex+0x1e8>
 8009670:	4620      	mov	r0, r4
 8009672:	1eb9      	subs	r1, r7, #2
 8009674:	f000 fedd 	bl	800a432 <__any_on>
 8009678:	2800      	cmp	r0, #0
 800967a:	d144      	bne.n	8009706 <__gethex+0x272>
 800967c:	f04f 0a02 	mov.w	sl, #2
 8009680:	4639      	mov	r1, r7
 8009682:	4620      	mov	r0, r4
 8009684:	f7ff fe9e 	bl	80093c4 <rshift>
 8009688:	443d      	add	r5, r7
 800968a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800968e:	42ab      	cmp	r3, r5
 8009690:	da4a      	bge.n	8009728 <__gethex+0x294>
 8009692:	4621      	mov	r1, r4
 8009694:	9802      	ldr	r0, [sp, #8]
 8009696:	f000 fa75 	bl	8009b84 <_Bfree>
 800969a:	2300      	movs	r3, #0
 800969c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800969e:	27a3      	movs	r7, #163	; 0xa3
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e789      	b.n	80095b8 <__gethex+0x124>
 80096a4:	1e73      	subs	r3, r6, #1
 80096a6:	9a06      	ldr	r2, [sp, #24]
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d019      	beq.n	80096e6 <__gethex+0x252>
 80096b2:	f1bb 0f20 	cmp.w	fp, #32
 80096b6:	d107      	bne.n	80096c8 <__gethex+0x234>
 80096b8:	9b04      	ldr	r3, [sp, #16]
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	f843 2b04 	str.w	r2, [r3], #4
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	2300      	movs	r3, #0
 80096c4:	469b      	mov	fp, r3
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096cc:	f7ff fecd 	bl	800946a <__hexdig_fun>
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	f000 000f 	and.w	r0, r0, #15
 80096d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80096da:	4303      	orrs	r3, r0
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	f10b 0b04 	add.w	fp, fp, #4
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	e00d      	b.n	8009702 <__gethex+0x26e>
 80096e6:	9a08      	ldr	r2, [sp, #32]
 80096e8:	1e73      	subs	r3, r6, #1
 80096ea:	4413      	add	r3, r2
 80096ec:	42bb      	cmp	r3, r7
 80096ee:	d3e0      	bcc.n	80096b2 <__gethex+0x21e>
 80096f0:	4618      	mov	r0, r3
 80096f2:	4652      	mov	r2, sl
 80096f4:	9903      	ldr	r1, [sp, #12]
 80096f6:	9309      	str	r3, [sp, #36]	; 0x24
 80096f8:	f001 f91e 	bl	800a938 <strncmp>
 80096fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fe:	2800      	cmp	r0, #0
 8009700:	d1d7      	bne.n	80096b2 <__gethex+0x21e>
 8009702:	461e      	mov	r6, r3
 8009704:	e78c      	b.n	8009620 <__gethex+0x18c>
 8009706:	f04f 0a03 	mov.w	sl, #3
 800970a:	e7b9      	b.n	8009680 <__gethex+0x1ec>
 800970c:	da09      	bge.n	8009722 <__gethex+0x28e>
 800970e:	1bf7      	subs	r7, r6, r7
 8009710:	4621      	mov	r1, r4
 8009712:	463a      	mov	r2, r7
 8009714:	9802      	ldr	r0, [sp, #8]
 8009716:	f000 fc4d 	bl	8009fb4 <__lshift>
 800971a:	4604      	mov	r4, r0
 800971c:	1bed      	subs	r5, r5, r7
 800971e:	f100 0914 	add.w	r9, r0, #20
 8009722:	f04f 0a00 	mov.w	sl, #0
 8009726:	e7b0      	b.n	800968a <__gethex+0x1f6>
 8009728:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800972c:	42a8      	cmp	r0, r5
 800972e:	dd72      	ble.n	8009816 <__gethex+0x382>
 8009730:	1b45      	subs	r5, r0, r5
 8009732:	42ae      	cmp	r6, r5
 8009734:	dc35      	bgt.n	80097a2 <__gethex+0x30e>
 8009736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d029      	beq.n	8009792 <__gethex+0x2fe>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d02b      	beq.n	800979a <__gethex+0x306>
 8009742:	2b01      	cmp	r3, #1
 8009744:	d11c      	bne.n	8009780 <__gethex+0x2ec>
 8009746:	42ae      	cmp	r6, r5
 8009748:	d11a      	bne.n	8009780 <__gethex+0x2ec>
 800974a:	2e01      	cmp	r6, #1
 800974c:	d112      	bne.n	8009774 <__gethex+0x2e0>
 800974e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009752:	9a05      	ldr	r2, [sp, #20]
 8009754:	2762      	movs	r7, #98	; 0x62
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	2301      	movs	r3, #1
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	f8c9 3000 	str.w	r3, [r9]
 8009760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009762:	601c      	str	r4, [r3, #0]
 8009764:	e728      	b.n	80095b8 <__gethex+0x124>
 8009766:	bf00      	nop
 8009768:	0801df08 	.word	0x0801df08
 800976c:	0801de90 	.word	0x0801de90
 8009770:	0801dea1 	.word	0x0801dea1
 8009774:	4620      	mov	r0, r4
 8009776:	1e71      	subs	r1, r6, #1
 8009778:	f000 fe5b 	bl	800a432 <__any_on>
 800977c:	2800      	cmp	r0, #0
 800977e:	d1e6      	bne.n	800974e <__gethex+0x2ba>
 8009780:	4621      	mov	r1, r4
 8009782:	9802      	ldr	r0, [sp, #8]
 8009784:	f000 f9fe 	bl	8009b84 <_Bfree>
 8009788:	2300      	movs	r3, #0
 800978a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800978c:	2750      	movs	r7, #80	; 0x50
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e712      	b.n	80095b8 <__gethex+0x124>
 8009792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f3      	bne.n	8009780 <__gethex+0x2ec>
 8009798:	e7d9      	b.n	800974e <__gethex+0x2ba>
 800979a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1d6      	bne.n	800974e <__gethex+0x2ba>
 80097a0:	e7ee      	b.n	8009780 <__gethex+0x2ec>
 80097a2:	1e6f      	subs	r7, r5, #1
 80097a4:	f1ba 0f00 	cmp.w	sl, #0
 80097a8:	d132      	bne.n	8009810 <__gethex+0x37c>
 80097aa:	b127      	cbz	r7, 80097b6 <__gethex+0x322>
 80097ac:	4639      	mov	r1, r7
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 fe3f 	bl	800a432 <__any_on>
 80097b4:	4682      	mov	sl, r0
 80097b6:	2101      	movs	r1, #1
 80097b8:	117b      	asrs	r3, r7, #5
 80097ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097be:	f007 071f 	and.w	r7, r7, #31
 80097c2:	fa01 f707 	lsl.w	r7, r1, r7
 80097c6:	421f      	tst	r7, r3
 80097c8:	f04f 0702 	mov.w	r7, #2
 80097cc:	4629      	mov	r1, r5
 80097ce:	4620      	mov	r0, r4
 80097d0:	bf18      	it	ne
 80097d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80097d6:	1b76      	subs	r6, r6, r5
 80097d8:	f7ff fdf4 	bl	80093c4 <rshift>
 80097dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097e0:	f1ba 0f00 	cmp.w	sl, #0
 80097e4:	d048      	beq.n	8009878 <__gethex+0x3e4>
 80097e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d015      	beq.n	800981a <__gethex+0x386>
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d017      	beq.n	8009822 <__gethex+0x38e>
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d109      	bne.n	800980a <__gethex+0x376>
 80097f6:	f01a 0f02 	tst.w	sl, #2
 80097fa:	d006      	beq.n	800980a <__gethex+0x376>
 80097fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009800:	ea4a 0a00 	orr.w	sl, sl, r0
 8009804:	f01a 0f01 	tst.w	sl, #1
 8009808:	d10e      	bne.n	8009828 <__gethex+0x394>
 800980a:	f047 0710 	orr.w	r7, r7, #16
 800980e:	e033      	b.n	8009878 <__gethex+0x3e4>
 8009810:	f04f 0a01 	mov.w	sl, #1
 8009814:	e7cf      	b.n	80097b6 <__gethex+0x322>
 8009816:	2701      	movs	r7, #1
 8009818:	e7e2      	b.n	80097e0 <__gethex+0x34c>
 800981a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981c:	f1c3 0301 	rsb	r3, r3, #1
 8009820:	9315      	str	r3, [sp, #84]	; 0x54
 8009822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0f0      	beq.n	800980a <__gethex+0x376>
 8009828:	f04f 0c00 	mov.w	ip, #0
 800982c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009830:	f104 0314 	add.w	r3, r4, #20
 8009834:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009838:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800983c:	4618      	mov	r0, r3
 800983e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009842:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009846:	d01c      	beq.n	8009882 <__gethex+0x3ee>
 8009848:	3201      	adds	r2, #1
 800984a:	6002      	str	r2, [r0, #0]
 800984c:	2f02      	cmp	r7, #2
 800984e:	f104 0314 	add.w	r3, r4, #20
 8009852:	d13d      	bne.n	80098d0 <__gethex+0x43c>
 8009854:	f8d8 2000 	ldr.w	r2, [r8]
 8009858:	3a01      	subs	r2, #1
 800985a:	42b2      	cmp	r2, r6
 800985c:	d10a      	bne.n	8009874 <__gethex+0x3e0>
 800985e:	2201      	movs	r2, #1
 8009860:	1171      	asrs	r1, r6, #5
 8009862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009866:	f006 061f 	and.w	r6, r6, #31
 800986a:	fa02 f606 	lsl.w	r6, r2, r6
 800986e:	421e      	tst	r6, r3
 8009870:	bf18      	it	ne
 8009872:	4617      	movne	r7, r2
 8009874:	f047 0720 	orr.w	r7, r7, #32
 8009878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800987a:	601c      	str	r4, [r3, #0]
 800987c:	9b05      	ldr	r3, [sp, #20]
 800987e:	601d      	str	r5, [r3, #0]
 8009880:	e69a      	b.n	80095b8 <__gethex+0x124>
 8009882:	4299      	cmp	r1, r3
 8009884:	f843 cc04 	str.w	ip, [r3, #-4]
 8009888:	d8d8      	bhi.n	800983c <__gethex+0x3a8>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	459b      	cmp	fp, r3
 800988e:	db17      	blt.n	80098c0 <__gethex+0x42c>
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	9802      	ldr	r0, [sp, #8]
 8009894:	3101      	adds	r1, #1
 8009896:	f000 f935 	bl	8009b04 <_Balloc>
 800989a:	4681      	mov	r9, r0
 800989c:	b918      	cbnz	r0, 80098a6 <__gethex+0x412>
 800989e:	4602      	mov	r2, r0
 80098a0:	2184      	movs	r1, #132	; 0x84
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <__gethex+0x474>)
 80098a4:	e6ab      	b.n	80095fe <__gethex+0x16a>
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	f104 010c 	add.w	r1, r4, #12
 80098ac:	3202      	adds	r2, #2
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	300c      	adds	r0, #12
 80098b2:	f000 f919 	bl	8009ae8 <memcpy>
 80098b6:	4621      	mov	r1, r4
 80098b8:	9802      	ldr	r0, [sp, #8]
 80098ba:	f000 f963 	bl	8009b84 <_Bfree>
 80098be:	464c      	mov	r4, r9
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	6122      	str	r2, [r4, #16]
 80098c6:	2201      	movs	r2, #1
 80098c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098cc:	615a      	str	r2, [r3, #20]
 80098ce:	e7bd      	b.n	800984c <__gethex+0x3b8>
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	455a      	cmp	r2, fp
 80098d4:	dd0b      	ble.n	80098ee <__gethex+0x45a>
 80098d6:	2101      	movs	r1, #1
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fd73 	bl	80093c4 <rshift>
 80098de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098e2:	3501      	adds	r5, #1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	f6ff aed4 	blt.w	8009692 <__gethex+0x1fe>
 80098ea:	2701      	movs	r7, #1
 80098ec:	e7c2      	b.n	8009874 <__gethex+0x3e0>
 80098ee:	f016 061f 	ands.w	r6, r6, #31
 80098f2:	d0fa      	beq.n	80098ea <__gethex+0x456>
 80098f4:	4453      	add	r3, sl
 80098f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098fa:	f000 f9f5 	bl	8009ce8 <__hi0bits>
 80098fe:	f1c6 0620 	rsb	r6, r6, #32
 8009902:	42b0      	cmp	r0, r6
 8009904:	dbe7      	blt.n	80098d6 <__gethex+0x442>
 8009906:	e7f0      	b.n	80098ea <__gethex+0x456>
 8009908:	0801de90 	.word	0x0801de90

0800990c <L_shift>:
 800990c:	f1c2 0208 	rsb	r2, r2, #8
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	f1c2 0620 	rsb	r6, r2, #32
 8009918:	6843      	ldr	r3, [r0, #4]
 800991a:	6804      	ldr	r4, [r0, #0]
 800991c:	fa03 f506 	lsl.w	r5, r3, r6
 8009920:	432c      	orrs	r4, r5
 8009922:	40d3      	lsrs	r3, r2
 8009924:	6004      	str	r4, [r0, #0]
 8009926:	f840 3f04 	str.w	r3, [r0, #4]!
 800992a:	4288      	cmp	r0, r1
 800992c:	d3f4      	bcc.n	8009918 <L_shift+0xc>
 800992e:	bd70      	pop	{r4, r5, r6, pc}

08009930 <__match>:
 8009930:	b530      	push	{r4, r5, lr}
 8009932:	6803      	ldr	r3, [r0, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800993a:	b914      	cbnz	r4, 8009942 <__match+0x12>
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	2001      	movs	r0, #1
 8009940:	bd30      	pop	{r4, r5, pc}
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800994a:	2d19      	cmp	r5, #25
 800994c:	bf98      	it	ls
 800994e:	3220      	addls	r2, #32
 8009950:	42a2      	cmp	r2, r4
 8009952:	d0f0      	beq.n	8009936 <__match+0x6>
 8009954:	2000      	movs	r0, #0
 8009956:	e7f3      	b.n	8009940 <__match+0x10>

08009958 <__hexnan>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	2500      	movs	r5, #0
 800995e:	680b      	ldr	r3, [r1, #0]
 8009960:	4682      	mov	sl, r0
 8009962:	115e      	asrs	r6, r3, #5
 8009964:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009968:	f013 031f 	ands.w	r3, r3, #31
 800996c:	bf18      	it	ne
 800996e:	3604      	addne	r6, #4
 8009970:	1f37      	subs	r7, r6, #4
 8009972:	46b9      	mov	r9, r7
 8009974:	463c      	mov	r4, r7
 8009976:	46ab      	mov	fp, r5
 8009978:	b087      	sub	sp, #28
 800997a:	4690      	mov	r8, r2
 800997c:	6802      	ldr	r2, [r0, #0]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	f846 5c04 	str.w	r5, [r6, #-4]
 8009984:	9502      	str	r5, [sp, #8]
 8009986:	7851      	ldrb	r1, [r2, #1]
 8009988:	1c53      	adds	r3, r2, #1
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	b341      	cbz	r1, 80099e0 <__hexnan+0x88>
 800998e:	4608      	mov	r0, r1
 8009990:	9205      	str	r2, [sp, #20]
 8009992:	9104      	str	r1, [sp, #16]
 8009994:	f7ff fd69 	bl	800946a <__hexdig_fun>
 8009998:	2800      	cmp	r0, #0
 800999a:	d14f      	bne.n	8009a3c <__hexnan+0xe4>
 800999c:	9904      	ldr	r1, [sp, #16]
 800999e:	9a05      	ldr	r2, [sp, #20]
 80099a0:	2920      	cmp	r1, #32
 80099a2:	d818      	bhi.n	80099d6 <__hexnan+0x7e>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	459b      	cmp	fp, r3
 80099a8:	dd13      	ble.n	80099d2 <__hexnan+0x7a>
 80099aa:	454c      	cmp	r4, r9
 80099ac:	d206      	bcs.n	80099bc <__hexnan+0x64>
 80099ae:	2d07      	cmp	r5, #7
 80099b0:	dc04      	bgt.n	80099bc <__hexnan+0x64>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4649      	mov	r1, r9
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ffa8 	bl	800990c <L_shift>
 80099bc:	4544      	cmp	r4, r8
 80099be:	d950      	bls.n	8009a62 <__hexnan+0x10a>
 80099c0:	2300      	movs	r3, #0
 80099c2:	f1a4 0904 	sub.w	r9, r4, #4
 80099c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ca:	461d      	mov	r5, r3
 80099cc:	464c      	mov	r4, r9
 80099ce:	f8cd b008 	str.w	fp, [sp, #8]
 80099d2:	9a03      	ldr	r2, [sp, #12]
 80099d4:	e7d7      	b.n	8009986 <__hexnan+0x2e>
 80099d6:	2929      	cmp	r1, #41	; 0x29
 80099d8:	d156      	bne.n	8009a88 <__hexnan+0x130>
 80099da:	3202      	adds	r2, #2
 80099dc:	f8ca 2000 	str.w	r2, [sl]
 80099e0:	f1bb 0f00 	cmp.w	fp, #0
 80099e4:	d050      	beq.n	8009a88 <__hexnan+0x130>
 80099e6:	454c      	cmp	r4, r9
 80099e8:	d206      	bcs.n	80099f8 <__hexnan+0xa0>
 80099ea:	2d07      	cmp	r5, #7
 80099ec:	dc04      	bgt.n	80099f8 <__hexnan+0xa0>
 80099ee:	462a      	mov	r2, r5
 80099f0:	4649      	mov	r1, r9
 80099f2:	4620      	mov	r0, r4
 80099f4:	f7ff ff8a 	bl	800990c <L_shift>
 80099f8:	4544      	cmp	r4, r8
 80099fa:	d934      	bls.n	8009a66 <__hexnan+0x10e>
 80099fc:	4623      	mov	r3, r4
 80099fe:	f1a8 0204 	sub.w	r2, r8, #4
 8009a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a06:	429f      	cmp	r7, r3
 8009a08:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a0c:	d2f9      	bcs.n	8009a02 <__hexnan+0xaa>
 8009a0e:	1b3b      	subs	r3, r7, r4
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	3304      	adds	r3, #4
 8009a16:	3401      	adds	r4, #1
 8009a18:	3e03      	subs	r6, #3
 8009a1a:	42b4      	cmp	r4, r6
 8009a1c:	bf88      	it	hi
 8009a1e:	2304      	movhi	r3, #4
 8009a20:	2200      	movs	r2, #0
 8009a22:	4443      	add	r3, r8
 8009a24:	f843 2b04 	str.w	r2, [r3], #4
 8009a28:	429f      	cmp	r7, r3
 8009a2a:	d2fb      	bcs.n	8009a24 <__hexnan+0xcc>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	b91b      	cbnz	r3, 8009a38 <__hexnan+0xe0>
 8009a30:	4547      	cmp	r7, r8
 8009a32:	d127      	bne.n	8009a84 <__hexnan+0x12c>
 8009a34:	2301      	movs	r3, #1
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2005      	movs	r0, #5
 8009a3a:	e026      	b.n	8009a8a <__hexnan+0x132>
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	2d08      	cmp	r5, #8
 8009a40:	f10b 0b01 	add.w	fp, fp, #1
 8009a44:	dd06      	ble.n	8009a54 <__hexnan+0xfc>
 8009a46:	4544      	cmp	r4, r8
 8009a48:	d9c3      	bls.n	80099d2 <__hexnan+0x7a>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2501      	movs	r5, #1
 8009a4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a52:	3c04      	subs	r4, #4
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	f000 000f 	and.w	r0, r0, #15
 8009a5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	e7b7      	b.n	80099d2 <__hexnan+0x7a>
 8009a62:	2508      	movs	r5, #8
 8009a64:	e7b5      	b.n	80099d2 <__hexnan+0x7a>
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0df      	beq.n	8009a2c <__hexnan+0xd4>
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	f1c3 0320 	rsb	r3, r3, #32
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
 8009a78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a7c:	401a      	ands	r2, r3
 8009a7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a82:	e7d3      	b.n	8009a2c <__hexnan+0xd4>
 8009a84:	3f04      	subs	r7, #4
 8009a86:	e7d1      	b.n	8009a2c <__hexnan+0xd4>
 8009a88:	2004      	movs	r0, #4
 8009a8a:	b007      	add	sp, #28
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a90 <_localeconv_r>:
 8009a90:	4800      	ldr	r0, [pc, #0]	; (8009a94 <_localeconv_r+0x4>)
 8009a92:	4770      	bx	lr
 8009a94:	20000168 	.word	0x20000168

08009a98 <malloc>:
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <malloc+0xc>)
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f000 bd65 	b.w	800a56c <_malloc_r>
 8009aa2:	bf00      	nop
 8009aa4:	20000010 	.word	0x20000010

08009aa8 <__ascii_mbtowc>:
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	b901      	cbnz	r1, 8009aae <__ascii_mbtowc+0x6>
 8009aac:	a901      	add	r1, sp, #4
 8009aae:	b142      	cbz	r2, 8009ac2 <__ascii_mbtowc+0x1a>
 8009ab0:	b14b      	cbz	r3, 8009ac6 <__ascii_mbtowc+0x1e>
 8009ab2:	7813      	ldrb	r3, [r2, #0]
 8009ab4:	600b      	str	r3, [r1, #0]
 8009ab6:	7812      	ldrb	r2, [r2, #0]
 8009ab8:	1e10      	subs	r0, r2, #0
 8009aba:	bf18      	it	ne
 8009abc:	2001      	movne	r0, #1
 8009abe:	b002      	add	sp, #8
 8009ac0:	4770      	bx	lr
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	e7fb      	b.n	8009abe <__ascii_mbtowc+0x16>
 8009ac6:	f06f 0001 	mvn.w	r0, #1
 8009aca:	e7f8      	b.n	8009abe <__ascii_mbtowc+0x16>

08009acc <memchr>:
 8009acc:	4603      	mov	r3, r0
 8009ace:	b510      	push	{r4, lr}
 8009ad0:	b2c9      	uxtb	r1, r1
 8009ad2:	4402      	add	r2, r0
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	d101      	bne.n	8009ade <memchr+0x12>
 8009ada:	2000      	movs	r0, #0
 8009adc:	e003      	b.n	8009ae6 <memchr+0x1a>
 8009ade:	7804      	ldrb	r4, [r0, #0]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	428c      	cmp	r4, r1
 8009ae4:	d1f6      	bne.n	8009ad4 <memchr+0x8>
 8009ae6:	bd10      	pop	{r4, pc}

08009ae8 <memcpy>:
 8009ae8:	440a      	add	r2, r1
 8009aea:	4291      	cmp	r1, r2
 8009aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009af0:	d100      	bne.n	8009af4 <memcpy+0xc>
 8009af2:	4770      	bx	lr
 8009af4:	b510      	push	{r4, lr}
 8009af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b00:	d1f9      	bne.n	8009af6 <memcpy+0xe>
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <_Balloc>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	b976      	cbnz	r6, 8009b2c <_Balloc+0x28>
 8009b0e:	2010      	movs	r0, #16
 8009b10:	f7ff ffc2 	bl	8009a98 <malloc>
 8009b14:	4602      	mov	r2, r0
 8009b16:	6260      	str	r0, [r4, #36]	; 0x24
 8009b18:	b920      	cbnz	r0, 8009b24 <_Balloc+0x20>
 8009b1a:	2166      	movs	r1, #102	; 0x66
 8009b1c:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <_Balloc+0x78>)
 8009b1e:	4818      	ldr	r0, [pc, #96]	; (8009b80 <_Balloc+0x7c>)
 8009b20:	f000 ff2c 	bl	800a97c <__assert_func>
 8009b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b28:	6006      	str	r6, [r0, #0]
 8009b2a:	60c6      	str	r6, [r0, #12]
 8009b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b2e:	68f3      	ldr	r3, [r6, #12]
 8009b30:	b183      	cbz	r3, 8009b54 <_Balloc+0x50>
 8009b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b3a:	b9b8      	cbnz	r0, 8009b6c <_Balloc+0x68>
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b42:	1d72      	adds	r2, r6, #5
 8009b44:	4620      	mov	r0, r4
 8009b46:	0092      	lsls	r2, r2, #2
 8009b48:	f000 fc94 	bl	800a474 <_calloc_r>
 8009b4c:	b160      	cbz	r0, 8009b68 <_Balloc+0x64>
 8009b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b52:	e00e      	b.n	8009b72 <_Balloc+0x6e>
 8009b54:	2221      	movs	r2, #33	; 0x21
 8009b56:	2104      	movs	r1, #4
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fc8b 	bl	800a474 <_calloc_r>
 8009b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b60:	60f0      	str	r0, [r6, #12]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <_Balloc+0x2e>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	6802      	ldr	r2, [r0, #0]
 8009b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b72:	2300      	movs	r3, #0
 8009b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b78:	e7f7      	b.n	8009b6a <_Balloc+0x66>
 8009b7a:	bf00      	nop
 8009b7c:	0801de1e 	.word	0x0801de1e
 8009b80:	0801df1c 	.word	0x0801df1c

08009b84 <_Bfree>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b88:	4605      	mov	r5, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b976      	cbnz	r6, 8009bac <_Bfree+0x28>
 8009b8e:	2010      	movs	r0, #16
 8009b90:	f7ff ff82 	bl	8009a98 <malloc>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6268      	str	r0, [r5, #36]	; 0x24
 8009b98:	b920      	cbnz	r0, 8009ba4 <_Bfree+0x20>
 8009b9a:	218a      	movs	r1, #138	; 0x8a
 8009b9c:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <_Bfree+0x3c>)
 8009b9e:	4809      	ldr	r0, [pc, #36]	; (8009bc4 <_Bfree+0x40>)
 8009ba0:	f000 feec 	bl	800a97c <__assert_func>
 8009ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ba8:	6006      	str	r6, [r0, #0]
 8009baa:	60c6      	str	r6, [r0, #12]
 8009bac:	b13c      	cbz	r4, 8009bbe <_Bfree+0x3a>
 8009bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bb0:	6862      	ldr	r2, [r4, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bb8:	6021      	str	r1, [r4, #0]
 8009bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	0801de1e 	.word	0x0801de1e
 8009bc4:	0801df1c 	.word	0x0801df1c

08009bc8 <__multadd>:
 8009bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bcc:	4607      	mov	r7, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	690d      	ldr	r5, [r1, #16]
 8009bd6:	f101 0c14 	add.w	ip, r1, #20
 8009bda:	f8dc 3000 	ldr.w	r3, [ip]
 8009bde:	3001      	adds	r0, #1
 8009be0:	b299      	uxth	r1, r3
 8009be2:	fb02 6101 	mla	r1, r2, r1, r6
 8009be6:	0c1e      	lsrs	r6, r3, #16
 8009be8:	0c0b      	lsrs	r3, r1, #16
 8009bea:	fb02 3306 	mla	r3, r2, r6, r3
 8009bee:	b289      	uxth	r1, r1
 8009bf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bf4:	4285      	cmp	r5, r0
 8009bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bfa:	f84c 1b04 	str.w	r1, [ip], #4
 8009bfe:	dcec      	bgt.n	8009bda <__multadd+0x12>
 8009c00:	b30e      	cbz	r6, 8009c46 <__multadd+0x7e>
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	dc19      	bgt.n	8009c3c <__multadd+0x74>
 8009c08:	6861      	ldr	r1, [r4, #4]
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	3101      	adds	r1, #1
 8009c0e:	f7ff ff79 	bl	8009b04 <_Balloc>
 8009c12:	4680      	mov	r8, r0
 8009c14:	b928      	cbnz	r0, 8009c22 <__multadd+0x5a>
 8009c16:	4602      	mov	r2, r0
 8009c18:	21b5      	movs	r1, #181	; 0xb5
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <__multadd+0x84>)
 8009c1c:	480c      	ldr	r0, [pc, #48]	; (8009c50 <__multadd+0x88>)
 8009c1e:	f000 fead 	bl	800a97c <__assert_func>
 8009c22:	6922      	ldr	r2, [r4, #16]
 8009c24:	f104 010c 	add.w	r1, r4, #12
 8009c28:	3202      	adds	r2, #2
 8009c2a:	0092      	lsls	r2, r2, #2
 8009c2c:	300c      	adds	r0, #12
 8009c2e:	f7ff ff5b 	bl	8009ae8 <memcpy>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4638      	mov	r0, r7
 8009c36:	f7ff ffa5 	bl	8009b84 <_Bfree>
 8009c3a:	4644      	mov	r4, r8
 8009c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c40:	3501      	adds	r5, #1
 8009c42:	615e      	str	r6, [r3, #20]
 8009c44:	6125      	str	r5, [r4, #16]
 8009c46:	4620      	mov	r0, r4
 8009c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4c:	0801de90 	.word	0x0801de90
 8009c50:	0801df1c 	.word	0x0801df1c

08009c54 <__s2b>:
 8009c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c58:	4615      	mov	r5, r2
 8009c5a:	2209      	movs	r2, #9
 8009c5c:	461f      	mov	r7, r3
 8009c5e:	3308      	adds	r3, #8
 8009c60:	460c      	mov	r4, r1
 8009c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c66:	4606      	mov	r6, r0
 8009c68:	2201      	movs	r2, #1
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	db09      	blt.n	8009c84 <__s2b+0x30>
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff ff47 	bl	8009b04 <_Balloc>
 8009c76:	b940      	cbnz	r0, 8009c8a <__s2b+0x36>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	21ce      	movs	r1, #206	; 0xce
 8009c7c:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <__s2b+0x8c>)
 8009c7e:	4819      	ldr	r0, [pc, #100]	; (8009ce4 <__s2b+0x90>)
 8009c80:	f000 fe7c 	bl	800a97c <__assert_func>
 8009c84:	0052      	lsls	r2, r2, #1
 8009c86:	3101      	adds	r1, #1
 8009c88:	e7f0      	b.n	8009c6c <__s2b+0x18>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	2d09      	cmp	r5, #9
 8009c8e:	6143      	str	r3, [r0, #20]
 8009c90:	f04f 0301 	mov.w	r3, #1
 8009c94:	6103      	str	r3, [r0, #16]
 8009c96:	dd16      	ble.n	8009cc6 <__s2b+0x72>
 8009c98:	f104 0909 	add.w	r9, r4, #9
 8009c9c:	46c8      	mov	r8, r9
 8009c9e:	442c      	add	r4, r5
 8009ca0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	4630      	mov	r0, r6
 8009caa:	3b30      	subs	r3, #48	; 0x30
 8009cac:	f7ff ff8c 	bl	8009bc8 <__multadd>
 8009cb0:	45a0      	cmp	r8, r4
 8009cb2:	d1f5      	bne.n	8009ca0 <__s2b+0x4c>
 8009cb4:	f1a5 0408 	sub.w	r4, r5, #8
 8009cb8:	444c      	add	r4, r9
 8009cba:	1b2d      	subs	r5, r5, r4
 8009cbc:	1963      	adds	r3, r4, r5
 8009cbe:	42bb      	cmp	r3, r7
 8009cc0:	db04      	blt.n	8009ccc <__s2b+0x78>
 8009cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc6:	2509      	movs	r5, #9
 8009cc8:	340a      	adds	r4, #10
 8009cca:	e7f6      	b.n	8009cba <__s2b+0x66>
 8009ccc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	220a      	movs	r2, #10
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	3b30      	subs	r3, #48	; 0x30
 8009cd8:	f7ff ff76 	bl	8009bc8 <__multadd>
 8009cdc:	e7ee      	b.n	8009cbc <__s2b+0x68>
 8009cde:	bf00      	nop
 8009ce0:	0801de90 	.word	0x0801de90
 8009ce4:	0801df1c 	.word	0x0801df1c

08009ce8 <__hi0bits>:
 8009ce8:	0c02      	lsrs	r2, r0, #16
 8009cea:	0412      	lsls	r2, r2, #16
 8009cec:	4603      	mov	r3, r0
 8009cee:	b9ca      	cbnz	r2, 8009d24 <__hi0bits+0x3c>
 8009cf0:	0403      	lsls	r3, r0, #16
 8009cf2:	2010      	movs	r0, #16
 8009cf4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cf8:	bf04      	itt	eq
 8009cfa:	021b      	lsleq	r3, r3, #8
 8009cfc:	3008      	addeq	r0, #8
 8009cfe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d02:	bf04      	itt	eq
 8009d04:	011b      	lsleq	r3, r3, #4
 8009d06:	3004      	addeq	r0, #4
 8009d08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d0c:	bf04      	itt	eq
 8009d0e:	009b      	lsleq	r3, r3, #2
 8009d10:	3002      	addeq	r0, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	db05      	blt.n	8009d22 <__hi0bits+0x3a>
 8009d16:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d1a:	f100 0001 	add.w	r0, r0, #1
 8009d1e:	bf08      	it	eq
 8009d20:	2020      	moveq	r0, #32
 8009d22:	4770      	bx	lr
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7e5      	b.n	8009cf4 <__hi0bits+0xc>

08009d28 <__lo0bits>:
 8009d28:	6803      	ldr	r3, [r0, #0]
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	f013 0007 	ands.w	r0, r3, #7
 8009d30:	d00b      	beq.n	8009d4a <__lo0bits+0x22>
 8009d32:	07d9      	lsls	r1, r3, #31
 8009d34:	d421      	bmi.n	8009d7a <__lo0bits+0x52>
 8009d36:	0798      	lsls	r0, r3, #30
 8009d38:	bf49      	itett	mi
 8009d3a:	085b      	lsrmi	r3, r3, #1
 8009d3c:	089b      	lsrpl	r3, r3, #2
 8009d3e:	2001      	movmi	r0, #1
 8009d40:	6013      	strmi	r3, [r2, #0]
 8009d42:	bf5c      	itt	pl
 8009d44:	2002      	movpl	r0, #2
 8009d46:	6013      	strpl	r3, [r2, #0]
 8009d48:	4770      	bx	lr
 8009d4a:	b299      	uxth	r1, r3
 8009d4c:	b909      	cbnz	r1, 8009d52 <__lo0bits+0x2a>
 8009d4e:	2010      	movs	r0, #16
 8009d50:	0c1b      	lsrs	r3, r3, #16
 8009d52:	b2d9      	uxtb	r1, r3
 8009d54:	b909      	cbnz	r1, 8009d5a <__lo0bits+0x32>
 8009d56:	3008      	adds	r0, #8
 8009d58:	0a1b      	lsrs	r3, r3, #8
 8009d5a:	0719      	lsls	r1, r3, #28
 8009d5c:	bf04      	itt	eq
 8009d5e:	091b      	lsreq	r3, r3, #4
 8009d60:	3004      	addeq	r0, #4
 8009d62:	0799      	lsls	r1, r3, #30
 8009d64:	bf04      	itt	eq
 8009d66:	089b      	lsreq	r3, r3, #2
 8009d68:	3002      	addeq	r0, #2
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d403      	bmi.n	8009d76 <__lo0bits+0x4e>
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	f100 0001 	add.w	r0, r0, #1
 8009d74:	d003      	beq.n	8009d7e <__lo0bits+0x56>
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	4770      	bx	lr
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	4770      	bx	lr
 8009d7e:	2020      	movs	r0, #32
 8009d80:	4770      	bx	lr
	...

08009d84 <__i2b>:
 8009d84:	b510      	push	{r4, lr}
 8009d86:	460c      	mov	r4, r1
 8009d88:	2101      	movs	r1, #1
 8009d8a:	f7ff febb 	bl	8009b04 <_Balloc>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	b928      	cbnz	r0, 8009d9e <__i2b+0x1a>
 8009d92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d96:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <__i2b+0x24>)
 8009d98:	4804      	ldr	r0, [pc, #16]	; (8009dac <__i2b+0x28>)
 8009d9a:	f000 fdef 	bl	800a97c <__assert_func>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	6144      	str	r4, [r0, #20]
 8009da2:	6103      	str	r3, [r0, #16]
 8009da4:	bd10      	pop	{r4, pc}
 8009da6:	bf00      	nop
 8009da8:	0801de90 	.word	0x0801de90
 8009dac:	0801df1c 	.word	0x0801df1c

08009db0 <__multiply>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	4691      	mov	r9, r2
 8009db6:	690a      	ldr	r2, [r1, #16]
 8009db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	bfbe      	ittt	lt
 8009dc2:	460b      	movlt	r3, r1
 8009dc4:	464c      	movlt	r4, r9
 8009dc6:	4699      	movlt	r9, r3
 8009dc8:	6927      	ldr	r7, [r4, #16]
 8009dca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dce:	68a3      	ldr	r3, [r4, #8]
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	eb07 060a 	add.w	r6, r7, sl
 8009dd6:	42b3      	cmp	r3, r6
 8009dd8:	b085      	sub	sp, #20
 8009dda:	bfb8      	it	lt
 8009ddc:	3101      	addlt	r1, #1
 8009dde:	f7ff fe91 	bl	8009b04 <_Balloc>
 8009de2:	b930      	cbnz	r0, 8009df2 <__multiply+0x42>
 8009de4:	4602      	mov	r2, r0
 8009de6:	f240 115d 	movw	r1, #349	; 0x15d
 8009dea:	4b43      	ldr	r3, [pc, #268]	; (8009ef8 <__multiply+0x148>)
 8009dec:	4843      	ldr	r0, [pc, #268]	; (8009efc <__multiply+0x14c>)
 8009dee:	f000 fdc5 	bl	800a97c <__assert_func>
 8009df2:	f100 0514 	add.w	r5, r0, #20
 8009df6:	462b      	mov	r3, r5
 8009df8:	2200      	movs	r2, #0
 8009dfa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dfe:	4543      	cmp	r3, r8
 8009e00:	d321      	bcc.n	8009e46 <__multiply+0x96>
 8009e02:	f104 0314 	add.w	r3, r4, #20
 8009e06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e0a:	f109 0314 	add.w	r3, r9, #20
 8009e0e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e12:	9202      	str	r2, [sp, #8]
 8009e14:	1b3a      	subs	r2, r7, r4
 8009e16:	3a15      	subs	r2, #21
 8009e18:	f022 0203 	bic.w	r2, r2, #3
 8009e1c:	3204      	adds	r2, #4
 8009e1e:	f104 0115 	add.w	r1, r4, #21
 8009e22:	428f      	cmp	r7, r1
 8009e24:	bf38      	it	cc
 8009e26:	2204      	movcc	r2, #4
 8009e28:	9201      	str	r2, [sp, #4]
 8009e2a:	9a02      	ldr	r2, [sp, #8]
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d80c      	bhi.n	8009e4c <__multiply+0x9c>
 8009e32:	2e00      	cmp	r6, #0
 8009e34:	dd03      	ble.n	8009e3e <__multiply+0x8e>
 8009e36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d059      	beq.n	8009ef2 <__multiply+0x142>
 8009e3e:	6106      	str	r6, [r0, #16]
 8009e40:	b005      	add	sp, #20
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	f843 2b04 	str.w	r2, [r3], #4
 8009e4a:	e7d8      	b.n	8009dfe <__multiply+0x4e>
 8009e4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e50:	f1ba 0f00 	cmp.w	sl, #0
 8009e54:	d023      	beq.n	8009e9e <__multiply+0xee>
 8009e56:	46a9      	mov	r9, r5
 8009e58:	f04f 0c00 	mov.w	ip, #0
 8009e5c:	f104 0e14 	add.w	lr, r4, #20
 8009e60:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e64:	f8d9 1000 	ldr.w	r1, [r9]
 8009e68:	fa1f fb82 	uxth.w	fp, r2
 8009e6c:	b289      	uxth	r1, r1
 8009e6e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e72:	4461      	add	r1, ip
 8009e74:	f8d9 c000 	ldr.w	ip, [r9]
 8009e78:	0c12      	lsrs	r2, r2, #16
 8009e7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e7e:	fb0a c202 	mla	r2, sl, r2, ip
 8009e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e86:	b289      	uxth	r1, r1
 8009e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e8c:	4577      	cmp	r7, lr
 8009e8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e92:	f849 1b04 	str.w	r1, [r9], #4
 8009e96:	d8e3      	bhi.n	8009e60 <__multiply+0xb0>
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	f845 c002 	str.w	ip, [r5, r2]
 8009e9e:	9a03      	ldr	r2, [sp, #12]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ea6:	f1b9 0f00 	cmp.w	r9, #0
 8009eaa:	d020      	beq.n	8009eee <__multiply+0x13e>
 8009eac:	46ae      	mov	lr, r5
 8009eae:	f04f 0a00 	mov.w	sl, #0
 8009eb2:	6829      	ldr	r1, [r5, #0]
 8009eb4:	f104 0c14 	add.w	ip, r4, #20
 8009eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ec0:	b289      	uxth	r1, r1
 8009ec2:	fb09 220b 	mla	r2, r9, fp, r2
 8009ec6:	4492      	add	sl, r2
 8009ec8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ecc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ed0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ed4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ed8:	0c12      	lsrs	r2, r2, #16
 8009eda:	fb09 1102 	mla	r1, r9, r2, r1
 8009ede:	4567      	cmp	r7, ip
 8009ee0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ee4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ee8:	d8e6      	bhi.n	8009eb8 <__multiply+0x108>
 8009eea:	9a01      	ldr	r2, [sp, #4]
 8009eec:	50a9      	str	r1, [r5, r2]
 8009eee:	3504      	adds	r5, #4
 8009ef0:	e79b      	b.n	8009e2a <__multiply+0x7a>
 8009ef2:	3e01      	subs	r6, #1
 8009ef4:	e79d      	b.n	8009e32 <__multiply+0x82>
 8009ef6:	bf00      	nop
 8009ef8:	0801de90 	.word	0x0801de90
 8009efc:	0801df1c 	.word	0x0801df1c

08009f00 <__pow5mult>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	4615      	mov	r5, r2
 8009f06:	f012 0203 	ands.w	r2, r2, #3
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	d007      	beq.n	8009f20 <__pow5mult+0x20>
 8009f10:	4c25      	ldr	r4, [pc, #148]	; (8009fa8 <__pow5mult+0xa8>)
 8009f12:	3a01      	subs	r2, #1
 8009f14:	2300      	movs	r3, #0
 8009f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f1a:	f7ff fe55 	bl	8009bc8 <__multadd>
 8009f1e:	4607      	mov	r7, r0
 8009f20:	10ad      	asrs	r5, r5, #2
 8009f22:	d03d      	beq.n	8009fa0 <__pow5mult+0xa0>
 8009f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f26:	b97c      	cbnz	r4, 8009f48 <__pow5mult+0x48>
 8009f28:	2010      	movs	r0, #16
 8009f2a:	f7ff fdb5 	bl	8009a98 <malloc>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6270      	str	r0, [r6, #36]	; 0x24
 8009f32:	b928      	cbnz	r0, 8009f40 <__pow5mult+0x40>
 8009f34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f38:	4b1c      	ldr	r3, [pc, #112]	; (8009fac <__pow5mult+0xac>)
 8009f3a:	481d      	ldr	r0, [pc, #116]	; (8009fb0 <__pow5mult+0xb0>)
 8009f3c:	f000 fd1e 	bl	800a97c <__assert_func>
 8009f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f44:	6004      	str	r4, [r0, #0]
 8009f46:	60c4      	str	r4, [r0, #12]
 8009f48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f50:	b94c      	cbnz	r4, 8009f66 <__pow5mult+0x66>
 8009f52:	f240 2171 	movw	r1, #625	; 0x271
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ff14 	bl	8009d84 <__i2b>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	f04f 0900 	mov.w	r9, #0
 8009f6a:	07eb      	lsls	r3, r5, #31
 8009f6c:	d50a      	bpl.n	8009f84 <__pow5mult+0x84>
 8009f6e:	4639      	mov	r1, r7
 8009f70:	4622      	mov	r2, r4
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ff1c 	bl	8009db0 <__multiply>
 8009f78:	4680      	mov	r8, r0
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff fe01 	bl	8009b84 <_Bfree>
 8009f82:	4647      	mov	r7, r8
 8009f84:	106d      	asrs	r5, r5, #1
 8009f86:	d00b      	beq.n	8009fa0 <__pow5mult+0xa0>
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	b938      	cbnz	r0, 8009f9c <__pow5mult+0x9c>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff ff0d 	bl	8009db0 <__multiply>
 8009f96:	6020      	str	r0, [r4, #0]
 8009f98:	f8c0 9000 	str.w	r9, [r0]
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	e7e4      	b.n	8009f6a <__pow5mult+0x6a>
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0801e068 	.word	0x0801e068
 8009fac:	0801de1e 	.word	0x0801de1e
 8009fb0:	0801df1c 	.word	0x0801df1c

08009fb4 <__lshift>:
 8009fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	4607      	mov	r7, r0
 8009fbc:	4691      	mov	r9, r2
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	6849      	ldr	r1, [r1, #4]
 8009fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fcc:	f108 0601 	add.w	r6, r8, #1
 8009fd0:	42b3      	cmp	r3, r6
 8009fd2:	db0b      	blt.n	8009fec <__lshift+0x38>
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	f7ff fd95 	bl	8009b04 <_Balloc>
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b948      	cbnz	r0, 8009ff2 <__lshift+0x3e>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <__lshift+0xd8>)
 8009fe6:	482a      	ldr	r0, [pc, #168]	; (800a090 <__lshift+0xdc>)
 8009fe8:	f000 fcc8 	bl	800a97c <__assert_func>
 8009fec:	3101      	adds	r1, #1
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	e7ee      	b.n	8009fd0 <__lshift+0x1c>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f100 0114 	add.w	r1, r0, #20
 8009ff8:	f100 0210 	add.w	r2, r0, #16
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	4553      	cmp	r3, sl
 800a000:	db37      	blt.n	800a072 <__lshift+0xbe>
 800a002:	6920      	ldr	r0, [r4, #16]
 800a004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a008:	f104 0314 	add.w	r3, r4, #20
 800a00c:	f019 091f 	ands.w	r9, r9, #31
 800a010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a014:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a018:	d02f      	beq.n	800a07a <__lshift+0xc6>
 800a01a:	468a      	mov	sl, r1
 800a01c:	f04f 0c00 	mov.w	ip, #0
 800a020:	f1c9 0e20 	rsb	lr, r9, #32
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	fa02 f209 	lsl.w	r2, r2, r9
 800a02a:	ea42 020c 	orr.w	r2, r2, ip
 800a02e:	f84a 2b04 	str.w	r2, [sl], #4
 800a032:	f853 2b04 	ldr.w	r2, [r3], #4
 800a036:	4298      	cmp	r0, r3
 800a038:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a03c:	d8f2      	bhi.n	800a024 <__lshift+0x70>
 800a03e:	1b03      	subs	r3, r0, r4
 800a040:	3b15      	subs	r3, #21
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	3304      	adds	r3, #4
 800a048:	f104 0215 	add.w	r2, r4, #21
 800a04c:	4290      	cmp	r0, r2
 800a04e:	bf38      	it	cc
 800a050:	2304      	movcc	r3, #4
 800a052:	f841 c003 	str.w	ip, [r1, r3]
 800a056:	f1bc 0f00 	cmp.w	ip, #0
 800a05a:	d001      	beq.n	800a060 <__lshift+0xac>
 800a05c:	f108 0602 	add.w	r6, r8, #2
 800a060:	3e01      	subs	r6, #1
 800a062:	4638      	mov	r0, r7
 800a064:	4621      	mov	r1, r4
 800a066:	612e      	str	r6, [r5, #16]
 800a068:	f7ff fd8c 	bl	8009b84 <_Bfree>
 800a06c:	4628      	mov	r0, r5
 800a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a072:	f842 0f04 	str.w	r0, [r2, #4]!
 800a076:	3301      	adds	r3, #1
 800a078:	e7c1      	b.n	8009ffe <__lshift+0x4a>
 800a07a:	3904      	subs	r1, #4
 800a07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a080:	4298      	cmp	r0, r3
 800a082:	f841 2f04 	str.w	r2, [r1, #4]!
 800a086:	d8f9      	bhi.n	800a07c <__lshift+0xc8>
 800a088:	e7ea      	b.n	800a060 <__lshift+0xac>
 800a08a:	bf00      	nop
 800a08c:	0801de90 	.word	0x0801de90
 800a090:	0801df1c 	.word	0x0801df1c

0800a094 <__mcmp>:
 800a094:	4603      	mov	r3, r0
 800a096:	690a      	ldr	r2, [r1, #16]
 800a098:	6900      	ldr	r0, [r0, #16]
 800a09a:	b530      	push	{r4, r5, lr}
 800a09c:	1a80      	subs	r0, r0, r2
 800a09e:	d10d      	bne.n	800a0bc <__mcmp+0x28>
 800a0a0:	3314      	adds	r3, #20
 800a0a2:	3114      	adds	r1, #20
 800a0a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0b4:	4295      	cmp	r5, r2
 800a0b6:	d002      	beq.n	800a0be <__mcmp+0x2a>
 800a0b8:	d304      	bcc.n	800a0c4 <__mcmp+0x30>
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	bd30      	pop	{r4, r5, pc}
 800a0be:	42a3      	cmp	r3, r4
 800a0c0:	d3f4      	bcc.n	800a0ac <__mcmp+0x18>
 800a0c2:	e7fb      	b.n	800a0bc <__mcmp+0x28>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e7f8      	b.n	800a0bc <__mcmp+0x28>
	...

0800a0cc <__mdiff>:
 800a0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	4614      	mov	r4, r2
 800a0da:	f7ff ffdb 	bl	800a094 <__mcmp>
 800a0de:	1e06      	subs	r6, r0, #0
 800a0e0:	d111      	bne.n	800a106 <__mdiff+0x3a>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7ff fd0d 	bl	8009b04 <_Balloc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	b928      	cbnz	r0, 800a0fa <__mdiff+0x2e>
 800a0ee:	f240 2132 	movw	r1, #562	; 0x232
 800a0f2:	4b3a      	ldr	r3, [pc, #232]	; (800a1dc <__mdiff+0x110>)
 800a0f4:	483a      	ldr	r0, [pc, #232]	; (800a1e0 <__mdiff+0x114>)
 800a0f6:	f000 fc41 	bl	800a97c <__assert_func>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a100:	4610      	mov	r0, r2
 800a102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	bfa4      	itt	ge
 800a108:	4623      	movge	r3, r4
 800a10a:	462c      	movge	r4, r5
 800a10c:	4638      	mov	r0, r7
 800a10e:	6861      	ldr	r1, [r4, #4]
 800a110:	bfa6      	itte	ge
 800a112:	461d      	movge	r5, r3
 800a114:	2600      	movge	r6, #0
 800a116:	2601      	movlt	r6, #1
 800a118:	f7ff fcf4 	bl	8009b04 <_Balloc>
 800a11c:	4602      	mov	r2, r0
 800a11e:	b918      	cbnz	r0, 800a128 <__mdiff+0x5c>
 800a120:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <__mdiff+0x110>)
 800a126:	e7e5      	b.n	800a0f4 <__mdiff+0x28>
 800a128:	f102 0814 	add.w	r8, r2, #20
 800a12c:	46c2      	mov	sl, r8
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	6927      	ldr	r7, [r4, #16]
 800a134:	60c6      	str	r6, [r0, #12]
 800a136:	692e      	ldr	r6, [r5, #16]
 800a138:	f104 0014 	add.w	r0, r4, #20
 800a13c:	f105 0914 	add.w	r9, r5, #20
 800a140:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a148:	3410      	adds	r4, #16
 800a14a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a14e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a152:	fa1f f18b 	uxth.w	r1, fp
 800a156:	448c      	add	ip, r1
 800a158:	b299      	uxth	r1, r3
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	ebac 0101 	sub.w	r1, ip, r1
 800a160:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a164:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a168:	b289      	uxth	r1, r1
 800a16a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a16e:	454e      	cmp	r6, r9
 800a170:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a174:	f84a 3b04 	str.w	r3, [sl], #4
 800a178:	d8e7      	bhi.n	800a14a <__mdiff+0x7e>
 800a17a:	1b73      	subs	r3, r6, r5
 800a17c:	3b15      	subs	r3, #21
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	3515      	adds	r5, #21
 800a184:	3304      	adds	r3, #4
 800a186:	42ae      	cmp	r6, r5
 800a188:	bf38      	it	cc
 800a18a:	2304      	movcc	r3, #4
 800a18c:	4418      	add	r0, r3
 800a18e:	4443      	add	r3, r8
 800a190:	461e      	mov	r6, r3
 800a192:	4605      	mov	r5, r0
 800a194:	4575      	cmp	r5, lr
 800a196:	d30e      	bcc.n	800a1b6 <__mdiff+0xea>
 800a198:	f10e 0103 	add.w	r1, lr, #3
 800a19c:	1a09      	subs	r1, r1, r0
 800a19e:	f021 0103 	bic.w	r1, r1, #3
 800a1a2:	3803      	subs	r0, #3
 800a1a4:	4586      	cmp	lr, r0
 800a1a6:	bf38      	it	cc
 800a1a8:	2100      	movcc	r1, #0
 800a1aa:	4419      	add	r1, r3
 800a1ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a1b0:	b18b      	cbz	r3, 800a1d6 <__mdiff+0x10a>
 800a1b2:	6117      	str	r7, [r2, #16]
 800a1b4:	e7a4      	b.n	800a100 <__mdiff+0x34>
 800a1b6:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1ba:	fa1f f188 	uxth.w	r1, r8
 800a1be:	4461      	add	r1, ip
 800a1c0:	140c      	asrs	r4, r1, #16
 800a1c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1c6:	b289      	uxth	r1, r1
 800a1c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a1cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a1d0:	f846 1b04 	str.w	r1, [r6], #4
 800a1d4:	e7de      	b.n	800a194 <__mdiff+0xc8>
 800a1d6:	3f01      	subs	r7, #1
 800a1d8:	e7e8      	b.n	800a1ac <__mdiff+0xe0>
 800a1da:	bf00      	nop
 800a1dc:	0801de90 	.word	0x0801de90
 800a1e0:	0801df1c 	.word	0x0801df1c

0800a1e4 <__ulp>:
 800a1e4:	4b11      	ldr	r3, [pc, #68]	; (800a22c <__ulp+0x48>)
 800a1e6:	400b      	ands	r3, r1
 800a1e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dd02      	ble.n	800a1f6 <__ulp+0x12>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4770      	bx	lr
 800a1f6:	425b      	negs	r3, r3
 800a1f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a1fc:	f04f 0000 	mov.w	r0, #0
 800a200:	f04f 0100 	mov.w	r1, #0
 800a204:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a208:	da04      	bge.n	800a214 <__ulp+0x30>
 800a20a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a20e:	fa43 f102 	asr.w	r1, r3, r2
 800a212:	4770      	bx	lr
 800a214:	f1a2 0314 	sub.w	r3, r2, #20
 800a218:	2b1e      	cmp	r3, #30
 800a21a:	bfd6      	itet	le
 800a21c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a220:	2301      	movgt	r3, #1
 800a222:	fa22 f303 	lsrle.w	r3, r2, r3
 800a226:	4618      	mov	r0, r3
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	7ff00000 	.word	0x7ff00000

0800a230 <__b2d>:
 800a230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a234:	6907      	ldr	r7, [r0, #16]
 800a236:	f100 0914 	add.w	r9, r0, #20
 800a23a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a23e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a242:	f1a7 0804 	sub.w	r8, r7, #4
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff fd4e 	bl	8009ce8 <__hi0bits>
 800a24c:	f1c0 0320 	rsb	r3, r0, #32
 800a250:	280a      	cmp	r0, #10
 800a252:	600b      	str	r3, [r1, #0]
 800a254:	491f      	ldr	r1, [pc, #124]	; (800a2d4 <__b2d+0xa4>)
 800a256:	dc17      	bgt.n	800a288 <__b2d+0x58>
 800a258:	45c1      	cmp	r9, r8
 800a25a:	bf28      	it	cs
 800a25c:	2200      	movcs	r2, #0
 800a25e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a262:	fa26 f30c 	lsr.w	r3, r6, ip
 800a266:	bf38      	it	cc
 800a268:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a26c:	ea43 0501 	orr.w	r5, r3, r1
 800a270:	f100 0315 	add.w	r3, r0, #21
 800a274:	fa06 f303 	lsl.w	r3, r6, r3
 800a278:	fa22 f20c 	lsr.w	r2, r2, ip
 800a27c:	ea43 0402 	orr.w	r4, r3, r2
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a288:	45c1      	cmp	r9, r8
 800a28a:	bf2e      	itee	cs
 800a28c:	2200      	movcs	r2, #0
 800a28e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a292:	f1a7 0808 	subcc.w	r8, r7, #8
 800a296:	f1b0 030b 	subs.w	r3, r0, #11
 800a29a:	d016      	beq.n	800a2ca <__b2d+0x9a>
 800a29c:	f1c3 0720 	rsb	r7, r3, #32
 800a2a0:	fa22 f107 	lsr.w	r1, r2, r7
 800a2a4:	45c8      	cmp	r8, r9
 800a2a6:	fa06 f603 	lsl.w	r6, r6, r3
 800a2aa:	ea46 0601 	orr.w	r6, r6, r1
 800a2ae:	bf94      	ite	ls
 800a2b0:	2100      	movls	r1, #0
 800a2b2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a2b6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a2ba:	fa02 f003 	lsl.w	r0, r2, r3
 800a2be:	40f9      	lsrs	r1, r7
 800a2c0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2c4:	ea40 0401 	orr.w	r4, r0, r1
 800a2c8:	e7da      	b.n	800a280 <__b2d+0x50>
 800a2ca:	4614      	mov	r4, r2
 800a2cc:	ea46 0501 	orr.w	r5, r6, r1
 800a2d0:	e7d6      	b.n	800a280 <__b2d+0x50>
 800a2d2:	bf00      	nop
 800a2d4:	3ff00000 	.word	0x3ff00000

0800a2d8 <__d2b>:
 800a2d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2dc:	2101      	movs	r1, #1
 800a2de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a2e2:	4690      	mov	r8, r2
 800a2e4:	461d      	mov	r5, r3
 800a2e6:	f7ff fc0d 	bl	8009b04 <_Balloc>
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	b930      	cbnz	r0, 800a2fc <__d2b+0x24>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	f240 310a 	movw	r1, #778	; 0x30a
 800a2f4:	4b24      	ldr	r3, [pc, #144]	; (800a388 <__d2b+0xb0>)
 800a2f6:	4825      	ldr	r0, [pc, #148]	; (800a38c <__d2b+0xb4>)
 800a2f8:	f000 fb40 	bl	800a97c <__assert_func>
 800a2fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a300:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a304:	bb2d      	cbnz	r5, 800a352 <__d2b+0x7a>
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	f1b8 0300 	subs.w	r3, r8, #0
 800a30c:	d026      	beq.n	800a35c <__d2b+0x84>
 800a30e:	4668      	mov	r0, sp
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	f7ff fd09 	bl	8009d28 <__lo0bits>
 800a316:	9900      	ldr	r1, [sp, #0]
 800a318:	b1f0      	cbz	r0, 800a358 <__d2b+0x80>
 800a31a:	9a01      	ldr	r2, [sp, #4]
 800a31c:	f1c0 0320 	rsb	r3, r0, #32
 800a320:	fa02 f303 	lsl.w	r3, r2, r3
 800a324:	430b      	orrs	r3, r1
 800a326:	40c2      	lsrs	r2, r0
 800a328:	6163      	str	r3, [r4, #20]
 800a32a:	9201      	str	r2, [sp, #4]
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf14      	ite	ne
 800a332:	2102      	movne	r1, #2
 800a334:	2101      	moveq	r1, #1
 800a336:	61a3      	str	r3, [r4, #24]
 800a338:	6121      	str	r1, [r4, #16]
 800a33a:	b1c5      	cbz	r5, 800a36e <__d2b+0x96>
 800a33c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a340:	4405      	add	r5, r0
 800a342:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a346:	603d      	str	r5, [r7, #0]
 800a348:	6030      	str	r0, [r6, #0]
 800a34a:	4620      	mov	r0, r4
 800a34c:	b002      	add	sp, #8
 800a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a356:	e7d6      	b.n	800a306 <__d2b+0x2e>
 800a358:	6161      	str	r1, [r4, #20]
 800a35a:	e7e7      	b.n	800a32c <__d2b+0x54>
 800a35c:	a801      	add	r0, sp, #4
 800a35e:	f7ff fce3 	bl	8009d28 <__lo0bits>
 800a362:	2101      	movs	r1, #1
 800a364:	9b01      	ldr	r3, [sp, #4]
 800a366:	6121      	str	r1, [r4, #16]
 800a368:	6163      	str	r3, [r4, #20]
 800a36a:	3020      	adds	r0, #32
 800a36c:	e7e5      	b.n	800a33a <__d2b+0x62>
 800a36e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a372:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a376:	6038      	str	r0, [r7, #0]
 800a378:	6918      	ldr	r0, [r3, #16]
 800a37a:	f7ff fcb5 	bl	8009ce8 <__hi0bits>
 800a37e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a382:	6031      	str	r1, [r6, #0]
 800a384:	e7e1      	b.n	800a34a <__d2b+0x72>
 800a386:	bf00      	nop
 800a388:	0801de90 	.word	0x0801de90
 800a38c:	0801df1c 	.word	0x0801df1c

0800a390 <__ratio>:
 800a390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4688      	mov	r8, r1
 800a396:	4669      	mov	r1, sp
 800a398:	4681      	mov	r9, r0
 800a39a:	f7ff ff49 	bl	800a230 <__b2d>
 800a39e:	460f      	mov	r7, r1
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	a901      	add	r1, sp, #4
 800a3a8:	f7ff ff42 	bl	800a230 <__b2d>
 800a3ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3b4:	468b      	mov	fp, r1
 800a3b6:	eba3 0c02 	sub.w	ip, r3, r2
 800a3ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	bfd5      	itete	le
 800a3c8:	460a      	movle	r2, r1
 800a3ca:	462a      	movgt	r2, r5
 800a3cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3d0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3d4:	bfd8      	it	le
 800a3d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3da:	465b      	mov	r3, fp
 800a3dc:	4602      	mov	r2, r0
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7f6 f9a3 	bl	800072c <__aeabi_ddiv>
 800a3e6:	b003      	add	sp, #12
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3ec <__copybits>:
 800a3ec:	3901      	subs	r1, #1
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	1149      	asrs	r1, r1, #5
 800a3f2:	6914      	ldr	r4, [r2, #16]
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	f102 0314 	add.w	r3, r2, #20
 800a3fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a402:	1f05      	subs	r5, r0, #4
 800a404:	42a3      	cmp	r3, r4
 800a406:	d30c      	bcc.n	800a422 <__copybits+0x36>
 800a408:	1aa3      	subs	r3, r4, r2
 800a40a:	3b11      	subs	r3, #17
 800a40c:	f023 0303 	bic.w	r3, r3, #3
 800a410:	3211      	adds	r2, #17
 800a412:	42a2      	cmp	r2, r4
 800a414:	bf88      	it	hi
 800a416:	2300      	movhi	r3, #0
 800a418:	4418      	add	r0, r3
 800a41a:	2300      	movs	r3, #0
 800a41c:	4288      	cmp	r0, r1
 800a41e:	d305      	bcc.n	800a42c <__copybits+0x40>
 800a420:	bd70      	pop	{r4, r5, r6, pc}
 800a422:	f853 6b04 	ldr.w	r6, [r3], #4
 800a426:	f845 6f04 	str.w	r6, [r5, #4]!
 800a42a:	e7eb      	b.n	800a404 <__copybits+0x18>
 800a42c:	f840 3b04 	str.w	r3, [r0], #4
 800a430:	e7f4      	b.n	800a41c <__copybits+0x30>

0800a432 <__any_on>:
 800a432:	f100 0214 	add.w	r2, r0, #20
 800a436:	6900      	ldr	r0, [r0, #16]
 800a438:	114b      	asrs	r3, r1, #5
 800a43a:	4298      	cmp	r0, r3
 800a43c:	b510      	push	{r4, lr}
 800a43e:	db11      	blt.n	800a464 <__any_on+0x32>
 800a440:	dd0a      	ble.n	800a458 <__any_on+0x26>
 800a442:	f011 011f 	ands.w	r1, r1, #31
 800a446:	d007      	beq.n	800a458 <__any_on+0x26>
 800a448:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a44c:	fa24 f001 	lsr.w	r0, r4, r1
 800a450:	fa00 f101 	lsl.w	r1, r0, r1
 800a454:	428c      	cmp	r4, r1
 800a456:	d10b      	bne.n	800a470 <__any_on+0x3e>
 800a458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d803      	bhi.n	800a468 <__any_on+0x36>
 800a460:	2000      	movs	r0, #0
 800a462:	bd10      	pop	{r4, pc}
 800a464:	4603      	mov	r3, r0
 800a466:	e7f7      	b.n	800a458 <__any_on+0x26>
 800a468:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a46c:	2900      	cmp	r1, #0
 800a46e:	d0f5      	beq.n	800a45c <__any_on+0x2a>
 800a470:	2001      	movs	r0, #1
 800a472:	e7f6      	b.n	800a462 <__any_on+0x30>

0800a474 <_calloc_r>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	fba1 5402 	umull	r5, r4, r1, r2
 800a47a:	b934      	cbnz	r4, 800a48a <_calloc_r+0x16>
 800a47c:	4629      	mov	r1, r5
 800a47e:	f000 f875 	bl	800a56c <_malloc_r>
 800a482:	4606      	mov	r6, r0
 800a484:	b928      	cbnz	r0, 800a492 <_calloc_r+0x1e>
 800a486:	4630      	mov	r0, r6
 800a488:	bd70      	pop	{r4, r5, r6, pc}
 800a48a:	220c      	movs	r2, #12
 800a48c:	2600      	movs	r6, #0
 800a48e:	6002      	str	r2, [r0, #0]
 800a490:	e7f9      	b.n	800a486 <_calloc_r+0x12>
 800a492:	462a      	mov	r2, r5
 800a494:	4621      	mov	r1, r4
 800a496:	f7fc fbe5 	bl	8006c64 <memset>
 800a49a:	e7f4      	b.n	800a486 <_calloc_r+0x12>

0800a49c <_free_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4605      	mov	r5, r0
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	d040      	beq.n	800a526 <_free_r+0x8a>
 800a4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a8:	1f0c      	subs	r4, r1, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfb8      	it	lt
 800a4ae:	18e4      	addlt	r4, r4, r3
 800a4b0:	f000 fa94 	bl	800a9dc <__malloc_lock>
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	; (800a528 <_free_r+0x8c>)
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	b933      	cbnz	r3, 800a4c8 <_free_r+0x2c>
 800a4ba:	6063      	str	r3, [r4, #4]
 800a4bc:	6014      	str	r4, [r2, #0]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c4:	f000 ba90 	b.w	800a9e8 <__malloc_unlock>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d908      	bls.n	800a4de <_free_r+0x42>
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	1821      	adds	r1, r4, r0
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf01      	itttt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	1809      	addeq	r1, r1, r0
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	e7ed      	b.n	800a4ba <_free_r+0x1e>
 800a4de:	461a      	mov	r2, r3
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	b10b      	cbz	r3, 800a4e8 <_free_r+0x4c>
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d9fa      	bls.n	800a4de <_free_r+0x42>
 800a4e8:	6811      	ldr	r1, [r2, #0]
 800a4ea:	1850      	adds	r0, r2, r1
 800a4ec:	42a0      	cmp	r0, r4
 800a4ee:	d10b      	bne.n	800a508 <_free_r+0x6c>
 800a4f0:	6820      	ldr	r0, [r4, #0]
 800a4f2:	4401      	add	r1, r0
 800a4f4:	1850      	adds	r0, r2, r1
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	6011      	str	r1, [r2, #0]
 800a4fa:	d1e0      	bne.n	800a4be <_free_r+0x22>
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	4401      	add	r1, r0
 800a502:	6011      	str	r1, [r2, #0]
 800a504:	6053      	str	r3, [r2, #4]
 800a506:	e7da      	b.n	800a4be <_free_r+0x22>
 800a508:	d902      	bls.n	800a510 <_free_r+0x74>
 800a50a:	230c      	movs	r3, #12
 800a50c:	602b      	str	r3, [r5, #0]
 800a50e:	e7d6      	b.n	800a4be <_free_r+0x22>
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	1821      	adds	r1, r4, r0
 800a514:	428b      	cmp	r3, r1
 800a516:	bf01      	itttt	eq
 800a518:	6819      	ldreq	r1, [r3, #0]
 800a51a:	685b      	ldreq	r3, [r3, #4]
 800a51c:	1809      	addeq	r1, r1, r0
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	6054      	str	r4, [r2, #4]
 800a524:	e7cb      	b.n	800a4be <_free_r+0x22>
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000974 	.word	0x20000974

0800a52c <sbrk_aligned>:
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	4e0e      	ldr	r6, [pc, #56]	; (800a568 <sbrk_aligned+0x3c>)
 800a530:	460c      	mov	r4, r1
 800a532:	6831      	ldr	r1, [r6, #0]
 800a534:	4605      	mov	r5, r0
 800a536:	b911      	cbnz	r1, 800a53e <sbrk_aligned+0x12>
 800a538:	f000 f9ee 	bl	800a918 <_sbrk_r>
 800a53c:	6030      	str	r0, [r6, #0]
 800a53e:	4621      	mov	r1, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f000 f9e9 	bl	800a918 <_sbrk_r>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d00a      	beq.n	800a560 <sbrk_aligned+0x34>
 800a54a:	1cc4      	adds	r4, r0, #3
 800a54c:	f024 0403 	bic.w	r4, r4, #3
 800a550:	42a0      	cmp	r0, r4
 800a552:	d007      	beq.n	800a564 <sbrk_aligned+0x38>
 800a554:	1a21      	subs	r1, r4, r0
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f9de 	bl	800a918 <_sbrk_r>
 800a55c:	3001      	adds	r0, #1
 800a55e:	d101      	bne.n	800a564 <sbrk_aligned+0x38>
 800a560:	f04f 34ff 	mov.w	r4, #4294967295
 800a564:	4620      	mov	r0, r4
 800a566:	bd70      	pop	{r4, r5, r6, pc}
 800a568:	20000978 	.word	0x20000978

0800a56c <_malloc_r>:
 800a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a570:	1ccd      	adds	r5, r1, #3
 800a572:	f025 0503 	bic.w	r5, r5, #3
 800a576:	3508      	adds	r5, #8
 800a578:	2d0c      	cmp	r5, #12
 800a57a:	bf38      	it	cc
 800a57c:	250c      	movcc	r5, #12
 800a57e:	2d00      	cmp	r5, #0
 800a580:	4607      	mov	r7, r0
 800a582:	db01      	blt.n	800a588 <_malloc_r+0x1c>
 800a584:	42a9      	cmp	r1, r5
 800a586:	d905      	bls.n	800a594 <_malloc_r+0x28>
 800a588:	230c      	movs	r3, #12
 800a58a:	2600      	movs	r6, #0
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	4630      	mov	r0, r6
 800a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a594:	4e2e      	ldr	r6, [pc, #184]	; (800a650 <_malloc_r+0xe4>)
 800a596:	f000 fa21 	bl	800a9dc <__malloc_lock>
 800a59a:	6833      	ldr	r3, [r6, #0]
 800a59c:	461c      	mov	r4, r3
 800a59e:	bb34      	cbnz	r4, 800a5ee <_malloc_r+0x82>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f7ff ffc2 	bl	800a52c <sbrk_aligned>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	d14d      	bne.n	800a64a <_malloc_r+0xde>
 800a5ae:	6834      	ldr	r4, [r6, #0]
 800a5b0:	4626      	mov	r6, r4
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	d140      	bne.n	800a638 <_malloc_r+0xcc>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	eb04 0803 	add.w	r8, r4, r3
 800a5c0:	f000 f9aa 	bl	800a918 <_sbrk_r>
 800a5c4:	4580      	cmp	r8, r0
 800a5c6:	d13a      	bne.n	800a63e <_malloc_r+0xd2>
 800a5c8:	6821      	ldr	r1, [r4, #0]
 800a5ca:	3503      	adds	r5, #3
 800a5cc:	1a6d      	subs	r5, r5, r1
 800a5ce:	f025 0503 	bic.w	r5, r5, #3
 800a5d2:	3508      	adds	r5, #8
 800a5d4:	2d0c      	cmp	r5, #12
 800a5d6:	bf38      	it	cc
 800a5d8:	250c      	movcc	r5, #12
 800a5da:	4638      	mov	r0, r7
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7ff ffa5 	bl	800a52c <sbrk_aligned>
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d02b      	beq.n	800a63e <_malloc_r+0xd2>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	442b      	add	r3, r5
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	e00e      	b.n	800a60c <_malloc_r+0xa0>
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	1b52      	subs	r2, r2, r5
 800a5f2:	d41e      	bmi.n	800a632 <_malloc_r+0xc6>
 800a5f4:	2a0b      	cmp	r2, #11
 800a5f6:	d916      	bls.n	800a626 <_malloc_r+0xba>
 800a5f8:	1961      	adds	r1, r4, r5
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	6025      	str	r5, [r4, #0]
 800a5fe:	bf18      	it	ne
 800a600:	6059      	strne	r1, [r3, #4]
 800a602:	6863      	ldr	r3, [r4, #4]
 800a604:	bf08      	it	eq
 800a606:	6031      	streq	r1, [r6, #0]
 800a608:	5162      	str	r2, [r4, r5]
 800a60a:	604b      	str	r3, [r1, #4]
 800a60c:	4638      	mov	r0, r7
 800a60e:	f104 060b 	add.w	r6, r4, #11
 800a612:	f000 f9e9 	bl	800a9e8 <__malloc_unlock>
 800a616:	f026 0607 	bic.w	r6, r6, #7
 800a61a:	1d23      	adds	r3, r4, #4
 800a61c:	1af2      	subs	r2, r6, r3
 800a61e:	d0b6      	beq.n	800a58e <_malloc_r+0x22>
 800a620:	1b9b      	subs	r3, r3, r6
 800a622:	50a3      	str	r3, [r4, r2]
 800a624:	e7b3      	b.n	800a58e <_malloc_r+0x22>
 800a626:	6862      	ldr	r2, [r4, #4]
 800a628:	42a3      	cmp	r3, r4
 800a62a:	bf0c      	ite	eq
 800a62c:	6032      	streq	r2, [r6, #0]
 800a62e:	605a      	strne	r2, [r3, #4]
 800a630:	e7ec      	b.n	800a60c <_malloc_r+0xa0>
 800a632:	4623      	mov	r3, r4
 800a634:	6864      	ldr	r4, [r4, #4]
 800a636:	e7b2      	b.n	800a59e <_malloc_r+0x32>
 800a638:	4634      	mov	r4, r6
 800a63a:	6876      	ldr	r6, [r6, #4]
 800a63c:	e7b9      	b.n	800a5b2 <_malloc_r+0x46>
 800a63e:	230c      	movs	r3, #12
 800a640:	4638      	mov	r0, r7
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	f000 f9d0 	bl	800a9e8 <__malloc_unlock>
 800a648:	e7a1      	b.n	800a58e <_malloc_r+0x22>
 800a64a:	6025      	str	r5, [r4, #0]
 800a64c:	e7de      	b.n	800a60c <_malloc_r+0xa0>
 800a64e:	bf00      	nop
 800a650:	20000974 	.word	0x20000974

0800a654 <__ssputs_r>:
 800a654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	688e      	ldr	r6, [r1, #8]
 800a65a:	4682      	mov	sl, r0
 800a65c:	429e      	cmp	r6, r3
 800a65e:	460c      	mov	r4, r1
 800a660:	4690      	mov	r8, r2
 800a662:	461f      	mov	r7, r3
 800a664:	d838      	bhi.n	800a6d8 <__ssputs_r+0x84>
 800a666:	898a      	ldrh	r2, [r1, #12]
 800a668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a66c:	d032      	beq.n	800a6d4 <__ssputs_r+0x80>
 800a66e:	6825      	ldr	r5, [r4, #0]
 800a670:	6909      	ldr	r1, [r1, #16]
 800a672:	3301      	adds	r3, #1
 800a674:	eba5 0901 	sub.w	r9, r5, r1
 800a678:	6965      	ldr	r5, [r4, #20]
 800a67a:	444b      	add	r3, r9
 800a67c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a684:	106d      	asrs	r5, r5, #1
 800a686:	429d      	cmp	r5, r3
 800a688:	bf38      	it	cc
 800a68a:	461d      	movcc	r5, r3
 800a68c:	0553      	lsls	r3, r2, #21
 800a68e:	d531      	bpl.n	800a6f4 <__ssputs_r+0xa0>
 800a690:	4629      	mov	r1, r5
 800a692:	f7ff ff6b 	bl	800a56c <_malloc_r>
 800a696:	4606      	mov	r6, r0
 800a698:	b950      	cbnz	r0, 800a6b0 <__ssputs_r+0x5c>
 800a69a:	230c      	movs	r3, #12
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	f8ca 3000 	str.w	r3, [sl]
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b0:	464a      	mov	r2, r9
 800a6b2:	6921      	ldr	r1, [r4, #16]
 800a6b4:	f7ff fa18 	bl	8009ae8 <memcpy>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	6126      	str	r6, [r4, #16]
 800a6c6:	444e      	add	r6, r9
 800a6c8:	6026      	str	r6, [r4, #0]
 800a6ca:	463e      	mov	r6, r7
 800a6cc:	6165      	str	r5, [r4, #20]
 800a6ce:	eba5 0509 	sub.w	r5, r5, r9
 800a6d2:	60a5      	str	r5, [r4, #8]
 800a6d4:	42be      	cmp	r6, r7
 800a6d6:	d900      	bls.n	800a6da <__ssputs_r+0x86>
 800a6d8:	463e      	mov	r6, r7
 800a6da:	4632      	mov	r2, r6
 800a6dc:	4641      	mov	r1, r8
 800a6de:	6820      	ldr	r0, [r4, #0]
 800a6e0:	f7fc faa6 	bl	8006c30 <memmove>
 800a6e4:	68a3      	ldr	r3, [r4, #8]
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	1b9b      	subs	r3, r3, r6
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	4433      	add	r3, r6
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	e7db      	b.n	800a6ac <__ssputs_r+0x58>
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	f000 f97d 	bl	800a9f4 <_realloc_r>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d1e1      	bne.n	800a6c4 <__ssputs_r+0x70>
 800a700:	4650      	mov	r0, sl
 800a702:	6921      	ldr	r1, [r4, #16]
 800a704:	f7ff feca 	bl	800a49c <_free_r>
 800a708:	e7c7      	b.n	800a69a <__ssputs_r+0x46>
	...

0800a70c <_svfiprintf_r>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4698      	mov	r8, r3
 800a712:	898b      	ldrh	r3, [r1, #12]
 800a714:	4607      	mov	r7, r0
 800a716:	061b      	lsls	r3, r3, #24
 800a718:	460d      	mov	r5, r1
 800a71a:	4614      	mov	r4, r2
 800a71c:	b09d      	sub	sp, #116	; 0x74
 800a71e:	d50e      	bpl.n	800a73e <_svfiprintf_r+0x32>
 800a720:	690b      	ldr	r3, [r1, #16]
 800a722:	b963      	cbnz	r3, 800a73e <_svfiprintf_r+0x32>
 800a724:	2140      	movs	r1, #64	; 0x40
 800a726:	f7ff ff21 	bl	800a56c <_malloc_r>
 800a72a:	6028      	str	r0, [r5, #0]
 800a72c:	6128      	str	r0, [r5, #16]
 800a72e:	b920      	cbnz	r0, 800a73a <_svfiprintf_r+0x2e>
 800a730:	230c      	movs	r3, #12
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e0d1      	b.n	800a8de <_svfiprintf_r+0x1d2>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	616b      	str	r3, [r5, #20]
 800a73e:	2300      	movs	r3, #0
 800a740:	9309      	str	r3, [sp, #36]	; 0x24
 800a742:	2320      	movs	r3, #32
 800a744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a748:	2330      	movs	r3, #48	; 0x30
 800a74a:	f04f 0901 	mov.w	r9, #1
 800a74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8f8 <_svfiprintf_r+0x1ec>
 800a756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a75a:	4623      	mov	r3, r4
 800a75c:	469a      	mov	sl, r3
 800a75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a762:	b10a      	cbz	r2, 800a768 <_svfiprintf_r+0x5c>
 800a764:	2a25      	cmp	r2, #37	; 0x25
 800a766:	d1f9      	bne.n	800a75c <_svfiprintf_r+0x50>
 800a768:	ebba 0b04 	subs.w	fp, sl, r4
 800a76c:	d00b      	beq.n	800a786 <_svfiprintf_r+0x7a>
 800a76e:	465b      	mov	r3, fp
 800a770:	4622      	mov	r2, r4
 800a772:	4629      	mov	r1, r5
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff ff6d 	bl	800a654 <__ssputs_r>
 800a77a:	3001      	adds	r0, #1
 800a77c:	f000 80aa 	beq.w	800a8d4 <_svfiprintf_r+0x1c8>
 800a780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a782:	445a      	add	r2, fp
 800a784:	9209      	str	r2, [sp, #36]	; 0x24
 800a786:	f89a 3000 	ldrb.w	r3, [sl]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80a2 	beq.w	800a8d4 <_svfiprintf_r+0x1c8>
 800a790:	2300      	movs	r3, #0
 800a792:	f04f 32ff 	mov.w	r2, #4294967295
 800a796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a79a:	f10a 0a01 	add.w	sl, sl, #1
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9307      	str	r3, [sp, #28]
 800a7a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a8:	4654      	mov	r4, sl
 800a7aa:	2205      	movs	r2, #5
 800a7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b0:	4851      	ldr	r0, [pc, #324]	; (800a8f8 <_svfiprintf_r+0x1ec>)
 800a7b2:	f7ff f98b 	bl	8009acc <memchr>
 800a7b6:	9a04      	ldr	r2, [sp, #16]
 800a7b8:	b9d8      	cbnz	r0, 800a7f2 <_svfiprintf_r+0xe6>
 800a7ba:	06d0      	lsls	r0, r2, #27
 800a7bc:	bf44      	itt	mi
 800a7be:	2320      	movmi	r3, #32
 800a7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c4:	0711      	lsls	r1, r2, #28
 800a7c6:	bf44      	itt	mi
 800a7c8:	232b      	movmi	r3, #43	; 0x2b
 800a7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d4:	d015      	beq.n	800a802 <_svfiprintf_r+0xf6>
 800a7d6:	4654      	mov	r4, sl
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f04f 0c0a 	mov.w	ip, #10
 800a7de:	9a07      	ldr	r2, [sp, #28]
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e6:	3b30      	subs	r3, #48	; 0x30
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d94e      	bls.n	800a88a <_svfiprintf_r+0x17e>
 800a7ec:	b1b0      	cbz	r0, 800a81c <_svfiprintf_r+0x110>
 800a7ee:	9207      	str	r2, [sp, #28]
 800a7f0:	e014      	b.n	800a81c <_svfiprintf_r+0x110>
 800a7f2:	eba0 0308 	sub.w	r3, r0, r8
 800a7f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	46a2      	mov	sl, r4
 800a7fe:	9304      	str	r3, [sp, #16]
 800a800:	e7d2      	b.n	800a7a8 <_svfiprintf_r+0x9c>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	1d19      	adds	r1, r3, #4
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	9103      	str	r1, [sp, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bfbb      	ittet	lt
 800a80e:	425b      	neglt	r3, r3
 800a810:	f042 0202 	orrlt.w	r2, r2, #2
 800a814:	9307      	strge	r3, [sp, #28]
 800a816:	9307      	strlt	r3, [sp, #28]
 800a818:	bfb8      	it	lt
 800a81a:	9204      	strlt	r2, [sp, #16]
 800a81c:	7823      	ldrb	r3, [r4, #0]
 800a81e:	2b2e      	cmp	r3, #46	; 0x2e
 800a820:	d10c      	bne.n	800a83c <_svfiprintf_r+0x130>
 800a822:	7863      	ldrb	r3, [r4, #1]
 800a824:	2b2a      	cmp	r3, #42	; 0x2a
 800a826:	d135      	bne.n	800a894 <_svfiprintf_r+0x188>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	3402      	adds	r4, #2
 800a82c:	1d1a      	adds	r2, r3, #4
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	9203      	str	r2, [sp, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	bfb8      	it	lt
 800a836:	f04f 33ff 	movlt.w	r3, #4294967295
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8fc <_svfiprintf_r+0x1f0>
 800a840:	2203      	movs	r2, #3
 800a842:	4650      	mov	r0, sl
 800a844:	7821      	ldrb	r1, [r4, #0]
 800a846:	f7ff f941 	bl	8009acc <memchr>
 800a84a:	b140      	cbz	r0, 800a85e <_svfiprintf_r+0x152>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	eba0 000a 	sub.w	r0, r0, sl
 800a852:	fa03 f000 	lsl.w	r0, r3, r0
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	3401      	adds	r4, #1
 800a85a:	4303      	orrs	r3, r0
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a862:	2206      	movs	r2, #6
 800a864:	4826      	ldr	r0, [pc, #152]	; (800a900 <_svfiprintf_r+0x1f4>)
 800a866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a86a:	f7ff f92f 	bl	8009acc <memchr>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d038      	beq.n	800a8e4 <_svfiprintf_r+0x1d8>
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <_svfiprintf_r+0x1f8>)
 800a874:	bb1b      	cbnz	r3, 800a8be <_svfiprintf_r+0x1b2>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	3307      	adds	r3, #7
 800a87a:	f023 0307 	bic.w	r3, r3, #7
 800a87e:	3308      	adds	r3, #8
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	4433      	add	r3, r6
 800a886:	9309      	str	r3, [sp, #36]	; 0x24
 800a888:	e767      	b.n	800a75a <_svfiprintf_r+0x4e>
 800a88a:	460c      	mov	r4, r1
 800a88c:	2001      	movs	r0, #1
 800a88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a892:	e7a5      	b.n	800a7e0 <_svfiprintf_r+0xd4>
 800a894:	2300      	movs	r3, #0
 800a896:	f04f 0c0a 	mov.w	ip, #10
 800a89a:	4619      	mov	r1, r3
 800a89c:	3401      	adds	r4, #1
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a6:	3a30      	subs	r2, #48	; 0x30
 800a8a8:	2a09      	cmp	r2, #9
 800a8aa:	d903      	bls.n	800a8b4 <_svfiprintf_r+0x1a8>
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0c5      	beq.n	800a83c <_svfiprintf_r+0x130>
 800a8b0:	9105      	str	r1, [sp, #20]
 800a8b2:	e7c3      	b.n	800a83c <_svfiprintf_r+0x130>
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8bc:	e7f0      	b.n	800a8a0 <_svfiprintf_r+0x194>
 800a8be:	ab03      	add	r3, sp, #12
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	4b10      	ldr	r3, [pc, #64]	; (800a908 <_svfiprintf_r+0x1fc>)
 800a8c8:	a904      	add	r1, sp, #16
 800a8ca:	f7fc fa71 	bl	8006db0 <_printf_float>
 800a8ce:	1c42      	adds	r2, r0, #1
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	d1d6      	bne.n	800a882 <_svfiprintf_r+0x176>
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	065b      	lsls	r3, r3, #25
 800a8d8:	f53f af2c 	bmi.w	800a734 <_svfiprintf_r+0x28>
 800a8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8de:	b01d      	add	sp, #116	; 0x74
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	4b06      	ldr	r3, [pc, #24]	; (800a908 <_svfiprintf_r+0x1fc>)
 800a8ee:	a904      	add	r1, sp, #16
 800a8f0:	f7fc fcfa 	bl	80072e8 <_printf_i>
 800a8f4:	e7eb      	b.n	800a8ce <_svfiprintf_r+0x1c2>
 800a8f6:	bf00      	nop
 800a8f8:	0801e074 	.word	0x0801e074
 800a8fc:	0801e07a 	.word	0x0801e07a
 800a900:	0801e07e 	.word	0x0801e07e
 800a904:	08006db1 	.word	0x08006db1
 800a908:	0800a655 	.word	0x0800a655

0800a90c <nan>:
 800a90c:	2000      	movs	r0, #0
 800a90e:	4901      	ldr	r1, [pc, #4]	; (800a914 <nan+0x8>)
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	7ff80000 	.word	0x7ff80000

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	2300      	movs	r3, #0
 800a91c:	4d05      	ldr	r5, [pc, #20]	; (800a934 <_sbrk_r+0x1c>)
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f9 fbf6 	bl	8004114 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	2000097c 	.word	0x2000097c

0800a938 <strncmp>:
 800a938:	4603      	mov	r3, r0
 800a93a:	b510      	push	{r4, lr}
 800a93c:	b172      	cbz	r2, 800a95c <strncmp+0x24>
 800a93e:	3901      	subs	r1, #1
 800a940:	1884      	adds	r4, r0, r2
 800a942:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a946:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a94a:	4290      	cmp	r0, r2
 800a94c:	d101      	bne.n	800a952 <strncmp+0x1a>
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d101      	bne.n	800a956 <strncmp+0x1e>
 800a952:	1a80      	subs	r0, r0, r2
 800a954:	bd10      	pop	{r4, pc}
 800a956:	2800      	cmp	r0, #0
 800a958:	d1f3      	bne.n	800a942 <strncmp+0xa>
 800a95a:	e7fa      	b.n	800a952 <strncmp+0x1a>
 800a95c:	4610      	mov	r0, r2
 800a95e:	e7f9      	b.n	800a954 <strncmp+0x1c>

0800a960 <__ascii_wctomb>:
 800a960:	4603      	mov	r3, r0
 800a962:	4608      	mov	r0, r1
 800a964:	b141      	cbz	r1, 800a978 <__ascii_wctomb+0x18>
 800a966:	2aff      	cmp	r2, #255	; 0xff
 800a968:	d904      	bls.n	800a974 <__ascii_wctomb+0x14>
 800a96a:	228a      	movs	r2, #138	; 0x8a
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	4770      	bx	lr
 800a974:	2001      	movs	r0, #1
 800a976:	700a      	strb	r2, [r1, #0]
 800a978:	4770      	bx	lr
	...

0800a97c <__assert_func>:
 800a97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97e:	4614      	mov	r4, r2
 800a980:	461a      	mov	r2, r3
 800a982:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <__assert_func+0x2c>)
 800a984:	4605      	mov	r5, r0
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68d8      	ldr	r0, [r3, #12]
 800a98a:	b14c      	cbz	r4, 800a9a0 <__assert_func+0x24>
 800a98c:	4b07      	ldr	r3, [pc, #28]	; (800a9ac <__assert_func+0x30>)
 800a98e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a992:	9100      	str	r1, [sp, #0]
 800a994:	462b      	mov	r3, r5
 800a996:	4906      	ldr	r1, [pc, #24]	; (800a9b0 <__assert_func+0x34>)
 800a998:	f000 f80e 	bl	800a9b8 <fiprintf>
 800a99c:	f000 fa70 	bl	800ae80 <abort>
 800a9a0:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <__assert_func+0x38>)
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	e7f3      	b.n	800a98e <__assert_func+0x12>
 800a9a6:	bf00      	nop
 800a9a8:	20000010 	.word	0x20000010
 800a9ac:	0801e085 	.word	0x0801e085
 800a9b0:	0801e092 	.word	0x0801e092
 800a9b4:	0801e0c0 	.word	0x0801e0c0

0800a9b8 <fiprintf>:
 800a9b8:	b40e      	push	{r1, r2, r3}
 800a9ba:	b503      	push	{r0, r1, lr}
 800a9bc:	4601      	mov	r1, r0
 800a9be:	ab03      	add	r3, sp, #12
 800a9c0:	4805      	ldr	r0, [pc, #20]	; (800a9d8 <fiprintf+0x20>)
 800a9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c6:	6800      	ldr	r0, [r0, #0]
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	f000 f869 	bl	800aaa0 <_vfiprintf_r>
 800a9ce:	b002      	add	sp, #8
 800a9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9d4:	b003      	add	sp, #12
 800a9d6:	4770      	bx	lr
 800a9d8:	20000010 	.word	0x20000010

0800a9dc <__malloc_lock>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__malloc_lock+0x8>)
 800a9de:	f000 bc0b 	b.w	800b1f8 <__retarget_lock_acquire_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000980 	.word	0x20000980

0800a9e8 <__malloc_unlock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__malloc_unlock+0x8>)
 800a9ea:	f000 bc06 	b.w	800b1fa <__retarget_lock_release_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20000980 	.word	0x20000980

0800a9f4 <_realloc_r>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	4614      	mov	r4, r2
 800a9fc:	460e      	mov	r6, r1
 800a9fe:	b921      	cbnz	r1, 800aa0a <_realloc_r+0x16>
 800aa00:	4611      	mov	r1, r2
 800aa02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	f7ff bdb1 	b.w	800a56c <_malloc_r>
 800aa0a:	b92a      	cbnz	r2, 800aa18 <_realloc_r+0x24>
 800aa0c:	f7ff fd46 	bl	800a49c <_free_r>
 800aa10:	4625      	mov	r5, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa18:	f000 fc56 	bl	800b2c8 <_malloc_usable_size_r>
 800aa1c:	4284      	cmp	r4, r0
 800aa1e:	4607      	mov	r7, r0
 800aa20:	d802      	bhi.n	800aa28 <_realloc_r+0x34>
 800aa22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa26:	d812      	bhi.n	800aa4e <_realloc_r+0x5a>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	f7ff fd9e 	bl	800a56c <_malloc_r>
 800aa30:	4605      	mov	r5, r0
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0ed      	beq.n	800aa12 <_realloc_r+0x1e>
 800aa36:	42bc      	cmp	r4, r7
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	bf28      	it	cs
 800aa3e:	463a      	movcs	r2, r7
 800aa40:	f7ff f852 	bl	8009ae8 <memcpy>
 800aa44:	4631      	mov	r1, r6
 800aa46:	4640      	mov	r0, r8
 800aa48:	f7ff fd28 	bl	800a49c <_free_r>
 800aa4c:	e7e1      	b.n	800aa12 <_realloc_r+0x1e>
 800aa4e:	4635      	mov	r5, r6
 800aa50:	e7df      	b.n	800aa12 <_realloc_r+0x1e>

0800aa52 <__sfputc_r>:
 800aa52:	6893      	ldr	r3, [r2, #8]
 800aa54:	b410      	push	{r4}
 800aa56:	3b01      	subs	r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	6093      	str	r3, [r2, #8]
 800aa5c:	da07      	bge.n	800aa6e <__sfputc_r+0x1c>
 800aa5e:	6994      	ldr	r4, [r2, #24]
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	db01      	blt.n	800aa68 <__sfputc_r+0x16>
 800aa64:	290a      	cmp	r1, #10
 800aa66:	d102      	bne.n	800aa6e <__sfputc_r+0x1c>
 800aa68:	bc10      	pop	{r4}
 800aa6a:	f000 b949 	b.w	800ad00 <__swbuf_r>
 800aa6e:	6813      	ldr	r3, [r2, #0]
 800aa70:	1c58      	adds	r0, r3, #1
 800aa72:	6010      	str	r0, [r2, #0]
 800aa74:	7019      	strb	r1, [r3, #0]
 800aa76:	4608      	mov	r0, r1
 800aa78:	bc10      	pop	{r4}
 800aa7a:	4770      	bx	lr

0800aa7c <__sfputs_r>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	4614      	mov	r4, r2
 800aa84:	18d5      	adds	r5, r2, r3
 800aa86:	42ac      	cmp	r4, r5
 800aa88:	d101      	bne.n	800aa8e <__sfputs_r+0x12>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e007      	b.n	800aa9e <__sfputs_r+0x22>
 800aa8e:	463a      	mov	r2, r7
 800aa90:	4630      	mov	r0, r6
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	f7ff ffdc 	bl	800aa52 <__sfputc_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d1f3      	bne.n	800aa86 <__sfputs_r+0xa>
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaa0 <_vfiprintf_r>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	4614      	mov	r4, r2
 800aaa8:	4698      	mov	r8, r3
 800aaaa:	4606      	mov	r6, r0
 800aaac:	b09d      	sub	sp, #116	; 0x74
 800aaae:	b118      	cbz	r0, 800aab8 <_vfiprintf_r+0x18>
 800aab0:	6983      	ldr	r3, [r0, #24]
 800aab2:	b90b      	cbnz	r3, 800aab8 <_vfiprintf_r+0x18>
 800aab4:	f000 fb02 	bl	800b0bc <__sinit>
 800aab8:	4b89      	ldr	r3, [pc, #548]	; (800ace0 <_vfiprintf_r+0x240>)
 800aaba:	429d      	cmp	r5, r3
 800aabc:	d11b      	bne.n	800aaf6 <_vfiprintf_r+0x56>
 800aabe:	6875      	ldr	r5, [r6, #4]
 800aac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	d405      	bmi.n	800aad2 <_vfiprintf_r+0x32>
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	059a      	lsls	r2, r3, #22
 800aaca:	d402      	bmi.n	800aad2 <_vfiprintf_r+0x32>
 800aacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aace:	f000 fb93 	bl	800b1f8 <__retarget_lock_acquire_recursive>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	071b      	lsls	r3, r3, #28
 800aad6:	d501      	bpl.n	800aadc <_vfiprintf_r+0x3c>
 800aad8:	692b      	ldr	r3, [r5, #16]
 800aada:	b9eb      	cbnz	r3, 800ab18 <_vfiprintf_r+0x78>
 800aadc:	4629      	mov	r1, r5
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 f960 	bl	800ada4 <__swsetup_r>
 800aae4:	b1c0      	cbz	r0, 800ab18 <_vfiprintf_r+0x78>
 800aae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae8:	07dc      	lsls	r4, r3, #31
 800aaea:	d50e      	bpl.n	800ab0a <_vfiprintf_r+0x6a>
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf0:	b01d      	add	sp, #116	; 0x74
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	4b7b      	ldr	r3, [pc, #492]	; (800ace4 <_vfiprintf_r+0x244>)
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	d101      	bne.n	800ab00 <_vfiprintf_r+0x60>
 800aafc:	68b5      	ldr	r5, [r6, #8]
 800aafe:	e7df      	b.n	800aac0 <_vfiprintf_r+0x20>
 800ab00:	4b79      	ldr	r3, [pc, #484]	; (800ace8 <_vfiprintf_r+0x248>)
 800ab02:	429d      	cmp	r5, r3
 800ab04:	bf08      	it	eq
 800ab06:	68f5      	ldreq	r5, [r6, #12]
 800ab08:	e7da      	b.n	800aac0 <_vfiprintf_r+0x20>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	0598      	lsls	r0, r3, #22
 800ab0e:	d4ed      	bmi.n	800aaec <_vfiprintf_r+0x4c>
 800ab10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab12:	f000 fb72 	bl	800b1fa <__retarget_lock_release_recursive>
 800ab16:	e7e9      	b.n	800aaec <_vfiprintf_r+0x4c>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab22:	2330      	movs	r3, #48	; 0x30
 800ab24:	f04f 0901 	mov.w	r9, #1
 800ab28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800acec <_vfiprintf_r+0x24c>
 800ab30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab34:	4623      	mov	r3, r4
 800ab36:	469a      	mov	sl, r3
 800ab38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3c:	b10a      	cbz	r2, 800ab42 <_vfiprintf_r+0xa2>
 800ab3e:	2a25      	cmp	r2, #37	; 0x25
 800ab40:	d1f9      	bne.n	800ab36 <_vfiprintf_r+0x96>
 800ab42:	ebba 0b04 	subs.w	fp, sl, r4
 800ab46:	d00b      	beq.n	800ab60 <_vfiprintf_r+0xc0>
 800ab48:	465b      	mov	r3, fp
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ff94 	bl	800aa7c <__sfputs_r>
 800ab54:	3001      	adds	r0, #1
 800ab56:	f000 80aa 	beq.w	800acae <_vfiprintf_r+0x20e>
 800ab5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5c:	445a      	add	r2, fp
 800ab5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab60:	f89a 3000 	ldrb.w	r3, [sl]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80a2 	beq.w	800acae <_vfiprintf_r+0x20e>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab74:	f10a 0a01 	add.w	sl, sl, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab80:	931a      	str	r3, [sp, #104]	; 0x68
 800ab82:	4654      	mov	r4, sl
 800ab84:	2205      	movs	r2, #5
 800ab86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8a:	4858      	ldr	r0, [pc, #352]	; (800acec <_vfiprintf_r+0x24c>)
 800ab8c:	f7fe ff9e 	bl	8009acc <memchr>
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	b9d8      	cbnz	r0, 800abcc <_vfiprintf_r+0x12c>
 800ab94:	06d1      	lsls	r1, r2, #27
 800ab96:	bf44      	itt	mi
 800ab98:	2320      	movmi	r3, #32
 800ab9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab9e:	0713      	lsls	r3, r2, #28
 800aba0:	bf44      	itt	mi
 800aba2:	232b      	movmi	r3, #43	; 0x2b
 800aba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba8:	f89a 3000 	ldrb.w	r3, [sl]
 800abac:	2b2a      	cmp	r3, #42	; 0x2a
 800abae:	d015      	beq.n	800abdc <_vfiprintf_r+0x13c>
 800abb0:	4654      	mov	r4, sl
 800abb2:	2000      	movs	r0, #0
 800abb4:	f04f 0c0a 	mov.w	ip, #10
 800abb8:	9a07      	ldr	r2, [sp, #28]
 800abba:	4621      	mov	r1, r4
 800abbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc0:	3b30      	subs	r3, #48	; 0x30
 800abc2:	2b09      	cmp	r3, #9
 800abc4:	d94e      	bls.n	800ac64 <_vfiprintf_r+0x1c4>
 800abc6:	b1b0      	cbz	r0, 800abf6 <_vfiprintf_r+0x156>
 800abc8:	9207      	str	r2, [sp, #28]
 800abca:	e014      	b.n	800abf6 <_vfiprintf_r+0x156>
 800abcc:	eba0 0308 	sub.w	r3, r0, r8
 800abd0:	fa09 f303 	lsl.w	r3, r9, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	46a2      	mov	sl, r4
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	e7d2      	b.n	800ab82 <_vfiprintf_r+0xe2>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1d19      	adds	r1, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9103      	str	r1, [sp, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfbb      	ittet	lt
 800abe8:	425b      	neglt	r3, r3
 800abea:	f042 0202 	orrlt.w	r2, r2, #2
 800abee:	9307      	strge	r3, [sp, #28]
 800abf0:	9307      	strlt	r3, [sp, #28]
 800abf2:	bfb8      	it	lt
 800abf4:	9204      	strlt	r2, [sp, #16]
 800abf6:	7823      	ldrb	r3, [r4, #0]
 800abf8:	2b2e      	cmp	r3, #46	; 0x2e
 800abfa:	d10c      	bne.n	800ac16 <_vfiprintf_r+0x176>
 800abfc:	7863      	ldrb	r3, [r4, #1]
 800abfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ac00:	d135      	bne.n	800ac6e <_vfiprintf_r+0x1ce>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	3402      	adds	r4, #2
 800ac06:	1d1a      	adds	r2, r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	9203      	str	r2, [sp, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bfb8      	it	lt
 800ac10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac14:	9305      	str	r3, [sp, #20]
 800ac16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800acf0 <_vfiprintf_r+0x250>
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	4650      	mov	r0, sl
 800ac1e:	7821      	ldrb	r1, [r4, #0]
 800ac20:	f7fe ff54 	bl	8009acc <memchr>
 800ac24:	b140      	cbz	r0, 800ac38 <_vfiprintf_r+0x198>
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	eba0 000a 	sub.w	r0, r0, sl
 800ac2c:	fa03 f000 	lsl.w	r0, r3, r0
 800ac30:	9b04      	ldr	r3, [sp, #16]
 800ac32:	3401      	adds	r4, #1
 800ac34:	4303      	orrs	r3, r0
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3c:	2206      	movs	r2, #6
 800ac3e:	482d      	ldr	r0, [pc, #180]	; (800acf4 <_vfiprintf_r+0x254>)
 800ac40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac44:	f7fe ff42 	bl	8009acc <memchr>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d03f      	beq.n	800accc <_vfiprintf_r+0x22c>
 800ac4c:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <_vfiprintf_r+0x258>)
 800ac4e:	bb1b      	cbnz	r3, 800ac98 <_vfiprintf_r+0x1f8>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	3307      	adds	r3, #7
 800ac54:	f023 0307 	bic.w	r3, r3, #7
 800ac58:	3308      	adds	r3, #8
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5e:	443b      	add	r3, r7
 800ac60:	9309      	str	r3, [sp, #36]	; 0x24
 800ac62:	e767      	b.n	800ab34 <_vfiprintf_r+0x94>
 800ac64:	460c      	mov	r4, r1
 800ac66:	2001      	movs	r0, #1
 800ac68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac6c:	e7a5      	b.n	800abba <_vfiprintf_r+0x11a>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f04f 0c0a 	mov.w	ip, #10
 800ac74:	4619      	mov	r1, r3
 800ac76:	3401      	adds	r4, #1
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac80:	3a30      	subs	r2, #48	; 0x30
 800ac82:	2a09      	cmp	r2, #9
 800ac84:	d903      	bls.n	800ac8e <_vfiprintf_r+0x1ee>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0c5      	beq.n	800ac16 <_vfiprintf_r+0x176>
 800ac8a:	9105      	str	r1, [sp, #20]
 800ac8c:	e7c3      	b.n	800ac16 <_vfiprintf_r+0x176>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	2301      	movs	r3, #1
 800ac92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac96:	e7f0      	b.n	800ac7a <_vfiprintf_r+0x1da>
 800ac98:	ab03      	add	r3, sp, #12
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4b16      	ldr	r3, [pc, #88]	; (800acfc <_vfiprintf_r+0x25c>)
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	f7fc f884 	bl	8006db0 <_printf_float>
 800aca8:	4607      	mov	r7, r0
 800acaa:	1c78      	adds	r0, r7, #1
 800acac:	d1d6      	bne.n	800ac5c <_vfiprintf_r+0x1bc>
 800acae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb0:	07d9      	lsls	r1, r3, #31
 800acb2:	d405      	bmi.n	800acc0 <_vfiprintf_r+0x220>
 800acb4:	89ab      	ldrh	r3, [r5, #12]
 800acb6:	059a      	lsls	r2, r3, #22
 800acb8:	d402      	bmi.n	800acc0 <_vfiprintf_r+0x220>
 800acba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acbc:	f000 fa9d 	bl	800b1fa <__retarget_lock_release_recursive>
 800acc0:	89ab      	ldrh	r3, [r5, #12]
 800acc2:	065b      	lsls	r3, r3, #25
 800acc4:	f53f af12 	bmi.w	800aaec <_vfiprintf_r+0x4c>
 800acc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acca:	e711      	b.n	800aaf0 <_vfiprintf_r+0x50>
 800accc:	ab03      	add	r3, sp, #12
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	462a      	mov	r2, r5
 800acd2:	4630      	mov	r0, r6
 800acd4:	4b09      	ldr	r3, [pc, #36]	; (800acfc <_vfiprintf_r+0x25c>)
 800acd6:	a904      	add	r1, sp, #16
 800acd8:	f7fc fb06 	bl	80072e8 <_printf_i>
 800acdc:	e7e4      	b.n	800aca8 <_vfiprintf_r+0x208>
 800acde:	bf00      	nop
 800ace0:	0801e0e4 	.word	0x0801e0e4
 800ace4:	0801e104 	.word	0x0801e104
 800ace8:	0801e0c4 	.word	0x0801e0c4
 800acec:	0801e074 	.word	0x0801e074
 800acf0:	0801e07a 	.word	0x0801e07a
 800acf4:	0801e07e 	.word	0x0801e07e
 800acf8:	08006db1 	.word	0x08006db1
 800acfc:	0800aa7d 	.word	0x0800aa7d

0800ad00 <__swbuf_r>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	460e      	mov	r6, r1
 800ad04:	4614      	mov	r4, r2
 800ad06:	4605      	mov	r5, r0
 800ad08:	b118      	cbz	r0, 800ad12 <__swbuf_r+0x12>
 800ad0a:	6983      	ldr	r3, [r0, #24]
 800ad0c:	b90b      	cbnz	r3, 800ad12 <__swbuf_r+0x12>
 800ad0e:	f000 f9d5 	bl	800b0bc <__sinit>
 800ad12:	4b21      	ldr	r3, [pc, #132]	; (800ad98 <__swbuf_r+0x98>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d12b      	bne.n	800ad70 <__swbuf_r+0x70>
 800ad18:	686c      	ldr	r4, [r5, #4]
 800ad1a:	69a3      	ldr	r3, [r4, #24]
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	071a      	lsls	r2, r3, #28
 800ad22:	d52f      	bpl.n	800ad84 <__swbuf_r+0x84>
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	b36b      	cbz	r3, 800ad84 <__swbuf_r+0x84>
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	6820      	ldr	r0, [r4, #0]
 800ad2c:	b2f6      	uxtb	r6, r6
 800ad2e:	1ac0      	subs	r0, r0, r3
 800ad30:	6963      	ldr	r3, [r4, #20]
 800ad32:	4637      	mov	r7, r6
 800ad34:	4283      	cmp	r3, r0
 800ad36:	dc04      	bgt.n	800ad42 <__swbuf_r+0x42>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f92a 	bl	800af94 <_fflush_r>
 800ad40:	bb30      	cbnz	r0, 800ad90 <__swbuf_r+0x90>
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	3001      	adds	r0, #1
 800ad46:	3b01      	subs	r3, #1
 800ad48:	60a3      	str	r3, [r4, #8]
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	6022      	str	r2, [r4, #0]
 800ad50:	701e      	strb	r6, [r3, #0]
 800ad52:	6963      	ldr	r3, [r4, #20]
 800ad54:	4283      	cmp	r3, r0
 800ad56:	d004      	beq.n	800ad62 <__swbuf_r+0x62>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	07db      	lsls	r3, r3, #31
 800ad5c:	d506      	bpl.n	800ad6c <__swbuf_r+0x6c>
 800ad5e:	2e0a      	cmp	r6, #10
 800ad60:	d104      	bne.n	800ad6c <__swbuf_r+0x6c>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f915 	bl	800af94 <_fflush_r>
 800ad6a:	b988      	cbnz	r0, 800ad90 <__swbuf_r+0x90>
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <__swbuf_r+0x9c>)
 800ad72:	429c      	cmp	r4, r3
 800ad74:	d101      	bne.n	800ad7a <__swbuf_r+0x7a>
 800ad76:	68ac      	ldr	r4, [r5, #8]
 800ad78:	e7cf      	b.n	800ad1a <__swbuf_r+0x1a>
 800ad7a:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <__swbuf_r+0xa0>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	bf08      	it	eq
 800ad80:	68ec      	ldreq	r4, [r5, #12]
 800ad82:	e7ca      	b.n	800ad1a <__swbuf_r+0x1a>
 800ad84:	4621      	mov	r1, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f80c 	bl	800ada4 <__swsetup_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d0cb      	beq.n	800ad28 <__swbuf_r+0x28>
 800ad90:	f04f 37ff 	mov.w	r7, #4294967295
 800ad94:	e7ea      	b.n	800ad6c <__swbuf_r+0x6c>
 800ad96:	bf00      	nop
 800ad98:	0801e0e4 	.word	0x0801e0e4
 800ad9c:	0801e104 	.word	0x0801e104
 800ada0:	0801e0c4 	.word	0x0801e0c4

0800ada4 <__swsetup_r>:
 800ada4:	4b32      	ldr	r3, [pc, #200]	; (800ae70 <__swsetup_r+0xcc>)
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	681d      	ldr	r5, [r3, #0]
 800adaa:	4606      	mov	r6, r0
 800adac:	460c      	mov	r4, r1
 800adae:	b125      	cbz	r5, 800adba <__swsetup_r+0x16>
 800adb0:	69ab      	ldr	r3, [r5, #24]
 800adb2:	b913      	cbnz	r3, 800adba <__swsetup_r+0x16>
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f981 	bl	800b0bc <__sinit>
 800adba:	4b2e      	ldr	r3, [pc, #184]	; (800ae74 <__swsetup_r+0xd0>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d10f      	bne.n	800ade0 <__swsetup_r+0x3c>
 800adc0:	686c      	ldr	r4, [r5, #4]
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adc8:	0719      	lsls	r1, r3, #28
 800adca:	d42c      	bmi.n	800ae26 <__swsetup_r+0x82>
 800adcc:	06dd      	lsls	r5, r3, #27
 800adce:	d411      	bmi.n	800adf4 <__swsetup_r+0x50>
 800add0:	2309      	movs	r3, #9
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	81a3      	strh	r3, [r4, #12]
 800adde:	e03e      	b.n	800ae5e <__swsetup_r+0xba>
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <__swsetup_r+0xd4>)
 800ade2:	429c      	cmp	r4, r3
 800ade4:	d101      	bne.n	800adea <__swsetup_r+0x46>
 800ade6:	68ac      	ldr	r4, [r5, #8]
 800ade8:	e7eb      	b.n	800adc2 <__swsetup_r+0x1e>
 800adea:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <__swsetup_r+0xd8>)
 800adec:	429c      	cmp	r4, r3
 800adee:	bf08      	it	eq
 800adf0:	68ec      	ldreq	r4, [r5, #12]
 800adf2:	e7e6      	b.n	800adc2 <__swsetup_r+0x1e>
 800adf4:	0758      	lsls	r0, r3, #29
 800adf6:	d512      	bpl.n	800ae1e <__swsetup_r+0x7a>
 800adf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfa:	b141      	cbz	r1, 800ae0e <__swsetup_r+0x6a>
 800adfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae00:	4299      	cmp	r1, r3
 800ae02:	d002      	beq.n	800ae0a <__swsetup_r+0x66>
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff fb49 	bl	800a49c <_free_r>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	2300      	movs	r3, #0
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f043 0308 	orr.w	r3, r3, #8
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	b94b      	cbnz	r3, 800ae3e <__swsetup_r+0x9a>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae34:	d003      	beq.n	800ae3e <__swsetup_r+0x9a>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 fa05 	bl	800b248 <__smakebuf_r>
 800ae3e:	89a0      	ldrh	r0, [r4, #12]
 800ae40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae44:	f010 0301 	ands.w	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <__swsetup_r+0xbc>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60a3      	str	r3, [r4, #8]
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	425b      	negs	r3, r3
 800ae52:	61a3      	str	r3, [r4, #24]
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	b943      	cbnz	r3, 800ae6a <__swsetup_r+0xc6>
 800ae58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae5c:	d1ba      	bne.n	800add4 <__swsetup_r+0x30>
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	0781      	lsls	r1, r0, #30
 800ae62:	bf58      	it	pl
 800ae64:	6963      	ldrpl	r3, [r4, #20]
 800ae66:	60a3      	str	r3, [r4, #8]
 800ae68:	e7f4      	b.n	800ae54 <__swsetup_r+0xb0>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e7f7      	b.n	800ae5e <__swsetup_r+0xba>
 800ae6e:	bf00      	nop
 800ae70:	20000010 	.word	0x20000010
 800ae74:	0801e0e4 	.word	0x0801e0e4
 800ae78:	0801e104 	.word	0x0801e104
 800ae7c:	0801e0c4 	.word	0x0801e0c4

0800ae80 <abort>:
 800ae80:	2006      	movs	r0, #6
 800ae82:	b508      	push	{r3, lr}
 800ae84:	f000 fa50 	bl	800b328 <raise>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7f9 f913 	bl	80040b4 <_exit>
	...

0800ae90 <__sflush_r>:
 800ae90:	898a      	ldrh	r2, [r1, #12]
 800ae92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae94:	4605      	mov	r5, r0
 800ae96:	0710      	lsls	r0, r2, #28
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d457      	bmi.n	800af4c <__sflush_r+0xbc>
 800ae9c:	684b      	ldr	r3, [r1, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dc04      	bgt.n	800aeac <__sflush_r+0x1c>
 800aea2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dc01      	bgt.n	800aeac <__sflush_r+0x1c>
 800aea8:	2000      	movs	r0, #0
 800aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeae:	2e00      	cmp	r6, #0
 800aeb0:	d0fa      	beq.n	800aea8 <__sflush_r+0x18>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aeb8:	682f      	ldr	r7, [r5, #0]
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	d032      	beq.n	800af24 <__sflush_r+0x94>
 800aebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	075a      	lsls	r2, r3, #29
 800aec4:	d505      	bpl.n	800aed2 <__sflush_r+0x42>
 800aec6:	6863      	ldr	r3, [r4, #4]
 800aec8:	1ac0      	subs	r0, r0, r3
 800aeca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aecc:	b10b      	cbz	r3, 800aed2 <__sflush_r+0x42>
 800aece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aed0:	1ac0      	subs	r0, r0, r3
 800aed2:	2300      	movs	r3, #0
 800aed4:	4602      	mov	r2, r0
 800aed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed8:	4628      	mov	r0, r5
 800aeda:	6a21      	ldr	r1, [r4, #32]
 800aedc:	47b0      	blx	r6
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	d106      	bne.n	800aef2 <__sflush_r+0x62>
 800aee4:	6829      	ldr	r1, [r5, #0]
 800aee6:	291d      	cmp	r1, #29
 800aee8:	d82c      	bhi.n	800af44 <__sflush_r+0xb4>
 800aeea:	4a29      	ldr	r2, [pc, #164]	; (800af90 <__sflush_r+0x100>)
 800aeec:	40ca      	lsrs	r2, r1
 800aeee:	07d6      	lsls	r6, r2, #31
 800aef0:	d528      	bpl.n	800af44 <__sflush_r+0xb4>
 800aef2:	2200      	movs	r2, #0
 800aef4:	6062      	str	r2, [r4, #4]
 800aef6:	6922      	ldr	r2, [r4, #16]
 800aef8:	04d9      	lsls	r1, r3, #19
 800aefa:	6022      	str	r2, [r4, #0]
 800aefc:	d504      	bpl.n	800af08 <__sflush_r+0x78>
 800aefe:	1c42      	adds	r2, r0, #1
 800af00:	d101      	bne.n	800af06 <__sflush_r+0x76>
 800af02:	682b      	ldr	r3, [r5, #0]
 800af04:	b903      	cbnz	r3, 800af08 <__sflush_r+0x78>
 800af06:	6560      	str	r0, [r4, #84]	; 0x54
 800af08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af0a:	602f      	str	r7, [r5, #0]
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d0cb      	beq.n	800aea8 <__sflush_r+0x18>
 800af10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af14:	4299      	cmp	r1, r3
 800af16:	d002      	beq.n	800af1e <__sflush_r+0x8e>
 800af18:	4628      	mov	r0, r5
 800af1a:	f7ff fabf 	bl	800a49c <_free_r>
 800af1e:	2000      	movs	r0, #0
 800af20:	6360      	str	r0, [r4, #52]	; 0x34
 800af22:	e7c2      	b.n	800aeaa <__sflush_r+0x1a>
 800af24:	6a21      	ldr	r1, [r4, #32]
 800af26:	2301      	movs	r3, #1
 800af28:	4628      	mov	r0, r5
 800af2a:	47b0      	blx	r6
 800af2c:	1c41      	adds	r1, r0, #1
 800af2e:	d1c7      	bne.n	800aec0 <__sflush_r+0x30>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0c4      	beq.n	800aec0 <__sflush_r+0x30>
 800af36:	2b1d      	cmp	r3, #29
 800af38:	d001      	beq.n	800af3e <__sflush_r+0xae>
 800af3a:	2b16      	cmp	r3, #22
 800af3c:	d101      	bne.n	800af42 <__sflush_r+0xb2>
 800af3e:	602f      	str	r7, [r5, #0]
 800af40:	e7b2      	b.n	800aea8 <__sflush_r+0x18>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	e7ae      	b.n	800aeaa <__sflush_r+0x1a>
 800af4c:	690f      	ldr	r7, [r1, #16]
 800af4e:	2f00      	cmp	r7, #0
 800af50:	d0aa      	beq.n	800aea8 <__sflush_r+0x18>
 800af52:	0793      	lsls	r3, r2, #30
 800af54:	bf18      	it	ne
 800af56:	2300      	movne	r3, #0
 800af58:	680e      	ldr	r6, [r1, #0]
 800af5a:	bf08      	it	eq
 800af5c:	694b      	ldreq	r3, [r1, #20]
 800af5e:	1bf6      	subs	r6, r6, r7
 800af60:	600f      	str	r7, [r1, #0]
 800af62:	608b      	str	r3, [r1, #8]
 800af64:	2e00      	cmp	r6, #0
 800af66:	dd9f      	ble.n	800aea8 <__sflush_r+0x18>
 800af68:	4633      	mov	r3, r6
 800af6a:	463a      	mov	r2, r7
 800af6c:	4628      	mov	r0, r5
 800af6e:	6a21      	ldr	r1, [r4, #32]
 800af70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800af74:	47e0      	blx	ip
 800af76:	2800      	cmp	r0, #0
 800af78:	dc06      	bgt.n	800af88 <__sflush_r+0xf8>
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	e790      	b.n	800aeaa <__sflush_r+0x1a>
 800af88:	4407      	add	r7, r0
 800af8a:	1a36      	subs	r6, r6, r0
 800af8c:	e7ea      	b.n	800af64 <__sflush_r+0xd4>
 800af8e:	bf00      	nop
 800af90:	20400001 	.word	0x20400001

0800af94 <_fflush_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b913      	cbnz	r3, 800afa4 <_fflush_r+0x10>
 800af9e:	2500      	movs	r5, #0
 800afa0:	4628      	mov	r0, r5
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	b118      	cbz	r0, 800afae <_fflush_r+0x1a>
 800afa6:	6983      	ldr	r3, [r0, #24]
 800afa8:	b90b      	cbnz	r3, 800afae <_fflush_r+0x1a>
 800afaa:	f000 f887 	bl	800b0bc <__sinit>
 800afae:	4b14      	ldr	r3, [pc, #80]	; (800b000 <_fflush_r+0x6c>)
 800afb0:	429c      	cmp	r4, r3
 800afb2:	d11b      	bne.n	800afec <_fflush_r+0x58>
 800afb4:	686c      	ldr	r4, [r5, #4]
 800afb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0ef      	beq.n	800af9e <_fflush_r+0xa>
 800afbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afc0:	07d0      	lsls	r0, r2, #31
 800afc2:	d404      	bmi.n	800afce <_fflush_r+0x3a>
 800afc4:	0599      	lsls	r1, r3, #22
 800afc6:	d402      	bmi.n	800afce <_fflush_r+0x3a>
 800afc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afca:	f000 f915 	bl	800b1f8 <__retarget_lock_acquire_recursive>
 800afce:	4628      	mov	r0, r5
 800afd0:	4621      	mov	r1, r4
 800afd2:	f7ff ff5d 	bl	800ae90 <__sflush_r>
 800afd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd8:	4605      	mov	r5, r0
 800afda:	07da      	lsls	r2, r3, #31
 800afdc:	d4e0      	bmi.n	800afa0 <_fflush_r+0xc>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	059b      	lsls	r3, r3, #22
 800afe2:	d4dd      	bmi.n	800afa0 <_fflush_r+0xc>
 800afe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afe6:	f000 f908 	bl	800b1fa <__retarget_lock_release_recursive>
 800afea:	e7d9      	b.n	800afa0 <_fflush_r+0xc>
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <_fflush_r+0x70>)
 800afee:	429c      	cmp	r4, r3
 800aff0:	d101      	bne.n	800aff6 <_fflush_r+0x62>
 800aff2:	68ac      	ldr	r4, [r5, #8]
 800aff4:	e7df      	b.n	800afb6 <_fflush_r+0x22>
 800aff6:	4b04      	ldr	r3, [pc, #16]	; (800b008 <_fflush_r+0x74>)
 800aff8:	429c      	cmp	r4, r3
 800affa:	bf08      	it	eq
 800affc:	68ec      	ldreq	r4, [r5, #12]
 800affe:	e7da      	b.n	800afb6 <_fflush_r+0x22>
 800b000:	0801e0e4 	.word	0x0801e0e4
 800b004:	0801e104 	.word	0x0801e104
 800b008:	0801e0c4 	.word	0x0801e0c4

0800b00c <std>:
 800b00c:	2300      	movs	r3, #0
 800b00e:	b510      	push	{r4, lr}
 800b010:	4604      	mov	r4, r0
 800b012:	e9c0 3300 	strd	r3, r3, [r0]
 800b016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b01a:	6083      	str	r3, [r0, #8]
 800b01c:	8181      	strh	r1, [r0, #12]
 800b01e:	6643      	str	r3, [r0, #100]	; 0x64
 800b020:	81c2      	strh	r2, [r0, #14]
 800b022:	6183      	str	r3, [r0, #24]
 800b024:	4619      	mov	r1, r3
 800b026:	2208      	movs	r2, #8
 800b028:	305c      	adds	r0, #92	; 0x5c
 800b02a:	f7fb fe1b 	bl	8006c64 <memset>
 800b02e:	4b05      	ldr	r3, [pc, #20]	; (800b044 <std+0x38>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	6263      	str	r3, [r4, #36]	; 0x24
 800b034:	4b04      	ldr	r3, [pc, #16]	; (800b048 <std+0x3c>)
 800b036:	62a3      	str	r3, [r4, #40]	; 0x28
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <std+0x40>)
 800b03a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b03c:	4b04      	ldr	r3, [pc, #16]	; (800b050 <std+0x44>)
 800b03e:	6323      	str	r3, [r4, #48]	; 0x30
 800b040:	bd10      	pop	{r4, pc}
 800b042:	bf00      	nop
 800b044:	0800b361 	.word	0x0800b361
 800b048:	0800b383 	.word	0x0800b383
 800b04c:	0800b3bb 	.word	0x0800b3bb
 800b050:	0800b3df 	.word	0x0800b3df

0800b054 <_cleanup_r>:
 800b054:	4901      	ldr	r1, [pc, #4]	; (800b05c <_cleanup_r+0x8>)
 800b056:	f000 b8af 	b.w	800b1b8 <_fwalk_reent>
 800b05a:	bf00      	nop
 800b05c:	0800af95 	.word	0x0800af95

0800b060 <__sfmoreglue>:
 800b060:	2268      	movs	r2, #104	; 0x68
 800b062:	b570      	push	{r4, r5, r6, lr}
 800b064:	1e4d      	subs	r5, r1, #1
 800b066:	4355      	muls	r5, r2
 800b068:	460e      	mov	r6, r1
 800b06a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b06e:	f7ff fa7d 	bl	800a56c <_malloc_r>
 800b072:	4604      	mov	r4, r0
 800b074:	b140      	cbz	r0, 800b088 <__sfmoreglue+0x28>
 800b076:	2100      	movs	r1, #0
 800b078:	e9c0 1600 	strd	r1, r6, [r0]
 800b07c:	300c      	adds	r0, #12
 800b07e:	60a0      	str	r0, [r4, #8]
 800b080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b084:	f7fb fdee 	bl	8006c64 <memset>
 800b088:	4620      	mov	r0, r4
 800b08a:	bd70      	pop	{r4, r5, r6, pc}

0800b08c <__sfp_lock_acquire>:
 800b08c:	4801      	ldr	r0, [pc, #4]	; (800b094 <__sfp_lock_acquire+0x8>)
 800b08e:	f000 b8b3 	b.w	800b1f8 <__retarget_lock_acquire_recursive>
 800b092:	bf00      	nop
 800b094:	20000981 	.word	0x20000981

0800b098 <__sfp_lock_release>:
 800b098:	4801      	ldr	r0, [pc, #4]	; (800b0a0 <__sfp_lock_release+0x8>)
 800b09a:	f000 b8ae 	b.w	800b1fa <__retarget_lock_release_recursive>
 800b09e:	bf00      	nop
 800b0a0:	20000981 	.word	0x20000981

0800b0a4 <__sinit_lock_acquire>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	; (800b0ac <__sinit_lock_acquire+0x8>)
 800b0a6:	f000 b8a7 	b.w	800b1f8 <__retarget_lock_acquire_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	20000982 	.word	0x20000982

0800b0b0 <__sinit_lock_release>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	; (800b0b8 <__sinit_lock_release+0x8>)
 800b0b2:	f000 b8a2 	b.w	800b1fa <__retarget_lock_release_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20000982 	.word	0x20000982

0800b0bc <__sinit>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4604      	mov	r4, r0
 800b0c0:	f7ff fff0 	bl	800b0a4 <__sinit_lock_acquire>
 800b0c4:	69a3      	ldr	r3, [r4, #24]
 800b0c6:	b11b      	cbz	r3, 800b0d0 <__sinit+0x14>
 800b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0cc:	f7ff bff0 	b.w	800b0b0 <__sinit_lock_release>
 800b0d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <__sinit+0x68>)
 800b0d8:	4a13      	ldr	r2, [pc, #76]	; (800b128 <__sinit+0x6c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	bf08      	it	eq
 800b0e2:	2301      	moveq	r3, #1
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	bf08      	it	eq
 800b0e8:	61a3      	streq	r3, [r4, #24]
 800b0ea:	f000 f81f 	bl	800b12c <__sfp>
 800b0ee:	6060      	str	r0, [r4, #4]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 f81b 	bl	800b12c <__sfp>
 800b0f6:	60a0      	str	r0, [r4, #8]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f817 	bl	800b12c <__sfp>
 800b0fe:	2200      	movs	r2, #0
 800b100:	2104      	movs	r1, #4
 800b102:	60e0      	str	r0, [r4, #12]
 800b104:	6860      	ldr	r0, [r4, #4]
 800b106:	f7ff ff81 	bl	800b00c <std>
 800b10a:	2201      	movs	r2, #1
 800b10c:	2109      	movs	r1, #9
 800b10e:	68a0      	ldr	r0, [r4, #8]
 800b110:	f7ff ff7c 	bl	800b00c <std>
 800b114:	2202      	movs	r2, #2
 800b116:	2112      	movs	r1, #18
 800b118:	68e0      	ldr	r0, [r4, #12]
 800b11a:	f7ff ff77 	bl	800b00c <std>
 800b11e:	2301      	movs	r3, #1
 800b120:	61a3      	str	r3, [r4, #24]
 800b122:	e7d1      	b.n	800b0c8 <__sinit+0xc>
 800b124:	0801dc80 	.word	0x0801dc80
 800b128:	0800b055 	.word	0x0800b055

0800b12c <__sfp>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	4607      	mov	r7, r0
 800b130:	f7ff ffac 	bl	800b08c <__sfp_lock_acquire>
 800b134:	4b1e      	ldr	r3, [pc, #120]	; (800b1b0 <__sfp+0x84>)
 800b136:	681e      	ldr	r6, [r3, #0]
 800b138:	69b3      	ldr	r3, [r6, #24]
 800b13a:	b913      	cbnz	r3, 800b142 <__sfp+0x16>
 800b13c:	4630      	mov	r0, r6
 800b13e:	f7ff ffbd 	bl	800b0bc <__sinit>
 800b142:	3648      	adds	r6, #72	; 0x48
 800b144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b148:	3b01      	subs	r3, #1
 800b14a:	d503      	bpl.n	800b154 <__sfp+0x28>
 800b14c:	6833      	ldr	r3, [r6, #0]
 800b14e:	b30b      	cbz	r3, 800b194 <__sfp+0x68>
 800b150:	6836      	ldr	r6, [r6, #0]
 800b152:	e7f7      	b.n	800b144 <__sfp+0x18>
 800b154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b158:	b9d5      	cbnz	r5, 800b190 <__sfp+0x64>
 800b15a:	4b16      	ldr	r3, [pc, #88]	; (800b1b4 <__sfp+0x88>)
 800b15c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b160:	60e3      	str	r3, [r4, #12]
 800b162:	6665      	str	r5, [r4, #100]	; 0x64
 800b164:	f000 f847 	bl	800b1f6 <__retarget_lock_init_recursive>
 800b168:	f7ff ff96 	bl	800b098 <__sfp_lock_release>
 800b16c:	2208      	movs	r2, #8
 800b16e:	4629      	mov	r1, r5
 800b170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b178:	6025      	str	r5, [r4, #0]
 800b17a:	61a5      	str	r5, [r4, #24]
 800b17c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b180:	f7fb fd70 	bl	8006c64 <memset>
 800b184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b18c:	4620      	mov	r0, r4
 800b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b190:	3468      	adds	r4, #104	; 0x68
 800b192:	e7d9      	b.n	800b148 <__sfp+0x1c>
 800b194:	2104      	movs	r1, #4
 800b196:	4638      	mov	r0, r7
 800b198:	f7ff ff62 	bl	800b060 <__sfmoreglue>
 800b19c:	4604      	mov	r4, r0
 800b19e:	6030      	str	r0, [r6, #0]
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1d5      	bne.n	800b150 <__sfp+0x24>
 800b1a4:	f7ff ff78 	bl	800b098 <__sfp_lock_release>
 800b1a8:	230c      	movs	r3, #12
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	e7ee      	b.n	800b18c <__sfp+0x60>
 800b1ae:	bf00      	nop
 800b1b0:	0801dc80 	.word	0x0801dc80
 800b1b4:	ffff0001 	.word	0xffff0001

0800b1b8 <_fwalk_reent>:
 800b1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1bc:	4606      	mov	r6, r0
 800b1be:	4688      	mov	r8, r1
 800b1c0:	2700      	movs	r7, #0
 800b1c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b1ce:	d505      	bpl.n	800b1dc <_fwalk_reent+0x24>
 800b1d0:	6824      	ldr	r4, [r4, #0]
 800b1d2:	2c00      	cmp	r4, #0
 800b1d4:	d1f7      	bne.n	800b1c6 <_fwalk_reent+0xe>
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1dc:	89ab      	ldrh	r3, [r5, #12]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d907      	bls.n	800b1f2 <_fwalk_reent+0x3a>
 800b1e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	d003      	beq.n	800b1f2 <_fwalk_reent+0x3a>
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	47c0      	blx	r8
 800b1f0:	4307      	orrs	r7, r0
 800b1f2:	3568      	adds	r5, #104	; 0x68
 800b1f4:	e7e9      	b.n	800b1ca <_fwalk_reent+0x12>

0800b1f6 <__retarget_lock_init_recursive>:
 800b1f6:	4770      	bx	lr

0800b1f8 <__retarget_lock_acquire_recursive>:
 800b1f8:	4770      	bx	lr

0800b1fa <__retarget_lock_release_recursive>:
 800b1fa:	4770      	bx	lr

0800b1fc <__swhatbuf_r>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	460e      	mov	r6, r1
 800b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b204:	4614      	mov	r4, r2
 800b206:	2900      	cmp	r1, #0
 800b208:	461d      	mov	r5, r3
 800b20a:	b096      	sub	sp, #88	; 0x58
 800b20c:	da08      	bge.n	800b220 <__swhatbuf_r+0x24>
 800b20e:	2200      	movs	r2, #0
 800b210:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	061a      	lsls	r2, r3, #24
 800b218:	d410      	bmi.n	800b23c <__swhatbuf_r+0x40>
 800b21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21e:	e00e      	b.n	800b23e <__swhatbuf_r+0x42>
 800b220:	466a      	mov	r2, sp
 800b222:	f000 f903 	bl	800b42c <_fstat_r>
 800b226:	2800      	cmp	r0, #0
 800b228:	dbf1      	blt.n	800b20e <__swhatbuf_r+0x12>
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b234:	425a      	negs	r2, r3
 800b236:	415a      	adcs	r2, r3
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	e7ee      	b.n	800b21a <__swhatbuf_r+0x1e>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	2000      	movs	r0, #0
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	b016      	add	sp, #88	; 0x58
 800b244:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b002      	add	sp, #8
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	466a      	mov	r2, sp
 800b266:	ab01      	add	r3, sp, #4
 800b268:	f7ff ffc8 	bl	800b1fc <__swhatbuf_r>
 800b26c:	9900      	ldr	r1, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff f97b 	bl	800a56c <_malloc_r>
 800b276:	b948      	cbnz	r0, 800b28c <__smakebuf_r+0x44>
 800b278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d4ef      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b280:	f023 0303 	bic.w	r3, r3, #3
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e7e3      	b.n	800b254 <__smakebuf_r+0xc>
 800b28c:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <__smakebuf_r+0x7c>)
 800b28e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	6020      	str	r0, [r4, #0]
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	9b00      	ldr	r3, [sp, #0]
 800b29c:	6120      	str	r0, [r4, #16]
 800b29e:	6163      	str	r3, [r4, #20]
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	b15b      	cbz	r3, 800b2bc <__smakebuf_r+0x74>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2aa:	f000 f8d1 	bl	800b450 <_isatty_r>
 800b2ae:	b128      	cbz	r0, 800b2bc <__smakebuf_r+0x74>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	89a0      	ldrh	r0, [r4, #12]
 800b2be:	4305      	orrs	r5, r0
 800b2c0:	81a5      	strh	r5, [r4, #12]
 800b2c2:	e7cd      	b.n	800b260 <__smakebuf_r+0x18>
 800b2c4:	0800b055 	.word	0x0800b055

0800b2c8 <_malloc_usable_size_r>:
 800b2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2cc:	1f18      	subs	r0, r3, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfbc      	itt	lt
 800b2d2:	580b      	ldrlt	r3, [r1, r0]
 800b2d4:	18c0      	addlt	r0, r0, r3
 800b2d6:	4770      	bx	lr

0800b2d8 <_raise_r>:
 800b2d8:	291f      	cmp	r1, #31
 800b2da:	b538      	push	{r3, r4, r5, lr}
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460d      	mov	r5, r1
 800b2e0:	d904      	bls.n	800b2ec <_raise_r+0x14>
 800b2e2:	2316      	movs	r3, #22
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2ee:	b112      	cbz	r2, 800b2f6 <_raise_r+0x1e>
 800b2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2f4:	b94b      	cbnz	r3, 800b30a <_raise_r+0x32>
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 f830 	bl	800b35c <_getpid_r>
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4601      	mov	r1, r0
 800b300:	4620      	mov	r0, r4
 800b302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b306:	f000 b817 	b.w	800b338 <_kill_r>
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d00a      	beq.n	800b324 <_raise_r+0x4c>
 800b30e:	1c59      	adds	r1, r3, #1
 800b310:	d103      	bne.n	800b31a <_raise_r+0x42>
 800b312:	2316      	movs	r3, #22
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	2001      	movs	r0, #1
 800b318:	e7e7      	b.n	800b2ea <_raise_r+0x12>
 800b31a:	2400      	movs	r4, #0
 800b31c:	4628      	mov	r0, r5
 800b31e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b322:	4798      	blx	r3
 800b324:	2000      	movs	r0, #0
 800b326:	e7e0      	b.n	800b2ea <_raise_r+0x12>

0800b328 <raise>:
 800b328:	4b02      	ldr	r3, [pc, #8]	; (800b334 <raise+0xc>)
 800b32a:	4601      	mov	r1, r0
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	f7ff bfd3 	b.w	800b2d8 <_raise_r>
 800b332:	bf00      	nop
 800b334:	20000010 	.word	0x20000010

0800b338 <_kill_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	2300      	movs	r3, #0
 800b33c:	4d06      	ldr	r5, [pc, #24]	; (800b358 <_kill_r+0x20>)
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	4611      	mov	r1, r2
 800b344:	602b      	str	r3, [r5, #0]
 800b346:	f7f8 feab 	bl	80040a0 <_kill>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	d102      	bne.n	800b354 <_kill_r+0x1c>
 800b34e:	682b      	ldr	r3, [r5, #0]
 800b350:	b103      	cbz	r3, 800b354 <_kill_r+0x1c>
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	bd38      	pop	{r3, r4, r5, pc}
 800b356:	bf00      	nop
 800b358:	2000097c 	.word	0x2000097c

0800b35c <_getpid_r>:
 800b35c:	f7f8 be9e 	b.w	800409c <_getpid>

0800b360 <__sread>:
 800b360:	b510      	push	{r4, lr}
 800b362:	460c      	mov	r4, r1
 800b364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b368:	f000 f894 	bl	800b494 <_read_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	bfab      	itete	ge
 800b370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b372:	89a3      	ldrhlt	r3, [r4, #12]
 800b374:	181b      	addge	r3, r3, r0
 800b376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b37a:	bfac      	ite	ge
 800b37c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b37e:	81a3      	strhlt	r3, [r4, #12]
 800b380:	bd10      	pop	{r4, pc}

0800b382 <__swrite>:
 800b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	461f      	mov	r7, r3
 800b388:	898b      	ldrh	r3, [r1, #12]
 800b38a:	4605      	mov	r5, r0
 800b38c:	05db      	lsls	r3, r3, #23
 800b38e:	460c      	mov	r4, r1
 800b390:	4616      	mov	r6, r2
 800b392:	d505      	bpl.n	800b3a0 <__swrite+0x1e>
 800b394:	2302      	movs	r3, #2
 800b396:	2200      	movs	r2, #0
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f868 	bl	800b470 <_lseek_r>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	f000 b817 	b.w	800b3e8 <_write_r>

0800b3ba <__sseek>:
 800b3ba:	b510      	push	{r4, lr}
 800b3bc:	460c      	mov	r4, r1
 800b3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c2:	f000 f855 	bl	800b470 <_lseek_r>
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	bf15      	itete	ne
 800b3cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3d6:	81a3      	strheq	r3, [r4, #12]
 800b3d8:	bf18      	it	ne
 800b3da:	81a3      	strhne	r3, [r4, #12]
 800b3dc:	bd10      	pop	{r4, pc}

0800b3de <__sclose>:
 800b3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e2:	f000 b813 	b.w	800b40c <_close_r>
	...

0800b3e8 <_write_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4d05      	ldr	r5, [pc, #20]	; (800b408 <_write_r+0x20>)
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7f8 fe70 	bl	80040dc <_write>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_write_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_write_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	2000097c 	.word	0x2000097c

0800b40c <_close_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	2300      	movs	r3, #0
 800b410:	4d05      	ldr	r5, [pc, #20]	; (800b428 <_close_r+0x1c>)
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f8 fe6e 	bl	80040f8 <_close>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_close_r+0x1a>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_close_r+0x1a>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	2000097c 	.word	0x2000097c

0800b42c <_fstat_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	2300      	movs	r3, #0
 800b430:	4d06      	ldr	r5, [pc, #24]	; (800b44c <_fstat_r+0x20>)
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f7f8 fe61 	bl	8004100 <_fstat>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d102      	bne.n	800b448 <_fstat_r+0x1c>
 800b442:	682b      	ldr	r3, [r5, #0]
 800b444:	b103      	cbz	r3, 800b448 <_fstat_r+0x1c>
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	bf00      	nop
 800b44c:	2000097c 	.word	0x2000097c

0800b450 <_isatty_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	2300      	movs	r3, #0
 800b454:	4d05      	ldr	r5, [pc, #20]	; (800b46c <_isatty_r+0x1c>)
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f8 fe56 	bl	800410c <_isatty>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_isatty_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_isatty_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	2000097c 	.word	0x2000097c

0800b470 <_lseek_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	2200      	movs	r2, #0
 800b47a:	4d05      	ldr	r5, [pc, #20]	; (800b490 <_lseek_r+0x20>)
 800b47c:	602a      	str	r2, [r5, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	f7f8 fe46 	bl	8004110 <_lseek>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d102      	bne.n	800b48e <_lseek_r+0x1e>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	b103      	cbz	r3, 800b48e <_lseek_r+0x1e>
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
 800b490:	2000097c 	.word	0x2000097c

0800b494 <_read_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	4611      	mov	r1, r2
 800b49c:	2200      	movs	r2, #0
 800b49e:	4d05      	ldr	r5, [pc, #20]	; (800b4b4 <_read_r+0x20>)
 800b4a0:	602a      	str	r2, [r5, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f7f8 fe0c 	bl	80040c0 <_read>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d102      	bne.n	800b4b2 <_read_r+0x1e>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	b103      	cbz	r3, 800b4b2 <_read_r+0x1e>
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	bd38      	pop	{r3, r4, r5, pc}
 800b4b4:	2000097c 	.word	0x2000097c

0800b4b8 <floor>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b4c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b4c4:	2e13      	cmp	r6, #19
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	dc33      	bgt.n	800b53a <floor+0x82>
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	da14      	bge.n	800b500 <floor+0x48>
 800b4d6:	a334      	add	r3, pc, #208	; (adr r3, 800b5a8 <floor+0xf0>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fe46 	bl	800016c <__adddf3>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f7f5 fa88 	bl	80009f8 <__aeabi_dcmpgt>
 800b4e8:	b138      	cbz	r0, 800b4fa <floor+0x42>
 800b4ea:	2c00      	cmp	r4, #0
 800b4ec:	da58      	bge.n	800b5a0 <floor+0xe8>
 800b4ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b4f2:	431d      	orrs	r5, r3
 800b4f4:	d001      	beq.n	800b4fa <floor+0x42>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	4c2d      	ldr	r4, [pc, #180]	; (800b5b0 <floor+0xf8>)
 800b4fa:	4623      	mov	r3, r4
 800b4fc:	462f      	mov	r7, r5
 800b4fe:	e025      	b.n	800b54c <floor+0x94>
 800b500:	4a2c      	ldr	r2, [pc, #176]	; (800b5b4 <floor+0xfc>)
 800b502:	fa42 f806 	asr.w	r8, r2, r6
 800b506:	ea01 0208 	and.w	r2, r1, r8
 800b50a:	4302      	orrs	r2, r0
 800b50c:	d01e      	beq.n	800b54c <floor+0x94>
 800b50e:	a326      	add	r3, pc, #152	; (adr r3, 800b5a8 <floor+0xf0>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f7f4 fe2a 	bl	800016c <__adddf3>
 800b518:	2200      	movs	r2, #0
 800b51a:	2300      	movs	r3, #0
 800b51c:	f7f5 fa6c 	bl	80009f8 <__aeabi_dcmpgt>
 800b520:	2800      	cmp	r0, #0
 800b522:	d0ea      	beq.n	800b4fa <floor+0x42>
 800b524:	2c00      	cmp	r4, #0
 800b526:	bfbe      	ittt	lt
 800b528:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b52c:	fa43 f606 	asrlt.w	r6, r3, r6
 800b530:	19a4      	addlt	r4, r4, r6
 800b532:	2500      	movs	r5, #0
 800b534:	ea24 0408 	bic.w	r4, r4, r8
 800b538:	e7df      	b.n	800b4fa <floor+0x42>
 800b53a:	2e33      	cmp	r6, #51	; 0x33
 800b53c:	dd0a      	ble.n	800b554 <floor+0x9c>
 800b53e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b542:	d103      	bne.n	800b54c <floor+0x94>
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	4607      	mov	r7, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4638      	mov	r0, r7
 800b54e:	4619      	mov	r1, r3
 800b550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b554:	f04f 32ff 	mov.w	r2, #4294967295
 800b558:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b55c:	fa22 f808 	lsr.w	r8, r2, r8
 800b560:	ea18 0f00 	tst.w	r8, r0
 800b564:	d0f2      	beq.n	800b54c <floor+0x94>
 800b566:	a310      	add	r3, pc, #64	; (adr r3, 800b5a8 <floor+0xf0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 fdfe 	bl	800016c <__adddf3>
 800b570:	2200      	movs	r2, #0
 800b572:	2300      	movs	r3, #0
 800b574:	f7f5 fa40 	bl	80009f8 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d0be      	beq.n	800b4fa <floor+0x42>
 800b57c:	2c00      	cmp	r4, #0
 800b57e:	da02      	bge.n	800b586 <floor+0xce>
 800b580:	2e14      	cmp	r6, #20
 800b582:	d103      	bne.n	800b58c <floor+0xd4>
 800b584:	3401      	adds	r4, #1
 800b586:	ea25 0508 	bic.w	r5, r5, r8
 800b58a:	e7b6      	b.n	800b4fa <floor+0x42>
 800b58c:	2301      	movs	r3, #1
 800b58e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b592:	fa03 f606 	lsl.w	r6, r3, r6
 800b596:	4435      	add	r5, r6
 800b598:	42bd      	cmp	r5, r7
 800b59a:	bf38      	it	cc
 800b59c:	18e4      	addcc	r4, r4, r3
 800b59e:	e7f2      	b.n	800b586 <floor+0xce>
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	462c      	mov	r4, r5
 800b5a4:	e7a9      	b.n	800b4fa <floor+0x42>
 800b5a6:	bf00      	nop
 800b5a8:	8800759c 	.word	0x8800759c
 800b5ac:	7e37e43c 	.word	0x7e37e43c
 800b5b0:	bff00000 	.word	0xbff00000
 800b5b4:	000fffff 	.word	0x000fffff

0800b5b8 <pow>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4614      	mov	r4, r2
 800b5be:	461d      	mov	r5, r3
 800b5c0:	4680      	mov	r8, r0
 800b5c2:	4689      	mov	r9, r1
 800b5c4:	f000 f860 	bl	800b688 <__ieee754_pow>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	f7f5 fa1a 	bl	8000a0c <__aeabi_dcmpun>
 800b5d8:	bbc8      	cbnz	r0, 800b64e <pow+0x96>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4640      	mov	r0, r8
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	f7f5 f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 800b5e6:	b1b8      	cbz	r0, 800b618 <pow+0x60>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f5 f9da 	bl	80009a8 <__aeabi_dcmpeq>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d141      	bne.n	800b67c <pow+0xc4>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	f000 fe39 	bl	800c272 <finite>
 800b600:	b328      	cbz	r0, 800b64e <pow+0x96>
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	4620      	mov	r0, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 f9d7 	bl	80009bc <__aeabi_dcmplt>
 800b60e:	b1f0      	cbz	r0, 800b64e <pow+0x96>
 800b610:	f7fb fae4 	bl	8006bdc <__errno>
 800b614:	2322      	movs	r3, #34	; 0x22
 800b616:	e019      	b.n	800b64c <pow+0x94>
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f000 fe29 	bl	800c272 <finite>
 800b620:	b9c8      	cbnz	r0, 800b656 <pow+0x9e>
 800b622:	4640      	mov	r0, r8
 800b624:	4649      	mov	r1, r9
 800b626:	f000 fe24 	bl	800c272 <finite>
 800b62a:	b1a0      	cbz	r0, 800b656 <pow+0x9e>
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f000 fe1f 	bl	800c272 <finite>
 800b634:	b178      	cbz	r0, 800b656 <pow+0x9e>
 800b636:	4632      	mov	r2, r6
 800b638:	463b      	mov	r3, r7
 800b63a:	4630      	mov	r0, r6
 800b63c:	4639      	mov	r1, r7
 800b63e:	f7f5 f9e5 	bl	8000a0c <__aeabi_dcmpun>
 800b642:	2800      	cmp	r0, #0
 800b644:	d0e4      	beq.n	800b610 <pow+0x58>
 800b646:	f7fb fac9 	bl	8006bdc <__errno>
 800b64a:	2321      	movs	r3, #33	; 0x21
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b656:	2200      	movs	r2, #0
 800b658:	2300      	movs	r3, #0
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f5 f9a3 	bl	80009a8 <__aeabi_dcmpeq>
 800b662:	2800      	cmp	r0, #0
 800b664:	d0f3      	beq.n	800b64e <pow+0x96>
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f000 fe02 	bl	800c272 <finite>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d0ed      	beq.n	800b64e <pow+0x96>
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f000 fdfc 	bl	800c272 <finite>
 800b67a:	e7c8      	b.n	800b60e <pow+0x56>
 800b67c:	2600      	movs	r6, #0
 800b67e:	4f01      	ldr	r7, [pc, #4]	; (800b684 <pow+0xcc>)
 800b680:	e7e5      	b.n	800b64e <pow+0x96>
 800b682:	bf00      	nop
 800b684:	3ff00000 	.word	0x3ff00000

0800b688 <__ieee754_pow>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	b093      	sub	sp, #76	; 0x4c
 800b68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b692:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b696:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b69a:	4689      	mov	r9, r1
 800b69c:	ea56 0102 	orrs.w	r1, r6, r2
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	d111      	bne.n	800b6c8 <__ieee754_pow+0x40>
 800b6a4:	1803      	adds	r3, r0, r0
 800b6a6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b6aa:	4152      	adcs	r2, r2
 800b6ac:	4299      	cmp	r1, r3
 800b6ae:	4b82      	ldr	r3, [pc, #520]	; (800b8b8 <__ieee754_pow+0x230>)
 800b6b0:	4193      	sbcs	r3, r2
 800b6b2:	f080 84b9 	bcs.w	800c028 <__ieee754_pow+0x9a0>
 800b6b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	4649      	mov	r1, r9
 800b6be:	f7f4 fd55 	bl	800016c <__adddf3>
 800b6c2:	4683      	mov	fp, r0
 800b6c4:	468c      	mov	ip, r1
 800b6c6:	e06f      	b.n	800b7a8 <__ieee754_pow+0x120>
 800b6c8:	4b7c      	ldr	r3, [pc, #496]	; (800b8bc <__ieee754_pow+0x234>)
 800b6ca:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b6ce:	429c      	cmp	r4, r3
 800b6d0:	464d      	mov	r5, r9
 800b6d2:	4682      	mov	sl, r0
 800b6d4:	dc06      	bgt.n	800b6e4 <__ieee754_pow+0x5c>
 800b6d6:	d101      	bne.n	800b6dc <__ieee754_pow+0x54>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d1ec      	bne.n	800b6b6 <__ieee754_pow+0x2e>
 800b6dc:	429e      	cmp	r6, r3
 800b6de:	dc01      	bgt.n	800b6e4 <__ieee754_pow+0x5c>
 800b6e0:	d10f      	bne.n	800b702 <__ieee754_pow+0x7a>
 800b6e2:	b172      	cbz	r2, 800b702 <__ieee754_pow+0x7a>
 800b6e4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b6e8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b6ec:	ea55 050a 	orrs.w	r5, r5, sl
 800b6f0:	d1e1      	bne.n	800b6b6 <__ieee754_pow+0x2e>
 800b6f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b6f6:	18db      	adds	r3, r3, r3
 800b6f8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b6fc:	4152      	adcs	r2, r2
 800b6fe:	429d      	cmp	r5, r3
 800b700:	e7d5      	b.n	800b6ae <__ieee754_pow+0x26>
 800b702:	2d00      	cmp	r5, #0
 800b704:	da39      	bge.n	800b77a <__ieee754_pow+0xf2>
 800b706:	4b6e      	ldr	r3, [pc, #440]	; (800b8c0 <__ieee754_pow+0x238>)
 800b708:	429e      	cmp	r6, r3
 800b70a:	dc52      	bgt.n	800b7b2 <__ieee754_pow+0x12a>
 800b70c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b710:	429e      	cmp	r6, r3
 800b712:	f340 849c 	ble.w	800c04e <__ieee754_pow+0x9c6>
 800b716:	1533      	asrs	r3, r6, #20
 800b718:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b71c:	2b14      	cmp	r3, #20
 800b71e:	dd0f      	ble.n	800b740 <__ieee754_pow+0xb8>
 800b720:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b724:	fa22 f103 	lsr.w	r1, r2, r3
 800b728:	fa01 f303 	lsl.w	r3, r1, r3
 800b72c:	4293      	cmp	r3, r2
 800b72e:	f040 848e 	bne.w	800c04e <__ieee754_pow+0x9c6>
 800b732:	f001 0101 	and.w	r1, r1, #1
 800b736:	f1c1 0302 	rsb	r3, r1, #2
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	b182      	cbz	r2, 800b760 <__ieee754_pow+0xd8>
 800b73e:	e05d      	b.n	800b7fc <__ieee754_pow+0x174>
 800b740:	2a00      	cmp	r2, #0
 800b742:	d159      	bne.n	800b7f8 <__ieee754_pow+0x170>
 800b744:	f1c3 0314 	rsb	r3, r3, #20
 800b748:	fa46 f103 	asr.w	r1, r6, r3
 800b74c:	fa01 f303 	lsl.w	r3, r1, r3
 800b750:	42b3      	cmp	r3, r6
 800b752:	f040 8479 	bne.w	800c048 <__ieee754_pow+0x9c0>
 800b756:	f001 0101 	and.w	r1, r1, #1
 800b75a:	f1c1 0302 	rsb	r3, r1, #2
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4b58      	ldr	r3, [pc, #352]	; (800b8c4 <__ieee754_pow+0x23c>)
 800b762:	429e      	cmp	r6, r3
 800b764:	d132      	bne.n	800b7cc <__ieee754_pow+0x144>
 800b766:	2f00      	cmp	r7, #0
 800b768:	f280 846a 	bge.w	800c040 <__ieee754_pow+0x9b8>
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	2000      	movs	r0, #0
 800b772:	4954      	ldr	r1, [pc, #336]	; (800b8c4 <__ieee754_pow+0x23c>)
 800b774:	f7f4 ffda 	bl	800072c <__aeabi_ddiv>
 800b778:	e7a3      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b77a:	2300      	movs	r3, #0
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	2a00      	cmp	r2, #0
 800b780:	d13c      	bne.n	800b7fc <__ieee754_pow+0x174>
 800b782:	4b4e      	ldr	r3, [pc, #312]	; (800b8bc <__ieee754_pow+0x234>)
 800b784:	429e      	cmp	r6, r3
 800b786:	d1eb      	bne.n	800b760 <__ieee754_pow+0xd8>
 800b788:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b78c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b790:	ea53 030a 	orrs.w	r3, r3, sl
 800b794:	f000 8448 	beq.w	800c028 <__ieee754_pow+0x9a0>
 800b798:	4b4b      	ldr	r3, [pc, #300]	; (800b8c8 <__ieee754_pow+0x240>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	dd0b      	ble.n	800b7b6 <__ieee754_pow+0x12e>
 800b79e:	2f00      	cmp	r7, #0
 800b7a0:	f2c0 8448 	blt.w	800c034 <__ieee754_pow+0x9ac>
 800b7a4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b7a8:	4658      	mov	r0, fp
 800b7aa:	4661      	mov	r1, ip
 800b7ac:	b013      	add	sp, #76	; 0x4c
 800b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e7e2      	b.n	800b77c <__ieee754_pow+0xf4>
 800b7b6:	2f00      	cmp	r7, #0
 800b7b8:	f04f 0b00 	mov.w	fp, #0
 800b7bc:	f04f 0c00 	mov.w	ip, #0
 800b7c0:	daf2      	bge.n	800b7a8 <__ieee754_pow+0x120>
 800b7c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b7c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b7ca:	e7ed      	b.n	800b7a8 <__ieee754_pow+0x120>
 800b7cc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b7d0:	d106      	bne.n	800b7e0 <__ieee754_pow+0x158>
 800b7d2:	4642      	mov	r2, r8
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 fe7d 	bl	80004d8 <__aeabi_dmul>
 800b7de:	e770      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b7e0:	4b3a      	ldr	r3, [pc, #232]	; (800b8cc <__ieee754_pow+0x244>)
 800b7e2:	429f      	cmp	r7, r3
 800b7e4:	d10a      	bne.n	800b7fc <__ieee754_pow+0x174>
 800b7e6:	2d00      	cmp	r5, #0
 800b7e8:	db08      	blt.n	800b7fc <__ieee754_pow+0x174>
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	b013      	add	sp, #76	; 0x4c
 800b7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	f000 bc5e 	b.w	800c0b4 <__ieee754_sqrt>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f000 fd34 	bl	800c26c <fabs>
 800b804:	4683      	mov	fp, r0
 800b806:	468c      	mov	ip, r1
 800b808:	f1ba 0f00 	cmp.w	sl, #0
 800b80c:	d128      	bne.n	800b860 <__ieee754_pow+0x1d8>
 800b80e:	b124      	cbz	r4, 800b81a <__ieee754_pow+0x192>
 800b810:	4b2c      	ldr	r3, [pc, #176]	; (800b8c4 <__ieee754_pow+0x23c>)
 800b812:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b816:	429a      	cmp	r2, r3
 800b818:	d122      	bne.n	800b860 <__ieee754_pow+0x1d8>
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	da07      	bge.n	800b82e <__ieee754_pow+0x1a6>
 800b81e:	465a      	mov	r2, fp
 800b820:	4663      	mov	r3, ip
 800b822:	2000      	movs	r0, #0
 800b824:	4927      	ldr	r1, [pc, #156]	; (800b8c4 <__ieee754_pow+0x23c>)
 800b826:	f7f4 ff81 	bl	800072c <__aeabi_ddiv>
 800b82a:	4683      	mov	fp, r0
 800b82c:	468c      	mov	ip, r1
 800b82e:	2d00      	cmp	r5, #0
 800b830:	daba      	bge.n	800b7a8 <__ieee754_pow+0x120>
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b838:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b83c:	4323      	orrs	r3, r4
 800b83e:	d108      	bne.n	800b852 <__ieee754_pow+0x1ca>
 800b840:	465a      	mov	r2, fp
 800b842:	4663      	mov	r3, ip
 800b844:	4658      	mov	r0, fp
 800b846:	4661      	mov	r1, ip
 800b848:	f7f4 fc8e 	bl	8000168 <__aeabi_dsub>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	e790      	b.n	800b774 <__ieee754_pow+0xec>
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d1a7      	bne.n	800b7a8 <__ieee754_pow+0x120>
 800b858:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b85c:	469c      	mov	ip, r3
 800b85e:	e7a3      	b.n	800b7a8 <__ieee754_pow+0x120>
 800b860:	0feb      	lsrs	r3, r5, #31
 800b862:	3b01      	subs	r3, #1
 800b864:	930c      	str	r3, [sp, #48]	; 0x30
 800b866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b868:	9b00      	ldr	r3, [sp, #0]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	d104      	bne.n	800b878 <__ieee754_pow+0x1f0>
 800b86e:	4642      	mov	r2, r8
 800b870:	464b      	mov	r3, r9
 800b872:	4640      	mov	r0, r8
 800b874:	4649      	mov	r1, r9
 800b876:	e7e7      	b.n	800b848 <__ieee754_pow+0x1c0>
 800b878:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <__ieee754_pow+0x248>)
 800b87a:	429e      	cmp	r6, r3
 800b87c:	f340 80f6 	ble.w	800ba6c <__ieee754_pow+0x3e4>
 800b880:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b884:	429e      	cmp	r6, r3
 800b886:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <__ieee754_pow+0x240>)
 800b888:	dd09      	ble.n	800b89e <__ieee754_pow+0x216>
 800b88a:	429c      	cmp	r4, r3
 800b88c:	dc0c      	bgt.n	800b8a8 <__ieee754_pow+0x220>
 800b88e:	2f00      	cmp	r7, #0
 800b890:	da0c      	bge.n	800b8ac <__ieee754_pow+0x224>
 800b892:	2000      	movs	r0, #0
 800b894:	b013      	add	sp, #76	; 0x4c
 800b896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	f000 bce2 	b.w	800c262 <__math_oflow>
 800b89e:	429c      	cmp	r4, r3
 800b8a0:	dbf5      	blt.n	800b88e <__ieee754_pow+0x206>
 800b8a2:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <__ieee754_pow+0x23c>)
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	dd15      	ble.n	800b8d4 <__ieee754_pow+0x24c>
 800b8a8:	2f00      	cmp	r7, #0
 800b8aa:	dcf2      	bgt.n	800b892 <__ieee754_pow+0x20a>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	b013      	add	sp, #76	; 0x4c
 800b8b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	f000 bcd0 	b.w	800c258 <__math_uflow>
 800b8b8:	fff00000 	.word	0xfff00000
 800b8bc:	7ff00000 	.word	0x7ff00000
 800b8c0:	433fffff 	.word	0x433fffff
 800b8c4:	3ff00000 	.word	0x3ff00000
 800b8c8:	3fefffff 	.word	0x3fefffff
 800b8cc:	3fe00000 	.word	0x3fe00000
 800b8d0:	41e00000 	.word	0x41e00000
 800b8d4:	4661      	mov	r1, ip
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4658      	mov	r0, fp
 800b8da:	4b5f      	ldr	r3, [pc, #380]	; (800ba58 <__ieee754_pow+0x3d0>)
 800b8dc:	f7f4 fc44 	bl	8000168 <__aeabi_dsub>
 800b8e0:	a355      	add	r3, pc, #340	; (adr r3, 800ba38 <__ieee754_pow+0x3b0>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	460d      	mov	r5, r1
 800b8ea:	f7f4 fdf5 	bl	80004d8 <__aeabi_dmul>
 800b8ee:	a354      	add	r3, pc, #336	; (adr r3, 800ba40 <__ieee754_pow+0x3b8>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f4 fdec 	bl	80004d8 <__aeabi_dmul>
 800b900:	2200      	movs	r2, #0
 800b902:	4682      	mov	sl, r0
 800b904:	468b      	mov	fp, r1
 800b906:	4620      	mov	r0, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	4b54      	ldr	r3, [pc, #336]	; (800ba5c <__ieee754_pow+0x3d4>)
 800b90c:	f7f4 fde4 	bl	80004d8 <__aeabi_dmul>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	a14c      	add	r1, pc, #304	; (adr r1, 800ba48 <__ieee754_pow+0x3c0>)
 800b916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b91a:	f7f4 fc25 	bl	8000168 <__aeabi_dsub>
 800b91e:	4622      	mov	r2, r4
 800b920:	462b      	mov	r3, r5
 800b922:	f7f4 fdd9 	bl	80004d8 <__aeabi_dmul>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	2000      	movs	r0, #0
 800b92c:	494c      	ldr	r1, [pc, #304]	; (800ba60 <__ieee754_pow+0x3d8>)
 800b92e:	f7f4 fc1b 	bl	8000168 <__aeabi_dsub>
 800b932:	4622      	mov	r2, r4
 800b934:	462b      	mov	r3, r5
 800b936:	4680      	mov	r8, r0
 800b938:	4689      	mov	r9, r1
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	f7f4 fdcb 	bl	80004d8 <__aeabi_dmul>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4640      	mov	r0, r8
 800b948:	4649      	mov	r1, r9
 800b94a:	f7f4 fdc5 	bl	80004d8 <__aeabi_dmul>
 800b94e:	a340      	add	r3, pc, #256	; (adr r3, 800ba50 <__ieee754_pow+0x3c8>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fdc0 	bl	80004d8 <__aeabi_dmul>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4650      	mov	r0, sl
 800b95e:	4659      	mov	r1, fp
 800b960:	f7f4 fc02 	bl	8000168 <__aeabi_dsub>
 800b964:	f04f 0a00 	mov.w	sl, #0
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4604      	mov	r4, r0
 800b96e:	460d      	mov	r5, r1
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f4 fbfa 	bl	800016c <__adddf3>
 800b978:	4632      	mov	r2, r6
 800b97a:	463b      	mov	r3, r7
 800b97c:	4650      	mov	r0, sl
 800b97e:	468b      	mov	fp, r1
 800b980:	f7f4 fbf2 	bl	8000168 <__aeabi_dsub>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4620      	mov	r0, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fbec 	bl	8000168 <__aeabi_dsub>
 800b990:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b998:	3b01      	subs	r3, #1
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f04f 0600 	mov.w	r6, #0
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	bf0c      	ite	eq
 800b9a6:	4b2f      	ldreq	r3, [pc, #188]	; (800ba64 <__ieee754_pow+0x3dc>)
 800b9a8:	4b2b      	ldrne	r3, [pc, #172]	; (800ba58 <__ieee754_pow+0x3d0>)
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	460d      	mov	r5, r1
 800b9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b2:	e9cd 2300 	strd	r2, r3, [sp]
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	f7f4 fbd5 	bl	8000168 <__aeabi_dsub>
 800b9be:	4652      	mov	r2, sl
 800b9c0:	465b      	mov	r3, fp
 800b9c2:	f7f4 fd89 	bl	80004d8 <__aeabi_dmul>
 800b9c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4689      	mov	r9, r1
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	f7f4 fd81 	bl	80004d8 <__aeabi_dmul>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4640      	mov	r0, r8
 800b9dc:	4649      	mov	r1, r9
 800b9de:	f7f4 fbc5 	bl	800016c <__adddf3>
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	463b      	mov	r3, r7
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	4659      	mov	r1, fp
 800b9ee:	f7f4 fd73 	bl	80004d8 <__aeabi_dmul>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ba02:	f7f4 fbb3 	bl	800016c <__adddf3>
 800ba06:	4b18      	ldr	r3, [pc, #96]	; (800ba68 <__ieee754_pow+0x3e0>)
 800ba08:	4682      	mov	sl, r0
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	460e      	mov	r6, r1
 800ba10:	f340 82e5 	ble.w	800bfde <__ieee754_pow+0x956>
 800ba14:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba18:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba1c:	4303      	orrs	r3, r0
 800ba1e:	f000 81df 	beq.w	800bde0 <__ieee754_pow+0x758>
 800ba22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba26:	2200      	movs	r2, #0
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f7f4 ffc7 	bl	80009bc <__aeabi_dcmplt>
 800ba2e:	3800      	subs	r0, #0
 800ba30:	bf18      	it	ne
 800ba32:	2001      	movne	r0, #1
 800ba34:	e72e      	b.n	800b894 <__ieee754_pow+0x20c>
 800ba36:	bf00      	nop
 800ba38:	60000000 	.word	0x60000000
 800ba3c:	3ff71547 	.word	0x3ff71547
 800ba40:	f85ddf44 	.word	0xf85ddf44
 800ba44:	3e54ae0b 	.word	0x3e54ae0b
 800ba48:	55555555 	.word	0x55555555
 800ba4c:	3fd55555 	.word	0x3fd55555
 800ba50:	652b82fe 	.word	0x652b82fe
 800ba54:	3ff71547 	.word	0x3ff71547
 800ba58:	3ff00000 	.word	0x3ff00000
 800ba5c:	3fd00000 	.word	0x3fd00000
 800ba60:	3fe00000 	.word	0x3fe00000
 800ba64:	bff00000 	.word	0xbff00000
 800ba68:	408fffff 	.word	0x408fffff
 800ba6c:	4bd2      	ldr	r3, [pc, #840]	; (800bdb8 <__ieee754_pow+0x730>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	402b      	ands	r3, r5
 800ba72:	b943      	cbnz	r3, 800ba86 <__ieee754_pow+0x3fe>
 800ba74:	4658      	mov	r0, fp
 800ba76:	4661      	mov	r1, ip
 800ba78:	4bd0      	ldr	r3, [pc, #832]	; (800bdbc <__ieee754_pow+0x734>)
 800ba7a:	f7f4 fd2d 	bl	80004d8 <__aeabi_dmul>
 800ba7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ba82:	4683      	mov	fp, r0
 800ba84:	460c      	mov	r4, r1
 800ba86:	1523      	asrs	r3, r4, #20
 800ba88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba8c:	4413      	add	r3, r2
 800ba8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba90:	4bcb      	ldr	r3, [pc, #812]	; (800bdc0 <__ieee754_pow+0x738>)
 800ba92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800baa0:	dd08      	ble.n	800bab4 <__ieee754_pow+0x42c>
 800baa2:	4bc8      	ldr	r3, [pc, #800]	; (800bdc4 <__ieee754_pow+0x73c>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	f340 8199 	ble.w	800bddc <__ieee754_pow+0x754>
 800baaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bab0:	3301      	adds	r3, #1
 800bab2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bab4:	2600      	movs	r6, #0
 800bab6:	00f3      	lsls	r3, r6, #3
 800bab8:	930d      	str	r3, [sp, #52]	; 0x34
 800baba:	4bc3      	ldr	r3, [pc, #780]	; (800bdc8 <__ieee754_pow+0x740>)
 800babc:	4658      	mov	r0, fp
 800babe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bac6:	4629      	mov	r1, r5
 800bac8:	461a      	mov	r2, r3
 800baca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bace:	4623      	mov	r3, r4
 800bad0:	f7f4 fb4a 	bl	8000168 <__aeabi_dsub>
 800bad4:	46da      	mov	sl, fp
 800bad6:	462b      	mov	r3, r5
 800bad8:	4652      	mov	r2, sl
 800bada:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bade:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bae2:	f7f4 fb43 	bl	800016c <__adddf3>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	2000      	movs	r0, #0
 800baec:	49b7      	ldr	r1, [pc, #732]	; (800bdcc <__ieee754_pow+0x744>)
 800baee:	f7f4 fe1d 	bl	800072c <__aeabi_ddiv>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bafa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bafe:	f7f4 fceb 	bl	80004d8 <__aeabi_dmul>
 800bb02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb06:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bb0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2200      	movs	r2, #0
 800bb12:	46ab      	mov	fp, r5
 800bb14:	106d      	asrs	r5, r5, #1
 800bb16:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bb24:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4614      	mov	r4, r2
 800bb2e:	461d      	mov	r5, r3
 800bb30:	f7f4 fcd2 	bl	80004d8 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb3c:	f7f4 fb14 	bl	8000168 <__aeabi_dsub>
 800bb40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f4 fb0c 	bl	8000168 <__aeabi_dsub>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4650      	mov	r0, sl
 800bb56:	4659      	mov	r1, fp
 800bb58:	f7f4 fb06 	bl	8000168 <__aeabi_dsub>
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	464b      	mov	r3, r9
 800bb60:	f7f4 fcba 	bl	80004d8 <__aeabi_dmul>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 fafc 	bl	8000168 <__aeabi_dsub>
 800bb70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb74:	f7f4 fcb0 	bl	80004d8 <__aeabi_dmul>
 800bb78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb80:	4610      	mov	r0, r2
 800bb82:	4619      	mov	r1, r3
 800bb84:	f7f4 fca8 	bl	80004d8 <__aeabi_dmul>
 800bb88:	a379      	add	r3, pc, #484	; (adr r3, 800bd70 <__ieee754_pow+0x6e8>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	4604      	mov	r4, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	f7f4 fca1 	bl	80004d8 <__aeabi_dmul>
 800bb96:	a378      	add	r3, pc, #480	; (adr r3, 800bd78 <__ieee754_pow+0x6f0>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	f7f4 fae6 	bl	800016c <__adddf3>
 800bba0:	4622      	mov	r2, r4
 800bba2:	462b      	mov	r3, r5
 800bba4:	f7f4 fc98 	bl	80004d8 <__aeabi_dmul>
 800bba8:	a375      	add	r3, pc, #468	; (adr r3, 800bd80 <__ieee754_pow+0x6f8>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fadd 	bl	800016c <__adddf3>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	f7f4 fc8f 	bl	80004d8 <__aeabi_dmul>
 800bbba:	a373      	add	r3, pc, #460	; (adr r3, 800bd88 <__ieee754_pow+0x700>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f7f4 fad4 	bl	800016c <__adddf3>
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f7f4 fc86 	bl	80004d8 <__aeabi_dmul>
 800bbcc:	a370      	add	r3, pc, #448	; (adr r3, 800bd90 <__ieee754_pow+0x708>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 facb 	bl	800016c <__adddf3>
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	462b      	mov	r3, r5
 800bbda:	f7f4 fc7d 	bl	80004d8 <__aeabi_dmul>
 800bbde:	a36e      	add	r3, pc, #440	; (adr r3, 800bd98 <__ieee754_pow+0x710>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fac2 	bl	800016c <__adddf3>
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4606      	mov	r6, r0
 800bbec:	460f      	mov	r7, r1
 800bbee:	462b      	mov	r3, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	f7f4 fc70 	bl	80004d8 <__aeabi_dmul>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	f7f4 fc6a 	bl	80004d8 <__aeabi_dmul>
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc0c:	4642      	mov	r2, r8
 800bc0e:	464b      	mov	r3, r9
 800bc10:	f7f4 faac 	bl	800016c <__adddf3>
 800bc14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc18:	f7f4 fc5e 	bl	80004d8 <__aeabi_dmul>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 faa4 	bl	800016c <__adddf3>
 800bc24:	4642      	mov	r2, r8
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 fc52 	bl	80004d8 <__aeabi_dmul>
 800bc34:	2200      	movs	r2, #0
 800bc36:	4b66      	ldr	r3, [pc, #408]	; (800bdd0 <__ieee754_pow+0x748>)
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	f7f4 fa96 	bl	800016c <__adddf3>
 800bc40:	4632      	mov	r2, r6
 800bc42:	463b      	mov	r3, r7
 800bc44:	f7f4 fa92 	bl	800016c <__adddf3>
 800bc48:	2400      	movs	r4, #0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fc40 	bl	80004d8 <__aeabi_dmul>
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	4b5b      	ldr	r3, [pc, #364]	; (800bdd0 <__ieee754_pow+0x748>)
 800bc64:	f7f4 fa80 	bl	8000168 <__aeabi_dsub>
 800bc68:	4652      	mov	r2, sl
 800bc6a:	465b      	mov	r3, fp
 800bc6c:	f7f4 fa7c 	bl	8000168 <__aeabi_dsub>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fa76 	bl	8000168 <__aeabi_dsub>
 800bc7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc80:	f7f4 fc2a 	bl	80004d8 <__aeabi_dmul>
 800bc84:	4622      	mov	r2, r4
 800bc86:	4606      	mov	r6, r0
 800bc88:	460f      	mov	r7, r1
 800bc8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc8e:	462b      	mov	r3, r5
 800bc90:	f7f4 fc22 	bl	80004d8 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4630      	mov	r0, r6
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	f7f4 fa66 	bl	800016c <__adddf3>
 800bca0:	2400      	movs	r4, #0
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 fa5d 	bl	800016c <__adddf3>
 800bcb2:	a33b      	add	r3, pc, #236	; (adr r3, 800bda0 <__ieee754_pow+0x718>)
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	460d      	mov	r5, r1
 800bcbc:	f7f4 fc0c 	bl	80004d8 <__aeabi_dmul>
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcc8:	4620      	mov	r0, r4
 800bcca:	4629      	mov	r1, r5
 800bccc:	f7f4 fa4c 	bl	8000168 <__aeabi_dsub>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fa46 	bl	8000168 <__aeabi_dsub>
 800bcdc:	a332      	add	r3, pc, #200	; (adr r3, 800bda8 <__ieee754_pow+0x720>)
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	f7f4 fbf9 	bl	80004d8 <__aeabi_dmul>
 800bce6:	a332      	add	r3, pc, #200	; (adr r3, 800bdb0 <__ieee754_pow+0x728>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	4606      	mov	r6, r0
 800bcee:	460f      	mov	r7, r1
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f4 fbf0 	bl	80004d8 <__aeabi_dmul>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 fa34 	bl	800016c <__adddf3>
 800bd04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd06:	4b33      	ldr	r3, [pc, #204]	; (800bdd4 <__ieee754_pow+0x74c>)
 800bd08:	f04f 0a00 	mov.w	sl, #0
 800bd0c:	4413      	add	r3, r2
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fa2b 	bl	800016c <__adddf3>
 800bd16:	4680      	mov	r8, r0
 800bd18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	f7f4 fb72 	bl	8000404 <__aeabi_i2d>
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd26:	4b2c      	ldr	r3, [pc, #176]	; (800bdd8 <__ieee754_pow+0x750>)
 800bd28:	4413      	add	r3, r2
 800bd2a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bd2e:	4642      	mov	r2, r8
 800bd30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd34:	464b      	mov	r3, r9
 800bd36:	f7f4 fa19 	bl	800016c <__adddf3>
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	463b      	mov	r3, r7
 800bd3e:	f7f4 fa15 	bl	800016c <__adddf3>
 800bd42:	4622      	mov	r2, r4
 800bd44:	462b      	mov	r3, r5
 800bd46:	f7f4 fa11 	bl	800016c <__adddf3>
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	4650      	mov	r0, sl
 800bd50:	468b      	mov	fp, r1
 800bd52:	f7f4 fa09 	bl	8000168 <__aeabi_dsub>
 800bd56:	4632      	mov	r2, r6
 800bd58:	463b      	mov	r3, r7
 800bd5a:	f7f4 fa05 	bl	8000168 <__aeabi_dsub>
 800bd5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd62:	f7f4 fa01 	bl	8000168 <__aeabi_dsub>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	e60d      	b.n	800b98c <__ieee754_pow+0x304>
 800bd70:	4a454eef 	.word	0x4a454eef
 800bd74:	3fca7e28 	.word	0x3fca7e28
 800bd78:	93c9db65 	.word	0x93c9db65
 800bd7c:	3fcd864a 	.word	0x3fcd864a
 800bd80:	a91d4101 	.word	0xa91d4101
 800bd84:	3fd17460 	.word	0x3fd17460
 800bd88:	518f264d 	.word	0x518f264d
 800bd8c:	3fd55555 	.word	0x3fd55555
 800bd90:	db6fabff 	.word	0xdb6fabff
 800bd94:	3fdb6db6 	.word	0x3fdb6db6
 800bd98:	33333303 	.word	0x33333303
 800bd9c:	3fe33333 	.word	0x3fe33333
 800bda0:	e0000000 	.word	0xe0000000
 800bda4:	3feec709 	.word	0x3feec709
 800bda8:	dc3a03fd 	.word	0xdc3a03fd
 800bdac:	3feec709 	.word	0x3feec709
 800bdb0:	145b01f5 	.word	0x145b01f5
 800bdb4:	be3e2fe0 	.word	0xbe3e2fe0
 800bdb8:	7ff00000 	.word	0x7ff00000
 800bdbc:	43400000 	.word	0x43400000
 800bdc0:	0003988e 	.word	0x0003988e
 800bdc4:	000bb679 	.word	0x000bb679
 800bdc8:	0801e128 	.word	0x0801e128
 800bdcc:	3ff00000 	.word	0x3ff00000
 800bdd0:	40080000 	.word	0x40080000
 800bdd4:	0801e148 	.word	0x0801e148
 800bdd8:	0801e138 	.word	0x0801e138
 800bddc:	2601      	movs	r6, #1
 800bdde:	e66a      	b.n	800bab6 <__ieee754_pow+0x42e>
 800bde0:	a39d      	add	r3, pc, #628	; (adr r3, 800c058 <__ieee754_pow+0x9d0>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 f9bf 	bl	800016c <__adddf3>
 800bdee:	4622      	mov	r2, r4
 800bdf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	4650      	mov	r0, sl
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	f7f4 f9b5 	bl	8000168 <__aeabi_dsub>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be06:	f7f4 fdf7 	bl	80009f8 <__aeabi_dcmpgt>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f47f ae09 	bne.w	800ba22 <__ieee754_pow+0x39a>
 800be10:	4aa3      	ldr	r2, [pc, #652]	; (800c0a0 <__ieee754_pow+0xa18>)
 800be12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800be16:	4293      	cmp	r3, r2
 800be18:	f340 8101 	ble.w	800c01e <__ieee754_pow+0x996>
 800be1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be20:	2000      	movs	r0, #0
 800be22:	151b      	asrs	r3, r3, #20
 800be24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be28:	fa4a f303 	asr.w	r3, sl, r3
 800be2c:	4433      	add	r3, r6
 800be2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be32:	4f9c      	ldr	r7, [pc, #624]	; (800c0a4 <__ieee754_pow+0xa1c>)
 800be34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be38:	4117      	asrs	r7, r2
 800be3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be3e:	ea23 0107 	bic.w	r1, r3, r7
 800be42:	f1c2 0214 	rsb	r2, r2, #20
 800be46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be4a:	460b      	mov	r3, r1
 800be4c:	fa4a fa02 	asr.w	sl, sl, r2
 800be50:	2e00      	cmp	r6, #0
 800be52:	4602      	mov	r2, r0
 800be54:	4629      	mov	r1, r5
 800be56:	4620      	mov	r0, r4
 800be58:	bfb8      	it	lt
 800be5a:	f1ca 0a00 	rsblt	sl, sl, #0
 800be5e:	f7f4 f983 	bl	8000168 <__aeabi_dsub>
 800be62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be6a:	2400      	movs	r4, #0
 800be6c:	4642      	mov	r2, r8
 800be6e:	464b      	mov	r3, r9
 800be70:	f7f4 f97c 	bl	800016c <__adddf3>
 800be74:	a37a      	add	r3, pc, #488	; (adr r3, 800c060 <__ieee754_pow+0x9d8>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	4620      	mov	r0, r4
 800be7c:	460d      	mov	r5, r1
 800be7e:	f7f4 fb2b 	bl	80004d8 <__aeabi_dmul>
 800be82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be86:	4606      	mov	r6, r0
 800be88:	460f      	mov	r7, r1
 800be8a:	4620      	mov	r0, r4
 800be8c:	4629      	mov	r1, r5
 800be8e:	f7f4 f96b 	bl	8000168 <__aeabi_dsub>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4640      	mov	r0, r8
 800be98:	4649      	mov	r1, r9
 800be9a:	f7f4 f965 	bl	8000168 <__aeabi_dsub>
 800be9e:	a372      	add	r3, pc, #456	; (adr r3, 800c068 <__ieee754_pow+0x9e0>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 fb18 	bl	80004d8 <__aeabi_dmul>
 800bea8:	a371      	add	r3, pc, #452	; (adr r3, 800c070 <__ieee754_pow+0x9e8>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	4680      	mov	r8, r0
 800beb0:	4689      	mov	r9, r1
 800beb2:	4620      	mov	r0, r4
 800beb4:	4629      	mov	r1, r5
 800beb6:	f7f4 fb0f 	bl	80004d8 <__aeabi_dmul>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 f953 	bl	800016c <__adddf3>
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 f94b 	bl	800016c <__adddf3>
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	4680      	mov	r8, r0
 800bedc:	4689      	mov	r9, r1
 800bede:	f7f4 f943 	bl	8000168 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	f7f4 f93d 	bl	8000168 <__aeabi_dsub>
 800beee:	4642      	mov	r2, r8
 800bef0:	4606      	mov	r6, r0
 800bef2:	460f      	mov	r7, r1
 800bef4:	464b      	mov	r3, r9
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 faed 	bl	80004d8 <__aeabi_dmul>
 800befe:	a35e      	add	r3, pc, #376	; (adr r3, 800c078 <__ieee754_pow+0x9f0>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	4604      	mov	r4, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	f7f4 fae6 	bl	80004d8 <__aeabi_dmul>
 800bf0c:	a35c      	add	r3, pc, #368	; (adr r3, 800c080 <__ieee754_pow+0x9f8>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f929 	bl	8000168 <__aeabi_dsub>
 800bf16:	4622      	mov	r2, r4
 800bf18:	462b      	mov	r3, r5
 800bf1a:	f7f4 fadd 	bl	80004d8 <__aeabi_dmul>
 800bf1e:	a35a      	add	r3, pc, #360	; (adr r3, 800c088 <__ieee754_pow+0xa00>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 f922 	bl	800016c <__adddf3>
 800bf28:	4622      	mov	r2, r4
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	f7f4 fad4 	bl	80004d8 <__aeabi_dmul>
 800bf30:	a357      	add	r3, pc, #348	; (adr r3, 800c090 <__ieee754_pow+0xa08>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f917 	bl	8000168 <__aeabi_dsub>
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	f7f4 facb 	bl	80004d8 <__aeabi_dmul>
 800bf42:	a355      	add	r3, pc, #340	; (adr r3, 800c098 <__ieee754_pow+0xa10>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f910 	bl	800016c <__adddf3>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	462b      	mov	r3, r5
 800bf50:	f7f4 fac2 	bl	80004d8 <__aeabi_dmul>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 f904 	bl	8000168 <__aeabi_dsub>
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fab4 	bl	80004d8 <__aeabi_dmul>
 800bf70:	2200      	movs	r2, #0
 800bf72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f7f4 f8f3 	bl	8000168 <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf8a:	f7f4 fbcf 	bl	800072c <__aeabi_ddiv>
 800bf8e:	4632      	mov	r2, r6
 800bf90:	4604      	mov	r4, r0
 800bf92:	460d      	mov	r5, r1
 800bf94:	463b      	mov	r3, r7
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 fa9d 	bl	80004d8 <__aeabi_dmul>
 800bf9e:	4632      	mov	r2, r6
 800bfa0:	463b      	mov	r3, r7
 800bfa2:	f7f4 f8e3 	bl	800016c <__adddf3>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4620      	mov	r0, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7f4 f8db 	bl	8000168 <__aeabi_dsub>
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	f7f4 f8d7 	bl	8000168 <__aeabi_dsub>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	4939      	ldr	r1, [pc, #228]	; (800c0a8 <__ieee754_pow+0xa20>)
 800bfc2:	f7f4 f8d1 	bl	8000168 <__aeabi_dsub>
 800bfc6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bfca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bfce:	da29      	bge.n	800c024 <__ieee754_pow+0x99c>
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	f000 f955 	bl	800c280 <scalbn>
 800bfd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfda:	f7ff bbfe 	b.w	800b7da <__ieee754_pow+0x152>
 800bfde:	4b33      	ldr	r3, [pc, #204]	; (800c0ac <__ieee754_pow+0xa24>)
 800bfe0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bfe4:	429f      	cmp	r7, r3
 800bfe6:	f77f af13 	ble.w	800be10 <__ieee754_pow+0x788>
 800bfea:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <__ieee754_pow+0xa28>)
 800bfec:	440b      	add	r3, r1
 800bfee:	4303      	orrs	r3, r0
 800bff0:	d009      	beq.n	800c006 <__ieee754_pow+0x97e>
 800bff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bff6:	2200      	movs	r2, #0
 800bff8:	2300      	movs	r3, #0
 800bffa:	f7f4 fcdf 	bl	80009bc <__aeabi_dcmplt>
 800bffe:	3800      	subs	r0, #0
 800c000:	bf18      	it	ne
 800c002:	2001      	movne	r0, #1
 800c004:	e453      	b.n	800b8ae <__ieee754_pow+0x226>
 800c006:	4622      	mov	r2, r4
 800c008:	462b      	mov	r3, r5
 800c00a:	f7f4 f8ad 	bl	8000168 <__aeabi_dsub>
 800c00e:	4642      	mov	r2, r8
 800c010:	464b      	mov	r3, r9
 800c012:	f7f4 fce7 	bl	80009e4 <__aeabi_dcmpge>
 800c016:	2800      	cmp	r0, #0
 800c018:	f43f aefa 	beq.w	800be10 <__ieee754_pow+0x788>
 800c01c:	e7e9      	b.n	800bff2 <__ieee754_pow+0x96a>
 800c01e:	f04f 0a00 	mov.w	sl, #0
 800c022:	e720      	b.n	800be66 <__ieee754_pow+0x7de>
 800c024:	4621      	mov	r1, r4
 800c026:	e7d6      	b.n	800bfd6 <__ieee754_pow+0x94e>
 800c028:	f04f 0b00 	mov.w	fp, #0
 800c02c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c0a8 <__ieee754_pow+0xa20>
 800c030:	f7ff bbba 	b.w	800b7a8 <__ieee754_pow+0x120>
 800c034:	f04f 0b00 	mov.w	fp, #0
 800c038:	f04f 0c00 	mov.w	ip, #0
 800c03c:	f7ff bbb4 	b.w	800b7a8 <__ieee754_pow+0x120>
 800c040:	4640      	mov	r0, r8
 800c042:	4649      	mov	r1, r9
 800c044:	f7ff bb3d 	b.w	800b6c2 <__ieee754_pow+0x3a>
 800c048:	9200      	str	r2, [sp, #0]
 800c04a:	f7ff bb89 	b.w	800b760 <__ieee754_pow+0xd8>
 800c04e:	2300      	movs	r3, #0
 800c050:	f7ff bb73 	b.w	800b73a <__ieee754_pow+0xb2>
 800c054:	f3af 8000 	nop.w
 800c058:	652b82fe 	.word	0x652b82fe
 800c05c:	3c971547 	.word	0x3c971547
 800c060:	00000000 	.word	0x00000000
 800c064:	3fe62e43 	.word	0x3fe62e43
 800c068:	fefa39ef 	.word	0xfefa39ef
 800c06c:	3fe62e42 	.word	0x3fe62e42
 800c070:	0ca86c39 	.word	0x0ca86c39
 800c074:	be205c61 	.word	0xbe205c61
 800c078:	72bea4d0 	.word	0x72bea4d0
 800c07c:	3e663769 	.word	0x3e663769
 800c080:	c5d26bf1 	.word	0xc5d26bf1
 800c084:	3ebbbd41 	.word	0x3ebbbd41
 800c088:	af25de2c 	.word	0xaf25de2c
 800c08c:	3f11566a 	.word	0x3f11566a
 800c090:	16bebd93 	.word	0x16bebd93
 800c094:	3f66c16c 	.word	0x3f66c16c
 800c098:	5555553e 	.word	0x5555553e
 800c09c:	3fc55555 	.word	0x3fc55555
 800c0a0:	3fe00000 	.word	0x3fe00000
 800c0a4:	000fffff 	.word	0x000fffff
 800c0a8:	3ff00000 	.word	0x3ff00000
 800c0ac:	4090cbff 	.word	0x4090cbff
 800c0b0:	3f6f3400 	.word	0x3f6f3400

0800c0b4 <__ieee754_sqrt>:
 800c0b4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800c210 <__ieee754_sqrt+0x15c>
 800c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0bc:	ea3c 0c01 	bics.w	ip, ip, r1
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	460a      	mov	r2, r1
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	d10f      	bne.n	800c0ee <__ieee754_sqrt+0x3a>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	f7f4 fa01 	bl	80004d8 <__aeabi_dmul>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4629      	mov	r1, r5
 800c0de:	f7f4 f845 	bl	800016c <__adddf3>
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	dc0e      	bgt.n	800c110 <__ieee754_sqrt+0x5c>
 800c0f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c0f6:	ea5c 0707 	orrs.w	r7, ip, r7
 800c0fa:	d0f4      	beq.n	800c0e6 <__ieee754_sqrt+0x32>
 800c0fc:	b141      	cbz	r1, 800c110 <__ieee754_sqrt+0x5c>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	f7f4 f831 	bl	8000168 <__aeabi_dsub>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	f7f4 fb0f 	bl	800072c <__aeabi_ddiv>
 800c10e:	e7e8      	b.n	800c0e2 <__ieee754_sqrt+0x2e>
 800c110:	1521      	asrs	r1, r4, #20
 800c112:	d075      	beq.n	800c200 <__ieee754_sqrt+0x14c>
 800c114:	07cc      	lsls	r4, r1, #31
 800c116:	f04f 0400 	mov.w	r4, #0
 800c11a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c11e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800c122:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c126:	bf5e      	ittt	pl
 800c128:	0fd9      	lsrpl	r1, r3, #31
 800c12a:	005b      	lslpl	r3, r3, #1
 800c12c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800c130:	0fd9      	lsrs	r1, r3, #31
 800c132:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c136:	2516      	movs	r5, #22
 800c138:	4620      	mov	r0, r4
 800c13a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c13e:	107f      	asrs	r7, r7, #1
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	1846      	adds	r6, r0, r1
 800c144:	4296      	cmp	r6, r2
 800c146:	bfde      	ittt	le
 800c148:	1b92      	suble	r2, r2, r6
 800c14a:	1870      	addle	r0, r6, r1
 800c14c:	1864      	addle	r4, r4, r1
 800c14e:	0052      	lsls	r2, r2, #1
 800c150:	3d01      	subs	r5, #1
 800c152:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c156:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c15a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c15e:	d1f0      	bne.n	800c142 <__ieee754_sqrt+0x8e>
 800c160:	4629      	mov	r1, r5
 800c162:	f04f 0e20 	mov.w	lr, #32
 800c166:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c16a:	4282      	cmp	r2, r0
 800c16c:	eb06 0c05 	add.w	ip, r6, r5
 800c170:	dc02      	bgt.n	800c178 <__ieee754_sqrt+0xc4>
 800c172:	d113      	bne.n	800c19c <__ieee754_sqrt+0xe8>
 800c174:	459c      	cmp	ip, r3
 800c176:	d811      	bhi.n	800c19c <__ieee754_sqrt+0xe8>
 800c178:	f1bc 0f00 	cmp.w	ip, #0
 800c17c:	eb0c 0506 	add.w	r5, ip, r6
 800c180:	da43      	bge.n	800c20a <__ieee754_sqrt+0x156>
 800c182:	2d00      	cmp	r5, #0
 800c184:	db41      	blt.n	800c20a <__ieee754_sqrt+0x156>
 800c186:	f100 0801 	add.w	r8, r0, #1
 800c18a:	1a12      	subs	r2, r2, r0
 800c18c:	4640      	mov	r0, r8
 800c18e:	459c      	cmp	ip, r3
 800c190:	bf88      	it	hi
 800c192:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c196:	eba3 030c 	sub.w	r3, r3, ip
 800c19a:	4431      	add	r1, r6
 800c19c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c1a0:	f1be 0e01 	subs.w	lr, lr, #1
 800c1a4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800c1a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1b0:	d1db      	bne.n	800c16a <__ieee754_sqrt+0xb6>
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	d006      	beq.n	800c1c4 <__ieee754_sqrt+0x110>
 800c1b6:	1c48      	adds	r0, r1, #1
 800c1b8:	bf0b      	itete	eq
 800c1ba:	4671      	moveq	r1, lr
 800c1bc:	3101      	addne	r1, #1
 800c1be:	3401      	addeq	r4, #1
 800c1c0:	f021 0101 	bicne.w	r1, r1, #1
 800c1c4:	1063      	asrs	r3, r4, #1
 800c1c6:	0849      	lsrs	r1, r1, #1
 800c1c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c1cc:	07e2      	lsls	r2, r4, #31
 800c1ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c1d2:	bf48      	it	mi
 800c1d4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c1d8:	460e      	mov	r6, r1
 800c1da:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c1de:	e782      	b.n	800c0e6 <__ieee754_sqrt+0x32>
 800c1e0:	0ada      	lsrs	r2, r3, #11
 800c1e2:	3815      	subs	r0, #21
 800c1e4:	055b      	lsls	r3, r3, #21
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	d0fa      	beq.n	800c1e0 <__ieee754_sqrt+0x12c>
 800c1ea:	02d5      	lsls	r5, r2, #11
 800c1ec:	d50a      	bpl.n	800c204 <__ieee754_sqrt+0x150>
 800c1ee:	f1c1 0420 	rsb	r4, r1, #32
 800c1f2:	fa23 f404 	lsr.w	r4, r3, r4
 800c1f6:	1e4d      	subs	r5, r1, #1
 800c1f8:	408b      	lsls	r3, r1
 800c1fa:	4322      	orrs	r2, r4
 800c1fc:	1b41      	subs	r1, r0, r5
 800c1fe:	e789      	b.n	800c114 <__ieee754_sqrt+0x60>
 800c200:	4608      	mov	r0, r1
 800c202:	e7f0      	b.n	800c1e6 <__ieee754_sqrt+0x132>
 800c204:	0052      	lsls	r2, r2, #1
 800c206:	3101      	adds	r1, #1
 800c208:	e7ef      	b.n	800c1ea <__ieee754_sqrt+0x136>
 800c20a:	4680      	mov	r8, r0
 800c20c:	e7bd      	b.n	800c18a <__ieee754_sqrt+0xd6>
 800c20e:	bf00      	nop
 800c210:	7ff00000 	.word	0x7ff00000

0800c214 <with_errno>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	4616      	mov	r6, r2
 800c21c:	f7fa fcde 	bl	8006bdc <__errno>
 800c220:	4629      	mov	r1, r5
 800c222:	6006      	str	r6, [r0, #0]
 800c224:	4620      	mov	r0, r4
 800c226:	bd70      	pop	{r4, r5, r6, pc}

0800c228 <xflow>:
 800c228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c22a:	4615      	mov	r5, r2
 800c22c:	461c      	mov	r4, r3
 800c22e:	b180      	cbz	r0, 800c252 <xflow+0x2a>
 800c230:	4610      	mov	r0, r2
 800c232:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c236:	e9cd 0100 	strd	r0, r1, [sp]
 800c23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c23e:	4628      	mov	r0, r5
 800c240:	4621      	mov	r1, r4
 800c242:	f7f4 f949 	bl	80004d8 <__aeabi_dmul>
 800c246:	2222      	movs	r2, #34	; 0x22
 800c248:	b003      	add	sp, #12
 800c24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c24e:	f7ff bfe1 	b.w	800c214 <with_errno>
 800c252:	4610      	mov	r0, r2
 800c254:	4619      	mov	r1, r3
 800c256:	e7ee      	b.n	800c236 <xflow+0xe>

0800c258 <__math_uflow>:
 800c258:	2200      	movs	r2, #0
 800c25a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c25e:	f7ff bfe3 	b.w	800c228 <xflow>

0800c262 <__math_oflow>:
 800c262:	2200      	movs	r2, #0
 800c264:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c268:	f7ff bfde 	b.w	800c228 <xflow>

0800c26c <fabs>:
 800c26c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c270:	4770      	bx	lr

0800c272 <finite>:
 800c272:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c276:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c27a:	0fc0      	lsrs	r0, r0, #31
 800c27c:	4770      	bx	lr
	...

0800c280 <scalbn>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c286:	4604      	mov	r4, r0
 800c288:	460d      	mov	r5, r1
 800c28a:	4617      	mov	r7, r2
 800c28c:	460b      	mov	r3, r1
 800c28e:	b996      	cbnz	r6, 800c2b6 <scalbn+0x36>
 800c290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c294:	4303      	orrs	r3, r0
 800c296:	d039      	beq.n	800c30c <scalbn+0x8c>
 800c298:	4b33      	ldr	r3, [pc, #204]	; (800c368 <scalbn+0xe8>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f4 f91c 	bl	80004d8 <__aeabi_dmul>
 800c2a0:	4b32      	ldr	r3, [pc, #200]	; (800c36c <scalbn+0xec>)
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	429f      	cmp	r7, r3
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	da0f      	bge.n	800c2ca <scalbn+0x4a>
 800c2aa:	a32b      	add	r3, pc, #172	; (adr r3, 800c358 <scalbn+0xd8>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f4 f912 	bl	80004d8 <__aeabi_dmul>
 800c2b4:	e006      	b.n	800c2c4 <scalbn+0x44>
 800c2b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c2ba:	4296      	cmp	r6, r2
 800c2bc:	d10a      	bne.n	800c2d4 <scalbn+0x54>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	f7f3 ff54 	bl	800016c <__adddf3>
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	e020      	b.n	800c30c <scalbn+0x8c>
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c2d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c2d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c2d8:	19b9      	adds	r1, r7, r6
 800c2da:	4291      	cmp	r1, r2
 800c2dc:	dd0e      	ble.n	800c2fc <scalbn+0x7c>
 800c2de:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c2e2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c2e6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c2ea:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c2ee:	4820      	ldr	r0, [pc, #128]	; (800c370 <scalbn+0xf0>)
 800c2f0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c2f4:	a31a      	add	r3, pc, #104	; (adr r3, 800c360 <scalbn+0xe0>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	e7d9      	b.n	800c2b0 <scalbn+0x30>
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	dd08      	ble.n	800c312 <scalbn+0x92>
 800c300:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c308:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c312:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c316:	da12      	bge.n	800c33e <scalbn+0xbe>
 800c318:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c31c:	429f      	cmp	r7, r3
 800c31e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c322:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c326:	dcdc      	bgt.n	800c2e2 <scalbn+0x62>
 800c328:	a30b      	add	r3, pc, #44	; (adr r3, 800c358 <scalbn+0xd8>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c332:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c336:	480f      	ldr	r0, [pc, #60]	; (800c374 <scalbn+0xf4>)
 800c338:	f041 011f 	orr.w	r1, r1, #31
 800c33c:	e7b8      	b.n	800c2b0 <scalbn+0x30>
 800c33e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c342:	3136      	adds	r1, #54	; 0x36
 800c344:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c348:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	2200      	movs	r2, #0
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <scalbn+0xf8>)
 800c354:	e7ac      	b.n	800c2b0 <scalbn+0x30>
 800c356:	bf00      	nop
 800c358:	c2f8f359 	.word	0xc2f8f359
 800c35c:	01a56e1f 	.word	0x01a56e1f
 800c360:	8800759c 	.word	0x8800759c
 800c364:	7e37e43c 	.word	0x7e37e43c
 800c368:	43500000 	.word	0x43500000
 800c36c:	ffff3cb0 	.word	0xffff3cb0
 800c370:	8800759c 	.word	0x8800759c
 800c374:	c2f8f359 	.word	0xc2f8f359
 800c378:	3c900000 	.word	0x3c900000

0800c37c <_init>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	bf00      	nop
 800c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c382:	bc08      	pop	{r3}
 800c384:	469e      	mov	lr, r3
 800c386:	4770      	bx	lr

0800c388 <_fini>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr
