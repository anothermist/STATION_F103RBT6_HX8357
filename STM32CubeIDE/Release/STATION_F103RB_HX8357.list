
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ddc  0800d7c8  0800d7c8  0001d7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f5a4  0801f5a4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801f5a4  0801f5a4  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f5a4  0801f5a4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5a4  0801f5a4  0002f5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f5a8  0801f5a8  0002f5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801f5ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  200001e0  0801f78c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0801f78c  000308fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd21  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0004ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001f133  00000000  00000000  00051c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00070d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000bb90  00000000  00000000  00070dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001305c  00000000  00000000  0007c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f5a  00000000  00000000  0008f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0011891e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc4  00000000  00000000  00118968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018eb0  00000000  00000000  0011a72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d7b0 	.word	0x0800d7b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d7b0 	.word	0x0800d7b0

08000150 <LCD_Send_Cmd>:
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
	if ((val&0x01)==1)        DB_00_S else DB_00_R
}

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000154:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000158:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800015c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000160:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000164:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000168:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800016c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <LCD_Send_Cmd+0xb4>)
 8000172:	4a25      	ldr	r2, [pc, #148]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000174:	4f25      	ldr	r7, [pc, #148]	; (800020c <LCD_Send_Cmd+0xbc>)
 8000176:	6139      	str	r1, [r7, #16]
 8000178:	f8c7 8010 	str.w	r8, [r7, #16]
 800017c:	6116      	str	r6, [r2, #16]
 800017e:	6111      	str	r1, [r2, #16]
 8000180:	611c      	str	r4, [r3, #16]
 8000182:	611d      	str	r5, [r3, #16]
 8000184:	611e      	str	r6, [r3, #16]
 8000186:	6119      	str	r1, [r3, #16]
 8000188:	f8c3 e010 	str.w	lr, [r3, #16]
 800018c:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000190:	0943      	lsrs	r3, r0, #5
 8000192:	6115      	str	r5, [r2, #16]
 8000194:	6114      	str	r4, [r2, #16]
 8000196:	d02e      	beq.n	80001f6 <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 8000198:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800019a:	0903      	lsrs	r3, r0, #4
 800019c:	2b02      	cmp	r3, #2
 800019e:	6111      	str	r1, [r2, #16]
 80001a0:	d12c      	bne.n	80001fc <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80001a6:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001a8:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001aa:	bf4c      	ite	mi
 80001ac:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ae:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001b4:	0741      	lsls	r1, r0, #29
 80001b6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001b8:	bf4c      	ite	mi
 80001ba:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001bc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80001c2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80001c6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001d2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80001d4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80001d6:	bf4c      	ite	mi
 80001d8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001da:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001e4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <LCD_Send_Cmd+0xbc>)
 80001ec:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001ee:	6119      	str	r1, [r3, #16]
 80001f0:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 80001f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fa:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001fc:	2220      	movs	r2, #32
 80001fe:	4b02      	ldr	r3, [pc, #8]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000200:	611a      	str	r2, [r3, #16]
  }
}
 8000202:	e7d1      	b.n	80001a8 <LCD_Send_Cmd+0x58>
 8000204:	40011000 	.word	0x40011000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000214:	2101      	movs	r1, #1
 8000216:	4b3f      	ldr	r3, [pc, #252]	; (8000314 <LCD_Send_Dat+0x104>)
 8000218:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800021a:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800021c:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800021e:	bf14      	ite	ne
 8000220:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000222:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 8000226:	4b3c      	ldr	r3, [pc, #240]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000228:	0441      	lsls	r1, r0, #17
 800022a:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800022c:	bf4c      	ite	mi
 800022e:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000230:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <LCD_Send_Dat+0x108>)
 8000236:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000238:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800023a:	bf4c      	ite	mi
 800023c:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800023e:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000242:	4b36      	ldr	r3, [pc, #216]	; (800031c <LCD_Send_Dat+0x10c>)
 8000244:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8000246:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 8000248:	bf4c      	ite	mi
 800024a:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800024c:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000250:	4b32      	ldr	r3, [pc, #200]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000252:	0501      	lsls	r1, r0, #20
 8000254:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000256:	bf4c      	ite	mi
 8000258:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800025a:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <LCD_Send_Dat+0x10c>)
 8000260:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000262:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000264:	bf4c      	ite	mi
 8000266:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000268:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <LCD_Send_Dat+0x10c>)
 800026e:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000270:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000272:	bf4c      	ite	mi
 8000274:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000278:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800027e:	05c1      	lsls	r1, r0, #23
 8000280:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000282:	bf4c      	ite	mi
 8000284:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000288:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <LCD_Send_Dat+0x10c>)
 800028e:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000290:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000292:	bf4c      	ite	mi
 8000294:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000296:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800029a:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <LCD_Send_Dat+0x108>)
 800029c:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800029e:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80002a0:	bf4c      	ite	mi
 80002a2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002aa:	0681      	lsls	r1, r0, #26
 80002ac:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ae:	bf4c      	ite	mi
 80002b0:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b2:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <LCD_Send_Dat+0x108>)
 80002b8:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80002ba:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80002bc:	bf4c      	ite	mi
 80002be:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <LCD_Send_Dat+0x108>)
 80002c6:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002c8:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002ca:	bf4c      	ite	mi
 80002cc:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ce:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002d4:	0741      	lsls	r1, r0, #29
 80002d6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002d8:	bf4c      	ite	mi
 80002da:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002dc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80002e2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002e4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002e6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002e8:	bf4c      	ite	mi
 80002ea:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ec:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LCD_Send_Dat+0x10c>)
 80002f2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002f4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002f6:	bf4c      	ite	mi
 80002f8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002fa:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <LCD_Send_Dat+0x10c>)
 8000300:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000304:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000306:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030a:	4b02      	ldr	r3, [pc, #8]	; (8000314 <LCD_Send_Dat+0x104>)
 800030c:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800030e:	6119      	str	r1, [r3, #16]
 8000310:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40010800 	.word	0x40010800
 800031c:	40011000 	.word	0x40011000

08000320 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000324:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000328:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800032c:	468b      	mov	fp, r1
 800032e:	49ab      	ldr	r1, [pc, #684]	; (80005dc <LCD_Window+0x2bc>)
 8000330:	b085      	sub	sp, #20
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000338:	610d      	str	r5, [r1, #16]
 800033a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800033e:	610c      	str	r4, [r1, #16]
 8000340:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000344:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8000348:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800034c:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000350:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000354:	4ba2      	ldr	r3, [pc, #648]	; (80005e0 <LCD_Window+0x2c0>)
 8000356:	4696      	mov	lr, r2
 8000358:	4aa2      	ldr	r2, [pc, #648]	; (80005e4 <LCD_Window+0x2c4>)
 800035a:	6116      	str	r6, [r2, #16]
 800035c:	6115      	str	r5, [r2, #16]
 800035e:	f8c3 c010 	str.w	ip, [r3, #16]
 8000362:	611f      	str	r7, [r3, #16]
 8000364:	611e      	str	r6, [r3, #16]
 8000366:	611d      	str	r5, [r3, #16]
 8000368:	f8c3 9010 	str.w	r9, [r3, #16]
 800036c:	f8c3 a010 	str.w	sl, [r3, #16]
 8000370:	6117      	str	r7, [r2, #16]
 8000372:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000376:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800037c:	2440      	movs	r4, #64	; 0x40
 800037e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000380:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000384:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000386:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800038e:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000392:	611c      	str	r4, [r3, #16]
 8000394:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000396:	f8c1 8010 	str.w	r8, [r1, #16]
 800039a:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800039e:	f8c1 8010 	str.w	r8, [r1, #16]
 80003a2:	f04f 0801 	mov.w	r8, #1
 80003a6:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003aa:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80003ae:	f8c1 8010 	str.w	r8, [r1, #16]
 80003b2:	6116      	str	r6, [r2, #16]
 80003b4:	6115      	str	r5, [r2, #16]
 80003b6:	f8c3 c010 	str.w	ip, [r3, #16]
 80003ba:	611f      	str	r7, [r3, #16]
 80003bc:	611e      	str	r6, [r3, #16]
 80003be:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80003c0:	fa5f f58e 	uxtb.w	r5, lr
 80003c4:	f8c3 9010 	str.w	r9, [r3, #16]
 80003c8:	f8c3 a010 	str.w	sl, [r3, #16]
 80003cc:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003ce:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	bf18      	it	ne
 80003d2:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80003d4:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80003d8:	bf14      	ite	ne
 80003da:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003dc:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003de:	0667      	lsls	r7, r4, #25
 80003e0:	bf54      	ite	pl
 80003e2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80003e6:	2508      	movmi	r5, #8
 80003e8:	4a7e      	ldr	r2, [pc, #504]	; (80005e4 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80003ea:	4621      	mov	r1, r4
 80003ec:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80003ee:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	bf54      	ite	pl
 80003f2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80003f6:	2510      	movmi	r5, #16
 80003f8:	4a7a      	ldr	r2, [pc, #488]	; (80005e4 <LCD_Window+0x2c4>)
 80003fa:	f04f 0a02 	mov.w	sl, #2
 80003fe:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000400:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000402:	bf54      	ite	pl
 8000404:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000408:	2520      	movmi	r5, #32
 800040a:	4a76      	ldr	r2, [pc, #472]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800040c:	0727      	lsls	r7, r4, #28
 800040e:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000410:	bf54      	ite	pl
 8000412:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000416:	2540      	movmi	r5, #64	; 0x40
 8000418:	4a72      	ldr	r2, [pc, #456]	; (80005e4 <LCD_Window+0x2c4>)
 800041a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800041e:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000420:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000422:	bf54      	ite	pl
 8000424:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000428:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800042a:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800042c:	bf54      	ite	pl
 800042e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000432:	2410      	movmi	r4, #16
 8000434:	4a6b      	ldr	r2, [pc, #428]	; (80005e4 <LCD_Window+0x2c4>)
 8000436:	f04f 0801 	mov.w	r8, #1
 800043a:	6115      	str	r5, [r2, #16]
 800043c:	4a68      	ldr	r2, [pc, #416]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800043e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000442:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000444:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000446:	bf54      	ite	pl
 8000448:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800044c:	2120      	movmi	r1, #32
 800044e:	4a64      	ldr	r2, [pc, #400]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000450:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000454:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000456:	4961      	ldr	r1, [pc, #388]	; (80005dc <LCD_Window+0x2bc>)
 8000458:	4a61      	ldr	r2, [pc, #388]	; (80005e0 <LCD_Window+0x2c0>)
 800045a:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800045c:	f8c1 a010 	str.w	sl, [r1, #16]
 8000460:	f8c1 9010 	str.w	r9, [r1, #16]
 8000464:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000468:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800046c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000474:	4c5b      	ldr	r4, [pc, #364]	; (80005e4 <LCD_Window+0x2c4>)
 8000476:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800047a:	6125      	str	r5, [r4, #16]
 800047c:	6127      	str	r7, [r4, #16]
 800047e:	6111      	str	r1, [r2, #16]
 8000480:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000484:	f8c2 c010 	str.w	ip, [r2, #16]
 8000488:	6115      	str	r5, [r2, #16]
 800048a:	6117      	str	r7, [r2, #16]
 800048c:	6111      	str	r1, [r2, #16]
 800048e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000492:	b2c6      	uxtb	r6, r0
 8000494:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000496:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 8000498:	bf16      	itet	ne
 800049a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049c:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004a0:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004a2:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004a4:	bf54      	ite	pl
 80004a6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004aa:	2108      	movmi	r1, #8
 80004ac:	4a4d      	ldr	r2, [pc, #308]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004ae:	0685      	lsls	r5, r0, #26
 80004b0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b2:	bf54      	ite	pl
 80004b4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004b8:	2110      	movmi	r1, #16
 80004ba:	4a4a      	ldr	r2, [pc, #296]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80004bc:	06c4      	lsls	r4, r0, #27
 80004be:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004c0:	bf54      	ite	pl
 80004c2:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004c6:	2120      	movmi	r1, #32
 80004c8:	4a46      	ldr	r2, [pc, #280]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ca:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80004ce:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80004d0:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004d2:	bf54      	ite	pl
 80004d4:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80004d8:	2140      	movmi	r1, #64	; 0x40
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <LCD_Window+0x2c4>)
 80004dc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80004e0:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80004e2:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e4:	bf54      	ite	pl
 80004e6:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80004ea:	2180      	movmi	r1, #128	; 0x80
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80004ee:	0787      	lsls	r7, r0, #30
 80004f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f2:	bf54      	ite	pl
 80004f4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004f8:	2110      	movmi	r1, #16
 80004fa:	4a39      	ldr	r2, [pc, #228]	; (80005e0 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80004fc:	07f5      	lsls	r5, r6, #31
 80004fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000500:	bf54      	ite	pl
 8000502:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000506:	2120      	movmi	r1, #32
 8000508:	2702      	movs	r7, #2
 800050a:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800050e:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000512:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000518:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800051a:	4930      	ldr	r1, [pc, #192]	; (80005dc <LCD_Window+0x2bc>)
 800051c:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <LCD_Window+0x2c0>)
 800051e:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000520:	610f      	str	r7, [r1, #16]
 8000522:	f8c1 a010 	str.w	sl, [r1, #16]
 8000526:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052a:	f8c1 8010 	str.w	r8, [r1, #16]
 800052e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000532:	482c      	ldr	r0, [pc, #176]	; (80005e4 <LCD_Window+0x2c4>)
 8000534:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000538:	6104      	str	r4, [r0, #16]
 800053a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800053e:	6105      	str	r5, [r0, #16]
 8000540:	6111      	str	r1, [r2, #16]
 8000542:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000546:	6116      	str	r6, [r2, #16]
 8000548:	6114      	str	r4, [r2, #16]
 800054a:	6115      	str	r5, [r2, #16]
 800054c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000550:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000552:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000556:	bf18      	it	ne
 8000558:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800055a:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055e:	bf0c      	ite	eq
 8000560:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000562:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000564:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000566:	bf54      	ite	pl
 8000568:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800056c:	2108      	movmi	r1, #8
 800056e:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000570:	0698      	lsls	r0, r3, #26
 8000572:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000574:	bf54      	ite	pl
 8000576:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800057a:	2110      	movmi	r1, #16
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000582:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000584:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000586:	bf54      	ite	pl
 8000588:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800058c:	2120      	movmi	r1, #32
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <LCD_Window+0x2c4>)
 8000590:	f04f 0a02 	mov.w	sl, #2
 8000594:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000596:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000598:	bf54      	ite	pl
 800059a:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800059e:	2140      	movmi	r1, #64	; 0x40
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005a2:	075f      	lsls	r7, r3, #29
 80005a4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a6:	bf54      	ite	pl
 80005a8:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005ac:	2180      	movmi	r1, #128	; 0x80
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005b0:	079e      	lsls	r6, r3, #30
 80005b2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b4:	bf54      	ite	pl
 80005b6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005ba:	2210      	movmi	r2, #16
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LCD_Window+0x2c0>)
 80005be:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80005c2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005c4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80005c8:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005cc:	bf0c      	ite	eq
 80005ce:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005d2:	2220      	movne	r2, #32
 80005d4:	f04f 0801 	mov.w	r8, #1
 80005d8:	e006      	b.n	80005e8 <LCD_Window+0x2c8>
 80005da:	bf00      	nop
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	4bac      	ldr	r3, [pc, #688]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ea:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80005ee:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005f0:	4aab      	ldr	r2, [pc, #684]	; (80008a0 <LCD_Window+0x580>)
 80005f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80005f6:	6110      	str	r0, [r2, #16]
 80005f8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80005fc:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000600:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000604:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000608:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800060c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000610:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000614:	4ba1      	ldr	r3, [pc, #644]	; (800089c <LCD_Window+0x57c>)
 8000616:	49a3      	ldr	r1, [pc, #652]	; (80008a4 <LCD_Window+0x584>)
 8000618:	f8c2 8010 	str.w	r8, [r2, #16]
 800061c:	6108      	str	r0, [r1, #16]
 800061e:	610c      	str	r4, [r1, #16]
 8000620:	f8c3 c010 	str.w	ip, [r3, #16]
 8000624:	611d      	str	r5, [r3, #16]
 8000626:	6118      	str	r0, [r3, #16]
 8000628:	611c      	str	r4, [r3, #16]
 800062a:	611f      	str	r7, [r3, #16]
 800062c:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800062e:	fa5f f38e 	uxtb.w	r3, lr
 8000632:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000634:	bf16      	itet	ne
 8000636:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000638:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800063a:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800063c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000640:	bf14      	ite	ne
 8000642:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000644:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000648:	4b96      	ldr	r3, [pc, #600]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800064a:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000650:	bf14      	ite	ne
 8000652:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000654:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000658:	4b92      	ldr	r3, [pc, #584]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800065a:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000660:	bf14      	ite	ne
 8000662:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000664:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000668:	4b8e      	ldr	r3, [pc, #568]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800066a:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000670:	bf14      	ite	ne
 8000672:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000674:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000678:	4b8a      	ldr	r3, [pc, #552]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800067a:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000680:	bf14      	ite	ne
 8000682:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000684:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000688:	4b86      	ldr	r3, [pc, #536]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800068a:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800068e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000690:	bf14      	ite	ne
 8000692:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000694:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000698:	4b80      	ldr	r3, [pc, #512]	; (800089c <LCD_Window+0x57c>)
 800069a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800069e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006a0:	9b02      	ldr	r3, [sp, #8]
 80006a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006a6:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80006a8:	bf4c      	ite	mi
 80006aa:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ac:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80006b0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006b4:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006b8:	f04f 0802 	mov.w	r8, #2
 80006bc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80006c4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80006c8:	4b74      	ldr	r3, [pc, #464]	; (800089c <LCD_Window+0x57c>)
 80006ca:	4975      	ldr	r1, [pc, #468]	; (80008a0 <LCD_Window+0x580>)
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <LCD_Window+0x57c>)
 80006d0:	4a74      	ldr	r2, [pc, #464]	; (80008a4 <LCD_Window+0x584>)
 80006d2:	6108      	str	r0, [r1, #16]
 80006d4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80006d8:	f8c1 8010 	str.w	r8, [r1, #16]
 80006dc:	f04f 0910 	mov.w	r9, #16
 80006e0:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e4:	610c      	str	r4, [r1, #16]
 80006e6:	f8c1 c010 	str.w	ip, [r1, #16]
 80006ea:	6110      	str	r0, [r2, #16]
 80006ec:	6114      	str	r4, [r2, #16]
 80006ee:	611d      	str	r5, [r3, #16]
 80006f0:	611e      	str	r6, [r3, #16]
 80006f2:	6118      	str	r0, [r3, #16]
 80006f4:	611c      	str	r4, [r3, #16]
 80006f6:	611f      	str	r7, [r3, #16]
 80006f8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80006fc:	f8c3 a010 	str.w	sl, [r3, #16]
 8000700:	6116      	str	r6, [r2, #16]
 8000702:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000704:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000708:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800070a:	2740      	movs	r7, #64	; 0x40
 800070c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070e:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000712:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000714:	2720      	movs	r7, #32
 8000716:	f8c3 9010 	str.w	r9, [r3, #16]
 800071a:	611f      	str	r7, [r3, #16]
 800071c:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000720:	f8c1 8010 	str.w	r8, [r1, #16]
 8000724:	f8c1 e010 	str.w	lr, [r1, #16]
 8000728:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072a:	f8c1 c010 	str.w	ip, [r1, #16]
 800072e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000732:	6110      	str	r0, [r2, #16]
 8000734:	6114      	str	r4, [r2, #16]
 8000736:	611d      	str	r5, [r3, #16]
 8000738:	611e      	str	r6, [r3, #16]
 800073a:	6118      	str	r0, [r3, #16]
 800073c:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 800073e:	9c01      	ldr	r4, [sp, #4]
 8000740:	6119      	str	r1, [r3, #16]
 8000742:	f8c3 a010 	str.w	sl, [r3, #16]
 8000746:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000748:	b2e4      	uxtb	r4, r4
 800074a:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800074c:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000750:	bf18      	it	ne
 8000752:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000754:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	bf14      	ite	ne
 800075c:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800075e:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000760:	064c      	lsls	r4, r1, #25
 8000762:	bf54      	ite	pl
 8000764:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000768:	2408      	movmi	r4, #8
 800076a:	4a4e      	ldr	r2, [pc, #312]	; (80008a4 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 800076c:	4608      	mov	r0, r1
 800076e:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000770:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	bf54      	ite	pl
 8000774:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000778:	2410      	movmi	r4, #16
 800077a:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800077c:	06cf      	lsls	r7, r1, #27
 800077e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000780:	bf54      	ite	pl
 8000782:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000786:	2420      	movmi	r4, #32
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800078a:	070e      	lsls	r6, r1, #28
 800078c:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800078e:	bf54      	ite	pl
 8000790:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000794:	2440      	movmi	r4, #64	; 0x40
 8000796:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <LCD_Window+0x584>)
 8000798:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800079c:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800079e:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a0:	bf54      	ite	pl
 80007a2:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007a6:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007a8:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007aa:	bf54      	ite	pl
 80007ac:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007b0:	2110      	movmi	r1, #16
 80007b2:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <LCD_Window+0x584>)
 80007b4:	f04f 0901 	mov.w	r9, #1
 80007b8:	6114      	str	r4, [r2, #16]
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007bc:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80007c0:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007c2:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c4:	bf54      	ite	pl
 80007c6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007ca:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007cc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80007d0:	f04f 0c02 	mov.w	ip, #2
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80007da:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007dc:	4930      	ldr	r1, [pc, #192]	; (80008a0 <LCD_Window+0x580>)
 80007de:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80007e2:	610c      	str	r4, [r1, #16]
 80007e4:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007e8:	f8c1 c010 	str.w	ip, [r1, #16]
 80007ec:	f8c1 a010 	str.w	sl, [r1, #16]
 80007f0:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f4:	f8c1 8010 	str.w	r8, [r1, #16]
 80007f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <LCD_Window+0x57c>)
 80007fe:	4829      	ldr	r0, [pc, #164]	; (80008a4 <LCD_Window+0x584>)
  data[1] = y1;
 8000800:	fa5f f58b 	uxtb.w	r5, fp
 8000804:	6104      	str	r4, [r0, #16]
 8000806:	6106      	str	r6, [r0, #16]
 8000808:	f8c2 e010 	str.w	lr, [r2, #16]
 800080c:	6117      	str	r7, [r2, #16]
 800080e:	6114      	str	r4, [r2, #16]
 8000810:	6116      	str	r6, [r2, #16]
 8000812:	6111      	str	r1, [r2, #16]
 8000814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000818:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800081a:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 800081c:	bf16      	itet	ne
 800081e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000820:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000822:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000824:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000828:	bf0c      	ite	eq
 800082a:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800082e:	2108      	movne	r1, #8
 8000830:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000832:	f01b 0f20 	tst.w	fp, #32
 8000836:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000838:	bf0c      	ite	eq
 800083a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800083e:	2110      	movne	r1, #16
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000842:	f01b 0f10 	tst.w	fp, #16
 8000846:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000848:	bf0c      	ite	eq
 800084a:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800084e:	2120      	movne	r1, #32
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000852:	f01b 0f08 	tst.w	fp, #8
 8000856:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000858:	bf0c      	ite	eq
 800085a:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800085e:	2140      	movne	r1, #64	; 0x40
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000862:	f01b 0f04 	tst.w	fp, #4
 8000866:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000868:	bf0c      	ite	eq
 800086a:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800086e:	2180      	movne	r1, #128	; 0x80
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000872:	f01b 0f02 	tst.w	fp, #2
 8000876:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000878:	bf0c      	ite	eq
 800087a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800087e:	2110      	movne	r1, #16
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000882:	07ef      	lsls	r7, r5, #31
 8000884:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000886:	bf54      	ite	pl
 8000888:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800088c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8000892:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000896:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800089a:	e005      	b.n	80008a8 <LCD_Window+0x588>
 800089c:	40011000 	.word	0x40011000
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40010800 	.word	0x40010800
 80008a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80008ac:	f04f 0b02 	mov.w	fp, #2
 80008b0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008b4:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80008bc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80008c0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80008c4:	4a7d      	ldr	r2, [pc, #500]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c6:	487e      	ldr	r0, [pc, #504]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80008c8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ca:	497e      	ldr	r1, [pc, #504]	; (8000ac4 <LCD_Window+0x7a4>)
 80008cc:	4a7b      	ldr	r2, [pc, #492]	; (8000abc <LCD_Window+0x79c>)
 80008ce:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008d0:	f8c1 b010 	str.w	fp, [r1, #16]
 80008d4:	f8c1 a010 	str.w	sl, [r1, #16]
 80008d8:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008dc:	f8c1 8010 	str.w	r8, [r1, #16]
 80008e0:	6104      	str	r4, [r0, #16]
 80008e2:	6105      	str	r5, [r0, #16]
 80008e4:	f8c2 e010 	str.w	lr, [r2, #16]
 80008e8:	6116      	str	r6, [r2, #16]
 80008ea:	6114      	str	r4, [r2, #16]
 80008ec:	6115      	str	r5, [r2, #16]
 80008ee:	f8c2 c010 	str.w	ip, [r2, #16]
 80008f2:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80008f4:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 80008f6:	f04f 0a02 	mov.w	sl, #2
 80008fa:	0bd2      	lsrs	r2, r2, #15
 80008fc:	bf16      	itet	ne
 80008fe:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000900:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000902:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000904:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000906:	bf54      	ite	pl
 8000908:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800090c:	2108      	movmi	r1, #8
 800090e:	4a6c      	ldr	r2, [pc, #432]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000910:	069d      	lsls	r5, r3, #26
 8000912:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000914:	bf54      	ite	pl
 8000916:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800091a:	2110      	movmi	r1, #16
 800091c:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800091e:	06dc      	lsls	r4, r3, #27
 8000920:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000922:	bf54      	ite	pl
 8000924:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000928:	2120      	movmi	r1, #32
 800092a:	4a65      	ldr	r2, [pc, #404]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800092c:	0718      	lsls	r0, r3, #28
 800092e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000930:	bf54      	ite	pl
 8000932:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000936:	2140      	movmi	r1, #64	; 0x40
 8000938:	4a61      	ldr	r2, [pc, #388]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800093a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800093e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000940:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000942:	bf54      	ite	pl
 8000944:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000948:	2180      	movmi	r1, #128	; 0x80
 800094a:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800094c:	079b      	lsls	r3, r3, #30
 800094e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000950:	bf54      	ite	pl
 8000952:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000956:	2210      	movmi	r2, #16
 8000958:	4b58      	ldr	r3, [pc, #352]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800095e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000960:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000962:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000966:	07df      	lsls	r7, r3, #31
 8000968:	bf54      	ite	pl
 800096a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800096e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000970:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000974:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000978:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000980:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000984:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000988:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098a:	494d      	ldr	r1, [pc, #308]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 800098c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098e:	4a4d      	ldr	r2, [pc, #308]	; (8000ac4 <LCD_Window+0x7a4>)
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <LCD_Window+0x79c>)
 8000992:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000994:	f8c2 a010 	str.w	sl, [r2, #16]
 8000998:	f8c2 9010 	str.w	r9, [r2, #16]
 800099c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a0:	f8c2 e010 	str.w	lr, [r2, #16]
 80009a4:	6108      	str	r0, [r1, #16]
 80009a6:	610c      	str	r4, [r1, #16]
 80009a8:	f8c3 c010 	str.w	ip, [r3, #16]
 80009ac:	611d      	str	r5, [r3, #16]
 80009ae:	6118      	str	r0, [r3, #16]
 80009b0:	611c      	str	r4, [r3, #16]
 80009b2:	611f      	str	r7, [r3, #16]
 80009b4:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009b6:	9b02      	ldr	r3, [sp, #8]
 80009b8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009bc:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80009be:	bf1c      	itt	ne
 80009c0:	2304      	movne	r3, #4
 80009c2:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80009c4:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c6:	bf08      	it	eq
 80009c8:	610d      	streq	r5, [r1, #16]
 80009ca:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80009cc:	bf4c      	ite	mi
 80009ce:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d0:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009d6:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80009e0:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 80009e2:	bf4c      	ite	mi
 80009e4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80009f8:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	bf4c      	ite	mi
 80009fc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a04:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000a08:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000a10:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000a12:	bf4c      	ite	mi
 8000a14:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a16:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a20:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000a28:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000a2a:	bf4c      	ite	mi
 8000a2c:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2e:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a34:	4922      	ldr	r1, [pc, #136]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a36:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a38:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	f04f 0910 	mov.w	r9, #16
 8000a3e:	079a      	lsls	r2, r3, #30
 8000a40:	bf4c      	ite	mi
 8000a42:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a44:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000a4a:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a50:	9b02      	ldr	r3, [sp, #8]
 8000a52:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000a54:	bf4c      	ite	mi
 8000a56:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a58:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <LCD_Window+0x79c>)
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <LCD_Window+0x7a4>)
 8000a66:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a68:	611e      	str	r6, [r3, #16]
 8000a6a:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	611c      	str	r4, [r3, #16]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000a74:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000a78:	6108      	str	r0, [r1, #16]
 8000a7a:	610c      	str	r4, [r1, #16]
 8000a7c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a80:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a84:	6110      	str	r0, [r2, #16]
 8000a86:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a88:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8a:	f8c2 b010 	str.w	fp, [r2, #16]
 8000a8e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000a92:	f8c1 e010 	str.w	lr, [r1, #16]
 8000a96:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9e:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000aa0:	f8c1 8010 	str.w	r8, [r1, #16]
 8000aa4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000aaa:	6111      	str	r1, [r2, #16]
 8000aac:	6117      	str	r7, [r2, #16]
 8000aae:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ab0:	611e      	str	r6, [r3, #16]
 8000ab2:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000ab4:	b005      	add	sp, #20
 8000ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aba:	bf00      	nop
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000acc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000ad0:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000ad4:	4caf      	ldr	r4, [pc, #700]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000ad6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000ada:	6125      	str	r5, [r4, #16]
 8000adc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ae0:	f8c4 a010 	str.w	sl, [r4, #16]
 8000ae4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ae8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000aec:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000af0:	4681      	mov	r9, r0
 8000af2:	4696      	mov	lr, r2
 8000af4:	48a8      	ldr	r0, [pc, #672]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000af6:	4aa9      	ldr	r2, [pc, #676]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000af8:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afe:	6105      	str	r5, [r0, #16]
 8000b00:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b04:	6117      	str	r7, [r2, #16]
 8000b06:	6116      	str	r6, [r2, #16]
 8000b08:	6115      	str	r5, [r2, #16]
 8000b0a:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b0e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b12:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000b16:	6107      	str	r7, [r0, #16]
 8000b18:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b1c:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b20:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b24:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b28:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b2c:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000b30:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b34:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b38:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b3c:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b44:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b4a:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000b52:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b56:	f04f 0b01 	mov.w	fp, #1
 8000b5a:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000b62:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b66:	6106      	str	r6, [r0, #16]
 8000b68:	6105      	str	r5, [r0, #16]
 8000b6a:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b6e:	6117      	str	r7, [r2, #16]
 8000b70:	6116      	str	r6, [r2, #16]
 8000b72:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b74:	1e4d      	subs	r5, r1, #1
 8000b76:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b78:	fb03 f30e 	mul.w	r3, r3, lr
 8000b7c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b80:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b84:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000b88:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8a:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b8c:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8e:	b293      	uxth	r3, r2
 8000b90:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000b92:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b96:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000b98:	b2ed      	uxtb	r5, r5
 8000b9a:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000b9c:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	bf18      	it	ne
 8000ba0:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000ba2:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000ba6:	9204      	str	r2, [sp, #16]
 8000ba8:	bf14      	ite	ne
 8000baa:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bac:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000bae:	0667      	lsls	r7, r4, #25
 8000bb0:	bf54      	ite	pl
 8000bb2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	2508      	movmi	r5, #8
 8000bb8:	4877      	ldr	r0, [pc, #476]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000bba:	4626      	mov	r6, r4
 8000bbc:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000bbe:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc0:	bf54      	ite	pl
 8000bc2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000bc6:	2510      	movmi	r5, #16
 8000bc8:	4873      	ldr	r0, [pc, #460]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bca:	f04f 0b02 	mov.w	fp, #2
 8000bce:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000bd0:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd2:	bf54      	ite	pl
 8000bd4:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000bd8:	2520      	movmi	r5, #32
 8000bda:	486f      	ldr	r0, [pc, #444]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000bdc:	0727      	lsls	r7, r4, #28
 8000bde:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be0:	bf54      	ite	pl
 8000be2:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000be6:	2540      	movmi	r5, #64	; 0x40
 8000be8:	486b      	ldr	r0, [pc, #428]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bea:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000bee:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000bf0:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf2:	bf54      	ite	pl
 8000bf4:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000bf8:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000bfa:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfc:	bf54      	ite	pl
 8000bfe:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	2410      	movmi	r4, #16
 8000c04:	4864      	ldr	r0, [pc, #400]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c0a:	6105      	str	r5, [r0, #16]
 8000c0c:	4863      	ldr	r0, [pc, #396]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000c14:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c16:	bf54      	ite	pl
 8000c18:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c1c:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000c22:	485e      	ldr	r0, [pc, #376]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c24:	4d5c      	ldr	r5, [pc, #368]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c28:	4c5a      	ldr	r4, [pc, #360]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000c2a:	485c      	ldr	r0, [pc, #368]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000c2c:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c2e:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c32:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c36:	f04f 0a01 	mov.w	sl, #1
 8000c3a:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3e:	f8c4 8010 	str.w	r8, [r4, #16]
 8000c42:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000c46:	612e      	str	r6, [r5, #16]
 8000c48:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000c4c:	612f      	str	r7, [r5, #16]
 8000c4e:	6104      	str	r4, [r0, #16]
 8000c50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000c54:	f8c0 e010 	str.w	lr, [r0, #16]
 8000c58:	6106      	str	r6, [r0, #16]
 8000c5a:	6107      	str	r7, [r0, #16]
 8000c5c:	6104      	str	r4, [r0, #16]
 8000c5e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000c62:	fa5f fc81 	uxtb.w	ip, r1
 8000c66:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000c68:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000c6c:	bf16      	itet	ne
 8000c6e:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c70:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c74:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000c76:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c78:	bf54      	ite	pl
 8000c7a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	2408      	movmi	r4, #8
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000c82:	068e      	lsls	r6, r1, #26
 8000c84:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c86:	bf54      	ite	pl
 8000c88:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c8c:	2410      	movmi	r4, #16
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000c90:	06cd      	lsls	r5, r1, #27
 8000c92:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c94:	bf54      	ite	pl
 8000c96:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c9a:	2420      	movmi	r4, #32
 8000c9c:	483e      	ldr	r0, [pc, #248]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ca4:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	bf54      	ite	pl
 8000ca8:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cac:	2440      	movmi	r4, #64	; 0x40
 8000cae:	483a      	ldr	r0, [pc, #232]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000cb0:	f04f 0b02 	mov.w	fp, #2
 8000cb4:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cb6:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb8:	bf54      	ite	pl
 8000cba:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	2480      	movmi	r4, #128	; 0x80
 8000cc0:	4835      	ldr	r0, [pc, #212]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cc2:	078f      	lsls	r7, r1, #30
 8000cc4:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc6:	bf54      	ite	pl
 8000cc8:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ccc:	2010      	movmi	r0, #16
 8000cce:	4933      	ldr	r1, [pc, #204]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000cd0:	f01c 0f01 	tst.w	ip, #1
 8000cd4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	bf0c      	ite	eq
 8000cd8:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cdc:	2020      	movne	r0, #32
 8000cde:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000ce2:	492e      	ldr	r1, [pc, #184]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000ce8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	482a      	ldr	r0, [pc, #168]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000cec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000cf0:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000cf2:	f8c0 b010 	str.w	fp, [r0, #16]
 8000cf6:	f8c0 a010 	str.w	sl, [r0, #16]
 8000cfa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000d0a:	f8c0 8010 	str.w	r8, [r0, #16]
 8000d0e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000d12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000d18:	4c1f      	ldr	r4, [pc, #124]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d1a:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1e:	6125      	str	r5, [r4, #16]
 8000d20:	6126      	str	r6, [r4, #16]
 8000d22:	f8c1 e010 	str.w	lr, [r1, #16]
 8000d26:	610f      	str	r7, [r1, #16]
 8000d28:	610d      	str	r5, [r1, #16]
 8000d2a:	610e      	str	r6, [r1, #16]
 8000d2c:	6108      	str	r0, [r1, #16]
 8000d2e:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d32:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d34:	bf16      	itet	ne
 8000d36:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d38:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d3a:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d3c:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	bf54      	ite	pl
 8000d40:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	2008      	movmi	r0, #8
 8000d46:	4914      	ldr	r1, [pc, #80]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d48:	0695      	lsls	r5, r2, #26
 8000d4a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	bf54      	ite	pl
 8000d4e:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	2010      	movmi	r0, #16
 8000d54:	4910      	ldr	r1, [pc, #64]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d56:	06d4      	lsls	r4, r2, #27
 8000d58:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5a:	bf54      	ite	pl
 8000d5c:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d60:	2020      	movmi	r0, #32
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d64:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d68:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d6a:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6c:	bf54      	ite	pl
 8000d6e:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d72:	2040      	movmi	r0, #64	; 0x40
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000d76:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d7a:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d7c:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7e:	bf54      	ite	pl
 8000d80:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d84:	2080      	movmi	r0, #128	; 0x80
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d88:	0797      	lsls	r7, r2, #30
 8000d8a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8c:	bf58      	it	pl
 8000d8e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000d92:	e005      	b.n	8000da0 <LCD_Rect_Fill+0x2d8>
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000da0:	bf48      	it	mi
 8000da2:	2110      	movmi	r1, #16
 8000da4:	4aa9      	ldr	r2, [pc, #676]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000daa:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dac:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000db2:	07d6      	lsls	r6, r2, #31
 8000db4:	bf54      	ite	pl
 8000db6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000dba:	2120      	movmi	r1, #32
 8000dbc:	4aa3      	ldr	r2, [pc, #652]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc4:	49a2      	ldr	r1, [pc, #648]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000dc6:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000dca:	610c      	str	r4, [r1, #16]
 8000dcc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000dd8:	f8c1 a010 	str.w	sl, [r1, #16]
 8000ddc:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de0:	4a9a      	ldr	r2, [pc, #616]	; (800104c <LCD_Rect_Fill+0x584>)
 8000de2:	489c      	ldr	r0, [pc, #624]	; (8001054 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000de4:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f8c1 8010 	str.w	r8, [r1, #16]
 8000dec:	6104      	str	r4, [r0, #16]
 8000dee:	6105      	str	r5, [r0, #16]
 8000df0:	f8c2 e010 	str.w	lr, [r2, #16]
 8000df4:	6116      	str	r6, [r2, #16]
 8000df6:	6114      	str	r4, [r2, #16]
 8000df8:	6115      	str	r5, [r2, #16]
 8000dfa:	f8c2 c010 	str.w	ip, [r2, #16]
 8000dfe:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e00:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	f04f 0e02 	mov.w	lr, #2
 8000e06:	09d2      	lsrs	r2, r2, #7
 8000e08:	bf16      	itet	ne
 8000e0a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0c:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e10:	065d      	lsls	r5, r3, #25
 8000e12:	bf4c      	ite	mi
 8000e14:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e16:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000e1a:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e1c:	069c      	lsls	r4, r3, #26
 8000e1e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e20:	bf4c      	ite	mi
 8000e22:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e28:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e2a:	06d8      	lsls	r0, r3, #27
 8000e2c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	bf4c      	ite	mi
 8000e30:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000e36:	4a87      	ldr	r2, [pc, #540]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e3c:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e3e:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000e40:	bf4c      	ite	mi
 8000e42:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e44:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000e48:	4a82      	ldr	r2, [pc, #520]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e4a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000e4e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e50:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000e52:	bf4c      	ite	mi
 8000e54:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e5c:	079f      	lsls	r7, r3, #30
 8000e5e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e60:	bf4c      	ite	mi
 8000e62:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e64:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000e68:	4b78      	ldr	r3, [pc, #480]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000e76:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	bf14      	ite	ne
 8000e7c:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e82:	4973      	ldr	r1, [pc, #460]	; (8001050 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	4b71      	ldr	r3, [pc, #452]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000e90:	6108      	str	r0, [r1, #16]
 8000e92:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000ea2:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea6:	610c      	str	r4, [r1, #16]
 8000ea8:	610f      	str	r7, [r1, #16]
 8000eaa:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <LCD_Rect_Fill+0x584>)
 8000eb0:	4a68      	ldr	r2, [pc, #416]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000eb2:	6110      	str	r0, [r2, #16]
 8000eb4:	6114      	str	r4, [r2, #16]
 8000eb6:	611d      	str	r5, [r3, #16]
 8000eb8:	611e      	str	r6, [r3, #16]
 8000eba:	6118      	str	r0, [r3, #16]
 8000ebc:	611c      	str	r4, [r3, #16]
 8000ebe:	f8c3 a010 	str.w	sl, [r3, #16]
 8000ec2:	f8c3 b010 	str.w	fp, [r3, #16]
 8000ec6:	6116      	str	r6, [r2, #16]
 8000ec8:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ece:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ed0:	2740      	movs	r7, #64	; 0x40
 8000ed2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed4:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000ed8:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	2720      	movs	r7, #32
 8000edc:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ee0:	611f      	str	r7, [r3, #16]
 8000ee2:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	f8c1 e010 	str.w	lr, [r1, #16]
 8000eea:	f8c1 c010 	str.w	ip, [r1, #16]
 8000eee:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef0:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000ef4:	610f      	str	r7, [r1, #16]
 8000ef6:	6110      	str	r0, [r2, #16]
 8000ef8:	6114      	str	r4, [r2, #16]
 8000efa:	611d      	str	r5, [r3, #16]
 8000efc:	611e      	str	r6, [r3, #16]
 8000efe:	6118      	str	r0, [r3, #16]
 8000f00:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8000f02:	9c02      	ldr	r4, [sp, #8]
 8000f04:	f8c3 a010 	str.w	sl, [r3, #16]
 8000f08:	f8c3 b010 	str.w	fp, [r3, #16]
 8000f0c:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000f0e:	b2e4      	uxtb	r4, r4
 8000f10:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f12:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	bf18      	it	ne
 8000f18:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000f1a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	bf14      	ite	ne
 8000f22:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f24:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f26:	064e      	lsls	r6, r1, #25
 8000f28:	bf54      	ite	pl
 8000f2a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	2408      	movmi	r4, #8
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8000f32:	4608      	mov	r0, r1
 8000f34:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f36:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	bf54      	ite	pl
 8000f3a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	2410      	movmi	r4, #16
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f42:	f04f 0b02 	mov.w	fp, #2
 8000f46:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f48:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4a:	bf54      	ite	pl
 8000f4c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	2420      	movmi	r4, #32
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f54:	070f      	lsls	r7, r1, #28
 8000f56:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f58:	bf54      	ite	pl
 8000f5a:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	2440      	movmi	r4, #64	; 0x40
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f62:	074e      	lsls	r6, r1, #29
 8000f64:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	bf54      	ite	pl
 8000f68:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000f6c:	2480      	movmi	r4, #128	; 0x80
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f70:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000f74:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f76:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	bf54      	ite	pl
 8000f7a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	2110      	movmi	r1, #16
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f88:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8a:	bf54      	ite	pl
 8000f8c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f90:	2120      	movmi	r1, #32
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f94:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000f98:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000f9c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000fa0:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	f8c1 b010 	str.w	fp, [r1, #16]
 8000fa6:	f8c1 a010 	str.w	sl, [r1, #16]
 8000faa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb6:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000fba:	f8c1 8010 	str.w	r8, [r1, #16]
 8000fbe:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000fc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <LCD_Rect_Fill+0x584>)
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000fca:	fa5f f589 	uxtb.w	r5, r9
 8000fce:	6104      	str	r4, [r0, #16]
 8000fd0:	6106      	str	r6, [r0, #16]
 8000fd2:	f8c2 e010 	str.w	lr, [r2, #16]
 8000fd6:	6117      	str	r7, [r2, #16]
 8000fd8:	6114      	str	r4, [r2, #16]
 8000fda:	6116      	str	r6, [r2, #16]
 8000fdc:	6111      	str	r1, [r2, #16]
 8000fde:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000fe2:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000fe4:	bf16      	itet	ne
 8000fe6:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe8:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000fec:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff0:	bf0c      	ite	eq
 8000ff2:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	2108      	movne	r1, #8
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000ffa:	f019 0f20 	tst.w	r9, #32
 8000ffe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001000:	bf0c      	ite	eq
 8001002:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001006:	2110      	movne	r1, #16
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800100a:	f019 0f10 	tst.w	r9, #16
 800100e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	bf0c      	ite	eq
 8001012:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001016:	2120      	movne	r1, #32
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800101a:	f019 0f08 	tst.w	r9, #8
 800101e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001020:	bf0c      	ite	eq
 8001022:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001026:	2140      	movne	r1, #64	; 0x40
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800102a:	f019 0f04 	tst.w	r9, #4
 800102e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001030:	bf0c      	ite	eq
 8001032:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001036:	2180      	movne	r1, #128	; 0x80
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800103a:	f019 0f02 	tst.w	r9, #2
 800103e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	bf0c      	ite	eq
 8001042:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001046:	2110      	movne	r1, #16
 8001048:	e006      	b.n	8001058 <LCD_Rect_Fill+0x590>
 800104a:	bf00      	nop
 800104c:	40011000 	.word	0x40011000
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010800 	.word	0x40010800
 8001058:	4ab5      	ldr	r2, [pc, #724]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800105e:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001060:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	bf54      	ite	pl
 8001064:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001068:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800106e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001072:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001076:	f04f 0b02 	mov.w	fp, #2
 800107a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800107e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001082:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8001086:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800108a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800108e:	4aa8      	ldr	r2, [pc, #672]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	48a8      	ldr	r0, [pc, #672]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001092:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001094:	49a8      	ldr	r1, [pc, #672]	; (8001338 <LCD_Rect_Fill+0x870>)
 8001096:	4aa6      	ldr	r2, [pc, #664]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001098:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800109a:	f8c1 b010 	str.w	fp, [r1, #16]
 800109e:	f8c1 a010 	str.w	sl, [r1, #16]
 80010a2:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a6:	f8c1 8010 	str.w	r8, [r1, #16]
 80010aa:	6104      	str	r4, [r0, #16]
 80010ac:	6105      	str	r5, [r0, #16]
 80010ae:	f8c2 e010 	str.w	lr, [r2, #16]
 80010b2:	6116      	str	r6, [r2, #16]
 80010b4:	6114      	str	r4, [r2, #16]
 80010b6:	6115      	str	r5, [r2, #16]
 80010b8:	f8c2 c010 	str.w	ip, [r2, #16]
 80010bc:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010be:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80010c0:	f04f 0a02 	mov.w	sl, #2
 80010c4:	0bd2      	lsrs	r2, r2, #15
 80010c6:	bf16      	itet	ne
 80010c8:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ca:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010cc:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010ce:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d0:	bf54      	ite	pl
 80010d2:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	2108      	movmi	r1, #8
 80010d8:	4a96      	ldr	r2, [pc, #600]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010da:	069e      	lsls	r6, r3, #26
 80010dc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	bf54      	ite	pl
 80010e0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010e4:	2110      	movmi	r1, #16
 80010e6:	4a93      	ldr	r2, [pc, #588]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010e8:	06dd      	lsls	r5, r3, #27
 80010ea:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ec:	bf54      	ite	pl
 80010ee:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	2120      	movmi	r1, #32
 80010f4:	4a8f      	ldr	r2, [pc, #572]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80010f6:	071c      	lsls	r4, r3, #28
 80010f8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fa:	bf54      	ite	pl
 80010fc:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001100:	2140      	movmi	r1, #64	; 0x40
 8001102:	4a8c      	ldr	r2, [pc, #560]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001104:	0758      	lsls	r0, r3, #29
 8001106:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001108:	bf54      	ite	pl
 800110a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800110e:	2180      	movmi	r1, #128	; 0x80
 8001110:	4a88      	ldr	r2, [pc, #544]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001116:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001118:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	bf54      	ite	pl
 800111c:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001120:	2210      	movmi	r2, #16
 8001122:	4b83      	ldr	r3, [pc, #524]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001124:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8001128:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800112a:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001130:	f013 0f01 	tst.w	r3, #1
 8001134:	bf0c      	ite	eq
 8001136:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800113a:	2220      	movne	r2, #32
 800113c:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001140:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001144:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8001148:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800114c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001150:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001154:	4b76      	ldr	r3, [pc, #472]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001156:	4977      	ldr	r1, [pc, #476]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001158:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <LCD_Rect_Fill+0x870>)
 800115c:	4b74      	ldr	r3, [pc, #464]	; (8001330 <LCD_Rect_Fill+0x868>)
 800115e:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001160:	f8c2 a010 	str.w	sl, [r2, #16]
 8001164:	f8c2 9010 	str.w	r9, [r2, #16]
 8001168:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116c:	f8c2 e010 	str.w	lr, [r2, #16]
 8001170:	6108      	str	r0, [r1, #16]
 8001172:	610c      	str	r4, [r1, #16]
 8001174:	f8c3 c010 	str.w	ip, [r3, #16]
 8001178:	611d      	str	r5, [r3, #16]
 800117a:	6118      	str	r0, [r3, #16]
 800117c:	611c      	str	r4, [r3, #16]
 800117e:	611f      	str	r7, [r3, #16]
 8001180:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001188:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800118a:	bf1c      	itt	ne
 800118c:	2304      	movne	r3, #4
 800118e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001190:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	bf08      	it	eq
 8001194:	610d      	streq	r5, [r1, #16]
 8001196:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 800119a:	bf14      	ite	ne
 800119c:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	4b64      	ldr	r3, [pc, #400]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011aa:	9b02      	ldr	r3, [sp, #8]
 80011ac:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80011b0:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80011b4:	bf14      	ite	ne
 80011b6:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011be:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011c2:	9b02      	ldr	r3, [sp, #8]
 80011c4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80011c8:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80011cc:	bf14      	ite	ne
 80011ce:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80011da:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011dc:	9b02      	ldr	r3, [sp, #8]
 80011de:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80011e2:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	bf14      	ite	ne
 80011e8:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f0:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80011f4:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80011f6:	9b02      	ldr	r3, [sp, #8]
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <LCD_Rect_Fill+0x870>)
 80011fa:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	bf14      	ite	ne
 8001200:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001202:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001208:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800120c:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800120e:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001210:	f04f 0910 	mov.w	r9, #16
 8001214:	079a      	lsls	r2, r3, #30
 8001216:	bf4c      	ite	mi
 8001218:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001220:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001224:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800122a:	bf4c      	ite	mi
 800122c:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800123a:	6108      	str	r0, [r1, #16]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 800123e:	610c      	str	r4, [r1, #16]
 8001240:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	f8c1 e010 	str.w	lr, [r1, #16]
 8001246:	610b      	str	r3, [r1, #16]
 8001248:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 800124c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001250:	6118      	str	r0, [r3, #16]
 8001252:	f8c3 e010 	str.w	lr, [r3, #16]
 8001256:	f8c2 c010 	str.w	ip, [r2, #16]
 800125a:	6117      	str	r7, [r2, #16]
 800125c:	6110      	str	r0, [r2, #16]
 800125e:	f8c2 e010 	str.w	lr, [r2, #16]
 8001262:	f8c2 b010 	str.w	fp, [r2, #16]
 8001266:	f8c2 a010 	str.w	sl, [r2, #16]
 800126a:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800126c:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126e:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001272:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001276:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001278:	f8c3 8010 	str.w	r8, [r3, #16]
 800127c:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001282:	6117      	str	r7, [r2, #16]
 8001284:	6116      	str	r6, [r2, #16]
 8001286:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001288:	610c      	str	r4, [r1, #16]
 800128a:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800128c:	9d01      	ldr	r5, [sp, #4]
 800128e:	2d00      	cmp	r5, #0
 8001290:	f000 80c8 	beq.w	8001424 <LCD_Rect_Fill+0x95c>
 8001294:	2500      	movs	r5, #0
 8001296:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001298:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800129a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800129e:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80012a2:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80012a6:	017f      	lsls	r7, r7, #5
 80012a8:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80012ac:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80012b0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80012b8:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80012bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80012c0:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80012c4:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80012c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80012cc:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80012d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80012d4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80012d8:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80012dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80012e4:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80012e8:	f3c9 1900 	ubfx	r9, r9, #4, #1
 80012ec:	f8cd 801c 	str.w	r8, [sp, #28]
 80012f0:	f3c7 2800 	ubfx	r8, r7, #8, #1
 80012f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80012f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80012fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001300:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001304:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8001308:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 800130c:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001310:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001314:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8001318:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800131c:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001320:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001324:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8001328:	f3c8 1880 	ubfx	r8, r8, #6, #1
 800132c:	e006      	b.n	800133c <LCD_Rect_Fill+0x874>
 800132e:	bf00      	nop
 8001330:	40011000 	.word	0x40011000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001340:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	610f      	str	r7, [r1, #16]
 8001344:	f1bc 0f00 	cmp.w	ip, #0
 8001348:	f000 80ac 	beq.w	80014a4 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800134c:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800134e:	611c      	str	r4, [r3, #16]
 8001350:	2f00      	cmp	r7, #0
 8001352:	f000 80ac 	beq.w	80014ae <LCD_Rect_Fill+0x9e6>
 8001356:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001358:	9f03      	ldr	r7, [sp, #12]
 800135a:	2f00      	cmp	r7, #0
 800135c:	f000 809e 	beq.w	800149c <LCD_Rect_Fill+0x9d4>
 8001360:	f04f 0908 	mov.w	r9, #8
 8001364:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001368:	9f04      	ldr	r7, [sp, #16]
 800136a:	2f00      	cmp	r7, #0
 800136c:	f000 8091 	beq.w	8001492 <LCD_Rect_Fill+0x9ca>
 8001370:	f04f 0904 	mov.w	r9, #4
 8001374:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001378:	9f05      	ldr	r7, [sp, #20]
 800137a:	2f00      	cmp	r7, #0
 800137c:	f000 8087 	beq.w	800148e <LCD_Rect_Fill+0x9c6>
 8001380:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001382:	9f06      	ldr	r7, [sp, #24]
 8001384:	2f00      	cmp	r7, #0
 8001386:	d07f      	beq.n	8001488 <LCD_Rect_Fill+0x9c0>
 8001388:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800138a:	9f07      	ldr	r7, [sp, #28]
 800138c:	2f00      	cmp	r7, #0
 800138e:	d076      	beq.n	800147e <LCD_Rect_Fill+0x9b6>
 8001390:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001394:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001398:	9f08      	ldr	r7, [sp, #32]
 800139a:	2f00      	cmp	r7, #0
 800139c:	d06a      	beq.n	8001474 <LCD_Rect_Fill+0x9ac>
 800139e:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80013a2:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80013a6:	f1ba 0f00 	cmp.w	sl, #0
 80013aa:	d05e      	beq.n	800146a <LCD_Rect_Fill+0x9a2>
 80013ac:	f04f 0904 	mov.w	r9, #4
 80013b0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80013b4:	f1bb 0f00 	cmp.w	fp, #0
 80013b8:	d053      	beq.n	8001462 <LCD_Rect_Fill+0x99a>
 80013ba:	f04f 0908 	mov.w	r9, #8
 80013be:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80013c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	d047      	beq.n	8001458 <LCD_Rect_Fill+0x990>
 80013c8:	f04f 0910 	mov.w	r9, #16
 80013cc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80013d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80013d2:	2f00      	cmp	r7, #0
 80013d4:	d03b      	beq.n	800144e <LCD_Rect_Fill+0x986>
 80013d6:	f04f 0920 	mov.w	r9, #32
 80013da:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d02f      	beq.n	8001444 <LCD_Rect_Fill+0x97c>
 80013e4:	f04f 0940 	mov.w	r9, #64	; 0x40
 80013e8:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80013ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80013ee:	b327      	cbz	r7, 800143a <LCD_Rect_Fill+0x972>
 80013f0:	f04f 0980 	mov.w	r9, #128	; 0x80
 80013f4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80013f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80013fa:	b1cf      	cbz	r7, 8001430 <LCD_Rect_Fill+0x968>
 80013fc:	f04f 0910 	mov.w	r9, #16
 8001400:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001404:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001406:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001408:	b17f      	cbz	r7, 800142a <LCD_Rect_Fill+0x962>
 800140a:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140e:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001412:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001416:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001418:	6108      	str	r0, [r1, #16]
 800141a:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 800141c:	610c      	str	r4, [r1, #16]
 800141e:	f8c1 9010 	str.w	r9, [r1, #16]
 8001422:	d18b      	bne.n	800133c <LCD_Rect_Fill+0x874>
}
 8001424:	b00f      	add	sp, #60	; 0x3c
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800142e:	e7ee      	b.n	800140e <LCD_Rect_Fill+0x946>
 8001430:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001434:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001438:	e7e4      	b.n	8001404 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143a:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800143e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001442:	e7d9      	b.n	80013f8 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001444:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 8001448:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800144c:	e7ce      	b.n	80013ec <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001452:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001456:	e7c2      	b.n	80013de <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001458:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 800145c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001460:	e7b6      	b.n	80013d0 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8001466:	611f      	str	r7, [r3, #16]
}
 8001468:	e7ab      	b.n	80013c2 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146a:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 800146e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001472:	e79f      	b.n	80013b4 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001474:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8001478:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800147c:	e793      	b.n	80013a6 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001482:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001486:	e787      	b.n	8001398 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001488:	f8c2 e010 	str.w	lr, [r2, #16]
}
 800148c:	e77d      	b.n	800138a <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800148e:	6110      	str	r0, [r2, #16]
}
 8001490:	e777      	b.n	8001382 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001496:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800149a:	e76d      	b.n	8001378 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80014a0:	6117      	str	r7, [r2, #16]
}
 80014a2:	e761      	b.n	8001368 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014a4:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	6118      	str	r0, [r3, #16]
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	f47f af54 	bne.w	8001356 <LCD_Rect_Fill+0x88e>
 80014ae:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80014b2:	e751      	b.n	8001358 <LCD_Rect_Fill+0x890>

080014b4 <HAL_GPIO_Init>:
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	680e      	ldr	r6, [r1, #0]
{
 80014ba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	2e00      	cmp	r6, #0
 80014be:	f000 80b2 	beq.w	8001626 <HAL_GPIO_Init+0x172>
 80014c2:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4f74      	ldr	r7, [pc, #464]	; (8001698 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80014c6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80014c8:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4d74      	ldr	r5, [pc, #464]	; (800169c <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80014cc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80016a0 <HAL_GPIO_Init+0x1ec>
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x2c>
	position++;
 80014d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80014d8:	f102 0204 	add.w	r2, r2, #4
 80014dc:	f000 80a3 	beq.w	8001626 <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80014e0:	2401      	movs	r4, #1
 80014e2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80014e4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80014ec:	d1f1      	bne.n	80014d2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80014ee:	684e      	ldr	r6, [r1, #4]
 80014f0:	2e12      	cmp	r6, #18
 80014f2:	f200 809b 	bhi.w	800162c <HAL_GPIO_Init+0x178>
 80014f6:	2e12      	cmp	r6, #18
 80014f8:	d81a      	bhi.n	8001530 <HAL_GPIO_Init+0x7c>
 80014fa:	e8df f006 	tbb	[pc, r6]
 80014fe:	baa4      	.short	0xbaa4
 8001500:	1919c3b6 	.word	0x1919c3b6
 8001504:	19191919 	.word	0x19191919
 8001508:	19191919 	.word	0x19191919
 800150c:	ae191919 	.word	0xae191919
 8001510:	b2          	.byte	0xb2
 8001511:	00          	.byte	0x00
 8001512:	f8df e190 	ldr.w	lr, [pc, #400]	; 80016a4 <HAL_GPIO_Init+0x1f0>
 8001516:	4576      	cmp	r6, lr
 8001518:	f000 8095 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 800151c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001520:	4576      	cmp	r6, lr
 8001522:	f000 8090 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 8001526:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800152a:	4576      	cmp	r6, lr
 800152c:	f000 808b 	beq.w	8001646 <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001534:	bf9c      	itt	ls
 8001536:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	bf84      	itt	hi
 8001540:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f8de 4000 	ldr.w	r4, [lr]
 800154c:	fa0a f90b 	lsl.w	r9, sl, fp
 8001550:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001554:	ea24 040b 	bic.w	r4, r4, fp
 8001558:	ea44 0409 	orr.w	r4, r4, r9
 800155c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	684c      	ldr	r4, [r1, #4]
 8001562:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001566:	d076      	beq.n	8001656 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001570:	f04e 0e01 	orr.w	lr, lr, #1
 8001574:	f8c7 e018 	str.w	lr, [r7, #24]
 8001578:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	f00e 0e01 	and.w	lr, lr, #1
 8001584:	f8cd e004 	str.w	lr, [sp, #4]
 8001588:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	f023 0e03 	bic.w	lr, r3, #3
 8001590:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001594:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001598:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159c:	fa06 f609 	lsl.w	r6, r6, r9
 80015a0:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	4e40      	ldr	r6, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x1f4>)
 80015a6:	42b0      	cmp	r0, r6
 80015a8:	d068      	beq.n	800167c <HAL_GPIO_Init+0x1c8>
 80015aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ae:	42b0      	cmp	r0, r6
 80015b0:	d066      	beq.n	8001680 <HAL_GPIO_Init+0x1cc>
 80015b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015b6:	42b0      	cmp	r0, r6
 80015b8:	d05e      	beq.n	8001678 <HAL_GPIO_Init+0x1c4>
 80015ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015be:	42b0      	cmp	r0, r6
 80015c0:	bf0c      	ite	eq
 80015c2:	2603      	moveq	r6, #3
 80015c4:	2604      	movne	r6, #4
 80015c6:	fa06 f609 	lsl.w	r6, r6, r9
 80015ca:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015d2:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	bf14      	ite	ne
 80015da:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015de:	ea26 060c 	biceq.w	r6, r6, ip
 80015e2:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015ea:	bf14      	ite	ne
 80015ec:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f0:	ea26 060c 	biceq.w	r6, r6, ip
 80015f4:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f6:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fc:	bf14      	ite	ne
 80015fe:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	ea26 060c 	biceq.w	r6, r6, ip
 8001606:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800160c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160e:	d01f      	beq.n	8001650 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	ea44 040c 	orr.w	r4, r4, ip
 8001614:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	680e      	ldr	r6, [r1, #0]
	position++;
 8001618:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	fa36 f403 	lsrs.w	r4, r6, r3
 800161e:	f102 0204 	add.w	r2, r2, #4
 8001622:	f47f af5d 	bne.w	80014e0 <HAL_GPIO_Init+0x2c>
}
 8001626:	b003      	add	sp, #12
 8001628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800162c:	4546      	cmp	r6, r8
 800162e:	d00a      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 8001630:	f67f af6f 	bls.w	8001512 <HAL_GPIO_Init+0x5e>
 8001634:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016ac <HAL_GPIO_Init+0x1f8>
 8001638:	4576      	cmp	r6, lr
 800163a:	d004      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 800163c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001640:	4576      	cmp	r6, lr
 8001642:	f47f af75 	bne.w	8001530 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	688e      	ldr	r6, [r1, #8]
 8001648:	b9fe      	cbnz	r6, 800168a <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	f04f 0a04 	mov.w	sl, #4
 800164e:	e76f      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001650:	ea24 040c 	bic.w	r4, r4, ip
 8001654:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	680e      	ldr	r6, [r1, #0]
 8001658:	e73b      	b.n	80014d2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165a:	68cc      	ldr	r4, [r1, #12]
 800165c:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001660:	e766      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001662:	68cc      	ldr	r4, [r1, #12]
 8001664:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001668:	e762      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	68cc      	ldr	r4, [r1, #12]
 800166c:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001670:	e75e      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001672:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001676:	e75b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	2602      	movs	r6, #2
 800167a:	e7a4      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 800167c:	2600      	movs	r6, #0
 800167e:	e7a2      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 8001680:	2601      	movs	r6, #1
 8001682:	e7a0      	b.n	80015c6 <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001684:	f04f 0a00 	mov.w	sl, #0
 8001688:	e752      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168a:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001690:	bf0c      	ite	eq
 8001692:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001694:	6144      	strne	r4, [r0, #20]
 8001696:	e74b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
 8001698:	40021000 	.word	0x40021000
 800169c:	40010400 	.word	0x40010400
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	10310000 	.word	0x10310000

080016b0 <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f013 0320 	ands.w	r3, r3, #32
 80016bc:	d10a      	bne.n	80016d4 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016be:	6a41      	ldr	r1, [r0, #36]	; 0x24
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016c0:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 80016c2:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016c4:	6953      	ldr	r3, [r2, #20]
 80016c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ca:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016cc:	68d3      	ldr	r3, [r2, #12]
 80016ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d8:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80016de:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 80016e2:	2921      	cmp	r1, #33	; 0x21
 80016e4:	d009      	beq.n	80016fa <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016e6:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80016e8:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 80016ec:	2922      	cmp	r1, #34	; 0x22
 80016ee:	d014      	beq.n	800171a <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	f042 0210 	orr.w	r2, r2, #16
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016f8:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80016fa:	0600      	lsls	r0, r0, #24
 80016fc:	d5f3      	bpl.n	80016e6 <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 80016fe:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001700:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001702:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001704:	68d1      	ldr	r1, [r2, #12]
 8001706:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800170a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800170c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001710:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001712:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001716:	2922      	cmp	r1, #34	; 0x22
 8001718:	d1ea      	bne.n	80016f0 <UART_DMAError+0x18>
 800171a:	0641      	lsls	r1, r0, #25
 800171c:	d5e8      	bpl.n	80016f0 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 800171e:	2100      	movs	r1, #0
 8001720:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001722:	68d1      	ldr	r1, [r2, #12]
 8001724:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001728:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172a:	6951      	ldr	r1, [r2, #20]
 800172c:	f021 0101 	bic.w	r1, r1, #1
 8001730:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001734:	2901      	cmp	r1, #1
 8001736:	d103      	bne.n	8001740 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001738:	68d1      	ldr	r1, [r2, #12]
 800173a:	f021 0110 	bic.w	r1, r1, #16
 800173e:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001740:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001742:	2120      	movs	r1, #32
 8001744:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800174a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174c:	f042 0210 	orr.w	r2, r2, #16
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001752:	4770      	bx	lr

08001754 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001762:	f1bc 0f04 	cmp.w	ip, #4
 8001766:	bf28      	it	cs
 8001768:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176c:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	bf98      	it	ls
 8001774:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001776:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	bf88      	it	hi
 800177c:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177e:	ea21 0102 	bic.w	r1, r1, r2
 8001782:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d008      	beq.n	800179a <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	0109      	lsls	r1, r1, #4
 800178a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001794:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001798:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 800179c:	0109      	lsls	r1, r1, #4
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <LCD_Line.constprop.0>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	4686      	mov	lr, r0
 80017b2:	b0bb      	sub	sp, #236	; 0xec
{
	int deltaX = abs(x2 - x1);
 80017b4:	9202      	str	r2, [sp, #8]
 80017b6:	eba2 020e 	sub.w	r2, r2, lr
 80017ba:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80017be:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 80017c2:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80017c6:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 80017c8:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 80017ca:	460d      	mov	r5, r1
 80017cc:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80017d0:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 80017d4:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 80017d6:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 80017d8:	4572      	cmp	r2, lr
 80017da:	bf8c      	ite	hi
 80017dc:	2201      	movhi	r2, #1
 80017de:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80017e2:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 80017e6:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 80017e8:	bf34      	ite	cc
 80017ea:	2201      	movcc	r2, #1
 80017ec:	f04f 32ff 	movcs.w	r2, #4294967295
 80017f0:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80017f2:	f3c3 2285 	ubfx	r2, r3, #10, #6
 80017f6:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 80017fa:	0152      	lsls	r2, r2, #5
 80017fc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001800:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8001804:	9136      	str	r1, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001806:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800180a:	f3c2 3180 	ubfx	r1, r2, #14, #1
 800180e:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8001812:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001816:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 800181a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800181e:	2602      	movs	r6, #2
 8001820:	9103      	str	r1, [sp, #12]
 8001822:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8001826:	9104      	str	r1, [sp, #16]
 8001828:	f3c2 3100 	ubfx	r1, r2, #12, #1
 800182c:	9105      	str	r1, [sp, #20]
 800182e:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8001832:	9106      	str	r1, [sp, #24]
 8001834:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8001838:	9107      	str	r1, [sp, #28]
 800183a:	f3c2 2140 	ubfx	r1, r2, #9, #1
 800183e:	9108      	str	r1, [sp, #32]
 8001840:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8001844:	9109      	str	r1, [sp, #36]	; 0x24
 8001846:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 800184a:	910a      	str	r1, [sp, #40]	; 0x28
 800184c:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8001850:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001854:	920c      	str	r2, [sp, #48]	; 0x30
 8001856:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 800185a:	920d      	str	r2, [sp, #52]	; 0x34
 800185c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001860:	920e      	str	r2, [sp, #56]	; 0x38
 8001862:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8001866:	920f      	str	r2, [sp, #60]	; 0x3c
 8001868:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800186c:	9210      	str	r2, [sp, #64]	; 0x40
 800186e:	0a2a      	lsrs	r2, r5, #8
 8001870:	9225      	str	r2, [sp, #148]	; 0x94
 8001872:	0bea      	lsrs	r2, r5, #15
 8001874:	9233      	str	r2, [sp, #204]	; 0xcc
 8001876:	0baa      	lsrs	r2, r5, #14
 8001878:	9231      	str	r2, [sp, #196]	; 0xc4
 800187a:	0b6a      	lsrs	r2, r5, #13
 800187c:	922f      	str	r2, [sp, #188]	; 0xbc
 800187e:	0b2a      	lsrs	r2, r5, #12
 8001880:	922d      	str	r2, [sp, #180]	; 0xb4
 8001882:	0aea      	lsrs	r2, r5, #11
 8001884:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001888:	922b      	str	r2, [sp, #172]	; 0xac
 800188a:	0aaa      	lsrs	r2, r5, #10
 800188c:	9311      	str	r3, [sp, #68]	; 0x44
 800188e:	9229      	str	r2, [sp, #164]	; 0xa4
 8001890:	f005 0301 	and.w	r3, r5, #1
 8001894:	0a6a      	lsrs	r2, r5, #9
 8001896:	910b      	str	r1, [sp, #44]	; 0x2c
 8001898:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 800189a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800189c:	9323      	str	r3, [sp, #140]	; 0x8c
 800189e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80018a2:	9324      	str	r3, [sp, #144]	; 0x90
 80018a4:	ea4f 33de 	mov.w	r3, lr, lsr #15
 80018a8:	9332      	str	r3, [sp, #200]	; 0xc8
 80018aa:	ea4f 339e 	mov.w	r3, lr, lsr #14
 80018ae:	9330      	str	r3, [sp, #192]	; 0xc0
 80018b0:	ea4f 335e 	mov.w	r3, lr, lsr #13
 80018b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80018b6:	ea4f 331e 	mov.w	r3, lr, lsr #12
 80018ba:	932c      	str	r3, [sp, #176]	; 0xb0
 80018bc:	ea4f 23de 	mov.w	r3, lr, lsr #11
 80018c0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80018c2:	932a      	str	r3, [sp, #168]	; 0xa8
 80018c4:	ea4f 239e 	mov.w	r3, lr, lsr #10
 80018c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80018ca:	ea4f 235e 	mov.w	r3, lr, lsr #9
 80018ce:	1a52      	subs	r2, r2, r1
 80018d0:	9326      	str	r3, [sp, #152]	; 0x98
 80018d2:	fa5f f38e 	uxtb.w	r3, lr
 80018d6:	9212      	str	r2, [sp, #72]	; 0x48
 80018d8:	9320      	str	r3, [sp, #128]	; 0x80
 80018da:	b2ea      	uxtb	r2, r5
 80018dc:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e0:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001c3c <LCD_Line.constprop.0+0x490>
 80018e4:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001c40 <LCD_Line.constprop.0+0x494>
 80018e8:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001c44 <LCD_Line.constprop.0+0x498>
 80018ec:	9221      	str	r2, [sp, #132]	; 0x84
 80018ee:	9322      	str	r3, [sp, #136]	; 0x88
 80018f0:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 80018f4:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 80018f8:	f8ca c010 	str.w	ip, [sl, #16]
 80018fc:	f8ca b010 	str.w	fp, [sl, #16]
 8001900:	f8c9 0010 	str.w	r0, [r9, #16]
 8001904:	f8c9 c010 	str.w	ip, [r9, #16]
 8001908:	f8c8 4010 	str.w	r4, [r8, #16]
 800190c:	f8c8 7010 	str.w	r7, [r8, #16]
 8001910:	f8c8 0010 	str.w	r0, [r8, #16]
 8001914:	f8c8 c010 	str.w	ip, [r8, #16]
 8001918:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800191a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800191c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001920:	b2ab      	uxth	r3, r5
 8001922:	9315      	str	r3, [sp, #84]	; 0x54
 8001924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001928:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800192e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001932:	f8c8 1010 	str.w	r1, [r8, #16]
 8001936:	f8c9 7010 	str.w	r7, [r9, #16]
 800193a:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800193e:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001942:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001950:	f8c9 3010 	str.w	r3, [r9, #16]
 8001954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001958:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001960:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001964:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001968:	f8ca 6010 	str.w	r6, [sl, #16]
 800196c:	f8ca 3010 	str.w	r3, [sl, #16]
 8001970:	2301      	movs	r3, #1
 8001972:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001976:	f8ca b010 	str.w	fp, [sl, #16]
 800197a:	f8c9 0010 	str.w	r0, [r9, #16]
 800197e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001982:	f8c8 4010 	str.w	r4, [r8, #16]
 8001986:	f8c8 7010 	str.w	r7, [r8, #16]
 800198a:	f8c8 0010 	str.w	r0, [r8, #16]
 800198e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001992:	f8c8 e010 	str.w	lr, [r8, #16]
 8001996:	f8c8 1010 	str.w	r1, [r8, #16]
 800199a:	2d00      	cmp	r5, #0
 800199c:	f000 8560 	beq.w	8002460 <LCD_Line.constprop.0+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80019a6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80019a8:	f013 0301 	ands.w	r3, r3, #1
 80019ac:	9316      	str	r3, [sp, #88]	; 0x58
 80019ae:	bf1c      	itt	ne
 80019b0:	2308      	movne	r3, #8
 80019b2:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80019b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b8:	bf08      	it	eq
 80019ba:	f8c9 4010 	streq.w	r4, [r9, #16]
 80019be:	f013 0301 	ands.w	r3, r3, #1
 80019c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80019c4:	bf0c      	ite	eq
 80019c6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	2310      	movne	r3, #16
 80019cc:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80019d2:	f013 0301 	ands.w	r3, r3, #1
 80019d6:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d8:	bf0c      	ite	eq
 80019da:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80019de:	2320      	movne	r3, #32
 80019e0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80019e6:	f013 0301 	ands.w	r3, r3, #1
 80019ea:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ec:	bf0c      	ite	eq
 80019ee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	2340      	movne	r3, #64	; 0x40
 80019f4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80019fa:	f013 0301 	ands.w	r3, r3, #1
 80019fe:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a00:	bf0c      	ite	eq
 8001a02:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	2380      	movne	r3, #128	; 0x80
 8001a08:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001a0e:	f013 0301 	ands.w	r3, r3, #1
 8001a12:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a14:	bf0c      	ite	eq
 8001a16:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	2310      	movne	r3, #16
 8001a1c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001a20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a22:	f013 0301 	ands.w	r3, r3, #1
 8001a26:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a28:	bf0c      	ite	eq
 8001a2a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	2320      	movne	r3, #32
 8001a30:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a38:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a3c:	f8ca 6010 	str.w	r6, [sl, #16]
 8001a40:	f8ca 3010 	str.w	r3, [sl, #16]
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a4e:	f8ca b010 	str.w	fp, [sl, #16]
 8001a52:	f8c9 0010 	str.w	r0, [r9, #16]
 8001a56:	f8c9 c010 	str.w	ip, [r9, #16]
 8001a5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001a5e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001a62:	f8c8 0010 	str.w	r0, [r8, #16]
 8001a66:	f8c8 c010 	str.w	ip, [r8, #16]
 8001a6a:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a72:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001a78:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001a7a:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a7e:	09db      	lsrs	r3, r3, #7
 8001a80:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	bf16      	itet	ne
 8001a84:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a86:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001a8e:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a92:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001a96:	931d      	str	r3, [sp, #116]	; 0x74
 8001a98:	bf16      	itet	ne
 8001a9a:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9c:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001aa0:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001aa4:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001aa8:	f01e 0f20 	tst.w	lr, #32
 8001aac:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	bf0c      	ite	eq
 8001ab0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001ab6:	f01e 0f10 	tst.w	lr, #16
 8001aba:	f8c9 3010 	str.w	r3, [r9, #16]
 8001abe:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001ac2:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac4:	bf0c      	ite	eq
 8001ac6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001acc:	f01e 0f08 	tst.w	lr, #8
 8001ad0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad4:	bf0c      	ite	eq
 8001ad6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001adc:	f01e 0f04 	tst.w	lr, #4
 8001ae0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae4:	bf0c      	ite	eq
 8001ae6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001aec:	f01e 0f02 	tst.w	lr, #2
 8001af0:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001af4:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001af8:	f8c9 3010 	str.w	r3, [r9, #16]
 8001afc:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b00:	bf0c      	ite	eq
 8001b02:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	f04f 0e10 	movne.w	lr, #16
 8001b0a:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b0e:	fa1f fe85 	uxth.w	lr, r5
 8001b12:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	f040 849c 	bne.w	8002454 <LCD_Line.constprop.0+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001b20:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b24:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001b28:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b30:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b34:	f8ca 5010 	str.w	r5, [sl, #16]
 8001b38:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b3c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001b40:	f8ca b010 	str.w	fp, [sl, #16]
 8001b44:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b48:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b50:	f8c8 7010 	str.w	r7, [r8, #16]
 8001b54:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b58:	f8c8 c010 	str.w	ip, [r8, #16]
 8001b5c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b60:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001b66:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	f000 846e 	beq.w	800244c <LCD_Line.constprop.0+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8001b70:	f04f 0e04 	mov.w	lr, #4
 8001b74:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	f040 8460 	bne.w	8002440 <LCD_Line.constprop.0+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b80:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001b84:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001b86:	2d00      	cmp	r5, #0
 8001b88:	f040 8454 	bne.w	8002434 <LCD_Line.constprop.0+0xc88>
 8001b8c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001b90:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001b94:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	f040 8446 	bne.w	8002428 <LCD_Line.constprop.0+0xc7c>
 8001b9c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ba0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001ba4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	f040 8438 	bne.w	800241c <LCD_Line.constprop.0+0xc70>
 8001bac:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001bb0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001bb4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	f040 842a 	bne.w	8002410 <LCD_Line.constprop.0+0xc64>
 8001bbc:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001bc0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001bc4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	f040 841c 	bne.w	8002404 <LCD_Line.constprop.0+0xc58>
 8001bcc:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001bd0:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bd4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	f040 840e 	bne.w	80023f8 <LCD_Line.constprop.0+0xc4c>
 8001bdc:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001be0:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001be4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001be8:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bec:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bf0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001bf4:	f8ca 5010 	str.w	r5, [sl, #16]
 8001bf8:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfc:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001c00:	f8ca b010 	str.w	fp, [sl, #16]
 8001c04:	f8c9 0010 	str.w	r0, [r9, #16]
 8001c08:	f8c9 c010 	str.w	ip, [r9, #16]
 8001c0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8001c10:	f8c8 7010 	str.w	r7, [r8, #16]
 8001c14:	f8c8 0010 	str.w	r0, [r8, #16]
 8001c18:	f8c8 c010 	str.w	ip, [r8, #16]
 8001c1c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001c20:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c24:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001c26:	f8c8 e010 	str.w	lr, [r8, #16]
 8001c2a:	2d00      	cmp	r5, #0
 8001c2c:	f000 83e1 	beq.w	80023f2 <LCD_Line.constprop.0+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8001c30:	f04f 0e04 	mov.w	lr, #4
 8001c34:	f8c9 e010 	str.w	lr, [r9, #16]
 8001c38:	e006      	b.n	8001c48 <LCD_Line.constprop.0+0x49c>
 8001c3a:	bf00      	nop
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001c48:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001c4a:	2d00      	cmp	r5, #0
 8001c4c:	f040 83cc 	bne.w	80023e8 <LCD_Line.constprop.0+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c50:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c54:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	f040 83c1 	bne.w	80023de <LCD_Line.constprop.0+0xc32>
 8001c5c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001c60:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001c64:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	f040 83b4 	bne.w	80023d4 <LCD_Line.constprop.0+0xc28>
 8001c6c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001c70:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001c74:	2900      	cmp	r1, #0
 8001c76:	f040 83a9 	bne.w	80023cc <LCD_Line.constprop.0+0xc20>
 8001c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c7e:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	f040 839e 	bne.w	80023c4 <LCD_Line.constprop.0+0xc18>
 8001c88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c8c:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8393 	bne.w	80023bc <LCD_Line.constprop.0+0xc10>
 8001c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001c9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8387 	bne.w	80023b4 <LCD_Line.constprop.0+0xc08>
 8001ca6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001caa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001cb2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	f8ca 6010 	str.w	r6, [sl, #16]
 8001cbc:	f8ca 3010 	str.w	r3, [sl, #16]
 8001cc0:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc2:	f8ca c010 	str.w	ip, [sl, #16]
 8001cc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cca:	f8ca b010 	str.w	fp, [sl, #16]
 8001cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd2:	f8c9 0010 	str.w	r0, [r9, #16]
 8001cd6:	f8c9 c010 	str.w	ip, [r9, #16]
 8001cda:	f8c8 4010 	str.w	r4, [r8, #16]
 8001cde:	f8c8 7010 	str.w	r7, [r8, #16]
 8001ce2:	f8c8 0010 	str.w	r0, [r8, #16]
 8001ce6:	f8c8 c010 	str.w	ip, [r8, #16]
 8001cea:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8001cec:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001cee:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	f8c8 1010 	str.w	r1, [r8, #16]
 8001cf6:	f8c8 2010 	str.w	r2, [r8, #16]
 8001cfa:	f8c9 7010 	str.w	r7, [r9, #16]
 8001cfe:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d0a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	2340      	movs	r3, #64	; 0x40
 8001d10:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d18:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d22:	2320      	movs	r3, #32
 8001d24:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d34:	f8ca 3010 	str.w	r3, [sl, #16]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3e:	f8ca b010 	str.w	fp, [sl, #16]
 8001d42:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d46:	f8c9 c010 	str.w	ip, [r9, #16]
 8001d4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d4e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001d52:	f8c8 0010 	str.w	r0, [r8, #16]
 8001d56:	f8c8 c010 	str.w	ip, [r8, #16]
 8001d5a:	f8c8 1010 	str.w	r1, [r8, #16]
 8001d5e:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d62:	2d00      	cmp	r5, #0
 8001d64:	f000 8323 	beq.w	80023ae <LCD_Line.constprop.0+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001d70:	f013 0301 	ands.w	r3, r3, #1
 8001d74:	931b      	str	r3, [sp, #108]	; 0x6c
 8001d76:	bf1c      	itt	ne
 8001d78:	2308      	movne	r3, #8
 8001d7a:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d80:	bf08      	it	eq
 8001d82:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001d86:	f013 0301 	ands.w	r3, r3, #1
 8001d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d8c:	bf0c      	ite	eq
 8001d8e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	2310      	movne	r3, #16
 8001d94:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001d9a:	f013 0301 	ands.w	r3, r3, #1
 8001d9e:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da0:	bf0c      	ite	eq
 8001da2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	2320      	movne	r3, #32
 8001da8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001dae:	f013 0301 	ands.w	r3, r3, #1
 8001db2:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db4:	bf0c      	ite	eq
 8001db6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	2340      	movne	r3, #64	; 0x40
 8001dbc:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001dc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001dc2:	f013 0301 	ands.w	r3, r3, #1
 8001dc6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc8:	bf0c      	ite	eq
 8001dca:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	2380      	movne	r3, #128	; 0x80
 8001dd0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001dd6:	f013 0301 	ands.w	r3, r3, #1
 8001dda:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	bf0c      	ite	eq
 8001dde:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	2310      	movne	r3, #16
 8001de4:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001de8:	f01e 0301 	ands.w	r3, lr, #1
 8001dec:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dee:	bf0c      	ite	eq
 8001df0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001df4:	2320      	movne	r3, #32
 8001df6:	f8c8 3010 	str.w	r3, [r8, #16]
 8001dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfe:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e06:	f8ca 3010 	str.w	r3, [sl, #16]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e14:	f8ca b010 	str.w	fp, [sl, #16]
 8001e18:	f8c9 0010 	str.w	r0, [r9, #16]
 8001e1c:	f8c9 c010 	str.w	ip, [r9, #16]
 8001e20:	f8c8 4010 	str.w	r4, [r8, #16]
 8001e24:	f8c8 7010 	str.w	r7, [r8, #16]
 8001e28:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e2c:	f8c8 c010 	str.w	ip, [r8, #16]
 8001e30:	f8c8 3010 	str.w	r3, [r8, #16]
 8001e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e38:	f8c8 3010 	str.w	r3, [r8, #16]
 8001e3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001e3e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001e40:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e44:	09db      	lsrs	r3, r3, #7
 8001e46:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8001e48:	bf16      	itet	ne
 8001e4a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4c:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e50:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001e54:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e58:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001e5c:	9314      	str	r3, [sp, #80]	; 0x50
 8001e5e:	bf16      	itet	ne
 8001e60:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e62:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001e6a:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e6e:	f01e 0f20 	tst.w	lr, #32
 8001e72:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e74:	bf0c      	ite	eq
 8001e76:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e7c:	f01e 0f10 	tst.w	lr, #16
 8001e80:	f8c9 3010 	str.w	r3, [r9, #16]
 8001e84:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001e88:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	bf0c      	ite	eq
 8001e8c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001e90:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e92:	f01e 0f08 	tst.w	lr, #8
 8001e96:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e9a:	bf0c      	ite	eq
 8001e9c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001ea0:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ea2:	f01e 0f04 	tst.w	lr, #4
 8001ea6:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eaa:	bf0c      	ite	eq
 8001eac:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001eb0:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001eb2:	f01e 0f02 	tst.w	lr, #2
 8001eb6:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001eba:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001ebe:	f8c9 3010 	str.w	r3, [r9, #16]
 8001ec2:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec6:	bf0c      	ite	eq
 8001ec8:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ecc:	f04f 0e10 	movne.w	lr, #16
 8001ed0:	f8c8 e010 	str.w	lr, [r8, #16]
 8001ed4:	fa1f fe85 	uxth.w	lr, r5
 8001ed8:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	f040 8261 	bne.w	80023a4 <LCD_Line.constprop.0+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ee6:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001eee:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	f8ca 6010 	str.w	r6, [sl, #16]
 8001efa:	f8ca 5010 	str.w	r5, [sl, #16]
 8001efe:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f02:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001f06:	f8ca b010 	str.w	fp, [sl, #16]
 8001f0a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001f0e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001f12:	f8c8 4010 	str.w	r4, [r8, #16]
 8001f16:	f8c8 7010 	str.w	r7, [r8, #16]
 8001f1a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f1e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001f22:	f8c8 e010 	str.w	lr, [r8, #16]
 8001f26:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001f2a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001f2c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001f30:	2d00      	cmp	r5, #0
 8001f32:	f000 8234 	beq.w	800239e <LCD_Line.constprop.0+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	f04f 0e04 	mov.w	lr, #4
 8001f3a:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001f3e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	f040 8227 	bne.w	8002394 <LCD_Line.constprop.0+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f46:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001f4a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	f040 821c 	bne.w	800238a <LCD_Line.constprop.0+0xbde>
 8001f52:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f56:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001f5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	f040 820f 	bne.w	8002380 <LCD_Line.constprop.0+0xbd4>
 8001f62:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001f66:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001f6a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	f040 8202 	bne.w	8002376 <LCD_Line.constprop.0+0xbca>
 8001f72:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001f76:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001f7a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	f040 81f5 	bne.w	800236c <LCD_Line.constprop.0+0xbc0>
 8001f82:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001f86:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001f8a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	f040 81e8 	bne.w	8002362 <LCD_Line.constprop.0+0xbb6>
 8001f92:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f96:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001f9a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	f040 81db 	bne.w	8002358 <LCD_Line.constprop.0+0xbac>
 8001fa2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001fa6:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001fae:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	f8ca 6010 	str.w	r6, [sl, #16]
 8001fba:	f8ca 5010 	str.w	r5, [sl, #16]
 8001fbe:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001fc6:	f8ca b010 	str.w	fp, [sl, #16]
 8001fca:	f8c9 0010 	str.w	r0, [r9, #16]
 8001fce:	f8c9 c010 	str.w	ip, [r9, #16]
 8001fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8001fd6:	f8c8 7010 	str.w	r7, [r8, #16]
 8001fda:	f8c8 0010 	str.w	r0, [r8, #16]
 8001fde:	f8c8 c010 	str.w	ip, [r8, #16]
 8001fe2:	f8c8 e010 	str.w	lr, [r8, #16]
 8001fe6:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001fea:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001fec:	f8c8 e010 	str.w	lr, [r8, #16]
 8001ff0:	2d00      	cmp	r5, #0
 8001ff2:	f000 81ae 	beq.w	8002352 <LCD_Line.constprop.0+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	f04f 0e04 	mov.w	lr, #4
 8001ffa:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001ffe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002000:	2d00      	cmp	r5, #0
 8002002:	f040 81a1 	bne.w	8002348 <LCD_Line.constprop.0+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002006:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800200a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800200c:	2d00      	cmp	r5, #0
 800200e:	f040 8196 	bne.w	800233e <LCD_Line.constprop.0+0xb92>
 8002012:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002016:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800201a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800201c:	2d00      	cmp	r5, #0
 800201e:	f040 8189 	bne.w	8002334 <LCD_Line.constprop.0+0xb88>
 8002022:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002026:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800202a:	2900      	cmp	r1, #0
 800202c:	f040 817e 	bne.w	800232c <LCD_Line.constprop.0+0xb80>
 8002030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002034:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002038:	2a00      	cmp	r2, #0
 800203a:	f040 8173 	bne.w	8002324 <LCD_Line.constprop.0+0xb78>
 800203e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002042:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8168 	bne.w	800231c <LCD_Line.constprop.0+0xb70>
 800204c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002050:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 815c 	bne.w	8002314 <LCD_Line.constprop.0+0xb68>
 800205c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002060:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002068:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800206c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002070:	f8ca 6010 	str.w	r6, [sl, #16]
 8002074:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	f8ca c010 	str.w	ip, [sl, #16]
 800207c:	f8ca b010 	str.w	fp, [sl, #16]
 8002080:	f8c9 0010 	str.w	r0, [r9, #16]
 8002084:	f8c9 c010 	str.w	ip, [r9, #16]
 8002088:	f8c8 4010 	str.w	r4, [r8, #16]
 800208c:	f8c8 7010 	str.w	r7, [r8, #16]
 8002090:	f8c8 0010 	str.w	r0, [r8, #16]
 8002094:	f8c8 c010 	str.w	ip, [r8, #16]
 8002098:	f8c8 2010 	str.w	r2, [r8, #16]
 800209c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a0:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020a4:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80020aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ae:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	f8c9 2010 	str.w	r2, [r9, #16]
 80020b6:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020bc:	f8c9 2010 	str.w	r2, [r9, #16]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ca:	f8c8 2010 	str.w	r2, [r8, #16]
 80020ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020d8:	f8ca 6010 	str.w	r6, [sl, #16]
 80020dc:	f8ca 1010 	str.w	r1, [sl, #16]
 80020e0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80020e4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	f8ca b010 	str.w	fp, [sl, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 810f 	beq.w	800230e <LCD_Line.constprop.0+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 80020f0:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80020f4:	9b03      	ldr	r3, [sp, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8106 	beq.w	8002308 <LCD_Line.constprop.0+0xb5c>
 80020fc:	2301      	movs	r3, #1
 80020fe:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002102:	9b04      	ldr	r3, [sp, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80fc 	beq.w	8002302 <LCD_Line.constprop.0+0xb56>
 800210a:	2308      	movs	r3, #8
 800210c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002110:	9b05      	ldr	r3, [sp, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80f2 	beq.w	80022fc <LCD_Line.constprop.0+0xb50>
 8002118:	2304      	movs	r3, #4
 800211a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800211e:	9b06      	ldr	r3, [sp, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80e8 	beq.w	80022f6 <LCD_Line.constprop.0+0xb4a>
 8002126:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800212a:	9b07      	ldr	r3, [sp, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80df 	beq.w	80022f0 <LCD_Line.constprop.0+0xb44>
 8002132:	2301      	movs	r3, #1
 8002134:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002138:	9b08      	ldr	r3, [sp, #32]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d3 	beq.w	80022e6 <LCD_Line.constprop.0+0xb3a>
 8002140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002144:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80c6 	beq.w	80022dc <LCD_Line.constprop.0+0xb30>
 8002150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002154:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80bb 	beq.w	80022d6 <LCD_Line.constprop.0+0xb2a>
 8002160:	2304      	movs	r3, #4
 8002162:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b1 	beq.w	80022d0 <LCD_Line.constprop.0+0xb24>
 800216e:	2308      	movs	r3, #8
 8002170:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a5 	beq.w	80022c6 <LCD_Line.constprop.0+0xb1a>
 800217c:	2310      	movs	r3, #16
 800217e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8099 	beq.w	80022bc <LCD_Line.constprop.0+0xb10>
 800218a:	2320      	movs	r3, #32
 800218c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808d 	beq.w	80022b2 <LCD_Line.constprop.0+0xb06>
 8002198:	2340      	movs	r3, #64	; 0x40
 800219a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800219e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8081 	beq.w	80022a8 <LCD_Line.constprop.0+0xafc>
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80021ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <LCD_Line.constprop.0+0xaf2>
 80021b2:	2310      	movs	r3, #16
 80021b4:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80021b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06a      	beq.n	8002294 <LCD_Line.constprop.0+0xae8>
 80021be:	2320      	movs	r3, #32
 80021c0:	f8c8 3010 	str.w	r3, [r8, #16]
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80021cc:	f8ca 6010 	str.w	r6, [sl, #16]
 80021d0:	f8ca 3010 	str.w	r3, [sl, #16]
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
		if (x1 == x2 && y1 == y2)
 80021d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80021d8:	4293      	cmp	r3, r2
 80021da:	f000 8145 	beq.w	8002468 <LCD_Line.constprop.0+0xcbc>
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80021de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 80021e0:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 80021e2:	425b      	negs	r3, r3
 80021e4:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 80021e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 80021ec:	da27      	bge.n	800223e <LCD_Line.constprop.0+0xa92>
		{
			error -= deltaY;
			x1 += signX;
 80021ee:	9d01      	ldr	r5, [sp, #4]
 80021f0:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 80021f4:	4475      	add	r5, lr
 80021f6:	462b      	mov	r3, r5
			error -= deltaY;
 80021f8:	460d      	mov	r5, r1
 80021fa:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80021fc:	1a69      	subs	r1, r5, r1
 80021fe:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8002200:	b299      	uxth	r1, r3
 8002202:	9101      	str	r1, [sp, #4]
 8002204:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002208:	9124      	str	r1, [sp, #144]	; 0x90
 800220a:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800220e:	9132      	str	r1, [sp, #200]	; 0xc8
 8002210:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002214:	9130      	str	r1, [sp, #192]	; 0xc0
 8002216:	f3c3 3142 	ubfx	r1, r3, #13, #3
 800221a:	912e      	str	r1, [sp, #184]	; 0xb8
 800221c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002220:	912c      	str	r1, [sp, #176]	; 0xb0
 8002222:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002226:	912a      	str	r1, [sp, #168]	; 0xa8
 8002228:	f3c3 2185 	ubfx	r1, r3, #10, #6
 800222c:	9128      	str	r1, [sp, #160]	; 0xa0
 800222e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002232:	9126      	str	r1, [sp, #152]	; 0x98
 8002234:	b2d9      	uxtb	r1, r3
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	9120      	str	r1, [sp, #128]	; 0x80
 800223c:	9322      	str	r3, [sp, #136]	; 0x88
		}
		if (error2 < deltaX)
 800223e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002240:	4291      	cmp	r1, r2
 8002242:	f77f ab57 	ble.w	80018f4 <LCD_Line.constprop.0+0x148>
		{
			error += deltaX;
			y1 += signY;
 8002246:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002248:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800224a:	4413      	add	r3, r2
			error += deltaX;
 800224c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800224e:	440a      	add	r2, r1
 8002250:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 8002252:	b29a      	uxth	r2, r3
 8002254:	9235      	str	r2, [sp, #212]	; 0xd4
 8002256:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800225a:	9225      	str	r2, [sp, #148]	; 0x94
 800225c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002260:	9233      	str	r2, [sp, #204]	; 0xcc
 8002262:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002266:	9231      	str	r2, [sp, #196]	; 0xc4
 8002268:	f3c3 3242 	ubfx	r2, r3, #13, #3
 800226c:	922f      	str	r2, [sp, #188]	; 0xbc
 800226e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002272:	922d      	str	r2, [sp, #180]	; 0xb4
 8002274:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002278:	922b      	str	r2, [sp, #172]	; 0xac
 800227a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 800227e:	9229      	str	r2, [sp, #164]	; 0xa4
 8002280:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002284:	9227      	str	r2, [sp, #156]	; 0x9c
 8002286:	b2da      	uxtb	r2, r3
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	9221      	str	r2, [sp, #132]	; 0x84
 800228e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002290:	f7ff bb30 	b.w	80018f4 <LCD_Line.constprop.0+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002298:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800229c:	e792      	b.n	80021c4 <LCD_Line.constprop.0+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a2:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022a6:	e787      	b.n	80021b8 <LCD_Line.constprop.0+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022ac:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022b0:	e77c      	b.n	80021ac <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022ba:	e770      	b.n	800219e <LCD_Line.constprop.0+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c0:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022c4:	e764      	b.n	8002190 <LCD_Line.constprop.0+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ca:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022ce:	e758      	b.n	8002182 <LCD_Line.constprop.0+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d0:	f8c9 4010 	str.w	r4, [r9, #16]
}
 80022d4:	e74e      	b.n	8002174 <LCD_Line.constprop.0+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d6:	f8c9 7010 	str.w	r7, [r9, #16]
}
 80022da:	e744      	b.n	8002166 <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022e4:	e738      	b.n	8002158 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022ea:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022ee:	e72b      	b.n	8002148 <LCD_Line.constprop.0+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f0:	f8c8 c010 	str.w	ip, [r8, #16]
}
 80022f4:	e720      	b.n	8002138 <LCD_Line.constprop.0+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f6:	f8c8 0010 	str.w	r0, [r8, #16]
}
 80022fa:	e716      	b.n	800212a <LCD_Line.constprop.0+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fc:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8002300:	e70d      	b.n	800211e <LCD_Line.constprop.0+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002302:	f8c8 4010 	str.w	r4, [r8, #16]
}
 8002306:	e703      	b.n	8002110 <LCD_Line.constprop.0+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002308:	f8c9 c010 	str.w	ip, [r9, #16]
}
 800230c:	e6f9      	b.n	8002102 <LCD_Line.constprop.0+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230e:	f8c9 0010 	str.w	r0, [r9, #16]
}
 8002312:	e6ef      	b.n	80020f4 <LCD_Line.constprop.0+0x948>
    GPIOx->BSRR = GPIO_Pin;
 8002314:	2320      	movs	r3, #32
 8002316:	f8c8 3010 	str.w	r3, [r8, #16]
 800231a:	e6a3      	b.n	8002064 <LCD_Line.constprop.0+0x8b8>
 800231c:	2310      	movs	r3, #16
 800231e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002322:	e697      	b.n	8002054 <LCD_Line.constprop.0+0x8a8>
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	f8c9 2010 	str.w	r2, [r9, #16]
 800232a:	e68c      	b.n	8002046 <LCD_Line.constprop.0+0x89a>
 800232c:	2140      	movs	r1, #64	; 0x40
 800232e:	f8c9 1010 	str.w	r1, [r9, #16]
 8002332:	e681      	b.n	8002038 <LCD_Line.constprop.0+0x88c>
 8002334:	f04f 0e20 	mov.w	lr, #32
 8002338:	f8c9 e010 	str.w	lr, [r9, #16]
 800233c:	e675      	b.n	800202a <LCD_Line.constprop.0+0x87e>
 800233e:	f04f 0e10 	mov.w	lr, #16
 8002342:	f8c9 e010 	str.w	lr, [r9, #16]
 8002346:	e668      	b.n	800201a <LCD_Line.constprop.0+0x86e>
 8002348:	f04f 0e08 	mov.w	lr, #8
 800234c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002350:	e65b      	b.n	800200a <LCD_Line.constprop.0+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002352:	f8c9 7010 	str.w	r7, [r9, #16]
 8002356:	e652      	b.n	8001ffe <LCD_Line.constprop.0+0x852>
    GPIOx->BSRR = GPIO_Pin;
 8002358:	f04f 0e20 	mov.w	lr, #32
 800235c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002360:	e623      	b.n	8001faa <LCD_Line.constprop.0+0x7fe>
 8002362:	f04f 0e10 	mov.w	lr, #16
 8002366:	f8c8 e010 	str.w	lr, [r8, #16]
 800236a:	e616      	b.n	8001f9a <LCD_Line.constprop.0+0x7ee>
 800236c:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002370:	f8c9 e010 	str.w	lr, [r9, #16]
 8002374:	e609      	b.n	8001f8a <LCD_Line.constprop.0+0x7de>
 8002376:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800237a:	f8c9 e010 	str.w	lr, [r9, #16]
 800237e:	e5fc      	b.n	8001f7a <LCD_Line.constprop.0+0x7ce>
 8002380:	f04f 0e20 	mov.w	lr, #32
 8002384:	f8c9 e010 	str.w	lr, [r9, #16]
 8002388:	e5ef      	b.n	8001f6a <LCD_Line.constprop.0+0x7be>
 800238a:	f04f 0e10 	mov.w	lr, #16
 800238e:	f8c9 e010 	str.w	lr, [r9, #16]
 8002392:	e5e2      	b.n	8001f5a <LCD_Line.constprop.0+0x7ae>
 8002394:	f04f 0e08 	mov.w	lr, #8
 8002398:	f8c9 e010 	str.w	lr, [r9, #16]
 800239c:	e5d5      	b.n	8001f4a <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239e:	f8c9 7010 	str.w	r7, [r9, #16]
 80023a2:	e5cc      	b.n	8001f3e <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80023a4:	f04f 0e20 	mov.w	lr, #32
 80023a8:	f8c8 e010 	str.w	lr, [r8, #16]
 80023ac:	e59d      	b.n	8001eea <LCD_Line.constprop.0+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ae:	f8c9 7010 	str.w	r7, [r9, #16]
 80023b2:	e4dc      	b.n	8001d6e <LCD_Line.constprop.0+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	2320      	movs	r3, #32
 80023b6:	f8c8 3010 	str.w	r3, [r8, #16]
 80023ba:	e478      	b.n	8001cae <LCD_Line.constprop.0+0x502>
 80023bc:	2310      	movs	r3, #16
 80023be:	f8c8 3010 	str.w	r3, [r8, #16]
 80023c2:	e46c      	b.n	8001c9e <LCD_Line.constprop.0+0x4f2>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	f8c9 2010 	str.w	r2, [r9, #16]
 80023ca:	e461      	b.n	8001c90 <LCD_Line.constprop.0+0x4e4>
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	f8c9 1010 	str.w	r1, [r9, #16]
 80023d2:	e456      	b.n	8001c82 <LCD_Line.constprop.0+0x4d6>
 80023d4:	f04f 0e20 	mov.w	lr, #32
 80023d8:	f8c9 e010 	str.w	lr, [r9, #16]
 80023dc:	e44a      	b.n	8001c74 <LCD_Line.constprop.0+0x4c8>
 80023de:	f04f 0e10 	mov.w	lr, #16
 80023e2:	f8c9 e010 	str.w	lr, [r9, #16]
 80023e6:	e43d      	b.n	8001c64 <LCD_Line.constprop.0+0x4b8>
 80023e8:	f04f 0e08 	mov.w	lr, #8
 80023ec:	f8c9 e010 	str.w	lr, [r9, #16]
 80023f0:	e430      	b.n	8001c54 <LCD_Line.constprop.0+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f2:	f8c9 7010 	str.w	r7, [r9, #16]
 80023f6:	e427      	b.n	8001c48 <LCD_Line.constprop.0+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 80023f8:	f04f 0e20 	mov.w	lr, #32
 80023fc:	f8c8 e010 	str.w	lr, [r8, #16]
 8002400:	f7ff bbf0 	b.w	8001be4 <LCD_Line.constprop.0+0x438>
 8002404:	f04f 0e10 	mov.w	lr, #16
 8002408:	f8c8 e010 	str.w	lr, [r8, #16]
 800240c:	f7ff bbe2 	b.w	8001bd4 <LCD_Line.constprop.0+0x428>
 8002410:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002414:	f8c9 e010 	str.w	lr, [r9, #16]
 8002418:	f7ff bbd4 	b.w	8001bc4 <LCD_Line.constprop.0+0x418>
 800241c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002420:	f8c9 e010 	str.w	lr, [r9, #16]
 8002424:	f7ff bbc6 	b.w	8001bb4 <LCD_Line.constprop.0+0x408>
 8002428:	f04f 0e20 	mov.w	lr, #32
 800242c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002430:	f7ff bbb8 	b.w	8001ba4 <LCD_Line.constprop.0+0x3f8>
 8002434:	f04f 0e10 	mov.w	lr, #16
 8002438:	f8c9 e010 	str.w	lr, [r9, #16]
 800243c:	f7ff bbaa 	b.w	8001b94 <LCD_Line.constprop.0+0x3e8>
 8002440:	f04f 0e08 	mov.w	lr, #8
 8002444:	f8c9 e010 	str.w	lr, [r9, #16]
 8002448:	f7ff bb9c 	b.w	8001b84 <LCD_Line.constprop.0+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002450:	f7ff bb92 	b.w	8001b78 <LCD_Line.constprop.0+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 8002454:	f04f 0e20 	mov.w	lr, #32
 8002458:	f8c8 e010 	str.w	lr, [r8, #16]
 800245c:	f7ff bb62 	b.w	8001b24 <LCD_Line.constprop.0+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002460:	f8c9 7010 	str.w	r7, [r9, #16]
 8002464:	f7ff ba9f 	b.w	80019a6 <LCD_Line.constprop.0+0x1fa>
		if (x1 == x2 && y1 == y2)
 8002468:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800246a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800246e:	f47f aeb6 	bne.w	80021de <LCD_Line.constprop.0+0xa32>
		}
	}
}
 8002472:	b03b      	add	sp, #236	; 0xec
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002478 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	b0ab      	sub	sp, #172	; 0xac
 800247e:	9123      	str	r1, [sp, #140]	; 0x8c
 8002480:	4619      	mov	r1, r3
 8002482:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 8002484:	1a13      	subs	r3, r2, r0
 8002486:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800248a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 800248e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8002490:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 8002492:	1acb      	subs	r3, r1, r3
 8002494:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002498:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800249c:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 800249e:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80024a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80024a2:	4282      	cmp	r2, r0
 80024a4:	bf8c      	ite	hi
 80024a6:	2201      	movhi	r2, #1
 80024a8:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80024ac:	4299      	cmp	r1, r3
 80024ae:	bf8c      	ite	hi
 80024b0:	2101      	movhi	r1, #1
 80024b2:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80024b6:	9227      	str	r2, [sp, #156]	; 0x9c
 80024b8:	0a1a      	lsrs	r2, r3, #8
 80024ba:	9214      	str	r2, [sp, #80]	; 0x50
 80024bc:	0bda      	lsrs	r2, r3, #15
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	0b9a      	lsrs	r2, r3, #14
 80024c2:	9220      	str	r2, [sp, #128]	; 0x80
 80024c4:	0b5a      	lsrs	r2, r3, #13
 80024c6:	921e      	str	r2, [sp, #120]	; 0x78
 80024c8:	0b1a      	lsrs	r2, r3, #12
 80024ca:	921c      	str	r2, [sp, #112]	; 0x70
 80024cc:	0ada      	lsrs	r2, r3, #11
 80024ce:	921a      	str	r2, [sp, #104]	; 0x68
 80024d0:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 80024d2:	9128      	str	r1, [sp, #160]	; 0xa0
 80024d4:	9218      	str	r2, [sp, #96]	; 0x60
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	0a5a      	lsrs	r2, r3, #9
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	9312      	str	r3, [sp, #72]	; 0x48
 80024e0:	f000 0301 	and.w	r3, r0, #1
 80024e4:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 80024e6:	4663      	mov	r3, ip
 80024e8:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80024ec:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 80024f0:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80024f4:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80024f8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80024fc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002500:	9216      	str	r2, [sp, #88]	; 0x58
 8002502:	0a02      	lsrs	r2, r0, #8
 8002504:	9213      	str	r2, [sp, #76]	; 0x4c
 8002506:	0bc2      	lsrs	r2, r0, #15
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	0b82      	lsrs	r2, r0, #14
 800250c:	921f      	str	r2, [sp, #124]	; 0x7c
 800250e:	0b42      	lsrs	r2, r0, #13
 8002510:	921d      	str	r2, [sp, #116]	; 0x74
 8002512:	0b02      	lsrs	r2, r0, #12
 8002514:	921b      	str	r2, [sp, #108]	; 0x6c
 8002516:	0ac2      	lsrs	r2, r0, #11
 8002518:	9219      	str	r2, [sp, #100]	; 0x64
 800251a:	0a82      	lsrs	r2, r0, #10
 800251c:	9122      	str	r1, [sp, #136]	; 0x88
 800251e:	9217      	str	r2, [sp, #92]	; 0x5c
 8002520:	b2c1      	uxtb	r1, r0
 8002522:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002524:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 8002526:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800252a:	9215      	str	r2, [sp, #84]	; 0x54
 800252c:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 800252e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002530:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002884 <LCD_Line.constprop.1+0x40c>
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	f8df a350 	ldr.w	sl, [pc, #848]	; 8002888 <LCD_Line.constprop.1+0x410>
 800253a:	f8df 9350 	ldr.w	r9, [pc, #848]	; 800288c <LCD_Line.constprop.1+0x414>
 800253e:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002540:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002544:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002548:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254a:	f8cb e010 	str.w	lr, [fp, #16]
 800254e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002552:	f8ca 7010 	str.w	r7, [sl, #16]
 8002556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800255a:	f8ca 4010 	str.w	r4, [sl, #16]
 800255e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002562:	f8c9 5010 	str.w	r5, [r9, #16]
 8002566:	f8c9 7010 	str.w	r7, [r9, #16]
 800256a:	f8c9 4010 	str.w	r4, [r9, #16]
 800256e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002572:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 8002574:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 8002576:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257a:	f8c9 1010 	str.w	r1, [r9, #16]
 800257e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002582:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002586:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800258a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800258e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002592:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002596:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800259a:	f8c9 2010 	str.w	r2, [r9, #16]
 800259e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a0:	f8c9 3010 	str.w	r3, [r9, #16]
 80025a4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025a8:	f8cb 2010 	str.w	r2, [fp, #16]
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	f8cb 2010 	str.w	r2, [fp, #16]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ba:	f8cb e010 	str.w	lr, [fp, #16]
 80025be:	f8ca 7010 	str.w	r7, [sl, #16]
 80025c2:	f8ca 4010 	str.w	r4, [sl, #16]
 80025c6:	f8c9 6010 	str.w	r6, [r9, #16]
 80025ca:	f8c9 5010 	str.w	r5, [r9, #16]
 80025ce:	f8c9 7010 	str.w	r7, [r9, #16]
 80025d2:	f8c9 4010 	str.w	r4, [r9, #16]
 80025d6:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	f8c9 1010 	str.w	r1, [r9, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 849f 	beq.w	8002f24 <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	2304      	movs	r3, #4
 80025e8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80025ee:	f013 0001 	ands.w	r0, r3, #1
 80025f2:	bf1c      	itt	ne
 80025f4:	2308      	movne	r3, #8
 80025f6:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fc:	bf08      	it	eq
 80025fe:	f8ca 6010 	streq.w	r6, [sl, #16]
 8002602:	f013 0301 	ands.w	r3, r3, #1
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	bf0c      	ite	eq
 800260a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800260e:	2310      	movne	r3, #16
 8002610:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002614:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002616:	f013 0301 	ands.w	r3, r3, #1
 800261a:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800261c:	bf0c      	ite	eq
 800261e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002622:	2320      	movne	r3, #32
 8002624:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002628:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800262a:	f013 0301 	ands.w	r3, r3, #1
 800262e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002630:	bf0c      	ite	eq
 8002632:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002636:	2340      	movne	r3, #64	; 0x40
 8002638:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800263c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800263e:	f013 0301 	ands.w	r3, r3, #1
 8002642:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002644:	bf0c      	ite	eq
 8002646:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800264a:	2380      	movne	r3, #128	; 0x80
 800264c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002650:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002652:	f013 0301 	ands.w	r3, r3, #1
 8002656:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002658:	bf0c      	ite	eq
 800265a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800265e:	2310      	movne	r3, #16
 8002660:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002664:	f01c 0301 	ands.w	r3, ip, #1
 8002668:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266a:	bf0c      	ite	eq
 800266c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002670:	2320      	movne	r3, #32
 8002672:	f8c9 3010 	str.w	r3, [r9, #16]
 8002676:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002678:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800267c:	f8cb 3010 	str.w	r3, [fp, #16]
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	f8cb 3010 	str.w	r3, [fp, #16]
 8002688:	2301      	movs	r3, #1
 800268a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002692:	f8cb e010 	str.w	lr, [fp, #16]
 8002696:	f8ca 7010 	str.w	r7, [sl, #16]
 800269a:	f8ca 4010 	str.w	r4, [sl, #16]
 800269e:	f8c9 6010 	str.w	r6, [r9, #16]
 80026a2:	f8c9 5010 	str.w	r5, [r9, #16]
 80026a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80026aa:	f8c9 4010 	str.w	r4, [r9, #16]
 80026ae:	f8c9 8010 	str.w	r8, [r9, #16]
 80026b2:	f8c9 3010 	str.w	r3, [r9, #16]
 80026b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80026b8:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026ba:	09d2      	lsrs	r2, r2, #7
 80026bc:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 80026be:	bf1c      	itt	ne
 80026c0:	2204      	movne	r2, #4
 80026c2:	f8ca 2010 	strne.w	r2, [sl, #16]
 80026c6:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ca:	bf08      	it	eq
 80026cc:	f8ca 5010 	streq.w	r5, [sl, #16]
 80026d0:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026d2:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80026d4:	bf4a      	itet	mi
 80026d6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d8:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026dc:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80026e0:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026e4:	0699      	lsls	r1, r3, #26
 80026e6:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e8:	bf54      	ite	pl
 80026ea:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	2210      	movmi	r2, #16
 80026f0:	f8ca 2010 	str.w	r2, [sl, #16]
 80026f4:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80026f8:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026fa:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fc:	bf54      	ite	pl
 80026fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002702:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002704:	0719      	lsls	r1, r3, #28
 8002706:	f8ca 2010 	str.w	r2, [sl, #16]
 800270a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800270e:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002710:	bf54      	ite	pl
 8002712:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002716:	2240      	movmi	r2, #64	; 0x40
 8002718:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800271c:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800271e:	bf54      	ite	pl
 8002720:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002724:	2280      	movmi	r2, #128	; 0x80
 8002726:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800272a:	f8ca 2010 	str.w	r2, [sl, #16]
 800272e:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002732:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002734:	bf54      	ite	pl
 8002736:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800273a:	2310      	movmi	r3, #16
 800273c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002742:	fa1f fc83 	uxth.w	ip, r3
 8002746:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 83e5 	bne.w	8002f1a <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002750:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002754:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002758:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800275c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002760:	f8cb c010 	str.w	ip, [fp, #16]
 8002764:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002768:	f8cb c010 	str.w	ip, [fp, #16]
 800276c:	f04f 0c01 	mov.w	ip, #1
 8002770:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002774:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800277a:	f8cb e010 	str.w	lr, [fp, #16]
 800277e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002782:	f8ca 4010 	str.w	r4, [sl, #16]
 8002786:	f8c9 6010 	str.w	r6, [r9, #16]
 800278a:	f8c9 5010 	str.w	r5, [r9, #16]
 800278e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002792:	f8c9 4010 	str.w	r4, [r9, #16]
 8002796:	f8c9 8010 	str.w	r8, [r9, #16]
 800279a:	f8c9 c010 	str.w	ip, [r9, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 83b8 	beq.w	8002f14 <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 80027a4:	f04f 0c04 	mov.w	ip, #4
 80027a8:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027ac:	2800      	cmp	r0, #0
 80027ae:	f040 83ad 	bne.w	8002f0c <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b2:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027b6:	9b03      	ldr	r3, [sp, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 83a3 	bne.w	8002f04 <LCD_Line.constprop.1+0xa8c>
 80027be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027c2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027c6:	9b04      	ldr	r3, [sp, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 8397 	bne.w	8002efc <LCD_Line.constprop.1+0xa84>
 80027ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027d2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 838b 	bne.w	8002ef4 <LCD_Line.constprop.1+0xa7c>
 80027de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80027e2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 837f 	bne.w	8002eec <LCD_Line.constprop.1+0xa74>
 80027ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027f2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027f6:	9b05      	ldr	r3, [sp, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8373 	bne.w	8002ee4 <LCD_Line.constprop.1+0xa6c>
 80027fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002802:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002806:	9b06      	ldr	r3, [sp, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8367 	bne.w	8002edc <LCD_Line.constprop.1+0xa64>
 800280e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002812:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002816:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002818:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800281c:	f8cb 0010 	str.w	r0, [fp, #16]
 8002820:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002824:	f8cb 0010 	str.w	r0, [fp, #16]
 8002828:	2001      	movs	r0, #1
 800282a:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800282e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002832:	9b07      	ldr	r3, [sp, #28]
 8002834:	f8cb e010 	str.w	lr, [fp, #16]
 8002838:	f8ca 7010 	str.w	r7, [sl, #16]
 800283c:	f8ca 4010 	str.w	r4, [sl, #16]
 8002840:	f8c9 6010 	str.w	r6, [r9, #16]
 8002844:	f8c9 5010 	str.w	r5, [r9, #16]
 8002848:	f8c9 7010 	str.w	r7, [r9, #16]
 800284c:	f8c9 4010 	str.w	r4, [r9, #16]
 8002850:	f8c9 8010 	str.w	r8, [r9, #16]
 8002854:	f8c9 0010 	str.w	r0, [r9, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 833c 	beq.w	8002ed6 <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 800285e:	2004      	movs	r0, #4
 8002860:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8331 	bne.w	8002ece <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286c:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002870:	9b08      	ldr	r3, [sp, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 8327 	bne.w	8002ec6 <LCD_Line.constprop.1+0xa4e>
 8002878:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800287c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002880:	e006      	b.n	8002890 <LCD_Line.constprop.1+0x418>
 8002882:	bf00      	nop
 8002884:	40010c00 	.word	0x40010c00
 8002888:	40010800 	.word	0x40010800
 800288c:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8313 	bne.w	8002ebe <LCD_Line.constprop.1+0xa46>
 8002898:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800289c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8307 	bne.w	8002eb6 <LCD_Line.constprop.1+0xa3e>
 80028a8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80028ac:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028b0:	2900      	cmp	r1, #0
 80028b2:	f040 82fc 	bne.w	8002eae <LCD_Line.constprop.1+0xa36>
 80028b6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80028ba:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80028be:	2a00      	cmp	r2, #0
 80028c0:	f040 82f1 	bne.w	8002ea6 <LCD_Line.constprop.1+0xa2e>
 80028c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028c8:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80028cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 82e5 	bne.w	8002e9e <LCD_Line.constprop.1+0xa26>
 80028d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80028dc:	f8bd 2000 	ldrh.w	r2, [sp]
 80028e0:	f8cb 7010 	str.w	r7, [fp, #16]
 80028e4:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 80028e8:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80028f8:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002902:	f8cb 4010 	str.w	r4, [fp, #16]
 8002906:	f8cb e010 	str.w	lr, [fp, #16]
 800290a:	f8ca 7010 	str.w	r7, [sl, #16]
 800290e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002912:	f8c9 6010 	str.w	r6, [r9, #16]
 8002916:	f8c9 5010 	str.w	r5, [r9, #16]
 800291a:	f8c9 7010 	str.w	r7, [r9, #16]
 800291e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002922:	f8c9 8010 	str.w	r8, [r9, #16]
 8002926:	f8c9 0010 	str.w	r0, [r9, #16]
 800292a:	f8ca 5010 	str.w	r5, [sl, #16]
 800292e:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002932:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002936:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002940:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002944:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002948:	2220      	movs	r2, #32
 800294a:	f8c9 1010 	str.w	r1, [r9, #16]
 800294e:	f8c9 2010 	str.w	r2, [r9, #16]
 8002952:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002954:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002958:	f8cb 2010 	str.w	r2, [fp, #16]
 800295c:	2201      	movs	r2, #1
 800295e:	f8cb 3010 	str.w	r3, [fp, #16]
 8002962:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002966:	f8cb e010 	str.w	lr, [fp, #16]
 800296a:	f8ca 7010 	str.w	r7, [sl, #16]
 800296e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002972:	f8c9 6010 	str.w	r6, [r9, #16]
 8002976:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800297a:	9b00      	ldr	r3, [sp, #0]
 800297c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002980:	f8c9 4010 	str.w	r4, [r9, #16]
 8002984:	f8c9 8010 	str.w	r8, [r9, #16]
 8002988:	f8c9 0010 	str.w	r0, [r9, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8283 	beq.w	8002e98 <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8002992:	2304      	movs	r3, #4
 8002994:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800299a:	f013 0001 	ands.w	r0, r3, #1
 800299e:	bf1c      	itt	ne
 80029a0:	2308      	movne	r3, #8
 80029a2:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a8:	bf08      	it	eq
 80029aa:	f8ca 6010 	streq.w	r6, [sl, #16]
 80029ae:	f013 0301 	ands.w	r3, r3, #1
 80029b2:	930c      	str	r3, [sp, #48]	; 0x30
 80029b4:	bf0c      	ite	eq
 80029b6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029ba:	2310      	movne	r3, #16
 80029bc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80029c2:	f013 0301 	ands.w	r3, r3, #1
 80029c6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c8:	bf0c      	ite	eq
 80029ca:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	2320      	movne	r3, #32
 80029d0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80029d6:	f013 0301 	ands.w	r3, r3, #1
 80029da:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029dc:	bf0c      	ite	eq
 80029de:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	2340      	movne	r3, #64	; 0x40
 80029e4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80029ea:	f013 0301 	ands.w	r3, r3, #1
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f0:	bf0c      	ite	eq
 80029f2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	2380      	movne	r3, #128	; 0x80
 80029f8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80029fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80029fe:	f013 0301 	ands.w	r3, r3, #1
 8002a02:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a04:	bf0c      	ite	eq
 8002a06:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	2310      	movne	r3, #16
 8002a0c:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a10:	f01c 0301 	ands.w	r3, ip, #1
 8002a14:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a16:	bf0c      	ite	eq
 8002a18:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002a1c:	2320      	movne	r3, #32
 8002a1e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a22:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a24:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a28:	f8cb 3010 	str.w	r3, [fp, #16]
 8002a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a30:	f8cb 3010 	str.w	r3, [fp, #16]
 8002a34:	2301      	movs	r3, #1
 8002a36:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3e:	f8cb e010 	str.w	lr, [fp, #16]
 8002a42:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a46:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a4a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a52:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a56:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a5a:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a5e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002a64:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a66:	09d2      	lsrs	r2, r2, #7
 8002a68:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	bf1c      	itt	ne
 8002a6c:	2204      	movne	r2, #4
 8002a6e:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002a72:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a76:	bf08      	it	eq
 8002a78:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002a7c:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a7e:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002a80:	bf4a      	itet	mi
 8002a82:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a84:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a88:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8002a8c:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a90:	0699      	lsls	r1, r3, #26
 8002a92:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a94:	bf54      	ite	pl
 8002a96:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	2210      	movmi	r2, #16
 8002a9c:	f8ca 2010 	str.w	r2, [sl, #16]
 8002aa0:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002aa4:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002aa6:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa8:	bf54      	ite	pl
 8002aaa:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002ab0:	0719      	lsls	r1, r3, #28
 8002ab2:	f8ca 2010 	str.w	r2, [sl, #16]
 8002ab6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002aba:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002abc:	bf54      	ite	pl
 8002abe:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	2240      	movmi	r2, #64	; 0x40
 8002ac4:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002ac8:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aca:	bf54      	ite	pl
 8002acc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002ad0:	2280      	movmi	r2, #128	; 0x80
 8002ad2:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002ad6:	f8ca 2010 	str.w	r2, [sl, #16]
 8002ada:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ade:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ae0:	bf54      	ite	pl
 8002ae2:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	2310      	movmi	r3, #16
 8002ae8:	f8c9 3010 	str.w	r3, [r9, #16]
 8002aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002aee:	fa1f fc83 	uxth.w	ip, r3
 8002af2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 81c9 	bne.w	8002e8e <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afc:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002b00:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b04:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b08:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b0c:	f8cb c010 	str.w	ip, [fp, #16]
 8002b10:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002b14:	f8cb c010 	str.w	ip, [fp, #16]
 8002b18:	f04f 0c01 	mov.w	ip, #1
 8002b1c:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b20:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b26:	f8cb e010 	str.w	lr, [fp, #16]
 8002b2a:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b2e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b32:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b36:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b3a:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b3e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b42:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b46:	f8c9 c010 	str.w	ip, [r9, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 819c 	beq.w	8002e88 <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	f04f 0c04 	mov.w	ip, #4
 8002b54:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f040 8191 	bne.w	8002e80 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5e:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8187 	bne.w	8002e78 <LCD_Line.constprop.1+0xa00>
 8002b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b6e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 817b 	bne.w	8002e70 <LCD_Line.constprop.1+0x9f8>
 8002b7a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b7e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 816f 	bne.w	8002e68 <LCD_Line.constprop.1+0x9f0>
 8002b8a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b8e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 8163 	bne.w	8002e60 <LCD_Line.constprop.1+0x9e8>
 8002b9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b9e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ba2:	9b08      	ldr	r3, [sp, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8157 	bne.w	8002e58 <LCD_Line.constprop.1+0x9e0>
 8002baa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002bae:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002bb2:	9b07      	ldr	r3, [sp, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 814b 	bne.w	8002e50 <LCD_Line.constprop.1+0x9d8>
 8002bba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bbe:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bc8:	f8cb 0010 	str.w	r0, [fp, #16]
 8002bcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bd0:	f8cb 0010 	str.w	r0, [fp, #16]
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002bde:	9b06      	ldr	r3, [sp, #24]
 8002be0:	f8cb e010 	str.w	lr, [fp, #16]
 8002be4:	f8ca 7010 	str.w	r7, [sl, #16]
 8002be8:	f8ca 4010 	str.w	r4, [sl, #16]
 8002bec:	f8c9 6010 	str.w	r6, [r9, #16]
 8002bf0:	f8c9 5010 	str.w	r5, [r9, #16]
 8002bf4:	f8c9 7010 	str.w	r7, [r9, #16]
 8002bf8:	f8c9 4010 	str.w	r4, [r9, #16]
 8002bfc:	f8c9 8010 	str.w	r8, [r9, #16]
 8002c00:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8120 	beq.w	8002e4a <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	2004      	movs	r0, #4
 8002c0c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002c10:	9b05      	ldr	r3, [sp, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 8115 	bne.w	8002e42 <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c18:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002c1c:	9b04      	ldr	r3, [sp, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 810b 	bne.w	8002e3a <LCD_Line.constprop.1+0x9c2>
 8002c24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c28:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002c2c:	9b03      	ldr	r3, [sp, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 80ff 	bne.w	8002e32 <LCD_Line.constprop.1+0x9ba>
 8002c34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c38:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 80f3 	bne.w	8002e2a <LCD_Line.constprop.1+0x9b2>
 8002c44:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002c48:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	f040 80e8 	bne.w	8002e22 <LCD_Line.constprop.1+0x9aa>
 8002c52:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002c56:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	f040 80dd 	bne.w	8002e1a <LCD_Line.constprop.1+0x9a2>
 8002c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c64:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80d1 	bne.w	8002e12 <LCD_Line.constprop.1+0x99a>
 8002c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c74:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c82:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	f8cb 2010 	str.w	r2, [fp, #16]
 8002c8a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002c92:	f8cb e010 	str.w	lr, [fp, #16]
 8002c96:	f8ca 7010 	str.w	r7, [sl, #16]
 8002c9a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002c9e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002ca2:	f8c9 5010 	str.w	r5, [r9, #16]
 8002ca6:	f8c9 7010 	str.w	r7, [r9, #16]
 8002caa:	f8c9 4010 	str.w	r4, [r9, #16]
 8002cae:	f8c9 8010 	str.w	r8, [r9, #16]
 8002cb2:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cb6:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cb8:	f8ca 5010 	str.w	r5, [sl, #16]
 8002cbc:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cc0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002cc8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ccc:	2040      	movs	r0, #64	; 0x40
 8002cce:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cd2:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002cd8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ce0:	f8c9 1010 	str.w	r1, [r9, #16]
 8002ce4:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ce8:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cea:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	f8cb 2010 	str.w	r2, [fp, #16]
 8002cf2:	f8cb 3010 	str.w	r3, [fp, #16]
 8002cf6:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cfe:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	f8ca 7010 	str.w	r7, [sl, #16]
 8002d0a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002d0e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002d12:	f8c9 5010 	str.w	r5, [r9, #16]
 8002d16:	f8c9 7010 	str.w	r7, [r9, #16]
 8002d1a:	f8c9 4010 	str.w	r4, [r9, #16]
 8002d1e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002d22:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d26:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d2a:	f8ca 6010 	str.w	r6, [sl, #16]
 8002d2e:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	f8ca c010 	str.w	ip, [sl, #16]
 8002d38:	2010      	movs	r0, #16
 8002d3a:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d44:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d48:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d50:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002d56:	f8cb 3010 	str.w	r3, [fp, #16]
 8002d5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	f000 80e5 	beq.w	8002f2c <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002d62:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002d64:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002d66:	4243      	negs	r3, r0
 8002d68:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002d6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002d70:	da24      	bge.n	8002dbc <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d74:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002d78:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002d7a:	4463      	add	r3, ip
			error -= deltaY;
 8002d7c:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	9110      	str	r1, [sp, #64]	; 0x40
 8002d82:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002d86:	9113      	str	r1, [sp, #76]	; 0x4c
 8002d88:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002d92:	911f      	str	r1, [sp, #124]	; 0x7c
 8002d94:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002d98:	911d      	str	r1, [sp, #116]	; 0x74
 8002d9a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002d9e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002da0:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002da4:	9119      	str	r1, [sp, #100]	; 0x64
 8002da6:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002daa:	9117      	str	r1, [sp, #92]	; 0x5c
 8002dac:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002db0:	9115      	str	r1, [sp, #84]	; 0x54
 8002db2:	b2d9      	uxtb	r1, r3
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	9121      	str	r1, [sp, #132]	; 0x84
 8002dba:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002dbc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002dbe:	4291      	cmp	r1, r2
 8002dc0:	f77f abbe 	ble.w	8002540 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002dc6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002dc8:	4413      	add	r3, r2
			error += deltaX;
 8002dca:	9a02      	ldr	r2, [sp, #8]
 8002dcc:	440a      	add	r2, r1
 8002dce:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	9223      	str	r2, [sp, #140]	; 0x8c
 8002dd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002dd8:	9214      	str	r2, [sp, #80]	; 0x50
 8002dda:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002de4:	9220      	str	r2, [sp, #128]	; 0x80
 8002de6:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002dea:	921e      	str	r2, [sp, #120]	; 0x78
 8002dec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002df0:	921c      	str	r2, [sp, #112]	; 0x70
 8002df2:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002df6:	921a      	str	r2, [sp, #104]	; 0x68
 8002df8:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002dfc:	9218      	str	r2, [sp, #96]	; 0x60
 8002dfe:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002e02:	9216      	str	r2, [sp, #88]	; 0x58
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	9222      	str	r2, [sp, #136]	; 0x88
 8002e0c:	9312      	str	r3, [sp, #72]	; 0x48
 8002e0e:	f7ff bb97 	b.w	8002540 <LCD_Line.constprop.1+0xc8>
 8002e12:	2320      	movs	r3, #32
 8002e14:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e18:	e72e      	b.n	8002c78 <LCD_Line.constprop.1+0x800>
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	f8c9 2010 	str.w	r2, [r9, #16]
 8002e20:	e722      	b.n	8002c68 <LCD_Line.constprop.1+0x7f0>
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	f8ca 1010 	str.w	r1, [sl, #16]
 8002e28:	e717      	b.n	8002c5a <LCD_Line.constprop.1+0x7e2>
 8002e2a:	2040      	movs	r0, #64	; 0x40
 8002e2c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e30:	e70c      	b.n	8002c4c <LCD_Line.constprop.1+0x7d4>
 8002e32:	2020      	movs	r0, #32
 8002e34:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e38:	e700      	b.n	8002c3c <LCD_Line.constprop.1+0x7c4>
 8002e3a:	2010      	movs	r0, #16
 8002e3c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e40:	e6f4      	b.n	8002c2c <LCD_Line.constprop.1+0x7b4>
 8002e42:	2008      	movs	r0, #8
 8002e44:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e48:	e6e8      	b.n	8002c1c <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4a:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e4e:	e6df      	b.n	8002c10 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	2020      	movs	r0, #32
 8002e52:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e56:	e6b4      	b.n	8002bc2 <LCD_Line.constprop.1+0x74a>
 8002e58:	2010      	movs	r0, #16
 8002e5a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e5e:	e6a8      	b.n	8002bb2 <LCD_Line.constprop.1+0x73a>
 8002e60:	2080      	movs	r0, #128	; 0x80
 8002e62:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e66:	e69c      	b.n	8002ba2 <LCD_Line.constprop.1+0x72a>
 8002e68:	2040      	movs	r0, #64	; 0x40
 8002e6a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e6e:	e690      	b.n	8002b92 <LCD_Line.constprop.1+0x71a>
 8002e70:	2020      	movs	r0, #32
 8002e72:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e76:	e684      	b.n	8002b82 <LCD_Line.constprop.1+0x70a>
 8002e78:	2010      	movs	r0, #16
 8002e7a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e7e:	e678      	b.n	8002b72 <LCD_Line.constprop.1+0x6fa>
 8002e80:	2008      	movs	r0, #8
 8002e82:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e86:	e66c      	b.n	8002b62 <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e88:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e8c:	e664      	b.n	8002b58 <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	f04f 0c20 	mov.w	ip, #32
 8002e92:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e96:	e635      	b.n	8002b04 <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e98:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e9c:	e57c      	b.n	8002998 <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	f8c9 3010 	str.w	r3, [r9, #16]
 8002ea4:	e51a      	b.n	80028dc <LCD_Line.constprop.1+0x464>
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	f8c9 2010 	str.w	r2, [r9, #16]
 8002eac:	e50e      	b.n	80028cc <LCD_Line.constprop.1+0x454>
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	f8ca 1010 	str.w	r1, [sl, #16]
 8002eb4:	e503      	b.n	80028be <LCD_Line.constprop.1+0x446>
 8002eb6:	2040      	movs	r0, #64	; 0x40
 8002eb8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ebc:	e4f8      	b.n	80028b0 <LCD_Line.constprop.1+0x438>
 8002ebe:	2020      	movs	r0, #32
 8002ec0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ec4:	e4ec      	b.n	80028a0 <LCD_Line.constprop.1+0x428>
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ecc:	e4e0      	b.n	8002890 <LCD_Line.constprop.1+0x418>
 8002ece:	2008      	movs	r0, #8
 8002ed0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ed4:	e4cc      	b.n	8002870 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed6:	f8ca 5010 	str.w	r5, [sl, #16]
 8002eda:	e4c3      	b.n	8002864 <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8002edc:	2020      	movs	r0, #32
 8002ede:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ee2:	e498      	b.n	8002816 <LCD_Line.constprop.1+0x39e>
 8002ee4:	2010      	movs	r0, #16
 8002ee6:	f8c9 0010 	str.w	r0, [r9, #16]
 8002eea:	e48c      	b.n	8002806 <LCD_Line.constprop.1+0x38e>
 8002eec:	2080      	movs	r0, #128	; 0x80
 8002eee:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ef2:	e480      	b.n	80027f6 <LCD_Line.constprop.1+0x37e>
 8002ef4:	2040      	movs	r0, #64	; 0x40
 8002ef6:	f8ca 0010 	str.w	r0, [sl, #16]
 8002efa:	e474      	b.n	80027e6 <LCD_Line.constprop.1+0x36e>
 8002efc:	2020      	movs	r0, #32
 8002efe:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f02:	e468      	b.n	80027d6 <LCD_Line.constprop.1+0x35e>
 8002f04:	2010      	movs	r0, #16
 8002f06:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f0a:	e45c      	b.n	80027c6 <LCD_Line.constprop.1+0x34e>
 8002f0c:	2008      	movs	r0, #8
 8002f0e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f12:	e450      	b.n	80027b6 <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f14:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f18:	e448      	b.n	80027ac <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	f04f 0c20 	mov.w	ip, #32
 8002f1e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002f22:	e419      	b.n	8002758 <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f24:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f28:	f7ff bb60 	b.w	80025ec <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8002f2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002f2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002f30:	4293      	cmp	r3, r2
 8002f32:	f47f af16 	bne.w	8002d62 <LCD_Line.constprop.1+0x8ea>
}
 8002f36:	b02b      	add	sp, #172	; 0xac
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f3c <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002f3c:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3e:	4c6c      	ldr	r4, [pc, #432]	; (80030f0 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002f40:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e003      	b.n	8002f56 <I2C_RequestMemoryWrite.constprop.0+0x1a>
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	1a5b      	subs	r3, r3, r1
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d834      	bhi.n	8002fc0 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f56:	6953      	ldr	r3, [r2, #20]
 8002f58:	07db      	lsls	r3, r3, #31
 8002f5a:	d5f8      	bpl.n	8002f4e <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5c:	23ae      	movs	r3, #174	; 0xae
 8002f5e:	6113      	str	r3, [r2, #16]
 8002f60:	e00a      	b.n	8002f78 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f62:	6953      	ldr	r3, [r2, #20]
 8002f64:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f68:	d157      	bne.n	800301a <I2C_RequestMemoryWrite.constprop.0+0xde>
 8002f6a:	6d65      	ldr	r5, [r4, #84]	; 0x54
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	eba5 0c01 	sub.w	ip, r5, r1
 8002f70:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8002f74:	f200 80a0 	bhi.w	80030b8 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f78:	6953      	ldr	r3, [r2, #20]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	f013 0302 	ands.w	r3, r3, #2
 8002f80:	d1ef      	bne.n	8002f62 <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	6953      	ldr	r3, [r2, #20]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6993      	ldr	r3, [r2, #24]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8e:	6953      	ldr	r3, [r2, #20]
 8002f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f94:	d159      	bne.n	800304a <I2C_RequestMemoryWrite.constprop.0+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f96:	6955      	ldr	r5, [r2, #20]
 8002f98:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002f9c:	d127      	bne.n	8002fee <I2C_RequestMemoryWrite.constprop.0+0xb2>
 8002f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	1a5b      	subs	r3, r3, r1
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d9f3      	bls.n	8002f8e <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa8:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fb4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	6423      	str	r3, [r4, #64]	; 0x40
 8002fbe:	e025      	b.n	800300c <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc0:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fd0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	05da      	lsls	r2, r3, #23
 8002fde:	d54f      	bpl.n	8003080 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe6:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002fe8:	b003      	add	sp, #12
 8002fea:	bc70      	pop	{r4, r5, r6}
 8002fec:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002ff4:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003000:	6c21      	ldr	r1, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003006:	f041 0104 	orr.w	r1, r1, #4
 800300a:	6421      	str	r1, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d067      	beq.n	80030e2 <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 8003012:	2001      	movs	r0, #1
}
 8003014:	b003      	add	sp, #12
 8003016:	bc70      	pop	{r4, r5, r6}
 8003018:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	2520      	movs	r5, #32
    return HAL_ERROR;
 8003022:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003038:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800303a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003044:	b003      	add	sp, #12
 8003046:	bc70      	pop	{r4, r5, r6}
 8003048:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800304a:	0a03      	lsrs	r3, r0, #8
 800304c:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304e:	6953      	ldr	r3, [r2, #20]
 8003050:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003054:	d13f      	bne.n	80030d6 <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003056:	6955      	ldr	r5, [r2, #20]
 8003058:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 800305c:	d114      	bne.n	8003088 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 800305e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	1a5b      	subs	r3, r3, r1
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d9f3      	bls.n	800304e <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003068:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800306a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003074:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	6423      	str	r3, [r4, #64]	; 0x40
 800307e:	e012      	b.n	80030a6 <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8003080:	2003      	movs	r0, #3
}
 8003082:	b003      	add	sp, #12
 8003084:	bc70      	pop	{r4, r5, r6}
 8003086:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800308e:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800309a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800309c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a0:	f041 0104 	orr.w	r1, r1, #4
 80030a4:	6421      	str	r1, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d1b2      	bne.n	8003012 <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e7c5      	b.n	8003044 <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	2220      	movs	r2, #32
    return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030bc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 80030c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030cc:	4313      	orrs	r3, r2
 80030ce:	6423      	str	r3, [r4, #64]	; 0x40
}
 80030d0:	b003      	add	sp, #12
 80030d2:	bc70      	pop	{r4, r5, r6}
 80030d4:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d6:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030da:	6113      	str	r3, [r2, #16]
}
 80030dc:	b003      	add	sp, #12
 80030de:	bc70      	pop	{r4, r5, r6}
 80030e0:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e7aa      	b.n	8003044 <I2C_RequestMemoryWrite.constprop.0+0x108>
 80030ee:	bf00      	nop
 80030f0:	20000200 	.word	0x20000200

080030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80030f4:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80030f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f8:	4ba1      	ldr	r3, [pc, #644]	; (8003380 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 80030fa:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80030fc:	9200      	str	r2, [sp, #0]
 80030fe:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003100:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003104:	2a20      	cmp	r2, #32
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 8003108:	b007      	add	sp, #28
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	e003      	b.n	8003118 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8003110:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	2c19      	cmp	r4, #25
 8003116:	d86a      	bhi.n	80031ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003118:	6994      	ldr	r4, [r2, #24]
 800311a:	ea6f 0c04 	mvn.w	ip, r4
 800311e:	f01c 0c02 	ands.w	ip, ip, #2
 8003122:	d0f5      	beq.n	8003110 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8003124:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8003128:	2c01      	cmp	r4, #1
 800312a:	d0ed      	beq.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800312c:	2401      	movs	r4, #1
 800312e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003132:	6814      	ldr	r4, [r2, #0]
 8003134:	07e7      	lsls	r7, r4, #31
 8003136:	d555      	bpl.n	80031e4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003138:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8003142:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	6814      	ldr	r4, [r2, #0]
 8003146:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800314a:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314c:	4c8d      	ldr	r4, [pc, #564]	; (8003384 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800314e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003152:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003156:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003158:	855e      	strh	r6, [r3, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800315a:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800315c:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315e:	62dc      	str	r4, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003160:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003164:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8003168:	8519      	strh	r1, [r3, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316c:	6814      	ldr	r4, [r2, #0]
 800316e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003172:	6014      	str	r4, [r2, #0]
 8003174:	e003      	b.n	800317e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 8003176:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	2c64      	cmp	r4, #100	; 0x64
 800317c:	d85e      	bhi.n	800323c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317e:	6954      	ldr	r4, [r2, #20]
 8003180:	07e6      	lsls	r6, r4, #31
 8003182:	d5f8      	bpl.n	8003176 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003184:	24ae      	movs	r4, #174	; 0xae
 8003186:	6114      	str	r4, [r2, #16]
 8003188:	e008      	b.n	800319c <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318a:	6954      	ldr	r4, [r2, #20]
 800318c:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 8003190:	d169      	bne.n	8003266 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8003192:	6d5e      	ldr	r6, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	1b76      	subs	r6, r6, r5
 8003196:	2e64      	cmp	r6, #100	; 0x64
 8003198:	f200 8089 	bhi.w	80032ae <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319c:	6954      	ldr	r4, [r2, #20]
 800319e:	43e4      	mvns	r4, r4
 80031a0:	f014 0402 	ands.w	r4, r4, #2
 80031a4:	d1f1      	bne.n	800318a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	9405      	str	r4, [sp, #20]
 80031a8:	6954      	ldr	r4, [r2, #20]
 80031aa:	9405      	str	r4, [sp, #20]
 80031ac:	6994      	ldr	r4, [r2, #24]
 80031ae:	9405      	str	r4, [sp, #20]
 80031b0:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b2:	6954      	ldr	r4, [r2, #20]
 80031b4:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80031b8:	d16a      	bne.n	8003290 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ba:	6956      	ldr	r6, [r2, #20]
 80031bc:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80031c0:	d124      	bne.n	800320c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80031c2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	2c64      	cmp	r4, #100	; 0x64
 80031c8:	d9f3      	bls.n	80031b2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ca:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031cc:	631e      	str	r6, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ce:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d2:	f883 603e 	strb.w	r6, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031d8:	f883 603c 	strb.w	r6, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	f041 0120 	orr.w	r1, r1, #32
 80031e0:	6419      	str	r1, [r3, #64]	; 0x40
 80031e2:	e022      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80031e4:	6814      	ldr	r4, [r2, #0]
 80031e6:	f044 0401 	orr.w	r4, r4, #1
 80031ea:	6014      	str	r4, [r2, #0]
 80031ec:	e7a4      	b.n	8003138 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ee:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f8:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031fe:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003208:	b007      	add	sp, #28
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003212:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	631c      	str	r4, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003220:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003224:	f041 0104 	orr.w	r1, r1, #4
 8003228:	6419      	str	r1, [r3, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b04      	cmp	r3, #4
 800322e:	f47f af6b 	bne.w	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e765      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800323e:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	6318      	str	r0, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003246:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800324c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	f041 0120 	orr.w	r1, r1, #32
 8003254:	6419      	str	r1, [r3, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	05d5      	lsls	r5, r2, #23
 800325a:	f57f af55 	bpl.w	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
 8003264:	e750      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	6810      	ldr	r0, [r2, #0]
 8003270:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8003274:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003284:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003288:	f042 0204 	orr.w	r2, r2, #4
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
 800328e:	e73b      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003290:	0a04      	lsrs	r4, r0, #8
 8003292:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003294:	6954      	ldr	r4, [r2, #20]
 8003296:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 800329a:	d115      	bne.n	80032c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329c:	6956      	ldr	r6, [r2, #20]
 800329e:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80032a2:	d1b3      	bne.n	800320c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80032a4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	2c64      	cmp	r4, #100	; 0x64
 80032aa:	d9f3      	bls.n	8003294 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 80032ac:	e78d      	b.n	80031ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b0:	631c      	str	r4, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032bc:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	f042 0220 	orr.w	r2, r2, #32
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	e71f      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	b2c0      	uxtb	r0, r0
 80032ca:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032cc:	6950      	ldr	r0, [r2, #20]
 80032ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032d2:	d124      	bne.n	800331e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d4:	6954      	ldr	r4, [r2, #20]
 80032d6:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80032da:	d110      	bne.n	80032fe <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80032dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	1b40      	subs	r0, r0, r5
 80032e0:	2864      	cmp	r0, #100	; 0x64
 80032e2:	d9f3      	bls.n	80032cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e4:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e6:	631c      	str	r4, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e8:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ec:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032f2:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	f041 0120 	orr.w	r1, r1, #32
 80032fa:	6419      	str	r1, [r3, #64]	; 0x40
 80032fc:	e795      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 8003304:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	6318      	str	r0, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003312:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003316:	f041 0104 	orr.w	r1, r1, #4
 800331a:	6419      	str	r1, [r3, #64]	; 0x40
 800331c:	e785      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	6810      	ldr	r0, [r2, #0]
 8003320:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003324:	6010      	str	r0, [r2, #0]
 8003326:	e003      	b.n	8003330 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8003328:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	1b40      	subs	r0, r0, r5
 800332c:	2864      	cmp	r0, #100	; 0x64
 800332e:	d885      	bhi.n	800323c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	6950      	ldr	r0, [r2, #20]
 8003332:	07c4      	lsls	r4, r0, #31
 8003334:	d5f8      	bpl.n	8003328 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003336:	20af      	movs	r0, #175	; 0xaf
 8003338:	6110      	str	r0, [r2, #16]
 800333a:	e007      	b.n	800334c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800333c:	6950      	ldr	r0, [r2, #20]
 800333e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003342:	d190      	bne.n	8003266 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8003344:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	2c64      	cmp	r4, #100	; 0x64
 800334a:	d81d      	bhi.n	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	6950      	ldr	r0, [r2, #20]
 800334e:	43c0      	mvns	r0, r0
 8003350:	f010 0002 	ands.w	r0, r0, #2
 8003354:	d1f2      	bne.n	800333c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 8003356:	bb29      	cbnz	r1, 80033a4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003358:	9104      	str	r1, [sp, #16]
 800335a:	6951      	ldr	r1, [r2, #20]
 800335c:	9104      	str	r1, [sp, #16]
 800335e:	6991      	ldr	r1, [r2, #24]
 8003360:	9104      	str	r1, [sp, #16]
 8003362:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800336a:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 800337c:	e6c4      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800337e:	bf00      	nop
 8003380:	20000200 	.word	0x20000200
 8003384:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8003388:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800338a:	6318      	str	r0, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003390:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003396:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033a0:	b007      	add	sp, #28
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80033a4:	2901      	cmp	r1, #1
 80033a6:	f000 80d8 	beq.w	800355a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 80033aa:	2902      	cmp	r1, #2
 80033ac:	f000 80ec 	beq.w	8003588 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	6814      	ldr	r4, [r2, #0]
 80033b2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80033b6:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	9001      	str	r0, [sp, #4]
 80033ba:	6950      	ldr	r0, [r2, #20]
 80033bc:	9001      	str	r0, [sp, #4]
 80033be:	6990      	ldr	r0, [r2, #24]
 80033c0:	9001      	str	r0, [sp, #4]
 80033c2:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c4:	4e79      	ldr	r6, [pc, #484]	; (80035ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80033c6:	4c7a      	ldr	r4, [pc, #488]	; (80035b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80033c8:	2903      	cmp	r1, #3
 80033ca:	d83c      	bhi.n	8003446 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80033cc:	2901      	cmp	r1, #1
 80033ce:	f000 809a 	beq.w	8003506 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80033d2:	2902      	cmp	r1, #2
 80033d4:	d005      	beq.n	80033e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80033d6:	e053      	b.n	8003480 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80033d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	1b49      	subs	r1, r1, r5
 80033dc:	2964      	cmp	r1, #100	; 0x64
 80033de:	f200 8097 	bhi.w	8003510 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e2:	6951      	ldr	r1, [r2, #20]
 80033e4:	0748      	lsls	r0, r1, #29
 80033e6:	d5f7      	bpl.n	80033d8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	6811      	ldr	r1, [r2, #0]
 80033f0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80033f4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	6912      	ldr	r2, [r2, #16]
 80033f8:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	3201      	adds	r2, #1
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 8003400:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003402:	3a01      	subs	r2, #1
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003406:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003408:	3a01      	subs	r2, #1
 800340a:	b292      	uxth	r2, r2
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800340e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	6911      	ldr	r1, [r2, #16]
 8003414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003416:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 800341a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 800341c:	3201      	adds	r2, #1
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferCount--;
 8003420:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8003422:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8003424:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003426:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8003428:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800342a:	8519      	strh	r1, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800342e:	2900      	cmp	r1, #0
 8003430:	d09c      	beq.n	800336c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	e7c8      	b.n	80033c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003436:	6950      	ldr	r0, [r2, #20]
 8003438:	f010 0010 	ands.w	r0, r0, #16
 800343c:	d177      	bne.n	800352e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 800343e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	1b49      	subs	r1, r1, r5
 8003442:	2964      	cmp	r1, #100	; 0x64
 8003444:	d8a0      	bhi.n	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003446:	6951      	ldr	r1, [r2, #20]
 8003448:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800344c:	d0f3      	beq.n	8003436 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	6911      	ldr	r1, [r2, #16]
 8003450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003452:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003454:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003456:	6a58      	ldr	r0, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003458:	3a01      	subs	r2, #1
 800345a:	b292      	uxth	r2, r2
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345e:	681a      	ldr	r2, [r3, #0]
        hi2c->XferSize--;
 8003460:	8d19      	ldrh	r1, [r3, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003462:	1c47      	adds	r7, r0, #1
 8003464:	625f      	str	r7, [r3, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003466:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8003468:	3901      	subs	r1, #1
 800346a:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800346c:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 800346e:	8519      	strh	r1, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003470:	d5dd      	bpl.n	800342e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	6912      	ldr	r2, [r2, #16]
 8003474:	7042      	strb	r2, [r0, #1]
 8003476:	e7cf      	b.n	8003418 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8003478:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	1b49      	subs	r1, r1, r5
 800347c:	2964      	cmp	r1, #100	; 0x64
 800347e:	d847      	bhi.n	8003510 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	6951      	ldr	r1, [r2, #20]
 8003482:	0749      	lsls	r1, r1, #29
 8003484:	d5f8      	bpl.n	8003478 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	6811      	ldr	r1, [r2, #0]
 8003488:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800348c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800348e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	08d2      	lsrs	r2, r2, #3
 8003498:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	6a59      	ldr	r1, [r3, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800349e:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 80034a2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80034a8:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80034ae:	b289      	uxth	r1, r1
 80034b0:	8559      	strh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034b2:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80034b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 80034b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80034b8:	3a01      	subs	r2, #1
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 80034bc:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034be:	6819      	ldr	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
 80034c2:	e002      	b.n	80034ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034c4:	694a      	ldr	r2, [r1, #20]
 80034c6:	0752      	lsls	r2, r2, #29
 80034c8:	d440      	bmi.n	800354c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80034ca:	9a00      	ldr	r2, [sp, #0]
 80034cc:	3a01      	subs	r2, #1
 80034ce:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80034d0:	9a00      	ldr	r2, [sp, #0]
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d1f6      	bne.n	80034c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034e4:	f041 0120 	orr.w	r1, r1, #32
 80034e8:	6419      	str	r1, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034ea:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034f0:	b007      	add	sp, #28
 80034f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034f4:	6950      	ldr	r0, [r2, #20]
 80034f6:	f010 0010 	ands.w	r0, r0, #16
 80034fa:	d118      	bne.n	800352e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 80034fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	1b49      	subs	r1, r1, r5
 8003500:	2964      	cmp	r1, #100	; 0x64
 8003502:	f63f af41 	bhi.w	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003506:	6951      	ldr	r1, [r2, #20]
 8003508:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800350c:	d0f2      	beq.n	80034f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 800350e:	e780      	b.n	8003412 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003510:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003512:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003514:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800351a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003520:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
}
 800352a:	b007      	add	sp, #28
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800352e:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003534:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003538:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003542:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003548:	b007      	add	sp, #28
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	680a      	ldr	r2, [r1, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	690a      	ldr	r2, [r1, #16]
 8003556:	7042      	strb	r2, [r0, #1]
 8003558:	e74f      	b.n	80033fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	6811      	ldr	r1, [r2, #0]
 800355c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003560:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003562:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	9003      	str	r0, [sp, #12]
 8003568:	6951      	ldr	r1, [r2, #20]
 800356a:	9103      	str	r1, [sp, #12]
 800356c:	6991      	ldr	r1, [r2, #24]
 800356e:	9103      	str	r1, [sp, #12]
 8003570:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	6811      	ldr	r1, [r2, #0]
 8003574:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003578:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800357c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800357e:	2900      	cmp	r1, #0
 8003580:	f43f aef4 	beq.w	800336c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	e71d      	b.n	80033c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800358e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	9002      	str	r0, [sp, #8]
 8003596:	6951      	ldr	r1, [r2, #20]
 8003598:	9102      	str	r1, [sp, #8]
 800359a:	6991      	ldr	r1, [r2, #24]
 800359c:	9102      	str	r1, [sp, #8]
 800359e:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80035a6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a8:	b662      	cpsie	i
}
 80035aa:	e7e7      	b.n	800357c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 80035ac:	20000000 	.word	0x20000000
 80035b0:	14f8b589 	.word	0x14f8b589

080035b4 <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80035b4:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80035b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b8:	460d      	mov	r5, r1
 80035ba:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80035bc:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80035be:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80035c2:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80035c4:	f7ff fd96 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80035c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80035cc:	429d      	cmp	r5, r3
 80035ce:	d101      	bne.n	80035d4 <AT24XX_Update+0x20>
}
 80035d0:	b003      	add	sp, #12
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	4c61      	ldr	r4, [pc, #388]	; (800375c <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80035d6:	f88d 5004 	strb.w	r5, [sp, #4]
 80035da:	6d65      	ldr	r5, [r4, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d1f5      	bne.n	80035d0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	6821      	ldr	r1, [r4, #0]
 80035e6:	e004      	b.n	80035f2 <AT24XX_Update+0x3e>
 80035e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	1b52      	subs	r2, r2, r5
 80035ec:	2a19      	cmp	r2, #25
 80035ee:	f200 80a7 	bhi.w	8003740 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	698b      	ldr	r3, [r1, #24]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	f013 0302 	ands.w	r3, r3, #2
 80035fa:	d0f5      	beq.n	80035e8 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 80035fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d0e5      	beq.n	80035d0 <AT24XX_Update+0x1c>
 8003604:	2301      	movs	r3, #1
 8003606:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360a:	680b      	ldr	r3, [r1, #0]
 800360c:	07da      	lsls	r2, r3, #31
 800360e:	d403      	bmi.n	8003618 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8003618:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361a:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361c:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003622:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003624:	680b      	ldr	r3, [r1, #0]
 8003626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800362a:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800362c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->pBuffPtr    = pData;
 8003630:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003632:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003636:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003638:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800363c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363e:	4b48      	ldr	r3, [pc, #288]	; (8003760 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003640:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003644:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003646:	f7ff fc79 	bl	8002f3c <I2C_RequestMemoryWrite.constprop.0>
 800364a:	2800      	cmp	r0, #0
 800364c:	d1c0      	bne.n	80035d0 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 800364e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003650:	2800      	cmp	r0, #0
 8003652:	f000 8081 	beq.w	8003758 <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003656:	6821      	ldr	r1, [r4, #0]
 8003658:	694b      	ldr	r3, [r1, #20]
 800365a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800365e:	d114      	bne.n	800368a <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003660:	694a      	ldr	r2, [r1, #20]
 8003662:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003666:	d130      	bne.n	80036ca <AT24XX_Update+0x116>
 8003668:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	1b5b      	subs	r3, r3, r5
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d9f3      	bls.n	8003658 <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003670:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003672:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003678:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800367e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	6423      	str	r3, [r4, #64]	; 0x40
 8003688:	e02e      	b.n	80036e8 <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368a:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800368c:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	4633      	mov	r3, r6
 8003690:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8003694:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003696:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8003698:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800369a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800369c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a4:	694b      	ldr	r3, [r1, #20]
 80036a6:	075b      	lsls	r3, r3, #29
 80036a8:	d427      	bmi.n	80036fa <AT24XX_Update+0x146>
      hi2c->XferSize--;
 80036aa:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d1d3      	bne.n	8003658 <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b0:	694b      	ldr	r3, [r1, #20]
 80036b2:	f013 0304 	ands.w	r3, r3, #4
 80036b6:	d130      	bne.n	800371a <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b8:	694a      	ldr	r2, [r1, #20]
 80036ba:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80036be:	d104      	bne.n	80036ca <AT24XX_Update+0x116>
 80036c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	1b5b      	subs	r3, r3, r5
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d9f3      	bls.n	80036b0 <AT24XX_Update+0xfc>
 80036c8:	e7d2      	b.n	8003670 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ca:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036cc:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80036d0:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80036de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	f042 0204 	orr.w	r2, r2, #4
 80036e6:	6422      	str	r2, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	f47f af70 	bne.w	80035d0 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e76a      	b.n	80035d0 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	d0d8      	beq.n	80036b0 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fe:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8003700:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8003704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003706:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8003708:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 800370a:	3602      	adds	r6, #2
        hi2c->XferCount--;
 800370c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800370e:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003710:	8520      	strh	r0, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003712:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003714:	2800      	cmp	r0, #0
 8003716:	d19f      	bne.n	8003658 <AT24XX_Update+0xa4>
 8003718:	e7ca      	b.n	80036b0 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003724:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800372e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8003732:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003734:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	2b05      	cmp	r3, #5
 800373a:	d9fb      	bls.n	8003734 <AT24XX_Update+0x180>
}
 800373c:	b003      	add	sp, #12
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003740:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003742:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003744:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003748:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 800374c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003752:	4313      	orrs	r3, r2
 8003754:	6423      	str	r3, [r4, #64]	; 0x40
 8003756:	e73b      	b.n	80035d0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003758:	6821      	ldr	r1, [r4, #0]
 800375a:	e7a9      	b.n	80036b0 <AT24XX_Update+0xfc>
 800375c:	20000200 	.word	0x20000200
 8003760:	ffff0000 	.word	0xffff0000

08003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003766:	2400      	movs	r4, #0
  return uwTick;
 8003768:	4b8b      	ldr	r3, [pc, #556]	; (8003998 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800376a:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 800376c:	9400      	str	r4, [sp, #0]
 800376e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003770:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003774:	2c20      	cmp	r4, #32
 8003776:	d001      	beq.n	800377c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8003778:	b007      	add	sp, #28
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	681c      	ldr	r4, [r3, #0]
 800377e:	e004      	b.n	800378a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8003780:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	1bad      	subs	r5, r5, r6
 8003784:	2d19      	cmp	r5, #25
 8003786:	f200 80b3 	bhi.w	80038f0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378a:	69a5      	ldr	r5, [r4, #24]
 800378c:	ea6f 0c05 	mvn.w	ip, r5
 8003790:	f01c 0c02 	ands.w	ip, ip, #2
 8003794:	d0f4      	beq.n	8003780 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8003796:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
 800379a:	2d01      	cmp	r5, #1
 800379c:	d0ec      	beq.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 800379e:	2501      	movs	r5, #1
 80037a0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	07ed      	lsls	r5, r5, #31
 80037a8:	d55d      	bpl.n	8003866 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037aa:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ae:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b2:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	6825      	ldr	r5, [r4, #0]
 80037b6:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80037ba:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80037bc:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037be:	4977      	ldr	r1, [pc, #476]	; (800399c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037c0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c4:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037c8:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	62d9      	str	r1, [r3, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80037d4:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037da:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e0:	d007      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80037e2:	2d01      	cmp	r5, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80037e6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80037ea:	d002      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ee:	2911      	cmp	r1, #17
 80037f0:	d109      	bne.n	8003806 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037f8:	6021      	str	r1, [r4, #0]
 80037fa:	e004      	b.n	8003806 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 80037fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	1b89      	subs	r1, r1, r6
 8003800:	2964      	cmp	r1, #100	; 0x64
 8003802:	f200 8084 	bhi.w	800390e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003806:	6961      	ldr	r1, [r4, #20]
 8003808:	07cf      	lsls	r7, r1, #31
 800380a:	d5f7      	bpl.n	80037fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003812:	d12d      	bne.n	8003870 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003814:	f040 0001 	orr.w	r0, r0, #1
 8003818:	b2c0      	uxtb	r0, r0
 800381a:	6120      	str	r0, [r4, #16]
 800381c:	e008      	b.n	8003830 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381e:	6961      	ldr	r1, [r4, #20]
 8003820:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003824:	f040 8088 	bne.w	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003828:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	1b80      	subs	r0, r0, r6
 800382c:	2864      	cmp	r0, #100	; 0x64
 800382e:	d851      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003830:	6961      	ldr	r1, [r4, #20]
 8003832:	43c9      	mvns	r1, r1
 8003834:	f011 0102 	ands.w	r1, r1, #2
 8003838:	d1f1      	bne.n	800381e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 800383a:	2a00      	cmp	r2, #0
 800383c:	f040 8092 	bne.w	8003964 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	9204      	str	r2, [sp, #16]
 8003842:	6962      	ldr	r2, [r4, #20]
 8003844:	9204      	str	r2, [sp, #16]
 8003846:	69a2      	ldr	r2, [r4, #24]
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 8003864:	e788      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	f045 0501 	orr.w	r5, r5, #1
 800386c:	6025      	str	r5, [r4, #0]
 800386e:	e79c      	b.n	80037aa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003870:	21f0      	movs	r1, #240	; 0xf0
 8003872:	6121      	str	r1, [r4, #16]
 8003874:	e007      	b.n	8003886 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003876:	6961      	ldr	r1, [r4, #20]
 8003878:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800387c:	d15c      	bne.n	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 800387e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	1bad      	subs	r5, r5, r6
 8003882:	2d64      	cmp	r5, #100	; 0x64
 8003884:	d826      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003886:	6961      	ldr	r1, [r4, #20]
 8003888:	070d      	lsls	r5, r1, #28
 800388a:	d5f4      	bpl.n	8003876 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388c:	6120      	str	r0, [r4, #16]
 800388e:	e007      	b.n	80038a0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003890:	6961      	ldr	r1, [r4, #20]
 8003892:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003896:	d14f      	bne.n	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003898:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	1b80      	subs	r0, r0, r6
 800389c:	2864      	cmp	r0, #100	; 0x64
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	43c9      	mvns	r1, r1
 80038a4:	f011 0102 	ands.w	r1, r1, #2
 80038a8:	d1f2      	bne.n	8003890 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	9105      	str	r1, [sp, #20]
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	9105      	str	r1, [sp, #20]
 80038b0:	69a1      	ldr	r1, [r4, #24]
 80038b2:	9105      	str	r1, [sp, #20]
 80038b4:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80038bc:	6021      	str	r1, [r4, #0]
 80038be:	e003      	b.n	80038c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 80038c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	1b89      	subs	r1, r1, r6
 80038c4:	2964      	cmp	r1, #100	; 0x64
 80038c6:	d822      	bhi.n	800390e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	07c9      	lsls	r1, r1, #31
 80038cc:	d5f8      	bpl.n	80038c0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038ce:	21f1      	movs	r1, #241	; 0xf1
 80038d0:	6121      	str	r1, [r4, #16]
 80038d2:	e7ad      	b.n	8003830 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038d6:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038dc:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038e2:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038ec:	b007      	add	sp, #28
 80038ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038f2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038fa:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003900:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	f042 0220 	orr.w	r2, r2, #32
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
}
 800390a:	b007      	add	sp, #28
 800390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 800390e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003910:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003912:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003918:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800391e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	05d0      	lsls	r0, r2, #23
 800392c:	f57f af24 	bpl.w	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
 8003936:	e71f      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003938:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800393e:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	6822      	ldr	r2, [r4, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003946:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003956:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	f042 0204 	orr.w	r2, r2, #4
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003960:	b007      	add	sp, #28
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8003964:	2a01      	cmp	r2, #1
 8003966:	f000 80fc 	beq.w	8003b62 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 800396a:	2a02      	cmp	r2, #2
 800396c:	f000 80be 	beq.w	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8003976:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	9101      	str	r1, [sp, #4]
 800397a:	6961      	ldr	r1, [r4, #20]
 800397c:	9101      	str	r1, [sp, #4]
 800397e:	69a1      	ldr	r1, [r4, #24]
 8003980:	9101      	str	r1, [sp, #4]
 8003982:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003984:	4d06      	ldr	r5, [pc, #24]	; (80039a0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 8003988:	2a03      	cmp	r2, #3
 800398a:	d847      	bhi.n	8003a1c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 800398c:	2a01      	cmp	r2, #1
 800398e:	f000 80a5 	beq.w	8003adc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 8003992:	2a02      	cmp	r2, #2
 8003994:	d00d      	beq.n	80039b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 8003996:	e05e      	b.n	8003a56 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 8003998:	20000200 	.word	0x20000200
 800399c:	ffff0000 	.word	0xffff0000
 80039a0:	20000000 	.word	0x20000000
 80039a4:	14f8b589 	.word	0x14f8b589
 80039a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	1b92      	subs	r2, r2, r6
 80039ac:	2a64      	cmp	r2, #100	; 0x64
 80039ae:	f200 80b4 	bhi.w	8003b1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	6962      	ldr	r2, [r4, #20]
 80039b4:	0757      	lsls	r7, r2, #29
 80039b6:	d5f7      	bpl.n	80039a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 80039b8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	6811      	ldr	r1, [r2, #0]
 80039c0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80039c4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 80039ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039cc:	3201      	adds	r2, #1
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80039d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80039d2:	3a01      	subs	r2, #1
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80039d8:	3a01      	subs	r2, #1
 80039da:	b292      	uxth	r2, r2
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6911      	ldr	r1, [r2, #16]
 80039e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e6:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
          hi2c->XferCount--;
 80039ea:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80039ec:	3201      	adds	r2, #1
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80039f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f2:	3901      	subs	r1, #1
          hi2c->XferSize--;
 80039f4:	3a01      	subs	r2, #1
 80039f6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80039f8:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039fc:	8559      	strh	r1, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	f43f af28 	beq.w	8003854 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	681c      	ldr	r4, [r3, #0]
 8003a06:	e7bf      	b.n	8003988 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a08:	6961      	ldr	r1, [r4, #20]
 8003a0a:	f011 0110 	ands.w	r1, r1, #16
 8003a0e:	f040 8093 	bne.w	8003b38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	1b92      	subs	r2, r2, r6
 8003a16:	2a64      	cmp	r2, #100	; 0x64
 8003a18:	f63f af5c 	bhi.w	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1c:	6962      	ldr	r2, [r4, #20]
 8003a1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003a22:	d0f1      	beq.n	8003a08 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	6921      	ldr	r1, [r4, #16]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003a2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a32:	681c      	ldr	r4, [r3, #0]
        hi2c->XferCount--;
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003a36:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8003a38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003a3a:	625f      	str	r7, [r3, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a3c:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a42:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a46:	d5da      	bpl.n	80039fe <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	704a      	strb	r2, [r1, #1]
 8003a4c:	e7cc      	b.n	80039e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8003a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	1b92      	subs	r2, r2, r6
 8003a52:	2a64      	cmp	r2, #100	; 0x64
 8003a54:	d861      	bhi.n	8003b1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a56:	6962      	ldr	r2, [r4, #20]
 8003a58:	0751      	lsls	r1, r2, #29
 8003a5a:	d5f8      	bpl.n	8003a4e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a6a:	682a      	ldr	r2, [r5, #0]
 8003a6c:	08d2      	lsrs	r2, r2, #3
 8003a6e:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	6a59      	ldr	r1, [r3, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a74:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8003a78:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8003a7e:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a80:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8003a84:	b289      	uxth	r1, r1
 8003a86:	8559      	strh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a88:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 8003a8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003a8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          hi2c->XferSize--;
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003a92:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a94:	6819      	ldr	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
 8003a98:	e002      	b.n	8003aa0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a9a:	694a      	ldr	r2, [r1, #20]
 8003a9c:	0752      	lsls	r2, r2, #29
 8003a9e:	d459      	bmi.n	8003b54 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 8003aa0:	9a00      	ldr	r2, [sp, #0]
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8003aa6:	9a00      	ldr	r2, [sp, #0]
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d1f6      	bne.n	8003a9a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ab0:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003aba:	f041 0120 	orr.w	r1, r1, #32
 8003abe:	6419      	str	r1, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac0:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ac6:	b007      	add	sp, #28
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aca:	6961      	ldr	r1, [r4, #20]
 8003acc:	f011 0110 	ands.w	r1, r1, #16
 8003ad0:	d132      	bne.n	8003b38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	1b92      	subs	r2, r2, r6
 8003ad6:	2a64      	cmp	r2, #100	; 0x64
 8003ad8:	f63f aefc 	bhi.w	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003adc:	6962      	ldr	r2, [r4, #20]
 8003ade:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003ae2:	d0f2      	beq.n	8003aca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	6921      	ldr	r1, [r4, #16]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae8:	7011      	strb	r1, [r2, #0]
 8003aea:	e77d      	b.n	80039e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af2:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	9102      	str	r1, [sp, #8]
 8003afa:	6951      	ldr	r1, [r2, #20]
 8003afc:	9102      	str	r1, [sp, #8]
 8003afe:	6991      	ldr	r1, [r2, #24]
 8003b00:	9102      	str	r1, [sp, #8]
 8003b02:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	6811      	ldr	r1, [r2, #0]
 8003b06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b0a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0c:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003b0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	f43f ae9f 	beq.w	8003854 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	e734      	b.n	8003984 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b1a:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b1e:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b24:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b2a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	f042 0220 	orr.w	r2, r2, #32
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b34:	b007      	add	sp, #28
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3a:	f06f 0010 	mvn.w	r0, #16
 8003b3e:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b50:	6419      	str	r1, [r3, #64]	; 0x40
 8003b52:	e611      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	680a      	ldr	r2, [r1, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	690a      	ldr	r2, [r1, #16]
 8003b5e:	7062      	strb	r2, [r4, #1]
 8003b60:	e733      	b.n	80039ca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	9103      	str	r1, [sp, #12]
 8003b70:	6951      	ldr	r1, [r2, #20]
 8003b72:	9103      	str	r1, [sp, #12]
 8003b74:	6991      	ldr	r1, [r2, #24]
 8003b76:	9103      	str	r1, [sp, #12]
 8003b78:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003b80:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b82:	b662      	cpsie	i
}
 8003b84:	e7c3      	b.n	8003b0e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8003b86:	bf00      	nop

08003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	4b97      	ldr	r3, [pc, #604]	; (8003de8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003b94:	2c20      	cmp	r4, #32
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003b98:	b003      	add	sp, #12
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9c:	681c      	ldr	r4, [r3, #0]
 8003b9e:	e004      	b.n	8003baa <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003ba0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	1bad      	subs	r5, r5, r6
 8003ba4:	2d19      	cmp	r5, #25
 8003ba6:	f200 80cc 	bhi.w	8003d42 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003baa:	69a5      	ldr	r5, [r4, #24]
 8003bac:	ea6f 0c05 	mvn.w	ip, r5
 8003bb0:	f01c 0c02 	ands.w	ip, ip, #2
 8003bb4:	d0f4      	beq.n	8003ba0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003bb6:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
 8003bba:	2d01      	cmp	r5, #1
 8003bbc:	d0ec      	beq.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003bbe:	2501      	movs	r5, #1
 8003bc0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	07ed      	lsls	r5, r5, #31
 8003bc8:	f140 80a7 	bpl.w	8003d1a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bcc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bd0:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bd4:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003bdc:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bde:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003be2:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be6:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bea:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8003bec:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003bf2:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bf4:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003bf6:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003bf8:	851d      	strh	r5, [r3, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfa:	d007      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003bfc:	2a01      	cmp	r2, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003c00:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003c04:	d002      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	2a12      	cmp	r2, #18
 8003c0a:	d109      	bne.n	8003c20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c12:	6022      	str	r2, [r4, #0]
 8003c14:	e004      	b.n	8003c20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 8003c16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	1b92      	subs	r2, r2, r6
 8003c1a:	2a64      	cmp	r2, #100	; 0x64
 8003c1c:	f200 80a0 	bhi.w	8003d60 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c20:	6962      	ldr	r2, [r4, #20]
 8003c22:	07d2      	lsls	r2, r2, #31
 8003c24:	d5f7      	bpl.n	8003c16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003c2c:	d17a      	bne.n	8003d24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c2e:	6120      	str	r0, [r4, #16]
 8003c30:	e009      	b.n	8003c46 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c32:	6962      	ldr	r2, [r4, #20]
 8003c34:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003c38:	f040 80a7 	bne.w	8003d8a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003c3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	1b89      	subs	r1, r1, r6
 8003c40:	2964      	cmp	r1, #100	; 0x64
 8003c42:	f200 80b8 	bhi.w	8003db6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c46:	6962      	ldr	r2, [r4, #20]
 8003c48:	43d2      	mvns	r2, r2
 8003c4a:	f012 0202 	ands.w	r2, r2, #2
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	6962      	ldr	r2, [r4, #20]
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	69a2      	ldr	r2, [r4, #24]
 8003c58:	9201      	str	r2, [sp, #4]
 8003c5a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	f000 80b6 	beq.w	8003dce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c62:	6962      	ldr	r2, [r4, #20]
 8003c64:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003c68:	d12c      	bne.n	8003cc4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6a:	6961      	ldr	r1, [r4, #20]
 8003c6c:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003c70:	d110      	bne.n	8003c94 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	1b92      	subs	r2, r2, r6
 8003c76:	2a64      	cmp	r2, #100	; 0x64
 8003c78:	d9f3      	bls.n	8003c62 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c7c:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c82:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c88:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
 8003c92:	e00e      	b.n	8003cb2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c96:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003c9a:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c9e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cac:	f041 0104 	orr.w	r1, r1, #4
 8003cb0:	6419      	str	r1, [r3, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	f47f af6f 	bne.w	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	e769      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
      hi2c->XferSize--;
 8003cc6:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003cce:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd0:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003cd2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003cd4:	6258      	str	r0, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cd6:	3901      	subs	r1, #1
 8003cd8:	b289      	uxth	r1, r1
 8003cda:	8559      	strh	r1, [r3, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cdc:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ce0:	0749      	lsls	r1, r1, #29
 8003ce2:	d518      	bpl.n	8003d16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 8003ce4:	b1ba      	cbz	r2, 8003d16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003ce8:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cea:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003cec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cee:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003cf0:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003cf2:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003cf4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003cf6:	625f      	str	r7, [r3, #36]	; 0x24
        hi2c->XferSize--;
 8003cf8:	851d      	strh	r5, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cfc:	6962      	ldr	r2, [r4, #20]
 8003cfe:	f012 0204 	ands.w	r2, r2, #4
 8003d02:	d1ab      	bne.n	8003c5c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d04:	6961      	ldr	r1, [r4, #20]
 8003d06:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003d0a:	d1c3      	bne.n	8003c94 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	1b92      	subs	r2, r2, r6
 8003d10:	2a64      	cmp	r2, #100	; 0x64
 8003d12:	d9f3      	bls.n	8003cfc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8003d14:	e7b1      	b.n	8003c7a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 8003d16:	4615      	mov	r5, r2
 8003d18:	e7f0      	b.n	8003cfc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8003d1a:	6825      	ldr	r5, [r4, #0]
 8003d1c:	f045 0501 	orr.w	r5, r5, #1
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	e753      	b.n	8003bcc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d24:	22f0      	movs	r2, #240	; 0xf0
 8003d26:	6122      	str	r2, [r4, #16]
 8003d28:	e007      	b.n	8003d3a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2a:	6962      	ldr	r2, [r4, #20]
 8003d2c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003d30:	d12b      	bne.n	8003d8a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003d32:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	1b89      	subs	r1, r1, r6
 8003d36:	2964      	cmp	r1, #100	; 0x64
 8003d38:	d83d      	bhi.n	8003db6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3a:	6962      	ldr	r2, [r4, #20]
 8003d3c:	0717      	lsls	r7, r2, #28
 8003d3e:	d5f4      	bpl.n	8003d2a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8003d40:	e775      	b.n	8003c2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d42:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d44:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d4c:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d52:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d60:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d62:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d64:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d6a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d70:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	05d1      	lsls	r1, r2, #23
 8003d7e:	f57f af0b 	bpl.w	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
 8003d88:	e706      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d98:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9a:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003da8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	f042 0204 	orr.w	r2, r2, #4
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003db2:	b003      	add	sp, #12
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db6:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
 8003dcc:	e6e4      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003dde:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
    return HAL_OK;
 8003de6:	e6d7      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003de8:	20000200 	.word	0x20000200
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8003df0:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8003df2:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003df4:	4c0e      	ldr	r4, [pc, #56]	; (8003e30 <DS3231_Update+0x40>)
void DS3231_Update(void) {
 8003df6:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003df8:	f10d 0107 	add.w	r1, sp, #7
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8003e00:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003e04:	f7ff fec0 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003e08:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8003e0c:	2213      	movs	r2, #19
 8003e0e:	20d0      	movs	r0, #208	; 0xd0
 8003e10:	f7ff fca8 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8003e14:	e9d4 0217 	ldrd	r0, r2, [r4, #92]	; 0x5c
 8003e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e1c:	f8c4 0071 	str.w	r0, [r4, #113]	; 0x71
 8003e20:	f8c4 106d 	str.w	r1, [r4, #109]	; 0x6d
 8003e24:	f8c4 2075 	str.w	r2, [r4, #117]	; 0x75
 8003e28:	f8c4 3079 	str.w	r3, [r4, #121]	; 0x79
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	20000200 	.word	0x20000200

08003e34 <LCD_Char.constprop.1.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e3a:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8003e42:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e46:	b38b      	cbz	r3, 8003eac <LCD_Char.constprop.1.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e4e:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e50:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003e54:	b351      	cbz	r1, 8003eac <LCD_Char.constprop.1.isra.0+0x78>
 8003e56:	2400      	movs	r4, #0
 8003e58:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	d045      	beq.n	8003eea <LCD_Char.constprop.1.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8003e5e:	4633      	mov	r3, r6
 8003e60:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8003e62:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8003e66:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8003e6a:	d022      	beq.n	8003eb2 <LCD_Char.constprop.1.isra.0+0x7e>
				set_pixels++;
 8003e6c:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e6e:	3401      	adds	r4, #1
 8003e70:	b2e4      	uxtb	r4, r4
 8003e72:	42a1      	cmp	r1, r4
 8003e74:	d8f1      	bhi.n	8003e5a <LCD_Char.constprop.1.isra.0+0x26>
		}
		if (set_pixels > 0)
 8003e76:	b18a      	cbz	r2, 8003e9c <LCD_Char.constprop.1.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003e80:	9b02      	ldr	r3, [sp, #8]
 8003e82:	4420      	add	r0, r4
 8003e84:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003e88:	1a80      	subs	r0, r0, r2
 8003e8a:	4418      	add	r0, r3
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	4451      	add	r1, sl
 8003e90:	4419      	add	r1, r3
 8003e92:	b280      	uxth	r0, r0
 8003e94:	2301      	movs	r3, #1
 8003e96:	b289      	uxth	r1, r1
 8003e98:	f7fc fe16 	bl	8000ac8 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e9c:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003ea0:	f10a 0a01 	add.w	sl, sl, #1
 8003ea4:	fa5f fa8a 	uxtb.w	sl, sl
 8003ea8:	459a      	cmp	sl, r3
 8003eaa:	d3d1      	bcc.n	8003e50 <LCD_Char.constprop.1.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 8003eac:	b005      	add	sp, #20
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d0db      	beq.n	8003e6e <LCD_Char.constprop.1.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003eb6:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003eba:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003ebe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003ec2:	4451      	add	r1, sl
 8003ec4:	4461      	add	r1, ip
 8003ec6:	4420      	add	r0, r4
 8003ec8:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003ecc:	1a80      	subs	r0, r0, r2
 8003ece:	4460      	add	r0, ip
 8003ed0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003ed4:	b289      	uxth	r1, r1
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f8cd c000 	str.w	ip, [sp]
 8003edc:	b280      	uxth	r0, r0
 8003ede:	f7fc fdf3 	bl	8000ac8 <LCD_Rect_Fill>
				set_pixels = 0;
 8003ee2:	462a      	mov	r2, r5
 8003ee4:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003ee8:	e7c1      	b.n	8003e6e <LCD_Char.constprop.1.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003eea:	f108 0001 	add.w	r0, r8, #1
 8003eee:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8003ef2:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003ef4:	2640      	movs	r6, #64	; 0x40
 8003ef6:	fa1f f880 	uxth.w	r8, r0
 8003efa:	e7b2      	b.n	8003e62 <LCD_Char.constprop.1.isra.0+0x2e>

08003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003efc:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f00:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	4c32      	ldr	r4, [pc, #200]	; (8003fcc <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f10:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
    huart->TxXferSize = Size;
 8003f14:	f8a4 10a4 	strh.w	r1, [r4, #164]	; 0xa4
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003f18:	4605      	mov	r5, r0
 8003f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f1c:	f8a4 10a6 	strh.w	r1, [r4, #166]	; 0xa6
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	d049      	beq.n	8003fb6 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 8003f22:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 8003f24:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003f26:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    __HAL_UNLOCK(huart);
 8003f2a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
    while (huart->TxXferCount > 0U)
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d047      	beq.n	8003fc4 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003f38:	e003      	b.n	8003f42 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 8003f3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f3c:	1a12      	subs	r2, r2, r0
 8003f3e:	2a64      	cmp	r2, #100	; 0x64
 8003f40:	d823      	bhi.n	8003f8a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	680b      	ldr	r3, [r1, #0]
 8003f44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003f48:	d0f7      	beq.n	8003f3a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 8003f4a:	b37d      	cbz	r5, 8003fac <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f50:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8003f52:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    while (huart->TxXferCount > 0U)
 8003f5e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ec      	bne.n	8003f42 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 8003f70:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f72:	1a12      	subs	r2, r2, r0
 8003f74:	2a64      	cmp	r2, #100	; 0x64
 8003f76:	d808      	bhi.n	8003f8a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	680b      	ldr	r3, [r1, #0]
 8003f7a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f7e:	d0f7      	beq.n	8003f70 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8003f80:	2320      	movs	r3, #32
 8003f82:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
}
 8003f86:	bc30      	pop	{r4, r5}
 8003f88:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 8003f8a:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8c:	68ca      	ldr	r2, [r1, #12]
 8003f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f92:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	694a      	ldr	r2, [r1, #20]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003f9c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
        __HAL_UNLOCK(huart);
 8003fa0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
        huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
}
 8003fa8:	bc30      	pop	{r4, r5}
 8003faa:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fac:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	e7cc      	b.n	8003f50 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	d1b1      	bne.n	8003f22 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 8003fbe:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	e7af      	b.n	8003f24 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003fc8:	e7d6      	b.n	8003f78 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 8003fca:	bf00      	nop
 8003fcc:	20000200 	.word	0x20000200

08003fd0 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003fd0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd2:	4d10      	ldr	r5, [pc, #64]	; (8004014 <HAL_InitTick.isra.0+0x44>)
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <HAL_InitTick.isra.0+0x48>)
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d20e      	bcs.n	8004004 <HAL_InitTick.isra.0+0x34>
 8003fe6:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fe8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fec:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	4e09      	ldr	r6, [pc, #36]	; (800401c <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff6:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff8:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffe:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004000:	6111      	str	r1, [r2, #16]
 8004002:	d900      	bls.n	8004006 <HAL_InitTick.isra.0+0x36>
}
 8004004:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004006:	4621      	mov	r1, r4
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7fd fba2 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8004010:	606c      	str	r4, [r5, #4]
}
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	20000000 	.word	0x20000000
 8004018:	10624dd3 	.word	0x10624dd3
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8004024:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004028:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800402a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800402c:	460d      	mov	r5, r1
 800402e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004030:	f002 f9b0 	bl	8006394 <strlen>
 8004034:	b3a8      	cbz	r0, 80040a2 <LCD_Font.constprop.0+0x82>
 8004036:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004038:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800403a:	2691      	movs	r6, #145	; 0x91
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800403c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800403e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80040a8 <LCD_Font.constprop.0+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <LCD_Font.constprop.0+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004044:	f10d 0b08 	add.w	fp, sp, #8
 8004048:	e01c      	b.n	8004084 <LCD_Font.constprop.0+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 800404a:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800404e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8004052:	d812      	bhi.n	800407a <LCD_Font.constprop.0+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004054:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004058:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800405c:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800405e:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004062:	4638      	mov	r0, r7
 8004064:	4631      	mov	r1, r6
 8004066:	f7ff fee5 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 800406a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800406e:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004070:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004072:	f002 f98f 	bl	8006394 <strlen>
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <LCD_Font.constprop.0+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8004078:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800407a:	3401      	adds	r4, #1
 800407c:	b2a4      	uxth	r4, r4
 800407e:	4284      	cmp	r4, r0
 8004080:	4622      	mov	r2, r4
 8004082:	d20e      	bcs.n	80040a2 <LCD_Font.constprop.0+0x82>
		char c = text[text_pos];
 8004084:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8004086:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 800408a:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800408c:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8004090:	d1db      	bne.n	800404a <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004092:	3401      	adds	r4, #1
 8004094:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8004096:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004098:	4284      	cmp	r4, r0
			cursor_x = x;
 800409a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800409c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800409e:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040a0:	d3f0      	bcc.n	8004084 <LCD_Font.constprop.0+0x64>
		}
	}
}
 80040a2:	b005      	add	sp, #20
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a8:	0800d7c8 	.word	0x0800d7c8
 80040ac:	0801cd20 	.word	0x0801cd20

080040b0 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80040b4:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040b8:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040ba:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040bc:	460d      	mov	r5, r1
 80040be:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040c0:	f002 f968 	bl	8006394 <strlen>
 80040c4:	b3a8      	cbz	r0, 8004132 <LCD_Font.constprop.1+0x82>
 80040c6:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80040c8:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80040ca:	265a      	movs	r6, #90	; 0x5a
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040cc:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040ce:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004138 <LCD_Font.constprop.1+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <LCD_Font.constprop.1+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040d4:	f10d 0b08 	add.w	fp, sp, #8
 80040d8:	e01c      	b.n	8004114 <LCD_Font.constprop.1+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 80040da:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040de:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80040e2:	d812      	bhi.n	800410a <LCD_Font.constprop.1+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040e4:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040e8:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040ec:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040ee:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040f2:	4638      	mov	r0, r7
 80040f4:	4631      	mov	r1, r6
 80040f6:	f7ff fe9d 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80040fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040fe:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004100:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004102:	f002 f947 	bl	8006394 <strlen>
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <LCD_Font.constprop.1+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8004108:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800410a:	3401      	adds	r4, #1
 800410c:	b2a4      	uxth	r4, r4
 800410e:	4284      	cmp	r4, r0
 8004110:	4622      	mov	r2, r4
 8004112:	d20e      	bcs.n	8004132 <LCD_Font.constprop.1+0x82>
		char c = text[text_pos];
 8004114:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8004116:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 800411a:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800411c:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8004120:	d1db      	bne.n	80040da <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004122:	3401      	adds	r4, #1
 8004124:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8004126:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004128:	4284      	cmp	r4, r0
			cursor_x = x;
 800412a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800412c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800412e:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004130:	d3f0      	bcc.n	8004114 <LCD_Font.constprop.1+0x64>
}
 8004132:	b005      	add	sp, #20
 8004134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004138:	0800d7c8 	.word	0x0800d7c8
 800413c:	0801cd20 	.word	0x0801cd20

08004140 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8004144:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004148:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800414a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800414c:	460d      	mov	r5, r1
 800414e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004150:	f002 f920 	bl	8006394 <strlen>
 8004154:	b3a8      	cbz	r0, 80041c2 <LCD_Font.constprop.2+0x82>
 8004156:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004158:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800415a:	2628      	movs	r6, #40	; 0x28
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800415c:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800415e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80041c8 <LCD_Font.constprop.2+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <LCD_Font.constprop.2+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004164:	f10d 0b08 	add.w	fp, sp, #8
 8004168:	e01c      	b.n	80041a4 <LCD_Font.constprop.2+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 800416a:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800416e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8004172:	d812      	bhi.n	800419a <LCD_Font.constprop.2+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004174:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004178:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800417c:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800417e:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004182:	4638      	mov	r0, r7
 8004184:	4631      	mov	r1, r6
 8004186:	f7ff fe55 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 800418a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800418e:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004190:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004192:	f002 f8ff 	bl	8006394 <strlen>
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <LCD_Font.constprop.2+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8004198:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800419a:	3401      	adds	r4, #1
 800419c:	b2a4      	uxth	r4, r4
 800419e:	4284      	cmp	r4, r0
 80041a0:	4622      	mov	r2, r4
 80041a2:	d20e      	bcs.n	80041c2 <LCD_Font.constprop.2+0x82>
		char c = text[text_pos];
 80041a4:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80041a6:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 80041aa:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80041ac:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 80041b0:	d1db      	bne.n	800416a <LCD_Font.constprop.2+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041b2:	3401      	adds	r4, #1
 80041b4:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80041b6:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041b8:	4284      	cmp	r4, r0
			cursor_x = x;
 80041ba:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041bc:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80041be:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041c0:	d3f0      	bcc.n	80041a4 <LCD_Font.constprop.2+0x64>
}
 80041c2:	b005      	add	sp, #20
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	0800d7c8 	.word	0x0800d7c8
 80041cc:	0801cd20 	.word	0x0801cd20

080041d0 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80041d4:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80041d8:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041da:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80041dc:	460d      	mov	r5, r1
 80041de:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041e0:	f002 f8d8 	bl	8006394 <strlen>
 80041e4:	b3b8      	cbz	r0, 8004256 <LCD_Font.constprop.3+0x86>
 80041e6:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80041e8:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80041ea:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041ec:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80041ee:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800425c <LCD_Font.constprop.3+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80041f2:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <LCD_Font.constprop.3+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80041f4:	f10d 0b08 	add.w	fp, sp, #8
 80041f8:	e01d      	b.n	8004236 <LCD_Font.constprop.3+0x66>
 80041fa:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80041fe:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004200:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
		else if(c >= font.first && c <= font.last && c != '\r')
 8004204:	d812      	bhi.n	800422c <LCD_Font.constprop.3+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004206:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800420a:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800420e:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004210:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004214:	4638      	mov	r0, r7
 8004216:	4631      	mov	r1, r6
 8004218:	f7ff fe0c 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 800421c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004220:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004222:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004224:	f002 f8b6 	bl	8006394 <strlen>
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <LCD_Font.constprop.3+0x90>)
			cursor_x += glyph.xAdvance * size;
 800422a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800422c:	3401      	adds	r4, #1
 800422e:	b2a4      	uxth	r4, r4
 8004230:	4284      	cmp	r4, r0
 8004232:	4622      	mov	r2, r4
 8004234:	d20f      	bcs.n	8004256 <LCD_Font.constprop.3+0x86>
		char c = text[text_pos];
 8004236:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800423a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800423e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8004242:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8004244:	d1d9      	bne.n	80041fa <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004246:	3401      	adds	r4, #1
 8004248:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800424a:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800424c:	4284      	cmp	r4, r0
			cursor_x = x;
 800424e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004250:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8004252:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004254:	d3ef      	bcc.n	8004236 <LCD_Font.constprop.3+0x66>
}
 8004256:	b005      	add	sp, #20
 8004258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425c:	0800d7c8 	.word	0x0800d7c8
 8004260:	0800de0c 	.word	0x0800de0c

08004264 <LCD_Font.constprop.4>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_y = y;
 8004268:	b20b      	sxth	r3, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800426a:	b09f      	sub	sp, #124	; 0x7c
	int16_t cursor_x = x;
 800426c:	b204      	sxth	r4, r0
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800426e:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004270:	9216      	str	r2, [sp, #88]	; 0x58
	int16_t cursor_x = x;
 8004272:	9418      	str	r4, [sp, #96]	; 0x60
	int16_t cursor_y = y;
 8004274:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004276:	f002 f88d 	bl	8006394 <strlen>
 800427a:	2800      	cmp	r0, #0
 800427c:	d068      	beq.n	8004350 <LCD_Font.constprop.4+0xec>
 800427e:	2300      	movs	r3, #0
 8004280:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004358 <LCD_Font.constprop.4+0xf4>
 8004284:	4f35      	ldr	r7, [pc, #212]	; (800435c <LCD_Font.constprop.4+0xf8>)
 8004286:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004360 <LCD_Font.constprop.4+0xfc>
 800428a:	9307      	str	r3, [sp, #28]
		char c = text[text_pos];
 800428c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800428e:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 8004290:	2b0a      	cmp	r3, #10
 8004292:	d052      	beq.n	800433a <LCD_Font.constprop.4+0xd6>
		else if(c >= font.first && c <= font.last && c != '\r')
 8004294:	3b20      	subs	r3, #32
 8004296:	b2da      	uxtb	r2, r3
 8004298:	2a5e      	cmp	r2, #94	; 0x5e
 800429a:	d853      	bhi.n	8004344 <LCD_Font.constprop.4+0xe0>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800429c:	4a31      	ldr	r2, [pc, #196]	; (8004364 <LCD_Font.constprop.4+0x100>)
 800429e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042a6:	ab1e      	add	r3, sp, #120	; 0x78
 80042a8:	e903 0003 	stmdb	r3, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042ac:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
	uint16_t bo = glyph -> bitmapOffset;
 80042b0:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042b4:	9317      	str	r3, [sp, #92]	; 0x5c
	uint16_t bo = glyph -> bitmapOffset;
 80042b6:	9205      	str	r2, [sp, #20]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f001 8151 	beq.w	8005560 <LCD_Font.constprop.4+0x12fc>
			cursor_x += glyph.xAdvance * size;
 80042be:	b2a3      	uxth	r3, r4
 80042c0:	9315      	str	r3, [sp, #84]	; 0x54
 80042c2:	2300      	movs	r3, #0
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80042c4:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	uint8_t bits = 0, bit = 0;
 80042c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
			cursor_x += glyph.xAdvance * size;
 80042cc:	9306      	str	r3, [sp, #24]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80042ce:	9204      	str	r2, [sp, #16]
 80042d0:	9b04      	ldr	r3, [sp, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 846d 	beq.w	8004bb2 <LCD_Font.constprop.4+0x94e>
 80042d8:	2300      	movs	r3, #0
 80042da:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80042de:	469e      	mov	lr, r3
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	e011      	b.n	8004308 <LCD_Font.constprop.4+0xa4>
			bit >>= 1;
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	9201      	str	r2, [sp, #4]
			if(bits & bit)
 80042e8:	9a02      	ldr	r2, [sp, #8]
 80042ea:	421a      	tst	r2, r3
 80042ec:	d01d      	beq.n	800432a <LCD_Font.constprop.4+0xc6>
				set_pixels++;
 80042ee:	f10e 0201 	add.w	r2, lr, #1
 80042f2:	4673      	mov	r3, lr
 80042f4:	fa1f fe82 	uxth.w	lr, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80042f8:	9a00      	ldr	r2, [sp, #0]
 80042fa:	9904      	ldr	r1, [sp, #16]
 80042fc:	3201      	adds	r2, #1
 80042fe:	9200      	str	r2, [sp, #0]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	428a      	cmp	r2, r1
 8004304:	f080 8451 	bcs.w	8004baa <LCD_Font.constprop.4+0x946>
			if(bit == 0)
 8004308:	9a01      	ldr	r2, [sp, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	2a00      	cmp	r2, #0
 800430e:	d1e9      	bne.n	80042e4 <LCD_Font.constprop.4+0x80>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	9301      	str	r3, [sp, #4]
				bit  = 0x80;
 8004314:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004316:	9905      	ldr	r1, [sp, #20]
 8004318:	4813      	ldr	r0, [pc, #76]	; (8004368 <LCD_Font.constprop.4+0x104>)
 800431a:	1c4a      	adds	r2, r1, #1
 800431c:	5c09      	ldrb	r1, [r1, r0]
 800431e:	b292      	uxth	r2, r2
 8004320:	9102      	str	r1, [sp, #8]
 8004322:	9205      	str	r2, [sp, #20]
			if(bits & bit)
 8004324:	9a02      	ldr	r2, [sp, #8]
 8004326:	421a      	tst	r2, r3
 8004328:	d1e1      	bne.n	80042ee <LCD_Font.constprop.4+0x8a>
			else if (set_pixels > 0)
 800432a:	f1be 0f00 	cmp.w	lr, #0
 800432e:	d11d      	bne.n	800436c <LCD_Font.constprop.4+0x108>
				set_pixels++;
 8004330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004334:	f04f 0e00 	mov.w	lr, #0
 8004338:	e7de      	b.n	80042f8 <LCD_Font.constprop.4+0x94>
			cursor_y += font.yAdvance * size;
 800433a:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 800433c:	9c18      	ldr	r4, [sp, #96]	; 0x60
			cursor_y += font.yAdvance * size;
 800433e:	3339      	adds	r3, #57	; 0x39
 8004340:	b21b      	sxth	r3, r3
 8004342:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004344:	9b07      	ldr	r3, [sp, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	4283      	cmp	r3, r0
 800434c:	9307      	str	r3, [sp, #28]
 800434e:	d39d      	bcc.n	800428c <LCD_Font.constprop.4+0x28>
}
 8004350:	b01f      	add	sp, #124	; 0x7c
 8004352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	40010c00 	.word	0x40010c00
 800435c:	40010800 	.word	0x40010800
 8004360:	40011000 	.word	0x40011000
 8004364:	0800d7c8 	.word	0x0800d7c8
 8004368:	0801cd20 	.word	0x0801cd20
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800436c:	9c00      	ldr	r4, [sp, #0]
 800436e:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
 8004372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004376:	4423      	add	r3, r4
 8004378:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800437a:	eba3 030e 	sub.w	r3, r3, lr
 800437e:	4423      	add	r3, r4
 8004380:	fa1f fa83 	uxth.w	sl, r3
 8004384:	9c06      	ldr	r4, [sp, #24]
 8004386:	f99d 3076 	ldrsb.w	r3, [sp, #118]	; 0x76
 800438a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800438e:	4423      	add	r3, r4
 8004390:	9c08      	ldr	r4, [sp, #32]
 8004392:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004396:	4423      	add	r3, r4
 8004398:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800439c:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80043a0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80043a4:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043a8:	f04f 0910 	mov.w	r9, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043ac:	f8cb c010 	str.w	ip, [fp, #16]
 80043b0:	613e      	str	r6, [r7, #16]
 80043b2:	613a      	str	r2, [r7, #16]
 80043b4:	f8c8 0010 	str.w	r0, [r8, #16]
 80043b8:	f8c8 1010 	str.w	r1, [r8, #16]
 80043bc:	f8c8 6010 	str.w	r6, [r8, #16]
 80043c0:	f8c8 2010 	str.w	r2, [r8, #16]
 80043c4:	f8c8 5010 	str.w	r5, [r8, #16]
 80043c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80043cc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80043d0:	6139      	str	r1, [r7, #16]
 80043d2:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043d4:	f8c7 9010 	str.w	r9, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043d8:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043da:	2440      	movs	r4, #64	; 0x40
 80043dc:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043de:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80043e2:	613c      	str	r4, [r7, #16]
 80043e4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80043e8:	f8c8 9010 	str.w	r9, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043ec:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043f0:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043f2:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	f8cb 4010 	str.w	r4, [fp, #16]
 80043fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80043fe:	f8cb 4010 	str.w	r4, [fp, #16]
 8004402:	2401      	movs	r4, #1
 8004404:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004408:	f8cb c010 	str.w	ip, [fp, #16]
 800440c:	613e      	str	r6, [r7, #16]
 800440e:	613a      	str	r2, [r7, #16]
 8004410:	f8c8 0010 	str.w	r0, [r8, #16]
 8004414:	f8c8 1010 	str.w	r1, [r8, #16]
 8004418:	f8c8 6010 	str.w	r6, [r8, #16]
 800441c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004424:	f8c8 5010 	str.w	r5, [r8, #16]
 8004428:	f8c8 2010 	str.w	r2, [r8, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800442c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004430:	4452      	add	r2, sl
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004432:	f3c3 34c0 	ubfx	r4, r3, #15, #1
	data[0] = x1 >> 8;
 8004436:	f3c3 2007 	ubfx	r0, r3, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800443a:	fa1f f982 	uxth.w	r9, r2
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800443e:	b29a      	uxth	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004440:	041b      	lsls	r3, r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8004442:	bf48      	it	mi
 8004444:	2304      	movmi	r3, #4
 8004446:	9403      	str	r4, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004448:	bf54      	ite	pl
 800444a:	6139      	strpl	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800444c:	613b      	strmi	r3, [r7, #16]
 800444e:	f3c2 3380 	ubfx	r3, r2, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004452:	0455      	lsls	r5, r2, #17
 8004454:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004456:	bf54      	ite	pl
 8004458:	f44f 2300 	movpl.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800445c:	2308      	movmi	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800445e:	0494      	lsls	r4, r2, #18
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	f3c2 3340 	ubfx	r3, r2, #13, #1
 8004466:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004468:	bf54      	ite	pl
 800446a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800446e:	2310      	movmi	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004470:	04d1      	lsls	r1, r2, #19
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	f3c2 3300 	ubfx	r3, r2, #12, #1
 8004478:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800447a:	bf54      	ite	pl
 800447c:	f44f 1300 	movpl.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004480:	2320      	movmi	r3, #32
 8004482:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004484:	0513      	lsls	r3, r2, #20
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004486:	bf54      	ite	pl
 8004488:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800448c:	2340      	movmi	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800448e:	0555      	lsls	r5, r2, #21
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	f3c2 2380 	ubfx	r3, r2, #10, #1
 8004496:	9310      	str	r3, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004498:	bf54      	ite	pl
 800449a:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800449e:	2380      	movmi	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80044a0:	0594      	lsls	r4, r2, #22
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	f3c2 2340 	ubfx	r3, r2, #9, #1
 80044a8:	9311      	str	r3, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044aa:	bf54      	ite	pl
 80044ac:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80044b0:	2310      	movmi	r3, #16
 80044b2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80044b6:	f010 0301 	ands.w	r3, r0, #1
 80044ba:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044bc:	bf0c      	ite	eq
 80044be:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80044c2:	2320      	movne	r3, #32
 80044c4:	f8c8 3010 	str.w	r3, [r8, #16]
 80044c8:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ca:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044ce:	f8cb 3010 	str.w	r3, [fp, #16]
 80044d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d6:	f8cb 3010 	str.w	r3, [fp, #16]
 80044da:	2301      	movs	r3, #1
 80044dc:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80044e8:	f8cb 3010 	str.w	r3, [fp, #16]
 80044ec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80044f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80044f4:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 80044f8:	613e      	str	r6, [r7, #16]
 80044fa:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80044fe:	6139      	str	r1, [r7, #16]
 8004500:	f8c8 3010 	str.w	r3, [r8, #16]
 8004504:	9413      	str	r4, [sp, #76]	; 0x4c
 8004506:	f8c8 0010 	str.w	r0, [r8, #16]
 800450a:	f8c8 6010 	str.w	r6, [r8, #16]
 800450e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004512:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004516:	f8c8 5010 	str.w	r5, [r8, #16]
 800451a:	f8c8 1010 	str.w	r1, [r8, #16]
 800451e:	0611      	lsls	r1, r2, #24
    GPIOx->BSRR = GPIO_Pin;
 8004520:	bf48      	it	mi
 8004522:	2104      	movmi	r1, #4
 8004524:	b2d3      	uxtb	r3, r2
 8004526:	bf4c      	ite	mi
 8004528:	6139      	strmi	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800452a:	6138      	strpl	r0, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800452c:	065d      	lsls	r5, r3, #25
 800452e:	bf54      	ite	pl
 8004530:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004534:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004536:	0698      	lsls	r0, r3, #26
 8004538:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800453a:	bf54      	ite	pl
 800453c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004540:	2110      	movmi	r1, #16
 8004542:	6139      	str	r1, [r7, #16]
 8004544:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8004548:	9114      	str	r1, [sp, #80]	; 0x50
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800454a:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800454c:	bf54      	ite	pl
 800454e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004552:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004554:	0718      	lsls	r0, r3, #28
 8004556:	6139      	str	r1, [r7, #16]
 8004558:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800455c:	910e      	str	r1, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455e:	bf54      	ite	pl
 8004560:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004564:	2140      	movmi	r1, #64	; 0x40
 8004566:	6139      	str	r1, [r7, #16]
 8004568:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800456c:	910d      	str	r1, [sp, #52]	; 0x34
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800456e:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004570:	bf54      	ite	pl
 8004572:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004576:	2180      	movmi	r1, #128	; 0x80
 8004578:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800457c:	6139      	str	r1, [r7, #16]
 800457e:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8004582:	f3c3 0140 	ubfx	r1, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004586:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004588:	bf54      	ite	pl
 800458a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800458e:	2310      	movmi	r3, #16
 8004590:	910b      	str	r1, [sp, #44]	; 0x2c
 8004592:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004596:	f012 0301 	ands.w	r3, r2, #1
 800459a:	930c      	str	r3, [sp, #48]	; 0x30
 800459c:	f3c2 2cc0 	ubfx	ip, r2, #11, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045a0:	bf0c      	ite	eq
 80045a2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80045a6:	2320      	movne	r3, #32
 80045a8:	2202      	movs	r2, #2
 80045aa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045ae:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045b2:	f8cb 2010 	str.w	r2, [fp, #16]
 80045b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ba:	f8cb 2010 	str.w	r2, [fp, #16]
 80045be:	2201      	movs	r2, #1
 80045c0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045cc:	f8cb 2010 	str.w	r2, [fp, #16]
 80045d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045d4:	613e      	str	r6, [r7, #16]
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	f8c8 2010 	str.w	r2, [r8, #16]
 80045dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80045e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80045e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045e8:	f8c8 2010 	str.w	r2, [r8, #16]
 80045ec:	f8c8 6010 	str.w	r6, [r8, #16]
 80045f0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	f8c8 0010 	str.w	r0, [r8, #16]
 80045fa:	f8c8 1010 	str.w	r1, [r8, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8721 	beq.w	8005446 <LCD_Font.constprop.4+0x11e2>
    GPIOx->BSRR = GPIO_Pin;
 8004604:	2304      	movs	r3, #4
 8004606:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8720 	bne.w	8005450 <LCD_Font.constprop.4+0x11ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004614:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 871f 	bne.w	800545c <LCD_Font.constprop.4+0x11f8>
 800461e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004622:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 871e 	bne.w	8005468 <LCD_Font.constprop.4+0x1204>
 800462c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004630:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004632:	f1bc 0f00 	cmp.w	ip, #0
 8004636:	f040 871d 	bne.w	8005474 <LCD_Font.constprop.4+0x1210>
 800463a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800463e:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 871c 	bne.w	8005480 <LCD_Font.constprop.4+0x121c>
 8004648:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800464c:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800464e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 871b 	bne.w	800548c <LCD_Font.constprop.4+0x1228>
 8004656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800465a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800465e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 871a 	bne.w	800549a <LCD_Font.constprop.4+0x1236>
 8004666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800466a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800466e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004670:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004674:	f8cb 2010 	str.w	r2, [fp, #16]
 8004678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800467c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004680:	2201      	movs	r2, #1
 8004682:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004686:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800468a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800468e:	f8cb 2010 	str.w	r2, [fp, #16]
 8004692:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004696:	613e      	str	r6, [r7, #16]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	f8c8 2010 	str.w	r2, [r8, #16]
 800469e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80046a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80046aa:	f8c8 2010 	str.w	r2, [r8, #16]
 80046ae:	f8c8 6010 	str.w	r6, [r8, #16]
 80046b2:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80046b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046b8:	f8c8 0010 	str.w	r0, [r8, #16]
 80046bc:	f8c8 1010 	str.w	r1, [r8, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8718 	beq.w	80054f6 <LCD_Font.constprop.4+0x1292>
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	2304      	movs	r3, #4
 80046c8:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	f040 86ea 	bne.w	80054a4 <LCD_Font.constprop.4+0x1240>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046d4:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	f040 86e9 	bne.w	80054ae <LCD_Font.constprop.4+0x124a>
 80046dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046e0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80046e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 86e8 	bne.w	80054ba <LCD_Font.constprop.4+0x1256>
 80046ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046ee:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80046f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 86e7 	bne.w	80054c6 <LCD_Font.constprop.4+0x1262>
 80046f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046fc:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80046fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 86e6 	bne.w	80054d2 <LCD_Font.constprop.4+0x126e>
 8004706:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800470a:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800470c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 86e5 	bne.w	80054de <LCD_Font.constprop.4+0x127a>
 8004714:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004718:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800471c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 86e4 	bne.w	80054ec <LCD_Font.constprop.4+0x1288>
 8004724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004728:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800472c:	2502      	movs	r5, #2
 800472e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004732:	f8cb 6010 	str.w	r6, [fp, #16]
 8004736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800473a:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800473e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004742:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004746:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800474a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800474e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004752:	f8cb 3010 	str.w	r3, [fp, #16]
 8004756:	f8cb 0010 	str.w	r0, [fp, #16]
 800475a:	613e      	str	r6, [r7, #16]
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004762:	f8c8 2010 	str.w	r2, [r8, #16]
 8004766:	f8c8 6010 	str.w	r6, [r8, #16]
 800476a:	f8c8 3010 	str.w	r3, [r8, #16]
 800476e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004772:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004776:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800477a:	f8c8 4010 	str.w	r4, [r8, #16]
 800477e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004782:	613a      	str	r2, [r7, #16]
 8004784:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004786:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800478a:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800478c:	2440      	movs	r4, #64	; 0x40
 800478e:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004790:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8004794:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004796:	f8c8 c010 	str.w	ip, [r8, #16]
 800479a:	f04f 0c20 	mov.w	ip, #32
 800479e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80047a2:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047a6:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047aa:	f8cb 5010 	str.w	r5, [fp, #16]
 80047ae:	2501      	movs	r5, #1
 80047b0:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047b4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80047b8:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047bc:	f8cb 0010 	str.w	r0, [fp, #16]
 80047c0:	613e      	str	r6, [r7, #16]
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	f8c8 1010 	str.w	r1, [r8, #16]
 80047c8:	f8c8 2010 	str.w	r2, [r8, #16]
 80047cc:	f8c8 6010 	str.w	r6, [r8, #16]
 80047d0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80047d4:	ea5f 33da 	movs.w	r3, sl, lsr #15
 80047d8:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047dc:	bf18      	it	ne
 80047de:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80047e4:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047e8:	bf14      	ite	ne
 80047ea:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ec:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80047ee:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 80047f2:	bf0c      	ite	eq
 80047f4:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80047f8:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80047fa:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 80047fe:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004800:	bf0c      	ite	eq
 8004802:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004806:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004808:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 800480c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800480e:	bf0c      	ite	eq
 8004810:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004814:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004816:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 800481a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800481c:	bf0c      	ite	eq
 800481e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004822:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004824:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004828:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800482a:	bf0c      	ite	eq
 800482c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004830:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004832:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004836:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004838:	bf0c      	ite	eq
 800483a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800483e:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004840:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004844:	f8c8 3010 	str.w	r3, [r8, #16]
 8004848:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800484c:	bf0c      	ite	eq
 800484e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004852:	2320      	movne	r3, #32
 8004854:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004858:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800485c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004864:	f8cb 2010 	str.w	r2, [fp, #16]
 8004868:	2201      	movs	r2, #1
 800486a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800486e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004876:	f8cb 2010 	str.w	r2, [fp, #16]
 800487a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800487e:	613e      	str	r6, [r7, #16]
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	f8c8 2010 	str.w	r2, [r8, #16]
 8004886:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800488a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800488e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004892:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004896:	f8c8 6010 	str.w	r6, [r8, #16]
 800489a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800489e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048a2:	bf18      	it	ne
 80048a4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048a6:	f8c8 0010 	str.w	r0, [r8, #16]
 80048aa:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048ae:	bf14      	ite	ne
 80048b0:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048b2:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80048b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80048b8:	bf0c      	ite	eq
 80048ba:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80048be:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80048c0:	f01a 0f20 	tst.w	sl, #32
 80048c4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048c6:	bf0c      	ite	eq
 80048c8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80048cc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80048ce:	f01a 0f10 	tst.w	sl, #16
 80048d2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048d4:	bf0c      	ite	eq
 80048d6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80048da:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80048dc:	f01a 0f08 	tst.w	sl, #8
 80048e0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048e2:	bf0c      	ite	eq
 80048e4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80048e8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80048ea:	f01a 0f04 	tst.w	sl, #4
 80048ee:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048f0:	bf0c      	ite	eq
 80048f2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80048f6:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80048f8:	f01a 0f02 	tst.w	sl, #2
 80048fc:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048fe:	bf0c      	ite	eq
 8004900:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004904:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004906:	f01a 0f01 	tst.w	sl, #1
 800490a:	f8c8 3010 	str.w	r3, [r8, #16]
 800490e:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004912:	bf0c      	ite	eq
 8004914:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004918:	2320      	movne	r3, #32
 800491a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800491e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004922:	f8cb 2010 	str.w	r2, [fp, #16]
 8004926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492a:	f8cb 2010 	str.w	r2, [fp, #16]
 800492e:	2201      	movs	r2, #1
 8004930:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004934:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004940:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004944:	613e      	str	r6, [r7, #16]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	f8c8 2010 	str.w	r2, [r8, #16]
 800494c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004950:	f8c8 2010 	str.w	r2, [r8, #16]
 8004954:	f8c8 6010 	str.w	r6, [r8, #16]
 8004958:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800495c:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004960:	bf18      	it	ne
 8004962:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004964:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800496c:	f8c8 0010 	str.w	r0, [r8, #16]
 8004970:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004974:	bf14      	ite	ne
 8004976:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004978:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800497a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800497e:	bf0c      	ite	eq
 8004980:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004984:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004986:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800498a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800498c:	bf0c      	ite	eq
 800498e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004992:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004994:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 8004998:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800499a:	bf0c      	ite	eq
 800499c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80049a0:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80049a2:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049a8:	bf0c      	ite	eq
 80049aa:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80049b0:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80049b4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049b6:	bf0c      	ite	eq
 80049b8:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80049bc:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80049be:	f419 7f00 	tst.w	r9, #512	; 0x200
 80049c2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049c4:	bf0c      	ite	eq
 80049c6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80049ca:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80049cc:	f419 7f80 	tst.w	r9, #256	; 0x100
 80049d0:	f8c8 3010 	str.w	r3, [r8, #16]
 80049d4:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049d8:	bf0c      	ite	eq
 80049da:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80049de:	2320      	movne	r3, #32
 80049e0:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049e4:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049e8:	f8cb 2010 	str.w	r2, [fp, #16]
 80049ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049f0:	f8cb 2010 	str.w	r2, [fp, #16]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80049fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a02:	f8cb 2010 	str.w	r2, [fp, #16]
 8004a06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a0a:	613e      	str	r6, [r7, #16]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004a12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004a16:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004a1a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004a1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004a22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a26:	f8c8 6010 	str.w	r6, [r8, #16]
 8004a2a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	bf18      	it	ne
 8004a30:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a32:	f8c8 0010 	str.w	r0, [r8, #16]
 8004a36:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a3a:	bf14      	ite	ne
 8004a3c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a3e:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004a40:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004a44:	bf0c      	ite	eq
 8004a46:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004a4a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004a4c:	f019 0f20 	tst.w	r9, #32
 8004a50:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a52:	bf0c      	ite	eq
 8004a54:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a58:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004a5a:	f019 0f10 	tst.w	r9, #16
 8004a5e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a60:	bf0c      	ite	eq
 8004a62:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a66:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004a68:	f019 0f08 	tst.w	r9, #8
 8004a6c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a6e:	bf0c      	ite	eq
 8004a70:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004a74:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004a76:	f019 0f04 	tst.w	r9, #4
 8004a7a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a7c:	bf0c      	ite	eq
 8004a7e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004a84:	f019 0f02 	tst.w	r9, #2
 8004a88:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a8a:	bf0c      	ite	eq
 8004a8c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a90:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004a92:	f019 0f01 	tst.w	r9, #1
 8004a96:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a9a:	bf0c      	ite	eq
 8004a9c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004aa0:	2320      	movne	r3, #32
 8004aa2:	f04f 0902 	mov.w	r9, #2
 8004aa6:	f8c8 3010 	str.w	r3, [r8, #16]
 8004aaa:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab2:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8004ab6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004aba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004abe:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ac2:	f8cb 9010 	str.w	r9, [fp, #16]
 8004ac6:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aca:	f8cb 3010 	str.w	r3, [fp, #16]
 8004ace:	f8cb 0010 	str.w	r0, [fp, #16]
 8004ad2:	613e      	str	r6, [r7, #16]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ada:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ade:	f8c8 6010 	str.w	r6, [r8, #16]
 8004ae2:	f8c8 3010 	str.w	r3, [r8, #16]
 8004ae6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8004aee:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	2310      	movs	r3, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004af4:	f8c8 5010 	str.w	r5, [r8, #16]
 8004af8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004afc:	6139      	str	r1, [r7, #16]
 8004afe:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b04:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004b10:	f04f 0c00 	mov.w	ip, #0
 8004b14:	f8c8 3010 	str.w	r3, [r8, #16]
 8004b18:	f8c8 2010 	str.w	r2, [r8, #16]
 8004b1c:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b20:	f8cb 9010 	str.w	r9, [fp, #16]
 8004b24:	f8cb a010 	str.w	sl, [fp, #16]
 8004b28:	f8cd e00c 	str.w	lr, [sp, #12]
 8004b2c:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b2e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b36:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004b3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b3e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8004b42:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8004b46:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b4e:	613e      	str	r6, [r7, #16]
 8004b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b54:	6138      	str	r0, [r7, #16]
 8004b56:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8004b5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b5e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b62:	f8c8 6010 	str.w	r6, [r8, #16]
 8004b66:	f8c8 0010 	str.w	r0, [r8, #16]
 8004b6a:	f8c8 a010 	str.w	sl, [r8, #16]
 8004b6e:	f8c8 9010 	str.w	r9, [r8, #16]
 8004b72:	6139      	str	r1, [r7, #16]
 8004b74:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004b78:	613c      	str	r4, [r7, #16]
 8004b7a:	613a      	str	r2, [r7, #16]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	613d      	str	r5, [r7, #16]
 8004b80:	6139      	str	r1, [r7, #16]
 8004b82:	f8c8 2010 	str.w	r2, [r8, #16]
 8004b86:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b90:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b94:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	f10c 0c01 	add.w	ip, ip, #1
 8004b9e:	4563      	cmp	r3, ip
 8004ba0:	f8cb e010 	str.w	lr, [fp, #16]
 8004ba4:	d1c2      	bne.n	8004b2c <LCD_Font.constprop.4+0x8c8>
 8004ba6:	f7ff bbc3 	b.w	8004330 <LCD_Font.constprop.4+0xcc>
		if (set_pixels > 0)
 8004baa:	4672      	mov	r2, lr
 8004bac:	f8cd e000 	str.w	lr, [sp]
 8004bb0:	b98a      	cbnz	r2, 8004bd6 <LCD_Font.constprop.4+0x972>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004bb2:	9b06      	ldr	r3, [sp, #24]
 8004bb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	9306      	str	r3, [sp, #24]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f63f ab87 	bhi.w	80042d0 <LCD_Font.constprop.4+0x6c>
			cursor_x += glyph.xAdvance * size;
 8004bc2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8004bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004bc8:	9816      	ldr	r0, [sp, #88]	; 0x58
			cursor_x += glyph.xAdvance * size;
 8004bca:	4423      	add	r3, r4
 8004bcc:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004bce:	f001 fbe1 	bl	8006394 <strlen>
 8004bd2:	f7ff bbb7 	b.w	8004344 <LCD_Font.constprop.4+0xe0>
 8004bd6:	460e      	mov	r6, r1
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004bd8:	f99d 2075 	ldrsb.w	r2, [sp, #117]	; 0x75
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bdc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004be0:	4432      	add	r2, r6
 8004be2:	9e00      	ldr	r6, [sp, #0]
 8004be4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004be8:	1b92      	subs	r2, r2, r6
 8004bea:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004bec:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004bf0:	4432      	add	r2, r6
 8004bf2:	fa1f fa82 	uxth.w	sl, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004bf6:	4453      	add	r3, sl
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004bf8:	f99d 2076 	ldrsb.w	r2, [sp, #118]	; 0x76
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004bfc:	fa1f f983 	uxth.w	r9, r3
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004c06:	441a      	add	r2, r3
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	f8cb 1010 	str.w	r1, [fp, #16]
 8004c0e:	441a      	add	r2, r3
 8004c10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c14:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c1c:	6138      	str	r0, [r7, #16]
 8004c1e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004c22:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c24:	f04f 0e10 	mov.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c28:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c2c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8004c30:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c34:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c38:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c3c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c40:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c42:	f8c8 6010 	str.w	r6, [r8, #16]
 8004c46:	613c      	str	r4, [r7, #16]
 8004c48:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c4a:	f8c7 e010 	str.w	lr, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c4e:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c52:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c58:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c60:	f8c8 c010 	str.w	ip, [r8, #16]
 8004c64:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c68:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c74:	2301      	movs	r3, #1
 8004c76:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c7e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c86:	6138      	str	r0, [r7, #16]
 8004c88:	6139      	str	r1, [r7, #16]
 8004c8a:	f8c8 5010 	str.w	r5, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004c8e:	0415      	lsls	r5, r2, #16
 8004c90:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c94:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c98:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c9c:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8004ca0:	f8c8 3010 	str.w	r3, [r8, #16]
	data[0] = x1 >> 8;
 8004ca4:	f3c2 2107 	ubfx	r1, r2, #8, #8
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004ca8:	b293      	uxth	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 8004caa:	bf48      	it	mi
 8004cac:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cae:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004cb2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cb4:	bf54      	ite	pl
 8004cb6:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004cb8:	613a      	strmi	r2, [r7, #16]
 8004cba:	f3c3 3280 	ubfx	r2, r3, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004cbe:	0458      	lsls	r0, r3, #17
 8004cc0:	9219      	str	r2, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cc2:	bf54      	ite	pl
 8004cc4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004cc8:	2208      	movmi	r2, #8
 8004cca:	613a      	str	r2, [r7, #16]
 8004ccc:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004cd0:	9214      	str	r2, [sp, #80]	; 0x50
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004cd2:	049a      	lsls	r2, r3, #18
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cd4:	bf54      	ite	pl
 8004cd6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004cda:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004cdc:	04de      	lsls	r6, r3, #19
 8004cde:	613a      	str	r2, [r7, #16]
 8004ce0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004ce4:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ce6:	bf54      	ite	pl
 8004ce8:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004cec:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004cee:	051d      	lsls	r5, r3, #20
 8004cf0:	613a      	str	r2, [r7, #16]
 8004cf2:	f3c3 22c0 	ubfx	r2, r3, #11, #1
 8004cf6:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf8:	bf54      	ite	pl
 8004cfa:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004cfe:	2240      	movmi	r2, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004d00:	055c      	lsls	r4, r3, #21
 8004d02:	613a      	str	r2, [r7, #16]
 8004d04:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8004d08:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d0a:	bf54      	ite	pl
 8004d0c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004d10:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004d12:	0598      	lsls	r0, r3, #22
 8004d14:	613a      	str	r2, [r7, #16]
 8004d16:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8004d1a:	9212      	str	r2, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d1c:	bf54      	ite	pl
 8004d1e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004d22:	2210      	movmi	r2, #16
 8004d24:	f8c8 2010 	str.w	r2, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004d28:	f011 0201 	ands.w	r2, r1, #1
 8004d2c:	921a      	str	r2, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d2e:	bf0c      	ite	eq
 8004d30:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004d34:	2220      	movne	r2, #32
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004d36:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8004d3a:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d3e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004d42:	950c      	str	r5, [sp, #48]	; 0x30
    GPIOx->BSRR = GPIO_Pin;
 8004d44:	2502      	movs	r5, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d46:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d4a:	f8cb 5010 	str.w	r5, [fp, #16]
 8004d4e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004d56:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d5a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004d5e:	2501      	movs	r5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d60:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8004d64:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004d68:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d70:	f8cb e010 	str.w	lr, [fp, #16]
 8004d74:	6139      	str	r1, [r7, #16]
 8004d76:	6138      	str	r0, [r7, #16]
 8004d78:	f8c8 c010 	str.w	ip, [r8, #16]
 8004d7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d80:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d88:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d8c:	f8c8 6010 	str.w	r6, [r8, #16]
 8004d90:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d94:	0619      	lsls	r1, r3, #24
    GPIOx->BSRR = GPIO_Pin;
 8004d96:	bf48      	it	mi
 8004d98:	2104      	movmi	r1, #4
 8004d9a:	b2da      	uxtb	r2, r3
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d9c:	bf54      	ite	pl
 8004d9e:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004da0:	6139      	strmi	r1, [r7, #16]
 8004da2:	f3c2 1180 	ubfx	r1, r2, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004da6:	0656      	lsls	r6, r2, #25
 8004da8:	9111      	str	r1, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004daa:	bf54      	ite	pl
 8004dac:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004db0:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004db2:	0695      	lsls	r5, r2, #26
 8004db4:	6139      	str	r1, [r7, #16]
 8004db6:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004dba:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dbc:	bf54      	ite	pl
 8004dbe:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004dc2:	2110      	movmi	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004dc4:	06d4      	lsls	r4, r2, #27
 8004dc6:	6139      	str	r1, [r7, #16]
 8004dc8:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004dcc:	9110      	str	r1, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dce:	bf54      	ite	pl
 8004dd0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004dd4:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004dd6:	0710      	lsls	r0, r2, #28
 8004dd8:	6139      	str	r1, [r7, #16]
 8004dda:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004dde:	910a      	str	r1, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004de0:	bf54      	ite	pl
 8004de2:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004de6:	2140      	movmi	r1, #64	; 0x40
 8004de8:	6139      	str	r1, [r7, #16]
 8004dea:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004dee:	911b      	str	r1, [sp, #108]	; 0x6c
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004df0:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004df2:	bf54      	ite	pl
 8004df4:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004df8:	2180      	movmi	r1, #128	; 0x80
 8004dfa:	6139      	str	r1, [r7, #16]
 8004dfc:	f3c2 0140 	ubfx	r1, r2, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004e00:	0792      	lsls	r2, r2, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e02:	bf54      	ite	pl
 8004e04:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004e08:	2210      	movmi	r2, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004e0a:	f013 0301 	ands.w	r3, r3, #1
 8004e0e:	9109      	str	r1, [sp, #36]	; 0x24
 8004e10:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e14:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e16:	bf0c      	ite	eq
 8004e18:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e1c:	2320      	movne	r3, #32
 8004e1e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004e22:	f8c8 3010 	str.w	r3, [r8, #16]
 8004e26:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e32:	f8cb 3010 	str.w	r3, [fp, #16]
 8004e36:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004e3a:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e3e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e42:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e46:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004e4a:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e4e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004e56:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e5a:	f8cb 6010 	str.w	r6, [fp, #16]
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	613a      	str	r2, [r7, #16]
 8004e62:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e66:	f8c8 1010 	str.w	r1, [r8, #16]
 8004e6a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e70:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e74:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e78:	f8c8 0010 	str.w	r0, [r8, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 836d 	beq.w	800555c <LCD_Font.constprop.4+0x12f8>
    GPIOx->BSRR = GPIO_Pin;
 8004e82:	2304      	movs	r3, #4
 8004e84:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004e86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 8364 	bne.w	8005556 <LCD_Font.constprop.4+0x12f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e92:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 835a 	bne.w	8005550 <LCD_Font.constprop.4+0x12ec>
 8004e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ea0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 8350 	bne.w	800554a <LCD_Font.constprop.4+0x12e6>
 8004eaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004eae:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 8346 	bne.w	8005544 <LCD_Font.constprop.4+0x12e0>
 8004eb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ebc:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 833c 	bne.w	800553e <LCD_Font.constprop.4+0x12da>
 8004ec6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004eca:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 8331 	bne.w	8005536 <LCD_Font.constprop.4+0x12d2>
 8004ed4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ed8:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004edc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f040 8325 	bne.w	800552e <LCD_Font.constprop.4+0x12ca>
 8004ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ee8:	f8c8 3010 	str.w	r3, [r8, #16]
 8004eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004ef0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004ef4:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ef8:	f8cb 3010 	str.w	r3, [fp, #16]
 8004efc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004f00:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f04:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004f08:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f0c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004f10:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004f14:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004f20:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f24:	f8cb 6010 	str.w	r6, [fp, #16]
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	613a      	str	r2, [r7, #16]
 8004f2c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f30:	f8c8 1010 	str.w	r1, [r8, #16]
 8004f34:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f3a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004f3e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f42:	f8c8 0010 	str.w	r0, [r8, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 82ef 	beq.w	800552a <LCD_Font.constprop.4+0x12c6>
    GPIOx->BSRR = GPIO_Pin;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 82e6 	bne.w	8005524 <LCD_Font.constprop.4+0x12c0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f5c:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 82dc 	bne.w	800551e <LCD_Font.constprop.4+0x12ba>
 8004f66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f6a:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 82d2 	bne.w	8005518 <LCD_Font.constprop.4+0x12b4>
 8004f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f78:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 82c8 	bne.w	8005512 <LCD_Font.constprop.4+0x12ae>
 8004f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f86:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 82be 	bne.w	800550c <LCD_Font.constprop.4+0x12a8>
 8004f90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004f94:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 82b3 	bne.w	8005504 <LCD_Font.constprop.4+0x12a0>
 8004f9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fa2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 82a7 	bne.w	80054fc <LCD_Font.constprop.4+0x1298>
 8004fae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fb2:	f8c8 3010 	str.w	r3, [r8, #16]
 8004fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004fba:	2602      	movs	r6, #2
 8004fbc:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fc0:	f8cb 3010 	str.w	r3, [fp, #16]
 8004fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004fc8:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fcc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004fd0:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fd8:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004fdc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004fe0:	f8cb 2010 	str.w	r2, [fp, #16]
 8004fe4:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8004fe8:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004fec:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	613a      	str	r2, [r7, #16]
 8004ff4:	f8c8 0010 	str.w	r0, [r8, #16]
 8004ff8:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ffc:	f8c8 3010 	str.w	r3, [r8, #16]
 8005000:	f8c8 2010 	str.w	r2, [r8, #16]
 8005004:	f8c8 5010 	str.w	r5, [r8, #16]
 8005008:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 800500c:	f8c8 e010 	str.w	lr, [r8, #16]
 8005010:	6139      	str	r1, [r7, #16]
 8005012:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005014:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005018:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800501a:	2540      	movs	r5, #64	; 0x40
 800501c:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800501e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8005022:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005024:	f8c8 c010 	str.w	ip, [r8, #16]
 8005028:	f04f 0c20 	mov.w	ip, #32
 800502c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005030:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005034:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005038:	f8cb 6010 	str.w	r6, [fp, #16]
 800503c:	2601      	movs	r6, #1
 800503e:	f8cb 5010 	str.w	r5, [fp, #16]
 8005042:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005046:	f8cb 4010 	str.w	r4, [fp, #16]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	613a      	str	r2, [r7, #16]
 800504e:	f8c8 0010 	str.w	r0, [r8, #16]
 8005052:	f8c8 1010 	str.w	r1, [r8, #16]
 8005056:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800505a:	ea5f 33da 	movs.w	r3, sl, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800505e:	bf18      	it	ne
 8005060:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005062:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005066:	f8c8 2010 	str.w	r2, [r8, #16]
 800506a:	f8c8 5010 	str.w	r5, [r8, #16]
 800506e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005072:	bf14      	ite	ne
 8005074:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005076:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005078:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 800507c:	bf0c      	ite	eq
 800507e:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005082:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005084:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800508a:	bf0c      	ite	eq
 800508c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005090:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005092:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 8005096:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005098:	bf0c      	ite	eq
 800509a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800509e:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80050a0:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 80050a4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050a6:	bf0c      	ite	eq
 80050a8:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80050ac:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80050ae:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050b4:	bf0c      	ite	eq
 80050b6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80050ba:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80050bc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80050c0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c2:	bf0c      	ite	eq
 80050c4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80050c8:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80050ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d2:	bf0c      	ite	eq
 80050d4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80050d8:	2320      	movne	r3, #32
 80050da:	f04f 0e02 	mov.w	lr, #2
 80050de:	f8c8 3010 	str.w	r3, [r8, #16]
 80050e2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050ee:	f8cb 3010 	str.w	r3, [fp, #16]
 80050f2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80050f6:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050fa:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80050fe:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005102:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005106:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800510a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800510e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005112:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005116:	f8cb 6010 	str.w	r6, [fp, #16]
 800511a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	613a      	str	r2, [r7, #16]
 8005122:	f8c8 5010 	str.w	r5, [r8, #16]
 8005126:	f8c8 1010 	str.w	r1, [r8, #16]
 800512a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800512e:	bf18      	it	ne
 8005130:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005132:	f8c8 2010 	str.w	r2, [r8, #16]
 8005136:	f8c8 4010 	str.w	r4, [r8, #16]
 800513a:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800513e:	bf14      	ite	ne
 8005140:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005142:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005144:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005148:	bf0c      	ite	eq
 800514a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800514e:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005150:	f01a 0f20 	tst.w	sl, #32
 8005154:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005156:	bf0c      	ite	eq
 8005158:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800515c:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800515e:	f01a 0f10 	tst.w	sl, #16
 8005162:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005164:	bf0c      	ite	eq
 8005166:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800516a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800516c:	f01a 0f08 	tst.w	sl, #8
 8005170:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005172:	bf0c      	ite	eq
 8005174:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005178:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800517a:	f01a 0f04 	tst.w	sl, #4
 800517e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005180:	bf0c      	ite	eq
 8005182:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8005186:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005188:	f01a 0f02 	tst.w	sl, #2
 800518c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800518e:	bf0c      	ite	eq
 8005190:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005194:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005196:	f01a 0f01 	tst.w	sl, #1
 800519a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800519e:	bf0c      	ite	eq
 80051a0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80051a4:	2320      	movne	r3, #32
 80051a6:	f04f 0e02 	mov.w	lr, #2
 80051aa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80051ae:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051ba:	f8cb 3010 	str.w	r3, [fp, #16]
 80051be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80051c2:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051c6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80051ca:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ce:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80051d2:	f04f 0c01 	mov.w	ip, #1
 80051d6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051da:	f8cb 6010 	str.w	r6, [fp, #16]
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	613a      	str	r2, [r7, #16]
 80051e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80051e6:	f8c8 1010 	str.w	r1, [r8, #16]
 80051ea:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80051ee:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80051f2:	bf18      	it	ne
 80051f4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051f6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80051fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80051fe:	f8c8 2010 	str.w	r2, [r8, #16]
 8005202:	f8c8 4010 	str.w	r4, [r8, #16]
 8005206:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800520a:	bf14      	ite	ne
 800520c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800520e:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005210:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8005214:	bf0c      	ite	eq
 8005216:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800521a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800521c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005222:	bf0c      	ite	eq
 8005224:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005228:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800522a:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 800522e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005230:	bf0c      	ite	eq
 8005232:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005236:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005238:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800523c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800523e:	bf0c      	ite	eq
 8005240:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005244:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005246:	f419 6f80 	tst.w	r9, #1024	; 0x400
 800524a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800524c:	bf0c      	ite	eq
 800524e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8005252:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005254:	f419 7f00 	tst.w	r9, #512	; 0x200
 8005258:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800525a:	bf0c      	ite	eq
 800525c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005260:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005262:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005266:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800526a:	bf0c      	ite	eq
 800526c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005270:	2320      	movne	r3, #32
 8005272:	f04f 0e02 	mov.w	lr, #2
 8005276:	f8c8 3010 	str.w	r3, [r8, #16]
 800527a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800527e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005286:	f8cb 3010 	str.w	r3, [fp, #16]
 800528a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800528e:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005292:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8005296:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800529a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800529e:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80052a2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80052a6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052aa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052ae:	f8cb 6010 	str.w	r6, [fp, #16]
 80052b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	613a      	str	r2, [r7, #16]
 80052ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80052be:	f8c8 1010 	str.w	r1, [r8, #16]
 80052c2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80052c6:	bf18      	it	ne
 80052c8:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052ca:	f8c8 2010 	str.w	r2, [r8, #16]
 80052ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80052d2:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80052d6:	bf14      	ite	ne
 80052d8:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052da:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80052dc:	f019 0f40 	tst.w	r9, #64	; 0x40
 80052e0:	bf0c      	ite	eq
 80052e2:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80052e6:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80052e8:	f019 0f20 	tst.w	r9, #32
 80052ec:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052ee:	bf0c      	ite	eq
 80052f0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80052f4:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80052f6:	f019 0f10 	tst.w	r9, #16
 80052fa:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052fc:	bf0c      	ite	eq
 80052fe:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005302:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005304:	f019 0f08 	tst.w	r9, #8
 8005308:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800530a:	bf0c      	ite	eq
 800530c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005310:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005312:	f019 0f04 	tst.w	r9, #4
 8005316:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005318:	bf0c      	ite	eq
 800531a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800531e:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005320:	f019 0f02 	tst.w	r9, #2
 8005324:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005326:	bf0c      	ite	eq
 8005328:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800532c:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800532e:	f019 0f01 	tst.w	r9, #1
 8005332:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005336:	bf0c      	ite	eq
 8005338:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800533c:	2320      	movne	r3, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800533e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8005342:	f8c8 3010 	str.w	r3, [r8, #16]
 8005346:	f04f 0902 	mov.w	r9, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800534a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800534e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005352:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8005356:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800535a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800535e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005366:	f8cb 9010 	str.w	r9, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800536a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800536e:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005372:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8005376:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800537a:	2610      	movs	r6, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800537c:	f8cb 4010 	str.w	r4, [fp, #16]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	613a      	str	r2, [r7, #16]
 8005384:	f8c8 5010 	str.w	r5, [r8, #16]
 8005388:	f8c8 0010 	str.w	r0, [r8, #16]
 800538c:	f8c8 3010 	str.w	r3, [r8, #16]
 8005390:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005394:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005396:	f8c8 e010 	str.w	lr, [r8, #16]
 800539a:	f8c8 c010 	str.w	ip, [r8, #16]
 800539e:	6138      	str	r0, [r7, #16]
 80053a0:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053a2:	613e      	str	r6, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053a4:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053a6:	613a      	str	r2, [r7, #16]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80053b0:	f04f 0c00 	mov.w	ip, #0
 80053b4:	f8c8 2010 	str.w	r2, [r8, #16]
 80053b8:	f8c8 1010 	str.w	r1, [r8, #16]
 80053bc:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053c0:	f8cb 9010 	str.w	r9, [fp, #16]
 80053c4:	f8cb a010 	str.w	sl, [fp, #16]
 80053c8:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80053ce:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053d2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80053d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80053da:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80053de:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 80053e2:	f8cb 2010 	str.w	r2, [fp, #16]
 80053e6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053f0:	613c      	str	r4, [r7, #16]
 80053f2:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 80053f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80053fa:	f8c8 0010 	str.w	r0, [r8, #16]
 80053fe:	f8c8 3010 	str.w	r3, [r8, #16]
 8005402:	f8c8 4010 	str.w	r4, [r8, #16]
 8005406:	f8c8 9010 	str.w	r9, [r8, #16]
 800540a:	f8c8 e010 	str.w	lr, [r8, #16]
 800540e:	6138      	str	r0, [r7, #16]
 8005410:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005414:	613d      	str	r5, [r7, #16]
 8005416:	6139      	str	r1, [r7, #16]
 8005418:	613a      	str	r2, [r7, #16]
 800541a:	613e      	str	r6, [r7, #16]
 800541c:	6138      	str	r0, [r7, #16]
 800541e:	f8c8 1010 	str.w	r1, [r8, #16]
 8005422:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005426:	2202      	movs	r2, #2
 8005428:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800542c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005430:	f8cb 2010 	str.w	r2, [fp, #16]
 8005434:	9a00      	ldr	r2, [sp, #0]
 8005436:	f10c 0c01 	add.w	ip, ip, #1
 800543a:	4562      	cmp	r2, ip
 800543c:	f8cb a010 	str.w	sl, [fp, #16]
 8005440:	d1c2      	bne.n	80053c8 <LCD_Font.constprop.4+0x1164>
 8005442:	f7ff bbb6 	b.w	8004bb2 <LCD_Font.constprop.4+0x94e>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005448:	613a      	str	r2, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f a8e0 	beq.w	8004610 <LCD_Font.constprop.4+0x3ac>
    GPIOx->BSRR = GPIO_Pin;
 8005450:	2308      	movs	r3, #8
 8005452:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	f43f a8e1 	beq.w	800461e <LCD_Font.constprop.4+0x3ba>
 800545c:	2310      	movs	r3, #16
 800545e:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005462:	2b00      	cmp	r3, #0
 8005464:	f43f a8e2 	beq.w	800462c <LCD_Font.constprop.4+0x3c8>
 8005468:	2320      	movs	r3, #32
 800546a:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800546c:	f1bc 0f00 	cmp.w	ip, #0
 8005470:	f43f a8e3 	beq.w	800463a <LCD_Font.constprop.4+0x3d6>
 8005474:	2340      	movs	r3, #64	; 0x40
 8005476:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	f43f a8e4 	beq.w	8004648 <LCD_Font.constprop.4+0x3e4>
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005484:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005486:	2b00      	cmp	r3, #0
 8005488:	f43f a8e5 	beq.w	8004656 <LCD_Font.constprop.4+0x3f2>
 800548c:	2310      	movs	r3, #16
 800548e:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005494:	2b00      	cmp	r3, #0
 8005496:	f43f a8e6 	beq.w	8004666 <LCD_Font.constprop.4+0x402>
 800549a:	2320      	movs	r3, #32
 800549c:	f8c8 3010 	str.w	r3, [r8, #16]
 80054a0:	f7ff b8e5 	b.w	800466e <LCD_Font.constprop.4+0x40a>
 80054a4:	2308      	movs	r3, #8
 80054a6:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	f43f a917 	beq.w	80046dc <LCD_Font.constprop.4+0x478>
 80054ae:	2310      	movs	r3, #16
 80054b0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80054b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f43f a918 	beq.w	80046ea <LCD_Font.constprop.4+0x486>
 80054ba:	2320      	movs	r3, #32
 80054bc:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80054be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f43f a919 	beq.w	80046f8 <LCD_Font.constprop.4+0x494>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80054ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f43f a91a 	beq.w	8004706 <LCD_Font.constprop.4+0x4a2>
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80054d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f43f a91b 	beq.w	8004714 <LCD_Font.constprop.4+0x4b0>
 80054de:	2310      	movs	r3, #16
 80054e0:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80054e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f43f a91c 	beq.w	8004724 <LCD_Font.constprop.4+0x4c0>
 80054ec:	2320      	movs	r3, #32
 80054ee:	f8c8 3010 	str.w	r3, [r8, #16]
 80054f2:	f7ff b91b 	b.w	800472c <LCD_Font.constprop.4+0x4c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054f6:	613a      	str	r2, [r7, #16]
 80054f8:	f7ff b8e7 	b.w	80046ca <LCD_Font.constprop.4+0x466>
    GPIOx->BSRR = GPIO_Pin;
 80054fc:	2320      	movs	r3, #32
 80054fe:	f8c8 3010 	str.w	r3, [r8, #16]
 8005502:	e558      	b.n	8004fb6 <LCD_Font.constprop.4+0xd52>
 8005504:	2310      	movs	r3, #16
 8005506:	f8c8 3010 	str.w	r3, [r8, #16]
 800550a:	e54c      	b.n	8004fa6 <LCD_Font.constprop.4+0xd42>
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e541      	b.n	8004f96 <LCD_Font.constprop.4+0xd32>
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e537      	b.n	8004f88 <LCD_Font.constprop.4+0xd24>
 8005518:	2320      	movs	r3, #32
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e52d      	b.n	8004f7a <LCD_Font.constprop.4+0xd16>
 800551e:	2310      	movs	r3, #16
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e523      	b.n	8004f6c <LCD_Font.constprop.4+0xd08>
 8005524:	2308      	movs	r3, #8
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e519      	b.n	8004f5e <LCD_Font.constprop.4+0xcfa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800552a:	6139      	str	r1, [r7, #16]
 800552c:	e510      	b.n	8004f50 <LCD_Font.constprop.4+0xcec>
    GPIOx->BSRR = GPIO_Pin;
 800552e:	2320      	movs	r3, #32
 8005530:	f8c8 3010 	str.w	r3, [r8, #16]
 8005534:	e4da      	b.n	8004eec <LCD_Font.constprop.4+0xc88>
 8005536:	2310      	movs	r3, #16
 8005538:	f8c8 3010 	str.w	r3, [r8, #16]
 800553c:	e4ce      	b.n	8004edc <LCD_Font.constprop.4+0xc78>
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e4c3      	b.n	8004ecc <LCD_Font.constprop.4+0xc68>
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e4b9      	b.n	8004ebe <LCD_Font.constprop.4+0xc5a>
 800554a:	2320      	movs	r3, #32
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e4af      	b.n	8004eb0 <LCD_Font.constprop.4+0xc4c>
 8005550:	2310      	movs	r3, #16
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e4a5      	b.n	8004ea2 <LCD_Font.constprop.4+0xc3e>
 8005556:	2308      	movs	r3, #8
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e49b      	b.n	8004e94 <LCD_Font.constprop.4+0xc30>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800555c:	6139      	str	r1, [r7, #16]
 800555e:	e492      	b.n	8004e86 <LCD_Font.constprop.4+0xc22>
			cursor_x += glyph.xAdvance * size;
 8005560:	b2a3      	uxth	r3, r4
 8005562:	9315      	str	r3, [sp, #84]	; 0x54
 8005564:	f7ff bb2d 	b.w	8004bc2 <LCD_Font.constprop.4+0x95e>

08005568 <LCD_Font.constprop.5>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800556c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005570:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005572:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005574:	4616      	mov	r6, r2
 8005576:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 8005578:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800557a:	f000 ff0b 	bl	8006394 <strlen>
 800557e:	b3a0      	cbz	r0, 80055ea <LCD_Font.constprop.5+0x82>
 8005580:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005582:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005584:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005586:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80055f0 <LCD_Font.constprop.5+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800558a:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <LCD_Font.constprop.5+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800558c:	f10d 0b08 	add.w	fp, sp, #8
 8005590:	e01c      	b.n	80055cc <LCD_Font.constprop.5+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 8005592:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005596:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800559a:	d812      	bhi.n	80055c2 <LCD_Font.constprop.5+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800559c:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055a0:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055a4:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055a6:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055aa:	4638      	mov	r0, r7
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7fe fc41 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80055b2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055b6:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 80055b8:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ba:	f000 feeb 	bl	8006394 <strlen>
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <LCD_Font.constprop.5+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80055c0:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c2:	3401      	adds	r4, #1
 80055c4:	b2a4      	uxth	r4, r4
 80055c6:	4284      	cmp	r4, r0
 80055c8:	4622      	mov	r2, r4
 80055ca:	d20e      	bcs.n	80055ea <LCD_Font.constprop.5+0x82>
		char c = text[text_pos];
 80055cc:	5cb1      	ldrb	r1, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80055ce:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 80055d2:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80055d4:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 80055d8:	d1db      	bne.n	8005592 <LCD_Font.constprop.5+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055da:	3401      	adds	r4, #1
 80055dc:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80055de:	3539      	adds	r5, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e0:	4284      	cmp	r4, r0
			cursor_x = x;
 80055e2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e4:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80055e6:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e8:	d3f0      	bcc.n	80055cc <LCD_Font.constprop.5+0x64>
}
 80055ea:	b005      	add	sp, #20
 80055ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f0:	0800d7c8 	.word	0x0800d7c8
 80055f4:	0801cd20 	.word	0x0801cd20

080055f8 <bme280.part.0>:
		rx_buffer[rx_index++] = rx_data;
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
	}
}

void bme280(void) {
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
	humidity = BME280_getHumidity(-1);
	pressure = (uint16_t)BME280_getPressure();

	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80055fc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80057c8 <bme280.part.0+0x1d0>
void bme280(void) {
 8005600:	b087      	sub	sp, #28
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8005602:	e9d8 6732 	ldrd	r6, r7, [r8, #200]	; 0xc8
 8005606:	2200      	movs	r2, #0
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <bme280.part.0+0x1d4>)
 800560e:	f001 faf7 	bl	8006c00 <__aeabi_dcmplt>
 8005612:	2800      	cmp	r0, #0
 8005614:	f000 80d4 	beq.w	80057c0 <bme280.part.0+0x1c8>
 8005618:	2200      	movs	r2, #0
 800561a:	4630      	mov	r0, r6
 800561c:	4639      	mov	r1, r7
 800561e:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <bme280.part.0+0x1d8>)
 8005620:	f001 fb0c 	bl	8006c3c <__aeabi_dcmpgt>
 8005624:	2800      	cmp	r0, #0
 8005626:	f000 80cb 	beq.w	80057c0 <bme280.part.0+0x1c8>
 800562a:	e9d8 4534 	ldrd	r4, r5, [r8, #208]	; 0xd0
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f001 fb01 	bl	8006c3c <__aeabi_dcmpgt>
 800563a:	2800      	cmp	r0, #0
 800563c:	f000 80c0 	beq.w	80057c0 <bme280.part.0+0x1c8>
 8005640:	2200      	movs	r2, #0
 8005642:	4620      	mov	r0, r4
 8005644:	4629      	mov	r1, r5
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <bme280.part.0+0x1dc>)
 8005648:	f001 fada 	bl	8006c00 <__aeabi_dcmplt>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 80b7 	beq.w	80057c0 <bme280.part.0+0x1c8>

		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8005652:	f108 09d8 	add.w	r9, r8, #216	; 0xd8
 8005656:	e9d9 8900 	ldrd	r8, r9, [r9]
 800565a:	4630      	mov	r0, r6
 800565c:	4639      	mov	r1, r7
 800565e:	4642      	mov	r2, r8
 8005660:	464b      	mov	r3, r9
 8005662:	f001 fac3 	bl	8006bec <__aeabi_dcmpeq>
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 80be 	bne.w	80057e8 <bme280.part.0+0x1f0>
 800566c:	2200      	movs	r2, #0
 800566e:	4630      	mov	r0, r6
 8005670:	4639      	mov	r1, r7
 8005672:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <bme280.part.0+0x1e0>)
 8005674:	f001 face 	bl	8006c14 <__aeabi_dcmple>
 8005678:	2800      	cmp	r0, #0
 800567a:	f000 80b5 	beq.w	80057e8 <bme280.part.0+0x1f0>

			char weatherPrintT[8];

			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800567e:	2200      	movs	r2, #0
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	4b55      	ldr	r3, [pc, #340]	; (80057dc <bme280.part.0+0x1e4>)
 8005686:	f001 facf 	bl	8006c28 <__aeabi_dcmpge>
 800568a:	2800      	cmp	r0, #0
 800568c:	f040 82fc 	bne.w	8005c88 <bme280.part.0+0x690>
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	f001 fab2 	bl	8006c00 <__aeabi_dcmplt>
 800569c:	2200      	movs	r2, #0
 800569e:	2800      	cmp	r0, #0
 80056a0:	f040 8323 	bne.w	8005cea <bme280.part.0+0x6f2>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}
			else if (temperatureLast < 10 && temperatureLast > 0) {
 80056a4:	2300      	movs	r3, #0
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f001 fac7 	bl	8006c3c <__aeabi_dcmpgt>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f040 8345 	bne.w	8005d3e <bme280.part.0+0x746>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}
			else if (temperatureLast <= -10) {
 80056b4:	2200      	movs	r2, #0
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <bme280.part.0+0x1e8>)
 80056bc:	f001 faaa 	bl	8006c14 <__aeabi_dcmple>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f040 8320 	bne.w	8005d06 <bme280.part.0+0x70e>
 80056c6:	ac03      	add	r4, sp, #12
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}

			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80056c8:	2200      	movs	r2, #0
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	4b43      	ldr	r3, [pc, #268]	; (80057dc <bme280.part.0+0x1e4>)
 80056d0:	f001 faaa 	bl	8006c28 <__aeabi_dcmpge>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 82c7 	bne.w	8005c68 <bme280.part.0+0x670>
 80056da:	2200      	movs	r2, #0
 80056dc:	2300      	movs	r3, #0
 80056de:	4630      	mov	r0, r6
 80056e0:	4639      	mov	r1, r7
 80056e2:	f001 fa8d 	bl	8006c00 <__aeabi_dcmplt>
 80056e6:	2200      	movs	r2, #0
 80056e8:	2800      	cmp	r0, #0
 80056ea:	f040 82e5 	bne.w	8005cb8 <bme280.part.0+0x6c0>
				sprintf(weatherPrintT, "%.1f'C", temperature);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}
			else if (temperature < 10 && temperature > 0) {
 80056ee:	2300      	movs	r3, #0
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f001 faa2 	bl	8006c3c <__aeabi_dcmpgt>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f040 8310 	bne.w	8005d1e <bme280.part.0+0x726>
				sprintf(weatherPrintT, "%.1f'C", temperature);
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}
			else if (temperature <= -10) {
 80056fe:	2200      	movs	r2, #0
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <bme280.part.0+0x1e8>)
 8005706:	f001 fa85 	bl	8006c14 <__aeabi_dcmple>
 800570a:	2800      	cmp	r0, #0
 800570c:	f040 82e2 	bne.w	8005cd4 <bme280.part.0+0x6dc>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}

			temperatureLast = temperature;
 8005710:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <bme280.part.0+0x1d0>)
		}

		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8005712:	e9d3 8934 	ldrd	r8, r9, [r3, #208]	; 0xd0
			temperatureLast = temperature;
 8005716:	e9c3 6736 	strd	r6, r7, [r3, #216]	; 0xd8
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 800571a:	e9d3 6738 	ldrd	r6, r7, [r3, #224]	; 0xe0
 800571e:	4640      	mov	r0, r8
 8005720:	4649      	mov	r1, r9
 8005722:	4632      	mov	r2, r6
 8005724:	463b      	mov	r3, r7
 8005726:	f001 fa61 	bl	8006bec <__aeabi_dcmpeq>
 800572a:	2800      	cmp	r0, #0
 800572c:	d168      	bne.n	8005800 <bme280.part.0+0x208>
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f001 fa77 	bl	8006c28 <__aeabi_dcmpge>
 800573a:	2800      	cmp	r0, #0
 800573c:	d060      	beq.n	8005800 <bme280.part.0+0x208>
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	2200      	movs	r2, #0
 8005744:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <bme280.part.0+0x1dc>)
 8005746:	f001 fa5b 	bl	8006c00 <__aeabi_dcmplt>
 800574a:	2800      	cmp	r0, #0
 800574c:	d058      	beq.n	8005800 <bme280.part.0+0x208>

			char weatherPrintH[7];

			sprintf(weatherPrintH, "%.1f'H", humidityLast);
 800574e:	4632      	mov	r2, r6
 8005750:	463b      	mov	r3, r7
 8005752:	4924      	ldr	r1, [pc, #144]	; (80057e4 <bme280.part.0+0x1ec>)
 8005754:	4620      	mov	r0, r4
 8005756:	f004 f9e5 	bl	8009b24 <siprintf>
			if (humidityLast >= 10)
 800575a:	491b      	ldr	r1, [pc, #108]	; (80057c8 <bme280.part.0+0x1d0>)
 800575c:	2200      	movs	r2, #0
 800575e:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
 8005762:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <bme280.part.0+0x1e4>)
 8005764:	f001 fa60 	bl	8006c28 <__aeabi_dcmpge>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8005768:	4622      	mov	r2, r4
 800576a:	21bb      	movs	r1, #187	; 0xbb
			if (humidityLast >= 10)
 800576c:	2800      	cmp	r0, #0
 800576e:	f000 829f 	beq.w	8005cb0 <bme280.part.0+0x6b8>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8005772:	20a0      	movs	r0, #160	; 0xa0
 8005774:	f7fe fd76 	bl	8004264 <LCD_Font.constprop.4>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);

			sprintf(weatherPrintH, "%.1f'H", humidity);
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <bme280.part.0+0x1d0>)
 800577a:	491a      	ldr	r1, [pc, #104]	; (80057e4 <bme280.part.0+0x1ec>)
 800577c:	461d      	mov	r5, r3
 800577e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005782:	4620      	mov	r0, r4
 8005784:	f004 f9ce 	bl	8009b24 <siprintf>
			if (humidity >= 10)
 8005788:	e9d5 6734 	ldrd	r6, r7, [r5, #208]	; 0xd0
 800578c:	2200      	movs	r2, #0
 800578e:	4639      	mov	r1, r7
 8005790:	4b12      	ldr	r3, [pc, #72]	; (80057dc <bme280.part.0+0x1e4>)
 8005792:	4630      	mov	r0, r6
 8005794:	f001 fa48 	bl	8006c28 <__aeabi_dcmpge>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8005798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800579c:	4622      	mov	r2, r4
 800579e:	21bb      	movs	r1, #187	; 0xbb
			if (humidity >= 10)
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f000 8281 	beq.w	8005ca8 <bme280.part.0+0x6b0>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80057a6:	20a0      	movs	r0, #160	; 0xa0
 80057a8:	f7ff fede 	bl	8005568 <LCD_Font.constprop.5>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);

			humidityLast = humidity;
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <bme280.part.0+0x1d0>)
 80057ae:	e9c3 6738 	strd	r6, r7, [r3, #224]	; 0xe0
 80057b2:	e025      	b.n	8005800 <bme280.part.0+0x208>
			}

			viewGraphs = 0;
		}

		if (!viewGraphs) {
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <bme280.part.0+0x1d0>)
 80057b6:	f893 34a2 	ldrb.w	r3, [r3, #1186]	; 0x4a2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8151 	beq.w	8005a62 <bme280.part.0+0x46a>
			}

			viewGraphs = 1;
		}
	}
}
 80057c0:	b007      	add	sp, #28
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	20000200 	.word	0x20000200
 80057cc:	40554000 	.word	0x40554000
 80057d0:	c0440000 	.word	0xc0440000
 80057d4:	40590000 	.word	0x40590000
 80057d8:	40440000 	.word	0x40440000
 80057dc:	40240000 	.word	0x40240000
 80057e0:	c0240000 	.word	0xc0240000
 80057e4:	0801efbc 	.word	0x0801efbc
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80057e8:	4bd2      	ldr	r3, [pc, #840]	; (8005b34 <bme280.part.0+0x53c>)
 80057ea:	4620      	mov	r0, r4
 80057ec:	e9d3 6738 	ldrd	r6, r7, [r3, #224]	; 0xe0
 80057f0:	4629      	mov	r1, r5
 80057f2:	4632      	mov	r2, r6
 80057f4:	463b      	mov	r3, r7
 80057f6:	f001 f9f9 	bl	8006bec <__aeabi_dcmpeq>
 80057fa:	ac03      	add	r4, sp, #12
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d0a6      	beq.n	800574e <bme280.part.0+0x156>
		if (pressureLast != pressure) {
 8005800:	4bcc      	ldr	r3, [pc, #816]	; (8005b34 <bme280.part.0+0x53c>)
 8005802:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 8005806:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 800580a:	429a      	cmp	r2, r3
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	d025      	beq.n	800585c <bme280.part.0+0x264>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8005810:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005814:	bf2c      	ite	cs
 8005816:	49c8      	ldrcs	r1, [pc, #800]	; (8005b38 <bme280.part.0+0x540>)
			else sprintf(weatherPrintP, " %02d", pressureLast);
 8005818:	49c8      	ldrcc	r1, [pc, #800]	; (8005b3c <bme280.part.0+0x544>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 800581a:	4620      	mov	r0, r4
			else sprintf(weatherPrintP, " %02d", pressureLast);
 800581c:	f004 f982 	bl	8009b24 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8005820:	21bb      	movs	r1, #187	; 0xbb
 8005822:	4622      	mov	r2, r4
 8005824:	f240 1041 	movw	r0, #321	; 0x141
 8005828:	f7fe fd1c 	bl	8004264 <LCD_Font.constprop.4>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 800582c:	4bc1      	ldr	r3, [pc, #772]	; (8005b34 <bme280.part.0+0x53c>)
 800582e:	4620      	mov	r0, r4
 8005830:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8005834:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005838:	bf2c      	ite	cs
 800583a:	49bf      	ldrcs	r1, [pc, #764]	; (8005b38 <bme280.part.0+0x540>)
			else sprintf(weatherPrintP, " %02d", pressure);
 800583c:	49bf      	ldrcc	r1, [pc, #764]	; (8005b3c <bme280.part.0+0x544>)
 800583e:	f004 f971 	bl	8009b24 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GRAY);
 8005842:	4622      	mov	r2, r4
 8005844:	4bbe      	ldr	r3, [pc, #760]	; (8005b40 <bme280.part.0+0x548>)
 8005846:	21bb      	movs	r1, #187	; 0xbb
 8005848:	f240 1041 	movw	r0, #321	; 0x141
 800584c:	f7ff fe8c 	bl	8005568 <LCD_Font.constprop.5>
			pressureLast = pressure;
 8005850:	4bb8      	ldr	r3, [pc, #736]	; (8005b34 <bme280.part.0+0x53c>)
 8005852:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8005856:	9200      	str	r2, [sp, #0]
 8005858:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
    uint16_t dt[1] = {0};
 800585c:	2600      	movs	r6, #0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800585e:	4621      	mov	r1, r4
 8005860:	4630      	mov	r0, r6
    uint16_t dt[1] = {0};
 8005862:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005866:	f7fd fc45 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
		if (AT24XX_Read(0) != rtcHrs) {
 800586a:	4ab2      	ldr	r2, [pc, #712]	; (8005b34 <bme280.part.0+0x53c>)
    return dt[0];
 800586c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005870:	f892 10ec 	ldrb.w	r1, [r2, #236]	; 0xec
 8005874:	4299      	cmp	r1, r3
 8005876:	d09d      	beq.n	80057b4 <bme280.part.0+0x1bc>
			AT24XX_Update(0, rtcHrs);
 8005878:	f102 05ee 	add.w	r5, r2, #238	; 0xee
 800587c:	46a9      	mov	r9, r5
 800587e:	4630      	mov	r0, r6
 8005880:	f7fd fe98 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8005884:	b2ab      	uxth	r3, r5
 8005886:	f5c3 777a 	rsb	r7, r3, #1000	; 0x3e8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800588a:	f5c3 7b7a 	rsb	fp, r3, #1000	; 0x3e8
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	b2bf      	uxth	r7, r7
 8005892:	f10b 0b01 	add.w	fp, fp, #1
 8005896:	f505 789d 	add.w	r8, r5, #314	; 0x13a
 800589a:	fa1f fa89 	uxth.w	sl, r9
 800589e:	eb0a 0007 	add.w	r0, sl, r7
 80058a2:	4621      	mov	r1, r4
 80058a4:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80058a6:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058aa:	f7fd fc23 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80058ae:	eb0a 000b 	add.w	r0, sl, fp
 80058b2:	4621      	mov	r1, r4
    return dt[0];
 80058b4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058b8:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80058ba:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058be:	f7fd fc19 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80058c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 80058c6:	fa5f fa8a 	uxtb.w	sl, sl
 80058ca:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80058ce:	f829 af02 	strh.w	sl, [r9, #2]!
 80058d2:	45c8      	cmp	r8, r9
 80058d4:	d1e1      	bne.n	800589a <bme280.part.0+0x2a2>
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 80058d6:	499b      	ldr	r1, [pc, #620]	; (8005b44 <bme280.part.0+0x54c>)
 80058d8:	9b01      	ldr	r3, [sp, #4]
			hT[155] = (uint16_t) (temperature * 10);
 80058da:	4e96      	ldr	r6, [pc, #600]	; (8005b34 <bme280.part.0+0x53c>)
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 80058dc:	f44f 729b 	mov.w	r2, #310	; 0x136
 80058e0:	1e88      	subs	r0, r1, #2
 80058e2:	f5c3 7979 	rsb	r9, r3, #996	; 0x3e4
 80058e6:	f007 f95d 	bl	800cba4 <memmove>
			hT[155] = (uint16_t) (temperature * 10);
 80058ea:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
 80058ee:	2200      	movs	r2, #0
 80058f0:	4b95      	ldr	r3, [pc, #596]	; (8005b48 <bme280.part.0+0x550>)
 80058f2:	f000 ff13 	bl	800671c <__aeabi_dmul>
 80058f6:	f001 f9e9 	bl	8006ccc <__aeabi_d2uiz>
 80058fa:	f109 0903 	add.w	r9, r9, #3
 80058fe:	f8a6 0226 	strh.w	r0, [r6, #550]	; 0x226
				AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8005902:	1978      	adds	r0, r7, r5
 8005904:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 8005908:	b280      	uxth	r0, r0
 800590a:	b2f1      	uxtb	r1, r6
 800590c:	f7fd fe52 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8005910:	eb09 0005 	add.w	r0, r9, r5
 8005914:	0a31      	lsrs	r1, r6, #8
 8005916:	b280      	uxth	r0, r0
 8005918:	f7fd fe4c 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 800591c:	45a8      	cmp	r8, r5
 800591e:	d1f0      	bne.n	8005902 <bme280.part.0+0x30a>
 8005920:	4d8a      	ldr	r5, [pc, #552]	; (8005b4c <bme280.part.0+0x554>)
    uint16_t dt[1] = {0};
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	46a9      	mov	r9, r5
 8005928:	b2ab      	uxth	r3, r5
 800592a:	f5c3 66fa 	rsb	r6, r3, #2000	; 0x7d0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800592e:	f5c3 6bfa 	rsb	fp, r3, #2000	; 0x7d0
 8005932:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	b2b6      	uxth	r6, r6
 800593a:	f10b 0b01 	add.w	fp, fp, #1
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800593e:	fa1f fa89 	uxth.w	sl, r9
 8005942:	eb06 000a 	add.w	r0, r6, sl
 8005946:	4621      	mov	r1, r4
 8005948:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 800594a:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800594e:	f7fd fbd1 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8005952:	eb0a 000b 	add.w	r0, sl, fp
 8005956:	4621      	mov	r1, r4
    return dt[0];
 8005958:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800595c:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 800595e:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005962:	f7fd fbc7 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8005966:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 800596a:	fa5f fa8a 	uxtb.w	sl, sl
 800596e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8005972:	f829 af02 	strh.w	sl, [r9, #2]!
 8005976:	454f      	cmp	r7, r9
 8005978:	d1e1      	bne.n	800593e <bme280.part.0+0x346>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 800597a:	4975      	ldr	r1, [pc, #468]	; (8005b50 <bme280.part.0+0x558>)
 800597c:	9b01      	ldr	r3, [sp, #4]
			hH[155] = (uint16_t) (humidity * 10);
 800597e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8005b34 <bme280.part.0+0x53c>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8005982:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005986:	1e88      	subs	r0, r1, #2
 8005988:	f5c3 69f9 	rsb	r9, r3, #1992	; 0x7c8
 800598c:	f007 f90a 	bl	800cba4 <memmove>
			hH[155] = (uint16_t) (humidity * 10);
 8005990:	e9d8 0134 	ldrd	r0, r1, [r8, #208]	; 0xd0
 8005994:	2200      	movs	r2, #0
 8005996:	4b6c      	ldr	r3, [pc, #432]	; (8005b48 <bme280.part.0+0x550>)
 8005998:	f000 fec0 	bl	800671c <__aeabi_dmul>
 800599c:	f001 f996 	bl	8006ccc <__aeabi_d2uiz>
 80059a0:	f109 0907 	add.w	r9, r9, #7
 80059a4:	f8a8 0362 	strh.w	r0, [r8, #866]	; 0x362
				AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80059a8:	1970      	adds	r0, r6, r5
 80059aa:	f835 8f02 	ldrh.w	r8, [r5, #2]!
 80059ae:	b280      	uxth	r0, r0
 80059b0:	fa5f f188 	uxtb.w	r1, r8
 80059b4:	f7fd fdfe 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80059b8:	eb09 0005 	add.w	r0, r9, r5
 80059bc:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80059c0:	b280      	uxth	r0, r0
 80059c2:	f7fd fdf7 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80059c6:	42af      	cmp	r7, r5
 80059c8:	d1ee      	bne.n	80059a8 <bme280.part.0+0x3b0>
 80059ca:	4d62      	ldr	r5, [pc, #392]	; (8005b54 <bme280.part.0+0x55c>)
    uint16_t dt[1] = {0};
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	46a9      	mov	r9, r5
 80059d2:	b2ab      	uxth	r3, r5
 80059d4:	f5c3 663b 	rsb	r6, r3, #2992	; 0xbb0
 80059d8:	3608      	adds	r6, #8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80059da:	f5c3 6b3b 	rsb	fp, r3, #2992	; 0xbb0
 80059de:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	b2b6      	uxth	r6, r6
 80059e6:	f10b 0b09 	add.w	fp, fp, #9
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80059ea:	fa1f fa89 	uxth.w	sl, r9
 80059ee:	eb06 000a 	add.w	r0, r6, sl
 80059f2:	4621      	mov	r1, r4
 80059f4:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80059f6:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80059fa:	f7fd fb7b 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80059fe:	eb0a 000b 	add.w	r0, sl, fp
 8005a02:	4621      	mov	r1, r4
    return dt[0];
 8005a04:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005a08:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8005a0a:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005a0e:	f7fd fb71 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8005a12:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 8005a16:	fa5f fa8a 	uxtb.w	sl, sl
 8005a1a:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8005a1e:	f829 af02 	strh.w	sl, [r9, #2]!
 8005a22:	454f      	cmp	r7, r9
 8005a24:	d1e1      	bne.n	80059ea <bme280.part.0+0x3f2>
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 8005a26:	494c      	ldr	r1, [pc, #304]	; (8005b58 <bme280.part.0+0x560>)
 8005a28:	9b01      	ldr	r3, [sp, #4]
 8005a2a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005a2e:	1e88      	subs	r0, r1, #2
 8005a30:	f5c3 693b 	rsb	r9, r3, #2992	; 0xbb0
 8005a34:	f007 f8b6 	bl	800cba4 <memmove>
			hP[155] = (uint16_t)pressure;
 8005a38:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <bme280.part.0+0x53c>)
 8005a3a:	9a00      	ldr	r2, [sp, #0]
 8005a3c:	f109 0907 	add.w	r9, r9, #7
 8005a40:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
				AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8005a44:	1970      	adds	r0, r6, r5
 8005a46:	f835 4f02 	ldrh.w	r4, [r5, #2]!
 8005a4a:	b280      	uxth	r0, r0
 8005a4c:	b2e1      	uxtb	r1, r4
 8005a4e:	f7fd fdb1 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8005a52:	eb09 0005 	add.w	r0, r9, r5
 8005a56:	0a21      	lsrs	r1, r4, #8
 8005a58:	b280      	uxth	r0, r0
 8005a5a:	f7fd fdab 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8005a5e:	42af      	cmp	r7, r5
 8005a60:	d1f0      	bne.n	8005a44 <bme280.part.0+0x44c>
	LCD_Line(x, y, x + w, y, size, color24);
 8005a62:	23be      	movs	r3, #190	; 0xbe
 8005a64:	229f      	movs	r2, #159	; 0x9f
 8005a66:	4619      	mov	r1, r3
 8005a68:	2002      	movs	r0, #2
 8005a6a:	f7fc fd05 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8005a6e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005a72:	229f      	movs	r2, #159	; 0x9f
 8005a74:	4619      	mov	r1, r3
 8005a76:	2002      	movs	r0, #2
 8005a78:	f7fc fcfe 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005a82:	4610      	mov	r0, r2
 8005a84:	21be      	movs	r1, #190	; 0xbe
 8005a86:	f7fc fcf7 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8005a8a:	229f      	movs	r2, #159	; 0x9f
 8005a8c:	4e33      	ldr	r6, [pc, #204]	; (8005b5c <bme280.part.0+0x564>)
 8005a8e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005a92:	21be      	movs	r1, #190	; 0xbe
 8005a94:	4610      	mov	r0, r2
 8005a96:	2503      	movs	r5, #3
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8005a98:	4f31      	ldr	r7, [pc, #196]	; (8005b60 <bme280.part.0+0x568>)
 8005a9a:	f506 789c 	add.w	r8, r6, #312	; 0x138
 8005a9e:	f7fc fceb 	bl	8002478 <LCD_Line.constprop.1>
 8005aa2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8005aa6:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8005aa8:	fb87 3001 	smull	r3, r0, r7, r1
 8005aac:	17cb      	asrs	r3, r1, #31
 8005aae:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b14      	subs	r3, #20
 8005ab6:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8005aba:	fb87 1003 	smull	r1, r0, r7, r3
 8005abe:	17dc      	asrs	r4, r3, #31
 8005ac0:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8005ac4:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	2300      	movs	r3, #0
 8005aca:	21bf      	movs	r1, #191	; 0xbf
 8005acc:	f384 0407 	usat	r4, #7, r4
 8005ad0:	f7fb fe6c 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8005ad4:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005adc:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8005ae0:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005aec:	b289      	uxth	r1, r1
 8005aee:	f7fb fe5d 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8005af2:	3501      	adds	r5, #1
 8005af4:	4546      	cmp	r6, r8
 8005af6:	b2ad      	uxth	r5, r5
 8005af8:	d1d3      	bne.n	8005aa2 <bme280.part.0+0x4aa>
	LCD_Line(x, y, x + w, y, size, color24);
 8005afa:	23be      	movs	r3, #190	; 0xbe
 8005afc:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8005b00:	4619      	mov	r1, r3
 8005b02:	20a1      	movs	r0, #161	; 0xa1
 8005b04:	f7fc fcb8 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8005b08:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005b0c:	20a1      	movs	r0, #161	; 0xa1
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4619      	mov	r1, r3
 8005b12:	f7fc fcb1 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8005b16:	22a1      	movs	r2, #161	; 0xa1
 8005b18:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	21be      	movs	r1, #190	; 0xbe
 8005b20:	f7fc fcaa 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8005b24:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005b28:	4e08      	ldr	r6, [pc, #32]	; (8005b4c <bme280.part.0+0x554>)
 8005b2a:	21be      	movs	r1, #190	; 0xbe
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4618      	mov	r0, r3
 8005b30:	25a2      	movs	r5, #162	; 0xa2
 8005b32:	e017      	b.n	8005b64 <bme280.part.0+0x56c>
 8005b34:	20000200 	.word	0x20000200
 8005b38:	0801efc4 	.word	0x0801efc4
 8005b3c:	0801efcc 	.word	0x0801efcc
 8005b40:	007f7f7f 	.word	0x007f7f7f
 8005b44:	200002f4 	.word	0x200002f4
 8005b48:	40240000 	.word	0x40240000
 8005b4c:	2000042a 	.word	0x2000042a
 8005b50:	20000430 	.word	0x20000430
 8005b54:	20000566 	.word	0x20000566
 8005b58:	2000056c 	.word	0x2000056c
 8005b5c:	200002ee 	.word	0x200002ee
 8005b60:	66666667 	.word	0x66666667
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8005b64:	4f7e      	ldr	r7, [pc, #504]	; (8005d60 <bme280.part.0+0x768>)
 8005b66:	f506 789c 	add.w	r8, r6, #312	; 0x138
 8005b6a:	f7fc fc85 	bl	8002478 <LCD_Line.constprop.1>
 8005b6e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8005b72:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8005b74:	fb87 3001 	smull	r3, r0, r7, r1
 8005b78:	17cb      	asrs	r3, r1, #31
 8005b7a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b0a      	subs	r3, #10
 8005b82:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8005b86:	fb87 1003 	smull	r1, r0, r7, r3
 8005b8a:	17dc      	asrs	r4, r3, #31
 8005b8c:	ebc4 1460 	rsb	r4, r4, r0, asr #5
 8005b90:	b224      	sxth	r4, r4
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8005b92:	4628      	mov	r0, r5
 8005b94:	2300      	movs	r3, #0
 8005b96:	21bf      	movs	r1, #191	; 0xbf
 8005b98:	f384 0407 	usat	r4, #7, r4
 8005b9c:	f7fb fe06 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8005ba0:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005ba8:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8005bac:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005bb8:	b289      	uxth	r1, r1
 8005bba:	f7fb fdf7 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8005bbe:	3501      	adds	r5, #1
 8005bc0:	4546      	cmp	r6, r8
 8005bc2:	b2ad      	uxth	r5, r5
 8005bc4:	d1d3      	bne.n	8005b6e <bme280.part.0+0x576>
	LCD_Line(x, y, x + w, y, size, color24);
 8005bc6:	23be      	movs	r3, #190	; 0xbe
 8005bc8:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005bd2:	f7fc fc51 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8005bd6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005bda:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005bde:	4619      	mov	r1, r3
 8005be0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005be4:	f7fc fc48 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8005be8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005bec:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	21be      	movs	r1, #190	; 0xbe
 8005bf4:	f7fc fc40 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8005bf8:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005bfc:	4e59      	ldr	r6, [pc, #356]	; (8005d64 <bme280.part.0+0x76c>)
 8005bfe:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005c02:	21be      	movs	r1, #190	; 0xbe
 8005c04:	4610      	mov	r0, r2
 8005c06:	f44f 75a1 	mov.w	r5, #322	; 0x142
 8005c0a:	f506 779c 	add.w	r7, r6, #312	; 0x138
 8005c0e:	f7fc fc33 	bl	8002478 <LCD_Line.constprop.1>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005c12:	f46f 7c6a 	mvn.w	ip, #936	; 0x3a8
 8005c16:	f836 4f02 	ldrh.w	r4, [r6, #2]!
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8005c1a:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005c1c:	4464      	add	r4, ip
 8005c1e:	ebd4 14c4 	rsbs	r4, r4, r4, lsl #7
 8005c22:	bf48      	it	mi
 8005c24:	347f      	addmi	r4, #127	; 0x7f
 8005c26:	f344 14cf 	sbfx	r4, r4, #7, #16
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	21bf      	movs	r1, #191	; 0xbf
 8005c30:	f384 0407 	usat	r4, #7, r4
 8005c34:	f7fb fdba 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8005c38:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005c40:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8005c44:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8005c48:	462a      	mov	r2, r5
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005c50:	b289      	uxth	r1, r1
 8005c52:	f7fb fdab 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8005c56:	3501      	adds	r5, #1
 8005c58:	42be      	cmp	r6, r7
 8005c5a:	b2ad      	uxth	r5, r5
 8005c5c:	d1d9      	bne.n	8005c12 <bme280.part.0+0x61a>
			viewGraphs = 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4a41      	ldr	r2, [pc, #260]	; (8005d68 <bme280.part.0+0x770>)
 8005c62:	f882 34a2 	strb.w	r3, [r2, #1186]	; 0x4a2
}
 8005c66:	e5ab      	b.n	80057c0 <bme280.part.0+0x1c8>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	493f      	ldr	r1, [pc, #252]	; (8005d6c <bme280.part.0+0x774>)
 8005c70:	f003 ff58 	bl	8009b24 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <bme280.part.0+0x778>)
 8005c76:	4622      	mov	r2, r4
 8005c78:	21bb      	movs	r1, #187	; 0xbb
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f7ff fc74 	bl	8005568 <LCD_Font.constprop.5>
			temperatureLast = temperature;
 8005c80:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <bme280.part.0+0x770>)
 8005c82:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
 8005c86:	e543      	b.n	8005710 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8005c88:	ac03      	add	r4, sp, #12
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4936      	ldr	r1, [pc, #216]	; (8005d6c <bme280.part.0+0x774>)
 8005c92:	f003 ff47 	bl	8009b24 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8005c96:	4622      	mov	r2, r4
 8005c98:	21bb      	movs	r1, #187	; 0xbb
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f7fe fae2 	bl	8004264 <LCD_Font.constprop.4>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005ca0:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <bme280.part.0+0x770>)
 8005ca2:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
 8005ca6:	e50f      	b.n	80056c8 <bme280.part.0+0xd0>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8005ca8:	20ba      	movs	r0, #186	; 0xba
 8005caa:	f7ff fc5d 	bl	8005568 <LCD_Font.constprop.5>
 8005cae:	e57d      	b.n	80057ac <bme280.part.0+0x1b4>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8005cb0:	20ba      	movs	r0, #186	; 0xba
 8005cb2:	f7fe fad7 	bl	8004264 <LCD_Font.constprop.4>
 8005cb6:	e55f      	b.n	8005778 <bme280.part.0+0x180>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <bme280.part.0+0x77c>)
 8005cbe:	f000 ffbd 	bl	8006c3c <__aeabi_dcmpgt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1d0      	bne.n	8005c68 <bme280.part.0+0x670>
			else if (temperature < 10 && temperature > 0) {
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f000 ffb5 	bl	8006c3c <__aeabi_dcmpgt>
 8005cd2:	bb20      	cbnz	r0, 8005d1e <bme280.part.0+0x726>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 ffd0 	bl	8006c7c <__aeabi_d2iz>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4926      	ldr	r1, [pc, #152]	; (8005d78 <bme280.part.0+0x780>)
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	b252      	sxtb	r2, r2
 8005ce4:	f003 ff1e 	bl	8009b24 <siprintf>
 8005ce8:	e7c4      	b.n	8005c74 <bme280.part.0+0x67c>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8005cea:	4640      	mov	r0, r8
 8005cec:	4649      	mov	r1, r9
 8005cee:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <bme280.part.0+0x77c>)
 8005cf0:	f000 ffa4 	bl	8006c3c <__aeabi_dcmpgt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d1c7      	bne.n	8005c88 <bme280.part.0+0x690>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4649      	mov	r1, r9
 8005d00:	f000 ff9c 	bl	8006c3c <__aeabi_dcmpgt>
 8005d04:	b9d8      	cbnz	r0, 8005d3e <bme280.part.0+0x746>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8005d06:	4649      	mov	r1, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	f000 ffb7 	bl	8006c7c <__aeabi_d2iz>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	ac03      	add	r4, sp, #12
 8005d12:	4620      	mov	r0, r4
 8005d14:	4918      	ldr	r1, [pc, #96]	; (8005d78 <bme280.part.0+0x780>)
 8005d16:	b252      	sxtb	r2, r2
 8005d18:	f003 ff04 	bl	8009b24 <siprintf>
 8005d1c:	e7bb      	b.n	8005c96 <bme280.part.0+0x69e>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 8005d1e:	4632      	mov	r2, r6
 8005d20:	463b      	mov	r3, r7
 8005d22:	4912      	ldr	r1, [pc, #72]	; (8005d6c <bme280.part.0+0x774>)
 8005d24:	4620      	mov	r0, r4
 8005d26:	f003 fefd 	bl	8009b24 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <bme280.part.0+0x778>)
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	21bb      	movs	r1, #187	; 0xbb
 8005d30:	201b      	movs	r0, #27
 8005d32:	f7ff fc19 	bl	8005568 <LCD_Font.constprop.5>
			temperatureLast = temperature;
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <bme280.part.0+0x770>)
 8005d38:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8005d3c:	e4e8      	b.n	8005710 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8005d3e:	ac03      	add	r4, sp, #12
 8005d40:	464b      	mov	r3, r9
 8005d42:	4642      	mov	r2, r8
 8005d44:	4909      	ldr	r1, [pc, #36]	; (8005d6c <bme280.part.0+0x774>)
 8005d46:	4620      	mov	r0, r4
 8005d48:	f003 feec 	bl	8009b24 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	21bb      	movs	r1, #187	; 0xbb
 8005d50:	201b      	movs	r0, #27
 8005d52:	f7fe fa87 	bl	8004264 <LCD_Font.constprop.4>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <bme280.part.0+0x770>)
 8005d58:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8005d5c:	e4b4      	b.n	80056c8 <bme280.part.0+0xd0>
 8005d5e:	bf00      	nop
 8005d60:	66666667 	.word	0x66666667
 8005d64:	20000566 	.word	0x20000566
 8005d68:	20000200 	.word	0x20000200
 8005d6c:	0801efac 	.word	0x0801efac
 8005d70:	00ffa500 	.word	0x00ffa500
 8005d74:	c0240000 	.word	0xc0240000
 8005d78:	0801efb4 	.word	0x0801efb4

08005d7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d7c:	e7fe      	b.n	8005d7c <NMI_Handler>
 8005d7e:	bf00      	nop

08005d80 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d80:	e7fe      	b.n	8005d80 <HardFault_Handler>
 8005d82:	bf00      	nop

08005d84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d84:	e7fe      	b.n	8005d84 <MemManage_Handler>
 8005d86:	bf00      	nop

08005d88 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d88:	e7fe      	b.n	8005d88 <BusFault_Handler>
 8005d8a:	bf00      	nop

08005d8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d8c:	e7fe      	b.n	8005d8c <UsageFault_Handler>
 8005d8e:	bf00      	nop

08005d90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop

08005d94 <DebugMon_Handler>:
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop

08005d98 <PendSV_Handler>:
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005d9c:	4a02      	ldr	r2, [pc, #8]	; (8005da8 <SysTick_Handler+0xc>)
 8005d9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005da0:	3301      	adds	r3, #1
 8005da2:	6553      	str	r3, [r2, #84]	; 0x54
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000200 	.word	0x20000200

08005dac <DMA1_Channel4_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005dac:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dae:	4b4d      	ldr	r3, [pc, #308]	; (8005ee4 <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005db0:	b470      	push	{r4, r5, r6}
 8005db2:	f8d3 6568 	ldr.w	r6, [r3, #1384]	; 0x568
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005db6:	f8d3 056c 	ldr.w	r0, [r3, #1388]	; 0x56c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dba:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005dbc:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005dc0:	4081      	lsls	r1, r0
 8005dc2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005dc4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005dc6:	d01f      	beq.n	8005e08 <DMA1_Channel4_IRQHandler+0x5c>
 8005dc8:	0769      	lsls	r1, r5, #29
 8005dca:	d51d      	bpl.n	8005e08 <DMA1_Channel4_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dcc:	6811      	ldr	r1, [r2, #0]
 8005dce:	0688      	lsls	r0, r1, #26
 8005dd0:	d403      	bmi.n	8005dda <DMA1_Channel4_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dd2:	6811      	ldr	r1, [r2, #0]
 8005dd4:	f021 0104 	bic.w	r1, r1, #4
 8005dd8:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dda:	4943      	ldr	r1, [pc, #268]	; (8005ee8 <DMA1_Channel4_IRQHandler+0x13c>)
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	d060      	beq.n	8005ea2 <DMA1_Channel4_IRQHandler+0xf6>
 8005de0:	3114      	adds	r1, #20
 8005de2:	428a      	cmp	r2, r1
 8005de4:	d067      	beq.n	8005eb6 <DMA1_Channel4_IRQHandler+0x10a>
 8005de6:	3114      	adds	r1, #20
 8005de8:	428a      	cmp	r2, r1
 8005dea:	d06e      	beq.n	8005eca <DMA1_Channel4_IRQHandler+0x11e>
 8005dec:	3114      	adds	r1, #20
 8005dee:	428a      	cmp	r2, r1
 8005df0:	d071      	beq.n	8005ed6 <DMA1_Channel4_IRQHandler+0x12a>
 8005df2:	3114      	adds	r1, #20
 8005df4:	428a      	cmp	r2, r1
 8005df6:	d063      	beq.n	8005ec0 <DMA1_Channel4_IRQHandler+0x114>
 8005df8:	3114      	adds	r1, #20
 8005dfa:	428a      	cmp	r2, r1
 8005dfc:	bf0c      	ite	eq
 8005dfe:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005e02:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005e06:	e04d      	b.n	8005ea4 <DMA1_Channel4_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4081      	lsls	r1, r0
 8005e0c:	4221      	tst	r1, r4
 8005e0e:	d022      	beq.n	8005e56 <DMA1_Channel4_IRQHandler+0xaa>
 8005e10:	07a9      	lsls	r1, r5, #30
 8005e12:	d520      	bpl.n	8005e56 <DMA1_Channel4_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	0688      	lsls	r0, r1, #26
 8005e18:	d406      	bmi.n	8005e28 <DMA1_Channel4_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e1a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e1c:	6811      	ldr	r1, [r2, #0]
 8005e1e:	f021 010a 	bic.w	r1, r1, #10
 8005e22:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005e24:	f883 054d 	strb.w	r0, [r3, #1357]	; 0x54d
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e28:	492f      	ldr	r1, [pc, #188]	; (8005ee8 <DMA1_Channel4_IRQHandler+0x13c>)
 8005e2a:	428a      	cmp	r2, r1
 8005e2c:	d02d      	beq.n	8005e8a <DMA1_Channel4_IRQHandler+0xde>
 8005e2e:	3114      	adds	r1, #20
 8005e30:	428a      	cmp	r2, r1
 8005e32:	d048      	beq.n	8005ec6 <DMA1_Channel4_IRQHandler+0x11a>
 8005e34:	3114      	adds	r1, #20
 8005e36:	428a      	cmp	r2, r1
 8005e38:	d04a      	beq.n	8005ed0 <DMA1_Channel4_IRQHandler+0x124>
 8005e3a:	3114      	adds	r1, #20
 8005e3c:	428a      	cmp	r2, r1
 8005e3e:	d03c      	beq.n	8005eba <DMA1_Channel4_IRQHandler+0x10e>
 8005e40:	3114      	adds	r1, #20
 8005e42:	428a      	cmp	r2, r1
 8005e44:	d04a      	beq.n	8005edc <DMA1_Channel4_IRQHandler+0x130>
 8005e46:	3114      	adds	r1, #20
 8005e48:	428a      	cmp	r2, r1
 8005e4a:	bf0c      	ite	eq
 8005e4c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005e50:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005e54:	e01a      	b.n	8005e8c <DMA1_Channel4_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e56:	2108      	movs	r1, #8
 8005e58:	4081      	lsls	r1, r0
 8005e5a:	4221      	tst	r1, r4
 8005e5c:	d01f      	beq.n	8005e9e <DMA1_Channel4_IRQHandler+0xf2>
 8005e5e:	0729      	lsls	r1, r5, #28
 8005e60:	d51d      	bpl.n	8005e9e <DMA1_Channel4_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e62:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e64:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e68:	f021 010e 	bic.w	r1, r1, #14
 8005e6c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e6e:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 8005e70:	f8d3 155c 	ldr.w	r1, [r3, #1372]	; 0x55c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e74:	fa02 f000 	lsl.w	r0, r2, r0
 8005e78:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e7a:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    __HAL_UNLOCK(hdma);
 8005e7e:	f8a3 454c 	strh.w	r4, [r3, #1356]	; 0x54c
    if (hdma->XferErrorCallback != NULL)
 8005e82:	b161      	cbz	r1, 8005e9e <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005e84:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e86:	4819      	ldr	r0, [pc, #100]	; (8005eec <DMA1_Channel4_IRQHandler+0x140>)
 8005e88:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e8a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005e8c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e8e:	4c18      	ldr	r4, [pc, #96]	; (8005ef0 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005e90:	f8d3 1554 	ldr.w	r1, [r3, #1364]	; 0x554
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e94:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005e96:	f883 054c 	strb.w	r0, [r3, #1356]	; 0x54c
    if(hdma->XferCpltCallback != NULL)
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	d1f2      	bne.n	8005e84 <DMA1_Channel4_IRQHandler+0xd8>
 8005e9e:	bc70      	pop	{r4, r5, r6}
 8005ea0:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	4912      	ldr	r1, [pc, #72]	; (8005ef0 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005ea6:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005eaa:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f6      	beq.n	8005e9e <DMA1_Channel4_IRQHandler+0xf2>
 8005eb0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005eb2:	480e      	ldr	r0, [pc, #56]	; (8005eec <DMA1_Channel4_IRQHandler+0x140>)
 8005eb4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005eb6:	2240      	movs	r2, #64	; 0x40
 8005eb8:	e7f4      	b.n	8005ea4 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ebe:	e7e5      	b.n	8005e8c <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ec0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ec4:	e7ee      	b.n	8005ea4 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	e7e0      	b.n	8005e8c <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ece:	e7e9      	b.n	8005ea4 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed4:	e7da      	b.n	8005e8c <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005eda:	e7e3      	b.n	8005ea4 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005edc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ee0:	e7d4      	b.n	8005e8c <DMA1_Channel4_IRQHandler+0xe0>
 8005ee2:	bf00      	nop
 8005ee4:	20000200 	.word	0x20000200
 8005ee8:	40020008 	.word	0x40020008
 8005eec:	2000072c 	.word	0x2000072c
 8005ef0:	40020000 	.word	0x40020000

08005ef4 <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ef4:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ef6:	4b4d      	ldr	r3, [pc, #308]	; (800602c <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005ef8:	b470      	push	{r4, r5, r6}
 8005efa:	f8d3 65ac 	ldr.w	r6, [r3, #1452]	; 0x5ac
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005efe:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f02:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005f04:	f8d3 2570 	ldr.w	r2, [r3, #1392]	; 0x570
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f08:	4081      	lsls	r1, r0
 8005f0a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005f0c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f0e:	d01f      	beq.n	8005f50 <DMA1_Channel5_IRQHandler+0x5c>
 8005f10:	0769      	lsls	r1, r5, #29
 8005f12:	d51d      	bpl.n	8005f50 <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f14:	6811      	ldr	r1, [r2, #0]
 8005f16:	0688      	lsls	r0, r1, #26
 8005f18:	d403      	bmi.n	8005f22 <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f1a:	6811      	ldr	r1, [r2, #0]
 8005f1c:	f021 0104 	bic.w	r1, r1, #4
 8005f20:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f22:	4943      	ldr	r1, [pc, #268]	; (8006030 <DMA1_Channel5_IRQHandler+0x13c>)
 8005f24:	428a      	cmp	r2, r1
 8005f26:	d060      	beq.n	8005fea <DMA1_Channel5_IRQHandler+0xf6>
 8005f28:	3114      	adds	r1, #20
 8005f2a:	428a      	cmp	r2, r1
 8005f2c:	d067      	beq.n	8005ffe <DMA1_Channel5_IRQHandler+0x10a>
 8005f2e:	3114      	adds	r1, #20
 8005f30:	428a      	cmp	r2, r1
 8005f32:	d06e      	beq.n	8006012 <DMA1_Channel5_IRQHandler+0x11e>
 8005f34:	3114      	adds	r1, #20
 8005f36:	428a      	cmp	r2, r1
 8005f38:	d071      	beq.n	800601e <DMA1_Channel5_IRQHandler+0x12a>
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	428a      	cmp	r2, r1
 8005f3e:	d063      	beq.n	8006008 <DMA1_Channel5_IRQHandler+0x114>
 8005f40:	3114      	adds	r1, #20
 8005f42:	428a      	cmp	r2, r1
 8005f44:	bf0c      	ite	eq
 8005f46:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005f4a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005f4e:	e04d      	b.n	8005fec <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005f50:	2102      	movs	r1, #2
 8005f52:	4081      	lsls	r1, r0
 8005f54:	4221      	tst	r1, r4
 8005f56:	d022      	beq.n	8005f9e <DMA1_Channel5_IRQHandler+0xaa>
 8005f58:	07a9      	lsls	r1, r5, #30
 8005f5a:	d520      	bpl.n	8005f9e <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	0688      	lsls	r0, r1, #26
 8005f60:	d406      	bmi.n	8005f70 <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005f62:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	f021 010a 	bic.w	r1, r1, #10
 8005f6a:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005f6c:	f883 0591 	strb.w	r0, [r3, #1425]	; 0x591
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f70:	492f      	ldr	r1, [pc, #188]	; (8006030 <DMA1_Channel5_IRQHandler+0x13c>)
 8005f72:	428a      	cmp	r2, r1
 8005f74:	d02d      	beq.n	8005fd2 <DMA1_Channel5_IRQHandler+0xde>
 8005f76:	3114      	adds	r1, #20
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d048      	beq.n	800600e <DMA1_Channel5_IRQHandler+0x11a>
 8005f7c:	3114      	adds	r1, #20
 8005f7e:	428a      	cmp	r2, r1
 8005f80:	d04a      	beq.n	8006018 <DMA1_Channel5_IRQHandler+0x124>
 8005f82:	3114      	adds	r1, #20
 8005f84:	428a      	cmp	r2, r1
 8005f86:	d03c      	beq.n	8006002 <DMA1_Channel5_IRQHandler+0x10e>
 8005f88:	3114      	adds	r1, #20
 8005f8a:	428a      	cmp	r2, r1
 8005f8c:	d04a      	beq.n	8006024 <DMA1_Channel5_IRQHandler+0x130>
 8005f8e:	3114      	adds	r1, #20
 8005f90:	428a      	cmp	r2, r1
 8005f92:	bf0c      	ite	eq
 8005f94:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005f98:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005f9c:	e01a      	b.n	8005fd4 <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f9e:	2108      	movs	r1, #8
 8005fa0:	4081      	lsls	r1, r0
 8005fa2:	4221      	tst	r1, r4
 8005fa4:	d01f      	beq.n	8005fe6 <DMA1_Channel5_IRQHandler+0xf2>
 8005fa6:	0729      	lsls	r1, r5, #28
 8005fa8:	d51d      	bpl.n	8005fe6 <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005faa:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005fac:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fb0:	f021 010e 	bic.w	r1, r1, #14
 8005fb4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fb6:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005fb8:	f8d3 15a0 	ldr.w	r1, [r3, #1440]	; 0x5a0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fbc:	fa02 f000 	lsl.w	r0, r2, r0
 8005fc0:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fc2:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
    __HAL_UNLOCK(hdma);
 8005fc6:	f8a3 4590 	strh.w	r4, [r3, #1424]	; 0x590
    if (hdma->XferErrorCallback != NULL)
 8005fca:	b161      	cbz	r1, 8005fe6 <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005fcc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005fce:	4819      	ldr	r0, [pc, #100]	; (8006034 <DMA1_Channel5_IRQHandler+0x140>)
 8005fd0:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fd2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005fd4:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fd6:	4c18      	ldr	r4, [pc, #96]	; (8006038 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005fd8:	f8d3 1598 	ldr.w	r1, [r3, #1432]	; 0x598
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fdc:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005fde:	f883 0590 	strb.w	r0, [r3, #1424]	; 0x590
    if(hdma->XferCpltCallback != NULL)
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d1f2      	bne.n	8005fcc <DMA1_Channel5_IRQHandler+0xd8>
 8005fe6:	bc70      	pop	{r4, r5, r6}
 8005fe8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fea:	2204      	movs	r2, #4
 8005fec:	4912      	ldr	r1, [pc, #72]	; (8006038 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005fee:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ff2:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f6      	beq.n	8005fe6 <DMA1_Channel5_IRQHandler+0xf2>
 8005ff8:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005ffa:	480e      	ldr	r0, [pc, #56]	; (8006034 <DMA1_Channel5_IRQHandler+0x140>)
 8005ffc:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	e7f4      	b.n	8005fec <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006006:	e7e5      	b.n	8005fd4 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006008:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800600c:	e7ee      	b.n	8005fec <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800600e:	2220      	movs	r2, #32
 8006010:	e7e0      	b.n	8005fd4 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006016:	e7e9      	b.n	8005fec <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601c:	e7da      	b.n	8005fd4 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800601e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006022:	e7e3      	b.n	8005fec <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006024:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006028:	e7d4      	b.n	8005fd4 <DMA1_Channel5_IRQHandler+0xe0>
 800602a:	bf00      	nop
 800602c:	20000200 	.word	0x20000200
 8006030:	40020008 	.word	0x40020008
 8006034:	20000770 	.word	0x20000770
 8006038:	40020000 	.word	0x40020000

0800603c <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800603c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800603e:	4b4d      	ldr	r3, [pc, #308]	; (8006174 <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006040:	b470      	push	{r4, r5, r6}
 8006042:	f8d3 64e0 	ldr.w	r6, [r3, #1248]	; 0x4e0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006046:	f8d3 04e4 	ldr.w	r0, [r3, #1252]	; 0x4e4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800604a:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800604c:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006050:	4081      	lsls	r1, r0
 8006052:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006054:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006056:	d01f      	beq.n	8006098 <DMA1_Channel6_IRQHandler+0x5c>
 8006058:	0769      	lsls	r1, r5, #29
 800605a:	d51d      	bpl.n	8006098 <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800605c:	6811      	ldr	r1, [r2, #0]
 800605e:	0688      	lsls	r0, r1, #26
 8006060:	d403      	bmi.n	800606a <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006062:	6811      	ldr	r1, [r2, #0]
 8006064:	f021 0104 	bic.w	r1, r1, #4
 8006068:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800606a:	4943      	ldr	r1, [pc, #268]	; (8006178 <DMA1_Channel6_IRQHandler+0x13c>)
 800606c:	428a      	cmp	r2, r1
 800606e:	d060      	beq.n	8006132 <DMA1_Channel6_IRQHandler+0xf6>
 8006070:	3114      	adds	r1, #20
 8006072:	428a      	cmp	r2, r1
 8006074:	d067      	beq.n	8006146 <DMA1_Channel6_IRQHandler+0x10a>
 8006076:	3114      	adds	r1, #20
 8006078:	428a      	cmp	r2, r1
 800607a:	d06e      	beq.n	800615a <DMA1_Channel6_IRQHandler+0x11e>
 800607c:	3114      	adds	r1, #20
 800607e:	428a      	cmp	r2, r1
 8006080:	d071      	beq.n	8006166 <DMA1_Channel6_IRQHandler+0x12a>
 8006082:	3114      	adds	r1, #20
 8006084:	428a      	cmp	r2, r1
 8006086:	d063      	beq.n	8006150 <DMA1_Channel6_IRQHandler+0x114>
 8006088:	3114      	adds	r1, #20
 800608a:	428a      	cmp	r2, r1
 800608c:	bf0c      	ite	eq
 800608e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8006092:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8006096:	e04d      	b.n	8006134 <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006098:	2102      	movs	r1, #2
 800609a:	4081      	lsls	r1, r0
 800609c:	4221      	tst	r1, r4
 800609e:	d022      	beq.n	80060e6 <DMA1_Channel6_IRQHandler+0xaa>
 80060a0:	07a9      	lsls	r1, r5, #30
 80060a2:	d520      	bpl.n	80060e6 <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060a4:	6811      	ldr	r1, [r2, #0]
 80060a6:	0688      	lsls	r0, r1, #26
 80060a8:	d406      	bmi.n	80060b8 <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 80060aa:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80060ac:	6811      	ldr	r1, [r2, #0]
 80060ae:	f021 010a 	bic.w	r1, r1, #10
 80060b2:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80060b4:	f883 04c5 	strb.w	r0, [r3, #1221]	; 0x4c5
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060b8:	492f      	ldr	r1, [pc, #188]	; (8006178 <DMA1_Channel6_IRQHandler+0x13c>)
 80060ba:	428a      	cmp	r2, r1
 80060bc:	d02d      	beq.n	800611a <DMA1_Channel6_IRQHandler+0xde>
 80060be:	3114      	adds	r1, #20
 80060c0:	428a      	cmp	r2, r1
 80060c2:	d048      	beq.n	8006156 <DMA1_Channel6_IRQHandler+0x11a>
 80060c4:	3114      	adds	r1, #20
 80060c6:	428a      	cmp	r2, r1
 80060c8:	d04a      	beq.n	8006160 <DMA1_Channel6_IRQHandler+0x124>
 80060ca:	3114      	adds	r1, #20
 80060cc:	428a      	cmp	r2, r1
 80060ce:	d03c      	beq.n	800614a <DMA1_Channel6_IRQHandler+0x10e>
 80060d0:	3114      	adds	r1, #20
 80060d2:	428a      	cmp	r2, r1
 80060d4:	d04a      	beq.n	800616c <DMA1_Channel6_IRQHandler+0x130>
 80060d6:	3114      	adds	r1, #20
 80060d8:	428a      	cmp	r2, r1
 80060da:	bf0c      	ite	eq
 80060dc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80060e0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80060e4:	e01a      	b.n	800611c <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80060e6:	2108      	movs	r1, #8
 80060e8:	4081      	lsls	r1, r0
 80060ea:	4221      	tst	r1, r4
 80060ec:	d01f      	beq.n	800612e <DMA1_Channel6_IRQHandler+0xf2>
 80060ee:	0729      	lsls	r1, r5, #28
 80060f0:	d51d      	bpl.n	800612e <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f2:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 80060f4:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f8:	f021 010e 	bic.w	r1, r1, #14
 80060fc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060fe:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8006100:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006104:	fa02 f000 	lsl.w	r0, r2, r0
 8006108:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800610a:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
    __HAL_UNLOCK(hdma);
 800610e:	f8a3 44c4 	strh.w	r4, [r3, #1220]	; 0x4c4
    if (hdma->XferErrorCallback != NULL)
 8006112:	b161      	cbz	r1, 800612e <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006114:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006116:	4819      	ldr	r0, [pc, #100]	; (800617c <DMA1_Channel6_IRQHandler+0x140>)
 8006118:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800611a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800611c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800611e:	4c18      	ldr	r4, [pc, #96]	; (8006180 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8006120:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006124:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8006126:	f883 04c4 	strb.w	r0, [r3, #1220]	; 0x4c4
    if(hdma->XferCpltCallback != NULL)
 800612a:	2900      	cmp	r1, #0
 800612c:	d1f2      	bne.n	8006114 <DMA1_Channel6_IRQHandler+0xd8>
 800612e:	bc70      	pop	{r4, r5, r6}
 8006130:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006132:	2204      	movs	r2, #4
 8006134:	4912      	ldr	r1, [pc, #72]	; (8006180 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8006136:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800613a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f6      	beq.n	800612e <DMA1_Channel6_IRQHandler+0xf2>
 8006140:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8006142:	480e      	ldr	r0, [pc, #56]	; (800617c <DMA1_Channel6_IRQHandler+0x140>)
 8006144:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006146:	2240      	movs	r2, #64	; 0x40
 8006148:	e7f4      	b.n	8006134 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800614a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800614e:	e7e5      	b.n	800611c <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006150:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006154:	e7ee      	b.n	8006134 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006156:	2220      	movs	r2, #32
 8006158:	e7e0      	b.n	800611c <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800615a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800615e:	e7e9      	b.n	8006134 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006164:	e7da      	b.n	800611c <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800616a:	e7e3      	b.n	8006134 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800616c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006170:	e7d4      	b.n	800611c <DMA1_Channel6_IRQHandler+0xe0>
 8006172:	bf00      	nop
 8006174:	20000200 	.word	0x20000200
 8006178:	40020008 	.word	0x40020008
 800617c:	200006a4 	.word	0x200006a4
 8006180:	40020000 	.word	0x40020000

08006184 <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006184:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006186:	4b4d      	ldr	r3, [pc, #308]	; (80062bc <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006188:	b470      	push	{r4, r5, r6}
 800618a:	f8d3 6524 	ldr.w	r6, [r3, #1316]	; 0x524
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800618e:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006192:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006194:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006198:	4081      	lsls	r1, r0
 800619a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 800619c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800619e:	d01f      	beq.n	80061e0 <DMA1_Channel7_IRQHandler+0x5c>
 80061a0:	0769      	lsls	r1, r5, #29
 80061a2:	d51d      	bpl.n	80061e0 <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061a4:	6811      	ldr	r1, [r2, #0]
 80061a6:	0688      	lsls	r0, r1, #26
 80061a8:	d403      	bmi.n	80061b2 <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061aa:	6811      	ldr	r1, [r2, #0]
 80061ac:	f021 0104 	bic.w	r1, r1, #4
 80061b0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061b2:	4943      	ldr	r1, [pc, #268]	; (80062c0 <DMA1_Channel7_IRQHandler+0x13c>)
 80061b4:	428a      	cmp	r2, r1
 80061b6:	d060      	beq.n	800627a <DMA1_Channel7_IRQHandler+0xf6>
 80061b8:	3114      	adds	r1, #20
 80061ba:	428a      	cmp	r2, r1
 80061bc:	d067      	beq.n	800628e <DMA1_Channel7_IRQHandler+0x10a>
 80061be:	3114      	adds	r1, #20
 80061c0:	428a      	cmp	r2, r1
 80061c2:	d06e      	beq.n	80062a2 <DMA1_Channel7_IRQHandler+0x11e>
 80061c4:	3114      	adds	r1, #20
 80061c6:	428a      	cmp	r2, r1
 80061c8:	d071      	beq.n	80062ae <DMA1_Channel7_IRQHandler+0x12a>
 80061ca:	3114      	adds	r1, #20
 80061cc:	428a      	cmp	r2, r1
 80061ce:	d063      	beq.n	8006298 <DMA1_Channel7_IRQHandler+0x114>
 80061d0:	3114      	adds	r1, #20
 80061d2:	428a      	cmp	r2, r1
 80061d4:	bf0c      	ite	eq
 80061d6:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80061da:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80061de:	e04d      	b.n	800627c <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80061e0:	2102      	movs	r1, #2
 80061e2:	4081      	lsls	r1, r0
 80061e4:	4221      	tst	r1, r4
 80061e6:	d022      	beq.n	800622e <DMA1_Channel7_IRQHandler+0xaa>
 80061e8:	07a9      	lsls	r1, r5, #30
 80061ea:	d520      	bpl.n	800622e <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	0688      	lsls	r0, r1, #26
 80061f0:	d406      	bmi.n	8006200 <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 80061f2:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	f021 010a 	bic.w	r1, r1, #10
 80061fa:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80061fc:	f883 0509 	strb.w	r0, [r3, #1289]	; 0x509
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006200:	492f      	ldr	r1, [pc, #188]	; (80062c0 <DMA1_Channel7_IRQHandler+0x13c>)
 8006202:	428a      	cmp	r2, r1
 8006204:	d02d      	beq.n	8006262 <DMA1_Channel7_IRQHandler+0xde>
 8006206:	3114      	adds	r1, #20
 8006208:	428a      	cmp	r2, r1
 800620a:	d048      	beq.n	800629e <DMA1_Channel7_IRQHandler+0x11a>
 800620c:	3114      	adds	r1, #20
 800620e:	428a      	cmp	r2, r1
 8006210:	d04a      	beq.n	80062a8 <DMA1_Channel7_IRQHandler+0x124>
 8006212:	3114      	adds	r1, #20
 8006214:	428a      	cmp	r2, r1
 8006216:	d03c      	beq.n	8006292 <DMA1_Channel7_IRQHandler+0x10e>
 8006218:	3114      	adds	r1, #20
 800621a:	428a      	cmp	r2, r1
 800621c:	d04a      	beq.n	80062b4 <DMA1_Channel7_IRQHandler+0x130>
 800621e:	3114      	adds	r1, #20
 8006220:	428a      	cmp	r2, r1
 8006222:	bf0c      	ite	eq
 8006224:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8006228:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800622c:	e01a      	b.n	8006264 <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800622e:	2108      	movs	r1, #8
 8006230:	4081      	lsls	r1, r0
 8006232:	4221      	tst	r1, r4
 8006234:	d01f      	beq.n	8006276 <DMA1_Channel7_IRQHandler+0xf2>
 8006236:	0729      	lsls	r1, r5, #28
 8006238:	d51d      	bpl.n	8006276 <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800623a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 800623c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006240:	f021 010e 	bic.w	r1, r1, #14
 8006244:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006246:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8006248:	f8d3 1518 	ldr.w	r1, [r3, #1304]	; 0x518
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800624c:	fa02 f000 	lsl.w	r0, r2, r0
 8006250:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006252:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    __HAL_UNLOCK(hdma);
 8006256:	f8a3 4508 	strh.w	r4, [r3, #1288]	; 0x508
    if (hdma->XferErrorCallback != NULL)
 800625a:	b161      	cbz	r1, 8006276 <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800625c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800625e:	4819      	ldr	r0, [pc, #100]	; (80062c4 <DMA1_Channel7_IRQHandler+0x140>)
 8006260:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006262:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8006264:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006266:	4c18      	ldr	r4, [pc, #96]	; (80062c8 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8006268:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800626c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800626e:	f883 0508 	strb.w	r0, [r3, #1288]	; 0x508
    if(hdma->XferCpltCallback != NULL)
 8006272:	2900      	cmp	r1, #0
 8006274:	d1f2      	bne.n	800625c <DMA1_Channel7_IRQHandler+0xd8>
 8006276:	bc70      	pop	{r4, r5, r6}
 8006278:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800627a:	2204      	movs	r2, #4
 800627c:	4912      	ldr	r1, [pc, #72]	; (80062c8 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 800627e:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006282:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f6      	beq.n	8006276 <DMA1_Channel7_IRQHandler+0xf2>
 8006288:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 800628a:	480e      	ldr	r0, [pc, #56]	; (80062c4 <DMA1_Channel7_IRQHandler+0x140>)
 800628c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800628e:	2240      	movs	r2, #64	; 0x40
 8006290:	e7f4      	b.n	800627c <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006296:	e7e5      	b.n	8006264 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006298:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800629c:	e7ee      	b.n	800627c <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800629e:	2220      	movs	r2, #32
 80062a0:	e7e0      	b.n	8006264 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062a6:	e7e9      	b.n	800627c <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ac:	e7da      	b.n	8006264 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062b2:	e7e3      	b.n	800627c <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062b8:	e7d4      	b.n	8006264 <DMA1_Channel7_IRQHandler+0xe0>
 80062ba:	bf00      	nop
 80062bc:	20000200 	.word	0x20000200
 80062c0:	40020008 	.word	0x40020008
 80062c4:	200006e8 	.word	0x200006e8
 80062c8:	40020000 	.word	0x40020000

080062cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80062cc:	2001      	movs	r0, #1
 80062ce:	4770      	bx	lr

080062d0 <_kill>:

int _kill(int pid, int sig)
{
 80062d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80062d2:	f002 fd83 	bl	8008ddc <__errno>
 80062d6:	2216      	movs	r2, #22
 80062d8:	4603      	mov	r3, r0
	return -1;
}
 80062da:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80062de:	601a      	str	r2, [r3, #0]
}
 80062e0:	bd08      	pop	{r3, pc}
 80062e2:	bf00      	nop

080062e4 <_exit>:

void _exit (int status)
{
 80062e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80062e6:	f002 fd79 	bl	8008ddc <__errno>
 80062ea:	2316      	movs	r3, #22
 80062ec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80062ee:	e7fe      	b.n	80062ee <_exit+0xa>

080062f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062f0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062f2:	1e16      	subs	r6, r2, #0
 80062f4:	dd07      	ble.n	8006306 <_read+0x16>
 80062f6:	460c      	mov	r4, r1
 80062f8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80062fa:	f3af 8000 	nop.w
 80062fe:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006302:	42a5      	cmp	r5, r4
 8006304:	d1f9      	bne.n	80062fa <_read+0xa>
	}

return len;
}
 8006306:	4630      	mov	r0, r6
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	bf00      	nop

0800630c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800630c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800630e:	1e16      	subs	r6, r2, #0
 8006310:	dd07      	ble.n	8006322 <_write+0x16>
 8006312:	460c      	mov	r4, r1
 8006314:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006316:	f814 0b01 	ldrb.w	r0, [r4], #1
 800631a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800631e:	42ac      	cmp	r4, r5
 8006320:	d1f9      	bne.n	8006316 <_write+0xa>
	}
	return len;
}
 8006322:	4630      	mov	r0, r6
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	bf00      	nop

08006328 <_close>:

int _close(int file)
{
	return -1;
}
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop

08006330 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006334:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006336:	604b      	str	r3, [r1, #4]
}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop

0800633c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800633c:	2001      	movs	r0, #1
 800633e:	4770      	bx	lr

08006340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006340:	2000      	movs	r0, #0
 8006342:	4770      	bx	lr

08006344 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006344:	490e      	ldr	r1, [pc, #56]	; (8006380 <_sbrk+0x3c>)
{
 8006346:	4603      	mov	r3, r0
 8006348:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <_sbrk+0x40>)
 800634c:	4c0e      	ldr	r4, [pc, #56]	; (8006388 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 800634e:	f8d1 06e8 	ldr.w	r0, [r1, #1768]	; 0x6e8
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006352:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006354:	b128      	cbz	r0, 8006362 <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006356:	4403      	add	r3, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	d809      	bhi.n	8006370 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800635c:	f8c1 36e8 	str.w	r3, [r1, #1768]	; 0x6e8

  return (void *)prev_heap_end;
}
 8006360:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006362:	4c0a      	ldr	r4, [pc, #40]	; (800638c <_sbrk+0x48>)
 8006364:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8006366:	4403      	add	r3, r0
 8006368:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800636a:	f8c1 46e8 	str.w	r4, [r1, #1768]	; 0x6e8
  if (__sbrk_heap_end + incr > max_heap)
 800636e:	d9f5      	bls.n	800635c <_sbrk+0x18>
    errno = ENOMEM;
 8006370:	f002 fd34 	bl	8008ddc <__errno>
 8006374:	220c      	movs	r2, #12
 8006376:	4603      	mov	r3, r0
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	601a      	str	r2, [r3, #0]
}
 800637e:	bd10      	pop	{r4, pc}
 8006380:	20000200 	.word	0x20000200
 8006384:	20005000 	.word	0x20005000
 8006388:	00000400 	.word	0x00000400
 800638c:	20000900 	.word	0x20000900

08006390 <SystemInit>:
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop

08006394 <strlen>:
 8006394:	4603      	mov	r3, r0
 8006396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639a:	2a00      	cmp	r2, #0
 800639c:	d1fb      	bne.n	8006396 <strlen+0x2>
 800639e:	1a18      	subs	r0, r3, r0
 80063a0:	3801      	subs	r0, #1
 80063a2:	4770      	bx	lr

080063a4 <__aeabi_drsub>:
 80063a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80063a8:	e002      	b.n	80063b0 <__adddf3>
 80063aa:	bf00      	nop

080063ac <__aeabi_dsub>:
 80063ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080063b0 <__adddf3>:
 80063b0:	b530      	push	{r4, r5, lr}
 80063b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80063b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80063ba:	ea94 0f05 	teq	r4, r5
 80063be:	bf08      	it	eq
 80063c0:	ea90 0f02 	teqeq	r0, r2
 80063c4:	bf1f      	itttt	ne
 80063c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80063ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80063ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80063d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063d6:	f000 80e2 	beq.w	800659e <__adddf3+0x1ee>
 80063da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063e2:	bfb8      	it	lt
 80063e4:	426d      	neglt	r5, r5
 80063e6:	dd0c      	ble.n	8006402 <__adddf3+0x52>
 80063e8:	442c      	add	r4, r5
 80063ea:	ea80 0202 	eor.w	r2, r0, r2
 80063ee:	ea81 0303 	eor.w	r3, r1, r3
 80063f2:	ea82 0000 	eor.w	r0, r2, r0
 80063f6:	ea83 0101 	eor.w	r1, r3, r1
 80063fa:	ea80 0202 	eor.w	r2, r0, r2
 80063fe:	ea81 0303 	eor.w	r3, r1, r3
 8006402:	2d36      	cmp	r5, #54	; 0x36
 8006404:	bf88      	it	hi
 8006406:	bd30      	pophi	{r4, r5, pc}
 8006408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800640c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006418:	d002      	beq.n	8006420 <__adddf3+0x70>
 800641a:	4240      	negs	r0, r0
 800641c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800642c:	d002      	beq.n	8006434 <__adddf3+0x84>
 800642e:	4252      	negs	r2, r2
 8006430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006434:	ea94 0f05 	teq	r4, r5
 8006438:	f000 80a7 	beq.w	800658a <__adddf3+0x1da>
 800643c:	f1a4 0401 	sub.w	r4, r4, #1
 8006440:	f1d5 0e20 	rsbs	lr, r5, #32
 8006444:	db0d      	blt.n	8006462 <__adddf3+0xb2>
 8006446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800644a:	fa22 f205 	lsr.w	r2, r2, r5
 800644e:	1880      	adds	r0, r0, r2
 8006450:	f141 0100 	adc.w	r1, r1, #0
 8006454:	fa03 f20e 	lsl.w	r2, r3, lr
 8006458:	1880      	adds	r0, r0, r2
 800645a:	fa43 f305 	asr.w	r3, r3, r5
 800645e:	4159      	adcs	r1, r3
 8006460:	e00e      	b.n	8006480 <__adddf3+0xd0>
 8006462:	f1a5 0520 	sub.w	r5, r5, #32
 8006466:	f10e 0e20 	add.w	lr, lr, #32
 800646a:	2a01      	cmp	r2, #1
 800646c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006470:	bf28      	it	cs
 8006472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006476:	fa43 f305 	asr.w	r3, r3, r5
 800647a:	18c0      	adds	r0, r0, r3
 800647c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006484:	d507      	bpl.n	8006496 <__adddf3+0xe6>
 8006486:	f04f 0e00 	mov.w	lr, #0
 800648a:	f1dc 0c00 	rsbs	ip, ip, #0
 800648e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006492:	eb6e 0101 	sbc.w	r1, lr, r1
 8006496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800649a:	d31b      	bcc.n	80064d4 <__adddf3+0x124>
 800649c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80064a0:	d30c      	bcc.n	80064bc <__adddf3+0x10c>
 80064a2:	0849      	lsrs	r1, r1, #1
 80064a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80064a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80064ac:	f104 0401 	add.w	r4, r4, #1
 80064b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80064b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80064b8:	f080 809a 	bcs.w	80065f0 <__adddf3+0x240>
 80064bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80064c0:	bf08      	it	eq
 80064c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064c6:	f150 0000 	adcs.w	r0, r0, #0
 80064ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064ce:	ea41 0105 	orr.w	r1, r1, r5
 80064d2:	bd30      	pop	{r4, r5, pc}
 80064d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064d8:	4140      	adcs	r0, r0
 80064da:	eb41 0101 	adc.w	r1, r1, r1
 80064de:	3c01      	subs	r4, #1
 80064e0:	bf28      	it	cs
 80064e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80064e6:	d2e9      	bcs.n	80064bc <__adddf3+0x10c>
 80064e8:	f091 0f00 	teq	r1, #0
 80064ec:	bf04      	itt	eq
 80064ee:	4601      	moveq	r1, r0
 80064f0:	2000      	moveq	r0, #0
 80064f2:	fab1 f381 	clz	r3, r1
 80064f6:	bf08      	it	eq
 80064f8:	3320      	addeq	r3, #32
 80064fa:	f1a3 030b 	sub.w	r3, r3, #11
 80064fe:	f1b3 0220 	subs.w	r2, r3, #32
 8006502:	da0c      	bge.n	800651e <__adddf3+0x16e>
 8006504:	320c      	adds	r2, #12
 8006506:	dd08      	ble.n	800651a <__adddf3+0x16a>
 8006508:	f102 0c14 	add.w	ip, r2, #20
 800650c:	f1c2 020c 	rsb	r2, r2, #12
 8006510:	fa01 f00c 	lsl.w	r0, r1, ip
 8006514:	fa21 f102 	lsr.w	r1, r1, r2
 8006518:	e00c      	b.n	8006534 <__adddf3+0x184>
 800651a:	f102 0214 	add.w	r2, r2, #20
 800651e:	bfd8      	it	le
 8006520:	f1c2 0c20 	rsble	ip, r2, #32
 8006524:	fa01 f102 	lsl.w	r1, r1, r2
 8006528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800652c:	bfdc      	itt	le
 800652e:	ea41 010c 	orrle.w	r1, r1, ip
 8006532:	4090      	lslle	r0, r2
 8006534:	1ae4      	subs	r4, r4, r3
 8006536:	bfa2      	ittt	ge
 8006538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800653c:	4329      	orrge	r1, r5
 800653e:	bd30      	popge	{r4, r5, pc}
 8006540:	ea6f 0404 	mvn.w	r4, r4
 8006544:	3c1f      	subs	r4, #31
 8006546:	da1c      	bge.n	8006582 <__adddf3+0x1d2>
 8006548:	340c      	adds	r4, #12
 800654a:	dc0e      	bgt.n	800656a <__adddf3+0x1ba>
 800654c:	f104 0414 	add.w	r4, r4, #20
 8006550:	f1c4 0220 	rsb	r2, r4, #32
 8006554:	fa20 f004 	lsr.w	r0, r0, r4
 8006558:	fa01 f302 	lsl.w	r3, r1, r2
 800655c:	ea40 0003 	orr.w	r0, r0, r3
 8006560:	fa21 f304 	lsr.w	r3, r1, r4
 8006564:	ea45 0103 	orr.w	r1, r5, r3
 8006568:	bd30      	pop	{r4, r5, pc}
 800656a:	f1c4 040c 	rsb	r4, r4, #12
 800656e:	f1c4 0220 	rsb	r2, r4, #32
 8006572:	fa20 f002 	lsr.w	r0, r0, r2
 8006576:	fa01 f304 	lsl.w	r3, r1, r4
 800657a:	ea40 0003 	orr.w	r0, r0, r3
 800657e:	4629      	mov	r1, r5
 8006580:	bd30      	pop	{r4, r5, pc}
 8006582:	fa21 f004 	lsr.w	r0, r1, r4
 8006586:	4629      	mov	r1, r5
 8006588:	bd30      	pop	{r4, r5, pc}
 800658a:	f094 0f00 	teq	r4, #0
 800658e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006592:	bf06      	itte	eq
 8006594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006598:	3401      	addeq	r4, #1
 800659a:	3d01      	subne	r5, #1
 800659c:	e74e      	b.n	800643c <__adddf3+0x8c>
 800659e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065a2:	bf18      	it	ne
 80065a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80065a8:	d029      	beq.n	80065fe <__adddf3+0x24e>
 80065aa:	ea94 0f05 	teq	r4, r5
 80065ae:	bf08      	it	eq
 80065b0:	ea90 0f02 	teqeq	r0, r2
 80065b4:	d005      	beq.n	80065c2 <__adddf3+0x212>
 80065b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80065ba:	bf04      	itt	eq
 80065bc:	4619      	moveq	r1, r3
 80065be:	4610      	moveq	r0, r2
 80065c0:	bd30      	pop	{r4, r5, pc}
 80065c2:	ea91 0f03 	teq	r1, r3
 80065c6:	bf1e      	ittt	ne
 80065c8:	2100      	movne	r1, #0
 80065ca:	2000      	movne	r0, #0
 80065cc:	bd30      	popne	{r4, r5, pc}
 80065ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80065d2:	d105      	bne.n	80065e0 <__adddf3+0x230>
 80065d4:	0040      	lsls	r0, r0, #1
 80065d6:	4149      	adcs	r1, r1
 80065d8:	bf28      	it	cs
 80065da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065de:	bd30      	pop	{r4, r5, pc}
 80065e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065e4:	bf3c      	itt	cc
 80065e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80065ea:	bd30      	popcc	{r4, r5, pc}
 80065ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80065f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065f8:	f04f 0000 	mov.w	r0, #0
 80065fc:	bd30      	pop	{r4, r5, pc}
 80065fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006602:	bf1a      	itte	ne
 8006604:	4619      	movne	r1, r3
 8006606:	4610      	movne	r0, r2
 8006608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800660c:	bf1c      	itt	ne
 800660e:	460b      	movne	r3, r1
 8006610:	4602      	movne	r2, r0
 8006612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006616:	bf06      	itte	eq
 8006618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800661c:	ea91 0f03 	teqeq	r1, r3
 8006620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006624:	bd30      	pop	{r4, r5, pc}
 8006626:	bf00      	nop

08006628 <__aeabi_ui2d>:
 8006628:	f090 0f00 	teq	r0, #0
 800662c:	bf04      	itt	eq
 800662e:	2100      	moveq	r1, #0
 8006630:	4770      	bxeq	lr
 8006632:	b530      	push	{r4, r5, lr}
 8006634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800663c:	f04f 0500 	mov.w	r5, #0
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	e750      	b.n	80064e8 <__adddf3+0x138>
 8006646:	bf00      	nop

08006648 <__aeabi_i2d>:
 8006648:	f090 0f00 	teq	r0, #0
 800664c:	bf04      	itt	eq
 800664e:	2100      	moveq	r1, #0
 8006650:	4770      	bxeq	lr
 8006652:	b530      	push	{r4, r5, lr}
 8006654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800665c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006660:	bf48      	it	mi
 8006662:	4240      	negmi	r0, r0
 8006664:	f04f 0100 	mov.w	r1, #0
 8006668:	e73e      	b.n	80064e8 <__adddf3+0x138>
 800666a:	bf00      	nop

0800666c <__aeabi_f2d>:
 800666c:	0042      	lsls	r2, r0, #1
 800666e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006672:	ea4f 0131 	mov.w	r1, r1, rrx
 8006676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800667a:	bf1f      	itttt	ne
 800667c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006688:	4770      	bxne	lr
 800668a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800668e:	bf08      	it	eq
 8006690:	4770      	bxeq	lr
 8006692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006696:	bf04      	itt	eq
 8006698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800669c:	4770      	bxeq	lr
 800669e:	b530      	push	{r4, r5, lr}
 80066a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80066a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80066a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066ac:	e71c      	b.n	80064e8 <__adddf3+0x138>
 80066ae:	bf00      	nop

080066b0 <__aeabi_ul2d>:
 80066b0:	ea50 0201 	orrs.w	r2, r0, r1
 80066b4:	bf08      	it	eq
 80066b6:	4770      	bxeq	lr
 80066b8:	b530      	push	{r4, r5, lr}
 80066ba:	f04f 0500 	mov.w	r5, #0
 80066be:	e00a      	b.n	80066d6 <__aeabi_l2d+0x16>

080066c0 <__aeabi_l2d>:
 80066c0:	ea50 0201 	orrs.w	r2, r0, r1
 80066c4:	bf08      	it	eq
 80066c6:	4770      	bxeq	lr
 80066c8:	b530      	push	{r4, r5, lr}
 80066ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80066ce:	d502      	bpl.n	80066d6 <__aeabi_l2d+0x16>
 80066d0:	4240      	negs	r0, r0
 80066d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066e2:	f43f aed8 	beq.w	8006496 <__adddf3+0xe6>
 80066e6:	f04f 0203 	mov.w	r2, #3
 80066ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066ee:	bf18      	it	ne
 80066f0:	3203      	addne	r2, #3
 80066f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066f6:	bf18      	it	ne
 80066f8:	3203      	addne	r2, #3
 80066fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066fe:	f1c2 0320 	rsb	r3, r2, #32
 8006702:	fa00 fc03 	lsl.w	ip, r0, r3
 8006706:	fa20 f002 	lsr.w	r0, r0, r2
 800670a:	fa01 fe03 	lsl.w	lr, r1, r3
 800670e:	ea40 000e 	orr.w	r0, r0, lr
 8006712:	fa21 f102 	lsr.w	r1, r1, r2
 8006716:	4414      	add	r4, r2
 8006718:	e6bd      	b.n	8006496 <__adddf3+0xe6>
 800671a:	bf00      	nop

0800671c <__aeabi_dmul>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800672a:	bf1d      	ittte	ne
 800672c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006730:	ea94 0f0c 	teqne	r4, ip
 8006734:	ea95 0f0c 	teqne	r5, ip
 8006738:	f000 f8de 	bleq	80068f8 <__aeabi_dmul+0x1dc>
 800673c:	442c      	add	r4, r5
 800673e:	ea81 0603 	eor.w	r6, r1, r3
 8006742:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006746:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800674a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800674e:	bf18      	it	ne
 8006750:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800675c:	d038      	beq.n	80067d0 <__aeabi_dmul+0xb4>
 800675e:	fba0 ce02 	umull	ip, lr, r0, r2
 8006762:	f04f 0500 	mov.w	r5, #0
 8006766:	fbe1 e502 	umlal	lr, r5, r1, r2
 800676a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800676e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006772:	f04f 0600 	mov.w	r6, #0
 8006776:	fbe1 5603 	umlal	r5, r6, r1, r3
 800677a:	f09c 0f00 	teq	ip, #0
 800677e:	bf18      	it	ne
 8006780:	f04e 0e01 	orrne.w	lr, lr, #1
 8006784:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006788:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800678c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006790:	d204      	bcs.n	800679c <__aeabi_dmul+0x80>
 8006792:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006796:	416d      	adcs	r5, r5
 8006798:	eb46 0606 	adc.w	r6, r6, r6
 800679c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80067a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80067a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80067a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80067ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80067b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80067b4:	bf88      	it	hi
 80067b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80067ba:	d81e      	bhi.n	80067fa <__aeabi_dmul+0xde>
 80067bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80067c0:	bf08      	it	eq
 80067c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80067c6:	f150 0000 	adcs.w	r0, r0, #0
 80067ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80067d4:	ea46 0101 	orr.w	r1, r6, r1
 80067d8:	ea40 0002 	orr.w	r0, r0, r2
 80067dc:	ea81 0103 	eor.w	r1, r1, r3
 80067e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067e4:	bfc2      	ittt	gt
 80067e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80067ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80067ee:	bd70      	popgt	{r4, r5, r6, pc}
 80067f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067f4:	f04f 0e00 	mov.w	lr, #0
 80067f8:	3c01      	subs	r4, #1
 80067fa:	f300 80ab 	bgt.w	8006954 <__aeabi_dmul+0x238>
 80067fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006802:	bfde      	ittt	le
 8006804:	2000      	movle	r0, #0
 8006806:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800680a:	bd70      	pople	{r4, r5, r6, pc}
 800680c:	f1c4 0400 	rsb	r4, r4, #0
 8006810:	3c20      	subs	r4, #32
 8006812:	da35      	bge.n	8006880 <__aeabi_dmul+0x164>
 8006814:	340c      	adds	r4, #12
 8006816:	dc1b      	bgt.n	8006850 <__aeabi_dmul+0x134>
 8006818:	f104 0414 	add.w	r4, r4, #20
 800681c:	f1c4 0520 	rsb	r5, r4, #32
 8006820:	fa00 f305 	lsl.w	r3, r0, r5
 8006824:	fa20 f004 	lsr.w	r0, r0, r4
 8006828:	fa01 f205 	lsl.w	r2, r1, r5
 800682c:	ea40 0002 	orr.w	r0, r0, r2
 8006830:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800683c:	fa21 f604 	lsr.w	r6, r1, r4
 8006840:	eb42 0106 	adc.w	r1, r2, r6
 8006844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006848:	bf08      	it	eq
 800684a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f1c4 040c 	rsb	r4, r4, #12
 8006854:	f1c4 0520 	rsb	r5, r4, #32
 8006858:	fa00 f304 	lsl.w	r3, r0, r4
 800685c:	fa20 f005 	lsr.w	r0, r0, r5
 8006860:	fa01 f204 	lsl.w	r2, r1, r4
 8006864:	ea40 0002 	orr.w	r0, r0, r2
 8006868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800686c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006870:	f141 0100 	adc.w	r1, r1, #0
 8006874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006878:	bf08      	it	eq
 800687a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f1c4 0520 	rsb	r5, r4, #32
 8006884:	fa00 f205 	lsl.w	r2, r0, r5
 8006888:	ea4e 0e02 	orr.w	lr, lr, r2
 800688c:	fa20 f304 	lsr.w	r3, r0, r4
 8006890:	fa01 f205 	lsl.w	r2, r1, r5
 8006894:	ea43 0302 	orr.w	r3, r3, r2
 8006898:	fa21 f004 	lsr.w	r0, r1, r4
 800689c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068a0:	fa21 f204 	lsr.w	r2, r1, r4
 80068a4:	ea20 0002 	bic.w	r0, r0, r2
 80068a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80068ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80068b0:	bf08      	it	eq
 80068b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	f094 0f00 	teq	r4, #0
 80068bc:	d10f      	bne.n	80068de <__aeabi_dmul+0x1c2>
 80068be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80068c2:	0040      	lsls	r0, r0, #1
 80068c4:	eb41 0101 	adc.w	r1, r1, r1
 80068c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80068cc:	bf08      	it	eq
 80068ce:	3c01      	subeq	r4, #1
 80068d0:	d0f7      	beq.n	80068c2 <__aeabi_dmul+0x1a6>
 80068d2:	ea41 0106 	orr.w	r1, r1, r6
 80068d6:	f095 0f00 	teq	r5, #0
 80068da:	bf18      	it	ne
 80068dc:	4770      	bxne	lr
 80068de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068e2:	0052      	lsls	r2, r2, #1
 80068e4:	eb43 0303 	adc.w	r3, r3, r3
 80068e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068ec:	bf08      	it	eq
 80068ee:	3d01      	subeq	r5, #1
 80068f0:	d0f7      	beq.n	80068e2 <__aeabi_dmul+0x1c6>
 80068f2:	ea43 0306 	orr.w	r3, r3, r6
 80068f6:	4770      	bx	lr
 80068f8:	ea94 0f0c 	teq	r4, ip
 80068fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006900:	bf18      	it	ne
 8006902:	ea95 0f0c 	teqne	r5, ip
 8006906:	d00c      	beq.n	8006922 <__aeabi_dmul+0x206>
 8006908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800690c:	bf18      	it	ne
 800690e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006912:	d1d1      	bne.n	80068b8 <__aeabi_dmul+0x19c>
 8006914:	ea81 0103 	eor.w	r1, r1, r3
 8006918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800691c:	f04f 0000 	mov.w	r0, #0
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006926:	bf06      	itte	eq
 8006928:	4610      	moveq	r0, r2
 800692a:	4619      	moveq	r1, r3
 800692c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006930:	d019      	beq.n	8006966 <__aeabi_dmul+0x24a>
 8006932:	ea94 0f0c 	teq	r4, ip
 8006936:	d102      	bne.n	800693e <__aeabi_dmul+0x222>
 8006938:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800693c:	d113      	bne.n	8006966 <__aeabi_dmul+0x24a>
 800693e:	ea95 0f0c 	teq	r5, ip
 8006942:	d105      	bne.n	8006950 <__aeabi_dmul+0x234>
 8006944:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006948:	bf1c      	itt	ne
 800694a:	4610      	movne	r0, r2
 800694c:	4619      	movne	r1, r3
 800694e:	d10a      	bne.n	8006966 <__aeabi_dmul+0x24a>
 8006950:	ea81 0103 	eor.w	r1, r1, r3
 8006954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006958:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800695c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006960:	f04f 0000 	mov.w	r0, #0
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800696a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800696e:	bd70      	pop	{r4, r5, r6, pc}

08006970 <__aeabi_ddiv>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800697a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800697e:	bf1d      	ittte	ne
 8006980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006984:	ea94 0f0c 	teqne	r4, ip
 8006988:	ea95 0f0c 	teqne	r5, ip
 800698c:	f000 f8a7 	bleq	8006ade <__aeabi_ddiv+0x16e>
 8006990:	eba4 0405 	sub.w	r4, r4, r5
 8006994:	ea81 0e03 	eor.w	lr, r1, r3
 8006998:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800699c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069a0:	f000 8088 	beq.w	8006ab4 <__aeabi_ddiv+0x144>
 80069a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80069ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80069b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80069b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80069b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80069bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80069c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80069c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80069c8:	429d      	cmp	r5, r3
 80069ca:	bf08      	it	eq
 80069cc:	4296      	cmpeq	r6, r2
 80069ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80069d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80069d6:	d202      	bcs.n	80069de <__aeabi_ddiv+0x6e>
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	ea4f 0232 	mov.w	r2, r2, rrx
 80069de:	1ab6      	subs	r6, r6, r2
 80069e0:	eb65 0503 	sbc.w	r5, r5, r3
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80069f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80069f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069fa:	bf22      	ittt	cs
 80069fc:	1ab6      	subcs	r6, r6, r2
 80069fe:	4675      	movcs	r5, lr
 8006a00:	ea40 000c 	orrcs.w	r0, r0, ip
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a12:	bf22      	ittt	cs
 8006a14:	1ab6      	subcs	r6, r6, r2
 8006a16:	4675      	movcs	r5, lr
 8006a18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a2a:	bf22      	ittt	cs
 8006a2c:	1ab6      	subcs	r6, r6, r2
 8006a2e:	4675      	movcs	r5, lr
 8006a30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a42:	bf22      	ittt	cs
 8006a44:	1ab6      	subcs	r6, r6, r2
 8006a46:	4675      	movcs	r5, lr
 8006a48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a4c:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a50:	d018      	beq.n	8006a84 <__aeabi_ddiv+0x114>
 8006a52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a6e:	d1c0      	bne.n	80069f2 <__aeabi_ddiv+0x82>
 8006a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a74:	d10b      	bne.n	8006a8e <__aeabi_ddiv+0x11e>
 8006a76:	ea41 0100 	orr.w	r1, r1, r0
 8006a7a:	f04f 0000 	mov.w	r0, #0
 8006a7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a82:	e7b6      	b.n	80069f2 <__aeabi_ddiv+0x82>
 8006a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a88:	bf04      	itt	eq
 8006a8a:	4301      	orreq	r1, r0
 8006a8c:	2000      	moveq	r0, #0
 8006a8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a92:	bf88      	it	hi
 8006a94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a98:	f63f aeaf 	bhi.w	80067fa <__aeabi_dmul+0xde>
 8006a9c:	ebb5 0c03 	subs.w	ip, r5, r3
 8006aa0:	bf04      	itt	eq
 8006aa2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006aa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006aaa:	f150 0000 	adcs.w	r0, r0, #0
 8006aae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006ab8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006abc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006ac0:	bfc2      	ittt	gt
 8006ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006aca:	bd70      	popgt	{r4, r5, r6, pc}
 8006acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ad0:	f04f 0e00 	mov.w	lr, #0
 8006ad4:	3c01      	subs	r4, #1
 8006ad6:	e690      	b.n	80067fa <__aeabi_dmul+0xde>
 8006ad8:	ea45 0e06 	orr.w	lr, r5, r6
 8006adc:	e68d      	b.n	80067fa <__aeabi_dmul+0xde>
 8006ade:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006ae2:	ea94 0f0c 	teq	r4, ip
 8006ae6:	bf08      	it	eq
 8006ae8:	ea95 0f0c 	teqeq	r5, ip
 8006aec:	f43f af3b 	beq.w	8006966 <__aeabi_dmul+0x24a>
 8006af0:	ea94 0f0c 	teq	r4, ip
 8006af4:	d10a      	bne.n	8006b0c <__aeabi_ddiv+0x19c>
 8006af6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006afa:	f47f af34 	bne.w	8006966 <__aeabi_dmul+0x24a>
 8006afe:	ea95 0f0c 	teq	r5, ip
 8006b02:	f47f af25 	bne.w	8006950 <__aeabi_dmul+0x234>
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	e72c      	b.n	8006966 <__aeabi_dmul+0x24a>
 8006b0c:	ea95 0f0c 	teq	r5, ip
 8006b10:	d106      	bne.n	8006b20 <__aeabi_ddiv+0x1b0>
 8006b12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006b16:	f43f aefd 	beq.w	8006914 <__aeabi_dmul+0x1f8>
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	e722      	b.n	8006966 <__aeabi_dmul+0x24a>
 8006b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b24:	bf18      	it	ne
 8006b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b2a:	f47f aec5 	bne.w	80068b8 <__aeabi_dmul+0x19c>
 8006b2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006b32:	f47f af0d 	bne.w	8006950 <__aeabi_dmul+0x234>
 8006b36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b3a:	f47f aeeb 	bne.w	8006914 <__aeabi_dmul+0x1f8>
 8006b3e:	e712      	b.n	8006966 <__aeabi_dmul+0x24a>

08006b40 <__gedf2>:
 8006b40:	f04f 3cff 	mov.w	ip, #4294967295
 8006b44:	e006      	b.n	8006b54 <__cmpdf2+0x4>
 8006b46:	bf00      	nop

08006b48 <__ledf2>:
 8006b48:	f04f 0c01 	mov.w	ip, #1
 8006b4c:	e002      	b.n	8006b54 <__cmpdf2+0x4>
 8006b4e:	bf00      	nop

08006b50 <__cmpdf2>:
 8006b50:	f04f 0c01 	mov.w	ip, #1
 8006b54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b64:	bf18      	it	ne
 8006b66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b6a:	d01b      	beq.n	8006ba4 <__cmpdf2+0x54>
 8006b6c:	b001      	add	sp, #4
 8006b6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b72:	bf0c      	ite	eq
 8006b74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b78:	ea91 0f03 	teqne	r1, r3
 8006b7c:	bf02      	ittt	eq
 8006b7e:	ea90 0f02 	teqeq	r0, r2
 8006b82:	2000      	moveq	r0, #0
 8006b84:	4770      	bxeq	lr
 8006b86:	f110 0f00 	cmn.w	r0, #0
 8006b8a:	ea91 0f03 	teq	r1, r3
 8006b8e:	bf58      	it	pl
 8006b90:	4299      	cmppl	r1, r3
 8006b92:	bf08      	it	eq
 8006b94:	4290      	cmpeq	r0, r2
 8006b96:	bf2c      	ite	cs
 8006b98:	17d8      	asrcs	r0, r3, #31
 8006b9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b9e:	f040 0001 	orr.w	r0, r0, #1
 8006ba2:	4770      	bx	lr
 8006ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006bac:	d102      	bne.n	8006bb4 <__cmpdf2+0x64>
 8006bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006bb2:	d107      	bne.n	8006bc4 <__cmpdf2+0x74>
 8006bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006bbc:	d1d6      	bne.n	8006b6c <__cmpdf2+0x1c>
 8006bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006bc2:	d0d3      	beq.n	8006b6c <__cmpdf2+0x1c>
 8006bc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop

08006bcc <__aeabi_cdrcmple>:
 8006bcc:	4684      	mov	ip, r0
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4662      	mov	r2, ip
 8006bd2:	468c      	mov	ip, r1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4663      	mov	r3, ip
 8006bd8:	e000      	b.n	8006bdc <__aeabi_cdcmpeq>
 8006bda:	bf00      	nop

08006bdc <__aeabi_cdcmpeq>:
 8006bdc:	b501      	push	{r0, lr}
 8006bde:	f7ff ffb7 	bl	8006b50 <__cmpdf2>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	bf48      	it	mi
 8006be6:	f110 0f00 	cmnmi.w	r0, #0
 8006bea:	bd01      	pop	{r0, pc}

08006bec <__aeabi_dcmpeq>:
 8006bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bf0:	f7ff fff4 	bl	8006bdc <__aeabi_cdcmpeq>
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2001      	moveq	r0, #1
 8006bf8:	2000      	movne	r0, #0
 8006bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bfe:	bf00      	nop

08006c00 <__aeabi_dcmplt>:
 8006c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c04:	f7ff ffea 	bl	8006bdc <__aeabi_cdcmpeq>
 8006c08:	bf34      	ite	cc
 8006c0a:	2001      	movcc	r0, #1
 8006c0c:	2000      	movcs	r0, #0
 8006c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c12:	bf00      	nop

08006c14 <__aeabi_dcmple>:
 8006c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c18:	f7ff ffe0 	bl	8006bdc <__aeabi_cdcmpeq>
 8006c1c:	bf94      	ite	ls
 8006c1e:	2001      	movls	r0, #1
 8006c20:	2000      	movhi	r0, #0
 8006c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c26:	bf00      	nop

08006c28 <__aeabi_dcmpge>:
 8006c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c2c:	f7ff ffce 	bl	8006bcc <__aeabi_cdrcmple>
 8006c30:	bf94      	ite	ls
 8006c32:	2001      	movls	r0, #1
 8006c34:	2000      	movhi	r0, #0
 8006c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c3a:	bf00      	nop

08006c3c <__aeabi_dcmpgt>:
 8006c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c40:	f7ff ffc4 	bl	8006bcc <__aeabi_cdrcmple>
 8006c44:	bf34      	ite	cc
 8006c46:	2001      	movcc	r0, #1
 8006c48:	2000      	movcs	r0, #0
 8006c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c4e:	bf00      	nop

08006c50 <__aeabi_dcmpun>:
 8006c50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c58:	d102      	bne.n	8006c60 <__aeabi_dcmpun+0x10>
 8006c5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c5e:	d10a      	bne.n	8006c76 <__aeabi_dcmpun+0x26>
 8006c60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c68:	d102      	bne.n	8006c70 <__aeabi_dcmpun+0x20>
 8006c6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c6e:	d102      	bne.n	8006c76 <__aeabi_dcmpun+0x26>
 8006c70:	f04f 0000 	mov.w	r0, #0
 8006c74:	4770      	bx	lr
 8006c76:	f04f 0001 	mov.w	r0, #1
 8006c7a:	4770      	bx	lr

08006c7c <__aeabi_d2iz>:
 8006c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c84:	d215      	bcs.n	8006cb2 <__aeabi_d2iz+0x36>
 8006c86:	d511      	bpl.n	8006cac <__aeabi_d2iz+0x30>
 8006c88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c90:	d912      	bls.n	8006cb8 <__aeabi_d2iz+0x3c>
 8006c92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006ca2:	fa23 f002 	lsr.w	r0, r3, r2
 8006ca6:	bf18      	it	ne
 8006ca8:	4240      	negne	r0, r0
 8006caa:	4770      	bx	lr
 8006cac:	f04f 0000 	mov.w	r0, #0
 8006cb0:	4770      	bx	lr
 8006cb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cb6:	d105      	bne.n	8006cc4 <__aeabi_d2iz+0x48>
 8006cb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006cbc:	bf08      	it	eq
 8006cbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006cc2:	4770      	bx	lr
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <__aeabi_d2uiz>:
 8006ccc:	004a      	lsls	r2, r1, #1
 8006cce:	d211      	bcs.n	8006cf4 <__aeabi_d2uiz+0x28>
 8006cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006cd4:	d211      	bcs.n	8006cfa <__aeabi_d2uiz+0x2e>
 8006cd6:	d50d      	bpl.n	8006cf4 <__aeabi_d2uiz+0x28>
 8006cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ce0:	d40e      	bmi.n	8006d00 <__aeabi_d2uiz+0x34>
 8006ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cee:	fa23 f002 	lsr.w	r0, r3, r2
 8006cf2:	4770      	bx	lr
 8006cf4:	f04f 0000 	mov.w	r0, #0
 8006cf8:	4770      	bx	lr
 8006cfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cfe:	d102      	bne.n	8006d06 <__aeabi_d2uiz+0x3a>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	4770      	bx	lr
 8006d06:	f04f 0000 	mov.w	r0, #0
 8006d0a:	4770      	bx	lr

08006d0c <__aeabi_d2f>:
 8006d0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006d10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006d14:	bf24      	itt	cs
 8006d16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006d1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006d1e:	d90d      	bls.n	8006d3c <__aeabi_d2f+0x30>
 8006d20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006d24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006d28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006d2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006d30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006d34:	bf08      	it	eq
 8006d36:	f020 0001 	biceq.w	r0, r0, #1
 8006d3a:	4770      	bx	lr
 8006d3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d40:	d121      	bne.n	8006d86 <__aeabi_d2f+0x7a>
 8006d42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d46:	bfbc      	itt	lt
 8006d48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d4c:	4770      	bxlt	lr
 8006d4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d56:	f1c2 0218 	rsb	r2, r2, #24
 8006d5a:	f1c2 0c20 	rsb	ip, r2, #32
 8006d5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d62:	fa20 f002 	lsr.w	r0, r0, r2
 8006d66:	bf18      	it	ne
 8006d68:	f040 0001 	orrne.w	r0, r0, #1
 8006d6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d78:	ea40 000c 	orr.w	r0, r0, ip
 8006d7c:	fa23 f302 	lsr.w	r3, r3, r2
 8006d80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d84:	e7cc      	b.n	8006d20 <__aeabi_d2f+0x14>
 8006d86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006d8a:	d107      	bne.n	8006d9c <__aeabi_d2f+0x90>
 8006d8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006d90:	bf1e      	ittt	ne
 8006d92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006d96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006d9a:	4770      	bxne	lr
 8006d9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006da0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <__aeabi_d2lz>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4605      	mov	r5, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	4628      	mov	r0, r5
 8006db8:	4621      	mov	r1, r4
 8006dba:	f7ff ff21 	bl	8006c00 <__aeabi_dcmplt>
 8006dbe:	b928      	cbnz	r0, 8006dcc <__aeabi_d2lz+0x20>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc8:	f000 b80a 	b.w	8006de0 <__aeabi_d2ulz>
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8006dd2:	f000 f805 	bl	8006de0 <__aeabi_d2ulz>
 8006dd6:	4240      	negs	r0, r0
 8006dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
 8006dde:	bf00      	nop

08006de0 <__aeabi_d2ulz>:
 8006de0:	b5d0      	push	{r4, r6, r7, lr}
 8006de2:	2200      	movs	r2, #0
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <__aeabi_d2ulz+0x34>)
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	f7ff fc97 	bl	800671c <__aeabi_dmul>
 8006dee:	f7ff ff6d 	bl	8006ccc <__aeabi_d2uiz>
 8006df2:	4604      	mov	r4, r0
 8006df4:	f7ff fc18 	bl	8006628 <__aeabi_ui2d>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <__aeabi_d2ulz+0x38>)
 8006dfc:	f7ff fc8e 	bl	800671c <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7ff fad0 	bl	80063ac <__aeabi_dsub>
 8006e0c:	f7ff ff5e 	bl	8006ccc <__aeabi_d2uiz>
 8006e10:	4621      	mov	r1, r4
 8006e12:	bdd0      	pop	{r4, r6, r7, pc}
 8006e14:	3df00000 	.word	0x3df00000
 8006e18:	41f00000 	.word	0x41f00000

08006e1c <__aeabi_fmul>:
 8006e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006e24:	bf1e      	ittt	ne
 8006e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006e2a:	ea92 0f0c 	teqne	r2, ip
 8006e2e:	ea93 0f0c 	teqne	r3, ip
 8006e32:	d06f      	beq.n	8006f14 <__aeabi_fmul+0xf8>
 8006e34:	441a      	add	r2, r3
 8006e36:	ea80 0c01 	eor.w	ip, r0, r1
 8006e3a:	0240      	lsls	r0, r0, #9
 8006e3c:	bf18      	it	ne
 8006e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8006e42:	d01e      	beq.n	8006e82 <__aeabi_fmul+0x66>
 8006e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006e50:	fba0 3101 	umull	r3, r1, r0, r1
 8006e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006e5c:	bf3e      	ittt	cc
 8006e5e:	0049      	lslcc	r1, r1, #1
 8006e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8006e64:	005b      	lslcc	r3, r3, #1
 8006e66:	ea40 0001 	orr.w	r0, r0, r1
 8006e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006e6e:	2afd      	cmp	r2, #253	; 0xfd
 8006e70:	d81d      	bhi.n	8006eae <__aeabi_fmul+0x92>
 8006e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006e7a:	bf08      	it	eq
 8006e7c:	f020 0001 	biceq.w	r0, r0, #1
 8006e80:	4770      	bx	lr
 8006e82:	f090 0f00 	teq	r0, #0
 8006e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006e8a:	bf08      	it	eq
 8006e8c:	0249      	lsleq	r1, r1, #9
 8006e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8006e96:	3a7f      	subs	r2, #127	; 0x7f
 8006e98:	bfc2      	ittt	gt
 8006e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006ea2:	4770      	bxgt	lr
 8006ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	3a01      	subs	r2, #1
 8006eae:	dc5d      	bgt.n	8006f6c <__aeabi_fmul+0x150>
 8006eb0:	f112 0f19 	cmn.w	r2, #25
 8006eb4:	bfdc      	itt	le
 8006eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006eba:	4770      	bxle	lr
 8006ebc:	f1c2 0200 	rsb	r2, r2, #0
 8006ec0:	0041      	lsls	r1, r0, #1
 8006ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8006ec6:	f1c2 0220 	rsb	r2, r2, #32
 8006eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8006ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8006ed2:	f140 0000 	adc.w	r0, r0, #0
 8006ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006eda:	bf08      	it	eq
 8006edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006ee0:	4770      	bx	lr
 8006ee2:	f092 0f00 	teq	r2, #0
 8006ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006eea:	bf02      	ittt	eq
 8006eec:	0040      	lsleq	r0, r0, #1
 8006eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006ef2:	3a01      	subeq	r2, #1
 8006ef4:	d0f9      	beq.n	8006eea <__aeabi_fmul+0xce>
 8006ef6:	ea40 000c 	orr.w	r0, r0, ip
 8006efa:	f093 0f00 	teq	r3, #0
 8006efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006f02:	bf02      	ittt	eq
 8006f04:	0049      	lsleq	r1, r1, #1
 8006f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006f0a:	3b01      	subeq	r3, #1
 8006f0c:	d0f9      	beq.n	8006f02 <__aeabi_fmul+0xe6>
 8006f0e:	ea41 010c 	orr.w	r1, r1, ip
 8006f12:	e78f      	b.n	8006e34 <__aeabi_fmul+0x18>
 8006f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006f18:	ea92 0f0c 	teq	r2, ip
 8006f1c:	bf18      	it	ne
 8006f1e:	ea93 0f0c 	teqne	r3, ip
 8006f22:	d00a      	beq.n	8006f3a <__aeabi_fmul+0x11e>
 8006f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006f28:	bf18      	it	ne
 8006f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006f2e:	d1d8      	bne.n	8006ee2 <__aeabi_fmul+0xc6>
 8006f30:	ea80 0001 	eor.w	r0, r0, r1
 8006f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006f38:	4770      	bx	lr
 8006f3a:	f090 0f00 	teq	r0, #0
 8006f3e:	bf17      	itett	ne
 8006f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006f44:	4608      	moveq	r0, r1
 8006f46:	f091 0f00 	teqne	r1, #0
 8006f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006f4e:	d014      	beq.n	8006f7a <__aeabi_fmul+0x15e>
 8006f50:	ea92 0f0c 	teq	r2, ip
 8006f54:	d101      	bne.n	8006f5a <__aeabi_fmul+0x13e>
 8006f56:	0242      	lsls	r2, r0, #9
 8006f58:	d10f      	bne.n	8006f7a <__aeabi_fmul+0x15e>
 8006f5a:	ea93 0f0c 	teq	r3, ip
 8006f5e:	d103      	bne.n	8006f68 <__aeabi_fmul+0x14c>
 8006f60:	024b      	lsls	r3, r1, #9
 8006f62:	bf18      	it	ne
 8006f64:	4608      	movne	r0, r1
 8006f66:	d108      	bne.n	8006f7a <__aeabi_fmul+0x15e>
 8006f68:	ea80 0001 	eor.w	r0, r0, r1
 8006f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006f78:	4770      	bx	lr
 8006f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006f82:	4770      	bx	lr

08006f84 <__aeabi_frsub>:
 8006f84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006f88:	e002      	b.n	8006f90 <__addsf3>
 8006f8a:	bf00      	nop

08006f8c <__aeabi_fsub>:
 8006f8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006f90 <__addsf3>:
 8006f90:	0042      	lsls	r2, r0, #1
 8006f92:	bf1f      	itttt	ne
 8006f94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006f98:	ea92 0f03 	teqne	r2, r3
 8006f9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006fa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006fa4:	d06a      	beq.n	800707c <__addsf3+0xec>
 8006fa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006faa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006fae:	bfc1      	itttt	gt
 8006fb0:	18d2      	addgt	r2, r2, r3
 8006fb2:	4041      	eorgt	r1, r0
 8006fb4:	4048      	eorgt	r0, r1
 8006fb6:	4041      	eorgt	r1, r0
 8006fb8:	bfb8      	it	lt
 8006fba:	425b      	neglt	r3, r3
 8006fbc:	2b19      	cmp	r3, #25
 8006fbe:	bf88      	it	hi
 8006fc0:	4770      	bxhi	lr
 8006fc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8006fc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006fca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006fce:	bf18      	it	ne
 8006fd0:	4240      	negne	r0, r0
 8006fd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006fd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006fda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006fde:	bf18      	it	ne
 8006fe0:	4249      	negne	r1, r1
 8006fe2:	ea92 0f03 	teq	r2, r3
 8006fe6:	d03f      	beq.n	8007068 <__addsf3+0xd8>
 8006fe8:	f1a2 0201 	sub.w	r2, r2, #1
 8006fec:	fa41 fc03 	asr.w	ip, r1, r3
 8006ff0:	eb10 000c 	adds.w	r0, r0, ip
 8006ff4:	f1c3 0320 	rsb	r3, r3, #32
 8006ff8:	fa01 f103 	lsl.w	r1, r1, r3
 8006ffc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007000:	d502      	bpl.n	8007008 <__addsf3+0x78>
 8007002:	4249      	negs	r1, r1
 8007004:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007008:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800700c:	d313      	bcc.n	8007036 <__addsf3+0xa6>
 800700e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007012:	d306      	bcc.n	8007022 <__addsf3+0x92>
 8007014:	0840      	lsrs	r0, r0, #1
 8007016:	ea4f 0131 	mov.w	r1, r1, rrx
 800701a:	f102 0201 	add.w	r2, r2, #1
 800701e:	2afe      	cmp	r2, #254	; 0xfe
 8007020:	d251      	bcs.n	80070c6 <__addsf3+0x136>
 8007022:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007026:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800702a:	bf08      	it	eq
 800702c:	f020 0001 	biceq.w	r0, r0, #1
 8007030:	ea40 0003 	orr.w	r0, r0, r3
 8007034:	4770      	bx	lr
 8007036:	0049      	lsls	r1, r1, #1
 8007038:	eb40 0000 	adc.w	r0, r0, r0
 800703c:	3a01      	subs	r2, #1
 800703e:	bf28      	it	cs
 8007040:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007044:	d2ed      	bcs.n	8007022 <__addsf3+0x92>
 8007046:	fab0 fc80 	clz	ip, r0
 800704a:	f1ac 0c08 	sub.w	ip, ip, #8
 800704e:	ebb2 020c 	subs.w	r2, r2, ip
 8007052:	fa00 f00c 	lsl.w	r0, r0, ip
 8007056:	bfaa      	itet	ge
 8007058:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800705c:	4252      	neglt	r2, r2
 800705e:	4318      	orrge	r0, r3
 8007060:	bfbc      	itt	lt
 8007062:	40d0      	lsrlt	r0, r2
 8007064:	4318      	orrlt	r0, r3
 8007066:	4770      	bx	lr
 8007068:	f092 0f00 	teq	r2, #0
 800706c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007070:	bf06      	itte	eq
 8007072:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007076:	3201      	addeq	r2, #1
 8007078:	3b01      	subne	r3, #1
 800707a:	e7b5      	b.n	8006fe8 <__addsf3+0x58>
 800707c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007084:	bf18      	it	ne
 8007086:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800708a:	d021      	beq.n	80070d0 <__addsf3+0x140>
 800708c:	ea92 0f03 	teq	r2, r3
 8007090:	d004      	beq.n	800709c <__addsf3+0x10c>
 8007092:	f092 0f00 	teq	r2, #0
 8007096:	bf08      	it	eq
 8007098:	4608      	moveq	r0, r1
 800709a:	4770      	bx	lr
 800709c:	ea90 0f01 	teq	r0, r1
 80070a0:	bf1c      	itt	ne
 80070a2:	2000      	movne	r0, #0
 80070a4:	4770      	bxne	lr
 80070a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80070aa:	d104      	bne.n	80070b6 <__addsf3+0x126>
 80070ac:	0040      	lsls	r0, r0, #1
 80070ae:	bf28      	it	cs
 80070b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80070b4:	4770      	bx	lr
 80070b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80070ba:	bf3c      	itt	cc
 80070bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80070c0:	4770      	bxcc	lr
 80070c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80070c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80070ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80070ce:	4770      	bx	lr
 80070d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80070d4:	bf16      	itet	ne
 80070d6:	4608      	movne	r0, r1
 80070d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80070dc:	4601      	movne	r1, r0
 80070de:	0242      	lsls	r2, r0, #9
 80070e0:	bf06      	itte	eq
 80070e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80070e6:	ea90 0f01 	teqeq	r0, r1
 80070ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80070ee:	4770      	bx	lr

080070f0 <__aeabi_ui2f>:
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e004      	b.n	8007100 <__aeabi_i2f+0x8>
 80070f6:	bf00      	nop

080070f8 <__aeabi_i2f>:
 80070f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80070fc:	bf48      	it	mi
 80070fe:	4240      	negmi	r0, r0
 8007100:	ea5f 0c00 	movs.w	ip, r0
 8007104:	bf08      	it	eq
 8007106:	4770      	bxeq	lr
 8007108:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800710c:	4601      	mov	r1, r0
 800710e:	f04f 0000 	mov.w	r0, #0
 8007112:	e01c      	b.n	800714e <__aeabi_l2f+0x2a>

08007114 <__aeabi_ul2f>:
 8007114:	ea50 0201 	orrs.w	r2, r0, r1
 8007118:	bf08      	it	eq
 800711a:	4770      	bxeq	lr
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e00a      	b.n	8007138 <__aeabi_l2f+0x14>
 8007122:	bf00      	nop

08007124 <__aeabi_l2f>:
 8007124:	ea50 0201 	orrs.w	r2, r0, r1
 8007128:	bf08      	it	eq
 800712a:	4770      	bxeq	lr
 800712c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007130:	d502      	bpl.n	8007138 <__aeabi_l2f+0x14>
 8007132:	4240      	negs	r0, r0
 8007134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007138:	ea5f 0c01 	movs.w	ip, r1
 800713c:	bf02      	ittt	eq
 800713e:	4684      	moveq	ip, r0
 8007140:	4601      	moveq	r1, r0
 8007142:	2000      	moveq	r0, #0
 8007144:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007148:	bf08      	it	eq
 800714a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800714e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007152:	fabc f28c 	clz	r2, ip
 8007156:	3a08      	subs	r2, #8
 8007158:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800715c:	db10      	blt.n	8007180 <__aeabi_l2f+0x5c>
 800715e:	fa01 fc02 	lsl.w	ip, r1, r2
 8007162:	4463      	add	r3, ip
 8007164:	fa00 fc02 	lsl.w	ip, r0, r2
 8007168:	f1c2 0220 	rsb	r2, r2, #32
 800716c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007170:	fa20 f202 	lsr.w	r2, r0, r2
 8007174:	eb43 0002 	adc.w	r0, r3, r2
 8007178:	bf08      	it	eq
 800717a:	f020 0001 	biceq.w	r0, r0, #1
 800717e:	4770      	bx	lr
 8007180:	f102 0220 	add.w	r2, r2, #32
 8007184:	fa01 fc02 	lsl.w	ip, r1, r2
 8007188:	f1c2 0220 	rsb	r2, r2, #32
 800718c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007190:	fa21 f202 	lsr.w	r2, r1, r2
 8007194:	eb43 0002 	adc.w	r0, r3, r2
 8007198:	bf08      	it	eq
 800719a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800719e:	4770      	bx	lr

080071a0 <__aeabi_f2uiz>:
 80071a0:	0042      	lsls	r2, r0, #1
 80071a2:	d20e      	bcs.n	80071c2 <__aeabi_f2uiz+0x22>
 80071a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80071a8:	d30b      	bcc.n	80071c2 <__aeabi_f2uiz+0x22>
 80071aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80071ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80071b2:	d409      	bmi.n	80071c8 <__aeabi_f2uiz+0x28>
 80071b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80071b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	fa23 f002 	lsr.w	r0, r3, r2
 80071c0:	4770      	bx	lr
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	4770      	bx	lr
 80071c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80071cc:	d101      	bne.n	80071d2 <__aeabi_f2uiz+0x32>
 80071ce:	0242      	lsls	r2, r0, #9
 80071d0:	d102      	bne.n	80071d8 <__aeabi_f2uiz+0x38>
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	4770      	bx	lr
 80071d8:	f04f 0000 	mov.w	r0, #0
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop

080071e0 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071e0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071e4:	4859      	ldr	r0, [pc, #356]	; (800734c <main+0x16c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071e6:	495a      	ldr	r1, [pc, #360]	; (8007350 <main+0x170>)
 80071e8:	6802      	ldr	r2, [r0, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071ea:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80071ee:	f042 0210 	orr.w	r2, r2, #16
 80071f2:	6002      	str	r2, [r0, #0]
 80071f4:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 80071f6:	4b57      	ldr	r3, [pc, #348]	; (8007354 <main+0x174>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071f8:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                   |
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b0a5      	sub	sp, #148	; 0x94
  SCB->AIRCR =  reg_value;
 80071fe:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8007200:	200f      	movs	r0, #15
 8007202:	f7fc fee5 	bl	8003fd0 <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007206:	4b54      	ldr	r3, [pc, #336]	; (8007358 <main+0x178>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007208:	4954      	ldr	r1, [pc, #336]	; (800735c <main+0x17c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	619a      	str	r2, [r3, #24]
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	f002 0201 	and.w	r2, r2, #1
 8007218:	9211      	str	r2, [sp, #68]	; 0x44
 800721a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_PWR_CLK_ENABLE();
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007222:	61da      	str	r2, [r3, #28]
 8007224:	69da      	ldr	r2, [r3, #28]
 8007226:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800722a:	9210      	str	r2, [sp, #64]	; 0x40
 800722c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800722e:	684a      	ldr	r2, [r1, #4]
 8007230:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007234:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007238:	604a      	str	r2, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	f002 020c 	and.w	r2, r2, #12
 8007240:	2a04      	cmp	r2, #4
 8007242:	d062      	beq.n	800730a <main+0x12a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	f002 020c 	and.w	r2, r2, #12
 800724a:	2a08      	cmp	r2, #8
 800724c:	d05a      	beq.n	8007304 <main+0x124>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800724e:	4a42      	ldr	r2, [pc, #264]	; (8007358 <main+0x178>)
  return uwTick;
 8007250:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8007360 <main+0x180>
 8007254:	6813      	ldr	r3, [r2, #0]
 8007256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007260:	e004      	b.n	800726c <main+0x8c>
 8007262:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007266:	1a5b      	subs	r3, r3, r1
 8007268:	2b64      	cmp	r3, #100	; 0x64
 800726a:	d849      	bhi.n	8007300 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	039f      	lsls	r7, r3, #14
 8007270:	d5f7      	bpl.n	8007262 <main+0x82>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007272:	4a39      	ldr	r2, [pc, #228]	; (8007358 <main+0x178>)
 8007274:	6853      	ldr	r3, [r2, #4]
 8007276:	f003 030c 	and.w	r3, r3, #12
 800727a:	2b08      	cmp	r3, #8
 800727c:	d038      	beq.n	80072f0 <main+0x110>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800727e:	2100      	movs	r1, #0
 8007280:	4b38      	ldr	r3, [pc, #224]	; (8007364 <main+0x184>)
 8007282:	6619      	str	r1, [r3, #96]	; 0x60
 8007284:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007288:	e004      	b.n	8007294 <main+0xb4>
 800728a:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728e:	1a5b      	subs	r3, r3, r1
 8007290:	2b02      	cmp	r3, #2
 8007292:	d835      	bhi.n	8007300 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	019e      	lsls	r6, r3, #6
 8007298:	d4f7      	bmi.n	800728a <main+0xaa>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800729a:	2001      	movs	r0, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800729c:	6853      	ldr	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800729e:	4931      	ldr	r1, [pc, #196]	; (8007364 <main+0x184>)
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072a4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072a6:	6853      	ldr	r3, [r2, #4]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a8:	4c2b      	ldr	r4, [pc, #172]	; (8007358 <main+0x178>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072aa:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80072ae:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80072b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80072b4:	6608      	str	r0, [r1, #96]	; 0x60
 80072b6:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072ba:	e004      	b.n	80072c6 <main+0xe6>
 80072bc:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d81c      	bhi.n	8007300 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	019d      	lsls	r5, r3, #6
 80072ca:	d5f7      	bpl.n	80072bc <main+0xdc>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072cc:	4b1f      	ldr	r3, [pc, #124]	; (800734c <main+0x16c>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	f012 0f06 	tst.w	r2, #6
 80072d4:	d11e      	bne.n	8007314 <main+0x134>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	f022 0207 	bic.w	r2, r2, #7
 80072dc:	f042 0202 	orr.w	r2, r2, #2
 80072e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d013      	beq.n	8007314 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 80072ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80072ee:	e7fe      	b.n	80072ee <main+0x10e>
        pll_config = RCC->CFGR;
 80072f0:	6853      	ldr	r3, [r2, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f2:	03d8      	lsls	r0, r3, #15
 80072f4:	d504      	bpl.n	8007300 <main+0x120>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80072f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80072fe:	d0e5      	beq.n	80072cc <main+0xec>
 8007300:	b672      	cpsid	i
 8007302:	e7fe      	b.n	8007302 <main+0x122>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	03db      	lsls	r3, r3, #15
 8007308:	d5a1      	bpl.n	800724e <main+0x6e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800730a:	4b13      	ldr	r3, [pc, #76]	; (8007358 <main+0x178>)
 800730c:	f8df b050 	ldr.w	fp, [pc, #80]	; 8007360 <main+0x180>
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	e7ae      	b.n	8007272 <main+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007314:	4a10      	ldr	r2, [pc, #64]	; (8007358 <main+0x178>)
 8007316:	6853      	ldr	r3, [r2, #4]
 8007318:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800731c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800731e:	6853      	ldr	r3, [r2, #4]
 8007320:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007324:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007326:	6853      	ldr	r3, [r2, #4]
 8007328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732c:	6053      	str	r3, [r2, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	0199      	lsls	r1, r3, #6
 8007332:	d5db      	bpl.n	80072ec <main+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007334:	6853      	ldr	r3, [r2, #4]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007336:	f241 3088 	movw	r0, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	6053      	str	r3, [r2, #4]
 8007344:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007348:	e013      	b.n	8007372 <main+0x192>
 800734a:	bf00      	nop
 800734c:	40022000 	.word	0x40022000
 8007350:	e000ed00 	.word	0xe000ed00
 8007354:	05fa0300 	.word	0x05fa0300
 8007358:	40021000 	.word	0x40021000
 800735c:	40010000 	.word	0x40010000
 8007360:	20000200 	.word	0x20000200
 8007364:	42420000 	.word	0x42420000
 8007368:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800736c:	1a5b      	subs	r3, r3, r1
 800736e:	4283      	cmp	r3, r0
 8007370:	d8bc      	bhi.n	80072ec <main+0x10c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007372:	6853      	ldr	r3, [r2, #4]
 8007374:	f003 030c 	and.w	r3, r3, #12
 8007378:	2b08      	cmp	r3, #8
 800737a:	d1f5      	bne.n	8007368 <main+0x188>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4ab2      	ldr	r2, [pc, #712]	; (8007648 <main+0x468>)
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	2b02      	cmp	r3, #2
 8007386:	d90a      	bls.n	800739e <main+0x1be>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007388:	6813      	ldr	r3, [r2, #0]
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	f043 0302 	orr.w	r3, r3, #2
 8007392:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007394:	6813      	ldr	r3, [r2, #0]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b02      	cmp	r3, #2
 800739c:	d1a6      	bne.n	80072ec <main+0x10c>

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800739e:	4cab      	ldr	r4, [pc, #684]	; (800764c <main+0x46c>)
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073a0:	4aab      	ldr	r2, [pc, #684]	; (8007650 <main+0x470>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a2:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073a4:	ad1e      	add	r5, sp, #120	; 0x78
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073ae:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80073b6:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073b8:	f240 2301 	movw	r3, #513	; 0x201
 80073bc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073c0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80073c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80073c6:	6863      	ldr	r3, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073c8:	f003 020c 	and.w	r2, r3, #12
 80073cc:	2a08      	cmp	r2, #8
 80073ce:	f001 8357 	beq.w	8008a80 <main+0x18a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073d2:	4ea0      	ldr	r6, [pc, #640]	; (8007654 <main+0x474>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d4:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073d6:	4c9d      	ldr	r4, [pc, #628]	; (800764c <main+0x46c>)
 80073d8:	4a9f      	ldr	r2, [pc, #636]	; (8007658 <main+0x478>)
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	4f9f      	ldr	r7, [pc, #636]	; (800765c <main+0x47c>)
 80073de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80073e2:	4413      	add	r3, r2
 80073e4:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80073e8:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8007660 <main+0x480>
 80073ec:	40de      	lsrs	r6, r3
 80073ee:	4b9d      	ldr	r3, [pc, #628]	; (8007664 <main+0x484>)
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80073f0:	f04f 0900 	mov.w	r9, #0
  HAL_InitTick(uwTickPrio);
 80073f4:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073f6:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80073f8:	f7fc fdea 	bl	8003fd0 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fc:	9520      	str	r5, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fe:	69a3      	ldr	r3, [r4, #24]
 8007400:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007404:	f043 0310 	orr.w	r3, r3, #16
 8007408:	61a3      	str	r3, [r4, #24]
 800740a:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800740c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	930f      	str	r3, [sp, #60]	; 0x3c
 8007414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	4893      	ldr	r0, [pc, #588]	; (8007668 <main+0x488>)
 800741a:	f043 0320 	orr.w	r3, r3, #32
 800741e:	61a3      	str	r3, [r4, #24]
 8007420:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8007422:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	930e      	str	r3, [sp, #56]	; 0x38
 800742c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800742e:	69a3      	ldr	r3, [r4, #24]
 8007430:	f043 0304 	orr.w	r3, r3, #4
 8007434:	61a3      	str	r3, [r4, #24]
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	930d      	str	r3, [sp, #52]	; 0x34
 800743e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007440:	69a3      	ldr	r3, [r4, #24]
 8007442:	f043 0308 	orr.w	r3, r3, #8
 8007446:	61a3      	str	r3, [r4, #24]
 8007448:	69a3      	ldr	r3, [r4, #24]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	930c      	str	r3, [sp, #48]	; 0x30
 8007450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007452:	4b86      	ldr	r3, [pc, #536]	; (800766c <main+0x48c>)
 8007454:	6103      	str	r3, [r0, #16]
 8007456:	4b86      	ldr	r3, [pc, #536]	; (8007670 <main+0x490>)
 8007458:	f8c8 1010 	str.w	r1, [r8, #16]
 800745c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin = LED_Pin;
 800745e:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007460:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = LED_Pin;
 8007462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007466:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = LED_Pin;
 8007468:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800746c:	f7fa f822 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8007470:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8007474:	2301      	movs	r3, #1
 8007476:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
 800747a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800747e:	f7fa f819 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8007482:	22ff      	movs	r2, #255	; 0xff
 8007484:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007486:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8007488:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800748c:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007490:	f7fa f810 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8007494:	f640 4203 	movw	r2, #3075	; 0xc03
 8007498:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800749a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 800749c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80074a0:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074a4:	f7fa f806 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 80074a8:	2300      	movs	r3, #0
 80074aa:	2204      	movs	r2, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ac:	9520      	str	r5, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 80074ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80074b2:	f7f9 ffff 	bl	80014b4 <HAL_GPIO_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80074ba:	4f6e      	ldr	r7, [pc, #440]	; (8007674 <main+0x494>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074bc:	f8cb 3010 	str.w	r3, [fp, #16]
  hi2c1.Init.ClockSpeed = 400000;
 80074c0:	4b6d      	ldr	r3, [pc, #436]	; (8007678 <main+0x498>)
  hi2c1.Init.OwnAddress1 = 0;
 80074c2:	e9cb 5502 	strd	r5, r5, [fp, #8]
  hi2c1.Init.ClockSpeed = 400000;
 80074c6:	e9cb 7300 	strd	r7, r3, [fp]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074ca:	f89b 303d 	ldrb.w	r3, [fp, #61]	; 0x3d
  hi2c1.Init.OwnAddress2 = 0;
 80074ce:	e9cb 5505 	strd	r5, r5, [fp, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80074d2:	e9cb 5507 	strd	r5, r5, [fp, #28]
 80074d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f001 82f0 	beq.w	8008ac0 <main+0x18e0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074e0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80074e2:	f8db 0000 	ldr.w	r0, [fp]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074e6:	f88b 303d 	strb.w	r3, [fp, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80074ea:	6803      	ldr	r3, [r0, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074ec:	4a57      	ldr	r2, [pc, #348]	; (800764c <main+0x46c>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	6003      	str	r3, [r0, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074f4:	6803      	ldr	r3, [r0, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074f6:	f8db 5004 	ldr.w	r5, [fp, #4]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fe:	6003      	str	r3, [r0, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007500:	6803      	ldr	r3, [r0, #0]
 8007502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007506:	6003      	str	r3, [r0, #0]
 8007508:	6853      	ldr	r3, [r2, #4]
 800750a:	4a53      	ldr	r2, [pc, #332]	; (8007658 <main+0x478>)
 800750c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007510:	4413      	add	r3, r2
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007512:	4a5a      	ldr	r2, [pc, #360]	; (800767c <main+0x49c>)
 8007514:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8007518:	4295      	cmp	r5, r2
 800751a:	bf94      	ite	ls
 800751c:	4a58      	ldrls	r2, [pc, #352]	; (8007680 <main+0x4a0>)
 800751e:	4a59      	ldrhi	r2, [pc, #356]	; (8007684 <main+0x4a4>)
 8007520:	fa26 f303 	lsr.w	r3, r6, r3
 8007524:	4293      	cmp	r3, r2
 8007526:	bf8c      	ite	hi
 8007528:	2200      	movhi	r2, #0
 800752a:	2201      	movls	r2, #1
 800752c:	2a00      	cmp	r2, #0
 800752e:	f041 82a5 	bne.w	8008a7c <main+0x189c>
  freqrange = I2C_FREQRANGE(pclk1);
 8007532:	4a55      	ldr	r2, [pc, #340]	; (8007688 <main+0x4a8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007534:	6841      	ldr	r1, [r0, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8007536:	fbb3 f2f2 	udiv	r2, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800753a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800753e:	4311      	orrs	r1, r2
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007540:	4c4e      	ldr	r4, [pc, #312]	; (800767c <main+0x49c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007542:	6041      	str	r1, [r0, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007544:	6a01      	ldr	r1, [r0, #32]
 8007546:	42a5      	cmp	r5, r4
 8007548:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800754c:	f201 8327 	bhi.w	8008b9e <main+0x19be>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007550:	3b01      	subs	r3, #1
 8007552:	006d      	lsls	r5, r5, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007554:	3201      	adds	r2, #1
 8007556:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007558:	fbb3 f3f5 	udiv	r3, r3, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800755c:	6202      	str	r2, [r0, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800755e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8007562:	69c1      	ldr	r1, [r0, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800756a:	4213      	tst	r3, r2
 800756c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007570:	f041 8356 	bne.w	8008c20 <main+0x1a40>
 8007574:	2304      	movs	r3, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007576:	2400      	movs	r4, #0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007578:	430b      	orrs	r3, r1
  hi2c->State = HAL_I2C_STATE_READY;
 800757a:	2120      	movs	r1, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800757c:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800757e:	6805      	ldr	r5, [r0, #0]
 8007580:	e9db 3207 	ldrd	r3, r2, [fp, #28]
 8007584:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8007588:	4313      	orrs	r3, r2
 800758a:	432b      	orrs	r3, r5
 800758c:	6003      	str	r3, [r0, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800758e:	6885      	ldr	r5, [r0, #8]
 8007590:	e9db 2303 	ldrd	r2, r3, [fp, #12]
 8007594:	f425 4503 	bic.w	r5, r5, #33536	; 0x8300
 8007598:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800759c:	4313      	orrs	r3, r2
 800759e:	432b      	orrs	r3, r5
 80075a0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075a2:	68c5      	ldr	r5, [r0, #12]
 80075a4:	e9db 3205 	ldrd	r3, r2, [fp, #20]
 80075a8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80075ac:	4313      	orrs	r3, r2
 80075ae:	432b      	orrs	r3, r5
 80075b0:	60c3      	str	r3, [r0, #12]
  __HAL_I2C_ENABLE(hi2c);
 80075b2:	6803      	ldr	r3, [r0, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075b4:	4f25      	ldr	r7, [pc, #148]	; (800764c <main+0x46c>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6003      	str	r3, [r0, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075bc:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075c0:	f88b 103d 	strb.w	r1, [fp, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075c4:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c8:	f88b 403e 	strb.w	r4, [fp, #62]	; 0x3e
 80075cc:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075ce:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075d8:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075e2:	f7fa f8b7 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075ea:	4d28      	ldr	r5, [pc, #160]	; (800768c <main+0x4ac>)
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80075ec:	4621      	mov	r1, r4
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	200f      	movs	r0, #15
 80075f2:	f7fa f8af 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 80075f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80075fa:	4621      	mov	r1, r4
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	2010      	movs	r0, #16
 8007600:	f7fa f8a8 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 8007604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8007608:	4621      	mov	r1, r4
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	2011      	movs	r0, #17
 800760e:	f7fa f8a1 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 8007612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007616:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8007618:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800761c:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 800761e:	f8cb 3084 	str.w	r3, [fp, #132]	; 0x84
  huart1.Instance = USART1;
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <main+0x4b0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007624:	e9cb 4422 	strd	r4, r4, [fp, #136]	; 0x88
  huart1.Instance = USART1;
 8007628:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
  if (huart->gState == HAL_UART_STATE_RESET)
 800762c:	f89b 30bd 	ldrb.w	r3, [fp, #189]	; 0xbd
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007630:	e9cb 4426 	strd	r4, r4, [fp, #152]	; 0x98
  huart1.Init.Parity = UART_PARITY_NONE;
 8007634:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007638:	f8cb 5094 	str.w	r5, [fp, #148]	; 0x94
 800763c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8007640:	2b00      	cmp	r3, #0
 8007642:	f001 82f6 	beq.w	8008c32 <main+0x1a52>
 8007646:	e025      	b.n	8007694 <main+0x4b4>
 8007648:	40022000 	.word	0x40022000
 800764c:	40021000 	.word	0x40021000
 8007650:	0801f008 	.word	0x0801f008
 8007654:	007a1200 	.word	0x007a1200
 8007658:	0800d7c8 	.word	0x0800d7c8
 800765c:	40010c00 	.word	0x40010c00
 8007660:	40010800 	.word	0x40010800
 8007664:	20000000 	.word	0x20000000
 8007668:	40011000 	.word	0x40011000
 800766c:	e03f0000 	.word	0xe03f0000
 8007670:	0c030000 	.word	0x0c030000
 8007674:	40005400 	.word	0x40005400
 8007678:	00061a80 	.word	0x00061a80
 800767c:	000186a0 	.word	0x000186a0
 8007680:	001e847f 	.word	0x001e847f
 8007684:	003d08ff 	.word	0x003d08ff
 8007688:	000f4240 	.word	0x000f4240
 800768c:	e000e100 	.word	0xe000e100
 8007690:	40013800 	.word	0x40013800
  huart->gState = HAL_UART_STATE_BUSY;
 8007694:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007696:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800769a:	f88b 30bd 	strb.w	r3, [fp, #189]	; 0xbd
  __HAL_UART_DISABLE(huart);
 800769e:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a0:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
  __HAL_UART_DISABLE(huart);
 80076a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076a8:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076aa:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076ac:	f8db 0090 	ldr.w	r0, [fp, #144]	; 0x90
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076b8:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
  MODIFY_REG(huart->Instance->CR1,
 80076bc:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076be:	4303      	orrs	r3, r0
 80076c0:	f8db 0094 	ldr.w	r0, [fp, #148]	; 0x94
  MODIFY_REG(huart->Instance->CR1,
 80076c4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80076c8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076cc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80076ce:	430b      	orrs	r3, r1
 80076d0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076d2:	6953      	ldr	r3, [r2, #20]
 80076d4:	f8db 1098 	ldr.w	r1, [fp, #152]	; 0x98
 80076d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076dc:	430b      	orrs	r3, r1
 80076de:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80076e0:	4bd3      	ldr	r3, [pc, #844]	; (8007a30 <main+0x850>)
 80076e2:	429a      	cmp	r2, r3
 80076e4:	f001 8320 	beq.w	8008d28 <main+0x1b48>
 80076e8:	4bd2      	ldr	r3, [pc, #840]	; (8007a34 <main+0x854>)
 80076ea:	49d3      	ldr	r1, [pc, #844]	; (8007a38 <main+0x858>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80076f2:	440b      	add	r3, r1
 80076f4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80076f8:	40de      	lsrs	r6, r3
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076fa:	2319      	movs	r3, #25
 80076fc:	fb03 f606 	mul.w	r6, r3, r6
 8007700:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 8007704:	2764      	movs	r7, #100	; 0x64
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	fbb6 f3f3 	udiv	r3, r6, r3
 800770c:	fbb3 f6f7 	udiv	r6, r3, r7
 8007710:	fb07 3316 	mls	r3, r7, r6, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	3332      	adds	r3, #50	; 0x32
 8007718:	fbb3 f3f7 	udiv	r3, r3, r7
  huart->gState = HAL_UART_STATE_READY;
 800771c:	2120      	movs	r1, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771e:	2500      	movs	r5, #0
 8007720:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007724:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8007728:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800772a:	6913      	ldr	r3, [r2, #16]
 800772c:	48c3      	ldr	r0, [pc, #780]	; (8007a3c <main+0x85c>)
 800772e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007732:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007734:	6953      	ldr	r3, [r2, #20]
 8007736:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800773a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800773c:	68d3      	ldr	r3, [r2, #12]
 800773e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007742:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	f8cb 50c0 	str.w	r5, [fp, #192]	; 0xc0
  huart->gState = HAL_UART_STATE_READY;
 8007748:	f88b 10bd 	strb.w	r1, [fp, #189]	; 0xbd
  huart->RxState = HAL_UART_STATE_READY;
 800774c:	f88b 10be 	strb.w	r1, [fp, #190]	; 0xbe
 8007750:	6104      	str	r4, [r0, #16]
 8007752:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 8007756:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	2bc8      	cmp	r3, #200	; 0xc8
 800775e:	d9fa      	bls.n	8007756 <main+0x576>
    GPIOx->BSRR = GPIO_Pin;
 8007760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007764:	4bb5      	ldr	r3, [pc, #724]	; (8007a3c <main+0x85c>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8007766:	2011      	movs	r0, #17
 8007768:	611a      	str	r2, [r3, #16]
 800776a:	f7f8 fcf1 	bl	8000150 <LCD_Send_Cmd>
  return uwTick;
 800776e:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 8007772:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	2b78      	cmp	r3, #120	; 0x78
 800777a:	d9fa      	bls.n	8007772 <main+0x592>
  HAL_Delay(120);
	LCD_Send_Cmd(HX8357_COLMOD);
 800777c:	203a      	movs	r0, #58	; 0x3a
 800777e:	f7f8 fce7 	bl	8000150 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8007782:	2055      	movs	r0, #85	; 0x55
 8007784:	f7f8 fd44 	bl	8000210 <LCD_Send_Dat>
  return uwTick;
 8007788:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800778c:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	2b05      	cmp	r3, #5
 8007794:	d9fa      	bls.n	800778c <main+0x5ac>
  HAL_Delay(5);
  LCD_Send_Cmd(HX8357_DISPON);
 8007796:	2029      	movs	r0, #41	; 0x29
 8007798:	f7f8 fcda 	bl	8000150 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 800779c:	2036      	movs	r0, #54	; 0x36
 800779e:	f7f8 fcd7 	bl	8000150 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 80077a2:	2008      	movs	r0, #8
 80077a4:	f7f8 fd34 	bl	8000210 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80077a8:	2100      	movs	r1, #0
 80077aa:	f240 13df 	movw	r3, #479	; 0x1df
 80077ae:	f240 123f 	movw	r2, #319	; 0x13f
 80077b2:	4608      	mov	r0, r1
 80077b4:	f7f8 fdb4 	bl	8000320 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077b8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80077bc:	f44f 3c16 	mov.w	ip, #153600	; 0x25800
 80077c0:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80077c4:	4c9d      	ldr	r4, [pc, #628]	; (8007a3c <main+0x85c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077c6:	4b9e      	ldr	r3, [pc, #632]	; (8007a40 <main+0x860>)
 80077c8:	f8df a278 	ldr.w	sl, [pc, #632]	; 8007a44 <main+0x864>
    GPIOx->BSRR = GPIO_Pin;
 80077cc:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80077d2:	6122      	str	r2, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80077d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077dc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80077e0:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80077e4:	6122      	str	r2, [r4, #16]
 80077e6:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80077ea:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80077ec:	2220      	movs	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077ee:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80077f0:	2740      	movs	r7, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077f2:	f8ca 5010 	str.w	r5, [sl, #16]
 80077f6:	f8ca 1010 	str.w	r1, [sl, #16]
 80077fa:	f8ca 6010 	str.w	r6, [sl, #16]
 80077fe:	f8ca 0010 	str.w	r0, [sl, #16]
 8007802:	f8ca 9010 	str.w	r9, [sl, #16]
 8007806:	f8ca 8010 	str.w	r8, [sl, #16]
 800780a:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800780c:	2180      	movs	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800780e:	611d      	str	r5, [r3, #16]
 8007810:	f8c3 e010 	str.w	lr, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007814:	611a      	str	r2, [r3, #16]
 8007816:	611f      	str	r7, [r3, #16]
 8007818:	6119      	str	r1, [r3, #16]
 800781a:	2110      	movs	r1, #16
 800781c:	f8ca 1010 	str.w	r1, [sl, #16]
 8007820:	f8ca 2010 	str.w	r2, [sl, #16]
 8007824:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007826:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007828:	6122      	str	r2, [r4, #16]
 800782a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800782e:	f1bc 0c01 	subs.w	ip, ip, #1
 8007832:	6122      	str	r2, [r4, #16]
 8007834:	d1ca      	bne.n	80077cc <main+0x5ec>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8007836:	2101      	movs	r1, #1
 8007838:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 800783c:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007840:	4608      	mov	r0, r1
 8007842:	f7f8 fd6d 	bl	8000320 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007846:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800784a:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 800784e:	4e7e      	ldr	r6, [pc, #504]	; (8007a48 <main+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8007850:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8007a3c <main+0x85c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007854:	4a7a      	ldr	r2, [pc, #488]	; (8007a40 <main+0x860>)
 8007856:	4b7b      	ldr	r3, [pc, #492]	; (8007a44 <main+0x864>)
    GPIOx->BSRR = GPIO_Pin;
 8007858:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800785a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800785e:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007862:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8007866:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800786a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800786e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007872:	f8ca 1010 	str.w	r1, [sl, #16]
 8007876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800787a:	f8c2 c010 	str.w	ip, [r2, #16]
 800787e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007882:	6115      	str	r5, [r2, #16]
 8007884:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8007888:	611f      	str	r7, [r3, #16]
 800788a:	611c      	str	r4, [r3, #16]
 800788c:	f8c3 c010 	str.w	ip, [r3, #16]
 8007890:	611d      	str	r5, [r3, #16]
 8007892:	f8c3 9010 	str.w	r9, [r3, #16]
 8007896:	f8c3 8010 	str.w	r8, [r3, #16]
 800789a:	6114      	str	r4, [r2, #16]
 800789c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80078a0:	6117      	str	r7, [r2, #16]
 80078a2:	6110      	str	r0, [r2, #16]
 80078a4:	6111      	str	r1, [r2, #16]
 80078a6:	f8c2 e010 	str.w	lr, [r2, #16]
 80078aa:	6114      	str	r4, [r2, #16]
 80078ac:	6118      	str	r0, [r3, #16]
 80078ae:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80078b0:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80078b2:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80078b6:	f8ca 1010 	str.w	r1, [sl, #16]
 80078ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80078be:	3e01      	subs	r6, #1
 80078c0:	f8ca 1010 	str.w	r1, [sl, #16]
 80078c4:	d1c8      	bne.n	8007858 <main+0x678>
    uint16_t dt[1] = {0};
 80078c6:	4634      	mov	r4, r6
 80078c8:	4e60      	ldr	r6, [pc, #384]	; (8007a4c <main+0x86c>)
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 80078ca:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80078ce:	217f      	movs	r1, #127	; 0x7f
 80078d0:	2014      	movs	r0, #20
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80078d2:	46b1      	mov	r9, r6
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 80078d4:	4a5e      	ldr	r2, [pc, #376]	; (8007a50 <main+0x870>)
 80078d6:	f7fd fe47 	bl	8005568 <LCD_Font.constprop.5>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 80078da:	217f      	movs	r1, #127	; 0x7f
 80078dc:	2014      	movs	r0, #20
 80078de:	4a5c      	ldr	r2, [pc, #368]	; (8007a50 <main+0x870>)
 80078e0:	f7fc fcc0 	bl	8004264 <LCD_Font.constprop.4>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80078e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80078e8:	217f      	movs	r1, #127	; 0x7f
 80078ea:	2014      	movs	r0, #20
 80078ec:	4a59      	ldr	r2, [pc, #356]	; (8007a54 <main+0x874>)
 80078ee:	f7fd fe3b 	bl	8005568 <LCD_Font.constprop.5>
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80078f2:	fa1f f589 	uxth.w	r5, r9
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80078f6:	f5c5 777a 	rsb	r7, r5, #1000	; 0x3e8
 80078fa:	463d      	mov	r5, r7
 80078fc:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 8007900:	3701      	adds	r7, #1
 8007902:	fa1f f889 	uxth.w	r8, r9
 8007906:	eb08 0005 	add.w	r0, r8, r5
 800790a:	b280      	uxth	r0, r0
 800790c:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 800790e:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007912:	f7fb fbef 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007916:	eb08 0007 	add.w	r0, r8, r7
 800791a:	b280      	uxth	r0, r0
    return dt[0];
 800791c:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007920:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8007922:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007926:	f7fb fbe5 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 800792a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 800792e:	fa5f f888 	uxtb.w	r8, r8
 8007932:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007936:	f829 8f02 	strh.w	r8, [r9, #2]!
 800793a:	454e      	cmp	r6, r9
 800793c:	d1e1      	bne.n	8007902 <main+0x722>
 800793e:	4e46      	ldr	r6, [pc, #280]	; (8007a58 <main+0x878>)
    uint16_t dt[1] = {0};
 8007940:	2400      	movs	r4, #0
 8007942:	46b1      	mov	r9, r6
 8007944:	fa1f f589 	uxth.w	r5, r9
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007948:	f5c5 67fa 	rsb	r7, r5, #2000	; 0x7d0
 800794c:	463d      	mov	r5, r7
 800794e:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 8007952:	3701      	adds	r7, #1
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007954:	fa1f f889 	uxth.w	r8, r9
 8007958:	eb08 0005 	add.w	r0, r8, r5
 800795c:	b280      	uxth	r0, r0
 800795e:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8007960:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007964:	f7fb fbc6 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007968:	eb08 0007 	add.w	r0, r8, r7
 800796c:	b280      	uxth	r0, r0
    return dt[0];
 800796e:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007972:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8007974:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007978:	f7fb fbbc 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 800797c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 8007980:	fa5f f888 	uxtb.w	r8, r8
 8007984:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007988:	f829 8f02 	strh.w	r8, [r9, #2]!
 800798c:	454e      	cmp	r6, r9
 800798e:	d1e1      	bne.n	8007954 <main+0x774>
 8007990:	4e32      	ldr	r6, [pc, #200]	; (8007a5c <main+0x87c>)
    uint16_t dt[1] = {0};
 8007992:	2400      	movs	r4, #0
 8007994:	46b2      	mov	sl, r6
 8007996:	fa1f f58a 	uxth.w	r5, sl
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800799a:	f5c5 673b 	rsb	r7, r5, #2992	; 0xbb0
 800799e:	463d      	mov	r5, r7
 80079a0:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 80079a4:	3708      	adds	r7, #8
 80079a6:	3509      	adds	r5, #9
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80079a8:	fa1f f98a 	uxth.w	r9, sl
 80079ac:	eb09 0007 	add.w	r0, r9, r7
 80079b0:	b280      	uxth	r0, r0
 80079b2:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80079b4:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80079b8:	f7fb fb9c 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80079bc:	eb09 0005 	add.w	r0, r9, r5
 80079c0:	b280      	uxth	r0, r0
    return dt[0];
 80079c2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80079c6:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80079c8:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80079cc:	f7fb fb92 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80079d0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 80079d4:	fa5f f989 	uxtb.w	r9, r9
 80079d8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80079dc:	f82a 9f02 	strh.w	r9, [sl, #2]!
 80079e0:	4556      	cmp	r6, sl
    uint16_t dt[1] = {0};
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	d1df      	bne.n	80079a8 <main+0x7c8>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 80079e8:	217f      	movs	r1, #127	; 0x7f
 80079ea:	2014      	movs	r0, #20
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <main+0x874>)
 80079ee:	f7fc fc39 	bl	8004264 <LCD_Font.constprop.4>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80079f2:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80079f6:	2202      	movs	r2, #2
 80079f8:	20ec      	movs	r0, #236	; 0xec
 80079fa:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF2; // ctrl_hum
 80079fc:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007a00:	f7fc f8c2 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8007a04:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007a08:	2202      	movs	r2, #2
 8007a0a:	20ec      	movs	r0, #236	; 0xec
 8007a0c:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF4; // ctrl_meas
 8007a0e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007a12:	f7fc f8b9 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8007a16:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	20ec      	movs	r0, #236	; 0xec
 8007a1e:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF5; // config
 8007a20:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007a24:	f7fc f8b0 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8007a28:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	20ec      	movs	r0, #236	; 0xec
 8007a2e:	e017      	b.n	8007a60 <main+0x880>
 8007a30:	40013800 	.word	0x40013800
 8007a34:	40021000 	.word	0x40021000
 8007a38:	0800d7c8 	.word	0x0800d7c8
 8007a3c:	40010c00 	.word	0x40010c00
 8007a40:	40010800 	.word	0x40010800
 8007a44:	40011000 	.word	0x40011000
 8007a48:	000251c4 	.word	0x000251c4
 8007a4c:	200002ee 	.word	0x200002ee
 8007a50:	0801efd4 	.word	0x0801efd4
 8007a54:	0801efe4 	.word	0x0801efe4
 8007a58:	2000042a 	.word	0x2000042a
 8007a5c:	20000566 	.word	0x20000566
 8007a60:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0x88; // read dig_T regs
 8007a62:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007a66:	f7fc f88f 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8007a6a:	2206      	movs	r2, #6
 8007a6c:	20ec      	movs	r0, #236	; 0xec
 8007a6e:	a91e      	add	r1, sp, #120	; 0x78
 8007a70:	f7fb fe78 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8007a74:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8007a76:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0x8E; // read dig_P regs
 8007a7a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8007a7e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007a82:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8007a84:	f8ab 35b6 	strh.w	r3, [fp, #1462]	; 0x5b6
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007a88:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8007a8c:	f8ab 25b4 	strh.w	r2, [fp, #1460]	; 0x5b4
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007a90:	a91e      	add	r1, sp, #120	; 0x78
 8007a92:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007a94:	f8ab 35b8 	strh.w	r3, [fp, #1464]	; 0x5b8
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007a98:	f7fc f876 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8007a9c:	2212      	movs	r2, #18
 8007a9e:	20ec      	movs	r0, #236	; 0xec
 8007aa0:	a91e      	add	r1, sp, #120	; 0x78
 8007aa2:	f7fb fe5f 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8007aa6:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007aa8:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0xA1; // read dig_H regs
 8007aac:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8007ab0:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007ab4:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8007ab6:	f8ab 35bc 	strh.w	r3, [fp, #1468]	; 0x5bc
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8007aba:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007abe:	f8ab 25ba 	strh.w	r2, [fp, #1466]	; 0x5ba
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8007ac2:	f8ab 35be 	strh.w	r3, [fp, #1470]	; 0x5be
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007ac6:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007aca:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007acc:	f8ab 35c0 	strh.w	r3, [fp, #1472]	; 0x5c0
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8007ad0:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007ad4:	a91e      	add	r1, sp, #120	; 0x78
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8007ad6:	f8ab 35c2 	strh.w	r3, [fp, #1474]	; 0x5c2
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8007ada:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 8007ade:	f8ab 35c4 	strh.w	r3, [fp, #1476]	; 0x5c4
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8007ae2:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007ae6:	f8ab 35c6 	strh.w	r3, [fp, #1478]	; 0x5c6
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8007aea:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8007aee:	f8ab 35c8 	strh.w	r3, [fp, #1480]	; 0x5c8
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8007af2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8007af6:	f8ab 35ca 	strh.w	r3, [fp, #1482]	; 0x5ca
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007afa:	f7fc f845 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007afe:	2201      	movs	r2, #1
 8007b00:	20ec      	movs	r0, #236	; 0xec
 8007b02:	a91e      	add	r1, sp, #120	; 0x78
 8007b04:	f7fb fe2e 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8007b08:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	20ec      	movs	r0, #236	; 0xec
 8007b0e:	f10d 0179 	add.w	r1, sp, #121	; 0x79
    cmd[1] = 0xE1; // read dig_H regs
 8007b12:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007b16:	f7fc f837 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8007b1a:	2207      	movs	r2, #7
 8007b1c:	20ec      	movs	r0, #236	; 0xec
 8007b1e:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8007b22:	f7fb fe1f 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8007b26:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007b2a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
    dig_H1 = cmd[0];
 8007b2e:	f8ab 25cc 	strh.w	r2, [fp, #1484]	; 0x5cc
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8007b32:	f8bd 2079 	ldrh.w	r2, [sp, #121]	; 0x79
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007b36:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8007b3a:	f8ab 25ce 	strh.w	r2, [fp, #1486]	; 0x5ce
    dig_H3 = cmd[3];
 8007b3e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007b42:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
    dig_H3 = cmd[3];
 8007b46:	f8ab 25d0 	strh.w	r2, [fp, #1488]	; 0x5d0
    dig_H6 = cmd[7];
 8007b4a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8007b4e:	f8ab 25d6 	strh.w	r2, [fp, #1494]	; 0x5d6
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007b52:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007b56:	091b      	lsrs	r3, r3, #4
 8007b58:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007b5c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007b60:	f8ab 35d4 	strh.w	r3, [fp, #1492]	; 0x5d4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007b64:	f8ab 25d2 	strh.w	r2, [fp, #1490]	; 0x5d2
	DS3231_Update();
 8007b68:	f7fc f942 	bl	8003df0 <DS3231_Update>
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b6c:	f89b 30be 	ldrb.w	r3, [fp, #190]	; 0xbe
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d122      	bne.n	8007bba <main+0x9da>
    __HAL_LOCK(huart);
 8007b74:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d01e      	beq.n	8007bba <main+0x9da>
  huart->RxXferSize = Size;
 8007b7c:	2201      	movs	r2, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b7e:	2122      	movs	r1, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b80:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b84:	f8cb 40b0 	str.w	r4, [fp, #176]	; 0xb0
  __HAL_UNLOCK(huart);
 8007b88:	f88b 80bc 	strb.w	r8, [fp, #188]	; 0xbc
  huart->RxXferCount = Size;
 8007b8c:	f8ab 20ae 	strh.w	r2, [fp, #174]	; 0xae
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b90:	f8cb 40c0 	str.w	r4, [fp, #192]	; 0xc0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b94:	f88b 10be 	strb.w	r1, [fp, #190]	; 0xbe
  huart->RxXferSize = Size;
 8007b98:	f8ab 20ac 	strh.w	r2, [fp, #172]	; 0xac
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b9c:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 8007b9e:	48b3      	ldr	r0, [pc, #716]	; (8007e6c <main+0xc8c>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8007ba4:	f8cb 00a8 	str.w	r0, [fp, #168]	; 0xa8
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ba8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	f042 0220 	orr.w	r2, r2, #32
 8007bb8:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 8007bba:	4aad      	ldr	r2, [pc, #692]	; (8007e70 <main+0xc90>)
 8007bbc:	ab17      	add	r3, sp, #92	; 0x5c
 8007bbe:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc0:	f89b 40bd 	ldrb.w	r4, [fp, #189]	; 0xbd
 8007bc4:	c303      	stmia	r3!, {r0, r1}
 8007bc6:	2c20      	cmp	r4, #32
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	d107      	bne.n	8007bdc <main+0x9fc>
    __HAL_LOCK(huart);
 8007bcc:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d003      	beq.n	8007bdc <main+0x9fc>
 8007bd4:	210a      	movs	r1, #10
 8007bd6:	a817      	add	r0, sp, #92	; 0x5c
 8007bd8:	f7fc f990 	bl	8003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8007bdc:	ad1a      	add	r5, sp, #104	; 0x68
 8007bde:	462c      	mov	r4, r5
 8007be0:	4ba4      	ldr	r3, [pc, #656]	; (8007e74 <main+0xc94>)
  if (huart->gState == HAL_UART_STATE_READY)
 8007be2:	f89b 60bd 	ldrb.w	r6, [fp, #189]	; 0xbd
 8007be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007be8:	c407      	stmia	r4!, {r0, r1, r2}
 8007bea:	2e20      	cmp	r6, #32
 8007bec:	8023      	strh	r3, [r4, #0]
 8007bee:	d153      	bne.n	8007c98 <main+0xab8>
    __HAL_LOCK(huart);
 8007bf0:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d04f      	beq.n	8007c98 <main+0xab8>
    huart->TxXferSize = Size;
 8007bf8:	260e      	movs	r6, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 8007bfc:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bfe:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c02:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c06:	4c9c      	ldr	r4, [pc, #624]	; (8007e78 <main+0xc98>)
    huart->TxXferCount = Size;
 8007c08:	f8ab 60a6 	strh.w	r6, [fp, #166]	; 0xa6
    __HAL_LOCK(huart);
 8007c0c:	f88b 10bc 	strb.w	r1, [fp, #188]	; 0xbc
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
    huart->pTxBuffPtr = pData;
 8007c14:	f8cb 50a0 	str.w	r5, [fp, #160]	; 0xa0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c18:	f88b e0bd 	strb.w	lr, [fp, #189]	; 0xbd
    huart->TxXferSize = Size;
 8007c1c:	f8ab 60a4 	strh.w	r6, [fp, #164]	; 0xa4
    huart->hdmatx->XferAbortCallback = NULL;
 8007c20:	e9c3 420c 	strd	r4, r2, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 8007c24:	f893 4020 	ldrb.w	r4, [r3, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c28:	f8df c250 	ldr.w	ip, [pc, #592]	; 8007e7c <main+0xc9c>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c2c:	4f94      	ldr	r7, [pc, #592]	; (8007e80 <main+0xca0>)
 8007c2e:	428c      	cmp	r4, r1
 8007c30:	e9c3 c70a 	strd	ip, r7, [r3, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007c34:	f8db 0080 	ldr.w	r0, [fp, #128]	; 0x80
 8007c38:	d024      	beq.n	8007c84 <main+0xaa4>
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c3a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007c3e:	f883 1020 	strb.w	r1, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c42:	428c      	cmp	r4, r1
 8007c44:	f041 8088 	bne.w	8008d58 <main+0x1b78>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c4a:	2202      	movs	r2, #2
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8007c52:	681a      	ldr	r2, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c54:	408c      	lsls	r4, r1
    __HAL_DMA_DISABLE(hdma);
 8007c56:	6811      	ldr	r1, [r2, #0]
 8007c58:	f021 0101 	bic.w	r1, r1, #1
 8007c5c:	6011      	str	r1, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c5e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007c60:	604c      	str	r4, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c62:	6859      	ldr	r1, [r3, #4]
 8007c64:	1d03      	adds	r3, r0, #4
 8007c66:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 8007c68:	6056      	str	r6, [r2, #4]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c6a:	bf0b      	itete	eq
 8007c6c:	6093      	streq	r3, [r2, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007c6e:	6095      	strne	r5, [r2, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007c70:	60d5      	streq	r5, [r2, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007c72:	60d3      	strne	r3, [r2, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c74:	6813      	ldr	r3, [r2, #0]
 8007c76:	f043 030e 	orr.w	r3, r3, #14
 8007c7a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8007c7c:	6813      	ldr	r3, [r2, #0]
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	6013      	str	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c84:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8007c88:	6003      	str	r3, [r0, #0]
    __HAL_UNLOCK(huart);
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f88b 30bc 	strb.w	r3, [fp, #188]	; 0xbc
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c90:	6943      	ldr	r3, [r0, #20]
 8007c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c96:	6143      	str	r3, [r0, #20]
		if (rx_index != 0) {
 8007c98:	f89b 35d9 	ldrb.w	r3, [fp, #1497]	; 0x5d9
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8428 	bne.w	80084f2 <main+0x1312>
		DS3231_Update();
 8007ca2:	f7fc f8a5 	bl	8003df0 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8007ca6:	f89b 6058 	ldrb.w	r6, [fp, #88]	; 0x58
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8007caa:	f89b 5059 	ldrb.w	r5, [fp, #89]	; 0x59
    return ((val / 16 * 10) + (val % 16));
 8007cae:	0937      	lsrs	r7, r6, #4
 8007cb0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007cb4:	f006 060f 	and.w	r6, r6, #15
 8007cb8:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8007cbc:	b2f7      	uxtb	r7, r6
 8007cbe:	092e      	lsrs	r6, r5, #4
 8007cc0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007cc4:	f005 050f 	and.w	r5, r5, #15
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 8007cc8:	f89b 405a 	ldrb.w	r4, [fp, #90]	; 0x5a
    return ((val / 16 * 10) + (val % 16));
 8007ccc:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8007cd0:	b2ed      	uxtb	r5, r5
 8007cd2:	9507      	str	r5, [sp, #28]
		rtcMin = DS3231_getMin();
 8007cd4:	f88b 55db 	strb.w	r5, [fp, #1499]	; 0x5db
 8007cd8:	0925      	lsrs	r5, r4, #4
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8007cda:	f89b 005b 	ldrb.w	r0, [fp, #91]	; 0x5b
    return ((val / 16 * 10) + (val % 16));
 8007cde:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007ce2:	f004 040f 	and.w	r4, r4, #15
 8007ce6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 8007cea:	f88b 40ec 	strb.w	r4, [fp, #236]	; 0xec
 8007cee:	0904      	lsrs	r4, r0, #4
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8007cf0:	f89b 105c 	ldrb.w	r1, [fp, #92]	; 0x5c
    return ((val / 16 * 10) + (val % 16));
 8007cf4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007cf8:	f000 000f 	and.w	r0, r0, #15
 8007cfc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 8007d00:	f88b 05dc 	strb.w	r0, [fp, #1500]	; 0x5dc
 8007d04:	0908      	lsrs	r0, r1, #4
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 8007d06:	f89b 205d 	ldrb.w	r2, [fp, #93]	; 0x5d
    return ((val / 16 * 10) + (val % 16));
 8007d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007d0e:	f001 010f 	and.w	r1, r1, #15
 8007d12:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 8007d16:	f88b 15dd 	strb.w	r1, [fp, #1501]	; 0x5dd
 8007d1a:	0911      	lsrs	r1, r2, #4
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8007d1c:	f89b 305e 	ldrb.w	r3, [fp, #94]	; 0x5e
    return ((val / 16 * 10) + (val % 16));
 8007d20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d24:	f002 020f 	and.w	r2, r2, #15
 8007d28:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 8007d2c:	f88b 25de 	strb.w	r2, [fp, #1502]	; 0x5de
 8007d30:	091a      	lsrs	r2, r3, #4
 8007d32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 8007d3e:	f88b 35df 	strb.w	r3, [fp, #1503]	; 0x5df
		if (rtcSecLast != rtcSec) {
 8007d42:	4b50      	ldr	r3, [pc, #320]	; (8007e84 <main+0xca4>)
 8007d44:	9708      	str	r7, [sp, #32]
 8007d46:	7a1b      	ldrb	r3, [r3, #8]
		rtcSec = DS3231_getSec();
 8007d48:	f88b 75da 	strb.w	r7, [fp, #1498]	; 0x5da
		if (rtcSecLast != rtcSec) {
 8007d4c:	42bb      	cmp	r3, r7
 8007d4e:	d0a3      	beq.n	8007c98 <main+0xab8>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2308      	movs	r3, #8
	P = 1 - radius;
 8007d54:	2401      	movs	r4, #1
 8007d56:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8007d5a:	f06f 0206 	mvn.w	r2, #6
 8007d5e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007d62:	469b      	mov	fp, r3
 8007d64:	e9cd 2405 	strd	r2, r4, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007d68:	4d47      	ldr	r5, [pc, #284]	; (8007e88 <main+0xca8>)
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8007d70:	f10b 0723 	add.w	r7, fp, #35	; 0x23
 8007d74:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007d78:	b2bf      	uxth	r7, r7
 8007d7a:	fa1f f989 	uxth.w	r9, r9
 8007d7e:	4639      	mov	r1, r7
 8007d80:	461a      	mov	r2, r3
 8007d82:	4648      	mov	r0, r9
 8007d84:	9500      	str	r5, [sp, #0]
 8007d86:	f7f8 fe9f 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f104 0a23 	add.w	sl, r4, #35	; 0x23
 8007d90:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007d94:	b2b6      	uxth	r6, r6
 8007d96:	fa1f fa8a 	uxth.w	sl, sl
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4651      	mov	r1, sl
 8007da0:	9500      	str	r5, [sp, #0]
 8007da2:	f7f8 fe91 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007da6:	2301      	movs	r3, #1
 8007da8:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007dac:	fa1f f888 	uxth.w	r8, r8
 8007db0:	4639      	mov	r1, r7
 8007db2:	461a      	mov	r2, r3
 8007db4:	4640      	mov	r0, r8
 8007db6:	9500      	str	r5, [sp, #0]
 8007db8:	f7f8 fe86 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007dc2:	b2bf      	uxth	r7, r7
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	4638      	mov	r0, r7
 8007dca:	9500      	str	r5, [sp, #0]
 8007dcc:	f7f8 fe7c 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8007dd6:	b2a4      	uxth	r4, r4
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4630      	mov	r0, r6
 8007ddc:	461a      	mov	r2, r3
 8007dde:	9500      	str	r5, [sp, #0]
 8007de0:	f7f8 fe72 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007de4:	2301      	movs	r3, #1
 8007de6:	f1cb 0623 	rsb	r6, fp, #35	; 0x23
 8007dea:	b2b6      	uxth	r6, r6
 8007dec:	4631      	mov	r1, r6
 8007dee:	461a      	mov	r2, r3
 8007df0:	4648      	mov	r0, r9
 8007df2:	9500      	str	r5, [sp, #0]
 8007df4:	f7f8 fe68 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4640      	mov	r0, r8
 8007e00:	9500      	str	r5, [sp, #0]
 8007e02:	f7f8 fe61 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8007e06:	2301      	movs	r3, #1
 8007e08:	4621      	mov	r1, r4
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	9500      	str	r5, [sp, #0]
 8007e10:	f7f8 fe5a 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 8007e14:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007e1c:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007e1e:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 8007e22:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 8007e26:	f2c0 84ce 	blt.w	80087c6 <main+0x15e6>
			a_++;
 8007e2a:	9c06      	ldr	r4, [sp, #24]
			P = (P + 5) + (2 * (a_ - b_));
 8007e2c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 8007e30:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 8007e32:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8007e34:	9a03      	ldr	r2, [sp, #12]
			b_--;
 8007e36:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 8007e38:	3201      	adds	r2, #1
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	4284      	cmp	r4, r0
			b_--;
 8007e3e:	9004      	str	r0, [sp, #16]
	while (a_ <= b_)
 8007e40:	9203      	str	r2, [sp, #12]
 8007e42:	fa1f fb80 	uxth.w	fp, r0
 8007e46:	9306      	str	r3, [sp, #24]
 8007e48:	dd8f      	ble.n	8007d6a <main+0xb8a>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	2001      	movs	r0, #1
 8007e50:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8007e54:	f06f 0206 	mvn.w	r2, #6
 8007e58:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007e5c:	e9cd 2005 	strd	r2, r0, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007e60:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007e64:	469b      	mov	fp, r3
 8007e66:	4d08      	ldr	r5, [pc, #32]	; (8007e88 <main+0xca8>)
 8007e68:	e010      	b.n	8007e8c <main+0xcac>
 8007e6a:	bf00      	nop
 8007e6c:	200007d8 	.word	0x200007d8
 8007e70:	0801f01c 	.word	0x0801f01c
 8007e74:	0801f028 	.word	0x0801f028
 8007e78:	080016d9 	.word	0x080016d9
 8007e7c:	080016b5 	.word	0x080016b5
 8007e80:	080016b1 	.word	0x080016b1
 8007e84:	20000000 	.word	0x20000000
 8007e88:	00ffa500 	.word	0x00ffa500
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8007e92:	f10b 074b 	add.w	r7, fp, #75	; 0x4b
 8007e96:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007e9a:	b2bf      	uxth	r7, r7
 8007e9c:	fa1f f989 	uxth.w	r9, r9
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4648      	mov	r0, r9
 8007ea6:	9500      	str	r5, [sp, #0]
 8007ea8:	f7f8 fe0e 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007eac:	2301      	movs	r3, #1
 8007eae:	f104 0a4b 	add.w	sl, r4, #75	; 0x4b
 8007eb2:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007eb6:	b2b6      	uxth	r6, r6
 8007eb8:	fa1f fa8a 	uxth.w	sl, sl
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	9500      	str	r5, [sp, #0]
 8007ec4:	f7f8 fe00 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007ece:	fa1f f888 	uxth.w	r8, r8
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	9500      	str	r5, [sp, #0]
 8007eda:	f7f8 fdf5 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007ee4:	b2bf      	uxth	r7, r7
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4651      	mov	r1, sl
 8007eea:	4638      	mov	r0, r7
 8007eec:	9500      	str	r5, [sp, #0]
 8007eee:	f7f8 fdeb 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f1c4 044b 	rsb	r4, r4, #75	; 0x4b
 8007ef8:	b2a4      	uxth	r4, r4
 8007efa:	4621      	mov	r1, r4
 8007efc:	4630      	mov	r0, r6
 8007efe:	461a      	mov	r2, r3
 8007f00:	9500      	str	r5, [sp, #0]
 8007f02:	f7f8 fde1 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007f06:	2301      	movs	r3, #1
 8007f08:	f1cb 064b 	rsb	r6, fp, #75	; 0x4b
 8007f0c:	b2b6      	uxth	r6, r6
 8007f0e:	4631      	mov	r1, r6
 8007f10:	461a      	mov	r2, r3
 8007f12:	4648      	mov	r0, r9
 8007f14:	9500      	str	r5, [sp, #0]
 8007f16:	f7f8 fdd7 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4640      	mov	r0, r8
 8007f22:	9500      	str	r5, [sp, #0]
 8007f24:	f7f8 fdd0 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4638      	mov	r0, r7
 8007f30:	9500      	str	r5, [sp, #0]
 8007f32:	f7f8 fdc9 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 8007f36:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8007f3a:	9b05      	ldr	r3, [sp, #20]
 8007f3c:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007f3e:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007f40:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 8007f44:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 8007f48:	f2c0 839a 	blt.w	8008680 <main+0x14a0>
			a_++;
 8007f4c:	9c06      	ldr	r4, [sp, #24]
			P = (P + 5) + (2 * (a_ - b_));
 8007f4e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 8007f52:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 8007f54:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8007f56:	9a03      	ldr	r2, [sp, #12]
			b_--;
 8007f58:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	4284      	cmp	r4, r0
			b_--;
 8007f60:	9004      	str	r0, [sp, #16]
	while (a_ <= b_)
 8007f62:	9203      	str	r2, [sp, #12]
 8007f64:	fa1f fb80 	uxth.w	fp, r0
 8007f68:	9306      	str	r3, [sp, #24]
 8007f6a:	dd8f      	ble.n	8007e8c <main+0xcac>
			if (rtcSec % 2 != 0) {
 8007f6c:	e9dd 3b08 	ldrd	r3, fp, [sp, #32]
 8007f70:	f013 0601 	ands.w	r6, r3, #1
 8007f74:	f000 8396 	beq.w	80086a4 <main+0x14c4>
	b_ = radius;
 8007f78:	f04f 0807 	mov.w	r8, #7
 8007f7c:	f04f 0a00 	mov.w	sl, #0
 8007f80:	2601      	movs	r6, #1
	P = 1 - radius;
 8007f82:	f06f 0705 	mvn.w	r7, #5
 8007f86:	46c1      	mov	r9, r8
 8007f88:	f8cd b00c 	str.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007f8c:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007f90:	f8df c36c 	ldr.w	ip, [pc, #876]	; 8008300 <main+0x1120>
 8007f94:	b2b5      	uxth	r5, r6
 8007f96:	f10a 0201 	add.w	r2, sl, #1
 8007f9a:	3401      	adds	r4, #1
 8007f9c:	b2a4      	uxth	r4, r4
 8007f9e:	fa1f fb82 	uxth.w	fp, r2
 8007fa2:	f1c9 0123 	rsb	r1, r9, #35	; 0x23
 8007fa6:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007faa:	4623      	mov	r3, r4
 8007fac:	465a      	mov	r2, fp
 8007fae:	b289      	uxth	r1, r1
 8007fb0:	b280      	uxth	r0, r0
 8007fb2:	f8cd c000 	str.w	ip, [sp]
 8007fb6:	f7f8 fd87 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007fba:	f8df c344 	ldr.w	ip, [pc, #836]	; 8008300 <main+0x1120>
 8007fbe:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007fc2:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	b289      	uxth	r1, r1
 8007fca:	465b      	mov	r3, fp
 8007fcc:	f8cd c000 	str.w	ip, [sp]
 8007fd0:	b280      	uxth	r0, r0
 8007fd2:	f7f8 fd79 	bl	8000ac8 <LCD_Rect_Fill>
 8007fd6:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007fd8:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007fda:	eba4 0408 	sub.w	r4, r4, r8
 8007fde:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007fe2:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007fe6:	f2c0 83fc 	blt.w	80087e2 <main+0x1602>
			b_--;
 8007fea:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007fee:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007ff0:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007ff4:	f10a 0a02 	add.w	sl, sl, #2
 8007ff8:	fa1f f988 	uxth.w	r9, r8
 8007ffc:	f106 0601 	add.w	r6, r6, #1
 8008000:	ddc4      	ble.n	8007f8c <main+0xdac>
 8008002:	f04f 0807 	mov.w	r8, #7
 8008006:	f04f 0a00 	mov.w	sl, #0
 800800a:	2601      	movs	r6, #1
 800800c:	f06f 0705 	mvn.w	r7, #5
 8008010:	46c1      	mov	r9, r8
 8008012:	f8dd b00c 	ldr.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8008016:	f8cd b00c 	str.w	fp, [sp, #12]
 800801a:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800801e:	f8df c2e0 	ldr.w	ip, [pc, #736]	; 8008300 <main+0x1120>
 8008022:	b2b5      	uxth	r5, r6
 8008024:	f10a 0201 	add.w	r2, sl, #1
 8008028:	3401      	adds	r4, #1
 800802a:	b2a4      	uxth	r4, r4
 800802c:	fa1f fb82 	uxth.w	fp, r2
 8008030:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8008034:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8008038:	4623      	mov	r3, r4
 800803a:	465a      	mov	r2, fp
 800803c:	b289      	uxth	r1, r1
 800803e:	b280      	uxth	r0, r0
 8008040:	f8cd c000 	str.w	ip, [sp]
 8008044:	f7f8 fd40 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8008048:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8008300 <main+0x1120>
 800804c:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8008050:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8008054:	4622      	mov	r2, r4
 8008056:	b289      	uxth	r1, r1
 8008058:	465b      	mov	r3, fp
 800805a:	f8cd c000 	str.w	ip, [sp]
 800805e:	b280      	uxth	r0, r0
 8008060:	f7f8 fd32 	bl	8000ac8 <LCD_Rect_Fill>
 8008064:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8008066:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8008068:	eba4 0408 	sub.w	r4, r4, r8
 800806c:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8008070:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8008074:	f2c0 83bf 	blt.w	80087f6 <main+0x1616>
			b_--;
 8008078:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 800807c:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 800807e:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8008082:	f10a 0a02 	add.w	sl, sl, #2
 8008086:	fa1f f988 	uxth.w	r9, r8
 800808a:	f106 0601 	add.w	r6, r6, #1
 800808e:	ddc4      	ble.n	800801a <main+0xe3a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008090:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008094:	4a9b      	ldr	r2, [pc, #620]	; (8008304 <main+0x1124>)
 8008096:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800809a:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 800809c:	4c9a      	ldr	r4, [pc, #616]	; (8008308 <main+0x1128>)
 800809e:	9b07      	ldr	r3, [sp, #28]
 80080a0:	7a62      	ldrb	r2, [r4, #9]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f000 80ce 	beq.w	8008244 <main+0x1064>
				sprintf(clockPrint, "%02d", rtcMinLast);
 80080a8:	4998      	ldr	r1, [pc, #608]	; (800830c <main+0x112c>)
 80080aa:	a81e      	add	r0, sp, #120	; 0x78
 80080ac:	f001 fd3a 	bl	8009b24 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80080b0:	2200      	movs	r2, #0
 80080b2:	20b4      	movs	r0, #180	; 0xb4
 80080b4:	a91e      	add	r1, sp, #120	; 0x78
 80080b6:	f7fc f88b 	bl	80041d0 <LCD_Font.constprop.3>
				sprintf(clockPrint, "%02d", rtcMin);
 80080ba:	f89b 25db 	ldrb.w	r2, [fp, #1499]	; 0x5db
 80080be:	4993      	ldr	r1, [pc, #588]	; (800830c <main+0x112c>)
 80080c0:	a81e      	add	r0, sp, #120	; 0x78
 80080c2:	f001 fd2f 	bl	8009b24 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80080c6:	4a8e      	ldr	r2, [pc, #568]	; (8008300 <main+0x1120>)
 80080c8:	20b4      	movs	r0, #180	; 0xb4
 80080ca:	a91e      	add	r1, sp, #120	; 0x78
 80080cc:	f7fc f880 	bl	80041d0 <LCD_Font.constprop.3>
				if (rtcHrsLast != rtcHrs) {
 80080d0:	7aa2      	ldrb	r2, [r4, #10]
 80080d2:	f89b 30ec 	ldrb.w	r3, [fp, #236]	; 0xec
 80080d6:	4293      	cmp	r3, r2
 80080d8:	f000 80b0 	beq.w	800823c <main+0x105c>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80080dc:	498b      	ldr	r1, [pc, #556]	; (800830c <main+0x112c>)
 80080de:	a81e      	add	r0, sp, #120	; 0x78
 80080e0:	f001 fd20 	bl	8009b24 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80080e4:	2200      	movs	r2, #0
 80080e6:	a91e      	add	r1, sp, #120	; 0x78
 80080e8:	4610      	mov	r0, r2
 80080ea:	f7fc f871 	bl	80041d0 <LCD_Font.constprop.3>
					sprintf(clockPrint, "%02d", rtcHrs);
 80080ee:	f89b 20ec 	ldrb.w	r2, [fp, #236]	; 0xec
 80080f2:	4986      	ldr	r1, [pc, #536]	; (800830c <main+0x112c>)
 80080f4:	a81e      	add	r0, sp, #120	; 0x78
 80080f6:	f001 fd15 	bl	8009b24 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80080fa:	4a81      	ldr	r2, [pc, #516]	; (8008300 <main+0x1120>)
 80080fc:	2000      	movs	r0, #0
 80080fe:	a91e      	add	r1, sp, #120	; 0x78
 8008100:	f7fc f866 	bl	80041d0 <LCD_Font.constprop.3>
					if (rtcDayLast != rtcDay) {
 8008104:	f89b 26e0 	ldrb.w	r2, [fp, #1760]	; 0x6e0
 8008108:	f89b 35dc 	ldrb.w	r3, [fp, #1500]	; 0x5dc
 800810c:	429a      	cmp	r2, r3
 800810e:	f000 8089 	beq.w	8008224 <main+0x1044>
						sprintf(clockPrint, "%02d", rtcDateLast);
 8008112:	f89b 26e1 	ldrb.w	r2, [fp, #1761]	; 0x6e1
 8008116:	497d      	ldr	r1, [pc, #500]	; (800830c <main+0x112c>)
 8008118:	a81e      	add	r0, sp, #120	; 0x78
 800811a:	f001 fd03 	bl	8009b24 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800811e:	2200      	movs	r2, #0
 8008120:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008124:	a91e      	add	r1, sp, #120	; 0x78
 8008126:	f7fc f80b 	bl	8004140 <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d", rtcDate);
 800812a:	f89b 25dd 	ldrb.w	r2, [fp, #1501]	; 0x5dd
 800812e:	4977      	ldr	r1, [pc, #476]	; (800830c <main+0x112c>)
 8008130:	a81e      	add	r0, sp, #120	; 0x78
 8008132:	f001 fcf7 	bl	8009b24 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8008136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800813a:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800813e:	a91e      	add	r1, sp, #120	; 0x78
 8008140:	f7fb fffe 	bl	8004140 <LCD_Font.constprop.2>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8008144:	f89b 35dd 	ldrb.w	r3, [fp, #1501]	; 0x5dd
 8008148:	2b09      	cmp	r3, #9
 800814a:	f240 848f 	bls.w	8008a6c <main+0x188c>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800814e:	260c      	movs	r6, #12
 8008150:	f89b 45de 	ldrb.w	r4, [fp, #1502]	; 0x5de
 8008154:	4f6e      	ldr	r7, [pc, #440]	; (8008310 <main+0x1130>)
 8008156:	f104 030a 	add.w	r3, r4, #10
 800815a:	fbb3 f1f6 	udiv	r1, r3, r6
 800815e:	fb06 3311 	mls	r3, r6, r1, r3
 8008162:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008166:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 800816a:	2200      	movs	r2, #0
 800816c:	f44f 70b9 	mov.w	r0, #370	; 0x172
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008170:	340b      	adds	r4, #11
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8008172:	f7fb ff9d 	bl	80040b0 <LCD_Font.constprop.1>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008176:	fbb4 f3f6 	udiv	r3, r4, r6
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800817a:	2507      	movs	r5, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800817c:	fb06 4413 	mls	r4, r6, r3, r4
 8008180:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8008184:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 8008188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800818c:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8008190:	f7fb ff8e 	bl	80040b0 <LCD_Font.constprop.1>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 8008194:	f89b 36e3 	ldrb.w	r3, [fp, #1763]	; 0x6e3
 8008198:	495e      	ldr	r1, [pc, #376]	; (8008314 <main+0x1134>)
 800819a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	f89b 36e2 	ldrb.w	r3, [fp, #1762]	; 0x6e2
 80081a4:	f89b 26e1 	ldrb.w	r2, [fp, #1761]	; 0x6e1
 80081a8:	a81e      	add	r0, sp, #120	; 0x78
 80081aa:	f001 fcbb 	bl	8009b24 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80081ae:	2200      	movs	r2, #0
 80081b0:	20b4      	movs	r0, #180	; 0xb4
 80081b2:	a91e      	add	r1, sp, #120	; 0x78
 80081b4:	f7fb ff34 	bl	8004020 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 80081b8:	f89b 35df 	ldrb.w	r3, [fp, #1503]	; 0x5df
 80081bc:	4955      	ldr	r1, [pc, #340]	; (8008314 <main+0x1134>)
 80081be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	f89b 35de 	ldrb.w	r3, [fp, #1502]	; 0x5de
 80081c8:	f89b 25dd 	ldrb.w	r2, [fp, #1501]	; 0x5dd
 80081cc:	a81e      	add	r0, sp, #120	; 0x78
 80081ce:	f001 fca9 	bl	8009b24 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 80081d2:	22ff      	movs	r2, #255	; 0xff
 80081d4:	20b4      	movs	r0, #180	; 0xb4
 80081d6:	a91e      	add	r1, sp, #120	; 0x78
 80081d8:	f7fb ff22 	bl	8004020 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80081dc:	f89b 45dc 	ldrb.w	r4, [fp, #1500]	; 0x5dc
 80081e0:	2200      	movs	r2, #0
 80081e2:	1d63      	adds	r3, r4, #5
 80081e4:	fbb3 f1f5 	udiv	r1, r3, r5
 80081e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80081ec:	1a5b      	subs	r3, r3, r1
 80081ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80081f2:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 80081f6:	2014      	movs	r0, #20
 80081f8:	f7fb ff12 	bl	8004020 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80081fc:	1da3      	adds	r3, r4, #6
 80081fe:	fbb3 f5f5 	udiv	r5, r3, r5
 8008202:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8008206:	1b5b      	subs	r3, r3, r5
 8008208:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800820c:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 8008210:	22ff      	movs	r2, #255	; 0xff
 8008212:	2014      	movs	r0, #20
 8008214:	f7fb ff04 	bl	8004020 <LCD_Font.constprop.0>
						rtcDateLast = rtcDate;
 8008218:	f89b 35dd 	ldrb.w	r3, [fp, #1501]	; 0x5dd
						rtcDayLast = rtcDay;
 800821c:	f88b 46e0 	strb.w	r4, [fp, #1760]	; 0x6e0
						rtcDateLast = rtcDate;
 8008220:	f88b 36e1 	strb.w	r3, [fp, #1761]	; 0x6e1
					rtcMonthLast = rtcMonth;
 8008224:	f89b 35de 	ldrb.w	r3, [fp, #1502]	; 0x5de
					rtcHrsLast = rtcHrs;
 8008228:	4a37      	ldr	r2, [pc, #220]	; (8008308 <main+0x1128>)
					rtcMonthLast = rtcMonth;
 800822a:	f88b 36e2 	strb.w	r3, [fp, #1762]	; 0x6e2
					rtcYearLast = rtcYear;
 800822e:	f89b 35df 	ldrb.w	r3, [fp, #1503]	; 0x5df
 8008232:	f88b 36e3 	strb.w	r3, [fp, #1763]	; 0x6e3
					rtcHrsLast = rtcHrs;
 8008236:	f89b 30ec 	ldrb.w	r3, [fp, #236]	; 0xec
 800823a:	7293      	strb	r3, [r2, #10]
				rtcMinLast = rtcMin;
 800823c:	f89b 35db 	ldrb.w	r3, [fp, #1499]	; 0x5db
 8008240:	4a31      	ldr	r2, [pc, #196]	; (8008308 <main+0x1128>)
 8008242:	7253      	strb	r3, [r2, #9]
    cmd[0] = 0xFA; // temp_msb
 8008244:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008246:	2201      	movs	r2, #1
 8008248:	20ec      	movs	r0, #236	; 0xec
 800824a:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFA; // temp_msb
 800824c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008250:	f7fb fc9a 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8008254:	2203      	movs	r2, #3
 8008256:	20ec      	movs	r0, #236	; 0xec
 8008258:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 800825c:	f7fb fa82 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008260:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8008264:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800826e:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008272:	f8bb 25b4 	ldrh.w	r2, [fp, #1460]	; 0x5b4
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008276:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800827a:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 800827e:	fb03 f303 	mul.w	r3, r3, r3
 8008282:	0b1c      	lsrs	r4, r3, #12
 8008284:	f9bb 35b8 	ldrsh.w	r3, [fp, #1464]	; 0x5b8
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008288:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800828a:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800828e:	f9bb 35b6 	ldrsh.w	r3, [fp, #1462]	; 0x5b6
 8008292:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8008296:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800829a:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800829c:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 80082a0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80082a4:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 80082a6:	f8cb 46e4 	str.w	r4, [fp, #1764]	; 0x6e4
    tempf = (float) temp;
 80082aa:	1200      	asrs	r0, r0, #8
 80082ac:	f7fe ff24 	bl	80070f8 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 80082b0:	4919      	ldr	r1, [pc, #100]	; (8008318 <main+0x1138>)
 80082b2:	f7fe fdb3 	bl	8006e1c <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80082b6:	f7fe f9d9 	bl	800666c <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80082ba:	2200      	movs	r2, #0
 80082bc:	4b17      	ldr	r3, [pc, #92]	; (800831c <main+0x113c>)
 80082be:	f7fe fa2d 	bl	800671c <__aeabi_dmul>
 80082c2:	2200      	movs	r2, #0
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <main+0x1140>)
 80082c6:	f7fe f873 	bl	80063b0 <__adddf3>
 80082ca:	f005 f9f5 	bl	800d6b8 <floor>
 80082ce:	a30a      	add	r3, pc, #40	; (adr r3, 80082f8 <main+0x1118>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7fe fa22 	bl	800671c <__aeabi_dmul>
 80082d8:	f7fe fd18 	bl	8006d0c <__aeabi_d2f>
	temperature = BME280_getTemperature(-1);
 80082dc:	f7fe f9c6 	bl	800666c <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 80082e0:	23fd      	movs	r3, #253	; 0xfd
 80082e2:	e9cb 0132 	strd	r0, r1, [fp, #200]	; 0xc8
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80082e6:	2201      	movs	r2, #1
 80082e8:	20ec      	movs	r0, #236	; 0xec
 80082ea:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFD; // hum_msb
 80082ec:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80082f0:	f7fb fc4a 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80082f4:	2202      	movs	r2, #2
 80082f6:	e015      	b.n	8008324 <main+0x1144>
 80082f8:	9999999a 	.word	0x9999999a
 80082fc:	3fb99999 	.word	0x3fb99999
 8008300:	00ffa500 	.word	0x00ffa500
 8008304:	40011000 	.word	0x40011000
 8008308:	20000000 	.word	0x20000000
 800830c:	0801efc4 	.word	0x0801efc4
 8008310:	0800d7c8 	.word	0x0800d7c8
 8008314:	0801eff8 	.word	0x0801eff8
 8008318:	3c23d70a 	.word	0x3c23d70a
 800831c:	40240000 	.word	0x40240000
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	20ec      	movs	r0, #236	; 0xec
 8008326:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 800832a:	f7fb fa1b 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800832e:	f8bb 35d0 	ldrh.w	r3, [fp, #1488]	; 0x5d0
    v_x1 = t_fine - 76800;
 8008332:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8008336:	f9bb 25d6 	ldrsh.w	r2, [fp, #1494]	; 0x5d6
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800833a:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800833e:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8008342:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8008344:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8008346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800834a:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 800834e:	f8bd 2059 	ldrh.w	r2, [sp, #89]	; 0x59
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8008352:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8008354:	ba52      	rev16	r2, r2
 8008356:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8008358:	f9bb 25d2 	ldrsh.w	r2, [fp, #1490]	; 0x5d2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800835c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8008360:	0512      	lsls	r2, r2, #20
 8008362:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8008366:	f9bb 05ce 	ldrsh.w	r0, [fp, #1486]	; 0x5ce
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800836a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800836e:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8008372:	f9bb 05d4 	ldrsh.w	r0, [fp, #1492]	; 0x5d4
                                            (int32_t) dig_H2 + 8192) >> 14));
 8008376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800837a:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800837e:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8008380:	0bd2      	lsrs	r2, r2, #15
 8008382:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8008386:	13da      	asrs	r2, r3, #15
 8008388:	fb02 f202 	mul.w	r2, r2, r2
 800838c:	f8bb 15cc 	ldrh.w	r1, [fp, #1484]	; 0x5cc
 8008390:	11d0      	asrs	r0, r2, #7
 8008392:	fb01 f000 	mul.w	r0, r1, r0
 8008396:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 800839a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 800839e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80083a2:	bfa8      	it	ge
 80083a4:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 80083a8:	1300      	asrs	r0, r0, #12
 80083aa:	f7fe fea5 	bl	80070f8 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 80083ae:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80083b2:	f7fe fd33 	bl	8006e1c <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80083b6:	f7fe f959 	bl	800666c <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80083ba:	2200      	movs	r2, #0
 80083bc:	4ba8      	ldr	r3, [pc, #672]	; (8008660 <main+0x1480>)
 80083be:	f7fe f9ad 	bl	800671c <__aeabi_dmul>
 80083c2:	2200      	movs	r2, #0
 80083c4:	4ba7      	ldr	r3, [pc, #668]	; (8008664 <main+0x1484>)
 80083c6:	f7fd fff3 	bl	80063b0 <__adddf3>
 80083ca:	f005 f975 	bl	800d6b8 <floor>
 80083ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8008658 <main+0x1478>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7fe f9a2 	bl	800671c <__aeabi_dmul>
 80083d8:	f7fe fc98 	bl	8006d0c <__aeabi_d2f>
	humidity = BME280_getHumidity(-1);
 80083dc:	f7fe f946 	bl	800666c <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 80083e0:	23f7      	movs	r3, #247	; 0xf7
 80083e2:	e9cb 0134 	strd	r0, r1, [fp, #208]	; 0xd0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80083e6:	2201      	movs	r2, #1
 80083e8:	20ec      	movs	r0, #236	; 0xec
 80083ea:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xF7; // press_msb
 80083ec:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80083f0:	f7fb fbca 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80083f4:	2203      	movs	r2, #3
 80083f6:	20ec      	movs	r0, #236	; 0xec
 80083f8:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80083fc:	f7fb f9b2 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 8008400:	1061      	asrs	r1, r4, #1
 8008402:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8008406:	1088      	asrs	r0, r1, #2
 8008408:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 800840c:	f9bb 35bc 	ldrsh.w	r3, [fp, #1468]	; 0x5bc
 8008410:	f9bb 25be 	ldrsh.w	r2, [fp, #1470]	; 0x5be
 8008414:	fb01 f303 	mul.w	r3, r1, r3
 8008418:	1344      	asrs	r4, r0, #13
 800841a:	fb04 f202 	mul.w	r2, r4, r2
 800841e:	105b      	asrs	r3, r3, #1
 8008420:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8008424:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8008426:	f8bb 25ba 	ldrh.w	r2, [fp, #1466]	; 0x5ba
 800842a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800842e:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 8008432:	13da      	asrs	r2, r3, #15
 8008434:	f000 8271 	beq.w	800891a <main+0x173a>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8008438:	f9bb 35c2 	ldrsh.w	r3, [fp, #1474]	; 0x5c2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800843c:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 800843e:	fb03 f101 	mul.w	r1, r3, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8008442:	f9bb 35c4 	ldrsh.w	r3, [fp, #1476]	; 0x5c4
    var2 = var2 + ((var1 * dig_P5) << 1);
 8008446:	0049      	lsls	r1, r1, #1
 8008448:	fb03 1100 	mla	r1, r3, r0, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800844c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8008450:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800845a:	f9bb 05c0 	ldrsh.w	r0, [fp, #1472]	; 0x5c0
 800845e:	0400      	lsls	r0, r0, #16
 8008460:	eb00 01a1 	add.w	r1, r0, r1, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008464:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8008468:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 800846c:	eb03 3321 	add.w	r3, r3, r1, asr #12
 8008470:	497d      	ldr	r1, [pc, #500]	; (8008668 <main+0x1488>)
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800847a:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 800847e:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 8008480:	bfb3      	iteet	lt
 8008482:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8008486:	005b      	lslge	r3, r3, #1
 8008488:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 800848c:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800848e:	08da      	lsrs	r2, r3, #3
 8008490:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8008494:	f9bb 15c8 	ldrsh.w	r1, [fp, #1480]	; 0x5c8
 8008498:	0898      	lsrs	r0, r3, #2
 800849a:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800849e:	f9bb 15ca 	ldrsh.w	r1, [fp, #1482]	; 0x5ca
 80084a2:	0b52      	lsrs	r2, r2, #13
 80084a4:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80084a8:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 80084aa:	eb00 3022 	add.w	r0, r0, r2, asr #12
 80084ae:	f9bb 25c6 	ldrsh.w	r2, [fp, #1478]	; 0x5c6
 80084b2:	4410      	add	r0, r2
    pressf = (float) press;
 80084b4:	eb03 1020 	add.w	r0, r3, r0, asr #4
 80084b8:	f7fe fe1a 	bl	80070f0 <__aeabi_ui2f>
    return (pressf / 100.0f);
 80084bc:	496b      	ldr	r1, [pc, #428]	; (800866c <main+0x148c>)
 80084be:	f7fe fcad 	bl	8006e1c <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 80084c2:	f7fe fe6d 	bl	80071a0 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80084c6:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 80084ca:	f240 321e 	movw	r2, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 80084ce:	b283      	uxth	r3, r0
 80084d0:	f8ab 30ea 	strh.w	r3, [fp, #234]	; 0xea
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80084d4:	440b      	add	r3, r1
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4293      	cmp	r3, r2
 80084da:	d801      	bhi.n	80084e0 <main+0x1300>
 80084dc:	f7fd f88c 	bl	80055f8 <bme280.part.0>
			rtcSecLast = rtcSec;
 80084e0:	f89b 35da 	ldrb.w	r3, [fp, #1498]	; 0x5da
 80084e4:	4a62      	ldr	r2, [pc, #392]	; (8008670 <main+0x1490>)
 80084e6:	7213      	strb	r3, [r2, #8]
		if (rx_index != 0) {
 80084e8:	f89b 35d9 	ldrb.w	r3, [fp, #1497]	; 0x5d9
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f43f abd8 	beq.w	8007ca2 <main+0xac2>
  return uwTick;
 80084f2:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 80084f6:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	2bc8      	cmp	r3, #200	; 0xc8
 80084fe:	d9fa      	bls.n	80084f6 <main+0x1316>
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008500:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 8008504:	2700      	movs	r7, #0
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008506:	f8bb 25e0 	ldrh.w	r2, [fp, #1504]	; 0x5e0
			rx_index = 0;
 800850a:	f88b 75d9 	strb.w	r7, [fp, #1497]	; 0x5d9
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 800850e:	429a      	cmp	r2, r3
 8008510:	f040 8093 	bne.w	800863a <main+0x145a>
    __HAL_LOCK(hi2c);
 8008514:	2501      	movs	r5, #1
 8008516:	463c      	mov	r4, r7
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008518:	f8df a158 	ldr.w	sl, [pc, #344]	; 8008674 <main+0x1494>
 800851c:	fa1f f887 	uxth.w	r8, r7
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8008520:	4640      	mov	r0, r8
 8008522:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8008524:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8008528:	f7fa fde4 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 800852c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8008530:	2b00      	cmp	r3, #0
 8008532:	d06c      	beq.n	800860e <main+0x142e>
  return uwTick;
 8008534:	f8db 6054 	ldr.w	r6, [fp, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008538:	f89b 303d 	ldrb.w	r3, [fp, #61]	; 0x3d
    uint8_t save[] = {val};
 800853c:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
 8008540:	2b20      	cmp	r3, #32
 8008542:	d164      	bne.n	800860e <main+0x142e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008544:	f8db 1000 	ldr.w	r1, [fp]
 8008548:	e005      	b.n	8008556 <main+0x1376>
 800854a:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800854e:	1b92      	subs	r2, r2, r6
 8008550:	2a19      	cmp	r2, #25
 8008552:	f200 81bf 	bhi.w	80088d4 <main+0x16f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008556:	698b      	ldr	r3, [r1, #24]
 8008558:	43db      	mvns	r3, r3
 800855a:	f013 0302 	ands.w	r3, r3, #2
 800855e:	d0f4      	beq.n	800854a <main+0x136a>
    __HAL_LOCK(hi2c);
 8008560:	f89b 303c 	ldrb.w	r3, [fp, #60]	; 0x3c
 8008564:	2b01      	cmp	r3, #1
 8008566:	d052      	beq.n	800860e <main+0x142e>
 8008568:	f88b 503c 	strb.w	r5, [fp, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800856c:	680b      	ldr	r3, [r1, #0]
 800856e:	07d8      	lsls	r0, r3, #31
 8008570:	d403      	bmi.n	800857a <main+0x139a>
      __HAL_I2C_ENABLE(hi2c);
 8008572:	680b      	ldr	r3, [r1, #0]
 8008574:	f043 0301 	orr.w	r3, r3, #1
 8008578:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800857a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800857e:	2240      	movs	r2, #64	; 0x40
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008580:	680b      	ldr	r3, [r1, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008582:	4640      	mov	r0, r8
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008588:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800858a:	f88b c03d 	strb.w	ip, [fp, #61]	; 0x3d
    hi2c->pBuffPtr    = pData;
 800858e:	ab1e      	add	r3, sp, #120	; 0x78
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008590:	f88b 203e 	strb.w	r2, [fp, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008594:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008598:	f8ab 502a 	strh.w	r5, [fp, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800859c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80085a0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085a4:	4631      	mov	r1, r6
    hi2c->XferSize    = hi2c->XferCount;
 80085a6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085aa:	f8cb a02c 	str.w	sl, [fp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085ae:	f7fa fcc5 	bl	8002f3c <I2C_RequestMemoryWrite.constprop.0>
 80085b2:	bb60      	cbnz	r0, 800860e <main+0x142e>
    while (hi2c->XferSize > 0U)
 80085b4:	f8bb 0028 	ldrh.w	r0, [fp, #40]	; 0x28
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f000 8254 	beq.w	8008a66 <main+0x1886>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085be:	f8db 1000 	ldr.w	r1, [fp]
 80085c2:	694b      	ldr	r3, [r1, #20]
 80085c4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80085c8:	f040 811f 	bne.w	800880a <main+0x162a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085cc:	694a      	ldr	r2, [r1, #20]
 80085ce:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80085d2:	f040 8158 	bne.w	8008886 <main+0x16a6>
 80085d6:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085da:	1b9b      	subs	r3, r3, r6
 80085dc:	2b64      	cmp	r3, #100	; 0x64
 80085de:	d9f0      	bls.n	80085c2 <main+0x13e2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80085e0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085e2:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80085e6:	f88b 303d 	strb.w	r3, [fp, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085ea:	f88b 203e 	strb.w	r2, [fp, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085ee:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80085f2:	f88b 203c 	strb.w	r2, [fp, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085f6:	f043 0320 	orr.w	r3, r3, #32
 80085fa:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085fe:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 8008602:	2b04      	cmp	r3, #4
 8008604:	d103      	bne.n	800860e <main+0x142e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008606:	680b      	ldr	r3, [r1, #0]
 8008608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800860c:	600b      	str	r3, [r1, #0]
			for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 800860e:	3701      	adds	r7, #1
 8008610:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8008614:	d182      	bne.n	800851c <main+0x133c>
			uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8008616:	4d18      	ldr	r5, [pc, #96]	; (8008678 <main+0x1498>)
 8008618:	ac1e      	add	r4, sp, #120	; 0x78
 800861a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800861c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 800861e:	f89b 60bd 	ldrb.w	r6, [fp, #189]	; 0xbd
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	2e20      	cmp	r6, #32
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	d107      	bne.n	800863a <main+0x145a>
    __HAL_LOCK(huart);
 800862a:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 800862e:	2b01      	cmp	r3, #1
 8008630:	d003      	beq.n	800863a <main+0x145a>
 8008632:	2114      	movs	r1, #20
 8008634:	a81e      	add	r0, sp, #120	; 0x78
 8008636:	f7fb fc61 	bl	8003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>
		if (memcmp(rx_buffer, "RT", 2) == 0) {
 800863a:	f245 4352 	movw	r3, #21586	; 0x5452
 800863e:	f8bb 25e0 	ldrh.w	r2, [fp, #1504]	; 0x5e0
 8008642:	429a      	cmp	r2, r3
 8008644:	f000 816c 	beq.w	8008920 <main+0x1740>
		for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8008648:	22ff      	movs	r2, #255	; 0xff
 800864a:	2100      	movs	r1, #0
 800864c:	480b      	ldr	r0, [pc, #44]	; (800867c <main+0x149c>)
 800864e:	f000 fbef 	bl	8008e30 <memset>
 8008652:	f7ff bb26 	b.w	8007ca2 <main+0xac2>
 8008656:	bf00      	nop
 8008658:	9999999a 	.word	0x9999999a
 800865c:	3fb99999 	.word	0x3fb99999
 8008660:	40240000 	.word	0x40240000
 8008664:	3fe00000 	.word	0x3fe00000
 8008668:	fffff3cb 	.word	0xfffff3cb
 800866c:	3c23d70a 	.word	0x3c23d70a
 8008670:	20000000 	.word	0x20000000
 8008674:	ffff0000 	.word	0xffff0000
 8008678:	0801f038 	.word	0x0801f038
 800867c:	200007e0 	.word	0x200007e0
			a_++;
 8008680:	9906      	ldr	r1, [sp, #24]
			P = (P + 3) + (2 * a_);
 8008682:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8008686:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8008688:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 800868a:	3301      	adds	r3, #1
 800868c:	1c62      	adds	r2, r4, #1
 800868e:	428e      	cmp	r6, r1
 8008690:	9203      	str	r2, [sp, #12]
 8008692:	9306      	str	r3, [sp, #24]
 8008694:	f6bf abfa 	bge.w	8007e8c <main+0xcac>
			if (rtcSec % 2 != 0) {
 8008698:	e9dd 3b08 	ldrd	r3, fp, [sp, #32]
 800869c:	f013 0601 	ands.w	r6, r3, #1
 80086a0:	f47f ac6a 	bne.w	8007f78 <main+0xd98>
	b_ = radius;
 80086a4:	f04f 0907 	mov.w	r9, #7
 80086a8:	2701      	movs	r7, #1
	P = 1 - radius;
 80086aa:	f06f 0805 	mvn.w	r8, #5
 80086ae:	46ca      	mov	sl, r9
 80086b0:	f8cd b00c 	str.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80086b4:	f04f 0c00 	mov.w	ip, #0
 80086b8:	ea4f 044a 	mov.w	r4, sl, lsl #1
 80086bc:	b2bd      	uxth	r5, r7
 80086be:	1c72      	adds	r2, r6, #1
 80086c0:	3401      	adds	r4, #1
 80086c2:	b2a4      	uxth	r4, r4
 80086c4:	fa1f fb82 	uxth.w	fp, r2
 80086c8:	f1ca 0123 	rsb	r1, sl, #35	; 0x23
 80086cc:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80086d0:	4623      	mov	r3, r4
 80086d2:	465a      	mov	r2, fp
 80086d4:	b289      	uxth	r1, r1
 80086d6:	b280      	uxth	r0, r0
 80086d8:	f8cd c000 	str.w	ip, [sp]
 80086dc:	f7f8 f9f4 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	f1ca 00ac 	rsb	r0, sl, #172	; 0xac
 80086e8:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 80086ec:	4622      	mov	r2, r4
 80086ee:	b289      	uxth	r1, r1
 80086f0:	465b      	mov	r3, fp
 80086f2:	f8cd c000 	str.w	ip, [sp]
 80086f6:	b280      	uxth	r0, r0
 80086f8:	f7f8 f9e6 	bl	8000ac8 <LCD_Rect_Fill>
 80086fc:	1e7c      	subs	r4, r7, #1
		if (P < 0)
 80086fe:	f1b8 0f00 	cmp.w	r8, #0
			P = (P + 5) + (2 * (a_ - b_));
 8008702:	eba4 0409 	sub.w	r4, r4, r9
 8008706:	f108 0205 	add.w	r2, r8, #5
			P = (P + 3) + (2 * a_);
 800870a:	f108 0103 	add.w	r1, r8, #3
		if (P < 0)
 800870e:	f2c0 80fa 	blt.w	8008906 <main+0x1726>
			b_--;
 8008712:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8008716:	454f      	cmp	r7, r9
			P = (P + 5) + (2 * (a_ - b_));
 8008718:	eb02 0844 	add.w	r8, r2, r4, lsl #1
	while (a_ <= b_)
 800871c:	f106 0602 	add.w	r6, r6, #2
 8008720:	fa1f fa89 	uxth.w	sl, r9
 8008724:	f107 0701 	add.w	r7, r7, #1
 8008728:	ddc4      	ble.n	80086b4 <main+0x14d4>
 800872a:	f04f 0807 	mov.w	r8, #7
 800872e:	f04f 0a00 	mov.w	sl, #0
 8008732:	2601      	movs	r6, #1
 8008734:	f06f 0705 	mvn.w	r7, #5
 8008738:	46c1      	mov	r9, r8
 800873a:	f8dd b00c 	ldr.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800873e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008742:	f04f 0c00 	mov.w	ip, #0
 8008746:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800874a:	b2b5      	uxth	r5, r6
 800874c:	f10a 0201 	add.w	r2, sl, #1
 8008750:	3401      	adds	r4, #1
 8008752:	b2a4      	uxth	r4, r4
 8008754:	fa1f fb82 	uxth.w	fp, r2
 8008758:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 800875c:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8008760:	4623      	mov	r3, r4
 8008762:	465a      	mov	r2, fp
 8008764:	b289      	uxth	r1, r1
 8008766:	b280      	uxth	r0, r0
 8008768:	f8cd c000 	str.w	ip, [sp]
 800876c:	f7f8 f9ac 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8008770:	f04f 0c00 	mov.w	ip, #0
 8008774:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8008778:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 800877c:	4622      	mov	r2, r4
 800877e:	b289      	uxth	r1, r1
 8008780:	465b      	mov	r3, fp
 8008782:	f8cd c000 	str.w	ip, [sp]
 8008786:	b280      	uxth	r0, r0
 8008788:	f7f8 f99e 	bl	8000ac8 <LCD_Rect_Fill>
 800878c:	1e74      	subs	r4, r6, #1
		if (P < 0)
 800878e:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8008790:	eba4 0408 	sub.w	r4, r4, r8
 8008794:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8008798:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 800879c:	f2c0 80a9 	blt.w	80088f2 <main+0x1712>
			b_--;
 80087a0:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 80087a4:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 80087a6:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 80087aa:	f10a 0a02 	add.w	sl, sl, #2
 80087ae:	fa1f f988 	uxth.w	r9, r8
 80087b2:	f106 0601 	add.w	r6, r6, #1
 80087b6:	ddc4      	ble.n	8008742 <main+0x1562>
    GPIOx->BSRR = GPIO_Pin;
 80087b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087bc:	4abc      	ldr	r2, [pc, #752]	; (8008ab0 <main+0x18d0>)
 80087be:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80087c2:	6113      	str	r3, [r2, #16]
 80087c4:	e46a      	b.n	800809c <main+0xebc>
			a_++;
 80087c6:	9906      	ldr	r1, [sp, #24]
			P = (P + 3) + (2 * a_);
 80087c8:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 80087cc:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 80087ce:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 80087d0:	3301      	adds	r3, #1
 80087d2:	1c62      	adds	r2, r4, #1
 80087d4:	428e      	cmp	r6, r1
 80087d6:	9203      	str	r2, [sp, #12]
 80087d8:	9306      	str	r3, [sp, #24]
 80087da:	f6bf aac6 	bge.w	8007d6a <main+0xb8a>
 80087de:	f7ff bb34 	b.w	8007e4a <main+0xc6a>
 80087e2:	4546      	cmp	r6, r8
			P = (P + 3) + (2 * a_);
 80087e4:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 80087e8:	f106 0601 	add.w	r6, r6, #1
 80087ec:	f10a 0a02 	add.w	sl, sl, #2
 80087f0:	f77f abcc 	ble.w	8007f8c <main+0xdac>
 80087f4:	e405      	b.n	8008002 <main+0xe22>
 80087f6:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 80087f8:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 80087fc:	f106 0601 	add.w	r6, r6, #1
 8008800:	f10a 0a02 	add.w	sl, sl, #2
 8008804:	f6bf ac09 	bge.w	800801a <main+0xe3a>
 8008808:	e442      	b.n	8008090 <main+0xeb0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800880a:	f8db e024 	ldr.w	lr, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800880e:	1e43      	subs	r3, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008810:	46f4      	mov	ip, lr
 8008812:	f81c 2b01 	ldrb.w	r2, [ip], #1
      hi2c->XferSize--;
 8008816:	b29b      	uxth	r3, r3
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008818:	610a      	str	r2, [r1, #16]
      hi2c->XferCount--;
 800881a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800881e:	f8cb c024 	str.w	ip, [fp, #36]	; 0x24
      hi2c->XferCount--;
 8008822:	3a01      	subs	r2, #1
 8008824:	b292      	uxth	r2, r2
 8008826:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800882a:	694a      	ldr	r2, [r1, #20]
      hi2c->XferSize--;
 800882c:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008830:	0752      	lsls	r2, r2, #29
 8008832:	d43b      	bmi.n	80088ac <main+0x16cc>
      hi2c->XferSize--;
 8008834:	4618      	mov	r0, r3
    while (hi2c->XferSize > 0U)
 8008836:	2800      	cmp	r0, #0
 8008838:	f47f aec3 	bne.w	80085c2 <main+0x13e2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800883c:	694b      	ldr	r3, [r1, #20]
 800883e:	f013 0304 	ands.w	r3, r3, #4
 8008842:	d10d      	bne.n	8008860 <main+0x1680>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008844:	694a      	ldr	r2, [r1, #20]
 8008846:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800884a:	d11c      	bne.n	8008886 <main+0x16a6>
 800884c:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008850:	1b9b      	subs	r3, r3, r6
 8008852:	2b64      	cmp	r3, #100	; 0x64
 8008854:	f63f aec4 	bhi.w	80085e0 <main+0x1400>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008858:	694b      	ldr	r3, [r1, #20]
 800885a:	f013 0304 	ands.w	r3, r3, #4
 800885e:	d0f1      	beq.n	8008844 <main+0x1664>
    hi2c->State = HAL_I2C_STATE_READY;
 8008860:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008862:	680b      	ldr	r3, [r1, #0]
 8008864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008868:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800886a:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800886e:	f88b 403e 	strb.w	r4, [fp, #62]	; 0x3e
 8008872:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    __HAL_UNLOCK(hi2c);
 8008876:	f88b 403c 	strb.w	r4, [fp, #60]	; 0x3c
 800887a:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	2b05      	cmp	r3, #5
 8008882:	d9fa      	bls.n	800887a <main+0x169a>
 8008884:	e6c3      	b.n	800860e <main+0x142e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800888a:	614a      	str	r2, [r1, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 800888c:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800888e:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008892:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008896:	f88b 303e 	strb.w	r3, [fp, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800889a:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800889e:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 80088a2:	f043 0304 	orr.w	r3, r3, #4
 80088a6:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80088aa:	e6a8      	b.n	80085fe <main+0x141e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0c5      	beq.n	800883c <main+0x165c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088b0:	f89e 3001 	ldrb.w	r3, [lr, #1]
        hi2c->XferSize--;
 80088b4:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088b6:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 80088b8:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
        hi2c->XferSize--;
 80088bc:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 80088be:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 80088c0:	f10e 0302 	add.w	r3, lr, #2
        hi2c->XferCount--;
 80088c4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80088c6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
        hi2c->XferSize--;
 80088ca:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
        hi2c->XferCount--;
 80088ce:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
 80088d2:	e7b0      	b.n	8008836 <main+0x1656>
        hi2c->State             = HAL_I2C_STATE_READY;
 80088d4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088d6:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088da:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088de:	f88b 303e 	strb.w	r3, [fp, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 80088e2:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088e6:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80088f0:	e68d      	b.n	800860e <main+0x142e>
 80088f2:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 80088f4:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 80088f8:	f106 0601 	add.w	r6, r6, #1
 80088fc:	f10a 0a02 	add.w	sl, sl, #2
 8008900:	f6bf af1f 	bge.w	8008742 <main+0x1562>
 8008904:	e758      	b.n	80087b8 <main+0x15d8>
 8008906:	45b9      	cmp	r9, r7
			P = (P + 3) + (2 * a_);
 8008908:	eb06 0801 	add.w	r8, r6, r1
	while (a_ <= b_)
 800890c:	f107 0701 	add.w	r7, r7, #1
 8008910:	f106 0602 	add.w	r6, r6, #2
 8008914:	f6bf aece 	bge.w	80086b4 <main+0x14d4>
 8008918:	e707      	b.n	800872a <main+0x154a>
	pressure = (uint16_t)BME280_getPressure();
 800891a:	f8ab 20ea 	strh.w	r2, [fp, #234]	; 0xea
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800891e:	e5df      	b.n	80084e0 <main+0x1300>
			val[0] = rx_buffer[2];
 8008920:	f8bb 35e2 	ldrh.w	r3, [fp, #1506]	; 0x5e2
			DS3231_setHrs(atoi(val));
 8008924:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[2];
 8008926:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setHrs(atoi(val));
 800892a:	f000 fa52 	bl	8008dd2 <atoi>
    return ((val / 10 * 16) + (val % 10));
 800892e:	240a      	movs	r4, #10
 8008930:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 8008932:	f7fb fa5d 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008936:	fbb5 f6f4 	udiv	r6, r5, r4
 800893a:	fb04 5316 	mls	r3, r4, r6, r5
 800893e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008942:	2211      	movs	r2, #17
 8008944:	495b      	ldr	r1, [pc, #364]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[3] = decToBcd(value);
 8008946:	f88b 306f 	strb.w	r3, [fp, #111]	; 0x6f
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800894a:	20d0      	movs	r0, #208	; 0xd0
 800894c:	f7fb f91c 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[4];
 8008950:	f8bb 35e4 	ldrh.w	r3, [fp, #1508]	; 0x5e4
			DS3231_setMin(atoi(val));
 8008954:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[4];
 8008956:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMin(atoi(val));
 800895a:	f000 fa3a 	bl	8008dd2 <atoi>
 800895e:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8008960:	f7fb fa46 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008964:	fbb5 f6f4 	udiv	r6, r5, r4
 8008968:	fb04 5316 	mls	r3, r4, r6, r5
 800896c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008970:	2211      	movs	r2, #17
 8008972:	4950      	ldr	r1, [pc, #320]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[2] = decToBcd(value);
 8008974:	f88b 306e 	strb.w	r3, [fp, #110]	; 0x6e
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008978:	20d0      	movs	r0, #208	; 0xd0
 800897a:	f7fb f905 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[6];
 800897e:	f8bb 35e6 	ldrh.w	r3, [fp, #1510]	; 0x5e6
			DS3231_setSec(atoi(val));
 8008982:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[6];
 8008984:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setSec(atoi(val));
 8008988:	f000 fa23 	bl	8008dd2 <atoi>
 800898c:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 800898e:	f7fb fa2f 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008992:	fbb5 f6f4 	udiv	r6, r5, r4
 8008996:	fb04 5316 	mls	r3, r4, r6, r5
 800899a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800899e:	2211      	movs	r2, #17
 80089a0:	4944      	ldr	r1, [pc, #272]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[1] = decToBcd(value);
 80089a2:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089a6:	20d0      	movs	r0, #208	; 0xd0
 80089a8:	f7fb f8ee 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[8];
 80089ac:	f8bb 35e8 	ldrh.w	r3, [fp, #1512]	; 0x5e8
			DS3231_setDate(atoi(val));
 80089b0:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[8];
 80089b2:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setDate(atoi(val));
 80089b6:	f000 fa0c 	bl	8008dd2 <atoi>
 80089ba:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 80089bc:	f7fb fa18 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80089c0:	fbb5 f6f4 	udiv	r6, r5, r4
 80089c4:	fb04 5316 	mls	r3, r4, r6, r5
 80089c8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089cc:	2211      	movs	r2, #17
 80089ce:	4939      	ldr	r1, [pc, #228]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[5] = decToBcd(value);
 80089d0:	f88b 3071 	strb.w	r3, [fp, #113]	; 0x71
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089d4:	20d0      	movs	r0, #208	; 0xd0
 80089d6:	f7fb f8d7 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[10];
 80089da:	f8bb 35ea 	ldrh.w	r3, [fp, #1514]	; 0x5ea
			DS3231_setMonth(atoi(val));
 80089de:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[10];
 80089e0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMonth(atoi(val));
 80089e4:	f000 f9f5 	bl	8008dd2 <atoi>
 80089e8:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 80089ea:	f7fb fa01 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80089ee:	fbb5 f6f4 	udiv	r6, r5, r4
 80089f2:	fb04 5316 	mls	r3, r4, r6, r5
 80089f6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089fa:	2211      	movs	r2, #17
 80089fc:	492d      	ldr	r1, [pc, #180]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[6] = decToBcd(value);
 80089fe:	f88b 3072 	strb.w	r3, [fp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008a02:	20d0      	movs	r0, #208	; 0xd0
 8008a04:	f7fb f8c0 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[12];
 8008a08:	f8bb 35ec 	ldrh.w	r3, [fp, #1516]	; 0x5ec
			DS3231_setYear(atoi(val));
 8008a0c:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[12];
 8008a0e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setYear(atoi(val));
 8008a12:	f000 f9de 	bl	8008dd2 <atoi>
 8008a16:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 8008a18:	f7fb f9ea 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008a1c:	fbb5 f6f4 	udiv	r6, r5, r4
 8008a20:	fb04 5316 	mls	r3, r4, r6, r5
 8008a24:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008a28:	2211      	movs	r2, #17
 8008a2a:	4922      	ldr	r1, [pc, #136]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[7] = decToBcd(value);
 8008a2c:	f88b 3073 	strb.w	r3, [fp, #115]	; 0x73
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008a30:	20d0      	movs	r0, #208	; 0xd0
 8008a32:	f7fb f8a9 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[1] = rx_buffer[14];
 8008a36:	f89b 35ee 	ldrb.w	r3, [fp, #1518]	; 0x5ee
			DS3231_setDay(atoi(val));
 8008a3a:	a81e      	add	r0, sp, #120	; 0x78
			val[1] = rx_buffer[14];
 8008a3c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
			DS3231_setDay(atoi(val));
 8008a40:	f000 f9c7 	bl	8008dd2 <atoi>
 8008a44:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8008a46:	f7fb f9d3 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008a4a:	fbb5 f2f4 	udiv	r2, r5, r4
 8008a4e:	fb04 5312 	mls	r3, r4, r2, r5
 8008a52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008a56:	20d0      	movs	r0, #208	; 0xd0
 8008a58:	2211      	movs	r2, #17
 8008a5a:	4916      	ldr	r1, [pc, #88]	; (8008ab4 <main+0x18d4>)
    rtcBufferSet[4] = decToBcd(value);
 8008a5c:	f88b 3070 	strb.w	r3, [fp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008a60:	f7fb f892 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 8008a64:	e5f0      	b.n	8008648 <main+0x1468>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a66:	f8db 1000 	ldr.w	r1, [fp]
 8008a6a:	e6e7      	b.n	800883c <main+0x165c>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008a72:	4911      	ldr	r1, [pc, #68]	; (8008ab8 <main+0x18d8>)
 8008a74:	f7fb fb64 	bl	8004140 <LCD_Font.constprop.2>
 8008a78:	f7ff bb69 	b.w	800814e <main+0xf6e>
 8008a7c:	b672      	cpsid	i
	while (1)
 8008a7e:	e7fe      	b.n	8008a7e <main+0x189e>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a80:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008a84:	3290      	adds	r2, #144	; 0x90
 8008a86:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a88:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a8a:	f812 6c18 	ldrb.w	r6, [r2, #-24]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a8e:	f140 80cb 	bpl.w	8008c28 <main+0x1a48>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a92:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <main+0x18dc>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a96:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a9a:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a9e:	3390      	adds	r3, #144	; 0x90
 8008aa0:	446b      	add	r3, sp
 8008aa2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008aa6:	fbb6 f6f3 	udiv	r6, r6, r3
 8008aaa:	f7fe bc93 	b.w	80073d4 <main+0x1f4>
 8008aae:	bf00      	nop
 8008ab0:	40011000 	.word	0x40011000
 8008ab4:	2000026c 	.word	0x2000026c
 8008ab8:	0801eff4 	.word	0x0801eff4
 8008abc:	007a1200 	.word	0x007a1200
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ac0:	2203      	movs	r2, #3
    hi2c->Lock = HAL_UNLOCKED;
 8008ac2:	f88b 503c 	strb.w	r5, [fp, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ac6:	9520      	str	r5, [sp, #128]	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ac8:	69a3      	ldr	r3, [r4, #24]
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008aca:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008acc:	f043 0308 	orr.w	r3, r3, #8
 8008ad0:	61a3      	str	r3, [r4, #24]
 8008ad2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ad4:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008adc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ade:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ae0:	2312      	movs	r3, #18
 8008ae2:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ae6:	f7f8 fce5 	bl	80014b4 <HAL_GPIO_Init>
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008aea:	2010      	movs	r0, #16
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008aec:	2214      	movs	r2, #20
  hdma->Lock = HAL_UNLOCKED;
 8008aee:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008af2:	f04f 0c18 	mov.w	ip, #24
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008af6:	69e3      	ldr	r3, [r4, #28]
 8008af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008afc:	61e3      	str	r3, [r4, #28]
 8008afe:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b00:	f8cb 04a8 	str.w	r0, [fp, #1192]	; 0x4a8
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b08:	9312      	str	r3, [sp, #72]	; 0x48
 8008b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  hdma->DmaBaseAddress = DMA1;
 8008b0c:	4b94      	ldr	r3, [pc, #592]	; (8008d60 <main+0x1b80>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b0e:	f8cb 54ac 	str.w	r5, [fp, #1196]	; 0x4ac
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b12:	f8cb 54b4 	str.w	r5, [fp, #1204]	; 0x4b4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b16:	f8cb 24e4 	str.w	r2, [fp, #1252]	; 0x4e4
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b1a:	f8cb 74b0 	str.w	r7, [fp, #1200]	; 0x4b0
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b1e:	f8cb 54b8 	str.w	r5, [fp, #1208]	; 0x4b8
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008b22:	f8cb 54bc 	str.w	r5, [fp, #1212]	; 0x4bc
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b26:	f8cb 54c0 	str.w	r5, [fp, #1216]	; 0x4c0
  tmp = hdma->Instance->CCR;
 8008b2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b2c:	488d      	ldr	r0, [pc, #564]	; (8008d64 <main+0x1b84>)
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8008b2e:	4c8e      	ldr	r4, [pc, #568]	; (8008d68 <main+0x1b88>)
 8008b30:	4002      	ands	r2, r0
  tmp |=  hdma->Init.Direction        |
 8008b32:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 8008b36:	f8cb 44a4 	str.w	r4, [fp, #1188]	; 0x4a4
  hdma->DmaBaseAddress = DMA1;
 8008b3a:	f8cb 34e0 	str.w	r3, [fp, #1248]	; 0x4e0
  hdma->Instance->CCR = tmp;
 8008b3e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b40:	f8cb 74f4 	str.w	r7, [fp, #1268]	; 0x4f4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b44:	f8cb c528 	str.w	ip, [fp, #1320]	; 0x528
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b48:	f8cb 54dc 	str.w	r5, [fp, #1244]	; 0x4dc
  hdma->Lock = HAL_UNLOCKED;
 8008b4c:	f8ab 14c4 	strh.w	r1, [fp, #1220]	; 0x4c4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b50:	f8cb 54ec 	str.w	r5, [fp, #1260]	; 0x4ec
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b54:	f8cb 54f0 	str.w	r5, [fp, #1264]	; 0x4f0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b58:	f8cb 54f8 	str.w	r5, [fp, #1272]	; 0x4f8
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b5c:	f8cb 54fc 	str.w	r5, [fp, #1276]	; 0x4fc
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008b60:	f8cb 5500 	str.w	r5, [fp, #1280]	; 0x500
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b64:	f8cb 5504 	str.w	r5, [fp, #1284]	; 0x504
  tmp = hdma->Instance->CCR;
 8008b68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008b6c:	3414      	adds	r4, #20
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b6e:	4002      	ands	r2, r0
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8008b70:	487e      	ldr	r0, [pc, #504]	; (8008d6c <main+0x1b8c>)
  tmp |=  hdma->Init.Direction        |
 8008b72:	433a      	orrs	r2, r7
 8008b74:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008b78:	3044      	adds	r0, #68	; 0x44
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8008b7a:	f8cb b4c8 	str.w	fp, [fp, #1224]	; 0x4c8
  hdma->DmaBaseAddress = DMA1;
 8008b7e:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008b82:	f8cb 44e8 	str.w	r4, [fp, #1256]	; 0x4e8
  hdma->Instance->CCR = tmp;
 8008b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b8a:	f8cb 5520 	str.w	r5, [fp, #1312]	; 0x520
  hdma->Lock = HAL_UNLOCKED;
 8008b8e:	f8ab 1508 	strh.w	r1, [fp, #1288]	; 0x508
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008b92:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
 8008b96:	f8cb b50c 	str.w	fp, [fp, #1292]	; 0x50c
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008b9a:	f7fe bca1 	b.w	80074e0 <main+0x300>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b9e:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8008ba2:	fb04 f202 	mul.w	r2, r4, r2
 8008ba6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008baa:	fbb2 f2f4 	udiv	r2, r2, r4
 8008bae:	3201      	adds	r2, #1
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	6202      	str	r2, [r0, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bb4:	69c1      	ldr	r1, [r0, #28]
 8008bb6:	f8db c008 	ldr.w	ip, [fp, #8]
 8008bba:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008bbe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008bc2:	f1bc 0f00 	cmp.w	ip, #0
 8008bc6:	d11d      	bne.n	8008c04 <main+0x1a24>
 8008bc8:	1e5f      	subs	r7, r3, #1
 8008bca:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8008bce:	fbb7 f4f4 	udiv	r4, r7, r4
 8008bd2:	0524      	lsls	r4, r4, #20
 8008bd4:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8008bd8:	bf14      	ite	ne
 8008bda:	2400      	movne	r4, #0
 8008bdc:	2401      	moveq	r4, #1
 8008bde:	006a      	lsls	r2, r5, #1
 8008be0:	b96c      	cbnz	r4, 8008bfe <main+0x1a1e>
 8008be2:	f1bc 0f00 	cmp.w	ip, #0
 8008be6:	f040 80ab 	bne.w	8008d40 <main+0x1b60>
 8008bea:	1953      	adds	r3, r2, r5
 8008bec:	fbb7 f3f3 	udiv	r3, r7, r3
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bfa:	f7fe bcbc 	b.w	8007576 <main+0x396>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f7fe bcb9 	b.w	8007576 <main+0x396>
 8008c04:	2419      	movs	r4, #25
 8008c06:	fb05 f404 	mul.w	r4, r5, r4
 8008c0a:	1e5f      	subs	r7, r3, #1
 8008c0c:	fbb7 f4f4 	udiv	r4, r7, r4
 8008c10:	0524      	lsls	r4, r4, #20
 8008c12:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8008c16:	bf14      	ite	ne
 8008c18:	2400      	movne	r4, #0
 8008c1a:	2401      	moveq	r4, #1
 8008c1c:	006a      	lsls	r2, r5, #1
 8008c1e:	e7df      	b.n	8008be0 <main+0x1a00>
 8008c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c24:	f7fe bca7 	b.w	8007576 <main+0x396>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008c28:	4b51      	ldr	r3, [pc, #324]	; (8008d70 <main+0x1b90>)
 8008c2a:	fb03 f606 	mul.w	r6, r3, r6
 8008c2e:	f7fe bbd1 	b.w	80073d4 <main+0x1f4>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c32:	2203      	movs	r2, #3
    huart->Lock = HAL_UNLOCKED;
 8008c34:	f88b 40bc 	strb.w	r4, [fp, #188]	; 0xbc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c38:	9420      	str	r4, [sp, #128]	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c3a:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c3c:	484d      	ldr	r0, [pc, #308]	; (8008d74 <main+0x1b94>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c46:	a91e      	add	r1, sp, #120	; 0x78
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4c:	9315      	str	r3, [sp, #84]	; 0x54
 8008c4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c50:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008c52:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008d78 <main+0x1b98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c56:	f043 0304 	orr.w	r3, r3, #4
 8008c5a:	61bb      	str	r3, [r7, #24]
 8008c5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c5e:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008c66:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c72:	f7f8 fc1f 	bl	80014b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c7a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	9420      	str	r4, [sp, #128]	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008c7e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c82:	f7f8 fc17 	bl	80014b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c86:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c8a:	f04f 0c10 	mov.w	ip, #16
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008c8e:	f8cb 556c 	str.w	r5, [fp, #1388]	; 0x56c
  hdma->Lock = HAL_UNLOCKED;
 8008c92:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->DmaBaseAddress = DMA1;
 8008c96:	4b32      	ldr	r3, [pc, #200]	; (8008d60 <main+0x1b80>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c98:	f8cb 4534 	str.w	r4, [fp, #1332]	; 0x534
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c9c:	f8cb 453c 	str.w	r4, [fp, #1340]	; 0x53c
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ca0:	f8cb 4540 	str.w	r4, [fp, #1344]	; 0x540
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008ca4:	f8cb 4544 	str.w	r4, [fp, #1348]	; 0x544
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ca8:	f8cb 4548 	str.w	r4, [fp, #1352]	; 0x548
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cac:	f8cb c530 	str.w	ip, [fp, #1328]	; 0x530
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008cb0:	f8cb e538 	str.w	lr, [fp, #1336]	; 0x538
  tmp = hdma->Instance->CCR;
 8008cb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008cb6:	4f2b      	ldr	r7, [pc, #172]	; (8008d64 <main+0x1b84>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008cb8:	4a30      	ldr	r2, [pc, #192]	; (8008d7c <main+0x1b9c>)
 8008cba:	4039      	ands	r1, r7
  tmp |=  hdma->Init.Direction        |
 8008cbc:	f041 0190 	orr.w	r1, r1, #144	; 0x90
 8008cc0:	f8cb 252c 	str.w	r2, [fp, #1324]	; 0x52c
  hdma->DmaBaseAddress = DMA1;
 8008cc4:	f8cb 3568 	str.w	r3, [fp, #1384]	; 0x568
  hdma->Instance->CCR = tmp;
 8008cc8:	6459      	str	r1, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cca:	f8cb 4564 	str.w	r4, [fp, #1380]	; 0x564
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008cce:	f8cb e57c 	str.w	lr, [fp, #1404]	; 0x57c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008cd2:	f8cb c5b0 	str.w	ip, [fp, #1456]	; 0x5b0
  hdma->Lock = HAL_UNLOCKED;
 8008cd6:	f8ab 554c 	strh.w	r5, [fp, #1356]	; 0x54c
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cda:	f8cb 4574 	str.w	r4, [fp, #1396]	; 0x574
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cde:	f8cb 4578 	str.w	r4, [fp, #1400]	; 0x578
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ce2:	f8cb 4580 	str.w	r4, [fp, #1408]	; 0x580
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ce6:	f8cb 4584 	str.w	r4, [fp, #1412]	; 0x584
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008cea:	f8cb 4588 	str.w	r4, [fp, #1416]	; 0x588
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008cee:	f8cb 458c 	str.w	r4, [fp, #1420]	; 0x58c
  tmp = hdma->Instance->CCR;
 8008cf2:	6d99      	ldr	r1, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008cf4:	4a22      	ldr	r2, [pc, #136]	; (8008d80 <main+0x1ba0>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008cf6:	4039      	ands	r1, r7
 8008cf8:	f2a2 40ac 	subw	r0, r2, #1196	; 0x4ac
 8008cfc:	f8cb 20b4 	str.w	r2, [fp, #180]	; 0xb4
  tmp |=  hdma->Init.Direction        |
 8008d00:	ea41 010e 	orr.w	r1, r1, lr
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008d04:	3244      	adds	r2, #68	; 0x44
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008d06:	f8cb 8570 	str.w	r8, [fp, #1392]	; 0x570
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008d0a:	f8cb 0550 	str.w	r0, [fp, #1360]	; 0x550
  hdma->DmaBaseAddress = DMA1;
 8008d0e:	f8cb 35ac 	str.w	r3, [fp, #1452]	; 0x5ac
  hdma->Instance->CCR = tmp;
 8008d12:	6599      	str	r1, [r3, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d14:	f8cb 45a8 	str.w	r4, [fp, #1448]	; 0x5a8
  hdma->Lock = HAL_UNLOCKED;
 8008d18:	f8ab 5590 	strh.w	r5, [fp, #1424]	; 0x590
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008d1c:	f8cb 20b8 	str.w	r2, [fp, #184]	; 0xb8
 8008d20:	f8cb 0594 	str.w	r0, [fp, #1428]	; 0x594
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008d24:	f7fe bcb6 	b.w	8007694 <main+0x4b4>
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d28:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	4915      	ldr	r1, [pc, #84]	; (8008d84 <main+0x1ba4>)
 8008d30:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008d34:	440b      	add	r3, r1
 8008d36:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8008d3a:	40de      	lsrs	r6, r3
 8008d3c:	f7fe bcdd 	b.w	80076fa <main+0x51a>
 8008d40:	2319      	movs	r3, #25
 8008d42:	fb05 f303 	mul.w	r3, r5, r3
 8008d46:	fbb7 f3f3 	udiv	r3, r7, r3
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d54:	f7fe bc0f 	b.w	8007576 <main+0x396>
    __HAL_UNLOCK(hdma); 
 8008d58:	f883 2020 	strb.w	r2, [r3, #32]
 8008d5c:	f7fe bf92 	b.w	8007c84 <main+0xaa4>
 8008d60:	40020000 	.word	0x40020000
 8008d64:	ffffc00f 	.word	0xffffc00f
 8008d68:	4002006c 	.word	0x4002006c
 8008d6c:	200006a4 	.word	0x200006a4
 8008d70:	003d0900 	.word	0x003d0900
 8008d74:	40010800 	.word	0x40010800
 8008d78:	40020058 	.word	0x40020058
 8008d7c:	40020044 	.word	0x40020044
 8008d80:	2000072c 	.word	0x2000072c
 8008d84:	0800d7c8 	.word	0x0800d7c8

08008d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d88:	480c      	ldr	r0, [pc, #48]	; (8008dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d8a:	490d      	ldr	r1, [pc, #52]	; (8008dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d8c:	4a0d      	ldr	r2, [pc, #52]	; (8008dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d90:	e002      	b.n	8008d98 <LoopCopyDataInit>

08008d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d96:	3304      	adds	r3, #4

08008d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d9c:	d3f9      	bcc.n	8008d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d9e:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008da0:	4c0a      	ldr	r4, [pc, #40]	; (8008dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008da4:	e001      	b.n	8008daa <LoopFillZerobss>

08008da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008da8:	3204      	adds	r2, #4

08008daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dac:	d3fb      	bcc.n	8008da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008dae:	f7fd faef 	bl	8006390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008db2:	f000 f819 	bl	8008de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008db6:	f7fe fa13 	bl	80071e0 <main>
  bx lr
 8008dba:	4770      	bx	lr
  ldr r0, =_sdata
 8008dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008dc0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8008dc4:	0801f5ac 	.word	0x0801f5ac
  ldr r2, =_sbss
 8008dc8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008dcc:	200008fc 	.word	0x200008fc

08008dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008dd0:	e7fe      	b.n	8008dd0 <ADC1_2_IRQHandler>

08008dd2 <atoi>:
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f001 bd53 	b.w	800a880 <strtol>
	...

08008ddc <__errno>:
 8008ddc:	4b01      	ldr	r3, [pc, #4]	; (8008de4 <__errno+0x8>)
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000000c 	.word	0x2000000c

08008de8 <__libc_init_array>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	2600      	movs	r6, #0
 8008dec:	4d0c      	ldr	r5, [pc, #48]	; (8008e20 <__libc_init_array+0x38>)
 8008dee:	4c0d      	ldr	r4, [pc, #52]	; (8008e24 <__libc_init_array+0x3c>)
 8008df0:	1b64      	subs	r4, r4, r5
 8008df2:	10a4      	asrs	r4, r4, #2
 8008df4:	42a6      	cmp	r6, r4
 8008df6:	d109      	bne.n	8008e0c <__libc_init_array+0x24>
 8008df8:	f004 fcda 	bl	800d7b0 <_init>
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	4d0a      	ldr	r5, [pc, #40]	; (8008e28 <__libc_init_array+0x40>)
 8008e00:	4c0a      	ldr	r4, [pc, #40]	; (8008e2c <__libc_init_array+0x44>)
 8008e02:	1b64      	subs	r4, r4, r5
 8008e04:	10a4      	asrs	r4, r4, #2
 8008e06:	42a6      	cmp	r6, r4
 8008e08:	d105      	bne.n	8008e16 <__libc_init_array+0x2e>
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e10:	4798      	blx	r3
 8008e12:	3601      	adds	r6, #1
 8008e14:	e7ee      	b.n	8008df4 <__libc_init_array+0xc>
 8008e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1a:	4798      	blx	r3
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	e7f2      	b.n	8008e06 <__libc_init_array+0x1e>
 8008e20:	0801f5a4 	.word	0x0801f5a4
 8008e24:	0801f5a4 	.word	0x0801f5a4
 8008e28:	0801f5a4 	.word	0x0801f5a4
 8008e2c:	0801f5a8 	.word	0x0801f5a8

08008e30 <memset>:
 8008e30:	4603      	mov	r3, r0
 8008e32:	4402      	add	r2, r0
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d100      	bne.n	8008e3a <memset+0xa>
 8008e38:	4770      	bx	lr
 8008e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3e:	e7f9      	b.n	8008e34 <memset+0x4>

08008e40 <__cvt>:
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e46:	461f      	mov	r7, r3
 8008e48:	bfbb      	ittet	lt
 8008e4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008e4e:	461f      	movlt	r7, r3
 8008e50:	2300      	movge	r3, #0
 8008e52:	232d      	movlt	r3, #45	; 0x2d
 8008e54:	b088      	sub	sp, #32
 8008e56:	4614      	mov	r4, r2
 8008e58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008e5c:	7013      	strb	r3, [r2, #0]
 8008e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008e64:	f023 0820 	bic.w	r8, r3, #32
 8008e68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e6c:	d005      	beq.n	8008e7a <__cvt+0x3a>
 8008e6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e72:	d100      	bne.n	8008e76 <__cvt+0x36>
 8008e74:	3501      	adds	r5, #1
 8008e76:	2302      	movs	r3, #2
 8008e78:	e000      	b.n	8008e7c <__cvt+0x3c>
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	aa07      	add	r2, sp, #28
 8008e7e:	9204      	str	r2, [sp, #16]
 8008e80:	aa06      	add	r2, sp, #24
 8008e82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e86:	e9cd 3500 	strd	r3, r5, [sp]
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f001 fd8f 	bl	800a9b0 <_dtoa_r>
 8008e92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e96:	4606      	mov	r6, r0
 8008e98:	d102      	bne.n	8008ea0 <__cvt+0x60>
 8008e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e9c:	07db      	lsls	r3, r3, #31
 8008e9e:	d522      	bpl.n	8008ee6 <__cvt+0xa6>
 8008ea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ea4:	eb06 0905 	add.w	r9, r6, r5
 8008ea8:	d110      	bne.n	8008ecc <__cvt+0x8c>
 8008eaa:	7833      	ldrb	r3, [r6, #0]
 8008eac:	2b30      	cmp	r3, #48	; 0x30
 8008eae:	d10a      	bne.n	8008ec6 <__cvt+0x86>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7fd fe98 	bl	8006bec <__aeabi_dcmpeq>
 8008ebc:	b918      	cbnz	r0, 8008ec6 <__cvt+0x86>
 8008ebe:	f1c5 0501 	rsb	r5, r5, #1
 8008ec2:	f8ca 5000 	str.w	r5, [sl]
 8008ec6:	f8da 3000 	ldr.w	r3, [sl]
 8008eca:	4499      	add	r9, r3
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7fd fe8a 	bl	8006bec <__aeabi_dcmpeq>
 8008ed8:	b108      	cbz	r0, 8008ede <__cvt+0x9e>
 8008eda:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ede:	2230      	movs	r2, #48	; 0x30
 8008ee0:	9b07      	ldr	r3, [sp, #28]
 8008ee2:	454b      	cmp	r3, r9
 8008ee4:	d307      	bcc.n	8008ef6 <__cvt+0xb6>
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	9b07      	ldr	r3, [sp, #28]
 8008eea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008eec:	1b9b      	subs	r3, r3, r6
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	b008      	add	sp, #32
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	1c59      	adds	r1, r3, #1
 8008ef8:	9107      	str	r1, [sp, #28]
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	e7f0      	b.n	8008ee0 <__cvt+0xa0>

08008efe <__exponent>:
 8008efe:	4603      	mov	r3, r0
 8008f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f02:	2900      	cmp	r1, #0
 8008f04:	f803 2b02 	strb.w	r2, [r3], #2
 8008f08:	bfb6      	itet	lt
 8008f0a:	222d      	movlt	r2, #45	; 0x2d
 8008f0c:	222b      	movge	r2, #43	; 0x2b
 8008f0e:	4249      	neglt	r1, r1
 8008f10:	2909      	cmp	r1, #9
 8008f12:	7042      	strb	r2, [r0, #1]
 8008f14:	dd2b      	ble.n	8008f6e <__exponent+0x70>
 8008f16:	f10d 0407 	add.w	r4, sp, #7
 8008f1a:	46a4      	mov	ip, r4
 8008f1c:	270a      	movs	r7, #10
 8008f1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f22:	460a      	mov	r2, r1
 8008f24:	46a6      	mov	lr, r4
 8008f26:	fb07 1516 	mls	r5, r7, r6, r1
 8008f2a:	2a63      	cmp	r2, #99	; 0x63
 8008f2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008f30:	4631      	mov	r1, r6
 8008f32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f3a:	dcf0      	bgt.n	8008f1e <__exponent+0x20>
 8008f3c:	3130      	adds	r1, #48	; 0x30
 8008f3e:	f1ae 0502 	sub.w	r5, lr, #2
 8008f42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f46:	4629      	mov	r1, r5
 8008f48:	1c44      	adds	r4, r0, #1
 8008f4a:	4561      	cmp	r1, ip
 8008f4c:	d30a      	bcc.n	8008f64 <__exponent+0x66>
 8008f4e:	f10d 0209 	add.w	r2, sp, #9
 8008f52:	eba2 020e 	sub.w	r2, r2, lr
 8008f56:	4565      	cmp	r5, ip
 8008f58:	bf88      	it	hi
 8008f5a:	2200      	movhi	r2, #0
 8008f5c:	4413      	add	r3, r2
 8008f5e:	1a18      	subs	r0, r3, r0
 8008f60:	b003      	add	sp, #12
 8008f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f6c:	e7ed      	b.n	8008f4a <__exponent+0x4c>
 8008f6e:	2330      	movs	r3, #48	; 0x30
 8008f70:	3130      	adds	r1, #48	; 0x30
 8008f72:	7083      	strb	r3, [r0, #2]
 8008f74:	70c1      	strb	r1, [r0, #3]
 8008f76:	1d03      	adds	r3, r0, #4
 8008f78:	e7f1      	b.n	8008f5e <__exponent+0x60>
	...

08008f7c <_printf_float>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	b091      	sub	sp, #68	; 0x44
 8008f82:	460c      	mov	r4, r1
 8008f84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008f88:	4616      	mov	r6, r2
 8008f8a:	461f      	mov	r7, r3
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	f002 fe63 	bl	800bc58 <_localeconv_r>
 8008f92:	6803      	ldr	r3, [r0, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	9309      	str	r3, [sp, #36]	; 0x24
 8008f98:	f7fd f9fc 	bl	8006394 <strlen>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8008fa6:	3307      	adds	r3, #7
 8008fa8:	f023 0307 	bic.w	r3, r3, #7
 8008fac:	f103 0208 	add.w	r2, r3, #8
 8008fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8008fb8:	f8c8 2000 	str.w	r2, [r8]
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008fc4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008fc8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4b9c      	ldr	r3, [pc, #624]	; (8009248 <_printf_float+0x2cc>)
 8008fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd8:	f7fd fe3a 	bl	8006c50 <__aeabi_dcmpun>
 8008fdc:	bb70      	cbnz	r0, 800903c <_printf_float+0xc0>
 8008fde:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4b98      	ldr	r3, [pc, #608]	; (8009248 <_printf_float+0x2cc>)
 8008fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fe8:	f7fd fe14 	bl	8006c14 <__aeabi_dcmple>
 8008fec:	bb30      	cbnz	r0, 800903c <_printf_float+0xc0>
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4651      	mov	r1, sl
 8008ff6:	f7fd fe03 	bl	8006c00 <__aeabi_dcmplt>
 8008ffa:	b110      	cbz	r0, 8009002 <_printf_float+0x86>
 8008ffc:	232d      	movs	r3, #45	; 0x2d
 8008ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009002:	4b92      	ldr	r3, [pc, #584]	; (800924c <_printf_float+0x2d0>)
 8009004:	4892      	ldr	r0, [pc, #584]	; (8009250 <_printf_float+0x2d4>)
 8009006:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800900a:	bf94      	ite	ls
 800900c:	4698      	movls	r8, r3
 800900e:	4680      	movhi	r8, r0
 8009010:	2303      	movs	r3, #3
 8009012:	f04f 0a00 	mov.w	sl, #0
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	f02b 0304 	bic.w	r3, fp, #4
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	4633      	mov	r3, r6
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	9700      	str	r7, [sp, #0]
 8009026:	aa0f      	add	r2, sp, #60	; 0x3c
 8009028:	f000 f9d4 	bl	80093d4 <_printf_common>
 800902c:	3001      	adds	r0, #1
 800902e:	f040 8090 	bne.w	8009152 <_printf_float+0x1d6>
 8009032:	f04f 30ff 	mov.w	r0, #4294967295
 8009036:	b011      	add	sp, #68	; 0x44
 8009038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903c:	4642      	mov	r2, r8
 800903e:	4653      	mov	r3, sl
 8009040:	4640      	mov	r0, r8
 8009042:	4651      	mov	r1, sl
 8009044:	f7fd fe04 	bl	8006c50 <__aeabi_dcmpun>
 8009048:	b148      	cbz	r0, 800905e <_printf_float+0xe2>
 800904a:	f1ba 0f00 	cmp.w	sl, #0
 800904e:	bfb8      	it	lt
 8009050:	232d      	movlt	r3, #45	; 0x2d
 8009052:	4880      	ldr	r0, [pc, #512]	; (8009254 <_printf_float+0x2d8>)
 8009054:	bfb8      	it	lt
 8009056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800905a:	4b7f      	ldr	r3, [pc, #508]	; (8009258 <_printf_float+0x2dc>)
 800905c:	e7d3      	b.n	8009006 <_printf_float+0x8a>
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	d142      	bne.n	80090ee <_printf_float+0x172>
 8009068:	2306      	movs	r3, #6
 800906a:	6063      	str	r3, [r4, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	9206      	str	r2, [sp, #24]
 8009070:	aa0e      	add	r2, sp, #56	; 0x38
 8009072:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009076:	aa0d      	add	r2, sp, #52	; 0x34
 8009078:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800907c:	9203      	str	r2, [sp, #12]
 800907e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009082:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	6863      	ldr	r3, [r4, #4]
 800908a:	4642      	mov	r2, r8
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	4628      	mov	r0, r5
 8009090:	4653      	mov	r3, sl
 8009092:	910b      	str	r1, [sp, #44]	; 0x2c
 8009094:	f7ff fed4 	bl	8008e40 <__cvt>
 8009098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800909a:	4680      	mov	r8, r0
 800909c:	2947      	cmp	r1, #71	; 0x47
 800909e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090a0:	d108      	bne.n	80090b4 <_printf_float+0x138>
 80090a2:	1cc8      	adds	r0, r1, #3
 80090a4:	db02      	blt.n	80090ac <_printf_float+0x130>
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	4299      	cmp	r1, r3
 80090aa:	dd40      	ble.n	800912e <_printf_float+0x1b2>
 80090ac:	f1a9 0902 	sub.w	r9, r9, #2
 80090b0:	fa5f f989 	uxtb.w	r9, r9
 80090b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80090b8:	d81f      	bhi.n	80090fa <_printf_float+0x17e>
 80090ba:	464a      	mov	r2, r9
 80090bc:	3901      	subs	r1, #1
 80090be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090c2:	910d      	str	r1, [sp, #52]	; 0x34
 80090c4:	f7ff ff1b 	bl	8008efe <__exponent>
 80090c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ca:	4682      	mov	sl, r0
 80090cc:	1813      	adds	r3, r2, r0
 80090ce:	2a01      	cmp	r2, #1
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	dc02      	bgt.n	80090da <_printf_float+0x15e>
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	07d2      	lsls	r2, r2, #31
 80090d8:	d501      	bpl.n	80090de <_printf_float+0x162>
 80090da:	3301      	adds	r3, #1
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d09b      	beq.n	800901e <_printf_float+0xa2>
 80090e6:	232d      	movs	r3, #45	; 0x2d
 80090e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ec:	e797      	b.n	800901e <_printf_float+0xa2>
 80090ee:	2947      	cmp	r1, #71	; 0x47
 80090f0:	d1bc      	bne.n	800906c <_printf_float+0xf0>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1ba      	bne.n	800906c <_printf_float+0xf0>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e7b7      	b.n	800906a <_printf_float+0xee>
 80090fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090fe:	d118      	bne.n	8009132 <_printf_float+0x1b6>
 8009100:	2900      	cmp	r1, #0
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	dd0b      	ble.n	800911e <_printf_float+0x1a2>
 8009106:	6121      	str	r1, [r4, #16]
 8009108:	b913      	cbnz	r3, 8009110 <_printf_float+0x194>
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	07d0      	lsls	r0, r2, #31
 800910e:	d502      	bpl.n	8009116 <_printf_float+0x19a>
 8009110:	3301      	adds	r3, #1
 8009112:	440b      	add	r3, r1
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	f04f 0a00 	mov.w	sl, #0
 800911a:	65a1      	str	r1, [r4, #88]	; 0x58
 800911c:	e7df      	b.n	80090de <_printf_float+0x162>
 800911e:	b913      	cbnz	r3, 8009126 <_printf_float+0x1aa>
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	07d2      	lsls	r2, r2, #31
 8009124:	d501      	bpl.n	800912a <_printf_float+0x1ae>
 8009126:	3302      	adds	r3, #2
 8009128:	e7f4      	b.n	8009114 <_printf_float+0x198>
 800912a:	2301      	movs	r3, #1
 800912c:	e7f2      	b.n	8009114 <_printf_float+0x198>
 800912e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009134:	4299      	cmp	r1, r3
 8009136:	db05      	blt.n	8009144 <_printf_float+0x1c8>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	6121      	str	r1, [r4, #16]
 800913c:	07d8      	lsls	r0, r3, #31
 800913e:	d5ea      	bpl.n	8009116 <_printf_float+0x19a>
 8009140:	1c4b      	adds	r3, r1, #1
 8009142:	e7e7      	b.n	8009114 <_printf_float+0x198>
 8009144:	2900      	cmp	r1, #0
 8009146:	bfcc      	ite	gt
 8009148:	2201      	movgt	r2, #1
 800914a:	f1c1 0202 	rsble	r2, r1, #2
 800914e:	4413      	add	r3, r2
 8009150:	e7e0      	b.n	8009114 <_printf_float+0x198>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	055a      	lsls	r2, r3, #21
 8009156:	d407      	bmi.n	8009168 <_printf_float+0x1ec>
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	4642      	mov	r2, r8
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	d12b      	bne.n	80091be <_printf_float+0x242>
 8009166:	e764      	b.n	8009032 <_printf_float+0xb6>
 8009168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800916c:	f240 80dd 	bls.w	800932a <_printf_float+0x3ae>
 8009170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	f7fd fd38 	bl	8006bec <__aeabi_dcmpeq>
 800917c:	2800      	cmp	r0, #0
 800917e:	d033      	beq.n	80091e8 <_printf_float+0x26c>
 8009180:	2301      	movs	r3, #1
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	4a35      	ldr	r2, [pc, #212]	; (800925c <_printf_float+0x2e0>)
 8009188:	47b8      	blx	r7
 800918a:	3001      	adds	r0, #1
 800918c:	f43f af51 	beq.w	8009032 <_printf_float+0xb6>
 8009190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009194:	429a      	cmp	r2, r3
 8009196:	db02      	blt.n	800919e <_printf_float+0x222>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	07d8      	lsls	r0, r3, #31
 800919c:	d50f      	bpl.n	80091be <_printf_float+0x242>
 800919e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091a2:	4631      	mov	r1, r6
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b8      	blx	r7
 80091a8:	3001      	adds	r0, #1
 80091aa:	f43f af42 	beq.w	8009032 <_printf_float+0xb6>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	f104 091a 	add.w	r9, r4, #26
 80091b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b8:	3b01      	subs	r3, #1
 80091ba:	4543      	cmp	r3, r8
 80091bc:	dc09      	bgt.n	80091d2 <_printf_float+0x256>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	079b      	lsls	r3, r3, #30
 80091c2:	f100 8102 	bmi.w	80093ca <_printf_float+0x44e>
 80091c6:	68e0      	ldr	r0, [r4, #12]
 80091c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091ca:	4298      	cmp	r0, r3
 80091cc:	bfb8      	it	lt
 80091ce:	4618      	movlt	r0, r3
 80091d0:	e731      	b.n	8009036 <_printf_float+0xba>
 80091d2:	2301      	movs	r3, #1
 80091d4:	464a      	mov	r2, r9
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f af28 	beq.w	8009032 <_printf_float+0xb6>
 80091e2:	f108 0801 	add.w	r8, r8, #1
 80091e6:	e7e6      	b.n	80091b6 <_printf_float+0x23a>
 80091e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dc38      	bgt.n	8009260 <_printf_float+0x2e4>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	4a19      	ldr	r2, [pc, #100]	; (800925c <_printf_float+0x2e0>)
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f af1a 	beq.w	8009032 <_printf_float+0xb6>
 80091fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009202:	4313      	orrs	r3, r2
 8009204:	d102      	bne.n	800920c <_printf_float+0x290>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	07d9      	lsls	r1, r3, #31
 800920a:	d5d8      	bpl.n	80091be <_printf_float+0x242>
 800920c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009210:	4631      	mov	r1, r6
 8009212:	4628      	mov	r0, r5
 8009214:	47b8      	blx	r7
 8009216:	3001      	adds	r0, #1
 8009218:	f43f af0b 	beq.w	8009032 <_printf_float+0xb6>
 800921c:	f04f 0900 	mov.w	r9, #0
 8009220:	f104 0a1a 	add.w	sl, r4, #26
 8009224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009226:	425b      	negs	r3, r3
 8009228:	454b      	cmp	r3, r9
 800922a:	dc01      	bgt.n	8009230 <_printf_float+0x2b4>
 800922c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800922e:	e794      	b.n	800915a <_printf_float+0x1de>
 8009230:	2301      	movs	r3, #1
 8009232:	4652      	mov	r2, sl
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f aef9 	beq.w	8009032 <_printf_float+0xb6>
 8009240:	f109 0901 	add.w	r9, r9, #1
 8009244:	e7ee      	b.n	8009224 <_printf_float+0x2a8>
 8009246:	bf00      	nop
 8009248:	7fefffff 	.word	0x7fefffff
 800924c:	0801f09c 	.word	0x0801f09c
 8009250:	0801f0a0 	.word	0x0801f0a0
 8009254:	0801f0a8 	.word	0x0801f0a8
 8009258:	0801f0a4 	.word	0x0801f0a4
 800925c:	0801f0ac 	.word	0x0801f0ac
 8009260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009264:	429a      	cmp	r2, r3
 8009266:	bfa8      	it	ge
 8009268:	461a      	movge	r2, r3
 800926a:	2a00      	cmp	r2, #0
 800926c:	4691      	mov	r9, r2
 800926e:	dc37      	bgt.n	80092e0 <_printf_float+0x364>
 8009270:	f04f 0b00 	mov.w	fp, #0
 8009274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009278:	f104 021a 	add.w	r2, r4, #26
 800927c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009280:	ebaa 0309 	sub.w	r3, sl, r9
 8009284:	455b      	cmp	r3, fp
 8009286:	dc33      	bgt.n	80092f0 <_printf_float+0x374>
 8009288:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800928c:	429a      	cmp	r2, r3
 800928e:	db3b      	blt.n	8009308 <_printf_float+0x38c>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	07da      	lsls	r2, r3, #31
 8009294:	d438      	bmi.n	8009308 <_printf_float+0x38c>
 8009296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009298:	990d      	ldr	r1, [sp, #52]	; 0x34
 800929a:	eba3 020a 	sub.w	r2, r3, sl
 800929e:	eba3 0901 	sub.w	r9, r3, r1
 80092a2:	4591      	cmp	r9, r2
 80092a4:	bfa8      	it	ge
 80092a6:	4691      	movge	r9, r2
 80092a8:	f1b9 0f00 	cmp.w	r9, #0
 80092ac:	dc34      	bgt.n	8009318 <_printf_float+0x39c>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092b6:	f104 0a1a 	add.w	sl, r4, #26
 80092ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	eba3 0309 	sub.w	r3, r3, r9
 80092c4:	4543      	cmp	r3, r8
 80092c6:	f77f af7a 	ble.w	80091be <_printf_float+0x242>
 80092ca:	2301      	movs	r3, #1
 80092cc:	4652      	mov	r2, sl
 80092ce:	4631      	mov	r1, r6
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b8      	blx	r7
 80092d4:	3001      	adds	r0, #1
 80092d6:	f43f aeac 	beq.w	8009032 <_printf_float+0xb6>
 80092da:	f108 0801 	add.w	r8, r8, #1
 80092de:	e7ec      	b.n	80092ba <_printf_float+0x33e>
 80092e0:	4613      	mov	r3, r2
 80092e2:	4631      	mov	r1, r6
 80092e4:	4642      	mov	r2, r8
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	d1c0      	bne.n	8009270 <_printf_float+0x2f4>
 80092ee:	e6a0      	b.n	8009032 <_printf_float+0xb6>
 80092f0:	2301      	movs	r3, #1
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80092f8:	47b8      	blx	r7
 80092fa:	3001      	adds	r0, #1
 80092fc:	f43f ae99 	beq.w	8009032 <_printf_float+0xb6>
 8009300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009302:	f10b 0b01 	add.w	fp, fp, #1
 8009306:	e7b9      	b.n	800927c <_printf_float+0x300>
 8009308:	4631      	mov	r1, r6
 800930a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	d1bf      	bne.n	8009296 <_printf_float+0x31a>
 8009316:	e68c      	b.n	8009032 <_printf_float+0xb6>
 8009318:	464b      	mov	r3, r9
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	eb08 020a 	add.w	r2, r8, sl
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	d1c2      	bne.n	80092ae <_printf_float+0x332>
 8009328:	e683      	b.n	8009032 <_printf_float+0xb6>
 800932a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800932c:	2a01      	cmp	r2, #1
 800932e:	dc01      	bgt.n	8009334 <_printf_float+0x3b8>
 8009330:	07db      	lsls	r3, r3, #31
 8009332:	d537      	bpl.n	80093a4 <_printf_float+0x428>
 8009334:	2301      	movs	r3, #1
 8009336:	4642      	mov	r2, r8
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f ae77 	beq.w	8009032 <_printf_float+0xb6>
 8009344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f ae6f 	beq.w	8009032 <_printf_float+0xb6>
 8009354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009358:	2200      	movs	r2, #0
 800935a:	2300      	movs	r3, #0
 800935c:	f7fd fc46 	bl	8006bec <__aeabi_dcmpeq>
 8009360:	b9d8      	cbnz	r0, 800939a <_printf_float+0x41e>
 8009362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009364:	f108 0201 	add.w	r2, r8, #1
 8009368:	3b01      	subs	r3, #1
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	d10e      	bne.n	8009392 <_printf_float+0x416>
 8009374:	e65d      	b.n	8009032 <_printf_float+0xb6>
 8009376:	2301      	movs	r3, #1
 8009378:	464a      	mov	r2, r9
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	f43f ae56 	beq.w	8009032 <_printf_float+0xb6>
 8009386:	f108 0801 	add.w	r8, r8, #1
 800938a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800938c:	3b01      	subs	r3, #1
 800938e:	4543      	cmp	r3, r8
 8009390:	dcf1      	bgt.n	8009376 <_printf_float+0x3fa>
 8009392:	4653      	mov	r3, sl
 8009394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009398:	e6e0      	b.n	800915c <_printf_float+0x1e0>
 800939a:	f04f 0800 	mov.w	r8, #0
 800939e:	f104 091a 	add.w	r9, r4, #26
 80093a2:	e7f2      	b.n	800938a <_printf_float+0x40e>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4642      	mov	r2, r8
 80093a8:	e7df      	b.n	800936a <_printf_float+0x3ee>
 80093aa:	2301      	movs	r3, #1
 80093ac:	464a      	mov	r2, r9
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	f43f ae3c 	beq.w	8009032 <_printf_float+0xb6>
 80093ba:	f108 0801 	add.w	r8, r8, #1
 80093be:	68e3      	ldr	r3, [r4, #12]
 80093c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093c2:	1a5b      	subs	r3, r3, r1
 80093c4:	4543      	cmp	r3, r8
 80093c6:	dcf0      	bgt.n	80093aa <_printf_float+0x42e>
 80093c8:	e6fd      	b.n	80091c6 <_printf_float+0x24a>
 80093ca:	f04f 0800 	mov.w	r8, #0
 80093ce:	f104 0919 	add.w	r9, r4, #25
 80093d2:	e7f4      	b.n	80093be <_printf_float+0x442>

080093d4 <_printf_common>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	4616      	mov	r6, r2
 80093da:	4699      	mov	r9, r3
 80093dc:	688a      	ldr	r2, [r1, #8]
 80093de:	690b      	ldr	r3, [r1, #16]
 80093e0:	4607      	mov	r7, r0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	bfb8      	it	lt
 80093e6:	4613      	movlt	r3, r2
 80093e8:	6033      	str	r3, [r6, #0]
 80093ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ee:	460c      	mov	r4, r1
 80093f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093f4:	b10a      	cbz	r2, 80093fa <_printf_common+0x26>
 80093f6:	3301      	adds	r3, #1
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	0699      	lsls	r1, r3, #26
 80093fe:	bf42      	ittt	mi
 8009400:	6833      	ldrmi	r3, [r6, #0]
 8009402:	3302      	addmi	r3, #2
 8009404:	6033      	strmi	r3, [r6, #0]
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	f015 0506 	ands.w	r5, r5, #6
 800940c:	d106      	bne.n	800941c <_printf_common+0x48>
 800940e:	f104 0a19 	add.w	sl, r4, #25
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	6832      	ldr	r2, [r6, #0]
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	42ab      	cmp	r3, r5
 800941a:	dc28      	bgt.n	800946e <_printf_common+0x9a>
 800941c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009420:	1e13      	subs	r3, r2, #0
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	bf18      	it	ne
 8009426:	2301      	movne	r3, #1
 8009428:	0692      	lsls	r2, r2, #26
 800942a:	d42d      	bmi.n	8009488 <_printf_common+0xb4>
 800942c:	4649      	mov	r1, r9
 800942e:	4638      	mov	r0, r7
 8009430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009434:	47c0      	blx	r8
 8009436:	3001      	adds	r0, #1
 8009438:	d020      	beq.n	800947c <_printf_common+0xa8>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	68e5      	ldr	r5, [r4, #12]
 800943e:	f003 0306 	and.w	r3, r3, #6
 8009442:	2b04      	cmp	r3, #4
 8009444:	bf18      	it	ne
 8009446:	2500      	movne	r5, #0
 8009448:	6832      	ldr	r2, [r6, #0]
 800944a:	f04f 0600 	mov.w	r6, #0
 800944e:	68a3      	ldr	r3, [r4, #8]
 8009450:	bf08      	it	eq
 8009452:	1aad      	subeq	r5, r5, r2
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	bf08      	it	eq
 8009458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800945c:	4293      	cmp	r3, r2
 800945e:	bfc4      	itt	gt
 8009460:	1a9b      	subgt	r3, r3, r2
 8009462:	18ed      	addgt	r5, r5, r3
 8009464:	341a      	adds	r4, #26
 8009466:	42b5      	cmp	r5, r6
 8009468:	d11a      	bne.n	80094a0 <_printf_common+0xcc>
 800946a:	2000      	movs	r0, #0
 800946c:	e008      	b.n	8009480 <_printf_common+0xac>
 800946e:	2301      	movs	r3, #1
 8009470:	4652      	mov	r2, sl
 8009472:	4649      	mov	r1, r9
 8009474:	4638      	mov	r0, r7
 8009476:	47c0      	blx	r8
 8009478:	3001      	adds	r0, #1
 800947a:	d103      	bne.n	8009484 <_printf_common+0xb0>
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009484:	3501      	adds	r5, #1
 8009486:	e7c4      	b.n	8009412 <_printf_common+0x3e>
 8009488:	2030      	movs	r0, #48	; 0x30
 800948a:	18e1      	adds	r1, r4, r3
 800948c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009496:	4422      	add	r2, r4
 8009498:	3302      	adds	r3, #2
 800949a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800949e:	e7c5      	b.n	800942c <_printf_common+0x58>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4622      	mov	r2, r4
 80094a4:	4649      	mov	r1, r9
 80094a6:	4638      	mov	r0, r7
 80094a8:	47c0      	blx	r8
 80094aa:	3001      	adds	r0, #1
 80094ac:	d0e6      	beq.n	800947c <_printf_common+0xa8>
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7d9      	b.n	8009466 <_printf_common+0x92>
	...

080094b4 <_printf_i>:
 80094b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b8:	7e0f      	ldrb	r7, [r1, #24]
 80094ba:	4691      	mov	r9, r2
 80094bc:	2f78      	cmp	r7, #120	; 0x78
 80094be:	4680      	mov	r8, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	469a      	mov	sl, r3
 80094c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094ca:	d807      	bhi.n	80094dc <_printf_i+0x28>
 80094cc:	2f62      	cmp	r7, #98	; 0x62
 80094ce:	d80a      	bhi.n	80094e6 <_printf_i+0x32>
 80094d0:	2f00      	cmp	r7, #0
 80094d2:	f000 80d9 	beq.w	8009688 <_printf_i+0x1d4>
 80094d6:	2f58      	cmp	r7, #88	; 0x58
 80094d8:	f000 80a4 	beq.w	8009624 <_printf_i+0x170>
 80094dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094e4:	e03a      	b.n	800955c <_printf_i+0xa8>
 80094e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ea:	2b15      	cmp	r3, #21
 80094ec:	d8f6      	bhi.n	80094dc <_printf_i+0x28>
 80094ee:	a101      	add	r1, pc, #4	; (adr r1, 80094f4 <_printf_i+0x40>)
 80094f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094f4:	0800954d 	.word	0x0800954d
 80094f8:	08009561 	.word	0x08009561
 80094fc:	080094dd 	.word	0x080094dd
 8009500:	080094dd 	.word	0x080094dd
 8009504:	080094dd 	.word	0x080094dd
 8009508:	080094dd 	.word	0x080094dd
 800950c:	08009561 	.word	0x08009561
 8009510:	080094dd 	.word	0x080094dd
 8009514:	080094dd 	.word	0x080094dd
 8009518:	080094dd 	.word	0x080094dd
 800951c:	080094dd 	.word	0x080094dd
 8009520:	0800966f 	.word	0x0800966f
 8009524:	08009591 	.word	0x08009591
 8009528:	08009651 	.word	0x08009651
 800952c:	080094dd 	.word	0x080094dd
 8009530:	080094dd 	.word	0x080094dd
 8009534:	08009691 	.word	0x08009691
 8009538:	080094dd 	.word	0x080094dd
 800953c:	08009591 	.word	0x08009591
 8009540:	080094dd 	.word	0x080094dd
 8009544:	080094dd 	.word	0x080094dd
 8009548:	08009659 	.word	0x08009659
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	602a      	str	r2, [r5, #0]
 8009554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800955c:	2301      	movs	r3, #1
 800955e:	e0a4      	b.n	80096aa <_printf_i+0x1f6>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	6829      	ldr	r1, [r5, #0]
 8009564:	0606      	lsls	r6, r0, #24
 8009566:	f101 0304 	add.w	r3, r1, #4
 800956a:	d50a      	bpl.n	8009582 <_printf_i+0xce>
 800956c:	680e      	ldr	r6, [r1, #0]
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	2e00      	cmp	r6, #0
 8009572:	da03      	bge.n	800957c <_printf_i+0xc8>
 8009574:	232d      	movs	r3, #45	; 0x2d
 8009576:	4276      	negs	r6, r6
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957c:	230a      	movs	r3, #10
 800957e:	485e      	ldr	r0, [pc, #376]	; (80096f8 <_printf_i+0x244>)
 8009580:	e019      	b.n	80095b6 <_printf_i+0x102>
 8009582:	680e      	ldr	r6, [r1, #0]
 8009584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	bf18      	it	ne
 800958c:	b236      	sxthne	r6, r6
 800958e:	e7ef      	b.n	8009570 <_printf_i+0xbc>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	6820      	ldr	r0, [r4, #0]
 8009594:	1d19      	adds	r1, r3, #4
 8009596:	6029      	str	r1, [r5, #0]
 8009598:	0601      	lsls	r1, r0, #24
 800959a:	d501      	bpl.n	80095a0 <_printf_i+0xec>
 800959c:	681e      	ldr	r6, [r3, #0]
 800959e:	e002      	b.n	80095a6 <_printf_i+0xf2>
 80095a0:	0646      	lsls	r6, r0, #25
 80095a2:	d5fb      	bpl.n	800959c <_printf_i+0xe8>
 80095a4:	881e      	ldrh	r6, [r3, #0]
 80095a6:	2f6f      	cmp	r7, #111	; 0x6f
 80095a8:	bf0c      	ite	eq
 80095aa:	2308      	moveq	r3, #8
 80095ac:	230a      	movne	r3, #10
 80095ae:	4852      	ldr	r0, [pc, #328]	; (80096f8 <_printf_i+0x244>)
 80095b0:	2100      	movs	r1, #0
 80095b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095b6:	6865      	ldr	r5, [r4, #4]
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	bfa8      	it	ge
 80095bc:	6821      	ldrge	r1, [r4, #0]
 80095be:	60a5      	str	r5, [r4, #8]
 80095c0:	bfa4      	itt	ge
 80095c2:	f021 0104 	bicge.w	r1, r1, #4
 80095c6:	6021      	strge	r1, [r4, #0]
 80095c8:	b90e      	cbnz	r6, 80095ce <_printf_i+0x11a>
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	d04d      	beq.n	800966a <_printf_i+0x1b6>
 80095ce:	4615      	mov	r5, r2
 80095d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80095d4:	fb03 6711 	mls	r7, r3, r1, r6
 80095d8:	5dc7      	ldrb	r7, [r0, r7]
 80095da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095de:	4637      	mov	r7, r6
 80095e0:	42bb      	cmp	r3, r7
 80095e2:	460e      	mov	r6, r1
 80095e4:	d9f4      	bls.n	80095d0 <_printf_i+0x11c>
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d10b      	bne.n	8009602 <_printf_i+0x14e>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	07de      	lsls	r6, r3, #31
 80095ee:	d508      	bpl.n	8009602 <_printf_i+0x14e>
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	6861      	ldr	r1, [r4, #4]
 80095f4:	4299      	cmp	r1, r3
 80095f6:	bfde      	ittt	le
 80095f8:	2330      	movle	r3, #48	; 0x30
 80095fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009602:	1b52      	subs	r2, r2, r5
 8009604:	6122      	str	r2, [r4, #16]
 8009606:	464b      	mov	r3, r9
 8009608:	4621      	mov	r1, r4
 800960a:	4640      	mov	r0, r8
 800960c:	f8cd a000 	str.w	sl, [sp]
 8009610:	aa03      	add	r2, sp, #12
 8009612:	f7ff fedf 	bl	80093d4 <_printf_common>
 8009616:	3001      	adds	r0, #1
 8009618:	d14c      	bne.n	80096b4 <_printf_i+0x200>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	b004      	add	sp, #16
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	4834      	ldr	r0, [pc, #208]	; (80096f8 <_printf_i+0x244>)
 8009626:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800962a:	6829      	ldr	r1, [r5, #0]
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009632:	6029      	str	r1, [r5, #0]
 8009634:	061d      	lsls	r5, r3, #24
 8009636:	d514      	bpl.n	8009662 <_printf_i+0x1ae>
 8009638:	07df      	lsls	r7, r3, #31
 800963a:	bf44      	itt	mi
 800963c:	f043 0320 	orrmi.w	r3, r3, #32
 8009640:	6023      	strmi	r3, [r4, #0]
 8009642:	b91e      	cbnz	r6, 800964c <_printf_i+0x198>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	f023 0320 	bic.w	r3, r3, #32
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	2310      	movs	r3, #16
 800964e:	e7af      	b.n	80095b0 <_printf_i+0xfc>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	f043 0320 	orr.w	r3, r3, #32
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	2378      	movs	r3, #120	; 0x78
 800965a:	4828      	ldr	r0, [pc, #160]	; (80096fc <_printf_i+0x248>)
 800965c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009660:	e7e3      	b.n	800962a <_printf_i+0x176>
 8009662:	0659      	lsls	r1, r3, #25
 8009664:	bf48      	it	mi
 8009666:	b2b6      	uxthmi	r6, r6
 8009668:	e7e6      	b.n	8009638 <_printf_i+0x184>
 800966a:	4615      	mov	r5, r2
 800966c:	e7bb      	b.n	80095e6 <_printf_i+0x132>
 800966e:	682b      	ldr	r3, [r5, #0]
 8009670:	6826      	ldr	r6, [r4, #0]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	6961      	ldr	r1, [r4, #20]
 8009676:	6028      	str	r0, [r5, #0]
 8009678:	0635      	lsls	r5, r6, #24
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	d501      	bpl.n	8009682 <_printf_i+0x1ce>
 800967e:	6019      	str	r1, [r3, #0]
 8009680:	e002      	b.n	8009688 <_printf_i+0x1d4>
 8009682:	0670      	lsls	r0, r6, #25
 8009684:	d5fb      	bpl.n	800967e <_printf_i+0x1ca>
 8009686:	8019      	strh	r1, [r3, #0]
 8009688:	2300      	movs	r3, #0
 800968a:	4615      	mov	r5, r2
 800968c:	6123      	str	r3, [r4, #16]
 800968e:	e7ba      	b.n	8009606 <_printf_i+0x152>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	2100      	movs	r1, #0
 8009694:	1d1a      	adds	r2, r3, #4
 8009696:	602a      	str	r2, [r5, #0]
 8009698:	681d      	ldr	r5, [r3, #0]
 800969a:	6862      	ldr	r2, [r4, #4]
 800969c:	4628      	mov	r0, r5
 800969e:	f002 faf9 	bl	800bc94 <memchr>
 80096a2:	b108      	cbz	r0, 80096a8 <_printf_i+0x1f4>
 80096a4:	1b40      	subs	r0, r0, r5
 80096a6:	6060      	str	r0, [r4, #4]
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	2300      	movs	r3, #0
 80096ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b2:	e7a8      	b.n	8009606 <_printf_i+0x152>
 80096b4:	462a      	mov	r2, r5
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	6923      	ldr	r3, [r4, #16]
 80096bc:	47d0      	blx	sl
 80096be:	3001      	adds	r0, #1
 80096c0:	d0ab      	beq.n	800961a <_printf_i+0x166>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	079b      	lsls	r3, r3, #30
 80096c6:	d413      	bmi.n	80096f0 <_printf_i+0x23c>
 80096c8:	68e0      	ldr	r0, [r4, #12]
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	4298      	cmp	r0, r3
 80096ce:	bfb8      	it	lt
 80096d0:	4618      	movlt	r0, r3
 80096d2:	e7a4      	b.n	800961e <_printf_i+0x16a>
 80096d4:	2301      	movs	r3, #1
 80096d6:	4632      	mov	r2, r6
 80096d8:	4649      	mov	r1, r9
 80096da:	4640      	mov	r0, r8
 80096dc:	47d0      	blx	sl
 80096de:	3001      	adds	r0, #1
 80096e0:	d09b      	beq.n	800961a <_printf_i+0x166>
 80096e2:	3501      	adds	r5, #1
 80096e4:	68e3      	ldr	r3, [r4, #12]
 80096e6:	9903      	ldr	r1, [sp, #12]
 80096e8:	1a5b      	subs	r3, r3, r1
 80096ea:	42ab      	cmp	r3, r5
 80096ec:	dcf2      	bgt.n	80096d4 <_printf_i+0x220>
 80096ee:	e7eb      	b.n	80096c8 <_printf_i+0x214>
 80096f0:	2500      	movs	r5, #0
 80096f2:	f104 0619 	add.w	r6, r4, #25
 80096f6:	e7f5      	b.n	80096e4 <_printf_i+0x230>
 80096f8:	0801f0ae 	.word	0x0801f0ae
 80096fc:	0801f0bf 	.word	0x0801f0bf

08009700 <_scanf_float>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	b087      	sub	sp, #28
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	688b      	ldr	r3, [r1, #8]
 800970a:	4617      	mov	r7, r2
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009712:	bf85      	ittet	hi
 8009714:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009718:	195b      	addhi	r3, r3, r5
 800971a:	2300      	movls	r3, #0
 800971c:	9302      	strhi	r3, [sp, #8]
 800971e:	bf88      	it	hi
 8009720:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009724:	468b      	mov	fp, r1
 8009726:	f04f 0500 	mov.w	r5, #0
 800972a:	bf8c      	ite	hi
 800972c:	608b      	strhi	r3, [r1, #8]
 800972e:	9302      	strls	r3, [sp, #8]
 8009730:	680b      	ldr	r3, [r1, #0]
 8009732:	4680      	mov	r8, r0
 8009734:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009738:	f84b 3b1c 	str.w	r3, [fp], #28
 800973c:	460c      	mov	r4, r1
 800973e:	465e      	mov	r6, fp
 8009740:	46aa      	mov	sl, r5
 8009742:	46a9      	mov	r9, r5
 8009744:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009748:	9501      	str	r5, [sp, #4]
 800974a:	68a2      	ldr	r2, [r4, #8]
 800974c:	b152      	cbz	r2, 8009764 <_scanf_float+0x64>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b4e      	cmp	r3, #78	; 0x4e
 8009754:	d864      	bhi.n	8009820 <_scanf_float+0x120>
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d83c      	bhi.n	80097d4 <_scanf_float+0xd4>
 800975a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800975e:	b2c8      	uxtb	r0, r1
 8009760:	280e      	cmp	r0, #14
 8009762:	d93a      	bls.n	80097da <_scanf_float+0xda>
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	d003      	beq.n	8009772 <_scanf_float+0x72>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009776:	f1ba 0f01 	cmp.w	sl, #1
 800977a:	f200 8113 	bhi.w	80099a4 <_scanf_float+0x2a4>
 800977e:	455e      	cmp	r6, fp
 8009780:	f200 8105 	bhi.w	800998e <_scanf_float+0x28e>
 8009784:	2501      	movs	r5, #1
 8009786:	4628      	mov	r0, r5
 8009788:	b007      	add	sp, #28
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009792:	2a0d      	cmp	r2, #13
 8009794:	d8e6      	bhi.n	8009764 <_scanf_float+0x64>
 8009796:	a101      	add	r1, pc, #4	; (adr r1, 800979c <_scanf_float+0x9c>)
 8009798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800979c:	080098db 	.word	0x080098db
 80097a0:	08009765 	.word	0x08009765
 80097a4:	08009765 	.word	0x08009765
 80097a8:	08009765 	.word	0x08009765
 80097ac:	0800993b 	.word	0x0800993b
 80097b0:	08009913 	.word	0x08009913
 80097b4:	08009765 	.word	0x08009765
 80097b8:	08009765 	.word	0x08009765
 80097bc:	080098e9 	.word	0x080098e9
 80097c0:	08009765 	.word	0x08009765
 80097c4:	08009765 	.word	0x08009765
 80097c8:	08009765 	.word	0x08009765
 80097cc:	08009765 	.word	0x08009765
 80097d0:	080098a1 	.word	0x080098a1
 80097d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80097d8:	e7db      	b.n	8009792 <_scanf_float+0x92>
 80097da:	290e      	cmp	r1, #14
 80097dc:	d8c2      	bhi.n	8009764 <_scanf_float+0x64>
 80097de:	a001      	add	r0, pc, #4	; (adr r0, 80097e4 <_scanf_float+0xe4>)
 80097e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097e4:	08009893 	.word	0x08009893
 80097e8:	08009765 	.word	0x08009765
 80097ec:	08009893 	.word	0x08009893
 80097f0:	08009927 	.word	0x08009927
 80097f4:	08009765 	.word	0x08009765
 80097f8:	08009841 	.word	0x08009841
 80097fc:	0800987d 	.word	0x0800987d
 8009800:	0800987d 	.word	0x0800987d
 8009804:	0800987d 	.word	0x0800987d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	0800987d 	.word	0x0800987d
 8009810:	0800987d 	.word	0x0800987d
 8009814:	0800987d 	.word	0x0800987d
 8009818:	0800987d 	.word	0x0800987d
 800981c:	0800987d 	.word	0x0800987d
 8009820:	2b6e      	cmp	r3, #110	; 0x6e
 8009822:	d809      	bhi.n	8009838 <_scanf_float+0x138>
 8009824:	2b60      	cmp	r3, #96	; 0x60
 8009826:	d8b2      	bhi.n	800978e <_scanf_float+0x8e>
 8009828:	2b54      	cmp	r3, #84	; 0x54
 800982a:	d077      	beq.n	800991c <_scanf_float+0x21c>
 800982c:	2b59      	cmp	r3, #89	; 0x59
 800982e:	d199      	bne.n	8009764 <_scanf_float+0x64>
 8009830:	2d07      	cmp	r5, #7
 8009832:	d197      	bne.n	8009764 <_scanf_float+0x64>
 8009834:	2508      	movs	r5, #8
 8009836:	e029      	b.n	800988c <_scanf_float+0x18c>
 8009838:	2b74      	cmp	r3, #116	; 0x74
 800983a:	d06f      	beq.n	800991c <_scanf_float+0x21c>
 800983c:	2b79      	cmp	r3, #121	; 0x79
 800983e:	e7f6      	b.n	800982e <_scanf_float+0x12e>
 8009840:	6821      	ldr	r1, [r4, #0]
 8009842:	05c8      	lsls	r0, r1, #23
 8009844:	d51a      	bpl.n	800987c <_scanf_float+0x17c>
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800984c:	6021      	str	r1, [r4, #0]
 800984e:	f109 0901 	add.w	r9, r9, #1
 8009852:	b11b      	cbz	r3, 800985c <_scanf_float+0x15c>
 8009854:	3b01      	subs	r3, #1
 8009856:	3201      	adds	r2, #1
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	60a2      	str	r2, [r4, #8]
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	3301      	adds	r3, #1
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3b01      	subs	r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	607b      	str	r3, [r7, #4]
 8009870:	f340 8084 	ble.w	800997c <_scanf_float+0x27c>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	603b      	str	r3, [r7, #0]
 800987a:	e766      	b.n	800974a <_scanf_float+0x4a>
 800987c:	eb1a 0f05 	cmn.w	sl, r5
 8009880:	f47f af70 	bne.w	8009764 <_scanf_float+0x64>
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800988a:	6022      	str	r2, [r4, #0]
 800988c:	f806 3b01 	strb.w	r3, [r6], #1
 8009890:	e7e4      	b.n	800985c <_scanf_float+0x15c>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	0610      	lsls	r0, r2, #24
 8009896:	f57f af65 	bpl.w	8009764 <_scanf_float+0x64>
 800989a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800989e:	e7f4      	b.n	800988a <_scanf_float+0x18a>
 80098a0:	f1ba 0f00 	cmp.w	sl, #0
 80098a4:	d10e      	bne.n	80098c4 <_scanf_float+0x1c4>
 80098a6:	f1b9 0f00 	cmp.w	r9, #0
 80098aa:	d10e      	bne.n	80098ca <_scanf_float+0x1ca>
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098b6:	d108      	bne.n	80098ca <_scanf_float+0x1ca>
 80098b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098bc:	f04f 0a01 	mov.w	sl, #1
 80098c0:	6022      	str	r2, [r4, #0]
 80098c2:	e7e3      	b.n	800988c <_scanf_float+0x18c>
 80098c4:	f1ba 0f02 	cmp.w	sl, #2
 80098c8:	d055      	beq.n	8009976 <_scanf_float+0x276>
 80098ca:	2d01      	cmp	r5, #1
 80098cc:	d002      	beq.n	80098d4 <_scanf_float+0x1d4>
 80098ce:	2d04      	cmp	r5, #4
 80098d0:	f47f af48 	bne.w	8009764 <_scanf_float+0x64>
 80098d4:	3501      	adds	r5, #1
 80098d6:	b2ed      	uxtb	r5, r5
 80098d8:	e7d8      	b.n	800988c <_scanf_float+0x18c>
 80098da:	f1ba 0f01 	cmp.w	sl, #1
 80098de:	f47f af41 	bne.w	8009764 <_scanf_float+0x64>
 80098e2:	f04f 0a02 	mov.w	sl, #2
 80098e6:	e7d1      	b.n	800988c <_scanf_float+0x18c>
 80098e8:	b97d      	cbnz	r5, 800990a <_scanf_float+0x20a>
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	f47f af3c 	bne.w	800976a <_scanf_float+0x6a>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098fc:	f47f af39 	bne.w	8009772 <_scanf_float+0x72>
 8009900:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009904:	2501      	movs	r5, #1
 8009906:	6022      	str	r2, [r4, #0]
 8009908:	e7c0      	b.n	800988c <_scanf_float+0x18c>
 800990a:	2d03      	cmp	r5, #3
 800990c:	d0e2      	beq.n	80098d4 <_scanf_float+0x1d4>
 800990e:	2d05      	cmp	r5, #5
 8009910:	e7de      	b.n	80098d0 <_scanf_float+0x1d0>
 8009912:	2d02      	cmp	r5, #2
 8009914:	f47f af26 	bne.w	8009764 <_scanf_float+0x64>
 8009918:	2503      	movs	r5, #3
 800991a:	e7b7      	b.n	800988c <_scanf_float+0x18c>
 800991c:	2d06      	cmp	r5, #6
 800991e:	f47f af21 	bne.w	8009764 <_scanf_float+0x64>
 8009922:	2507      	movs	r5, #7
 8009924:	e7b2      	b.n	800988c <_scanf_float+0x18c>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	0591      	lsls	r1, r2, #22
 800992a:	f57f af1b 	bpl.w	8009764 <_scanf_float+0x64>
 800992e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009932:	6022      	str	r2, [r4, #0]
 8009934:	f8cd 9004 	str.w	r9, [sp, #4]
 8009938:	e7a8      	b.n	800988c <_scanf_float+0x18c>
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009940:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009944:	d006      	beq.n	8009954 <_scanf_float+0x254>
 8009946:	0550      	lsls	r0, r2, #21
 8009948:	f57f af0c 	bpl.w	8009764 <_scanf_float+0x64>
 800994c:	f1b9 0f00 	cmp.w	r9, #0
 8009950:	f43f af0f 	beq.w	8009772 <_scanf_float+0x72>
 8009954:	0591      	lsls	r1, r2, #22
 8009956:	bf58      	it	pl
 8009958:	9901      	ldrpl	r1, [sp, #4]
 800995a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800995e:	bf58      	it	pl
 8009960:	eba9 0101 	subpl.w	r1, r9, r1
 8009964:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009968:	f04f 0900 	mov.w	r9, #0
 800996c:	bf58      	it	pl
 800996e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009972:	6022      	str	r2, [r4, #0]
 8009974:	e78a      	b.n	800988c <_scanf_float+0x18c>
 8009976:	f04f 0a03 	mov.w	sl, #3
 800997a:	e787      	b.n	800988c <_scanf_float+0x18c>
 800997c:	4639      	mov	r1, r7
 800997e:	4640      	mov	r0, r8
 8009980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009984:	4798      	blx	r3
 8009986:	2800      	cmp	r0, #0
 8009988:	f43f aedf 	beq.w	800974a <_scanf_float+0x4a>
 800998c:	e6ea      	b.n	8009764 <_scanf_float+0x64>
 800998e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009992:	463a      	mov	r2, r7
 8009994:	4640      	mov	r0, r8
 8009996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800999a:	4798      	blx	r3
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	3b01      	subs	r3, #1
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	e6ec      	b.n	800977e <_scanf_float+0x7e>
 80099a4:	1e6b      	subs	r3, r5, #1
 80099a6:	2b06      	cmp	r3, #6
 80099a8:	d825      	bhi.n	80099f6 <_scanf_float+0x2f6>
 80099aa:	2d02      	cmp	r5, #2
 80099ac:	d836      	bhi.n	8009a1c <_scanf_float+0x31c>
 80099ae:	455e      	cmp	r6, fp
 80099b0:	f67f aee8 	bls.w	8009784 <_scanf_float+0x84>
 80099b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099b8:	463a      	mov	r2, r7
 80099ba:	4640      	mov	r0, r8
 80099bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c0:	4798      	blx	r3
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	e7f1      	b.n	80099ae <_scanf_float+0x2ae>
 80099ca:	9802      	ldr	r0, [sp, #8]
 80099cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80099d4:	463a      	mov	r2, r7
 80099d6:	9002      	str	r0, [sp, #8]
 80099d8:	4640      	mov	r0, r8
 80099da:	4798      	blx	r3
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	3b01      	subs	r3, #1
 80099e0:	6123      	str	r3, [r4, #16]
 80099e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099e6:	fa5f fa8a 	uxtb.w	sl, sl
 80099ea:	f1ba 0f02 	cmp.w	sl, #2
 80099ee:	d1ec      	bne.n	80099ca <_scanf_float+0x2ca>
 80099f0:	3d03      	subs	r5, #3
 80099f2:	b2ed      	uxtb	r5, r5
 80099f4:	1b76      	subs	r6, r6, r5
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	05da      	lsls	r2, r3, #23
 80099fa:	d52f      	bpl.n	8009a5c <_scanf_float+0x35c>
 80099fc:	055b      	lsls	r3, r3, #21
 80099fe:	d510      	bpl.n	8009a22 <_scanf_float+0x322>
 8009a00:	455e      	cmp	r6, fp
 8009a02:	f67f aebf 	bls.w	8009784 <_scanf_float+0x84>
 8009a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a0a:	463a      	mov	r2, r7
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a12:	4798      	blx	r3
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	e7f1      	b.n	8009a00 <_scanf_float+0x300>
 8009a1c:	46aa      	mov	sl, r5
 8009a1e:	9602      	str	r6, [sp, #8]
 8009a20:	e7df      	b.n	80099e2 <_scanf_float+0x2e2>
 8009a22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	2965      	cmp	r1, #101	; 0x65
 8009a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	d00c      	beq.n	8009a50 <_scanf_float+0x350>
 8009a36:	2945      	cmp	r1, #69	; 0x45
 8009a38:	d00a      	beq.n	8009a50 <_scanf_float+0x350>
 8009a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4640      	mov	r0, r8
 8009a42:	4798      	blx	r3
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	1eb5      	subs	r5, r6, #2
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	463a      	mov	r2, r7
 8009a52:	4640      	mov	r0, r8
 8009a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a58:	4798      	blx	r3
 8009a5a:	462e      	mov	r6, r5
 8009a5c:	6825      	ldr	r5, [r4, #0]
 8009a5e:	f015 0510 	ands.w	r5, r5, #16
 8009a62:	d155      	bne.n	8009b10 <_scanf_float+0x410>
 8009a64:	7035      	strb	r5, [r6, #0]
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a70:	d11b      	bne.n	8009aaa <_scanf_float+0x3aa>
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	454b      	cmp	r3, r9
 8009a76:	eba3 0209 	sub.w	r2, r3, r9
 8009a7a:	d123      	bne.n	8009ac4 <_scanf_float+0x3c4>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4659      	mov	r1, fp
 8009a80:	4640      	mov	r0, r8
 8009a82:	f000 fe79 	bl	800a778 <_strtod_r>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	f012 0f02 	tst.w	r2, #2
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	d021      	beq.n	8009ada <_scanf_float+0x3da>
 8009a96:	1d1a      	adds	r2, r3, #4
 8009a98:	9903      	ldr	r1, [sp, #12]
 8009a9a:	600a      	str	r2, [r1, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	e9c3 6700 	strd	r6, r7, [r3]
 8009aa2:	68e3      	ldr	r3, [r4, #12]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	60e3      	str	r3, [r4, #12]
 8009aa8:	e66d      	b.n	8009786 <_scanf_float+0x86>
 8009aaa:	9b04      	ldr	r3, [sp, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0e5      	beq.n	8009a7c <_scanf_float+0x37c>
 8009ab0:	9905      	ldr	r1, [sp, #20]
 8009ab2:	230a      	movs	r3, #10
 8009ab4:	462a      	mov	r2, r5
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	3101      	adds	r1, #1
 8009aba:	f000 fedf 	bl	800a87c <_strtol_r>
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	9e05      	ldr	r6, [sp, #20]
 8009ac2:	1ac2      	subs	r2, r0, r3
 8009ac4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ac8:	429e      	cmp	r6, r3
 8009aca:	bf28      	it	cs
 8009acc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	4910      	ldr	r1, [pc, #64]	; (8009b14 <_scanf_float+0x414>)
 8009ad4:	f000 f826 	bl	8009b24 <siprintf>
 8009ad8:	e7d0      	b.n	8009a7c <_scanf_float+0x37c>
 8009ada:	f012 0f04 	tst.w	r2, #4
 8009ade:	f103 0204 	add.w	r2, r3, #4
 8009ae2:	d1d9      	bne.n	8009a98 <_scanf_float+0x398>
 8009ae4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009ae8:	f8cc 2000 	str.w	r2, [ip]
 8009aec:	f8d3 8000 	ldr.w	r8, [r3]
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	f7fd f8ac 	bl	8006c50 <__aeabi_dcmpun>
 8009af8:	b128      	cbz	r0, 8009b06 <_scanf_float+0x406>
 8009afa:	4807      	ldr	r0, [pc, #28]	; (8009b18 <_scanf_float+0x418>)
 8009afc:	f000 f80e 	bl	8009b1c <nanf>
 8009b00:	f8c8 0000 	str.w	r0, [r8]
 8009b04:	e7cd      	b.n	8009aa2 <_scanf_float+0x3a2>
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7fd f8ff 	bl	8006d0c <__aeabi_d2f>
 8009b0e:	e7f7      	b.n	8009b00 <_scanf_float+0x400>
 8009b10:	2500      	movs	r5, #0
 8009b12:	e638      	b.n	8009786 <_scanf_float+0x86>
 8009b14:	0801f0d0 	.word	0x0801f0d0
 8009b18:	0801f540 	.word	0x0801f540

08009b1c <nanf>:
 8009b1c:	4800      	ldr	r0, [pc, #0]	; (8009b20 <nanf+0x4>)
 8009b1e:	4770      	bx	lr
 8009b20:	7fc00000 	.word	0x7fc00000

08009b24 <siprintf>:
 8009b24:	b40e      	push	{r1, r2, r3}
 8009b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b2a:	b500      	push	{lr}
 8009b2c:	b09c      	sub	sp, #112	; 0x70
 8009b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b30:	9002      	str	r0, [sp, #8]
 8009b32:	9006      	str	r0, [sp, #24]
 8009b34:	9107      	str	r1, [sp, #28]
 8009b36:	9104      	str	r1, [sp, #16]
 8009b38:	4808      	ldr	r0, [pc, #32]	; (8009b5c <siprintf+0x38>)
 8009b3a:	4909      	ldr	r1, [pc, #36]	; (8009b60 <siprintf+0x3c>)
 8009b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b40:	9105      	str	r1, [sp, #20]
 8009b42:	6800      	ldr	r0, [r0, #0]
 8009b44:	a902      	add	r1, sp, #8
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	f002 fec4 	bl	800c8d4 <_svfiprintf_r>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	9b02      	ldr	r3, [sp, #8]
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	b01c      	add	sp, #112	; 0x70
 8009b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b58:	b003      	add	sp, #12
 8009b5a:	4770      	bx	lr
 8009b5c:	2000000c 	.word	0x2000000c
 8009b60:	ffff0208 	.word	0xffff0208

08009b64 <sulp>:
 8009b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b68:	460f      	mov	r7, r1
 8009b6a:	4690      	mov	r8, r2
 8009b6c:	f002 fc1e 	bl	800c3ac <__ulp>
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	f1b8 0f00 	cmp.w	r8, #0
 8009b78:	d011      	beq.n	8009b9e <sulp+0x3a>
 8009b7a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dd0b      	ble.n	8009b9e <sulp+0x3a>
 8009b86:	2400      	movs	r4, #0
 8009b88:	051b      	lsls	r3, r3, #20
 8009b8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b92:	4622      	mov	r2, r4
 8009b94:	462b      	mov	r3, r5
 8009b96:	f7fc fdc1 	bl	800671c <__aeabi_dmul>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009ba8 <_strtod_l>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	469b      	mov	fp, r3
 8009bae:	2300      	movs	r3, #0
 8009bb0:	b09f      	sub	sp, #124	; 0x7c
 8009bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb4:	4b9e      	ldr	r3, [pc, #632]	; (8009e30 <_strtod_l+0x288>)
 8009bb6:	4682      	mov	sl, r0
 8009bb8:	681f      	ldr	r7, [r3, #0]
 8009bba:	460e      	mov	r6, r1
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	9215      	str	r2, [sp, #84]	; 0x54
 8009bc0:	f7fc fbe8 	bl	8006394 <strlen>
 8009bc4:	f04f 0800 	mov.w	r8, #0
 8009bc8:	4604      	mov	r4, r0
 8009bca:	f04f 0900 	mov.w	r9, #0
 8009bce:	9619      	str	r6, [sp, #100]	; 0x64
 8009bd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	2a2b      	cmp	r2, #43	; 0x2b
 8009bd6:	d04c      	beq.n	8009c72 <_strtod_l+0xca>
 8009bd8:	d83a      	bhi.n	8009c50 <_strtod_l+0xa8>
 8009bda:	2a0d      	cmp	r2, #13
 8009bdc:	d833      	bhi.n	8009c46 <_strtod_l+0x9e>
 8009bde:	2a08      	cmp	r2, #8
 8009be0:	d833      	bhi.n	8009c4a <_strtod_l+0xa2>
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d03d      	beq.n	8009c62 <_strtod_l+0xba>
 8009be6:	2300      	movs	r3, #0
 8009be8:	930a      	str	r3, [sp, #40]	; 0x28
 8009bea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009bec:	782b      	ldrb	r3, [r5, #0]
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	f040 80aa 	bne.w	8009d48 <_strtod_l+0x1a0>
 8009bf4:	786b      	ldrb	r3, [r5, #1]
 8009bf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bfa:	2b58      	cmp	r3, #88	; 0x58
 8009bfc:	d166      	bne.n	8009ccc <_strtod_l+0x124>
 8009bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c00:	4650      	mov	r0, sl
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	ab1a      	add	r3, sp, #104	; 0x68
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4a8a      	ldr	r2, [pc, #552]	; (8009e34 <_strtod_l+0x28c>)
 8009c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c10:	a919      	add	r1, sp, #100	; 0x64
 8009c12:	f001 fd23 	bl	800b65c <__gethex>
 8009c16:	f010 0607 	ands.w	r6, r0, #7
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	d005      	beq.n	8009c2a <_strtod_l+0x82>
 8009c1e:	2e06      	cmp	r6, #6
 8009c20:	d129      	bne.n	8009c76 <_strtod_l+0xce>
 8009c22:	2300      	movs	r3, #0
 8009c24:	3501      	adds	r5, #1
 8009c26:	9519      	str	r5, [sp, #100]	; 0x64
 8009c28:	930a      	str	r3, [sp, #40]	; 0x28
 8009c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 858a 	bne.w	800a746 <_strtod_l+0xb9e>
 8009c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c34:	b1d3      	cbz	r3, 8009c6c <_strtod_l+0xc4>
 8009c36:	4642      	mov	r2, r8
 8009c38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	b01f      	add	sp, #124	; 0x7c
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	2a20      	cmp	r2, #32
 8009c48:	d1cd      	bne.n	8009be6 <_strtod_l+0x3e>
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009c4e:	e7bf      	b.n	8009bd0 <_strtod_l+0x28>
 8009c50:	2a2d      	cmp	r2, #45	; 0x2d
 8009c52:	d1c8      	bne.n	8009be6 <_strtod_l+0x3e>
 8009c54:	2201      	movs	r2, #1
 8009c56:	920a      	str	r2, [sp, #40]	; 0x28
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	9219      	str	r2, [sp, #100]	; 0x64
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1c3      	bne.n	8009bea <_strtod_l+0x42>
 8009c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c64:	9619      	str	r6, [sp, #100]	; 0x64
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 856b 	bne.w	800a742 <_strtod_l+0xb9a>
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	e7e4      	b.n	8009c3c <_strtod_l+0x94>
 8009c72:	2200      	movs	r2, #0
 8009c74:	e7ef      	b.n	8009c56 <_strtod_l+0xae>
 8009c76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c78:	b13a      	cbz	r2, 8009c8a <_strtod_l+0xe2>
 8009c7a:	2135      	movs	r1, #53	; 0x35
 8009c7c:	a81c      	add	r0, sp, #112	; 0x70
 8009c7e:	f002 fc99 	bl	800c5b4 <__copybits>
 8009c82:	4650      	mov	r0, sl
 8009c84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c86:	f002 f861 	bl	800bd4c <_Bfree>
 8009c8a:	3e01      	subs	r6, #1
 8009c8c:	2e04      	cmp	r6, #4
 8009c8e:	d806      	bhi.n	8009c9e <_strtod_l+0xf6>
 8009c90:	e8df f006 	tbb	[pc, r6]
 8009c94:	1714030a 	.word	0x1714030a
 8009c98:	0a          	.byte	0x0a
 8009c99:	00          	.byte	0x00
 8009c9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009c9e:	0721      	lsls	r1, r4, #28
 8009ca0:	d5c3      	bpl.n	8009c2a <_strtod_l+0x82>
 8009ca2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009ca6:	e7c0      	b.n	8009c2a <_strtod_l+0x82>
 8009ca8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009caa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009cae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009cba:	e7f0      	b.n	8009c9e <_strtod_l+0xf6>
 8009cbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009e38 <_strtod_l+0x290>
 8009cc0:	e7ed      	b.n	8009c9e <_strtod_l+0xf6>
 8009cc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009cc6:	f04f 38ff 	mov.w	r8, #4294967295
 8009cca:	e7e8      	b.n	8009c9e <_strtod_l+0xf6>
 8009ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	9219      	str	r2, [sp, #100]	; 0x64
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d0f9      	beq.n	8009ccc <_strtod_l+0x124>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0a6      	beq.n	8009c2a <_strtod_l+0x82>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	9307      	str	r3, [sp, #28]
 8009ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	9308      	str	r3, [sp, #32]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	469b      	mov	fp, r3
 8009cea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009cee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009cf0:	7805      	ldrb	r5, [r0, #0]
 8009cf2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009cf6:	b2d9      	uxtb	r1, r3
 8009cf8:	2909      	cmp	r1, #9
 8009cfa:	d927      	bls.n	8009d4c <_strtod_l+0x1a4>
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f002 fefe 	bl	800cb00 <strncmp>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d033      	beq.n	8009d70 <_strtod_l+0x1c8>
 8009d08:	2000      	movs	r0, #0
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	465c      	mov	r4, fp
 8009d0e:	4603      	mov	r3, r0
 8009d10:	9004      	str	r0, [sp, #16]
 8009d12:	2a65      	cmp	r2, #101	; 0x65
 8009d14:	d001      	beq.n	8009d1a <_strtod_l+0x172>
 8009d16:	2a45      	cmp	r2, #69	; 0x45
 8009d18:	d114      	bne.n	8009d44 <_strtod_l+0x19c>
 8009d1a:	b91c      	cbnz	r4, 8009d24 <_strtod_l+0x17c>
 8009d1c:	9a07      	ldr	r2, [sp, #28]
 8009d1e:	4302      	orrs	r2, r0
 8009d20:	d09f      	beq.n	8009c62 <_strtod_l+0xba>
 8009d22:	2400      	movs	r4, #0
 8009d24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009d26:	1c72      	adds	r2, r6, #1
 8009d28:	9219      	str	r2, [sp, #100]	; 0x64
 8009d2a:	7872      	ldrb	r2, [r6, #1]
 8009d2c:	2a2b      	cmp	r2, #43	; 0x2b
 8009d2e:	d079      	beq.n	8009e24 <_strtod_l+0x27c>
 8009d30:	2a2d      	cmp	r2, #45	; 0x2d
 8009d32:	f000 8083 	beq.w	8009e3c <_strtod_l+0x294>
 8009d36:	2700      	movs	r7, #0
 8009d38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009d3c:	2909      	cmp	r1, #9
 8009d3e:	f240 8083 	bls.w	8009e48 <_strtod_l+0x2a0>
 8009d42:	9619      	str	r6, [sp, #100]	; 0x64
 8009d44:	2500      	movs	r5, #0
 8009d46:	e09f      	b.n	8009e88 <_strtod_l+0x2e0>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e7c8      	b.n	8009cde <_strtod_l+0x136>
 8009d4c:	f1bb 0f08 	cmp.w	fp, #8
 8009d50:	bfd5      	itete	le
 8009d52:	9906      	ldrle	r1, [sp, #24]
 8009d54:	9905      	ldrgt	r1, [sp, #20]
 8009d56:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d5e:	f100 0001 	add.w	r0, r0, #1
 8009d62:	bfd4      	ite	le
 8009d64:	9306      	strle	r3, [sp, #24]
 8009d66:	9305      	strgt	r3, [sp, #20]
 8009d68:	f10b 0b01 	add.w	fp, fp, #1
 8009d6c:	9019      	str	r0, [sp, #100]	; 0x64
 8009d6e:	e7be      	b.n	8009cee <_strtod_l+0x146>
 8009d70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d72:	191a      	adds	r2, r3, r4
 8009d74:	9219      	str	r2, [sp, #100]	; 0x64
 8009d76:	5d1a      	ldrb	r2, [r3, r4]
 8009d78:	f1bb 0f00 	cmp.w	fp, #0
 8009d7c:	d036      	beq.n	8009dec <_strtod_l+0x244>
 8009d7e:	465c      	mov	r4, fp
 8009d80:	9004      	str	r0, [sp, #16]
 8009d82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d86:	2b09      	cmp	r3, #9
 8009d88:	d912      	bls.n	8009db0 <_strtod_l+0x208>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7c1      	b.n	8009d12 <_strtod_l+0x16a>
 8009d8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d90:	3001      	adds	r0, #1
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	9219      	str	r2, [sp, #100]	; 0x64
 8009d96:	785a      	ldrb	r2, [r3, #1]
 8009d98:	2a30      	cmp	r2, #48	; 0x30
 8009d9a:	d0f8      	beq.n	8009d8e <_strtod_l+0x1e6>
 8009d9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	f200 84d5 	bhi.w	800a750 <_strtod_l+0xba8>
 8009da6:	9004      	str	r0, [sp, #16]
 8009da8:	2000      	movs	r0, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dae:	9308      	str	r3, [sp, #32]
 8009db0:	3a30      	subs	r2, #48	; 0x30
 8009db2:	f100 0301 	add.w	r3, r0, #1
 8009db6:	d013      	beq.n	8009de0 <_strtod_l+0x238>
 8009db8:	9904      	ldr	r1, [sp, #16]
 8009dba:	1905      	adds	r5, r0, r4
 8009dbc:	4419      	add	r1, r3
 8009dbe:	9104      	str	r1, [sp, #16]
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	210a      	movs	r1, #10
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	d113      	bne.n	8009df0 <_strtod_l+0x248>
 8009dc8:	1823      	adds	r3, r4, r0
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	f104 0401 	add.w	r4, r4, #1
 8009dd0:	4404      	add	r4, r0
 8009dd2:	dc1b      	bgt.n	8009e0c <_strtod_l+0x264>
 8009dd4:	230a      	movs	r3, #10
 8009dd6:	9906      	ldr	r1, [sp, #24]
 8009dd8:	fb03 2301 	mla	r3, r3, r1, r2
 8009ddc:	9306      	str	r3, [sp, #24]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009de2:	4618      	mov	r0, r3
 8009de4:	1c51      	adds	r1, r2, #1
 8009de6:	9119      	str	r1, [sp, #100]	; 0x64
 8009de8:	7852      	ldrb	r2, [r2, #1]
 8009dea:	e7ca      	b.n	8009d82 <_strtod_l+0x1da>
 8009dec:	4658      	mov	r0, fp
 8009dee:	e7d3      	b.n	8009d98 <_strtod_l+0x1f0>
 8009df0:	2b08      	cmp	r3, #8
 8009df2:	dc04      	bgt.n	8009dfe <_strtod_l+0x256>
 8009df4:	9f06      	ldr	r7, [sp, #24]
 8009df6:	434f      	muls	r7, r1
 8009df8:	9706      	str	r7, [sp, #24]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	e7e2      	b.n	8009dc4 <_strtod_l+0x21c>
 8009dfe:	1c5f      	adds	r7, r3, #1
 8009e00:	2f10      	cmp	r7, #16
 8009e02:	bfde      	ittt	le
 8009e04:	9f05      	ldrle	r7, [sp, #20]
 8009e06:	434f      	mulle	r7, r1
 8009e08:	9705      	strle	r7, [sp, #20]
 8009e0a:	e7f6      	b.n	8009dfa <_strtod_l+0x252>
 8009e0c:	2c10      	cmp	r4, #16
 8009e0e:	bfdf      	itttt	le
 8009e10:	230a      	movle	r3, #10
 8009e12:	9905      	ldrle	r1, [sp, #20]
 8009e14:	fb03 2301 	mlale	r3, r3, r1, r2
 8009e18:	9305      	strle	r3, [sp, #20]
 8009e1a:	e7e0      	b.n	8009dde <_strtod_l+0x236>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	2301      	movs	r3, #1
 8009e22:	e77b      	b.n	8009d1c <_strtod_l+0x174>
 8009e24:	2700      	movs	r7, #0
 8009e26:	1cb2      	adds	r2, r6, #2
 8009e28:	9219      	str	r2, [sp, #100]	; 0x64
 8009e2a:	78b2      	ldrb	r2, [r6, #2]
 8009e2c:	e784      	b.n	8009d38 <_strtod_l+0x190>
 8009e2e:	bf00      	nop
 8009e30:	0801f364 	.word	0x0801f364
 8009e34:	0801f0d8 	.word	0x0801f0d8
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	2701      	movs	r7, #1
 8009e3e:	e7f2      	b.n	8009e26 <_strtod_l+0x27e>
 8009e40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e42:	1c51      	adds	r1, r2, #1
 8009e44:	9119      	str	r1, [sp, #100]	; 0x64
 8009e46:	7852      	ldrb	r2, [r2, #1]
 8009e48:	2a30      	cmp	r2, #48	; 0x30
 8009e4a:	d0f9      	beq.n	8009e40 <_strtod_l+0x298>
 8009e4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009e50:	2908      	cmp	r1, #8
 8009e52:	f63f af77 	bhi.w	8009d44 <_strtod_l+0x19c>
 8009e56:	f04f 0e0a 	mov.w	lr, #10
 8009e5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009e5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e60:	9209      	str	r2, [sp, #36]	; 0x24
 8009e62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e64:	1c51      	adds	r1, r2, #1
 8009e66:	9119      	str	r1, [sp, #100]	; 0x64
 8009e68:	7852      	ldrb	r2, [r2, #1]
 8009e6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009e6e:	2d09      	cmp	r5, #9
 8009e70:	d935      	bls.n	8009ede <_strtod_l+0x336>
 8009e72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e74:	1b49      	subs	r1, r1, r5
 8009e76:	2908      	cmp	r1, #8
 8009e78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009e7c:	dc02      	bgt.n	8009e84 <_strtod_l+0x2dc>
 8009e7e:	4565      	cmp	r5, ip
 8009e80:	bfa8      	it	ge
 8009e82:	4665      	movge	r5, ip
 8009e84:	b107      	cbz	r7, 8009e88 <_strtod_l+0x2e0>
 8009e86:	426d      	negs	r5, r5
 8009e88:	2c00      	cmp	r4, #0
 8009e8a:	d14c      	bne.n	8009f26 <_strtod_l+0x37e>
 8009e8c:	9907      	ldr	r1, [sp, #28]
 8009e8e:	4301      	orrs	r1, r0
 8009e90:	f47f aecb 	bne.w	8009c2a <_strtod_l+0x82>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f47f aee4 	bne.w	8009c62 <_strtod_l+0xba>
 8009e9a:	2a69      	cmp	r2, #105	; 0x69
 8009e9c:	d026      	beq.n	8009eec <_strtod_l+0x344>
 8009e9e:	dc23      	bgt.n	8009ee8 <_strtod_l+0x340>
 8009ea0:	2a49      	cmp	r2, #73	; 0x49
 8009ea2:	d023      	beq.n	8009eec <_strtod_l+0x344>
 8009ea4:	2a4e      	cmp	r2, #78	; 0x4e
 8009ea6:	f47f aedc 	bne.w	8009c62 <_strtod_l+0xba>
 8009eaa:	499d      	ldr	r1, [pc, #628]	; (800a120 <_strtod_l+0x578>)
 8009eac:	a819      	add	r0, sp, #100	; 0x64
 8009eae:	f001 fe23 	bl	800baf8 <__match>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f aed5 	beq.w	8009c62 <_strtod_l+0xba>
 8009eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b28      	cmp	r3, #40	; 0x28
 8009ebe:	d12c      	bne.n	8009f1a <_strtod_l+0x372>
 8009ec0:	4998      	ldr	r1, [pc, #608]	; (800a124 <_strtod_l+0x57c>)
 8009ec2:	aa1c      	add	r2, sp, #112	; 0x70
 8009ec4:	a819      	add	r0, sp, #100	; 0x64
 8009ec6:	f001 fe2b 	bl	800bb20 <__hexnan>
 8009eca:	2805      	cmp	r0, #5
 8009ecc:	d125      	bne.n	8009f1a <_strtod_l+0x372>
 8009ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ed0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009ed4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009ed8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009edc:	e6a5      	b.n	8009c2a <_strtod_l+0x82>
 8009ede:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009ee2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009ee6:	e7bc      	b.n	8009e62 <_strtod_l+0x2ba>
 8009ee8:	2a6e      	cmp	r2, #110	; 0x6e
 8009eea:	e7dc      	b.n	8009ea6 <_strtod_l+0x2fe>
 8009eec:	498e      	ldr	r1, [pc, #568]	; (800a128 <_strtod_l+0x580>)
 8009eee:	a819      	add	r0, sp, #100	; 0x64
 8009ef0:	f001 fe02 	bl	800baf8 <__match>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f43f aeb4 	beq.w	8009c62 <_strtod_l+0xba>
 8009efa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009efc:	498b      	ldr	r1, [pc, #556]	; (800a12c <_strtod_l+0x584>)
 8009efe:	3b01      	subs	r3, #1
 8009f00:	a819      	add	r0, sp, #100	; 0x64
 8009f02:	9319      	str	r3, [sp, #100]	; 0x64
 8009f04:	f001 fdf8 	bl	800baf8 <__match>
 8009f08:	b910      	cbnz	r0, 8009f10 <_strtod_l+0x368>
 8009f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	9319      	str	r3, [sp, #100]	; 0x64
 8009f10:	f04f 0800 	mov.w	r8, #0
 8009f14:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a130 <_strtod_l+0x588>
 8009f18:	e687      	b.n	8009c2a <_strtod_l+0x82>
 8009f1a:	4886      	ldr	r0, [pc, #536]	; (800a134 <_strtod_l+0x58c>)
 8009f1c:	f002 fdda 	bl	800cad4 <nan>
 8009f20:	4680      	mov	r8, r0
 8009f22:	4689      	mov	r9, r1
 8009f24:	e681      	b.n	8009c2a <_strtod_l+0x82>
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	f1bb 0f00 	cmp.w	fp, #0
 8009f2c:	bf08      	it	eq
 8009f2e:	46a3      	moveq	fp, r4
 8009f30:	1aeb      	subs	r3, r5, r3
 8009f32:	2c10      	cmp	r4, #16
 8009f34:	9806      	ldr	r0, [sp, #24]
 8009f36:	4626      	mov	r6, r4
 8009f38:	9307      	str	r3, [sp, #28]
 8009f3a:	bfa8      	it	ge
 8009f3c:	2610      	movge	r6, #16
 8009f3e:	f7fc fb73 	bl	8006628 <__aeabi_ui2d>
 8009f42:	2c09      	cmp	r4, #9
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	dd13      	ble.n	8009f72 <_strtod_l+0x3ca>
 8009f4a:	4b7b      	ldr	r3, [pc, #492]	; (800a138 <_strtod_l+0x590>)
 8009f4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f54:	f7fc fbe2 	bl	800671c <__aeabi_dmul>
 8009f58:	4680      	mov	r8, r0
 8009f5a:	9805      	ldr	r0, [sp, #20]
 8009f5c:	4689      	mov	r9, r1
 8009f5e:	f7fc fb63 	bl	8006628 <__aeabi_ui2d>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7fc fa21 	bl	80063b0 <__adddf3>
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	2c0f      	cmp	r4, #15
 8009f74:	dc36      	bgt.n	8009fe4 <_strtod_l+0x43c>
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f43f ae56 	beq.w	8009c2a <_strtod_l+0x82>
 8009f7e:	dd22      	ble.n	8009fc6 <_strtod_l+0x41e>
 8009f80:	2b16      	cmp	r3, #22
 8009f82:	dc09      	bgt.n	8009f98 <_strtod_l+0x3f0>
 8009f84:	496c      	ldr	r1, [pc, #432]	; (800a138 <_strtod_l+0x590>)
 8009f86:	4642      	mov	r2, r8
 8009f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f92:	f7fc fbc3 	bl	800671c <__aeabi_dmul>
 8009f96:	e7c3      	b.n	8009f20 <_strtod_l+0x378>
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	db20      	blt.n	8009fe4 <_strtod_l+0x43c>
 8009fa2:	4d65      	ldr	r5, [pc, #404]	; (800a138 <_strtod_l+0x590>)
 8009fa4:	f1c4 040f 	rsb	r4, r4, #15
 8009fa8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009fac:	4642      	mov	r2, r8
 8009fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	f7fc fbb2 	bl	800671c <__aeabi_dmul>
 8009fb8:	9b07      	ldr	r3, [sp, #28]
 8009fba:	1b1c      	subs	r4, r3, r4
 8009fbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fc4:	e7e5      	b.n	8009f92 <_strtod_l+0x3ea>
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	3316      	adds	r3, #22
 8009fca:	db0b      	blt.n	8009fe4 <_strtod_l+0x43c>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4640      	mov	r0, r8
 8009fd0:	1b5d      	subs	r5, r3, r5
 8009fd2:	4b59      	ldr	r3, [pc, #356]	; (800a138 <_strtod_l+0x590>)
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009fda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fde:	f7fc fcc7 	bl	8006970 <__aeabi_ddiv>
 8009fe2:	e79d      	b.n	8009f20 <_strtod_l+0x378>
 8009fe4:	9b07      	ldr	r3, [sp, #28]
 8009fe6:	1ba6      	subs	r6, r4, r6
 8009fe8:	441e      	add	r6, r3
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	dd74      	ble.n	800a0d8 <_strtod_l+0x530>
 8009fee:	f016 030f 	ands.w	r3, r6, #15
 8009ff2:	d00a      	beq.n	800a00a <_strtod_l+0x462>
 8009ff4:	4950      	ldr	r1, [pc, #320]	; (800a138 <_strtod_l+0x590>)
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a000:	464b      	mov	r3, r9
 800a002:	f7fc fb8b 	bl	800671c <__aeabi_dmul>
 800a006:	4680      	mov	r8, r0
 800a008:	4689      	mov	r9, r1
 800a00a:	f036 060f 	bics.w	r6, r6, #15
 800a00e:	d052      	beq.n	800a0b6 <_strtod_l+0x50e>
 800a010:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a014:	dd27      	ble.n	800a066 <_strtod_l+0x4be>
 800a016:	f04f 0b00 	mov.w	fp, #0
 800a01a:	f8cd b010 	str.w	fp, [sp, #16]
 800a01e:	f8cd b020 	str.w	fp, [sp, #32]
 800a022:	f8cd b018 	str.w	fp, [sp, #24]
 800a026:	2322      	movs	r3, #34	; 0x22
 800a028:	f04f 0800 	mov.w	r8, #0
 800a02c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a130 <_strtod_l+0x588>
 800a030:	f8ca 3000 	str.w	r3, [sl]
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f43f adf7 	beq.w	8009c2a <_strtod_l+0x82>
 800a03c:	4650      	mov	r0, sl
 800a03e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a040:	f001 fe84 	bl	800bd4c <_Bfree>
 800a044:	4650      	mov	r0, sl
 800a046:	9906      	ldr	r1, [sp, #24]
 800a048:	f001 fe80 	bl	800bd4c <_Bfree>
 800a04c:	4650      	mov	r0, sl
 800a04e:	9904      	ldr	r1, [sp, #16]
 800a050:	f001 fe7c 	bl	800bd4c <_Bfree>
 800a054:	4650      	mov	r0, sl
 800a056:	9908      	ldr	r1, [sp, #32]
 800a058:	f001 fe78 	bl	800bd4c <_Bfree>
 800a05c:	4659      	mov	r1, fp
 800a05e:	4650      	mov	r0, sl
 800a060:	f001 fe74 	bl	800bd4c <_Bfree>
 800a064:	e5e1      	b.n	8009c2a <_strtod_l+0x82>
 800a066:	4b35      	ldr	r3, [pc, #212]	; (800a13c <_strtod_l+0x594>)
 800a068:	4640      	mov	r0, r8
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	2300      	movs	r3, #0
 800a06e:	4649      	mov	r1, r9
 800a070:	461f      	mov	r7, r3
 800a072:	1136      	asrs	r6, r6, #4
 800a074:	2e01      	cmp	r6, #1
 800a076:	dc21      	bgt.n	800a0bc <_strtod_l+0x514>
 800a078:	b10b      	cbz	r3, 800a07e <_strtod_l+0x4d6>
 800a07a:	4680      	mov	r8, r0
 800a07c:	4689      	mov	r9, r1
 800a07e:	4b2f      	ldr	r3, [pc, #188]	; (800a13c <_strtod_l+0x594>)
 800a080:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a084:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a088:	4642      	mov	r2, r8
 800a08a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a08e:	464b      	mov	r3, r9
 800a090:	f7fc fb44 	bl	800671c <__aeabi_dmul>
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <_strtod_l+0x588>)
 800a096:	460a      	mov	r2, r1
 800a098:	400b      	ands	r3, r1
 800a09a:	4929      	ldr	r1, [pc, #164]	; (800a140 <_strtod_l+0x598>)
 800a09c:	4680      	mov	r8, r0
 800a09e:	428b      	cmp	r3, r1
 800a0a0:	d8b9      	bhi.n	800a016 <_strtod_l+0x46e>
 800a0a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0a6:	428b      	cmp	r3, r1
 800a0a8:	bf86      	itte	hi
 800a0aa:	f04f 38ff 	movhi.w	r8, #4294967295
 800a0ae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a144 <_strtod_l+0x59c>
 800a0b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9305      	str	r3, [sp, #20]
 800a0ba:	e07f      	b.n	800a1bc <_strtod_l+0x614>
 800a0bc:	07f2      	lsls	r2, r6, #31
 800a0be:	d505      	bpl.n	800a0cc <_strtod_l+0x524>
 800a0c0:	9b05      	ldr	r3, [sp, #20]
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7fc fb29 	bl	800671c <__aeabi_dmul>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	3701      	adds	r7, #1
 800a0d0:	3208      	adds	r2, #8
 800a0d2:	1076      	asrs	r6, r6, #1
 800a0d4:	9205      	str	r2, [sp, #20]
 800a0d6:	e7cd      	b.n	800a074 <_strtod_l+0x4cc>
 800a0d8:	d0ed      	beq.n	800a0b6 <_strtod_l+0x50e>
 800a0da:	4276      	negs	r6, r6
 800a0dc:	f016 020f 	ands.w	r2, r6, #15
 800a0e0:	d00a      	beq.n	800a0f8 <_strtod_l+0x550>
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <_strtod_l+0x590>)
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7fc fc3e 	bl	8006970 <__aeabi_ddiv>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	1136      	asrs	r6, r6, #4
 800a0fa:	d0dc      	beq.n	800a0b6 <_strtod_l+0x50e>
 800a0fc:	2e1f      	cmp	r6, #31
 800a0fe:	dd23      	ble.n	800a148 <_strtod_l+0x5a0>
 800a100:	f04f 0b00 	mov.w	fp, #0
 800a104:	f8cd b010 	str.w	fp, [sp, #16]
 800a108:	f8cd b020 	str.w	fp, [sp, #32]
 800a10c:	f8cd b018 	str.w	fp, [sp, #24]
 800a110:	2322      	movs	r3, #34	; 0x22
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	f04f 0900 	mov.w	r9, #0
 800a11a:	f8ca 3000 	str.w	r3, [sl]
 800a11e:	e789      	b.n	800a034 <_strtod_l+0x48c>
 800a120:	0801f0a9 	.word	0x0801f0a9
 800a124:	0801f0ec 	.word	0x0801f0ec
 800a128:	0801f0a1 	.word	0x0801f0a1
 800a12c:	0801f22c 	.word	0x0801f22c
 800a130:	7ff00000 	.word	0x7ff00000
 800a134:	0801f540 	.word	0x0801f540
 800a138:	0801f420 	.word	0x0801f420
 800a13c:	0801f3f8 	.word	0x0801f3f8
 800a140:	7ca00000 	.word	0x7ca00000
 800a144:	7fefffff 	.word	0x7fefffff
 800a148:	f016 0310 	ands.w	r3, r6, #16
 800a14c:	bf18      	it	ne
 800a14e:	236a      	movne	r3, #106	; 0x6a
 800a150:	4640      	mov	r0, r8
 800a152:	9305      	str	r3, [sp, #20]
 800a154:	4649      	mov	r1, r9
 800a156:	2300      	movs	r3, #0
 800a158:	4fb0      	ldr	r7, [pc, #704]	; (800a41c <_strtod_l+0x874>)
 800a15a:	07f2      	lsls	r2, r6, #31
 800a15c:	d504      	bpl.n	800a168 <_strtod_l+0x5c0>
 800a15e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a162:	f7fc fadb 	bl	800671c <__aeabi_dmul>
 800a166:	2301      	movs	r3, #1
 800a168:	1076      	asrs	r6, r6, #1
 800a16a:	f107 0708 	add.w	r7, r7, #8
 800a16e:	d1f4      	bne.n	800a15a <_strtod_l+0x5b2>
 800a170:	b10b      	cbz	r3, 800a176 <_strtod_l+0x5ce>
 800a172:	4680      	mov	r8, r0
 800a174:	4689      	mov	r9, r1
 800a176:	9b05      	ldr	r3, [sp, #20]
 800a178:	b1c3      	cbz	r3, 800a1ac <_strtod_l+0x604>
 800a17a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a17e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a182:	2b00      	cmp	r3, #0
 800a184:	4649      	mov	r1, r9
 800a186:	dd11      	ble.n	800a1ac <_strtod_l+0x604>
 800a188:	2b1f      	cmp	r3, #31
 800a18a:	f340 8127 	ble.w	800a3dc <_strtod_l+0x834>
 800a18e:	2b34      	cmp	r3, #52	; 0x34
 800a190:	bfd8      	it	le
 800a192:	f04f 33ff 	movle.w	r3, #4294967295
 800a196:	f04f 0800 	mov.w	r8, #0
 800a19a:	bfcf      	iteee	gt
 800a19c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a1a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a1a4:	fa03 f202 	lslle.w	r2, r3, r2
 800a1a8:	ea02 0901 	andle.w	r9, r2, r1
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	f7fc fd1a 	bl	8006bec <__aeabi_dcmpeq>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d1a1      	bne.n	800a100 <_strtod_l+0x558>
 800a1bc:	9b06      	ldr	r3, [sp, #24]
 800a1be:	465a      	mov	r2, fp
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	4623      	mov	r3, r4
 800a1c6:	9908      	ldr	r1, [sp, #32]
 800a1c8:	f001 fe28 	bl	800be1c <__s2b>
 800a1cc:	9008      	str	r0, [sp, #32]
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f af21 	beq.w	800a016 <_strtod_l+0x46e>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	f04f 0b00 	mov.w	fp, #0
 800a1da:	1b5d      	subs	r5, r3, r5
 800a1dc:	9b07      	ldr	r3, [sp, #28]
 800a1de:	f8cd b010 	str.w	fp, [sp, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb4      	ite	lt
 800a1e6:	462b      	movlt	r3, r5
 800a1e8:	2300      	movge	r3, #0
 800a1ea:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1f2:	9314      	str	r3, [sp, #80]	; 0x50
 800a1f4:	9b08      	ldr	r3, [sp, #32]
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	6859      	ldr	r1, [r3, #4]
 800a1fa:	f001 fd67 	bl	800bccc <_Balloc>
 800a1fe:	9006      	str	r0, [sp, #24]
 800a200:	2800      	cmp	r0, #0
 800a202:	f43f af10 	beq.w	800a026 <_strtod_l+0x47e>
 800a206:	9b08      	ldr	r3, [sp, #32]
 800a208:	300c      	adds	r0, #12
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	f103 010c 	add.w	r1, r3, #12
 800a210:	3202      	adds	r2, #2
 800a212:	0092      	lsls	r2, r2, #2
 800a214:	f001 fd4c 	bl	800bcb0 <memcpy>
 800a218:	ab1c      	add	r3, sp, #112	; 0x70
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	4642      	mov	r2, r8
 800a222:	464b      	mov	r3, r9
 800a224:	4650      	mov	r0, sl
 800a226:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a22a:	f002 f939 	bl	800c4a0 <__d2b>
 800a22e:	901a      	str	r0, [sp, #104]	; 0x68
 800a230:	2800      	cmp	r0, #0
 800a232:	f43f aef8 	beq.w	800a026 <_strtod_l+0x47e>
 800a236:	2101      	movs	r1, #1
 800a238:	4650      	mov	r0, sl
 800a23a:	f001 fe87 	bl	800bf4c <__i2b>
 800a23e:	4603      	mov	r3, r0
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	2800      	cmp	r0, #0
 800a244:	f43f aeef 	beq.w	800a026 <_strtod_l+0x47e>
 800a248:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a24a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a24c:	2d00      	cmp	r5, #0
 800a24e:	bfab      	itete	ge
 800a250:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a252:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a254:	18ee      	addge	r6, r5, r3
 800a256:	1b5c      	sublt	r4, r3, r5
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	bfa8      	it	ge
 800a25c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a25e:	eba5 0503 	sub.w	r5, r5, r3
 800a262:	4415      	add	r5, r2
 800a264:	4b6e      	ldr	r3, [pc, #440]	; (800a420 <_strtod_l+0x878>)
 800a266:	f105 35ff 	add.w	r5, r5, #4294967295
 800a26a:	bfb8      	it	lt
 800a26c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a26e:	429d      	cmp	r5, r3
 800a270:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a274:	f280 80c4 	bge.w	800a400 <_strtod_l+0x858>
 800a278:	1b5b      	subs	r3, r3, r5
 800a27a:	2b1f      	cmp	r3, #31
 800a27c:	f04f 0701 	mov.w	r7, #1
 800a280:	eba2 0203 	sub.w	r2, r2, r3
 800a284:	f300 80b1 	bgt.w	800a3ea <_strtod_l+0x842>
 800a288:	2500      	movs	r5, #0
 800a28a:	fa07 f303 	lsl.w	r3, r7, r3
 800a28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a290:	18b7      	adds	r7, r6, r2
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	42be      	cmp	r6, r7
 800a296:	4414      	add	r4, r2
 800a298:	441c      	add	r4, r3
 800a29a:	4633      	mov	r3, r6
 800a29c:	bfa8      	it	ge
 800a29e:	463b      	movge	r3, r7
 800a2a0:	42a3      	cmp	r3, r4
 800a2a2:	bfa8      	it	ge
 800a2a4:	4623      	movge	r3, r4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfc2      	ittt	gt
 800a2aa:	1aff      	subgt	r7, r7, r3
 800a2ac:	1ae4      	subgt	r4, r4, r3
 800a2ae:	1af6      	subgt	r6, r6, r3
 800a2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd17      	ble.n	800a2e6 <_strtod_l+0x73e>
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4650      	mov	r0, sl
 800a2ba:	9904      	ldr	r1, [sp, #16]
 800a2bc:	f001 ff04 	bl	800c0c8 <__pow5mult>
 800a2c0:	9004      	str	r0, [sp, #16]
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f aeaf 	beq.w	800a026 <_strtod_l+0x47e>
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2cc:	4650      	mov	r0, sl
 800a2ce:	f001 fe53 	bl	800bf78 <__multiply>
 800a2d2:	9009      	str	r0, [sp, #36]	; 0x24
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f43f aea6 	beq.w	800a026 <_strtod_l+0x47e>
 800a2da:	4650      	mov	r0, sl
 800a2dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2de:	f001 fd35 	bl	800bd4c <_Bfree>
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e6:	2f00      	cmp	r7, #0
 800a2e8:	f300 808e 	bgt.w	800a408 <_strtod_l+0x860>
 800a2ec:	9b07      	ldr	r3, [sp, #28]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	dd08      	ble.n	800a304 <_strtod_l+0x75c>
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2f6:	9906      	ldr	r1, [sp, #24]
 800a2f8:	f001 fee6 	bl	800c0c8 <__pow5mult>
 800a2fc:	9006      	str	r0, [sp, #24]
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f ae91 	beq.w	800a026 <_strtod_l+0x47e>
 800a304:	2c00      	cmp	r4, #0
 800a306:	dd08      	ble.n	800a31a <_strtod_l+0x772>
 800a308:	4622      	mov	r2, r4
 800a30a:	4650      	mov	r0, sl
 800a30c:	9906      	ldr	r1, [sp, #24]
 800a30e:	f001 ff35 	bl	800c17c <__lshift>
 800a312:	9006      	str	r0, [sp, #24]
 800a314:	2800      	cmp	r0, #0
 800a316:	f43f ae86 	beq.w	800a026 <_strtod_l+0x47e>
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	dd08      	ble.n	800a330 <_strtod_l+0x788>
 800a31e:	4632      	mov	r2, r6
 800a320:	4650      	mov	r0, sl
 800a322:	9904      	ldr	r1, [sp, #16]
 800a324:	f001 ff2a 	bl	800c17c <__lshift>
 800a328:	9004      	str	r0, [sp, #16]
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f43f ae7b 	beq.w	800a026 <_strtod_l+0x47e>
 800a330:	4650      	mov	r0, sl
 800a332:	9a06      	ldr	r2, [sp, #24]
 800a334:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a336:	f001 ffad 	bl	800c294 <__mdiff>
 800a33a:	4683      	mov	fp, r0
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f43f ae72 	beq.w	800a026 <_strtod_l+0x47e>
 800a342:	2400      	movs	r4, #0
 800a344:	68c3      	ldr	r3, [r0, #12]
 800a346:	9904      	ldr	r1, [sp, #16]
 800a348:	60c4      	str	r4, [r0, #12]
 800a34a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a34c:	f001 ff86 	bl	800c25c <__mcmp>
 800a350:	42a0      	cmp	r0, r4
 800a352:	da6b      	bge.n	800a42c <_strtod_l+0x884>
 800a354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a356:	ea53 0308 	orrs.w	r3, r3, r8
 800a35a:	f040 8091 	bne.w	800a480 <_strtod_l+0x8d8>
 800a35e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 808c 	bne.w	800a480 <_strtod_l+0x8d8>
 800a368:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a36c:	0d1b      	lsrs	r3, r3, #20
 800a36e:	051b      	lsls	r3, r3, #20
 800a370:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a374:	f240 8084 	bls.w	800a480 <_strtod_l+0x8d8>
 800a378:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a37c:	b91b      	cbnz	r3, 800a386 <_strtod_l+0x7de>
 800a37e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a382:	2b01      	cmp	r3, #1
 800a384:	dd7c      	ble.n	800a480 <_strtod_l+0x8d8>
 800a386:	4659      	mov	r1, fp
 800a388:	2201      	movs	r2, #1
 800a38a:	4650      	mov	r0, sl
 800a38c:	f001 fef6 	bl	800c17c <__lshift>
 800a390:	9904      	ldr	r1, [sp, #16]
 800a392:	4683      	mov	fp, r0
 800a394:	f001 ff62 	bl	800c25c <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	dd71      	ble.n	800a480 <_strtod_l+0x8d8>
 800a39c:	9905      	ldr	r1, [sp, #20]
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4a20      	ldr	r2, [pc, #128]	; (800a424 <_strtod_l+0x87c>)
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	f000 808c 	beq.w	800a4c0 <_strtod_l+0x918>
 800a3a8:	ea02 0109 	and.w	r1, r2, r9
 800a3ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3b0:	f300 8086 	bgt.w	800a4c0 <_strtod_l+0x918>
 800a3b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3b8:	f77f aeaa 	ble.w	800a110 <_strtod_l+0x568>
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	4b19      	ldr	r3, [pc, #100]	; (800a428 <_strtod_l+0x880>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f7fc f9aa 	bl	800671c <__aeabi_dmul>
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4303      	orrs	r3, r0
 800a3cc:	bf08      	it	eq
 800a3ce:	2322      	moveq	r3, #34	; 0x22
 800a3d0:	4680      	mov	r8, r0
 800a3d2:	4689      	mov	r9, r1
 800a3d4:	bf08      	it	eq
 800a3d6:	f8ca 3000 	streq.w	r3, [sl]
 800a3da:	e62f      	b.n	800a03c <_strtod_l+0x494>
 800a3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	ea03 0808 	and.w	r8, r3, r8
 800a3e8:	e6e0      	b.n	800a1ac <_strtod_l+0x604>
 800a3ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a3ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a3f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a3f6:	35e2      	adds	r5, #226	; 0xe2
 800a3f8:	fa07 f505 	lsl.w	r5, r7, r5
 800a3fc:	970f      	str	r7, [sp, #60]	; 0x3c
 800a3fe:	e747      	b.n	800a290 <_strtod_l+0x6e8>
 800a400:	2301      	movs	r3, #1
 800a402:	2500      	movs	r5, #0
 800a404:	930f      	str	r3, [sp, #60]	; 0x3c
 800a406:	e743      	b.n	800a290 <_strtod_l+0x6e8>
 800a408:	463a      	mov	r2, r7
 800a40a:	4650      	mov	r0, sl
 800a40c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a40e:	f001 feb5 	bl	800c17c <__lshift>
 800a412:	901a      	str	r0, [sp, #104]	; 0x68
 800a414:	2800      	cmp	r0, #0
 800a416:	f47f af69 	bne.w	800a2ec <_strtod_l+0x744>
 800a41a:	e604      	b.n	800a026 <_strtod_l+0x47e>
 800a41c:	0801f100 	.word	0x0801f100
 800a420:	fffffc02 	.word	0xfffffc02
 800a424:	7ff00000 	.word	0x7ff00000
 800a428:	39500000 	.word	0x39500000
 800a42c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a430:	d165      	bne.n	800a4fe <_strtod_l+0x956>
 800a432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a438:	b35a      	cbz	r2, 800a492 <_strtod_l+0x8ea>
 800a43a:	4a99      	ldr	r2, [pc, #612]	; (800a6a0 <_strtod_l+0xaf8>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d12b      	bne.n	800a498 <_strtod_l+0x8f0>
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	4641      	mov	r1, r8
 800a444:	b303      	cbz	r3, 800a488 <_strtod_l+0x8e0>
 800a446:	464a      	mov	r2, r9
 800a448:	4b96      	ldr	r3, [pc, #600]	; (800a6a4 <_strtod_l+0xafc>)
 800a44a:	4013      	ands	r3, r2
 800a44c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a450:	f04f 32ff 	mov.w	r2, #4294967295
 800a454:	d81b      	bhi.n	800a48e <_strtod_l+0x8e6>
 800a456:	0d1b      	lsrs	r3, r3, #20
 800a458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	4299      	cmp	r1, r3
 800a462:	d119      	bne.n	800a498 <_strtod_l+0x8f0>
 800a464:	4b90      	ldr	r3, [pc, #576]	; (800a6a8 <_strtod_l+0xb00>)
 800a466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a468:	429a      	cmp	r2, r3
 800a46a:	d102      	bne.n	800a472 <_strtod_l+0x8ca>
 800a46c:	3101      	adds	r1, #1
 800a46e:	f43f adda 	beq.w	800a026 <_strtod_l+0x47e>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	4b8b      	ldr	r3, [pc, #556]	; (800a6a4 <_strtod_l+0xafc>)
 800a478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47a:	401a      	ands	r2, r3
 800a47c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a480:	9b05      	ldr	r3, [sp, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d19a      	bne.n	800a3bc <_strtod_l+0x814>
 800a486:	e5d9      	b.n	800a03c <_strtod_l+0x494>
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	e7e8      	b.n	800a460 <_strtod_l+0x8b8>
 800a48e:	4613      	mov	r3, r2
 800a490:	e7e6      	b.n	800a460 <_strtod_l+0x8b8>
 800a492:	ea53 0308 	orrs.w	r3, r3, r8
 800a496:	d081      	beq.n	800a39c <_strtod_l+0x7f4>
 800a498:	b1e5      	cbz	r5, 800a4d4 <_strtod_l+0x92c>
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	421d      	tst	r5, r3
 800a49e:	d0ef      	beq.n	800a480 <_strtod_l+0x8d8>
 800a4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	9a05      	ldr	r2, [sp, #20]
 800a4a8:	b1c3      	cbz	r3, 800a4dc <_strtod_l+0x934>
 800a4aa:	f7ff fb5b 	bl	8009b64 <sulp>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4b6:	f7fb ff7b 	bl	80063b0 <__adddf3>
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	4689      	mov	r9, r1
 800a4be:	e7df      	b.n	800a480 <_strtod_l+0x8d8>
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a4ca:	f04f 38ff 	mov.w	r8, #4294967295
 800a4ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a4d2:	e7d5      	b.n	800a480 <_strtod_l+0x8d8>
 800a4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4d6:	ea13 0f08 	tst.w	r3, r8
 800a4da:	e7e0      	b.n	800a49e <_strtod_l+0x8f6>
 800a4dc:	f7ff fb42 	bl	8009b64 <sulp>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4e8:	f7fb ff60 	bl	80063ac <__aeabi_dsub>
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4689      	mov	r9, r1
 800a4f4:	f7fc fb7a 	bl	8006bec <__aeabi_dcmpeq>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0c1      	beq.n	800a480 <_strtod_l+0x8d8>
 800a4fc:	e608      	b.n	800a110 <_strtod_l+0x568>
 800a4fe:	4658      	mov	r0, fp
 800a500:	9904      	ldr	r1, [sp, #16]
 800a502:	f002 f829 	bl	800c558 <__ratio>
 800a506:	2200      	movs	r2, #0
 800a508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a50c:	4606      	mov	r6, r0
 800a50e:	460f      	mov	r7, r1
 800a510:	f7fc fb80 	bl	8006c14 <__aeabi_dcmple>
 800a514:	2800      	cmp	r0, #0
 800a516:	d070      	beq.n	800a5fa <_strtod_l+0xa52>
 800a518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d042      	beq.n	800a5a4 <_strtod_l+0x9fc>
 800a51e:	2600      	movs	r6, #0
 800a520:	4f62      	ldr	r7, [pc, #392]	; (800a6ac <_strtod_l+0xb04>)
 800a522:	4d62      	ldr	r5, [pc, #392]	; (800a6ac <_strtod_l+0xb04>)
 800a524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a52a:	0d1b      	lsrs	r3, r3, #20
 800a52c:	051b      	lsls	r3, r3, #20
 800a52e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a532:	4b5f      	ldr	r3, [pc, #380]	; (800a6b0 <_strtod_l+0xb08>)
 800a534:	429a      	cmp	r2, r3
 800a536:	f040 80c3 	bne.w	800a6c0 <_strtod_l+0xb18>
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	4640      	mov	r0, r8
 800a53e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a542:	4649      	mov	r1, r9
 800a544:	f001 ff32 	bl	800c3ac <__ulp>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7fc f8e4 	bl	800671c <__aeabi_dmul>
 800a554:	4642      	mov	r2, r8
 800a556:	464b      	mov	r3, r9
 800a558:	f7fb ff2a 	bl	80063b0 <__adddf3>
 800a55c:	460b      	mov	r3, r1
 800a55e:	4951      	ldr	r1, [pc, #324]	; (800a6a4 <_strtod_l+0xafc>)
 800a560:	4a54      	ldr	r2, [pc, #336]	; (800a6b4 <_strtod_l+0xb0c>)
 800a562:	4019      	ands	r1, r3
 800a564:	4291      	cmp	r1, r2
 800a566:	4680      	mov	r8, r0
 800a568:	d95d      	bls.n	800a626 <_strtod_l+0xa7e>
 800a56a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a56c:	4b4e      	ldr	r3, [pc, #312]	; (800a6a8 <_strtod_l+0xb00>)
 800a56e:	429a      	cmp	r2, r3
 800a570:	d103      	bne.n	800a57a <_strtod_l+0x9d2>
 800a572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a574:	3301      	adds	r3, #1
 800a576:	f43f ad56 	beq.w	800a026 <_strtod_l+0x47e>
 800a57a:	f04f 38ff 	mov.w	r8, #4294967295
 800a57e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a6a8 <_strtod_l+0xb00>
 800a582:	4650      	mov	r0, sl
 800a584:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a586:	f001 fbe1 	bl	800bd4c <_Bfree>
 800a58a:	4650      	mov	r0, sl
 800a58c:	9906      	ldr	r1, [sp, #24]
 800a58e:	f001 fbdd 	bl	800bd4c <_Bfree>
 800a592:	4650      	mov	r0, sl
 800a594:	9904      	ldr	r1, [sp, #16]
 800a596:	f001 fbd9 	bl	800bd4c <_Bfree>
 800a59a:	4659      	mov	r1, fp
 800a59c:	4650      	mov	r0, sl
 800a59e:	f001 fbd5 	bl	800bd4c <_Bfree>
 800a5a2:	e627      	b.n	800a1f4 <_strtod_l+0x64c>
 800a5a4:	f1b8 0f00 	cmp.w	r8, #0
 800a5a8:	d119      	bne.n	800a5de <_strtod_l+0xa36>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b0:	b9e3      	cbnz	r3, 800a5ec <_strtod_l+0xa44>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	4b3c      	ldr	r3, [pc, #240]	; (800a6ac <_strtod_l+0xb04>)
 800a5ba:	f7fc fb21 	bl	8006c00 <__aeabi_dcmplt>
 800a5be:	b9c8      	cbnz	r0, 800a5f4 <_strtod_l+0xa4c>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4b3c      	ldr	r3, [pc, #240]	; (800a6b8 <_strtod_l+0xb10>)
 800a5c8:	f7fc f8a8 	bl	800671c <__aeabi_dmul>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a5d4:	9416      	str	r4, [sp, #88]	; 0x58
 800a5d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a5dc:	e7a2      	b.n	800a524 <_strtod_l+0x97c>
 800a5de:	f1b8 0f01 	cmp.w	r8, #1
 800a5e2:	d103      	bne.n	800a5ec <_strtod_l+0xa44>
 800a5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f ad92 	beq.w	800a110 <_strtod_l+0x568>
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	4f32      	ldr	r7, [pc, #200]	; (800a6bc <_strtod_l+0xb14>)
 800a5f2:	e796      	b.n	800a522 <_strtod_l+0x97a>
 800a5f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a5f6:	4d30      	ldr	r5, [pc, #192]	; (800a6b8 <_strtod_l+0xb10>)
 800a5f8:	e7ea      	b.n	800a5d0 <_strtod_l+0xa28>
 800a5fa:	4b2f      	ldr	r3, [pc, #188]	; (800a6b8 <_strtod_l+0xb10>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7fc f88b 	bl	800671c <__aeabi_dmul>
 800a606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a608:	4604      	mov	r4, r0
 800a60a:	460d      	mov	r5, r1
 800a60c:	b933      	cbnz	r3, 800a61c <_strtod_l+0xa74>
 800a60e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a612:	9010      	str	r0, [sp, #64]	; 0x40
 800a614:	9311      	str	r3, [sp, #68]	; 0x44
 800a616:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a61a:	e783      	b.n	800a524 <_strtod_l+0x97c>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a624:	e7f7      	b.n	800a616 <_strtod_l+0xa6e>
 800a626:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1a8      	bne.n	800a582 <_strtod_l+0x9da>
 800a630:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a636:	0d1b      	lsrs	r3, r3, #20
 800a638:	051b      	lsls	r3, r3, #20
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d1a1      	bne.n	800a582 <_strtod_l+0x9da>
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7fc fbb3 	bl	8006dac <__aeabi_d2lz>
 800a646:	f7fc f83b 	bl	80066c0 <__aeabi_l2d>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7fb feab 	bl	80063ac <__aeabi_dsub>
 800a656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a65c:	ea43 0308 	orr.w	r3, r3, r8
 800a660:	4313      	orrs	r3, r2
 800a662:	4604      	mov	r4, r0
 800a664:	460d      	mov	r5, r1
 800a666:	d066      	beq.n	800a736 <_strtod_l+0xb8e>
 800a668:	a309      	add	r3, pc, #36	; (adr r3, 800a690 <_strtod_l+0xae8>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	f7fc fac7 	bl	8006c00 <__aeabi_dcmplt>
 800a672:	2800      	cmp	r0, #0
 800a674:	f47f ace2 	bne.w	800a03c <_strtod_l+0x494>
 800a678:	a307      	add	r3, pc, #28	; (adr r3, 800a698 <_strtod_l+0xaf0>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7fc fadb 	bl	8006c3c <__aeabi_dcmpgt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f43f af7b 	beq.w	800a582 <_strtod_l+0x9da>
 800a68c:	e4d6      	b.n	800a03c <_strtod_l+0x494>
 800a68e:	bf00      	nop
 800a690:	94a03595 	.word	0x94a03595
 800a694:	3fdfffff 	.word	0x3fdfffff
 800a698:	35afe535 	.word	0x35afe535
 800a69c:	3fe00000 	.word	0x3fe00000
 800a6a0:	000fffff 	.word	0x000fffff
 800a6a4:	7ff00000 	.word	0x7ff00000
 800a6a8:	7fefffff 	.word	0x7fefffff
 800a6ac:	3ff00000 	.word	0x3ff00000
 800a6b0:	7fe00000 	.word	0x7fe00000
 800a6b4:	7c9fffff 	.word	0x7c9fffff
 800a6b8:	3fe00000 	.word	0x3fe00000
 800a6bc:	bff00000 	.word	0xbff00000
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	b313      	cbz	r3, 800a70a <_strtod_l+0xb62>
 800a6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6ca:	d81e      	bhi.n	800a70a <_strtod_l+0xb62>
 800a6cc:	a326      	add	r3, pc, #152	; (adr r3, 800a768 <_strtod_l+0xbc0>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7fc fa9d 	bl	8006c14 <__aeabi_dcmple>
 800a6da:	b190      	cbz	r0, 800a702 <_strtod_l+0xb5a>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7fc faf4 	bl	8006ccc <__aeabi_d2uiz>
 800a6e4:	2801      	cmp	r0, #1
 800a6e6:	bf38      	it	cc
 800a6e8:	2001      	movcc	r0, #1
 800a6ea:	f7fb ff9d 	bl	8006628 <__aeabi_ui2d>
 800a6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	b9d3      	cbnz	r3, 800a72c <_strtod_l+0xb84>
 800a6f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6fa:	9012      	str	r0, [sp, #72]	; 0x48
 800a6fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a704:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a708:	1a9f      	subs	r7, r3, r2
 800a70a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a70e:	f001 fe4d 	bl	800c3ac <__ulp>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	4630      	mov	r0, r6
 800a718:	4639      	mov	r1, r7
 800a71a:	f7fb ffff 	bl	800671c <__aeabi_dmul>
 800a71e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a722:	f7fb fe45 	bl	80063b0 <__adddf3>
 800a726:	4680      	mov	r8, r0
 800a728:	4689      	mov	r9, r1
 800a72a:	e77e      	b.n	800a62a <_strtod_l+0xa82>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a734:	e7e3      	b.n	800a6fe <_strtod_l+0xb56>
 800a736:	a30e      	add	r3, pc, #56	; (adr r3, 800a770 <_strtod_l+0xbc8>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f7fc fa60 	bl	8006c00 <__aeabi_dcmplt>
 800a740:	e7a1      	b.n	800a686 <_strtod_l+0xade>
 800a742:	2300      	movs	r3, #0
 800a744:	930a      	str	r3, [sp, #40]	; 0x28
 800a746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a748:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	f7ff ba71 	b.w	8009c32 <_strtod_l+0x8a>
 800a750:	2a65      	cmp	r2, #101	; 0x65
 800a752:	f43f ab63 	beq.w	8009e1c <_strtod_l+0x274>
 800a756:	2a45      	cmp	r2, #69	; 0x45
 800a758:	f43f ab60 	beq.w	8009e1c <_strtod_l+0x274>
 800a75c:	2301      	movs	r3, #1
 800a75e:	f7ff bb95 	b.w	8009e8c <_strtod_l+0x2e4>
 800a762:	bf00      	nop
 800a764:	f3af 8000 	nop.w
 800a768:	ffc00000 	.word	0xffc00000
 800a76c:	41dfffff 	.word	0x41dfffff
 800a770:	94a03595 	.word	0x94a03595
 800a774:	3fcfffff 	.word	0x3fcfffff

0800a778 <_strtod_r>:
 800a778:	4b01      	ldr	r3, [pc, #4]	; (800a780 <_strtod_r+0x8>)
 800a77a:	f7ff ba15 	b.w	8009ba8 <_strtod_l>
 800a77e:	bf00      	nop
 800a780:	20000074 	.word	0x20000074

0800a784 <_strtol_l.constprop.0>:
 800a784:	2b01      	cmp	r3, #1
 800a786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78a:	4680      	mov	r8, r0
 800a78c:	d001      	beq.n	800a792 <_strtol_l.constprop.0+0xe>
 800a78e:	2b24      	cmp	r3, #36	; 0x24
 800a790:	d906      	bls.n	800a7a0 <_strtol_l.constprop.0+0x1c>
 800a792:	f7fe fb23 	bl	8008ddc <__errno>
 800a796:	2316      	movs	r3, #22
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	2000      	movs	r0, #0
 800a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	4f35      	ldr	r7, [pc, #212]	; (800a878 <_strtol_l.constprop.0+0xf4>)
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7aa:	5de6      	ldrb	r6, [r4, r7]
 800a7ac:	f016 0608 	ands.w	r6, r6, #8
 800a7b0:	d1f8      	bne.n	800a7a4 <_strtol_l.constprop.0+0x20>
 800a7b2:	2c2d      	cmp	r4, #45	; 0x2d
 800a7b4:	d12f      	bne.n	800a816 <_strtol_l.constprop.0+0x92>
 800a7b6:	2601      	movs	r6, #1
 800a7b8:	782c      	ldrb	r4, [r5, #0]
 800a7ba:	1c85      	adds	r5, r0, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d057      	beq.n	800a870 <_strtol_l.constprop.0+0xec>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d109      	bne.n	800a7d8 <_strtol_l.constprop.0+0x54>
 800a7c4:	2c30      	cmp	r4, #48	; 0x30
 800a7c6:	d107      	bne.n	800a7d8 <_strtol_l.constprop.0+0x54>
 800a7c8:	7828      	ldrb	r0, [r5, #0]
 800a7ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a7ce:	2858      	cmp	r0, #88	; 0x58
 800a7d0:	d149      	bne.n	800a866 <_strtol_l.constprop.0+0xe2>
 800a7d2:	2310      	movs	r3, #16
 800a7d4:	786c      	ldrb	r4, [r5, #1]
 800a7d6:	3502      	adds	r5, #2
 800a7d8:	2700      	movs	r7, #0
 800a7da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a7de:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a7e2:	fbbe f9f3 	udiv	r9, lr, r3
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a7ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7f0:	f1bc 0f09 	cmp.w	ip, #9
 800a7f4:	d814      	bhi.n	800a820 <_strtol_l.constprop.0+0x9c>
 800a7f6:	4664      	mov	r4, ip
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	dd22      	ble.n	800a842 <_strtol_l.constprop.0+0xbe>
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	db1d      	blt.n	800a83c <_strtol_l.constprop.0+0xb8>
 800a800:	4581      	cmp	r9, r0
 800a802:	d31b      	bcc.n	800a83c <_strtol_l.constprop.0+0xb8>
 800a804:	d101      	bne.n	800a80a <_strtol_l.constprop.0+0x86>
 800a806:	45a2      	cmp	sl, r4
 800a808:	db18      	blt.n	800a83c <_strtol_l.constprop.0+0xb8>
 800a80a:	2701      	movs	r7, #1
 800a80c:	fb00 4003 	mla	r0, r0, r3, r4
 800a810:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a814:	e7ea      	b.n	800a7ec <_strtol_l.constprop.0+0x68>
 800a816:	2c2b      	cmp	r4, #43	; 0x2b
 800a818:	bf04      	itt	eq
 800a81a:	782c      	ldrbeq	r4, [r5, #0]
 800a81c:	1c85      	addeq	r5, r0, #2
 800a81e:	e7cd      	b.n	800a7bc <_strtol_l.constprop.0+0x38>
 800a820:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a824:	f1bc 0f19 	cmp.w	ip, #25
 800a828:	d801      	bhi.n	800a82e <_strtol_l.constprop.0+0xaa>
 800a82a:	3c37      	subs	r4, #55	; 0x37
 800a82c:	e7e4      	b.n	800a7f8 <_strtol_l.constprop.0+0x74>
 800a82e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a832:	f1bc 0f19 	cmp.w	ip, #25
 800a836:	d804      	bhi.n	800a842 <_strtol_l.constprop.0+0xbe>
 800a838:	3c57      	subs	r4, #87	; 0x57
 800a83a:	e7dd      	b.n	800a7f8 <_strtol_l.constprop.0+0x74>
 800a83c:	f04f 37ff 	mov.w	r7, #4294967295
 800a840:	e7e6      	b.n	800a810 <_strtol_l.constprop.0+0x8c>
 800a842:	2f00      	cmp	r7, #0
 800a844:	da07      	bge.n	800a856 <_strtol_l.constprop.0+0xd2>
 800a846:	2322      	movs	r3, #34	; 0x22
 800a848:	4670      	mov	r0, lr
 800a84a:	f8c8 3000 	str.w	r3, [r8]
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d0a4      	beq.n	800a79c <_strtol_l.constprop.0+0x18>
 800a852:	1e69      	subs	r1, r5, #1
 800a854:	e005      	b.n	800a862 <_strtol_l.constprop.0+0xde>
 800a856:	b106      	cbz	r6, 800a85a <_strtol_l.constprop.0+0xd6>
 800a858:	4240      	negs	r0, r0
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	d09e      	beq.n	800a79c <_strtol_l.constprop.0+0x18>
 800a85e:	2f00      	cmp	r7, #0
 800a860:	d1f7      	bne.n	800a852 <_strtol_l.constprop.0+0xce>
 800a862:	6011      	str	r1, [r2, #0]
 800a864:	e79a      	b.n	800a79c <_strtol_l.constprop.0+0x18>
 800a866:	2430      	movs	r4, #48	; 0x30
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1b5      	bne.n	800a7d8 <_strtol_l.constprop.0+0x54>
 800a86c:	2308      	movs	r3, #8
 800a86e:	e7b3      	b.n	800a7d8 <_strtol_l.constprop.0+0x54>
 800a870:	2c30      	cmp	r4, #48	; 0x30
 800a872:	d0a9      	beq.n	800a7c8 <_strtol_l.constprop.0+0x44>
 800a874:	230a      	movs	r3, #10
 800a876:	e7af      	b.n	800a7d8 <_strtol_l.constprop.0+0x54>
 800a878:	0801f129 	.word	0x0801f129

0800a87c <_strtol_r>:
 800a87c:	f7ff bf82 	b.w	800a784 <_strtol_l.constprop.0>

0800a880 <strtol>:
 800a880:	4613      	mov	r3, r2
 800a882:	460a      	mov	r2, r1
 800a884:	4601      	mov	r1, r0
 800a886:	4802      	ldr	r0, [pc, #8]	; (800a890 <strtol+0x10>)
 800a888:	6800      	ldr	r0, [r0, #0]
 800a88a:	f7ff bf7b 	b.w	800a784 <_strtol_l.constprop.0>
 800a88e:	bf00      	nop
 800a890:	2000000c 	.word	0x2000000c

0800a894 <quorem>:
 800a894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	6903      	ldr	r3, [r0, #16]
 800a89a:	690c      	ldr	r4, [r1, #16]
 800a89c:	4607      	mov	r7, r0
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	f2c0 8082 	blt.w	800a9a8 <quorem+0x114>
 800a8a4:	3c01      	subs	r4, #1
 800a8a6:	f100 0514 	add.w	r5, r0, #20
 800a8aa:	f101 0814 	add.w	r8, r1, #20
 800a8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8cc:	d331      	bcc.n	800a932 <quorem+0x9e>
 800a8ce:	f04f 0e00 	mov.w	lr, #0
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	46ac      	mov	ip, r5
 800a8d6:	46f2      	mov	sl, lr
 800a8d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8dc:	b293      	uxth	r3, r2
 800a8de:	fb06 e303 	mla	r3, r6, r3, lr
 800a8e2:	0c12      	lsrs	r2, r2, #16
 800a8e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	fb06 e202 	mla	r2, r6, r2, lr
 800a8ee:	ebaa 0303 	sub.w	r3, sl, r3
 800a8f2:	f8dc a000 	ldr.w	sl, [ip]
 800a8f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8fa:	fa1f fa8a 	uxth.w	sl, sl
 800a8fe:	4453      	add	r3, sl
 800a900:	f8dc a000 	ldr.w	sl, [ip]
 800a904:	b292      	uxth	r2, r2
 800a906:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a90a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a914:	4581      	cmp	r9, r0
 800a916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a91a:	f84c 3b04 	str.w	r3, [ip], #4
 800a91e:	d2db      	bcs.n	800a8d8 <quorem+0x44>
 800a920:	f855 300b 	ldr.w	r3, [r5, fp]
 800a924:	b92b      	cbnz	r3, 800a932 <quorem+0x9e>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	3b04      	subs	r3, #4
 800a92a:	429d      	cmp	r5, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	d32f      	bcc.n	800a990 <quorem+0xfc>
 800a930:	613c      	str	r4, [r7, #16]
 800a932:	4638      	mov	r0, r7
 800a934:	f001 fc92 	bl	800c25c <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	db25      	blt.n	800a988 <quorem+0xf4>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f04f 0c00 	mov.w	ip, #0
 800a942:	3601      	adds	r6, #1
 800a944:	f858 1b04 	ldr.w	r1, [r8], #4
 800a948:	f8d0 e000 	ldr.w	lr, [r0]
 800a94c:	b28b      	uxth	r3, r1
 800a94e:	ebac 0303 	sub.w	r3, ip, r3
 800a952:	fa1f f28e 	uxth.w	r2, lr
 800a956:	4413      	add	r3, r2
 800a958:	0c0a      	lsrs	r2, r1, #16
 800a95a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a95e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a962:	b29b      	uxth	r3, r3
 800a964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a968:	45c1      	cmp	r9, r8
 800a96a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a96e:	f840 3b04 	str.w	r3, [r0], #4
 800a972:	d2e7      	bcs.n	800a944 <quorem+0xb0>
 800a974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a97c:	b922      	cbnz	r2, 800a988 <quorem+0xf4>
 800a97e:	3b04      	subs	r3, #4
 800a980:	429d      	cmp	r5, r3
 800a982:	461a      	mov	r2, r3
 800a984:	d30a      	bcc.n	800a99c <quorem+0x108>
 800a986:	613c      	str	r4, [r7, #16]
 800a988:	4630      	mov	r0, r6
 800a98a:	b003      	add	sp, #12
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	3b04      	subs	r3, #4
 800a994:	2a00      	cmp	r2, #0
 800a996:	d1cb      	bne.n	800a930 <quorem+0x9c>
 800a998:	3c01      	subs	r4, #1
 800a99a:	e7c6      	b.n	800a92a <quorem+0x96>
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	3b04      	subs	r3, #4
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d1f0      	bne.n	800a986 <quorem+0xf2>
 800a9a4:	3c01      	subs	r4, #1
 800a9a6:	e7eb      	b.n	800a980 <quorem+0xec>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e7ee      	b.n	800a98a <quorem+0xf6>
 800a9ac:	0000      	movs	r0, r0
	...

0800a9b0 <_dtoa_r>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9ba:	b099      	sub	sp, #100	; 0x64
 800a9bc:	4605      	mov	r5, r0
 800a9be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a9c6:	b974      	cbnz	r4, 800a9e6 <_dtoa_r+0x36>
 800a9c8:	2010      	movs	r0, #16
 800a9ca:	f001 f949 	bl	800bc60 <malloc>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	6268      	str	r0, [r5, #36]	; 0x24
 800a9d2:	b920      	cbnz	r0, 800a9de <_dtoa_r+0x2e>
 800a9d4:	21ea      	movs	r1, #234	; 0xea
 800a9d6:	4ba8      	ldr	r3, [pc, #672]	; (800ac78 <_dtoa_r+0x2c8>)
 800a9d8:	48a8      	ldr	r0, [pc, #672]	; (800ac7c <_dtoa_r+0x2cc>)
 800a9da:	f002 f8b3 	bl	800cb44 <__assert_func>
 800a9de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e2:	6004      	str	r4, [r0, #0]
 800a9e4:	60c4      	str	r4, [r0, #12]
 800a9e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9e8:	6819      	ldr	r1, [r3, #0]
 800a9ea:	b151      	cbz	r1, 800aa02 <_dtoa_r+0x52>
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4093      	lsls	r3, r2
 800a9f2:	604a      	str	r2, [r1, #4]
 800a9f4:	608b      	str	r3, [r1, #8]
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f001 f9a8 	bl	800bd4c <_Bfree>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	1e3b      	subs	r3, r7, #0
 800aa04:	bfaf      	iteee	ge
 800aa06:	2300      	movge	r3, #0
 800aa08:	2201      	movlt	r2, #1
 800aa0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa0e:	9305      	strlt	r3, [sp, #20]
 800aa10:	bfa8      	it	ge
 800aa12:	f8c8 3000 	strge.w	r3, [r8]
 800aa16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa1a:	4b99      	ldr	r3, [pc, #612]	; (800ac80 <_dtoa_r+0x2d0>)
 800aa1c:	bfb8      	it	lt
 800aa1e:	f8c8 2000 	strlt.w	r2, [r8]
 800aa22:	ea33 0309 	bics.w	r3, r3, r9
 800aa26:	d119      	bne.n	800aa5c <_dtoa_r+0xac>
 800aa28:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa34:	4333      	orrs	r3, r6
 800aa36:	f000 857f 	beq.w	800b538 <_dtoa_r+0xb88>
 800aa3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa3c:	b953      	cbnz	r3, 800aa54 <_dtoa_r+0xa4>
 800aa3e:	4b91      	ldr	r3, [pc, #580]	; (800ac84 <_dtoa_r+0x2d4>)
 800aa40:	e022      	b.n	800aa88 <_dtoa_r+0xd8>
 800aa42:	4b91      	ldr	r3, [pc, #580]	; (800ac88 <_dtoa_r+0x2d8>)
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	3308      	adds	r3, #8
 800aa48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa4a:	6013      	str	r3, [r2, #0]
 800aa4c:	9803      	ldr	r0, [sp, #12]
 800aa4e:	b019      	add	sp, #100	; 0x64
 800aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa54:	4b8b      	ldr	r3, [pc, #556]	; (800ac84 <_dtoa_r+0x2d4>)
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	3303      	adds	r3, #3
 800aa5a:	e7f5      	b.n	800aa48 <_dtoa_r+0x98>
 800aa5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f7fc f8be 	bl	8006bec <__aeabi_dcmpeq>
 800aa70:	4680      	mov	r8, r0
 800aa72:	b158      	cbz	r0, 800aa8c <_dtoa_r+0xdc>
 800aa74:	2301      	movs	r3, #1
 800aa76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8558 	beq.w	800b532 <_dtoa_r+0xb82>
 800aa82:	4882      	ldr	r0, [pc, #520]	; (800ac8c <_dtoa_r+0x2dc>)
 800aa84:	6018      	str	r0, [r3, #0]
 800aa86:	1e43      	subs	r3, r0, #1
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	e7df      	b.n	800aa4c <_dtoa_r+0x9c>
 800aa8c:	ab16      	add	r3, sp, #88	; 0x58
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	ab17      	add	r3, sp, #92	; 0x5c
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	4628      	mov	r0, r5
 800aa96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa9a:	f001 fd01 	bl	800c4a0 <__d2b>
 800aa9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aaa2:	4683      	mov	fp, r0
 800aaa4:	2c00      	cmp	r4, #0
 800aaa6:	d07f      	beq.n	800aba8 <_dtoa_r+0x1f8>
 800aaa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aaba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aabe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aac2:	2200      	movs	r2, #0
 800aac4:	4b72      	ldr	r3, [pc, #456]	; (800ac90 <_dtoa_r+0x2e0>)
 800aac6:	f7fb fc71 	bl	80063ac <__aeabi_dsub>
 800aaca:	a365      	add	r3, pc, #404	; (adr r3, 800ac60 <_dtoa_r+0x2b0>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7fb fe24 	bl	800671c <__aeabi_dmul>
 800aad4:	a364      	add	r3, pc, #400	; (adr r3, 800ac68 <_dtoa_r+0x2b8>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7fb fc69 	bl	80063b0 <__adddf3>
 800aade:	4606      	mov	r6, r0
 800aae0:	4620      	mov	r0, r4
 800aae2:	460f      	mov	r7, r1
 800aae4:	f7fb fdb0 	bl	8006648 <__aeabi_i2d>
 800aae8:	a361      	add	r3, pc, #388	; (adr r3, 800ac70 <_dtoa_r+0x2c0>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7fb fe15 	bl	800671c <__aeabi_dmul>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	4639      	mov	r1, r7
 800aafa:	f7fb fc59 	bl	80063b0 <__adddf3>
 800aafe:	4606      	mov	r6, r0
 800ab00:	460f      	mov	r7, r1
 800ab02:	f7fc f8bb 	bl	8006c7c <__aeabi_d2iz>
 800ab06:	2200      	movs	r2, #0
 800ab08:	4682      	mov	sl, r0
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4639      	mov	r1, r7
 800ab10:	f7fc f876 	bl	8006c00 <__aeabi_dcmplt>
 800ab14:	b148      	cbz	r0, 800ab2a <_dtoa_r+0x17a>
 800ab16:	4650      	mov	r0, sl
 800ab18:	f7fb fd96 	bl	8006648 <__aeabi_i2d>
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	f7fc f864 	bl	8006bec <__aeabi_dcmpeq>
 800ab24:	b908      	cbnz	r0, 800ab2a <_dtoa_r+0x17a>
 800ab26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2a:	f1ba 0f16 	cmp.w	sl, #22
 800ab2e:	d858      	bhi.n	800abe2 <_dtoa_r+0x232>
 800ab30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab34:	4b57      	ldr	r3, [pc, #348]	; (800ac94 <_dtoa_r+0x2e4>)
 800ab36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7fc f85f 	bl	8006c00 <__aeabi_dcmplt>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d04f      	beq.n	800abe6 <_dtoa_r+0x236>
 800ab46:	2300      	movs	r3, #0
 800ab48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab50:	1b1c      	subs	r4, r3, r4
 800ab52:	1e63      	subs	r3, r4, #1
 800ab54:	9309      	str	r3, [sp, #36]	; 0x24
 800ab56:	bf49      	itett	mi
 800ab58:	f1c4 0301 	rsbmi	r3, r4, #1
 800ab5c:	2300      	movpl	r3, #0
 800ab5e:	9306      	strmi	r3, [sp, #24]
 800ab60:	2300      	movmi	r3, #0
 800ab62:	bf54      	ite	pl
 800ab64:	9306      	strpl	r3, [sp, #24]
 800ab66:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ab68:	f1ba 0f00 	cmp.w	sl, #0
 800ab6c:	db3d      	blt.n	800abea <_dtoa_r+0x23a>
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ab74:	4453      	add	r3, sl
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	2300      	movs	r3, #0
 800ab7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab7e:	2b09      	cmp	r3, #9
 800ab80:	f200 808c 	bhi.w	800ac9c <_dtoa_r+0x2ec>
 800ab84:	2b05      	cmp	r3, #5
 800ab86:	bfc4      	itt	gt
 800ab88:	3b04      	subgt	r3, #4
 800ab8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ab8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab8e:	bfc8      	it	gt
 800ab90:	2400      	movgt	r4, #0
 800ab92:	f1a3 0302 	sub.w	r3, r3, #2
 800ab96:	bfd8      	it	le
 800ab98:	2401      	movle	r4, #1
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	f200 808a 	bhi.w	800acb4 <_dtoa_r+0x304>
 800aba0:	e8df f003 	tbb	[pc, r3]
 800aba4:	5b4d4f2d 	.word	0x5b4d4f2d
 800aba8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800abac:	441c      	add	r4, r3
 800abae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	bfc3      	ittte	gt
 800abb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800abbe:	fa09 f303 	lslgt.w	r3, r9, r3
 800abc2:	f1c3 0320 	rsble	r3, r3, #32
 800abc6:	bfc6      	itte	gt
 800abc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abcc:	4318      	orrgt	r0, r3
 800abce:	fa06 f003 	lslle.w	r0, r6, r3
 800abd2:	f7fb fd29 	bl	8006628 <__aeabi_ui2d>
 800abd6:	2301      	movs	r3, #1
 800abd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800abdc:	3c01      	subs	r4, #1
 800abde:	9313      	str	r3, [sp, #76]	; 0x4c
 800abe0:	e76f      	b.n	800aac2 <_dtoa_r+0x112>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e7b2      	b.n	800ab4c <_dtoa_r+0x19c>
 800abe6:	900f      	str	r0, [sp, #60]	; 0x3c
 800abe8:	e7b1      	b.n	800ab4e <_dtoa_r+0x19e>
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	eba3 030a 	sub.w	r3, r3, sl
 800abf0:	9306      	str	r3, [sp, #24]
 800abf2:	f1ca 0300 	rsb	r3, sl, #0
 800abf6:	930a      	str	r3, [sp, #40]	; 0x28
 800abf8:	2300      	movs	r3, #0
 800abfa:	930e      	str	r3, [sp, #56]	; 0x38
 800abfc:	e7be      	b.n	800ab7c <_dtoa_r+0x1cc>
 800abfe:	2300      	movs	r3, #0
 800ac00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc58      	bgt.n	800acba <_dtoa_r+0x30a>
 800ac08:	f04f 0901 	mov.w	r9, #1
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ac12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ac16:	2200      	movs	r2, #0
 800ac18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac1a:	6042      	str	r2, [r0, #4]
 800ac1c:	2204      	movs	r2, #4
 800ac1e:	f102 0614 	add.w	r6, r2, #20
 800ac22:	429e      	cmp	r6, r3
 800ac24:	6841      	ldr	r1, [r0, #4]
 800ac26:	d94e      	bls.n	800acc6 <_dtoa_r+0x316>
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f001 f84f 	bl	800bccc <_Balloc>
 800ac2e:	9003      	str	r0, [sp, #12]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d14c      	bne.n	800acce <_dtoa_r+0x31e>
 800ac34:	4602      	mov	r2, r0
 800ac36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac3a:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <_dtoa_r+0x2e8>)
 800ac3c:	e6cc      	b.n	800a9d8 <_dtoa_r+0x28>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7de      	b.n	800ac00 <_dtoa_r+0x250>
 800ac42:	2300      	movs	r3, #0
 800ac44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac48:	eb0a 0903 	add.w	r9, sl, r3
 800ac4c:	f109 0301 	add.w	r3, r9, #1
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	bfb8      	it	lt
 800ac56:	2301      	movlt	r3, #1
 800ac58:	e7dd      	b.n	800ac16 <_dtoa_r+0x266>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e7f2      	b.n	800ac44 <_dtoa_r+0x294>
 800ac5e:	bf00      	nop
 800ac60:	636f4361 	.word	0x636f4361
 800ac64:	3fd287a7 	.word	0x3fd287a7
 800ac68:	8b60c8b3 	.word	0x8b60c8b3
 800ac6c:	3fc68a28 	.word	0x3fc68a28
 800ac70:	509f79fb 	.word	0x509f79fb
 800ac74:	3fd34413 	.word	0x3fd34413
 800ac78:	0801f236 	.word	0x0801f236
 800ac7c:	0801f24d 	.word	0x0801f24d
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	0801f232 	.word	0x0801f232
 800ac88:	0801f229 	.word	0x0801f229
 800ac8c:	0801f0ad 	.word	0x0801f0ad
 800ac90:	3ff80000 	.word	0x3ff80000
 800ac94:	0801f420 	.word	0x0801f420
 800ac98:	0801f2cb 	.word	0x0801f2cb
 800ac9c:	2401      	movs	r4, #1
 800ac9e:	2300      	movs	r3, #0
 800aca0:	940b      	str	r4, [sp, #44]	; 0x2c
 800aca2:	9322      	str	r3, [sp, #136]	; 0x88
 800aca4:	f04f 39ff 	mov.w	r9, #4294967295
 800aca8:	2200      	movs	r2, #0
 800acaa:	2312      	movs	r3, #18
 800acac:	f8cd 9020 	str.w	r9, [sp, #32]
 800acb0:	9223      	str	r2, [sp, #140]	; 0x8c
 800acb2:	e7b0      	b.n	800ac16 <_dtoa_r+0x266>
 800acb4:	2301      	movs	r3, #1
 800acb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb8:	e7f4      	b.n	800aca4 <_dtoa_r+0x2f4>
 800acba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800acbe:	464b      	mov	r3, r9
 800acc0:	f8cd 9020 	str.w	r9, [sp, #32]
 800acc4:	e7a7      	b.n	800ac16 <_dtoa_r+0x266>
 800acc6:	3101      	adds	r1, #1
 800acc8:	6041      	str	r1, [r0, #4]
 800acca:	0052      	lsls	r2, r2, #1
 800accc:	e7a7      	b.n	800ac1e <_dtoa_r+0x26e>
 800acce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acd0:	9a03      	ldr	r2, [sp, #12]
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	2b0e      	cmp	r3, #14
 800acd8:	f200 80a8 	bhi.w	800ae2c <_dtoa_r+0x47c>
 800acdc:	2c00      	cmp	r4, #0
 800acde:	f000 80a5 	beq.w	800ae2c <_dtoa_r+0x47c>
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	dd34      	ble.n	800ad52 <_dtoa_r+0x3a2>
 800ace8:	4a9a      	ldr	r2, [pc, #616]	; (800af54 <_dtoa_r+0x5a4>)
 800acea:	f00a 030f 	and.w	r3, sl, #15
 800acee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acf2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800acf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800acfe:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ad02:	d016      	beq.n	800ad32 <_dtoa_r+0x382>
 800ad04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad08:	4b93      	ldr	r3, [pc, #588]	; (800af58 <_dtoa_r+0x5a8>)
 800ad0a:	2703      	movs	r7, #3
 800ad0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad10:	f7fb fe2e 	bl	8006970 <__aeabi_ddiv>
 800ad14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad18:	f004 040f 	and.w	r4, r4, #15
 800ad1c:	4e8e      	ldr	r6, [pc, #568]	; (800af58 <_dtoa_r+0x5a8>)
 800ad1e:	b954      	cbnz	r4, 800ad36 <_dtoa_r+0x386>
 800ad20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad28:	f7fb fe22 	bl	8006970 <__aeabi_ddiv>
 800ad2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad30:	e029      	b.n	800ad86 <_dtoa_r+0x3d6>
 800ad32:	2702      	movs	r7, #2
 800ad34:	e7f2      	b.n	800ad1c <_dtoa_r+0x36c>
 800ad36:	07e1      	lsls	r1, r4, #31
 800ad38:	d508      	bpl.n	800ad4c <_dtoa_r+0x39c>
 800ad3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad42:	f7fb fceb 	bl	800671c <__aeabi_dmul>
 800ad46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad4a:	3701      	adds	r7, #1
 800ad4c:	1064      	asrs	r4, r4, #1
 800ad4e:	3608      	adds	r6, #8
 800ad50:	e7e5      	b.n	800ad1e <_dtoa_r+0x36e>
 800ad52:	f000 80a5 	beq.w	800aea0 <_dtoa_r+0x4f0>
 800ad56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad5a:	f1ca 0400 	rsb	r4, sl, #0
 800ad5e:	4b7d      	ldr	r3, [pc, #500]	; (800af54 <_dtoa_r+0x5a4>)
 800ad60:	f004 020f 	and.w	r2, r4, #15
 800ad64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7fb fcd6 	bl	800671c <__aeabi_dmul>
 800ad70:	2702      	movs	r7, #2
 800ad72:	2300      	movs	r3, #0
 800ad74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad78:	4e77      	ldr	r6, [pc, #476]	; (800af58 <_dtoa_r+0x5a8>)
 800ad7a:	1124      	asrs	r4, r4, #4
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	f040 8084 	bne.w	800ae8a <_dtoa_r+0x4da>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1d2      	bne.n	800ad2c <_dtoa_r+0x37c>
 800ad86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 808b 	beq.w	800aea4 <_dtoa_r+0x4f4>
 800ad8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <_dtoa_r+0x5ac>)
 800ad9e:	f7fb ff2f 	bl	8006c00 <__aeabi_dcmplt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d07e      	beq.n	800aea4 <_dtoa_r+0x4f4>
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d07b      	beq.n	800aea4 <_dtoa_r+0x4f4>
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	dd38      	ble.n	800ae24 <_dtoa_r+0x474>
 800adb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adb6:	2200      	movs	r2, #0
 800adb8:	4b69      	ldr	r3, [pc, #420]	; (800af60 <_dtoa_r+0x5b0>)
 800adba:	f7fb fcaf 	bl	800671c <__aeabi_dmul>
 800adbe:	464c      	mov	r4, r9
 800adc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800adc8:	3701      	adds	r7, #1
 800adca:	4638      	mov	r0, r7
 800adcc:	f7fb fc3c 	bl	8006648 <__aeabi_i2d>
 800add0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add4:	f7fb fca2 	bl	800671c <__aeabi_dmul>
 800add8:	2200      	movs	r2, #0
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <_dtoa_r+0x5b4>)
 800addc:	f7fb fae8 	bl	80063b0 <__adddf3>
 800ade0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ade4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ade8:	9611      	str	r6, [sp, #68]	; 0x44
 800adea:	2c00      	cmp	r4, #0
 800adec:	d15d      	bne.n	800aeaa <_dtoa_r+0x4fa>
 800adee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adf2:	2200      	movs	r2, #0
 800adf4:	4b5c      	ldr	r3, [pc, #368]	; (800af68 <_dtoa_r+0x5b8>)
 800adf6:	f7fb fad9 	bl	80063ac <__aeabi_dsub>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae02:	4633      	mov	r3, r6
 800ae04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae06:	f7fb ff19 	bl	8006c3c <__aeabi_dcmpgt>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	f040 829c 	bne.w	800b348 <_dtoa_r+0x998>
 800ae10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae1a:	f7fb fef1 	bl	8006c00 <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f040 8290 	bne.w	800b344 <_dtoa_r+0x994>
 800ae24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f2c0 8152 	blt.w	800b0d8 <_dtoa_r+0x728>
 800ae34:	f1ba 0f0e 	cmp.w	sl, #14
 800ae38:	f300 814e 	bgt.w	800b0d8 <_dtoa_r+0x728>
 800ae3c:	4b45      	ldr	r3, [pc, #276]	; (800af54 <_dtoa_r+0x5a4>)
 800ae3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae42:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f280 80db 	bge.w	800b008 <_dtoa_r+0x658>
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f300 80d7 	bgt.w	800b008 <_dtoa_r+0x658>
 800ae5a:	f040 8272 	bne.w	800b342 <_dtoa_r+0x992>
 800ae5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae62:	2200      	movs	r2, #0
 800ae64:	4b40      	ldr	r3, [pc, #256]	; (800af68 <_dtoa_r+0x5b8>)
 800ae66:	f7fb fc59 	bl	800671c <__aeabi_dmul>
 800ae6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6e:	f7fb fedb 	bl	8006c28 <__aeabi_dcmpge>
 800ae72:	9c08      	ldr	r4, [sp, #32]
 800ae74:	4626      	mov	r6, r4
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f040 8248 	bne.w	800b30c <_dtoa_r+0x95c>
 800ae7c:	2331      	movs	r3, #49	; 0x31
 800ae7e:	9f03      	ldr	r7, [sp, #12]
 800ae80:	f10a 0a01 	add.w	sl, sl, #1
 800ae84:	f807 3b01 	strb.w	r3, [r7], #1
 800ae88:	e244      	b.n	800b314 <_dtoa_r+0x964>
 800ae8a:	07e2      	lsls	r2, r4, #31
 800ae8c:	d505      	bpl.n	800ae9a <_dtoa_r+0x4ea>
 800ae8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae92:	f7fb fc43 	bl	800671c <__aeabi_dmul>
 800ae96:	2301      	movs	r3, #1
 800ae98:	3701      	adds	r7, #1
 800ae9a:	1064      	asrs	r4, r4, #1
 800ae9c:	3608      	adds	r6, #8
 800ae9e:	e76d      	b.n	800ad7c <_dtoa_r+0x3cc>
 800aea0:	2702      	movs	r7, #2
 800aea2:	e770      	b.n	800ad86 <_dtoa_r+0x3d6>
 800aea4:	46d0      	mov	r8, sl
 800aea6:	9c08      	ldr	r4, [sp, #32]
 800aea8:	e78f      	b.n	800adca <_dtoa_r+0x41a>
 800aeaa:	9903      	ldr	r1, [sp, #12]
 800aeac:	4b29      	ldr	r3, [pc, #164]	; (800af54 <_dtoa_r+0x5a4>)
 800aeae:	4421      	add	r1, r4
 800aeb0:	9112      	str	r1, [sp, #72]	; 0x48
 800aeb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aeb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aebc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d055      	beq.n	800af70 <_dtoa_r+0x5c0>
 800aec4:	2000      	movs	r0, #0
 800aec6:	4929      	ldr	r1, [pc, #164]	; (800af6c <_dtoa_r+0x5bc>)
 800aec8:	f7fb fd52 	bl	8006970 <__aeabi_ddiv>
 800aecc:	463b      	mov	r3, r7
 800aece:	4632      	mov	r2, r6
 800aed0:	f7fb fa6c 	bl	80063ac <__aeabi_dsub>
 800aed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aed8:	9f03      	ldr	r7, [sp, #12]
 800aeda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aede:	f7fb fecd 	bl	8006c7c <__aeabi_d2iz>
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7fb fbb0 	bl	8006648 <__aeabi_i2d>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef0:	f7fb fa5c 	bl	80063ac <__aeabi_dsub>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	3430      	adds	r4, #48	; 0x30
 800aefa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aefe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af02:	f807 4b01 	strb.w	r4, [r7], #1
 800af06:	f7fb fe7b 	bl	8006c00 <__aeabi_dcmplt>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d174      	bne.n	800aff8 <_dtoa_r+0x648>
 800af0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af12:	2000      	movs	r0, #0
 800af14:	4911      	ldr	r1, [pc, #68]	; (800af5c <_dtoa_r+0x5ac>)
 800af16:	f7fb fa49 	bl	80063ac <__aeabi_dsub>
 800af1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af1e:	f7fb fe6f 	bl	8006c00 <__aeabi_dcmplt>
 800af22:	2800      	cmp	r0, #0
 800af24:	f040 80b7 	bne.w	800b096 <_dtoa_r+0x6e6>
 800af28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af2a:	429f      	cmp	r7, r3
 800af2c:	f43f af7a 	beq.w	800ae24 <_dtoa_r+0x474>
 800af30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af34:	2200      	movs	r2, #0
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <_dtoa_r+0x5b0>)
 800af38:	f7fb fbf0 	bl	800671c <__aeabi_dmul>
 800af3c:	2200      	movs	r2, #0
 800af3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af46:	4b06      	ldr	r3, [pc, #24]	; (800af60 <_dtoa_r+0x5b0>)
 800af48:	f7fb fbe8 	bl	800671c <__aeabi_dmul>
 800af4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af50:	e7c3      	b.n	800aeda <_dtoa_r+0x52a>
 800af52:	bf00      	nop
 800af54:	0801f420 	.word	0x0801f420
 800af58:	0801f3f8 	.word	0x0801f3f8
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	40240000 	.word	0x40240000
 800af64:	401c0000 	.word	0x401c0000
 800af68:	40140000 	.word	0x40140000
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7fb fbd2 	bl	800671c <__aeabi_dmul>
 800af78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af7e:	9c03      	ldr	r4, [sp, #12]
 800af80:	9314      	str	r3, [sp, #80]	; 0x50
 800af82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af86:	f7fb fe79 	bl	8006c7c <__aeabi_d2iz>
 800af8a:	9015      	str	r0, [sp, #84]	; 0x54
 800af8c:	f7fb fb5c 	bl	8006648 <__aeabi_i2d>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af98:	f7fb fa08 	bl	80063ac <__aeabi_dsub>
 800af9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9e:	4606      	mov	r6, r0
 800afa0:	3330      	adds	r3, #48	; 0x30
 800afa2:	f804 3b01 	strb.w	r3, [r4], #1
 800afa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afa8:	460f      	mov	r7, r1
 800afaa:	429c      	cmp	r4, r3
 800afac:	f04f 0200 	mov.w	r2, #0
 800afb0:	d124      	bne.n	800affc <_dtoa_r+0x64c>
 800afb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afb6:	4bb0      	ldr	r3, [pc, #704]	; (800b278 <_dtoa_r+0x8c8>)
 800afb8:	f7fb f9fa 	bl	80063b0 <__adddf3>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7fb fe3a 	bl	8006c3c <__aeabi_dcmpgt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d163      	bne.n	800b094 <_dtoa_r+0x6e4>
 800afcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afd0:	2000      	movs	r0, #0
 800afd2:	49a9      	ldr	r1, [pc, #676]	; (800b278 <_dtoa_r+0x8c8>)
 800afd4:	f7fb f9ea 	bl	80063ac <__aeabi_dsub>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4630      	mov	r0, r6
 800afde:	4639      	mov	r1, r7
 800afe0:	f7fb fe0e 	bl	8006c00 <__aeabi_dcmplt>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f af1d 	beq.w	800ae24 <_dtoa_r+0x474>
 800afea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800afec:	1e7b      	subs	r3, r7, #1
 800afee:	9314      	str	r3, [sp, #80]	; 0x50
 800aff0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aff4:	2b30      	cmp	r3, #48	; 0x30
 800aff6:	d0f8      	beq.n	800afea <_dtoa_r+0x63a>
 800aff8:	46c2      	mov	sl, r8
 800affa:	e03b      	b.n	800b074 <_dtoa_r+0x6c4>
 800affc:	4b9f      	ldr	r3, [pc, #636]	; (800b27c <_dtoa_r+0x8cc>)
 800affe:	f7fb fb8d 	bl	800671c <__aeabi_dmul>
 800b002:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b006:	e7bc      	b.n	800af82 <_dtoa_r+0x5d2>
 800b008:	9f03      	ldr	r7, [sp, #12]
 800b00a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b00e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b012:	4640      	mov	r0, r8
 800b014:	4649      	mov	r1, r9
 800b016:	f7fb fcab 	bl	8006970 <__aeabi_ddiv>
 800b01a:	f7fb fe2f 	bl	8006c7c <__aeabi_d2iz>
 800b01e:	4604      	mov	r4, r0
 800b020:	f7fb fb12 	bl	8006648 <__aeabi_i2d>
 800b024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b028:	f7fb fb78 	bl	800671c <__aeabi_dmul>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7fb f9ba 	bl	80063ac <__aeabi_dsub>
 800b038:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b03c:	f807 6b01 	strb.w	r6, [r7], #1
 800b040:	9e03      	ldr	r6, [sp, #12]
 800b042:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b046:	1bbe      	subs	r6, r7, r6
 800b048:	45b4      	cmp	ip, r6
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	d136      	bne.n	800b0be <_dtoa_r+0x70e>
 800b050:	f7fb f9ae 	bl	80063b0 <__adddf3>
 800b054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b058:	4680      	mov	r8, r0
 800b05a:	4689      	mov	r9, r1
 800b05c:	f7fb fdee 	bl	8006c3c <__aeabi_dcmpgt>
 800b060:	bb58      	cbnz	r0, 800b0ba <_dtoa_r+0x70a>
 800b062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b066:	4640      	mov	r0, r8
 800b068:	4649      	mov	r1, r9
 800b06a:	f7fb fdbf 	bl	8006bec <__aeabi_dcmpeq>
 800b06e:	b108      	cbz	r0, 800b074 <_dtoa_r+0x6c4>
 800b070:	07e1      	lsls	r1, r4, #31
 800b072:	d422      	bmi.n	800b0ba <_dtoa_r+0x70a>
 800b074:	4628      	mov	r0, r5
 800b076:	4659      	mov	r1, fp
 800b078:	f000 fe68 	bl	800bd4c <_Bfree>
 800b07c:	2300      	movs	r3, #0
 800b07e:	703b      	strb	r3, [r7, #0]
 800b080:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b082:	f10a 0001 	add.w	r0, sl, #1
 800b086:	6018      	str	r0, [r3, #0]
 800b088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f43f acde 	beq.w	800aa4c <_dtoa_r+0x9c>
 800b090:	601f      	str	r7, [r3, #0]
 800b092:	e4db      	b.n	800aa4c <_dtoa_r+0x9c>
 800b094:	4627      	mov	r7, r4
 800b096:	463b      	mov	r3, r7
 800b098:	461f      	mov	r7, r3
 800b09a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b09e:	2a39      	cmp	r2, #57	; 0x39
 800b0a0:	d107      	bne.n	800b0b2 <_dtoa_r+0x702>
 800b0a2:	9a03      	ldr	r2, [sp, #12]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d1f7      	bne.n	800b098 <_dtoa_r+0x6e8>
 800b0a8:	2230      	movs	r2, #48	; 0x30
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	f108 0801 	add.w	r8, r8, #1
 800b0b0:	700a      	strb	r2, [r1, #0]
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	3201      	adds	r2, #1
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	e79e      	b.n	800aff8 <_dtoa_r+0x648>
 800b0ba:	46d0      	mov	r8, sl
 800b0bc:	e7eb      	b.n	800b096 <_dtoa_r+0x6e6>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	4b6e      	ldr	r3, [pc, #440]	; (800b27c <_dtoa_r+0x8cc>)
 800b0c2:	f7fb fb2b 	bl	800671c <__aeabi_dmul>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4680      	mov	r8, r0
 800b0cc:	4689      	mov	r9, r1
 800b0ce:	f7fb fd8d 	bl	8006bec <__aeabi_dcmpeq>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d09b      	beq.n	800b00e <_dtoa_r+0x65e>
 800b0d6:	e7cd      	b.n	800b074 <_dtoa_r+0x6c4>
 800b0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	f000 80d0 	beq.w	800b280 <_dtoa_r+0x8d0>
 800b0e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0e2:	2a01      	cmp	r2, #1
 800b0e4:	f300 80ae 	bgt.w	800b244 <_dtoa_r+0x894>
 800b0e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0ea:	2a00      	cmp	r2, #0
 800b0ec:	f000 80a6 	beq.w	800b23c <_dtoa_r+0x88c>
 800b0f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b0f6:	9f06      	ldr	r7, [sp, #24]
 800b0f8:	9a06      	ldr	r2, [sp, #24]
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	441a      	add	r2, r3
 800b0fe:	9206      	str	r2, [sp, #24]
 800b100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b102:	4628      	mov	r0, r5
 800b104:	441a      	add	r2, r3
 800b106:	9209      	str	r2, [sp, #36]	; 0x24
 800b108:	f000 ff20 	bl	800bf4c <__i2b>
 800b10c:	4606      	mov	r6, r0
 800b10e:	2f00      	cmp	r7, #0
 800b110:	dd0c      	ble.n	800b12c <_dtoa_r+0x77c>
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	dd09      	ble.n	800b12c <_dtoa_r+0x77c>
 800b118:	42bb      	cmp	r3, r7
 800b11a:	bfa8      	it	ge
 800b11c:	463b      	movge	r3, r7
 800b11e:	9a06      	ldr	r2, [sp, #24]
 800b120:	1aff      	subs	r7, r7, r3
 800b122:	1ad2      	subs	r2, r2, r3
 800b124:	9206      	str	r2, [sp, #24]
 800b126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	9309      	str	r3, [sp, #36]	; 0x24
 800b12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12e:	b1f3      	cbz	r3, 800b16e <_dtoa_r+0x7be>
 800b130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 80a8 	beq.w	800b288 <_dtoa_r+0x8d8>
 800b138:	2c00      	cmp	r4, #0
 800b13a:	dd10      	ble.n	800b15e <_dtoa_r+0x7ae>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4622      	mov	r2, r4
 800b140:	4628      	mov	r0, r5
 800b142:	f000 ffc1 	bl	800c0c8 <__pow5mult>
 800b146:	465a      	mov	r2, fp
 800b148:	4601      	mov	r1, r0
 800b14a:	4606      	mov	r6, r0
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 ff13 	bl	800bf78 <__multiply>
 800b152:	4680      	mov	r8, r0
 800b154:	4659      	mov	r1, fp
 800b156:	4628      	mov	r0, r5
 800b158:	f000 fdf8 	bl	800bd4c <_Bfree>
 800b15c:	46c3      	mov	fp, r8
 800b15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b160:	1b1a      	subs	r2, r3, r4
 800b162:	d004      	beq.n	800b16e <_dtoa_r+0x7be>
 800b164:	4659      	mov	r1, fp
 800b166:	4628      	mov	r0, r5
 800b168:	f000 ffae 	bl	800c0c8 <__pow5mult>
 800b16c:	4683      	mov	fp, r0
 800b16e:	2101      	movs	r1, #1
 800b170:	4628      	mov	r0, r5
 800b172:	f000 feeb 	bl	800bf4c <__i2b>
 800b176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b178:	4604      	mov	r4, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f340 8086 	ble.w	800b28c <_dtoa_r+0x8dc>
 800b180:	461a      	mov	r2, r3
 800b182:	4601      	mov	r1, r0
 800b184:	4628      	mov	r0, r5
 800b186:	f000 ff9f 	bl	800c0c8 <__pow5mult>
 800b18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b18c:	4604      	mov	r4, r0
 800b18e:	2b01      	cmp	r3, #1
 800b190:	dd7f      	ble.n	800b292 <_dtoa_r+0x8e2>
 800b192:	f04f 0800 	mov.w	r8, #0
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b19c:	6918      	ldr	r0, [r3, #16]
 800b19e:	f000 fe87 	bl	800beb0 <__hi0bits>
 800b1a2:	f1c0 0020 	rsb	r0, r0, #32
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	4418      	add	r0, r3
 800b1aa:	f010 001f 	ands.w	r0, r0, #31
 800b1ae:	f000 8092 	beq.w	800b2d6 <_dtoa_r+0x926>
 800b1b2:	f1c0 0320 	rsb	r3, r0, #32
 800b1b6:	2b04      	cmp	r3, #4
 800b1b8:	f340 808a 	ble.w	800b2d0 <_dtoa_r+0x920>
 800b1bc:	f1c0 001c 	rsb	r0, r0, #28
 800b1c0:	9b06      	ldr	r3, [sp, #24]
 800b1c2:	4407      	add	r7, r0
 800b1c4:	4403      	add	r3, r0
 800b1c6:	9306      	str	r3, [sp, #24]
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	4403      	add	r3, r0
 800b1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ce:	9b06      	ldr	r3, [sp, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dd05      	ble.n	800b1e0 <_dtoa_r+0x830>
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f000 ffcf 	bl	800c17c <__lshift>
 800b1de:	4683      	mov	fp, r0
 800b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dd05      	ble.n	800b1f2 <_dtoa_r+0x842>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 ffc6 	bl	800c17c <__lshift>
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d070      	beq.n	800b2da <_dtoa_r+0x92a>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f001 f82e 	bl	800c25c <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	da6a      	bge.n	800b2da <_dtoa_r+0x92a>
 800b204:	2300      	movs	r3, #0
 800b206:	4659      	mov	r1, fp
 800b208:	220a      	movs	r2, #10
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 fdc0 	bl	800bd90 <__multadd>
 800b210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b212:	4683      	mov	fp, r0
 800b214:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 8194 	beq.w	800b546 <_dtoa_r+0xb96>
 800b21e:	4631      	mov	r1, r6
 800b220:	2300      	movs	r3, #0
 800b222:	220a      	movs	r2, #10
 800b224:	4628      	mov	r0, r5
 800b226:	f000 fdb3 	bl	800bd90 <__multadd>
 800b22a:	f1b9 0f00 	cmp.w	r9, #0
 800b22e:	4606      	mov	r6, r0
 800b230:	f300 8093 	bgt.w	800b35a <_dtoa_r+0x9aa>
 800b234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b236:	2b02      	cmp	r3, #2
 800b238:	dc57      	bgt.n	800b2ea <_dtoa_r+0x93a>
 800b23a:	e08e      	b.n	800b35a <_dtoa_r+0x9aa>
 800b23c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b242:	e757      	b.n	800b0f4 <_dtoa_r+0x744>
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	1e5c      	subs	r4, r3, #1
 800b248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	bfb7      	itett	lt
 800b24e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b250:	1b1c      	subge	r4, r3, r4
 800b252:	1ae2      	sublt	r2, r4, r3
 800b254:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b256:	bfbe      	ittt	lt
 800b258:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b25a:	189b      	addlt	r3, r3, r2
 800b25c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b25e:	9b08      	ldr	r3, [sp, #32]
 800b260:	bfb8      	it	lt
 800b262:	2400      	movlt	r4, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbb      	ittet	lt
 800b268:	9b06      	ldrlt	r3, [sp, #24]
 800b26a:	9a08      	ldrlt	r2, [sp, #32]
 800b26c:	9f06      	ldrge	r7, [sp, #24]
 800b26e:	1a9f      	sublt	r7, r3, r2
 800b270:	bfac      	ite	ge
 800b272:	9b08      	ldrge	r3, [sp, #32]
 800b274:	2300      	movlt	r3, #0
 800b276:	e73f      	b.n	800b0f8 <_dtoa_r+0x748>
 800b278:	3fe00000 	.word	0x3fe00000
 800b27c:	40240000 	.word	0x40240000
 800b280:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b282:	9f06      	ldr	r7, [sp, #24]
 800b284:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b286:	e742      	b.n	800b10e <_dtoa_r+0x75e>
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	e76b      	b.n	800b164 <_dtoa_r+0x7b4>
 800b28c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b28e:	2b01      	cmp	r3, #1
 800b290:	dc19      	bgt.n	800b2c6 <_dtoa_r+0x916>
 800b292:	9b04      	ldr	r3, [sp, #16]
 800b294:	b9bb      	cbnz	r3, 800b2c6 <_dtoa_r+0x916>
 800b296:	9b05      	ldr	r3, [sp, #20]
 800b298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b29c:	b99b      	cbnz	r3, 800b2c6 <_dtoa_r+0x916>
 800b29e:	9b05      	ldr	r3, [sp, #20]
 800b2a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2a4:	0d1b      	lsrs	r3, r3, #20
 800b2a6:	051b      	lsls	r3, r3, #20
 800b2a8:	b183      	cbz	r3, 800b2cc <_dtoa_r+0x91c>
 800b2aa:	f04f 0801 	mov.w	r8, #1
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	9306      	str	r3, [sp, #24]
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f47f af6a 	bne.w	800b196 <_dtoa_r+0x7e6>
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	e76f      	b.n	800b1a6 <_dtoa_r+0x7f6>
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	e7f6      	b.n	800b2ba <_dtoa_r+0x90a>
 800b2cc:	4698      	mov	r8, r3
 800b2ce:	e7f4      	b.n	800b2ba <_dtoa_r+0x90a>
 800b2d0:	f43f af7d 	beq.w	800b1ce <_dtoa_r+0x81e>
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	301c      	adds	r0, #28
 800b2d8:	e772      	b.n	800b1c0 <_dtoa_r+0x810>
 800b2da:	9b08      	ldr	r3, [sp, #32]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dc36      	bgt.n	800b34e <_dtoa_r+0x99e>
 800b2e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dd33      	ble.n	800b34e <_dtoa_r+0x99e>
 800b2e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2ea:	f1b9 0f00 	cmp.w	r9, #0
 800b2ee:	d10d      	bne.n	800b30c <_dtoa_r+0x95c>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	2205      	movs	r2, #5
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 fd4a 	bl	800bd90 <__multadd>
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4658      	mov	r0, fp
 800b302:	f000 ffab 	bl	800c25c <__mcmp>
 800b306:	2800      	cmp	r0, #0
 800b308:	f73f adb8 	bgt.w	800ae7c <_dtoa_r+0x4cc>
 800b30c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b30e:	9f03      	ldr	r7, [sp, #12]
 800b310:	ea6f 0a03 	mvn.w	sl, r3
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	4621      	mov	r1, r4
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 fd16 	bl	800bd4c <_Bfree>
 800b320:	2e00      	cmp	r6, #0
 800b322:	f43f aea7 	beq.w	800b074 <_dtoa_r+0x6c4>
 800b326:	f1b8 0f00 	cmp.w	r8, #0
 800b32a:	d005      	beq.n	800b338 <_dtoa_r+0x988>
 800b32c:	45b0      	cmp	r8, r6
 800b32e:	d003      	beq.n	800b338 <_dtoa_r+0x988>
 800b330:	4641      	mov	r1, r8
 800b332:	4628      	mov	r0, r5
 800b334:	f000 fd0a 	bl	800bd4c <_Bfree>
 800b338:	4631      	mov	r1, r6
 800b33a:	4628      	mov	r0, r5
 800b33c:	f000 fd06 	bl	800bd4c <_Bfree>
 800b340:	e698      	b.n	800b074 <_dtoa_r+0x6c4>
 800b342:	2400      	movs	r4, #0
 800b344:	4626      	mov	r6, r4
 800b346:	e7e1      	b.n	800b30c <_dtoa_r+0x95c>
 800b348:	46c2      	mov	sl, r8
 800b34a:	4626      	mov	r6, r4
 800b34c:	e596      	b.n	800ae7c <_dtoa_r+0x4cc>
 800b34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 80fd 	beq.w	800b554 <_dtoa_r+0xba4>
 800b35a:	2f00      	cmp	r7, #0
 800b35c:	dd05      	ble.n	800b36a <_dtoa_r+0x9ba>
 800b35e:	4631      	mov	r1, r6
 800b360:	463a      	mov	r2, r7
 800b362:	4628      	mov	r0, r5
 800b364:	f000 ff0a 	bl	800c17c <__lshift>
 800b368:	4606      	mov	r6, r0
 800b36a:	f1b8 0f00 	cmp.w	r8, #0
 800b36e:	d05c      	beq.n	800b42a <_dtoa_r+0xa7a>
 800b370:	4628      	mov	r0, r5
 800b372:	6871      	ldr	r1, [r6, #4]
 800b374:	f000 fcaa 	bl	800bccc <_Balloc>
 800b378:	4607      	mov	r7, r0
 800b37a:	b928      	cbnz	r0, 800b388 <_dtoa_r+0x9d8>
 800b37c:	4602      	mov	r2, r0
 800b37e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b382:	4b7f      	ldr	r3, [pc, #508]	; (800b580 <_dtoa_r+0xbd0>)
 800b384:	f7ff bb28 	b.w	800a9d8 <_dtoa_r+0x28>
 800b388:	6932      	ldr	r2, [r6, #16]
 800b38a:	f106 010c 	add.w	r1, r6, #12
 800b38e:	3202      	adds	r2, #2
 800b390:	0092      	lsls	r2, r2, #2
 800b392:	300c      	adds	r0, #12
 800b394:	f000 fc8c 	bl	800bcb0 <memcpy>
 800b398:	2201      	movs	r2, #1
 800b39a:	4639      	mov	r1, r7
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 feed 	bl	800c17c <__lshift>
 800b3a2:	46b0      	mov	r8, r6
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	9308      	str	r3, [sp, #32]
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	444b      	add	r3, r9
 800b3b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	4621      	mov	r1, r4
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	4658      	mov	r0, fp
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	f7ff fa66 	bl	800a894 <quorem>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4641      	mov	r1, r8
 800b3cc:	3330      	adds	r3, #48	; 0x30
 800b3ce:	9006      	str	r0, [sp, #24]
 800b3d0:	4658      	mov	r0, fp
 800b3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3d4:	f000 ff42 	bl	800c25c <__mcmp>
 800b3d8:	4632      	mov	r2, r6
 800b3da:	4681      	mov	r9, r0
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 ff58 	bl	800c294 <__mdiff>
 800b3e4:	68c2      	ldr	r2, [r0, #12]
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ea:	bb02      	cbnz	r2, 800b42e <_dtoa_r+0xa7e>
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	4658      	mov	r0, fp
 800b3f0:	f000 ff34 	bl	800c25c <__mcmp>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b400:	f000 fca4 	bl	800bd4c <_Bfree>
 800b404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b408:	9f08      	ldr	r7, [sp, #32]
 800b40a:	ea43 0102 	orr.w	r1, r3, r2
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	430b      	orrs	r3, r1
 800b412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b414:	d10d      	bne.n	800b432 <_dtoa_r+0xa82>
 800b416:	2b39      	cmp	r3, #57	; 0x39
 800b418:	d029      	beq.n	800b46e <_dtoa_r+0xabe>
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	dd01      	ble.n	800b424 <_dtoa_r+0xa74>
 800b420:	9b06      	ldr	r3, [sp, #24]
 800b422:	3331      	adds	r3, #49	; 0x31
 800b424:	9a04      	ldr	r2, [sp, #16]
 800b426:	7013      	strb	r3, [r2, #0]
 800b428:	e776      	b.n	800b318 <_dtoa_r+0x968>
 800b42a:	4630      	mov	r0, r6
 800b42c:	e7b9      	b.n	800b3a2 <_dtoa_r+0x9f2>
 800b42e:	2201      	movs	r2, #1
 800b430:	e7e2      	b.n	800b3f8 <_dtoa_r+0xa48>
 800b432:	f1b9 0f00 	cmp.w	r9, #0
 800b436:	db06      	blt.n	800b446 <_dtoa_r+0xa96>
 800b438:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b43a:	ea41 0909 	orr.w	r9, r1, r9
 800b43e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b440:	ea59 0101 	orrs.w	r1, r9, r1
 800b444:	d120      	bne.n	800b488 <_dtoa_r+0xad8>
 800b446:	2a00      	cmp	r2, #0
 800b448:	ddec      	ble.n	800b424 <_dtoa_r+0xa74>
 800b44a:	4659      	mov	r1, fp
 800b44c:	2201      	movs	r2, #1
 800b44e:	4628      	mov	r0, r5
 800b450:	9308      	str	r3, [sp, #32]
 800b452:	f000 fe93 	bl	800c17c <__lshift>
 800b456:	4621      	mov	r1, r4
 800b458:	4683      	mov	fp, r0
 800b45a:	f000 feff 	bl	800c25c <__mcmp>
 800b45e:	2800      	cmp	r0, #0
 800b460:	9b08      	ldr	r3, [sp, #32]
 800b462:	dc02      	bgt.n	800b46a <_dtoa_r+0xaba>
 800b464:	d1de      	bne.n	800b424 <_dtoa_r+0xa74>
 800b466:	07da      	lsls	r2, r3, #31
 800b468:	d5dc      	bpl.n	800b424 <_dtoa_r+0xa74>
 800b46a:	2b39      	cmp	r3, #57	; 0x39
 800b46c:	d1d8      	bne.n	800b420 <_dtoa_r+0xa70>
 800b46e:	2339      	movs	r3, #57	; 0x39
 800b470:	9a04      	ldr	r2, [sp, #16]
 800b472:	7013      	strb	r3, [r2, #0]
 800b474:	463b      	mov	r3, r7
 800b476:	461f      	mov	r7, r3
 800b478:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	2a39      	cmp	r2, #57	; 0x39
 800b480:	d050      	beq.n	800b524 <_dtoa_r+0xb74>
 800b482:	3201      	adds	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e747      	b.n	800b318 <_dtoa_r+0x968>
 800b488:	2a00      	cmp	r2, #0
 800b48a:	dd03      	ble.n	800b494 <_dtoa_r+0xae4>
 800b48c:	2b39      	cmp	r3, #57	; 0x39
 800b48e:	d0ee      	beq.n	800b46e <_dtoa_r+0xabe>
 800b490:	3301      	adds	r3, #1
 800b492:	e7c7      	b.n	800b424 <_dtoa_r+0xa74>
 800b494:	9a08      	ldr	r2, [sp, #32]
 800b496:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b498:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b49c:	428a      	cmp	r2, r1
 800b49e:	d02a      	beq.n	800b4f6 <_dtoa_r+0xb46>
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 fc72 	bl	800bd90 <__multadd>
 800b4ac:	45b0      	cmp	r8, r6
 800b4ae:	4683      	mov	fp, r0
 800b4b0:	f04f 0300 	mov.w	r3, #0
 800b4b4:	f04f 020a 	mov.w	r2, #10
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	d107      	bne.n	800b4ce <_dtoa_r+0xb1e>
 800b4be:	f000 fc67 	bl	800bd90 <__multadd>
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	9b08      	ldr	r3, [sp, #32]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	9308      	str	r3, [sp, #32]
 800b4cc:	e775      	b.n	800b3ba <_dtoa_r+0xa0a>
 800b4ce:	f000 fc5f 	bl	800bd90 <__multadd>
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	220a      	movs	r2, #10
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 fc58 	bl	800bd90 <__multadd>
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	e7f0      	b.n	800b4c6 <_dtoa_r+0xb16>
 800b4e4:	f1b9 0f00 	cmp.w	r9, #0
 800b4e8:	bfcc      	ite	gt
 800b4ea:	464f      	movgt	r7, r9
 800b4ec:	2701      	movle	r7, #1
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	9a03      	ldr	r2, [sp, #12]
 800b4f4:	4417      	add	r7, r2
 800b4f6:	4659      	mov	r1, fp
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	9308      	str	r3, [sp, #32]
 800b4fe:	f000 fe3d 	bl	800c17c <__lshift>
 800b502:	4621      	mov	r1, r4
 800b504:	4683      	mov	fp, r0
 800b506:	f000 fea9 	bl	800c25c <__mcmp>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	dcb2      	bgt.n	800b474 <_dtoa_r+0xac4>
 800b50e:	d102      	bne.n	800b516 <_dtoa_r+0xb66>
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	07db      	lsls	r3, r3, #31
 800b514:	d4ae      	bmi.n	800b474 <_dtoa_r+0xac4>
 800b516:	463b      	mov	r3, r7
 800b518:	461f      	mov	r7, r3
 800b51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51e:	2a30      	cmp	r2, #48	; 0x30
 800b520:	d0fa      	beq.n	800b518 <_dtoa_r+0xb68>
 800b522:	e6f9      	b.n	800b318 <_dtoa_r+0x968>
 800b524:	9a03      	ldr	r2, [sp, #12]
 800b526:	429a      	cmp	r2, r3
 800b528:	d1a5      	bne.n	800b476 <_dtoa_r+0xac6>
 800b52a:	2331      	movs	r3, #49	; 0x31
 800b52c:	f10a 0a01 	add.w	sl, sl, #1
 800b530:	e779      	b.n	800b426 <_dtoa_r+0xa76>
 800b532:	4b14      	ldr	r3, [pc, #80]	; (800b584 <_dtoa_r+0xbd4>)
 800b534:	f7ff baa8 	b.w	800aa88 <_dtoa_r+0xd8>
 800b538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f47f aa81 	bne.w	800aa42 <_dtoa_r+0x92>
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <_dtoa_r+0xbd8>)
 800b542:	f7ff baa1 	b.w	800aa88 <_dtoa_r+0xd8>
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	dc03      	bgt.n	800b554 <_dtoa_r+0xba4>
 800b54c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b54e:	2b02      	cmp	r3, #2
 800b550:	f73f aecb 	bgt.w	800b2ea <_dtoa_r+0x93a>
 800b554:	9f03      	ldr	r7, [sp, #12]
 800b556:	4621      	mov	r1, r4
 800b558:	4658      	mov	r0, fp
 800b55a:	f7ff f99b 	bl	800a894 <quorem>
 800b55e:	9a03      	ldr	r2, [sp, #12]
 800b560:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b564:	f807 3b01 	strb.w	r3, [r7], #1
 800b568:	1aba      	subs	r2, r7, r2
 800b56a:	4591      	cmp	r9, r2
 800b56c:	ddba      	ble.n	800b4e4 <_dtoa_r+0xb34>
 800b56e:	4659      	mov	r1, fp
 800b570:	2300      	movs	r3, #0
 800b572:	220a      	movs	r2, #10
 800b574:	4628      	mov	r0, r5
 800b576:	f000 fc0b 	bl	800bd90 <__multadd>
 800b57a:	4683      	mov	fp, r0
 800b57c:	e7eb      	b.n	800b556 <_dtoa_r+0xba6>
 800b57e:	bf00      	nop
 800b580:	0801f2cb 	.word	0x0801f2cb
 800b584:	0801f0ac 	.word	0x0801f0ac
 800b588:	0801f229 	.word	0x0801f229

0800b58c <rshift>:
 800b58c:	6903      	ldr	r3, [r0, #16]
 800b58e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b596:	f100 0414 	add.w	r4, r0, #20
 800b59a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b59e:	dd46      	ble.n	800b62e <rshift+0xa2>
 800b5a0:	f011 011f 	ands.w	r1, r1, #31
 800b5a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5ac:	d10c      	bne.n	800b5c8 <rshift+0x3c>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f100 0710 	add.w	r7, r0, #16
 800b5b4:	42b1      	cmp	r1, r6
 800b5b6:	d335      	bcc.n	800b624 <rshift+0x98>
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	1eea      	subs	r2, r5, #3
 800b5be:	4296      	cmp	r6, r2
 800b5c0:	bf38      	it	cc
 800b5c2:	2300      	movcc	r3, #0
 800b5c4:	4423      	add	r3, r4
 800b5c6:	e015      	b.n	800b5f4 <rshift+0x68>
 800b5c8:	46a1      	mov	r9, r4
 800b5ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5ce:	f1c1 0820 	rsb	r8, r1, #32
 800b5d2:	40cf      	lsrs	r7, r1
 800b5d4:	f105 0e04 	add.w	lr, r5, #4
 800b5d8:	4576      	cmp	r6, lr
 800b5da:	46f4      	mov	ip, lr
 800b5dc:	d816      	bhi.n	800b60c <rshift+0x80>
 800b5de:	1a9a      	subs	r2, r3, r2
 800b5e0:	0092      	lsls	r2, r2, #2
 800b5e2:	3a04      	subs	r2, #4
 800b5e4:	3501      	adds	r5, #1
 800b5e6:	42ae      	cmp	r6, r5
 800b5e8:	bf38      	it	cc
 800b5ea:	2200      	movcc	r2, #0
 800b5ec:	18a3      	adds	r3, r4, r2
 800b5ee:	50a7      	str	r7, [r4, r2]
 800b5f0:	b107      	cbz	r7, 800b5f4 <rshift+0x68>
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	eba3 0204 	sub.w	r2, r3, r4
 800b5fa:	bf08      	it	eq
 800b5fc:	2300      	moveq	r3, #0
 800b5fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b602:	6102      	str	r2, [r0, #16]
 800b604:	bf08      	it	eq
 800b606:	6143      	streq	r3, [r0, #20]
 800b608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b60c:	f8dc c000 	ldr.w	ip, [ip]
 800b610:	fa0c fc08 	lsl.w	ip, ip, r8
 800b614:	ea4c 0707 	orr.w	r7, ip, r7
 800b618:	f849 7b04 	str.w	r7, [r9], #4
 800b61c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b620:	40cf      	lsrs	r7, r1
 800b622:	e7d9      	b.n	800b5d8 <rshift+0x4c>
 800b624:	f851 cb04 	ldr.w	ip, [r1], #4
 800b628:	f847 cf04 	str.w	ip, [r7, #4]!
 800b62c:	e7c2      	b.n	800b5b4 <rshift+0x28>
 800b62e:	4623      	mov	r3, r4
 800b630:	e7e0      	b.n	800b5f4 <rshift+0x68>

0800b632 <__hexdig_fun>:
 800b632:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b636:	2b09      	cmp	r3, #9
 800b638:	d802      	bhi.n	800b640 <__hexdig_fun+0xe>
 800b63a:	3820      	subs	r0, #32
 800b63c:	b2c0      	uxtb	r0, r0
 800b63e:	4770      	bx	lr
 800b640:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b644:	2b05      	cmp	r3, #5
 800b646:	d801      	bhi.n	800b64c <__hexdig_fun+0x1a>
 800b648:	3847      	subs	r0, #71	; 0x47
 800b64a:	e7f7      	b.n	800b63c <__hexdig_fun+0xa>
 800b64c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b650:	2b05      	cmp	r3, #5
 800b652:	d801      	bhi.n	800b658 <__hexdig_fun+0x26>
 800b654:	3827      	subs	r0, #39	; 0x27
 800b656:	e7f1      	b.n	800b63c <__hexdig_fun+0xa>
 800b658:	2000      	movs	r0, #0
 800b65a:	4770      	bx	lr

0800b65c <__gethex>:
 800b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	b08b      	sub	sp, #44	; 0x2c
 800b662:	9305      	str	r3, [sp, #20]
 800b664:	4bb2      	ldr	r3, [pc, #712]	; (800b930 <__gethex+0x2d4>)
 800b666:	9002      	str	r0, [sp, #8]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	468b      	mov	fp, r1
 800b66c:	4618      	mov	r0, r3
 800b66e:	4690      	mov	r8, r2
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	f7fa fe8f 	bl	8006394 <strlen>
 800b676:	4682      	mov	sl, r0
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	f8db 2000 	ldr.w	r2, [fp]
 800b67e:	4403      	add	r3, r0
 800b680:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	1c93      	adds	r3, r2, #2
 800b688:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b68c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b690:	32fe      	adds	r2, #254	; 0xfe
 800b692:	18d1      	adds	r1, r2, r3
 800b694:	461f      	mov	r7, r3
 800b696:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b69a:	9101      	str	r1, [sp, #4]
 800b69c:	2830      	cmp	r0, #48	; 0x30
 800b69e:	d0f8      	beq.n	800b692 <__gethex+0x36>
 800b6a0:	f7ff ffc7 	bl	800b632 <__hexdig_fun>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d13a      	bne.n	800b720 <__gethex+0xc4>
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	9903      	ldr	r1, [sp, #12]
 800b6b0:	f001 fa26 	bl	800cb00 <strncmp>
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d166      	bne.n	800b788 <__gethex+0x12c>
 800b6ba:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b6be:	eb07 060a 	add.w	r6, r7, sl
 800b6c2:	f7ff ffb6 	bl	800b632 <__hexdig_fun>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d060      	beq.n	800b78c <__gethex+0x130>
 800b6ca:	4633      	mov	r3, r6
 800b6cc:	7818      	ldrb	r0, [r3, #0]
 800b6ce:	461f      	mov	r7, r3
 800b6d0:	2830      	cmp	r0, #48	; 0x30
 800b6d2:	f103 0301 	add.w	r3, r3, #1
 800b6d6:	d0f9      	beq.n	800b6cc <__gethex+0x70>
 800b6d8:	f7ff ffab 	bl	800b632 <__hexdig_fun>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	fab0 f480 	clz	r4, r0
 800b6e2:	4635      	mov	r5, r6
 800b6e4:	0964      	lsrs	r4, r4, #5
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	463a      	mov	r2, r7
 800b6ea:	4616      	mov	r6, r2
 800b6ec:	7830      	ldrb	r0, [r6, #0]
 800b6ee:	3201      	adds	r2, #1
 800b6f0:	f7ff ff9f 	bl	800b632 <__hexdig_fun>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d1f8      	bne.n	800b6ea <__gethex+0x8e>
 800b6f8:	4652      	mov	r2, sl
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	9903      	ldr	r1, [sp, #12]
 800b6fe:	f001 f9ff 	bl	800cb00 <strncmp>
 800b702:	b980      	cbnz	r0, 800b726 <__gethex+0xca>
 800b704:	b94d      	cbnz	r5, 800b71a <__gethex+0xbe>
 800b706:	eb06 050a 	add.w	r5, r6, sl
 800b70a:	462a      	mov	r2, r5
 800b70c:	4616      	mov	r6, r2
 800b70e:	7830      	ldrb	r0, [r6, #0]
 800b710:	3201      	adds	r2, #1
 800b712:	f7ff ff8e 	bl	800b632 <__hexdig_fun>
 800b716:	2800      	cmp	r0, #0
 800b718:	d1f8      	bne.n	800b70c <__gethex+0xb0>
 800b71a:	1bad      	subs	r5, r5, r6
 800b71c:	00ad      	lsls	r5, r5, #2
 800b71e:	e004      	b.n	800b72a <__gethex+0xce>
 800b720:	2400      	movs	r4, #0
 800b722:	4625      	mov	r5, r4
 800b724:	e7e0      	b.n	800b6e8 <__gethex+0x8c>
 800b726:	2d00      	cmp	r5, #0
 800b728:	d1f7      	bne.n	800b71a <__gethex+0xbe>
 800b72a:	7833      	ldrb	r3, [r6, #0]
 800b72c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b730:	2b50      	cmp	r3, #80	; 0x50
 800b732:	d139      	bne.n	800b7a8 <__gethex+0x14c>
 800b734:	7873      	ldrb	r3, [r6, #1]
 800b736:	2b2b      	cmp	r3, #43	; 0x2b
 800b738:	d02a      	beq.n	800b790 <__gethex+0x134>
 800b73a:	2b2d      	cmp	r3, #45	; 0x2d
 800b73c:	d02c      	beq.n	800b798 <__gethex+0x13c>
 800b73e:	f04f 0900 	mov.w	r9, #0
 800b742:	1c71      	adds	r1, r6, #1
 800b744:	7808      	ldrb	r0, [r1, #0]
 800b746:	f7ff ff74 	bl	800b632 <__hexdig_fun>
 800b74a:	1e43      	subs	r3, r0, #1
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b18      	cmp	r3, #24
 800b750:	d82a      	bhi.n	800b7a8 <__gethex+0x14c>
 800b752:	f1a0 0210 	sub.w	r2, r0, #16
 800b756:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b75a:	f7ff ff6a 	bl	800b632 <__hexdig_fun>
 800b75e:	1e43      	subs	r3, r0, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b18      	cmp	r3, #24
 800b764:	d91b      	bls.n	800b79e <__gethex+0x142>
 800b766:	f1b9 0f00 	cmp.w	r9, #0
 800b76a:	d000      	beq.n	800b76e <__gethex+0x112>
 800b76c:	4252      	negs	r2, r2
 800b76e:	4415      	add	r5, r2
 800b770:	f8cb 1000 	str.w	r1, [fp]
 800b774:	b1d4      	cbz	r4, 800b7ac <__gethex+0x150>
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	bf14      	ite	ne
 800b77c:	2700      	movne	r7, #0
 800b77e:	2706      	moveq	r7, #6
 800b780:	4638      	mov	r0, r7
 800b782:	b00b      	add	sp, #44	; 0x2c
 800b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b788:	463e      	mov	r6, r7
 800b78a:	4625      	mov	r5, r4
 800b78c:	2401      	movs	r4, #1
 800b78e:	e7cc      	b.n	800b72a <__gethex+0xce>
 800b790:	f04f 0900 	mov.w	r9, #0
 800b794:	1cb1      	adds	r1, r6, #2
 800b796:	e7d5      	b.n	800b744 <__gethex+0xe8>
 800b798:	f04f 0901 	mov.w	r9, #1
 800b79c:	e7fa      	b.n	800b794 <__gethex+0x138>
 800b79e:	230a      	movs	r3, #10
 800b7a0:	fb03 0202 	mla	r2, r3, r2, r0
 800b7a4:	3a10      	subs	r2, #16
 800b7a6:	e7d6      	b.n	800b756 <__gethex+0xfa>
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	e7e1      	b.n	800b770 <__gethex+0x114>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	1bf3      	subs	r3, r6, r7
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	2b07      	cmp	r3, #7
 800b7b4:	dc0a      	bgt.n	800b7cc <__gethex+0x170>
 800b7b6:	9802      	ldr	r0, [sp, #8]
 800b7b8:	f000 fa88 	bl	800bccc <_Balloc>
 800b7bc:	4604      	mov	r4, r0
 800b7be:	b940      	cbnz	r0, 800b7d2 <__gethex+0x176>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	21de      	movs	r1, #222	; 0xde
 800b7c4:	4b5b      	ldr	r3, [pc, #364]	; (800b934 <__gethex+0x2d8>)
 800b7c6:	485c      	ldr	r0, [pc, #368]	; (800b938 <__gethex+0x2dc>)
 800b7c8:	f001 f9bc 	bl	800cb44 <__assert_func>
 800b7cc:	3101      	adds	r1, #1
 800b7ce:	105b      	asrs	r3, r3, #1
 800b7d0:	e7ef      	b.n	800b7b2 <__gethex+0x156>
 800b7d2:	f04f 0b00 	mov.w	fp, #0
 800b7d6:	f100 0914 	add.w	r9, r0, #20
 800b7da:	f1ca 0301 	rsb	r3, sl, #1
 800b7de:	f8cd 9010 	str.w	r9, [sp, #16]
 800b7e2:	f8cd b004 	str.w	fp, [sp, #4]
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	42b7      	cmp	r7, r6
 800b7ea:	d33f      	bcc.n	800b86c <__gethex+0x210>
 800b7ec:	9f04      	ldr	r7, [sp, #16]
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	f847 3b04 	str.w	r3, [r7], #4
 800b7f4:	eba7 0709 	sub.w	r7, r7, r9
 800b7f8:	10bf      	asrs	r7, r7, #2
 800b7fa:	6127      	str	r7, [r4, #16]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 fb57 	bl	800beb0 <__hi0bits>
 800b802:	017f      	lsls	r7, r7, #5
 800b804:	f8d8 6000 	ldr.w	r6, [r8]
 800b808:	1a3f      	subs	r7, r7, r0
 800b80a:	42b7      	cmp	r7, r6
 800b80c:	dd62      	ble.n	800b8d4 <__gethex+0x278>
 800b80e:	1bbf      	subs	r7, r7, r6
 800b810:	4639      	mov	r1, r7
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fef1 	bl	800c5fa <__any_on>
 800b818:	4682      	mov	sl, r0
 800b81a:	b1a8      	cbz	r0, 800b848 <__gethex+0x1ec>
 800b81c:	f04f 0a01 	mov.w	sl, #1
 800b820:	1e7b      	subs	r3, r7, #1
 800b822:	1159      	asrs	r1, r3, #5
 800b824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b828:	f003 021f 	and.w	r2, r3, #31
 800b82c:	fa0a f202 	lsl.w	r2, sl, r2
 800b830:	420a      	tst	r2, r1
 800b832:	d009      	beq.n	800b848 <__gethex+0x1ec>
 800b834:	4553      	cmp	r3, sl
 800b836:	dd05      	ble.n	800b844 <__gethex+0x1e8>
 800b838:	4620      	mov	r0, r4
 800b83a:	1eb9      	subs	r1, r7, #2
 800b83c:	f000 fedd 	bl	800c5fa <__any_on>
 800b840:	2800      	cmp	r0, #0
 800b842:	d144      	bne.n	800b8ce <__gethex+0x272>
 800b844:	f04f 0a02 	mov.w	sl, #2
 800b848:	4639      	mov	r1, r7
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7ff fe9e 	bl	800b58c <rshift>
 800b850:	443d      	add	r5, r7
 800b852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b856:	42ab      	cmp	r3, r5
 800b858:	da4a      	bge.n	800b8f0 <__gethex+0x294>
 800b85a:	4621      	mov	r1, r4
 800b85c:	9802      	ldr	r0, [sp, #8]
 800b85e:	f000 fa75 	bl	800bd4c <_Bfree>
 800b862:	2300      	movs	r3, #0
 800b864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b866:	27a3      	movs	r7, #163	; 0xa3
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e789      	b.n	800b780 <__gethex+0x124>
 800b86c:	1e73      	subs	r3, r6, #1
 800b86e:	9a06      	ldr	r2, [sp, #24]
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b876:	4293      	cmp	r3, r2
 800b878:	d019      	beq.n	800b8ae <__gethex+0x252>
 800b87a:	f1bb 0f20 	cmp.w	fp, #32
 800b87e:	d107      	bne.n	800b890 <__gethex+0x234>
 800b880:	9b04      	ldr	r3, [sp, #16]
 800b882:	9a01      	ldr	r2, [sp, #4]
 800b884:	f843 2b04 	str.w	r2, [r3], #4
 800b888:	9304      	str	r3, [sp, #16]
 800b88a:	2300      	movs	r3, #0
 800b88c:	469b      	mov	fp, r3
 800b88e:	9301      	str	r3, [sp, #4]
 800b890:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b894:	f7ff fecd 	bl	800b632 <__hexdig_fun>
 800b898:	9b01      	ldr	r3, [sp, #4]
 800b89a:	f000 000f 	and.w	r0, r0, #15
 800b89e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8a2:	4303      	orrs	r3, r0
 800b8a4:	9301      	str	r3, [sp, #4]
 800b8a6:	f10b 0b04 	add.w	fp, fp, #4
 800b8aa:	9b07      	ldr	r3, [sp, #28]
 800b8ac:	e00d      	b.n	800b8ca <__gethex+0x26e>
 800b8ae:	9a08      	ldr	r2, [sp, #32]
 800b8b0:	1e73      	subs	r3, r6, #1
 800b8b2:	4413      	add	r3, r2
 800b8b4:	42bb      	cmp	r3, r7
 800b8b6:	d3e0      	bcc.n	800b87a <__gethex+0x21e>
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	9903      	ldr	r1, [sp, #12]
 800b8be:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c0:	f001 f91e 	bl	800cb00 <strncmp>
 800b8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d1d7      	bne.n	800b87a <__gethex+0x21e>
 800b8ca:	461e      	mov	r6, r3
 800b8cc:	e78c      	b.n	800b7e8 <__gethex+0x18c>
 800b8ce:	f04f 0a03 	mov.w	sl, #3
 800b8d2:	e7b9      	b.n	800b848 <__gethex+0x1ec>
 800b8d4:	da09      	bge.n	800b8ea <__gethex+0x28e>
 800b8d6:	1bf7      	subs	r7, r6, r7
 800b8d8:	4621      	mov	r1, r4
 800b8da:	463a      	mov	r2, r7
 800b8dc:	9802      	ldr	r0, [sp, #8]
 800b8de:	f000 fc4d 	bl	800c17c <__lshift>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	1bed      	subs	r5, r5, r7
 800b8e6:	f100 0914 	add.w	r9, r0, #20
 800b8ea:	f04f 0a00 	mov.w	sl, #0
 800b8ee:	e7b0      	b.n	800b852 <__gethex+0x1f6>
 800b8f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b8f4:	42a8      	cmp	r0, r5
 800b8f6:	dd72      	ble.n	800b9de <__gethex+0x382>
 800b8f8:	1b45      	subs	r5, r0, r5
 800b8fa:	42ae      	cmp	r6, r5
 800b8fc:	dc35      	bgt.n	800b96a <__gethex+0x30e>
 800b8fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b902:	2b02      	cmp	r3, #2
 800b904:	d029      	beq.n	800b95a <__gethex+0x2fe>
 800b906:	2b03      	cmp	r3, #3
 800b908:	d02b      	beq.n	800b962 <__gethex+0x306>
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d11c      	bne.n	800b948 <__gethex+0x2ec>
 800b90e:	42ae      	cmp	r6, r5
 800b910:	d11a      	bne.n	800b948 <__gethex+0x2ec>
 800b912:	2e01      	cmp	r6, #1
 800b914:	d112      	bne.n	800b93c <__gethex+0x2e0>
 800b916:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b91a:	9a05      	ldr	r2, [sp, #20]
 800b91c:	2762      	movs	r7, #98	; 0x62
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	2301      	movs	r3, #1
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	f8c9 3000 	str.w	r3, [r9]
 800b928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b92a:	601c      	str	r4, [r3, #0]
 800b92c:	e728      	b.n	800b780 <__gethex+0x124>
 800b92e:	bf00      	nop
 800b930:	0801f364 	.word	0x0801f364
 800b934:	0801f2cb 	.word	0x0801f2cb
 800b938:	0801f2dc 	.word	0x0801f2dc
 800b93c:	4620      	mov	r0, r4
 800b93e:	1e71      	subs	r1, r6, #1
 800b940:	f000 fe5b 	bl	800c5fa <__any_on>
 800b944:	2800      	cmp	r0, #0
 800b946:	d1e6      	bne.n	800b916 <__gethex+0x2ba>
 800b948:	4621      	mov	r1, r4
 800b94a:	9802      	ldr	r0, [sp, #8]
 800b94c:	f000 f9fe 	bl	800bd4c <_Bfree>
 800b950:	2300      	movs	r3, #0
 800b952:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b954:	2750      	movs	r7, #80	; 0x50
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	e712      	b.n	800b780 <__gethex+0x124>
 800b95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1f3      	bne.n	800b948 <__gethex+0x2ec>
 800b960:	e7d9      	b.n	800b916 <__gethex+0x2ba>
 800b962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1d6      	bne.n	800b916 <__gethex+0x2ba>
 800b968:	e7ee      	b.n	800b948 <__gethex+0x2ec>
 800b96a:	1e6f      	subs	r7, r5, #1
 800b96c:	f1ba 0f00 	cmp.w	sl, #0
 800b970:	d132      	bne.n	800b9d8 <__gethex+0x37c>
 800b972:	b127      	cbz	r7, 800b97e <__gethex+0x322>
 800b974:	4639      	mov	r1, r7
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fe3f 	bl	800c5fa <__any_on>
 800b97c:	4682      	mov	sl, r0
 800b97e:	2101      	movs	r1, #1
 800b980:	117b      	asrs	r3, r7, #5
 800b982:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b986:	f007 071f 	and.w	r7, r7, #31
 800b98a:	fa01 f707 	lsl.w	r7, r1, r7
 800b98e:	421f      	tst	r7, r3
 800b990:	f04f 0702 	mov.w	r7, #2
 800b994:	4629      	mov	r1, r5
 800b996:	4620      	mov	r0, r4
 800b998:	bf18      	it	ne
 800b99a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b99e:	1b76      	subs	r6, r6, r5
 800b9a0:	f7ff fdf4 	bl	800b58c <rshift>
 800b9a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9a8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ac:	d048      	beq.n	800ba40 <__gethex+0x3e4>
 800b9ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d015      	beq.n	800b9e2 <__gethex+0x386>
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d017      	beq.n	800b9ea <__gethex+0x38e>
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d109      	bne.n	800b9d2 <__gethex+0x376>
 800b9be:	f01a 0f02 	tst.w	sl, #2
 800b9c2:	d006      	beq.n	800b9d2 <__gethex+0x376>
 800b9c4:	f8d9 0000 	ldr.w	r0, [r9]
 800b9c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b9cc:	f01a 0f01 	tst.w	sl, #1
 800b9d0:	d10e      	bne.n	800b9f0 <__gethex+0x394>
 800b9d2:	f047 0710 	orr.w	r7, r7, #16
 800b9d6:	e033      	b.n	800ba40 <__gethex+0x3e4>
 800b9d8:	f04f 0a01 	mov.w	sl, #1
 800b9dc:	e7cf      	b.n	800b97e <__gethex+0x322>
 800b9de:	2701      	movs	r7, #1
 800b9e0:	e7e2      	b.n	800b9a8 <__gethex+0x34c>
 800b9e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9e4:	f1c3 0301 	rsb	r3, r3, #1
 800b9e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b9ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0f0      	beq.n	800b9d2 <__gethex+0x376>
 800b9f0:	f04f 0c00 	mov.w	ip, #0
 800b9f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b9f8:	f104 0314 	add.w	r3, r4, #20
 800b9fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba0e:	d01c      	beq.n	800ba4a <__gethex+0x3ee>
 800ba10:	3201      	adds	r2, #1
 800ba12:	6002      	str	r2, [r0, #0]
 800ba14:	2f02      	cmp	r7, #2
 800ba16:	f104 0314 	add.w	r3, r4, #20
 800ba1a:	d13d      	bne.n	800ba98 <__gethex+0x43c>
 800ba1c:	f8d8 2000 	ldr.w	r2, [r8]
 800ba20:	3a01      	subs	r2, #1
 800ba22:	42b2      	cmp	r2, r6
 800ba24:	d10a      	bne.n	800ba3c <__gethex+0x3e0>
 800ba26:	2201      	movs	r2, #1
 800ba28:	1171      	asrs	r1, r6, #5
 800ba2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba2e:	f006 061f 	and.w	r6, r6, #31
 800ba32:	fa02 f606 	lsl.w	r6, r2, r6
 800ba36:	421e      	tst	r6, r3
 800ba38:	bf18      	it	ne
 800ba3a:	4617      	movne	r7, r2
 800ba3c:	f047 0720 	orr.w	r7, r7, #32
 800ba40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba42:	601c      	str	r4, [r3, #0]
 800ba44:	9b05      	ldr	r3, [sp, #20]
 800ba46:	601d      	str	r5, [r3, #0]
 800ba48:	e69a      	b.n	800b780 <__gethex+0x124>
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba50:	d8d8      	bhi.n	800ba04 <__gethex+0x3a8>
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	459b      	cmp	fp, r3
 800ba56:	db17      	blt.n	800ba88 <__gethex+0x42c>
 800ba58:	6861      	ldr	r1, [r4, #4]
 800ba5a:	9802      	ldr	r0, [sp, #8]
 800ba5c:	3101      	adds	r1, #1
 800ba5e:	f000 f935 	bl	800bccc <_Balloc>
 800ba62:	4681      	mov	r9, r0
 800ba64:	b918      	cbnz	r0, 800ba6e <__gethex+0x412>
 800ba66:	4602      	mov	r2, r0
 800ba68:	2184      	movs	r1, #132	; 0x84
 800ba6a:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <__gethex+0x474>)
 800ba6c:	e6ab      	b.n	800b7c6 <__gethex+0x16a>
 800ba6e:	6922      	ldr	r2, [r4, #16]
 800ba70:	f104 010c 	add.w	r1, r4, #12
 800ba74:	3202      	adds	r2, #2
 800ba76:	0092      	lsls	r2, r2, #2
 800ba78:	300c      	adds	r0, #12
 800ba7a:	f000 f919 	bl	800bcb0 <memcpy>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	9802      	ldr	r0, [sp, #8]
 800ba82:	f000 f963 	bl	800bd4c <_Bfree>
 800ba86:	464c      	mov	r4, r9
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	6122      	str	r2, [r4, #16]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba94:	615a      	str	r2, [r3, #20]
 800ba96:	e7bd      	b.n	800ba14 <__gethex+0x3b8>
 800ba98:	6922      	ldr	r2, [r4, #16]
 800ba9a:	455a      	cmp	r2, fp
 800ba9c:	dd0b      	ble.n	800bab6 <__gethex+0x45a>
 800ba9e:	2101      	movs	r1, #1
 800baa0:	4620      	mov	r0, r4
 800baa2:	f7ff fd73 	bl	800b58c <rshift>
 800baa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baaa:	3501      	adds	r5, #1
 800baac:	42ab      	cmp	r3, r5
 800baae:	f6ff aed4 	blt.w	800b85a <__gethex+0x1fe>
 800bab2:	2701      	movs	r7, #1
 800bab4:	e7c2      	b.n	800ba3c <__gethex+0x3e0>
 800bab6:	f016 061f 	ands.w	r6, r6, #31
 800baba:	d0fa      	beq.n	800bab2 <__gethex+0x456>
 800babc:	4453      	add	r3, sl
 800babe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bac2:	f000 f9f5 	bl	800beb0 <__hi0bits>
 800bac6:	f1c6 0620 	rsb	r6, r6, #32
 800baca:	42b0      	cmp	r0, r6
 800bacc:	dbe7      	blt.n	800ba9e <__gethex+0x442>
 800bace:	e7f0      	b.n	800bab2 <__gethex+0x456>
 800bad0:	0801f2cb 	.word	0x0801f2cb

0800bad4 <L_shift>:
 800bad4:	f1c2 0208 	rsb	r2, r2, #8
 800bad8:	0092      	lsls	r2, r2, #2
 800bada:	b570      	push	{r4, r5, r6, lr}
 800badc:	f1c2 0620 	rsb	r6, r2, #32
 800bae0:	6843      	ldr	r3, [r0, #4]
 800bae2:	6804      	ldr	r4, [r0, #0]
 800bae4:	fa03 f506 	lsl.w	r5, r3, r6
 800bae8:	432c      	orrs	r4, r5
 800baea:	40d3      	lsrs	r3, r2
 800baec:	6004      	str	r4, [r0, #0]
 800baee:	f840 3f04 	str.w	r3, [r0, #4]!
 800baf2:	4288      	cmp	r0, r1
 800baf4:	d3f4      	bcc.n	800bae0 <L_shift+0xc>
 800baf6:	bd70      	pop	{r4, r5, r6, pc}

0800baf8 <__match>:
 800baf8:	b530      	push	{r4, r5, lr}
 800bafa:	6803      	ldr	r3, [r0, #0]
 800bafc:	3301      	adds	r3, #1
 800bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb02:	b914      	cbnz	r4, 800bb0a <__match+0x12>
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	2001      	movs	r0, #1
 800bb08:	bd30      	pop	{r4, r5, pc}
 800bb0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb12:	2d19      	cmp	r5, #25
 800bb14:	bf98      	it	ls
 800bb16:	3220      	addls	r2, #32
 800bb18:	42a2      	cmp	r2, r4
 800bb1a:	d0f0      	beq.n	800bafe <__match+0x6>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7f3      	b.n	800bb08 <__match+0x10>

0800bb20 <__hexnan>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	2500      	movs	r5, #0
 800bb26:	680b      	ldr	r3, [r1, #0]
 800bb28:	4682      	mov	sl, r0
 800bb2a:	115e      	asrs	r6, r3, #5
 800bb2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb30:	f013 031f 	ands.w	r3, r3, #31
 800bb34:	bf18      	it	ne
 800bb36:	3604      	addne	r6, #4
 800bb38:	1f37      	subs	r7, r6, #4
 800bb3a:	46b9      	mov	r9, r7
 800bb3c:	463c      	mov	r4, r7
 800bb3e:	46ab      	mov	fp, r5
 800bb40:	b087      	sub	sp, #28
 800bb42:	4690      	mov	r8, r2
 800bb44:	6802      	ldr	r2, [r0, #0]
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb4c:	9502      	str	r5, [sp, #8]
 800bb4e:	7851      	ldrb	r1, [r2, #1]
 800bb50:	1c53      	adds	r3, r2, #1
 800bb52:	9303      	str	r3, [sp, #12]
 800bb54:	b341      	cbz	r1, 800bba8 <__hexnan+0x88>
 800bb56:	4608      	mov	r0, r1
 800bb58:	9205      	str	r2, [sp, #20]
 800bb5a:	9104      	str	r1, [sp, #16]
 800bb5c:	f7ff fd69 	bl	800b632 <__hexdig_fun>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d14f      	bne.n	800bc04 <__hexnan+0xe4>
 800bb64:	9904      	ldr	r1, [sp, #16]
 800bb66:	9a05      	ldr	r2, [sp, #20]
 800bb68:	2920      	cmp	r1, #32
 800bb6a:	d818      	bhi.n	800bb9e <__hexnan+0x7e>
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	459b      	cmp	fp, r3
 800bb70:	dd13      	ble.n	800bb9a <__hexnan+0x7a>
 800bb72:	454c      	cmp	r4, r9
 800bb74:	d206      	bcs.n	800bb84 <__hexnan+0x64>
 800bb76:	2d07      	cmp	r5, #7
 800bb78:	dc04      	bgt.n	800bb84 <__hexnan+0x64>
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f7ff ffa8 	bl	800bad4 <L_shift>
 800bb84:	4544      	cmp	r4, r8
 800bb86:	d950      	bls.n	800bc2a <__hexnan+0x10a>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb92:	461d      	mov	r5, r3
 800bb94:	464c      	mov	r4, r9
 800bb96:	f8cd b008 	str.w	fp, [sp, #8]
 800bb9a:	9a03      	ldr	r2, [sp, #12]
 800bb9c:	e7d7      	b.n	800bb4e <__hexnan+0x2e>
 800bb9e:	2929      	cmp	r1, #41	; 0x29
 800bba0:	d156      	bne.n	800bc50 <__hexnan+0x130>
 800bba2:	3202      	adds	r2, #2
 800bba4:	f8ca 2000 	str.w	r2, [sl]
 800bba8:	f1bb 0f00 	cmp.w	fp, #0
 800bbac:	d050      	beq.n	800bc50 <__hexnan+0x130>
 800bbae:	454c      	cmp	r4, r9
 800bbb0:	d206      	bcs.n	800bbc0 <__hexnan+0xa0>
 800bbb2:	2d07      	cmp	r5, #7
 800bbb4:	dc04      	bgt.n	800bbc0 <__hexnan+0xa0>
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4649      	mov	r1, r9
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7ff ff8a 	bl	800bad4 <L_shift>
 800bbc0:	4544      	cmp	r4, r8
 800bbc2:	d934      	bls.n	800bc2e <__hexnan+0x10e>
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	f1a8 0204 	sub.w	r2, r8, #4
 800bbca:	f853 1b04 	ldr.w	r1, [r3], #4
 800bbce:	429f      	cmp	r7, r3
 800bbd0:	f842 1f04 	str.w	r1, [r2, #4]!
 800bbd4:	d2f9      	bcs.n	800bbca <__hexnan+0xaa>
 800bbd6:	1b3b      	subs	r3, r7, r4
 800bbd8:	f023 0303 	bic.w	r3, r3, #3
 800bbdc:	3304      	adds	r3, #4
 800bbde:	3401      	adds	r4, #1
 800bbe0:	3e03      	subs	r6, #3
 800bbe2:	42b4      	cmp	r4, r6
 800bbe4:	bf88      	it	hi
 800bbe6:	2304      	movhi	r3, #4
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4443      	add	r3, r8
 800bbec:	f843 2b04 	str.w	r2, [r3], #4
 800bbf0:	429f      	cmp	r7, r3
 800bbf2:	d2fb      	bcs.n	800bbec <__hexnan+0xcc>
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	b91b      	cbnz	r3, 800bc00 <__hexnan+0xe0>
 800bbf8:	4547      	cmp	r7, r8
 800bbfa:	d127      	bne.n	800bc4c <__hexnan+0x12c>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	2005      	movs	r0, #5
 800bc02:	e026      	b.n	800bc52 <__hexnan+0x132>
 800bc04:	3501      	adds	r5, #1
 800bc06:	2d08      	cmp	r5, #8
 800bc08:	f10b 0b01 	add.w	fp, fp, #1
 800bc0c:	dd06      	ble.n	800bc1c <__hexnan+0xfc>
 800bc0e:	4544      	cmp	r4, r8
 800bc10:	d9c3      	bls.n	800bb9a <__hexnan+0x7a>
 800bc12:	2300      	movs	r3, #0
 800bc14:	2501      	movs	r5, #1
 800bc16:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc1a:	3c04      	subs	r4, #4
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	f000 000f 	and.w	r0, r0, #15
 800bc22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc26:	6022      	str	r2, [r4, #0]
 800bc28:	e7b7      	b.n	800bb9a <__hexnan+0x7a>
 800bc2a:	2508      	movs	r5, #8
 800bc2c:	e7b5      	b.n	800bb9a <__hexnan+0x7a>
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d0df      	beq.n	800bbf4 <__hexnan+0xd4>
 800bc34:	f04f 32ff 	mov.w	r2, #4294967295
 800bc38:	f1c3 0320 	rsb	r3, r3, #32
 800bc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc44:	401a      	ands	r2, r3
 800bc46:	f846 2c04 	str.w	r2, [r6, #-4]
 800bc4a:	e7d3      	b.n	800bbf4 <__hexnan+0xd4>
 800bc4c:	3f04      	subs	r7, #4
 800bc4e:	e7d1      	b.n	800bbf4 <__hexnan+0xd4>
 800bc50:	2004      	movs	r0, #4
 800bc52:	b007      	add	sp, #28
 800bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc58 <_localeconv_r>:
 800bc58:	4800      	ldr	r0, [pc, #0]	; (800bc5c <_localeconv_r+0x4>)
 800bc5a:	4770      	bx	lr
 800bc5c:	20000164 	.word	0x20000164

0800bc60 <malloc>:
 800bc60:	4b02      	ldr	r3, [pc, #8]	; (800bc6c <malloc+0xc>)
 800bc62:	4601      	mov	r1, r0
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f000 bd65 	b.w	800c734 <_malloc_r>
 800bc6a:	bf00      	nop
 800bc6c:	2000000c 	.word	0x2000000c

0800bc70 <__ascii_mbtowc>:
 800bc70:	b082      	sub	sp, #8
 800bc72:	b901      	cbnz	r1, 800bc76 <__ascii_mbtowc+0x6>
 800bc74:	a901      	add	r1, sp, #4
 800bc76:	b142      	cbz	r2, 800bc8a <__ascii_mbtowc+0x1a>
 800bc78:	b14b      	cbz	r3, 800bc8e <__ascii_mbtowc+0x1e>
 800bc7a:	7813      	ldrb	r3, [r2, #0]
 800bc7c:	600b      	str	r3, [r1, #0]
 800bc7e:	7812      	ldrb	r2, [r2, #0]
 800bc80:	1e10      	subs	r0, r2, #0
 800bc82:	bf18      	it	ne
 800bc84:	2001      	movne	r0, #1
 800bc86:	b002      	add	sp, #8
 800bc88:	4770      	bx	lr
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	e7fb      	b.n	800bc86 <__ascii_mbtowc+0x16>
 800bc8e:	f06f 0001 	mvn.w	r0, #1
 800bc92:	e7f8      	b.n	800bc86 <__ascii_mbtowc+0x16>

0800bc94 <memchr>:
 800bc94:	4603      	mov	r3, r0
 800bc96:	b510      	push	{r4, lr}
 800bc98:	b2c9      	uxtb	r1, r1
 800bc9a:	4402      	add	r2, r0
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	d101      	bne.n	800bca6 <memchr+0x12>
 800bca2:	2000      	movs	r0, #0
 800bca4:	e003      	b.n	800bcae <memchr+0x1a>
 800bca6:	7804      	ldrb	r4, [r0, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	428c      	cmp	r4, r1
 800bcac:	d1f6      	bne.n	800bc9c <memchr+0x8>
 800bcae:	bd10      	pop	{r4, pc}

0800bcb0 <memcpy>:
 800bcb0:	440a      	add	r2, r1
 800bcb2:	4291      	cmp	r1, r2
 800bcb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcb8:	d100      	bne.n	800bcbc <memcpy+0xc>
 800bcba:	4770      	bx	lr
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc2:	4291      	cmp	r1, r2
 800bcc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc8:	d1f9      	bne.n	800bcbe <memcpy+0xe>
 800bcca:	bd10      	pop	{r4, pc}

0800bccc <_Balloc>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	b976      	cbnz	r6, 800bcf4 <_Balloc+0x28>
 800bcd6:	2010      	movs	r0, #16
 800bcd8:	f7ff ffc2 	bl	800bc60 <malloc>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	6260      	str	r0, [r4, #36]	; 0x24
 800bce0:	b920      	cbnz	r0, 800bcec <_Balloc+0x20>
 800bce2:	2166      	movs	r1, #102	; 0x66
 800bce4:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <_Balloc+0x78>)
 800bce6:	4818      	ldr	r0, [pc, #96]	; (800bd48 <_Balloc+0x7c>)
 800bce8:	f000 ff2c 	bl	800cb44 <__assert_func>
 800bcec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf0:	6006      	str	r6, [r0, #0]
 800bcf2:	60c6      	str	r6, [r0, #12]
 800bcf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcf6:	68f3      	ldr	r3, [r6, #12]
 800bcf8:	b183      	cbz	r3, 800bd1c <_Balloc+0x50>
 800bcfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd02:	b9b8      	cbnz	r0, 800bd34 <_Balloc+0x68>
 800bd04:	2101      	movs	r1, #1
 800bd06:	fa01 f605 	lsl.w	r6, r1, r5
 800bd0a:	1d72      	adds	r2, r6, #5
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	0092      	lsls	r2, r2, #2
 800bd10:	f000 fc94 	bl	800c63c <_calloc_r>
 800bd14:	b160      	cbz	r0, 800bd30 <_Balloc+0x64>
 800bd16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd1a:	e00e      	b.n	800bd3a <_Balloc+0x6e>
 800bd1c:	2221      	movs	r2, #33	; 0x21
 800bd1e:	2104      	movs	r1, #4
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 fc8b 	bl	800c63c <_calloc_r>
 800bd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd28:	60f0      	str	r0, [r6, #12]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e4      	bne.n	800bcfa <_Balloc+0x2e>
 800bd30:	2000      	movs	r0, #0
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	6802      	ldr	r2, [r0, #0]
 800bd36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd40:	e7f7      	b.n	800bd32 <_Balloc+0x66>
 800bd42:	bf00      	nop
 800bd44:	0801f236 	.word	0x0801f236
 800bd48:	0801f378 	.word	0x0801f378

0800bd4c <_Bfree>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd50:	4605      	mov	r5, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	b976      	cbnz	r6, 800bd74 <_Bfree+0x28>
 800bd56:	2010      	movs	r0, #16
 800bd58:	f7ff ff82 	bl	800bc60 <malloc>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	6268      	str	r0, [r5, #36]	; 0x24
 800bd60:	b920      	cbnz	r0, 800bd6c <_Bfree+0x20>
 800bd62:	218a      	movs	r1, #138	; 0x8a
 800bd64:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <_Bfree+0x3c>)
 800bd66:	4809      	ldr	r0, [pc, #36]	; (800bd8c <_Bfree+0x40>)
 800bd68:	f000 feec 	bl	800cb44 <__assert_func>
 800bd6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd70:	6006      	str	r6, [r0, #0]
 800bd72:	60c6      	str	r6, [r0, #12]
 800bd74:	b13c      	cbz	r4, 800bd86 <_Bfree+0x3a>
 800bd76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd78:	6862      	ldr	r2, [r4, #4]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd80:	6021      	str	r1, [r4, #0]
 800bd82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	0801f236 	.word	0x0801f236
 800bd8c:	0801f378 	.word	0x0801f378

0800bd90 <__multadd>:
 800bd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd94:	4607      	mov	r7, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	461e      	mov	r6, r3
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	690d      	ldr	r5, [r1, #16]
 800bd9e:	f101 0c14 	add.w	ip, r1, #20
 800bda2:	f8dc 3000 	ldr.w	r3, [ip]
 800bda6:	3001      	adds	r0, #1
 800bda8:	b299      	uxth	r1, r3
 800bdaa:	fb02 6101 	mla	r1, r2, r1, r6
 800bdae:	0c1e      	lsrs	r6, r3, #16
 800bdb0:	0c0b      	lsrs	r3, r1, #16
 800bdb2:	fb02 3306 	mla	r3, r2, r6, r3
 800bdb6:	b289      	uxth	r1, r1
 800bdb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdbc:	4285      	cmp	r5, r0
 800bdbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdc2:	f84c 1b04 	str.w	r1, [ip], #4
 800bdc6:	dcec      	bgt.n	800bda2 <__multadd+0x12>
 800bdc8:	b30e      	cbz	r6, 800be0e <__multadd+0x7e>
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	dc19      	bgt.n	800be04 <__multadd+0x74>
 800bdd0:	6861      	ldr	r1, [r4, #4]
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	3101      	adds	r1, #1
 800bdd6:	f7ff ff79 	bl	800bccc <_Balloc>
 800bdda:	4680      	mov	r8, r0
 800bddc:	b928      	cbnz	r0, 800bdea <__multadd+0x5a>
 800bdde:	4602      	mov	r2, r0
 800bde0:	21b5      	movs	r1, #181	; 0xb5
 800bde2:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <__multadd+0x84>)
 800bde4:	480c      	ldr	r0, [pc, #48]	; (800be18 <__multadd+0x88>)
 800bde6:	f000 fead 	bl	800cb44 <__assert_func>
 800bdea:	6922      	ldr	r2, [r4, #16]
 800bdec:	f104 010c 	add.w	r1, r4, #12
 800bdf0:	3202      	adds	r2, #2
 800bdf2:	0092      	lsls	r2, r2, #2
 800bdf4:	300c      	adds	r0, #12
 800bdf6:	f7ff ff5b 	bl	800bcb0 <memcpy>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f7ff ffa5 	bl	800bd4c <_Bfree>
 800be02:	4644      	mov	r4, r8
 800be04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be08:	3501      	adds	r5, #1
 800be0a:	615e      	str	r6, [r3, #20]
 800be0c:	6125      	str	r5, [r4, #16]
 800be0e:	4620      	mov	r0, r4
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	0801f2cb 	.word	0x0801f2cb
 800be18:	0801f378 	.word	0x0801f378

0800be1c <__s2b>:
 800be1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be20:	4615      	mov	r5, r2
 800be22:	2209      	movs	r2, #9
 800be24:	461f      	mov	r7, r3
 800be26:	3308      	adds	r3, #8
 800be28:	460c      	mov	r4, r1
 800be2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800be2e:	4606      	mov	r6, r0
 800be30:	2201      	movs	r2, #1
 800be32:	2100      	movs	r1, #0
 800be34:	429a      	cmp	r2, r3
 800be36:	db09      	blt.n	800be4c <__s2b+0x30>
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ff47 	bl	800bccc <_Balloc>
 800be3e:	b940      	cbnz	r0, 800be52 <__s2b+0x36>
 800be40:	4602      	mov	r2, r0
 800be42:	21ce      	movs	r1, #206	; 0xce
 800be44:	4b18      	ldr	r3, [pc, #96]	; (800bea8 <__s2b+0x8c>)
 800be46:	4819      	ldr	r0, [pc, #100]	; (800beac <__s2b+0x90>)
 800be48:	f000 fe7c 	bl	800cb44 <__assert_func>
 800be4c:	0052      	lsls	r2, r2, #1
 800be4e:	3101      	adds	r1, #1
 800be50:	e7f0      	b.n	800be34 <__s2b+0x18>
 800be52:	9b08      	ldr	r3, [sp, #32]
 800be54:	2d09      	cmp	r5, #9
 800be56:	6143      	str	r3, [r0, #20]
 800be58:	f04f 0301 	mov.w	r3, #1
 800be5c:	6103      	str	r3, [r0, #16]
 800be5e:	dd16      	ble.n	800be8e <__s2b+0x72>
 800be60:	f104 0909 	add.w	r9, r4, #9
 800be64:	46c8      	mov	r8, r9
 800be66:	442c      	add	r4, r5
 800be68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be6c:	4601      	mov	r1, r0
 800be6e:	220a      	movs	r2, #10
 800be70:	4630      	mov	r0, r6
 800be72:	3b30      	subs	r3, #48	; 0x30
 800be74:	f7ff ff8c 	bl	800bd90 <__multadd>
 800be78:	45a0      	cmp	r8, r4
 800be7a:	d1f5      	bne.n	800be68 <__s2b+0x4c>
 800be7c:	f1a5 0408 	sub.w	r4, r5, #8
 800be80:	444c      	add	r4, r9
 800be82:	1b2d      	subs	r5, r5, r4
 800be84:	1963      	adds	r3, r4, r5
 800be86:	42bb      	cmp	r3, r7
 800be88:	db04      	blt.n	800be94 <__s2b+0x78>
 800be8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8e:	2509      	movs	r5, #9
 800be90:	340a      	adds	r4, #10
 800be92:	e7f6      	b.n	800be82 <__s2b+0x66>
 800be94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be98:	4601      	mov	r1, r0
 800be9a:	220a      	movs	r2, #10
 800be9c:	4630      	mov	r0, r6
 800be9e:	3b30      	subs	r3, #48	; 0x30
 800bea0:	f7ff ff76 	bl	800bd90 <__multadd>
 800bea4:	e7ee      	b.n	800be84 <__s2b+0x68>
 800bea6:	bf00      	nop
 800bea8:	0801f2cb 	.word	0x0801f2cb
 800beac:	0801f378 	.word	0x0801f378

0800beb0 <__hi0bits>:
 800beb0:	0c02      	lsrs	r2, r0, #16
 800beb2:	0412      	lsls	r2, r2, #16
 800beb4:	4603      	mov	r3, r0
 800beb6:	b9ca      	cbnz	r2, 800beec <__hi0bits+0x3c>
 800beb8:	0403      	lsls	r3, r0, #16
 800beba:	2010      	movs	r0, #16
 800bebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bec0:	bf04      	itt	eq
 800bec2:	021b      	lsleq	r3, r3, #8
 800bec4:	3008      	addeq	r0, #8
 800bec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800beca:	bf04      	itt	eq
 800becc:	011b      	lsleq	r3, r3, #4
 800bece:	3004      	addeq	r0, #4
 800bed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bed4:	bf04      	itt	eq
 800bed6:	009b      	lsleq	r3, r3, #2
 800bed8:	3002      	addeq	r0, #2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	db05      	blt.n	800beea <__hi0bits+0x3a>
 800bede:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bee2:	f100 0001 	add.w	r0, r0, #1
 800bee6:	bf08      	it	eq
 800bee8:	2020      	moveq	r0, #32
 800beea:	4770      	bx	lr
 800beec:	2000      	movs	r0, #0
 800beee:	e7e5      	b.n	800bebc <__hi0bits+0xc>

0800bef0 <__lo0bits>:
 800bef0:	6803      	ldr	r3, [r0, #0]
 800bef2:	4602      	mov	r2, r0
 800bef4:	f013 0007 	ands.w	r0, r3, #7
 800bef8:	d00b      	beq.n	800bf12 <__lo0bits+0x22>
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	d421      	bmi.n	800bf42 <__lo0bits+0x52>
 800befe:	0798      	lsls	r0, r3, #30
 800bf00:	bf49      	itett	mi
 800bf02:	085b      	lsrmi	r3, r3, #1
 800bf04:	089b      	lsrpl	r3, r3, #2
 800bf06:	2001      	movmi	r0, #1
 800bf08:	6013      	strmi	r3, [r2, #0]
 800bf0a:	bf5c      	itt	pl
 800bf0c:	2002      	movpl	r0, #2
 800bf0e:	6013      	strpl	r3, [r2, #0]
 800bf10:	4770      	bx	lr
 800bf12:	b299      	uxth	r1, r3
 800bf14:	b909      	cbnz	r1, 800bf1a <__lo0bits+0x2a>
 800bf16:	2010      	movs	r0, #16
 800bf18:	0c1b      	lsrs	r3, r3, #16
 800bf1a:	b2d9      	uxtb	r1, r3
 800bf1c:	b909      	cbnz	r1, 800bf22 <__lo0bits+0x32>
 800bf1e:	3008      	adds	r0, #8
 800bf20:	0a1b      	lsrs	r3, r3, #8
 800bf22:	0719      	lsls	r1, r3, #28
 800bf24:	bf04      	itt	eq
 800bf26:	091b      	lsreq	r3, r3, #4
 800bf28:	3004      	addeq	r0, #4
 800bf2a:	0799      	lsls	r1, r3, #30
 800bf2c:	bf04      	itt	eq
 800bf2e:	089b      	lsreq	r3, r3, #2
 800bf30:	3002      	addeq	r0, #2
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d403      	bmi.n	800bf3e <__lo0bits+0x4e>
 800bf36:	085b      	lsrs	r3, r3, #1
 800bf38:	f100 0001 	add.w	r0, r0, #1
 800bf3c:	d003      	beq.n	800bf46 <__lo0bits+0x56>
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	4770      	bx	lr
 800bf42:	2000      	movs	r0, #0
 800bf44:	4770      	bx	lr
 800bf46:	2020      	movs	r0, #32
 800bf48:	4770      	bx	lr
	...

0800bf4c <__i2b>:
 800bf4c:	b510      	push	{r4, lr}
 800bf4e:	460c      	mov	r4, r1
 800bf50:	2101      	movs	r1, #1
 800bf52:	f7ff febb 	bl	800bccc <_Balloc>
 800bf56:	4602      	mov	r2, r0
 800bf58:	b928      	cbnz	r0, 800bf66 <__i2b+0x1a>
 800bf5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <__i2b+0x24>)
 800bf60:	4804      	ldr	r0, [pc, #16]	; (800bf74 <__i2b+0x28>)
 800bf62:	f000 fdef 	bl	800cb44 <__assert_func>
 800bf66:	2301      	movs	r3, #1
 800bf68:	6144      	str	r4, [r0, #20]
 800bf6a:	6103      	str	r3, [r0, #16]
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	bf00      	nop
 800bf70:	0801f2cb 	.word	0x0801f2cb
 800bf74:	0801f378 	.word	0x0801f378

0800bf78 <__multiply>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	4691      	mov	r9, r2
 800bf7e:	690a      	ldr	r2, [r1, #16]
 800bf80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf84:	460c      	mov	r4, r1
 800bf86:	429a      	cmp	r2, r3
 800bf88:	bfbe      	ittt	lt
 800bf8a:	460b      	movlt	r3, r1
 800bf8c:	464c      	movlt	r4, r9
 800bf8e:	4699      	movlt	r9, r3
 800bf90:	6927      	ldr	r7, [r4, #16]
 800bf92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	6861      	ldr	r1, [r4, #4]
 800bf9a:	eb07 060a 	add.w	r6, r7, sl
 800bf9e:	42b3      	cmp	r3, r6
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	bfb8      	it	lt
 800bfa4:	3101      	addlt	r1, #1
 800bfa6:	f7ff fe91 	bl	800bccc <_Balloc>
 800bfaa:	b930      	cbnz	r0, 800bfba <__multiply+0x42>
 800bfac:	4602      	mov	r2, r0
 800bfae:	f240 115d 	movw	r1, #349	; 0x15d
 800bfb2:	4b43      	ldr	r3, [pc, #268]	; (800c0c0 <__multiply+0x148>)
 800bfb4:	4843      	ldr	r0, [pc, #268]	; (800c0c4 <__multiply+0x14c>)
 800bfb6:	f000 fdc5 	bl	800cb44 <__assert_func>
 800bfba:	f100 0514 	add.w	r5, r0, #20
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfc6:	4543      	cmp	r3, r8
 800bfc8:	d321      	bcc.n	800c00e <__multiply+0x96>
 800bfca:	f104 0314 	add.w	r3, r4, #20
 800bfce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bfd2:	f109 0314 	add.w	r3, r9, #20
 800bfd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bfda:	9202      	str	r2, [sp, #8]
 800bfdc:	1b3a      	subs	r2, r7, r4
 800bfde:	3a15      	subs	r2, #21
 800bfe0:	f022 0203 	bic.w	r2, r2, #3
 800bfe4:	3204      	adds	r2, #4
 800bfe6:	f104 0115 	add.w	r1, r4, #21
 800bfea:	428f      	cmp	r7, r1
 800bfec:	bf38      	it	cc
 800bfee:	2204      	movcc	r2, #4
 800bff0:	9201      	str	r2, [sp, #4]
 800bff2:	9a02      	ldr	r2, [sp, #8]
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d80c      	bhi.n	800c014 <__multiply+0x9c>
 800bffa:	2e00      	cmp	r6, #0
 800bffc:	dd03      	ble.n	800c006 <__multiply+0x8e>
 800bffe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c002:	2b00      	cmp	r3, #0
 800c004:	d059      	beq.n	800c0ba <__multiply+0x142>
 800c006:	6106      	str	r6, [r0, #16]
 800c008:	b005      	add	sp, #20
 800c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00e:	f843 2b04 	str.w	r2, [r3], #4
 800c012:	e7d8      	b.n	800bfc6 <__multiply+0x4e>
 800c014:	f8b3 a000 	ldrh.w	sl, [r3]
 800c018:	f1ba 0f00 	cmp.w	sl, #0
 800c01c:	d023      	beq.n	800c066 <__multiply+0xee>
 800c01e:	46a9      	mov	r9, r5
 800c020:	f04f 0c00 	mov.w	ip, #0
 800c024:	f104 0e14 	add.w	lr, r4, #20
 800c028:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c02c:	f8d9 1000 	ldr.w	r1, [r9]
 800c030:	fa1f fb82 	uxth.w	fp, r2
 800c034:	b289      	uxth	r1, r1
 800c036:	fb0a 110b 	mla	r1, sl, fp, r1
 800c03a:	4461      	add	r1, ip
 800c03c:	f8d9 c000 	ldr.w	ip, [r9]
 800c040:	0c12      	lsrs	r2, r2, #16
 800c042:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c046:	fb0a c202 	mla	r2, sl, r2, ip
 800c04a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c04e:	b289      	uxth	r1, r1
 800c050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c054:	4577      	cmp	r7, lr
 800c056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c05a:	f849 1b04 	str.w	r1, [r9], #4
 800c05e:	d8e3      	bhi.n	800c028 <__multiply+0xb0>
 800c060:	9a01      	ldr	r2, [sp, #4]
 800c062:	f845 c002 	str.w	ip, [r5, r2]
 800c066:	9a03      	ldr	r2, [sp, #12]
 800c068:	3304      	adds	r3, #4
 800c06a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c06e:	f1b9 0f00 	cmp.w	r9, #0
 800c072:	d020      	beq.n	800c0b6 <__multiply+0x13e>
 800c074:	46ae      	mov	lr, r5
 800c076:	f04f 0a00 	mov.w	sl, #0
 800c07a:	6829      	ldr	r1, [r5, #0]
 800c07c:	f104 0c14 	add.w	ip, r4, #20
 800c080:	f8bc b000 	ldrh.w	fp, [ip]
 800c084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c088:	b289      	uxth	r1, r1
 800c08a:	fb09 220b 	mla	r2, r9, fp, r2
 800c08e:	4492      	add	sl, r2
 800c090:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c094:	f84e 1b04 	str.w	r1, [lr], #4
 800c098:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c09c:	f8be 1000 	ldrh.w	r1, [lr]
 800c0a0:	0c12      	lsrs	r2, r2, #16
 800c0a2:	fb09 1102 	mla	r1, r9, r2, r1
 800c0a6:	4567      	cmp	r7, ip
 800c0a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0b0:	d8e6      	bhi.n	800c080 <__multiply+0x108>
 800c0b2:	9a01      	ldr	r2, [sp, #4]
 800c0b4:	50a9      	str	r1, [r5, r2]
 800c0b6:	3504      	adds	r5, #4
 800c0b8:	e79b      	b.n	800bff2 <__multiply+0x7a>
 800c0ba:	3e01      	subs	r6, #1
 800c0bc:	e79d      	b.n	800bffa <__multiply+0x82>
 800c0be:	bf00      	nop
 800c0c0:	0801f2cb 	.word	0x0801f2cb
 800c0c4:	0801f378 	.word	0x0801f378

0800c0c8 <__pow5mult>:
 800c0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0cc:	4615      	mov	r5, r2
 800c0ce:	f012 0203 	ands.w	r2, r2, #3
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	460f      	mov	r7, r1
 800c0d6:	d007      	beq.n	800c0e8 <__pow5mult+0x20>
 800c0d8:	4c25      	ldr	r4, [pc, #148]	; (800c170 <__pow5mult+0xa8>)
 800c0da:	3a01      	subs	r2, #1
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0e2:	f7ff fe55 	bl	800bd90 <__multadd>
 800c0e6:	4607      	mov	r7, r0
 800c0e8:	10ad      	asrs	r5, r5, #2
 800c0ea:	d03d      	beq.n	800c168 <__pow5mult+0xa0>
 800c0ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0ee:	b97c      	cbnz	r4, 800c110 <__pow5mult+0x48>
 800c0f0:	2010      	movs	r0, #16
 800c0f2:	f7ff fdb5 	bl	800bc60 <malloc>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c0fa:	b928      	cbnz	r0, 800c108 <__pow5mult+0x40>
 800c0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c100:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <__pow5mult+0xac>)
 800c102:	481d      	ldr	r0, [pc, #116]	; (800c178 <__pow5mult+0xb0>)
 800c104:	f000 fd1e 	bl	800cb44 <__assert_func>
 800c108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c10c:	6004      	str	r4, [r0, #0]
 800c10e:	60c4      	str	r4, [r0, #12]
 800c110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c118:	b94c      	cbnz	r4, 800c12e <__pow5mult+0x66>
 800c11a:	f240 2171 	movw	r1, #625	; 0x271
 800c11e:	4630      	mov	r0, r6
 800c120:	f7ff ff14 	bl	800bf4c <__i2b>
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	f8c8 0008 	str.w	r0, [r8, #8]
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	f04f 0900 	mov.w	r9, #0
 800c132:	07eb      	lsls	r3, r5, #31
 800c134:	d50a      	bpl.n	800c14c <__pow5mult+0x84>
 800c136:	4639      	mov	r1, r7
 800c138:	4622      	mov	r2, r4
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7ff ff1c 	bl	800bf78 <__multiply>
 800c140:	4680      	mov	r8, r0
 800c142:	4639      	mov	r1, r7
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff fe01 	bl	800bd4c <_Bfree>
 800c14a:	4647      	mov	r7, r8
 800c14c:	106d      	asrs	r5, r5, #1
 800c14e:	d00b      	beq.n	800c168 <__pow5mult+0xa0>
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	b938      	cbnz	r0, 800c164 <__pow5mult+0x9c>
 800c154:	4622      	mov	r2, r4
 800c156:	4621      	mov	r1, r4
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff ff0d 	bl	800bf78 <__multiply>
 800c15e:	6020      	str	r0, [r4, #0]
 800c160:	f8c0 9000 	str.w	r9, [r0]
 800c164:	4604      	mov	r4, r0
 800c166:	e7e4      	b.n	800c132 <__pow5mult+0x6a>
 800c168:	4638      	mov	r0, r7
 800c16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16e:	bf00      	nop
 800c170:	0801f4e8 	.word	0x0801f4e8
 800c174:	0801f236 	.word	0x0801f236
 800c178:	0801f378 	.word	0x0801f378

0800c17c <__lshift>:
 800c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	460c      	mov	r4, r1
 800c182:	4607      	mov	r7, r0
 800c184:	4691      	mov	r9, r2
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	6849      	ldr	r1, [r1, #4]
 800c18a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c194:	f108 0601 	add.w	r6, r8, #1
 800c198:	42b3      	cmp	r3, r6
 800c19a:	db0b      	blt.n	800c1b4 <__lshift+0x38>
 800c19c:	4638      	mov	r0, r7
 800c19e:	f7ff fd95 	bl	800bccc <_Balloc>
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	b948      	cbnz	r0, 800c1ba <__lshift+0x3e>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1ac:	4b29      	ldr	r3, [pc, #164]	; (800c254 <__lshift+0xd8>)
 800c1ae:	482a      	ldr	r0, [pc, #168]	; (800c258 <__lshift+0xdc>)
 800c1b0:	f000 fcc8 	bl	800cb44 <__assert_func>
 800c1b4:	3101      	adds	r1, #1
 800c1b6:	005b      	lsls	r3, r3, #1
 800c1b8:	e7ee      	b.n	800c198 <__lshift+0x1c>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f100 0114 	add.w	r1, r0, #20
 800c1c0:	f100 0210 	add.w	r2, r0, #16
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	4553      	cmp	r3, sl
 800c1c8:	db37      	blt.n	800c23a <__lshift+0xbe>
 800c1ca:	6920      	ldr	r0, [r4, #16]
 800c1cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1d0:	f104 0314 	add.w	r3, r4, #20
 800c1d4:	f019 091f 	ands.w	r9, r9, #31
 800c1d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c1e0:	d02f      	beq.n	800c242 <__lshift+0xc6>
 800c1e2:	468a      	mov	sl, r1
 800c1e4:	f04f 0c00 	mov.w	ip, #0
 800c1e8:	f1c9 0e20 	rsb	lr, r9, #32
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	fa02 f209 	lsl.w	r2, r2, r9
 800c1f2:	ea42 020c 	orr.w	r2, r2, ip
 800c1f6:	f84a 2b04 	str.w	r2, [sl], #4
 800c1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fe:	4298      	cmp	r0, r3
 800c200:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c204:	d8f2      	bhi.n	800c1ec <__lshift+0x70>
 800c206:	1b03      	subs	r3, r0, r4
 800c208:	3b15      	subs	r3, #21
 800c20a:	f023 0303 	bic.w	r3, r3, #3
 800c20e:	3304      	adds	r3, #4
 800c210:	f104 0215 	add.w	r2, r4, #21
 800c214:	4290      	cmp	r0, r2
 800c216:	bf38      	it	cc
 800c218:	2304      	movcc	r3, #4
 800c21a:	f841 c003 	str.w	ip, [r1, r3]
 800c21e:	f1bc 0f00 	cmp.w	ip, #0
 800c222:	d001      	beq.n	800c228 <__lshift+0xac>
 800c224:	f108 0602 	add.w	r6, r8, #2
 800c228:	3e01      	subs	r6, #1
 800c22a:	4638      	mov	r0, r7
 800c22c:	4621      	mov	r1, r4
 800c22e:	612e      	str	r6, [r5, #16]
 800c230:	f7ff fd8c 	bl	800bd4c <_Bfree>
 800c234:	4628      	mov	r0, r5
 800c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c23e:	3301      	adds	r3, #1
 800c240:	e7c1      	b.n	800c1c6 <__lshift+0x4a>
 800c242:	3904      	subs	r1, #4
 800c244:	f853 2b04 	ldr.w	r2, [r3], #4
 800c248:	4298      	cmp	r0, r3
 800c24a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c24e:	d8f9      	bhi.n	800c244 <__lshift+0xc8>
 800c250:	e7ea      	b.n	800c228 <__lshift+0xac>
 800c252:	bf00      	nop
 800c254:	0801f2cb 	.word	0x0801f2cb
 800c258:	0801f378 	.word	0x0801f378

0800c25c <__mcmp>:
 800c25c:	4603      	mov	r3, r0
 800c25e:	690a      	ldr	r2, [r1, #16]
 800c260:	6900      	ldr	r0, [r0, #16]
 800c262:	b530      	push	{r4, r5, lr}
 800c264:	1a80      	subs	r0, r0, r2
 800c266:	d10d      	bne.n	800c284 <__mcmp+0x28>
 800c268:	3314      	adds	r3, #20
 800c26a:	3114      	adds	r1, #20
 800c26c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c27c:	4295      	cmp	r5, r2
 800c27e:	d002      	beq.n	800c286 <__mcmp+0x2a>
 800c280:	d304      	bcc.n	800c28c <__mcmp+0x30>
 800c282:	2001      	movs	r0, #1
 800c284:	bd30      	pop	{r4, r5, pc}
 800c286:	42a3      	cmp	r3, r4
 800c288:	d3f4      	bcc.n	800c274 <__mcmp+0x18>
 800c28a:	e7fb      	b.n	800c284 <__mcmp+0x28>
 800c28c:	f04f 30ff 	mov.w	r0, #4294967295
 800c290:	e7f8      	b.n	800c284 <__mcmp+0x28>
	...

0800c294 <__mdiff>:
 800c294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	460d      	mov	r5, r1
 800c29a:	4607      	mov	r7, r0
 800c29c:	4611      	mov	r1, r2
 800c29e:	4628      	mov	r0, r5
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	f7ff ffdb 	bl	800c25c <__mcmp>
 800c2a6:	1e06      	subs	r6, r0, #0
 800c2a8:	d111      	bne.n	800c2ce <__mdiff+0x3a>
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7ff fd0d 	bl	800bccc <_Balloc>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	b928      	cbnz	r0, 800c2c2 <__mdiff+0x2e>
 800c2b6:	f240 2132 	movw	r1, #562	; 0x232
 800c2ba:	4b3a      	ldr	r3, [pc, #232]	; (800c3a4 <__mdiff+0x110>)
 800c2bc:	483a      	ldr	r0, [pc, #232]	; (800c3a8 <__mdiff+0x114>)
 800c2be:	f000 fc41 	bl	800cb44 <__assert_func>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	bfa4      	itt	ge
 800c2d0:	4623      	movge	r3, r4
 800c2d2:	462c      	movge	r4, r5
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	6861      	ldr	r1, [r4, #4]
 800c2d8:	bfa6      	itte	ge
 800c2da:	461d      	movge	r5, r3
 800c2dc:	2600      	movge	r6, #0
 800c2de:	2601      	movlt	r6, #1
 800c2e0:	f7ff fcf4 	bl	800bccc <_Balloc>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	b918      	cbnz	r0, 800c2f0 <__mdiff+0x5c>
 800c2e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2ec:	4b2d      	ldr	r3, [pc, #180]	; (800c3a4 <__mdiff+0x110>)
 800c2ee:	e7e5      	b.n	800c2bc <__mdiff+0x28>
 800c2f0:	f102 0814 	add.w	r8, r2, #20
 800c2f4:	46c2      	mov	sl, r8
 800c2f6:	f04f 0c00 	mov.w	ip, #0
 800c2fa:	6927      	ldr	r7, [r4, #16]
 800c2fc:	60c6      	str	r6, [r0, #12]
 800c2fe:	692e      	ldr	r6, [r5, #16]
 800c300:	f104 0014 	add.w	r0, r4, #20
 800c304:	f105 0914 	add.w	r9, r5, #20
 800c308:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c30c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c310:	3410      	adds	r4, #16
 800c312:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c316:	f859 3b04 	ldr.w	r3, [r9], #4
 800c31a:	fa1f f18b 	uxth.w	r1, fp
 800c31e:	448c      	add	ip, r1
 800c320:	b299      	uxth	r1, r3
 800c322:	0c1b      	lsrs	r3, r3, #16
 800c324:	ebac 0101 	sub.w	r1, ip, r1
 800c328:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c32c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c330:	b289      	uxth	r1, r1
 800c332:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c336:	454e      	cmp	r6, r9
 800c338:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c33c:	f84a 3b04 	str.w	r3, [sl], #4
 800c340:	d8e7      	bhi.n	800c312 <__mdiff+0x7e>
 800c342:	1b73      	subs	r3, r6, r5
 800c344:	3b15      	subs	r3, #21
 800c346:	f023 0303 	bic.w	r3, r3, #3
 800c34a:	3515      	adds	r5, #21
 800c34c:	3304      	adds	r3, #4
 800c34e:	42ae      	cmp	r6, r5
 800c350:	bf38      	it	cc
 800c352:	2304      	movcc	r3, #4
 800c354:	4418      	add	r0, r3
 800c356:	4443      	add	r3, r8
 800c358:	461e      	mov	r6, r3
 800c35a:	4605      	mov	r5, r0
 800c35c:	4575      	cmp	r5, lr
 800c35e:	d30e      	bcc.n	800c37e <__mdiff+0xea>
 800c360:	f10e 0103 	add.w	r1, lr, #3
 800c364:	1a09      	subs	r1, r1, r0
 800c366:	f021 0103 	bic.w	r1, r1, #3
 800c36a:	3803      	subs	r0, #3
 800c36c:	4586      	cmp	lr, r0
 800c36e:	bf38      	it	cc
 800c370:	2100      	movcc	r1, #0
 800c372:	4419      	add	r1, r3
 800c374:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c378:	b18b      	cbz	r3, 800c39e <__mdiff+0x10a>
 800c37a:	6117      	str	r7, [r2, #16]
 800c37c:	e7a4      	b.n	800c2c8 <__mdiff+0x34>
 800c37e:	f855 8b04 	ldr.w	r8, [r5], #4
 800c382:	fa1f f188 	uxth.w	r1, r8
 800c386:	4461      	add	r1, ip
 800c388:	140c      	asrs	r4, r1, #16
 800c38a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c38e:	b289      	uxth	r1, r1
 800c390:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c394:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c398:	f846 1b04 	str.w	r1, [r6], #4
 800c39c:	e7de      	b.n	800c35c <__mdiff+0xc8>
 800c39e:	3f01      	subs	r7, #1
 800c3a0:	e7e8      	b.n	800c374 <__mdiff+0xe0>
 800c3a2:	bf00      	nop
 800c3a4:	0801f2cb 	.word	0x0801f2cb
 800c3a8:	0801f378 	.word	0x0801f378

0800c3ac <__ulp>:
 800c3ac:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <__ulp+0x48>)
 800c3ae:	400b      	ands	r3, r1
 800c3b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd02      	ble.n	800c3be <__ulp+0x12>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4770      	bx	lr
 800c3be:	425b      	negs	r3, r3
 800c3c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f04f 0100 	mov.w	r1, #0
 800c3cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3d0:	da04      	bge.n	800c3dc <__ulp+0x30>
 800c3d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3d6:	fa43 f102 	asr.w	r1, r3, r2
 800c3da:	4770      	bx	lr
 800c3dc:	f1a2 0314 	sub.w	r3, r2, #20
 800c3e0:	2b1e      	cmp	r3, #30
 800c3e2:	bfd6      	itet	le
 800c3e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c3e8:	2301      	movgt	r3, #1
 800c3ea:	fa22 f303 	lsrle.w	r3, r2, r3
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	7ff00000 	.word	0x7ff00000

0800c3f8 <__b2d>:
 800c3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3fc:	6907      	ldr	r7, [r0, #16]
 800c3fe:	f100 0914 	add.w	r9, r0, #20
 800c402:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c406:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c40a:	f1a7 0804 	sub.w	r8, r7, #4
 800c40e:	4630      	mov	r0, r6
 800c410:	f7ff fd4e 	bl	800beb0 <__hi0bits>
 800c414:	f1c0 0320 	rsb	r3, r0, #32
 800c418:	280a      	cmp	r0, #10
 800c41a:	600b      	str	r3, [r1, #0]
 800c41c:	491f      	ldr	r1, [pc, #124]	; (800c49c <__b2d+0xa4>)
 800c41e:	dc17      	bgt.n	800c450 <__b2d+0x58>
 800c420:	45c1      	cmp	r9, r8
 800c422:	bf28      	it	cs
 800c424:	2200      	movcs	r2, #0
 800c426:	f1c0 0c0b 	rsb	ip, r0, #11
 800c42a:	fa26 f30c 	lsr.w	r3, r6, ip
 800c42e:	bf38      	it	cc
 800c430:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c434:	ea43 0501 	orr.w	r5, r3, r1
 800c438:	f100 0315 	add.w	r3, r0, #21
 800c43c:	fa06 f303 	lsl.w	r3, r6, r3
 800c440:	fa22 f20c 	lsr.w	r2, r2, ip
 800c444:	ea43 0402 	orr.w	r4, r3, r2
 800c448:	4620      	mov	r0, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c450:	45c1      	cmp	r9, r8
 800c452:	bf2e      	itee	cs
 800c454:	2200      	movcs	r2, #0
 800c456:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c45a:	f1a7 0808 	subcc.w	r8, r7, #8
 800c45e:	f1b0 030b 	subs.w	r3, r0, #11
 800c462:	d016      	beq.n	800c492 <__b2d+0x9a>
 800c464:	f1c3 0720 	rsb	r7, r3, #32
 800c468:	fa22 f107 	lsr.w	r1, r2, r7
 800c46c:	45c8      	cmp	r8, r9
 800c46e:	fa06 f603 	lsl.w	r6, r6, r3
 800c472:	ea46 0601 	orr.w	r6, r6, r1
 800c476:	bf94      	ite	ls
 800c478:	2100      	movls	r1, #0
 800c47a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c47e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c482:	fa02 f003 	lsl.w	r0, r2, r3
 800c486:	40f9      	lsrs	r1, r7
 800c488:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c48c:	ea40 0401 	orr.w	r4, r0, r1
 800c490:	e7da      	b.n	800c448 <__b2d+0x50>
 800c492:	4614      	mov	r4, r2
 800c494:	ea46 0501 	orr.w	r5, r6, r1
 800c498:	e7d6      	b.n	800c448 <__b2d+0x50>
 800c49a:	bf00      	nop
 800c49c:	3ff00000 	.word	0x3ff00000

0800c4a0 <__d2b>:
 800c4a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c4aa:	4690      	mov	r8, r2
 800c4ac:	461d      	mov	r5, r3
 800c4ae:	f7ff fc0d 	bl	800bccc <_Balloc>
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	b930      	cbnz	r0, 800c4c4 <__d2b+0x24>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	f240 310a 	movw	r1, #778	; 0x30a
 800c4bc:	4b24      	ldr	r3, [pc, #144]	; (800c550 <__d2b+0xb0>)
 800c4be:	4825      	ldr	r0, [pc, #148]	; (800c554 <__d2b+0xb4>)
 800c4c0:	f000 fb40 	bl	800cb44 <__assert_func>
 800c4c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c4c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c4cc:	bb2d      	cbnz	r5, 800c51a <__d2b+0x7a>
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c4d4:	d026      	beq.n	800c524 <__d2b+0x84>
 800c4d6:	4668      	mov	r0, sp
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	f7ff fd09 	bl	800bef0 <__lo0bits>
 800c4de:	9900      	ldr	r1, [sp, #0]
 800c4e0:	b1f0      	cbz	r0, 800c520 <__d2b+0x80>
 800c4e2:	9a01      	ldr	r2, [sp, #4]
 800c4e4:	f1c0 0320 	rsb	r3, r0, #32
 800c4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ec:	430b      	orrs	r3, r1
 800c4ee:	40c2      	lsrs	r2, r0
 800c4f0:	6163      	str	r3, [r4, #20]
 800c4f2:	9201      	str	r2, [sp, #4]
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bf14      	ite	ne
 800c4fa:	2102      	movne	r1, #2
 800c4fc:	2101      	moveq	r1, #1
 800c4fe:	61a3      	str	r3, [r4, #24]
 800c500:	6121      	str	r1, [r4, #16]
 800c502:	b1c5      	cbz	r5, 800c536 <__d2b+0x96>
 800c504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c508:	4405      	add	r5, r0
 800c50a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c50e:	603d      	str	r5, [r7, #0]
 800c510:	6030      	str	r0, [r6, #0]
 800c512:	4620      	mov	r0, r4
 800c514:	b002      	add	sp, #8
 800c516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c51e:	e7d6      	b.n	800c4ce <__d2b+0x2e>
 800c520:	6161      	str	r1, [r4, #20]
 800c522:	e7e7      	b.n	800c4f4 <__d2b+0x54>
 800c524:	a801      	add	r0, sp, #4
 800c526:	f7ff fce3 	bl	800bef0 <__lo0bits>
 800c52a:	2101      	movs	r1, #1
 800c52c:	9b01      	ldr	r3, [sp, #4]
 800c52e:	6121      	str	r1, [r4, #16]
 800c530:	6163      	str	r3, [r4, #20]
 800c532:	3020      	adds	r0, #32
 800c534:	e7e5      	b.n	800c502 <__d2b+0x62>
 800c536:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c53a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c53e:	6038      	str	r0, [r7, #0]
 800c540:	6918      	ldr	r0, [r3, #16]
 800c542:	f7ff fcb5 	bl	800beb0 <__hi0bits>
 800c546:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c54a:	6031      	str	r1, [r6, #0]
 800c54c:	e7e1      	b.n	800c512 <__d2b+0x72>
 800c54e:	bf00      	nop
 800c550:	0801f2cb 	.word	0x0801f2cb
 800c554:	0801f378 	.word	0x0801f378

0800c558 <__ratio>:
 800c558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4688      	mov	r8, r1
 800c55e:	4669      	mov	r1, sp
 800c560:	4681      	mov	r9, r0
 800c562:	f7ff ff49 	bl	800c3f8 <__b2d>
 800c566:	460f      	mov	r7, r1
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	4640      	mov	r0, r8
 800c56e:	a901      	add	r1, sp, #4
 800c570:	f7ff ff42 	bl	800c3f8 <__b2d>
 800c574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c578:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c57c:	468b      	mov	fp, r1
 800c57e:	eba3 0c02 	sub.w	ip, r3, r2
 800c582:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfd5      	itete	le
 800c590:	460a      	movle	r2, r1
 800c592:	462a      	movgt	r2, r5
 800c594:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c598:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c59c:	bfd8      	it	le
 800c59e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7fa f9e1 	bl	8006970 <__aeabi_ddiv>
 800c5ae:	b003      	add	sp, #12
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5b4 <__copybits>:
 800c5b4:	3901      	subs	r1, #1
 800c5b6:	b570      	push	{r4, r5, r6, lr}
 800c5b8:	1149      	asrs	r1, r1, #5
 800c5ba:	6914      	ldr	r4, [r2, #16]
 800c5bc:	3101      	adds	r1, #1
 800c5be:	f102 0314 	add.w	r3, r2, #20
 800c5c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5ca:	1f05      	subs	r5, r0, #4
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d30c      	bcc.n	800c5ea <__copybits+0x36>
 800c5d0:	1aa3      	subs	r3, r4, r2
 800c5d2:	3b11      	subs	r3, #17
 800c5d4:	f023 0303 	bic.w	r3, r3, #3
 800c5d8:	3211      	adds	r2, #17
 800c5da:	42a2      	cmp	r2, r4
 800c5dc:	bf88      	it	hi
 800c5de:	2300      	movhi	r3, #0
 800c5e0:	4418      	add	r0, r3
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	4288      	cmp	r0, r1
 800c5e6:	d305      	bcc.n	800c5f4 <__copybits+0x40>
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800c5f2:	e7eb      	b.n	800c5cc <__copybits+0x18>
 800c5f4:	f840 3b04 	str.w	r3, [r0], #4
 800c5f8:	e7f4      	b.n	800c5e4 <__copybits+0x30>

0800c5fa <__any_on>:
 800c5fa:	f100 0214 	add.w	r2, r0, #20
 800c5fe:	6900      	ldr	r0, [r0, #16]
 800c600:	114b      	asrs	r3, r1, #5
 800c602:	4298      	cmp	r0, r3
 800c604:	b510      	push	{r4, lr}
 800c606:	db11      	blt.n	800c62c <__any_on+0x32>
 800c608:	dd0a      	ble.n	800c620 <__any_on+0x26>
 800c60a:	f011 011f 	ands.w	r1, r1, #31
 800c60e:	d007      	beq.n	800c620 <__any_on+0x26>
 800c610:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c614:	fa24 f001 	lsr.w	r0, r4, r1
 800c618:	fa00 f101 	lsl.w	r1, r0, r1
 800c61c:	428c      	cmp	r4, r1
 800c61e:	d10b      	bne.n	800c638 <__any_on+0x3e>
 800c620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c624:	4293      	cmp	r3, r2
 800c626:	d803      	bhi.n	800c630 <__any_on+0x36>
 800c628:	2000      	movs	r0, #0
 800c62a:	bd10      	pop	{r4, pc}
 800c62c:	4603      	mov	r3, r0
 800c62e:	e7f7      	b.n	800c620 <__any_on+0x26>
 800c630:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c634:	2900      	cmp	r1, #0
 800c636:	d0f5      	beq.n	800c624 <__any_on+0x2a>
 800c638:	2001      	movs	r0, #1
 800c63a:	e7f6      	b.n	800c62a <__any_on+0x30>

0800c63c <_calloc_r>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	fba1 5402 	umull	r5, r4, r1, r2
 800c642:	b934      	cbnz	r4, 800c652 <_calloc_r+0x16>
 800c644:	4629      	mov	r1, r5
 800c646:	f000 f875 	bl	800c734 <_malloc_r>
 800c64a:	4606      	mov	r6, r0
 800c64c:	b928      	cbnz	r0, 800c65a <_calloc_r+0x1e>
 800c64e:	4630      	mov	r0, r6
 800c650:	bd70      	pop	{r4, r5, r6, pc}
 800c652:	220c      	movs	r2, #12
 800c654:	2600      	movs	r6, #0
 800c656:	6002      	str	r2, [r0, #0]
 800c658:	e7f9      	b.n	800c64e <_calloc_r+0x12>
 800c65a:	462a      	mov	r2, r5
 800c65c:	4621      	mov	r1, r4
 800c65e:	f7fc fbe7 	bl	8008e30 <memset>
 800c662:	e7f4      	b.n	800c64e <_calloc_r+0x12>

0800c664 <_free_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4605      	mov	r5, r0
 800c668:	2900      	cmp	r1, #0
 800c66a:	d040      	beq.n	800c6ee <_free_r+0x8a>
 800c66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c670:	1f0c      	subs	r4, r1, #4
 800c672:	2b00      	cmp	r3, #0
 800c674:	bfb8      	it	lt
 800c676:	18e4      	addlt	r4, r4, r3
 800c678:	f000 faae 	bl	800cbd8 <__malloc_lock>
 800c67c:	4a1c      	ldr	r2, [pc, #112]	; (800c6f0 <_free_r+0x8c>)
 800c67e:	6813      	ldr	r3, [r2, #0]
 800c680:	b933      	cbnz	r3, 800c690 <_free_r+0x2c>
 800c682:	6063      	str	r3, [r4, #4]
 800c684:	6014      	str	r4, [r2, #0]
 800c686:	4628      	mov	r0, r5
 800c688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68c:	f000 baaa 	b.w	800cbe4 <__malloc_unlock>
 800c690:	42a3      	cmp	r3, r4
 800c692:	d908      	bls.n	800c6a6 <_free_r+0x42>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	1821      	adds	r1, r4, r0
 800c698:	428b      	cmp	r3, r1
 800c69a:	bf01      	itttt	eq
 800c69c:	6819      	ldreq	r1, [r3, #0]
 800c69e:	685b      	ldreq	r3, [r3, #4]
 800c6a0:	1809      	addeq	r1, r1, r0
 800c6a2:	6021      	streq	r1, [r4, #0]
 800c6a4:	e7ed      	b.n	800c682 <_free_r+0x1e>
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	b10b      	cbz	r3, 800c6b0 <_free_r+0x4c>
 800c6ac:	42a3      	cmp	r3, r4
 800c6ae:	d9fa      	bls.n	800c6a6 <_free_r+0x42>
 800c6b0:	6811      	ldr	r1, [r2, #0]
 800c6b2:	1850      	adds	r0, r2, r1
 800c6b4:	42a0      	cmp	r0, r4
 800c6b6:	d10b      	bne.n	800c6d0 <_free_r+0x6c>
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	4401      	add	r1, r0
 800c6bc:	1850      	adds	r0, r2, r1
 800c6be:	4283      	cmp	r3, r0
 800c6c0:	6011      	str	r1, [r2, #0]
 800c6c2:	d1e0      	bne.n	800c686 <_free_r+0x22>
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	4401      	add	r1, r0
 800c6ca:	6011      	str	r1, [r2, #0]
 800c6cc:	6053      	str	r3, [r2, #4]
 800c6ce:	e7da      	b.n	800c686 <_free_r+0x22>
 800c6d0:	d902      	bls.n	800c6d8 <_free_r+0x74>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	e7d6      	b.n	800c686 <_free_r+0x22>
 800c6d8:	6820      	ldr	r0, [r4, #0]
 800c6da:	1821      	adds	r1, r4, r0
 800c6dc:	428b      	cmp	r3, r1
 800c6de:	bf01      	itttt	eq
 800c6e0:	6819      	ldreq	r1, [r3, #0]
 800c6e2:	685b      	ldreq	r3, [r3, #4]
 800c6e4:	1809      	addeq	r1, r1, r0
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	6063      	str	r3, [r4, #4]
 800c6ea:	6054      	str	r4, [r2, #4]
 800c6ec:	e7cb      	b.n	800c686 <_free_r+0x22>
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	200008ec 	.word	0x200008ec

0800c6f4 <sbrk_aligned>:
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	4e0e      	ldr	r6, [pc, #56]	; (800c730 <sbrk_aligned+0x3c>)
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	6831      	ldr	r1, [r6, #0]
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	b911      	cbnz	r1, 800c706 <sbrk_aligned+0x12>
 800c700:	f000 f9ee 	bl	800cae0 <_sbrk_r>
 800c704:	6030      	str	r0, [r6, #0]
 800c706:	4621      	mov	r1, r4
 800c708:	4628      	mov	r0, r5
 800c70a:	f000 f9e9 	bl	800cae0 <_sbrk_r>
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	d00a      	beq.n	800c728 <sbrk_aligned+0x34>
 800c712:	1cc4      	adds	r4, r0, #3
 800c714:	f024 0403 	bic.w	r4, r4, #3
 800c718:	42a0      	cmp	r0, r4
 800c71a:	d007      	beq.n	800c72c <sbrk_aligned+0x38>
 800c71c:	1a21      	subs	r1, r4, r0
 800c71e:	4628      	mov	r0, r5
 800c720:	f000 f9de 	bl	800cae0 <_sbrk_r>
 800c724:	3001      	adds	r0, #1
 800c726:	d101      	bne.n	800c72c <sbrk_aligned+0x38>
 800c728:	f04f 34ff 	mov.w	r4, #4294967295
 800c72c:	4620      	mov	r0, r4
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
 800c730:	200008f0 	.word	0x200008f0

0800c734 <_malloc_r>:
 800c734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c738:	1ccd      	adds	r5, r1, #3
 800c73a:	f025 0503 	bic.w	r5, r5, #3
 800c73e:	3508      	adds	r5, #8
 800c740:	2d0c      	cmp	r5, #12
 800c742:	bf38      	it	cc
 800c744:	250c      	movcc	r5, #12
 800c746:	2d00      	cmp	r5, #0
 800c748:	4607      	mov	r7, r0
 800c74a:	db01      	blt.n	800c750 <_malloc_r+0x1c>
 800c74c:	42a9      	cmp	r1, r5
 800c74e:	d905      	bls.n	800c75c <_malloc_r+0x28>
 800c750:	230c      	movs	r3, #12
 800c752:	2600      	movs	r6, #0
 800c754:	603b      	str	r3, [r7, #0]
 800c756:	4630      	mov	r0, r6
 800c758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75c:	4e2e      	ldr	r6, [pc, #184]	; (800c818 <_malloc_r+0xe4>)
 800c75e:	f000 fa3b 	bl	800cbd8 <__malloc_lock>
 800c762:	6833      	ldr	r3, [r6, #0]
 800c764:	461c      	mov	r4, r3
 800c766:	bb34      	cbnz	r4, 800c7b6 <_malloc_r+0x82>
 800c768:	4629      	mov	r1, r5
 800c76a:	4638      	mov	r0, r7
 800c76c:	f7ff ffc2 	bl	800c6f4 <sbrk_aligned>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	4604      	mov	r4, r0
 800c774:	d14d      	bne.n	800c812 <_malloc_r+0xde>
 800c776:	6834      	ldr	r4, [r6, #0]
 800c778:	4626      	mov	r6, r4
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	d140      	bne.n	800c800 <_malloc_r+0xcc>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4631      	mov	r1, r6
 800c782:	4638      	mov	r0, r7
 800c784:	eb04 0803 	add.w	r8, r4, r3
 800c788:	f000 f9aa 	bl	800cae0 <_sbrk_r>
 800c78c:	4580      	cmp	r8, r0
 800c78e:	d13a      	bne.n	800c806 <_malloc_r+0xd2>
 800c790:	6821      	ldr	r1, [r4, #0]
 800c792:	3503      	adds	r5, #3
 800c794:	1a6d      	subs	r5, r5, r1
 800c796:	f025 0503 	bic.w	r5, r5, #3
 800c79a:	3508      	adds	r5, #8
 800c79c:	2d0c      	cmp	r5, #12
 800c79e:	bf38      	it	cc
 800c7a0:	250c      	movcc	r5, #12
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	f7ff ffa5 	bl	800c6f4 <sbrk_aligned>
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	d02b      	beq.n	800c806 <_malloc_r+0xd2>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	442b      	add	r3, r5
 800c7b2:	6023      	str	r3, [r4, #0]
 800c7b4:	e00e      	b.n	800c7d4 <_malloc_r+0xa0>
 800c7b6:	6822      	ldr	r2, [r4, #0]
 800c7b8:	1b52      	subs	r2, r2, r5
 800c7ba:	d41e      	bmi.n	800c7fa <_malloc_r+0xc6>
 800c7bc:	2a0b      	cmp	r2, #11
 800c7be:	d916      	bls.n	800c7ee <_malloc_r+0xba>
 800c7c0:	1961      	adds	r1, r4, r5
 800c7c2:	42a3      	cmp	r3, r4
 800c7c4:	6025      	str	r5, [r4, #0]
 800c7c6:	bf18      	it	ne
 800c7c8:	6059      	strne	r1, [r3, #4]
 800c7ca:	6863      	ldr	r3, [r4, #4]
 800c7cc:	bf08      	it	eq
 800c7ce:	6031      	streq	r1, [r6, #0]
 800c7d0:	5162      	str	r2, [r4, r5]
 800c7d2:	604b      	str	r3, [r1, #4]
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f104 060b 	add.w	r6, r4, #11
 800c7da:	f000 fa03 	bl	800cbe4 <__malloc_unlock>
 800c7de:	f026 0607 	bic.w	r6, r6, #7
 800c7e2:	1d23      	adds	r3, r4, #4
 800c7e4:	1af2      	subs	r2, r6, r3
 800c7e6:	d0b6      	beq.n	800c756 <_malloc_r+0x22>
 800c7e8:	1b9b      	subs	r3, r3, r6
 800c7ea:	50a3      	str	r3, [r4, r2]
 800c7ec:	e7b3      	b.n	800c756 <_malloc_r+0x22>
 800c7ee:	6862      	ldr	r2, [r4, #4]
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	bf0c      	ite	eq
 800c7f4:	6032      	streq	r2, [r6, #0]
 800c7f6:	605a      	strne	r2, [r3, #4]
 800c7f8:	e7ec      	b.n	800c7d4 <_malloc_r+0xa0>
 800c7fa:	4623      	mov	r3, r4
 800c7fc:	6864      	ldr	r4, [r4, #4]
 800c7fe:	e7b2      	b.n	800c766 <_malloc_r+0x32>
 800c800:	4634      	mov	r4, r6
 800c802:	6876      	ldr	r6, [r6, #4]
 800c804:	e7b9      	b.n	800c77a <_malloc_r+0x46>
 800c806:	230c      	movs	r3, #12
 800c808:	4638      	mov	r0, r7
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	f000 f9ea 	bl	800cbe4 <__malloc_unlock>
 800c810:	e7a1      	b.n	800c756 <_malloc_r+0x22>
 800c812:	6025      	str	r5, [r4, #0]
 800c814:	e7de      	b.n	800c7d4 <_malloc_r+0xa0>
 800c816:	bf00      	nop
 800c818:	200008ec 	.word	0x200008ec

0800c81c <__ssputs_r>:
 800c81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	688e      	ldr	r6, [r1, #8]
 800c822:	4682      	mov	sl, r0
 800c824:	429e      	cmp	r6, r3
 800c826:	460c      	mov	r4, r1
 800c828:	4690      	mov	r8, r2
 800c82a:	461f      	mov	r7, r3
 800c82c:	d838      	bhi.n	800c8a0 <__ssputs_r+0x84>
 800c82e:	898a      	ldrh	r2, [r1, #12]
 800c830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c834:	d032      	beq.n	800c89c <__ssputs_r+0x80>
 800c836:	6825      	ldr	r5, [r4, #0]
 800c838:	6909      	ldr	r1, [r1, #16]
 800c83a:	3301      	adds	r3, #1
 800c83c:	eba5 0901 	sub.w	r9, r5, r1
 800c840:	6965      	ldr	r5, [r4, #20]
 800c842:	444b      	add	r3, r9
 800c844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c84c:	106d      	asrs	r5, r5, #1
 800c84e:	429d      	cmp	r5, r3
 800c850:	bf38      	it	cc
 800c852:	461d      	movcc	r5, r3
 800c854:	0553      	lsls	r3, r2, #21
 800c856:	d531      	bpl.n	800c8bc <__ssputs_r+0xa0>
 800c858:	4629      	mov	r1, r5
 800c85a:	f7ff ff6b 	bl	800c734 <_malloc_r>
 800c85e:	4606      	mov	r6, r0
 800c860:	b950      	cbnz	r0, 800c878 <__ssputs_r+0x5c>
 800c862:	230c      	movs	r3, #12
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	f8ca 3000 	str.w	r3, [sl]
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c878:	464a      	mov	r2, r9
 800c87a:	6921      	ldr	r1, [r4, #16]
 800c87c:	f7ff fa18 	bl	800bcb0 <memcpy>
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	6126      	str	r6, [r4, #16]
 800c88e:	444e      	add	r6, r9
 800c890:	6026      	str	r6, [r4, #0]
 800c892:	463e      	mov	r6, r7
 800c894:	6165      	str	r5, [r4, #20]
 800c896:	eba5 0509 	sub.w	r5, r5, r9
 800c89a:	60a5      	str	r5, [r4, #8]
 800c89c:	42be      	cmp	r6, r7
 800c89e:	d900      	bls.n	800c8a2 <__ssputs_r+0x86>
 800c8a0:	463e      	mov	r6, r7
 800c8a2:	4632      	mov	r2, r6
 800c8a4:	4641      	mov	r1, r8
 800c8a6:	6820      	ldr	r0, [r4, #0]
 800c8a8:	f000 f97c 	bl	800cba4 <memmove>
 800c8ac:	68a3      	ldr	r3, [r4, #8]
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	1b9b      	subs	r3, r3, r6
 800c8b2:	60a3      	str	r3, [r4, #8]
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	4433      	add	r3, r6
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	e7db      	b.n	800c874 <__ssputs_r+0x58>
 800c8bc:	462a      	mov	r2, r5
 800c8be:	f000 f997 	bl	800cbf0 <_realloc_r>
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d1e1      	bne.n	800c88c <__ssputs_r+0x70>
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	6921      	ldr	r1, [r4, #16]
 800c8cc:	f7ff feca 	bl	800c664 <_free_r>
 800c8d0:	e7c7      	b.n	800c862 <__ssputs_r+0x46>
	...

0800c8d4 <_svfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4698      	mov	r8, r3
 800c8da:	898b      	ldrh	r3, [r1, #12]
 800c8dc:	4607      	mov	r7, r0
 800c8de:	061b      	lsls	r3, r3, #24
 800c8e0:	460d      	mov	r5, r1
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	b09d      	sub	sp, #116	; 0x74
 800c8e6:	d50e      	bpl.n	800c906 <_svfiprintf_r+0x32>
 800c8e8:	690b      	ldr	r3, [r1, #16]
 800c8ea:	b963      	cbnz	r3, 800c906 <_svfiprintf_r+0x32>
 800c8ec:	2140      	movs	r1, #64	; 0x40
 800c8ee:	f7ff ff21 	bl	800c734 <_malloc_r>
 800c8f2:	6028      	str	r0, [r5, #0]
 800c8f4:	6128      	str	r0, [r5, #16]
 800c8f6:	b920      	cbnz	r0, 800c902 <_svfiprintf_r+0x2e>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	e0d1      	b.n	800caa6 <_svfiprintf_r+0x1d2>
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	616b      	str	r3, [r5, #20]
 800c906:	2300      	movs	r3, #0
 800c908:	9309      	str	r3, [sp, #36]	; 0x24
 800c90a:	2320      	movs	r3, #32
 800c90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c910:	2330      	movs	r3, #48	; 0x30
 800c912:	f04f 0901 	mov.w	r9, #1
 800c916:	f8cd 800c 	str.w	r8, [sp, #12]
 800c91a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cac0 <_svfiprintf_r+0x1ec>
 800c91e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c922:	4623      	mov	r3, r4
 800c924:	469a      	mov	sl, r3
 800c926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92a:	b10a      	cbz	r2, 800c930 <_svfiprintf_r+0x5c>
 800c92c:	2a25      	cmp	r2, #37	; 0x25
 800c92e:	d1f9      	bne.n	800c924 <_svfiprintf_r+0x50>
 800c930:	ebba 0b04 	subs.w	fp, sl, r4
 800c934:	d00b      	beq.n	800c94e <_svfiprintf_r+0x7a>
 800c936:	465b      	mov	r3, fp
 800c938:	4622      	mov	r2, r4
 800c93a:	4629      	mov	r1, r5
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff ff6d 	bl	800c81c <__ssputs_r>
 800c942:	3001      	adds	r0, #1
 800c944:	f000 80aa 	beq.w	800ca9c <_svfiprintf_r+0x1c8>
 800c948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94a:	445a      	add	r2, fp
 800c94c:	9209      	str	r2, [sp, #36]	; 0x24
 800c94e:	f89a 3000 	ldrb.w	r3, [sl]
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 80a2 	beq.w	800ca9c <_svfiprintf_r+0x1c8>
 800c958:	2300      	movs	r3, #0
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295
 800c95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c962:	f10a 0a01 	add.w	sl, sl, #1
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	9307      	str	r3, [sp, #28]
 800c96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c96e:	931a      	str	r3, [sp, #104]	; 0x68
 800c970:	4654      	mov	r4, sl
 800c972:	2205      	movs	r2, #5
 800c974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c978:	4851      	ldr	r0, [pc, #324]	; (800cac0 <_svfiprintf_r+0x1ec>)
 800c97a:	f7ff f98b 	bl	800bc94 <memchr>
 800c97e:	9a04      	ldr	r2, [sp, #16]
 800c980:	b9d8      	cbnz	r0, 800c9ba <_svfiprintf_r+0xe6>
 800c982:	06d0      	lsls	r0, r2, #27
 800c984:	bf44      	itt	mi
 800c986:	2320      	movmi	r3, #32
 800c988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c98c:	0711      	lsls	r1, r2, #28
 800c98e:	bf44      	itt	mi
 800c990:	232b      	movmi	r3, #43	; 0x2b
 800c992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c996:	f89a 3000 	ldrb.w	r3, [sl]
 800c99a:	2b2a      	cmp	r3, #42	; 0x2a
 800c99c:	d015      	beq.n	800c9ca <_svfiprintf_r+0xf6>
 800c99e:	4654      	mov	r4, sl
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	f04f 0c0a 	mov.w	ip, #10
 800c9a6:	9a07      	ldr	r2, [sp, #28]
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ae:	3b30      	subs	r3, #48	; 0x30
 800c9b0:	2b09      	cmp	r3, #9
 800c9b2:	d94e      	bls.n	800ca52 <_svfiprintf_r+0x17e>
 800c9b4:	b1b0      	cbz	r0, 800c9e4 <_svfiprintf_r+0x110>
 800c9b6:	9207      	str	r2, [sp, #28]
 800c9b8:	e014      	b.n	800c9e4 <_svfiprintf_r+0x110>
 800c9ba:	eba0 0308 	sub.w	r3, r0, r8
 800c9be:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	46a2      	mov	sl, r4
 800c9c6:	9304      	str	r3, [sp, #16]
 800c9c8:	e7d2      	b.n	800c970 <_svfiprintf_r+0x9c>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	1d19      	adds	r1, r3, #4
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	9103      	str	r1, [sp, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	bfbb      	ittet	lt
 800c9d6:	425b      	neglt	r3, r3
 800c9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9dc:	9307      	strge	r3, [sp, #28]
 800c9de:	9307      	strlt	r3, [sp, #28]
 800c9e0:	bfb8      	it	lt
 800c9e2:	9204      	strlt	r2, [sp, #16]
 800c9e4:	7823      	ldrb	r3, [r4, #0]
 800c9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9e8:	d10c      	bne.n	800ca04 <_svfiprintf_r+0x130>
 800c9ea:	7863      	ldrb	r3, [r4, #1]
 800c9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ee:	d135      	bne.n	800ca5c <_svfiprintf_r+0x188>
 800c9f0:	9b03      	ldr	r3, [sp, #12]
 800c9f2:	3402      	adds	r4, #2
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	9203      	str	r2, [sp, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfb8      	it	lt
 800c9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cac4 <_svfiprintf_r+0x1f0>
 800ca08:	2203      	movs	r2, #3
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	7821      	ldrb	r1, [r4, #0]
 800ca0e:	f7ff f941 	bl	800bc94 <memchr>
 800ca12:	b140      	cbz	r0, 800ca26 <_svfiprintf_r+0x152>
 800ca14:	2340      	movs	r3, #64	; 0x40
 800ca16:	eba0 000a 	sub.w	r0, r0, sl
 800ca1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ca1e:	9b04      	ldr	r3, [sp, #16]
 800ca20:	3401      	adds	r4, #1
 800ca22:	4303      	orrs	r3, r0
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2a:	2206      	movs	r2, #6
 800ca2c:	4826      	ldr	r0, [pc, #152]	; (800cac8 <_svfiprintf_r+0x1f4>)
 800ca2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca32:	f7ff f92f 	bl	800bc94 <memchr>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d038      	beq.n	800caac <_svfiprintf_r+0x1d8>
 800ca3a:	4b24      	ldr	r3, [pc, #144]	; (800cacc <_svfiprintf_r+0x1f8>)
 800ca3c:	bb1b      	cbnz	r3, 800ca86 <_svfiprintf_r+0x1b2>
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	3307      	adds	r3, #7
 800ca42:	f023 0307 	bic.w	r3, r3, #7
 800ca46:	3308      	adds	r3, #8
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4c:	4433      	add	r3, r6
 800ca4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca50:	e767      	b.n	800c922 <_svfiprintf_r+0x4e>
 800ca52:	460c      	mov	r4, r1
 800ca54:	2001      	movs	r0, #1
 800ca56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca5a:	e7a5      	b.n	800c9a8 <_svfiprintf_r+0xd4>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f04f 0c0a 	mov.w	ip, #10
 800ca62:	4619      	mov	r1, r3
 800ca64:	3401      	adds	r4, #1
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca6e:	3a30      	subs	r2, #48	; 0x30
 800ca70:	2a09      	cmp	r2, #9
 800ca72:	d903      	bls.n	800ca7c <_svfiprintf_r+0x1a8>
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d0c5      	beq.n	800ca04 <_svfiprintf_r+0x130>
 800ca78:	9105      	str	r1, [sp, #20]
 800ca7a:	e7c3      	b.n	800ca04 <_svfiprintf_r+0x130>
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	2301      	movs	r3, #1
 800ca80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca84:	e7f0      	b.n	800ca68 <_svfiprintf_r+0x194>
 800ca86:	ab03      	add	r3, sp, #12
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	4b10      	ldr	r3, [pc, #64]	; (800cad0 <_svfiprintf_r+0x1fc>)
 800ca90:	a904      	add	r1, sp, #16
 800ca92:	f7fc fa73 	bl	8008f7c <_printf_float>
 800ca96:	1c42      	adds	r2, r0, #1
 800ca98:	4606      	mov	r6, r0
 800ca9a:	d1d6      	bne.n	800ca4a <_svfiprintf_r+0x176>
 800ca9c:	89ab      	ldrh	r3, [r5, #12]
 800ca9e:	065b      	lsls	r3, r3, #25
 800caa0:	f53f af2c 	bmi.w	800c8fc <_svfiprintf_r+0x28>
 800caa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caa6:	b01d      	add	sp, #116	; 0x74
 800caa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caac:	ab03      	add	r3, sp, #12
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	462a      	mov	r2, r5
 800cab2:	4638      	mov	r0, r7
 800cab4:	4b06      	ldr	r3, [pc, #24]	; (800cad0 <_svfiprintf_r+0x1fc>)
 800cab6:	a904      	add	r1, sp, #16
 800cab8:	f7fc fcfc 	bl	80094b4 <_printf_i>
 800cabc:	e7eb      	b.n	800ca96 <_svfiprintf_r+0x1c2>
 800cabe:	bf00      	nop
 800cac0:	0801f4f4 	.word	0x0801f4f4
 800cac4:	0801f4fa 	.word	0x0801f4fa
 800cac8:	0801f4fe 	.word	0x0801f4fe
 800cacc:	08008f7d 	.word	0x08008f7d
 800cad0:	0800c81d 	.word	0x0800c81d

0800cad4 <nan>:
 800cad4:	2000      	movs	r0, #0
 800cad6:	4901      	ldr	r1, [pc, #4]	; (800cadc <nan+0x8>)
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	7ff80000 	.word	0x7ff80000

0800cae0 <_sbrk_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	2300      	movs	r3, #0
 800cae4:	4d05      	ldr	r5, [pc, #20]	; (800cafc <_sbrk_r+0x1c>)
 800cae6:	4604      	mov	r4, r0
 800cae8:	4608      	mov	r0, r1
 800caea:	602b      	str	r3, [r5, #0]
 800caec:	f7f9 fc2a 	bl	8006344 <_sbrk>
 800caf0:	1c43      	adds	r3, r0, #1
 800caf2:	d102      	bne.n	800cafa <_sbrk_r+0x1a>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b103      	cbz	r3, 800cafa <_sbrk_r+0x1a>
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	bd38      	pop	{r3, r4, r5, pc}
 800cafc:	200008f4 	.word	0x200008f4

0800cb00 <strncmp>:
 800cb00:	4603      	mov	r3, r0
 800cb02:	b510      	push	{r4, lr}
 800cb04:	b172      	cbz	r2, 800cb24 <strncmp+0x24>
 800cb06:	3901      	subs	r1, #1
 800cb08:	1884      	adds	r4, r0, r2
 800cb0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb12:	4290      	cmp	r0, r2
 800cb14:	d101      	bne.n	800cb1a <strncmp+0x1a>
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	d101      	bne.n	800cb1e <strncmp+0x1e>
 800cb1a:	1a80      	subs	r0, r0, r2
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1f3      	bne.n	800cb0a <strncmp+0xa>
 800cb22:	e7fa      	b.n	800cb1a <strncmp+0x1a>
 800cb24:	4610      	mov	r0, r2
 800cb26:	e7f9      	b.n	800cb1c <strncmp+0x1c>

0800cb28 <__ascii_wctomb>:
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4608      	mov	r0, r1
 800cb2c:	b141      	cbz	r1, 800cb40 <__ascii_wctomb+0x18>
 800cb2e:	2aff      	cmp	r2, #255	; 0xff
 800cb30:	d904      	bls.n	800cb3c <__ascii_wctomb+0x14>
 800cb32:	228a      	movs	r2, #138	; 0x8a
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	4770      	bx	lr
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	700a      	strb	r2, [r1, #0]
 800cb40:	4770      	bx	lr
	...

0800cb44 <__assert_func>:
 800cb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb46:	4614      	mov	r4, r2
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4b09      	ldr	r3, [pc, #36]	; (800cb70 <__assert_func+0x2c>)
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68d8      	ldr	r0, [r3, #12]
 800cb52:	b14c      	cbz	r4, 800cb68 <__assert_func+0x24>
 800cb54:	4b07      	ldr	r3, [pc, #28]	; (800cb74 <__assert_func+0x30>)
 800cb56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb5a:	9100      	str	r1, [sp, #0]
 800cb5c:	462b      	mov	r3, r5
 800cb5e:	4906      	ldr	r1, [pc, #24]	; (800cb78 <__assert_func+0x34>)
 800cb60:	f000 f80e 	bl	800cb80 <fiprintf>
 800cb64:	f000 fa8a 	bl	800d07c <abort>
 800cb68:	4b04      	ldr	r3, [pc, #16]	; (800cb7c <__assert_func+0x38>)
 800cb6a:	461c      	mov	r4, r3
 800cb6c:	e7f3      	b.n	800cb56 <__assert_func+0x12>
 800cb6e:	bf00      	nop
 800cb70:	2000000c 	.word	0x2000000c
 800cb74:	0801f505 	.word	0x0801f505
 800cb78:	0801f512 	.word	0x0801f512
 800cb7c:	0801f540 	.word	0x0801f540

0800cb80 <fiprintf>:
 800cb80:	b40e      	push	{r1, r2, r3}
 800cb82:	b503      	push	{r0, r1, lr}
 800cb84:	4601      	mov	r1, r0
 800cb86:	ab03      	add	r3, sp, #12
 800cb88:	4805      	ldr	r0, [pc, #20]	; (800cba0 <fiprintf+0x20>)
 800cb8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb8e:	6800      	ldr	r0, [r0, #0]
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	f000 f883 	bl	800cc9c <_vfiprintf_r>
 800cb96:	b002      	add	sp, #8
 800cb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb9c:	b003      	add	sp, #12
 800cb9e:	4770      	bx	lr
 800cba0:	2000000c 	.word	0x2000000c

0800cba4 <memmove>:
 800cba4:	4288      	cmp	r0, r1
 800cba6:	b510      	push	{r4, lr}
 800cba8:	eb01 0402 	add.w	r4, r1, r2
 800cbac:	d902      	bls.n	800cbb4 <memmove+0x10>
 800cbae:	4284      	cmp	r4, r0
 800cbb0:	4623      	mov	r3, r4
 800cbb2:	d807      	bhi.n	800cbc4 <memmove+0x20>
 800cbb4:	1e43      	subs	r3, r0, #1
 800cbb6:	42a1      	cmp	r1, r4
 800cbb8:	d008      	beq.n	800cbcc <memmove+0x28>
 800cbba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbc2:	e7f8      	b.n	800cbb6 <memmove+0x12>
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	4402      	add	r2, r0
 800cbc8:	428a      	cmp	r2, r1
 800cbca:	d100      	bne.n	800cbce <memmove+0x2a>
 800cbcc:	bd10      	pop	{r4, pc}
 800cbce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbd6:	e7f7      	b.n	800cbc8 <memmove+0x24>

0800cbd8 <__malloc_lock>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	; (800cbe0 <__malloc_lock+0x8>)
 800cbda:	f000 bc0b 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800cbde:	bf00      	nop
 800cbe0:	200008f8 	.word	0x200008f8

0800cbe4 <__malloc_unlock>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__malloc_unlock+0x8>)
 800cbe6:	f000 bc06 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800cbea:	bf00      	nop
 800cbec:	200008f8 	.word	0x200008f8

0800cbf0 <_realloc_r>:
 800cbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	4614      	mov	r4, r2
 800cbf8:	460e      	mov	r6, r1
 800cbfa:	b921      	cbnz	r1, 800cc06 <_realloc_r+0x16>
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc02:	f7ff bd97 	b.w	800c734 <_malloc_r>
 800cc06:	b92a      	cbnz	r2, 800cc14 <_realloc_r+0x24>
 800cc08:	f7ff fd2c 	bl	800c664 <_free_r>
 800cc0c:	4625      	mov	r5, r4
 800cc0e:	4628      	mov	r0, r5
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	f000 fc56 	bl	800d4c4 <_malloc_usable_size_r>
 800cc18:	4284      	cmp	r4, r0
 800cc1a:	4607      	mov	r7, r0
 800cc1c:	d802      	bhi.n	800cc24 <_realloc_r+0x34>
 800cc1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc22:	d812      	bhi.n	800cc4a <_realloc_r+0x5a>
 800cc24:	4621      	mov	r1, r4
 800cc26:	4640      	mov	r0, r8
 800cc28:	f7ff fd84 	bl	800c734 <_malloc_r>
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d0ed      	beq.n	800cc0e <_realloc_r+0x1e>
 800cc32:	42bc      	cmp	r4, r7
 800cc34:	4622      	mov	r2, r4
 800cc36:	4631      	mov	r1, r6
 800cc38:	bf28      	it	cs
 800cc3a:	463a      	movcs	r2, r7
 800cc3c:	f7ff f838 	bl	800bcb0 <memcpy>
 800cc40:	4631      	mov	r1, r6
 800cc42:	4640      	mov	r0, r8
 800cc44:	f7ff fd0e 	bl	800c664 <_free_r>
 800cc48:	e7e1      	b.n	800cc0e <_realloc_r+0x1e>
 800cc4a:	4635      	mov	r5, r6
 800cc4c:	e7df      	b.n	800cc0e <_realloc_r+0x1e>

0800cc4e <__sfputc_r>:
 800cc4e:	6893      	ldr	r3, [r2, #8]
 800cc50:	b410      	push	{r4}
 800cc52:	3b01      	subs	r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	6093      	str	r3, [r2, #8]
 800cc58:	da07      	bge.n	800cc6a <__sfputc_r+0x1c>
 800cc5a:	6994      	ldr	r4, [r2, #24]
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	db01      	blt.n	800cc64 <__sfputc_r+0x16>
 800cc60:	290a      	cmp	r1, #10
 800cc62:	d102      	bne.n	800cc6a <__sfputc_r+0x1c>
 800cc64:	bc10      	pop	{r4}
 800cc66:	f000 b949 	b.w	800cefc <__swbuf_r>
 800cc6a:	6813      	ldr	r3, [r2, #0]
 800cc6c:	1c58      	adds	r0, r3, #1
 800cc6e:	6010      	str	r0, [r2, #0]
 800cc70:	7019      	strb	r1, [r3, #0]
 800cc72:	4608      	mov	r0, r1
 800cc74:	bc10      	pop	{r4}
 800cc76:	4770      	bx	lr

0800cc78 <__sfputs_r>:
 800cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	460f      	mov	r7, r1
 800cc7e:	4614      	mov	r4, r2
 800cc80:	18d5      	adds	r5, r2, r3
 800cc82:	42ac      	cmp	r4, r5
 800cc84:	d101      	bne.n	800cc8a <__sfputs_r+0x12>
 800cc86:	2000      	movs	r0, #0
 800cc88:	e007      	b.n	800cc9a <__sfputs_r+0x22>
 800cc8a:	463a      	mov	r2, r7
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc92:	f7ff ffdc 	bl	800cc4e <__sfputc_r>
 800cc96:	1c43      	adds	r3, r0, #1
 800cc98:	d1f3      	bne.n	800cc82 <__sfputs_r+0xa>
 800cc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc9c <_vfiprintf_r>:
 800cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	460d      	mov	r5, r1
 800cca2:	4614      	mov	r4, r2
 800cca4:	4698      	mov	r8, r3
 800cca6:	4606      	mov	r6, r0
 800cca8:	b09d      	sub	sp, #116	; 0x74
 800ccaa:	b118      	cbz	r0, 800ccb4 <_vfiprintf_r+0x18>
 800ccac:	6983      	ldr	r3, [r0, #24]
 800ccae:	b90b      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x18>
 800ccb0:	f000 fb02 	bl	800d2b8 <__sinit>
 800ccb4:	4b89      	ldr	r3, [pc, #548]	; (800cedc <_vfiprintf_r+0x240>)
 800ccb6:	429d      	cmp	r5, r3
 800ccb8:	d11b      	bne.n	800ccf2 <_vfiprintf_r+0x56>
 800ccba:	6875      	ldr	r5, [r6, #4]
 800ccbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccbe:	07d9      	lsls	r1, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_vfiprintf_r+0x32>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	059a      	lsls	r2, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_vfiprintf_r+0x32>
 800ccc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccca:	f000 fb93 	bl	800d3f4 <__retarget_lock_acquire_recursive>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	071b      	lsls	r3, r3, #28
 800ccd2:	d501      	bpl.n	800ccd8 <_vfiprintf_r+0x3c>
 800ccd4:	692b      	ldr	r3, [r5, #16]
 800ccd6:	b9eb      	cbnz	r3, 800cd14 <_vfiprintf_r+0x78>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f000 f960 	bl	800cfa0 <__swsetup_r>
 800cce0:	b1c0      	cbz	r0, 800cd14 <_vfiprintf_r+0x78>
 800cce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cce4:	07dc      	lsls	r4, r3, #31
 800cce6:	d50e      	bpl.n	800cd06 <_vfiprintf_r+0x6a>
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	b01d      	add	sp, #116	; 0x74
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	4b7b      	ldr	r3, [pc, #492]	; (800cee0 <_vfiprintf_r+0x244>)
 800ccf4:	429d      	cmp	r5, r3
 800ccf6:	d101      	bne.n	800ccfc <_vfiprintf_r+0x60>
 800ccf8:	68b5      	ldr	r5, [r6, #8]
 800ccfa:	e7df      	b.n	800ccbc <_vfiprintf_r+0x20>
 800ccfc:	4b79      	ldr	r3, [pc, #484]	; (800cee4 <_vfiprintf_r+0x248>)
 800ccfe:	429d      	cmp	r5, r3
 800cd00:	bf08      	it	eq
 800cd02:	68f5      	ldreq	r5, [r6, #12]
 800cd04:	e7da      	b.n	800ccbc <_vfiprintf_r+0x20>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	0598      	lsls	r0, r3, #22
 800cd0a:	d4ed      	bmi.n	800cce8 <_vfiprintf_r+0x4c>
 800cd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd0e:	f000 fb72 	bl	800d3f6 <__retarget_lock_release_recursive>
 800cd12:	e7e9      	b.n	800cce8 <_vfiprintf_r+0x4c>
 800cd14:	2300      	movs	r3, #0
 800cd16:	9309      	str	r3, [sp, #36]	; 0x24
 800cd18:	2320      	movs	r3, #32
 800cd1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd1e:	2330      	movs	r3, #48	; 0x30
 800cd20:	f04f 0901 	mov.w	r9, #1
 800cd24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cee8 <_vfiprintf_r+0x24c>
 800cd2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd30:	4623      	mov	r3, r4
 800cd32:	469a      	mov	sl, r3
 800cd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd38:	b10a      	cbz	r2, 800cd3e <_vfiprintf_r+0xa2>
 800cd3a:	2a25      	cmp	r2, #37	; 0x25
 800cd3c:	d1f9      	bne.n	800cd32 <_vfiprintf_r+0x96>
 800cd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd42:	d00b      	beq.n	800cd5c <_vfiprintf_r+0xc0>
 800cd44:	465b      	mov	r3, fp
 800cd46:	4622      	mov	r2, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ff94 	bl	800cc78 <__sfputs_r>
 800cd50:	3001      	adds	r0, #1
 800cd52:	f000 80aa 	beq.w	800ceaa <_vfiprintf_r+0x20e>
 800cd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd58:	445a      	add	r2, fp
 800cd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80a2 	beq.w	800ceaa <_vfiprintf_r+0x20e>
 800cd66:	2300      	movs	r3, #0
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd70:	f10a 0a01 	add.w	sl, sl, #1
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	9307      	str	r3, [sp, #28]
 800cd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd7e:	4654      	mov	r4, sl
 800cd80:	2205      	movs	r2, #5
 800cd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd86:	4858      	ldr	r0, [pc, #352]	; (800cee8 <_vfiprintf_r+0x24c>)
 800cd88:	f7fe ff84 	bl	800bc94 <memchr>
 800cd8c:	9a04      	ldr	r2, [sp, #16]
 800cd8e:	b9d8      	cbnz	r0, 800cdc8 <_vfiprintf_r+0x12c>
 800cd90:	06d1      	lsls	r1, r2, #27
 800cd92:	bf44      	itt	mi
 800cd94:	2320      	movmi	r3, #32
 800cd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd9a:	0713      	lsls	r3, r2, #28
 800cd9c:	bf44      	itt	mi
 800cd9e:	232b      	movmi	r3, #43	; 0x2b
 800cda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda4:	f89a 3000 	ldrb.w	r3, [sl]
 800cda8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdaa:	d015      	beq.n	800cdd8 <_vfiprintf_r+0x13c>
 800cdac:	4654      	mov	r4, sl
 800cdae:	2000      	movs	r0, #0
 800cdb0:	f04f 0c0a 	mov.w	ip, #10
 800cdb4:	9a07      	ldr	r2, [sp, #28]
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdbc:	3b30      	subs	r3, #48	; 0x30
 800cdbe:	2b09      	cmp	r3, #9
 800cdc0:	d94e      	bls.n	800ce60 <_vfiprintf_r+0x1c4>
 800cdc2:	b1b0      	cbz	r0, 800cdf2 <_vfiprintf_r+0x156>
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	e014      	b.n	800cdf2 <_vfiprintf_r+0x156>
 800cdc8:	eba0 0308 	sub.w	r3, r0, r8
 800cdcc:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	46a2      	mov	sl, r4
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	e7d2      	b.n	800cd7e <_vfiprintf_r+0xe2>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	1d19      	adds	r1, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	9103      	str	r1, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bfbb      	ittet	lt
 800cde4:	425b      	neglt	r3, r3
 800cde6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdea:	9307      	strge	r3, [sp, #28]
 800cdec:	9307      	strlt	r3, [sp, #28]
 800cdee:	bfb8      	it	lt
 800cdf0:	9204      	strlt	r2, [sp, #16]
 800cdf2:	7823      	ldrb	r3, [r4, #0]
 800cdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800cdf6:	d10c      	bne.n	800ce12 <_vfiprintf_r+0x176>
 800cdf8:	7863      	ldrb	r3, [r4, #1]
 800cdfa:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfc:	d135      	bne.n	800ce6a <_vfiprintf_r+0x1ce>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	3402      	adds	r4, #2
 800ce02:	1d1a      	adds	r2, r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	bfb8      	it	lt
 800ce0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ceec <_vfiprintf_r+0x250>
 800ce16:	2203      	movs	r2, #3
 800ce18:	4650      	mov	r0, sl
 800ce1a:	7821      	ldrb	r1, [r4, #0]
 800ce1c:	f7fe ff3a 	bl	800bc94 <memchr>
 800ce20:	b140      	cbz	r0, 800ce34 <_vfiprintf_r+0x198>
 800ce22:	2340      	movs	r3, #64	; 0x40
 800ce24:	eba0 000a 	sub.w	r0, r0, sl
 800ce28:	fa03 f000 	lsl.w	r0, r3, r0
 800ce2c:	9b04      	ldr	r3, [sp, #16]
 800ce2e:	3401      	adds	r4, #1
 800ce30:	4303      	orrs	r3, r0
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce38:	2206      	movs	r2, #6
 800ce3a:	482d      	ldr	r0, [pc, #180]	; (800cef0 <_vfiprintf_r+0x254>)
 800ce3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce40:	f7fe ff28 	bl	800bc94 <memchr>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d03f      	beq.n	800cec8 <_vfiprintf_r+0x22c>
 800ce48:	4b2a      	ldr	r3, [pc, #168]	; (800cef4 <_vfiprintf_r+0x258>)
 800ce4a:	bb1b      	cbnz	r3, 800ce94 <_vfiprintf_r+0x1f8>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	3308      	adds	r3, #8
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5a:	443b      	add	r3, r7
 800ce5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5e:	e767      	b.n	800cd30 <_vfiprintf_r+0x94>
 800ce60:	460c      	mov	r4, r1
 800ce62:	2001      	movs	r0, #1
 800ce64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce68:	e7a5      	b.n	800cdb6 <_vfiprintf_r+0x11a>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f04f 0c0a 	mov.w	ip, #10
 800ce70:	4619      	mov	r1, r3
 800ce72:	3401      	adds	r4, #1
 800ce74:	9305      	str	r3, [sp, #20]
 800ce76:	4620      	mov	r0, r4
 800ce78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7c:	3a30      	subs	r2, #48	; 0x30
 800ce7e:	2a09      	cmp	r2, #9
 800ce80:	d903      	bls.n	800ce8a <_vfiprintf_r+0x1ee>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c5      	beq.n	800ce12 <_vfiprintf_r+0x176>
 800ce86:	9105      	str	r1, [sp, #20]
 800ce88:	e7c3      	b.n	800ce12 <_vfiprintf_r+0x176>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce92:	e7f0      	b.n	800ce76 <_vfiprintf_r+0x1da>
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	4b16      	ldr	r3, [pc, #88]	; (800cef8 <_vfiprintf_r+0x25c>)
 800ce9e:	a904      	add	r1, sp, #16
 800cea0:	f7fc f86c 	bl	8008f7c <_printf_float>
 800cea4:	4607      	mov	r7, r0
 800cea6:	1c78      	adds	r0, r7, #1
 800cea8:	d1d6      	bne.n	800ce58 <_vfiprintf_r+0x1bc>
 800ceaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceac:	07d9      	lsls	r1, r3, #31
 800ceae:	d405      	bmi.n	800cebc <_vfiprintf_r+0x220>
 800ceb0:	89ab      	ldrh	r3, [r5, #12]
 800ceb2:	059a      	lsls	r2, r3, #22
 800ceb4:	d402      	bmi.n	800cebc <_vfiprintf_r+0x220>
 800ceb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceb8:	f000 fa9d 	bl	800d3f6 <__retarget_lock_release_recursive>
 800cebc:	89ab      	ldrh	r3, [r5, #12]
 800cebe:	065b      	lsls	r3, r3, #25
 800cec0:	f53f af12 	bmi.w	800cce8 <_vfiprintf_r+0x4c>
 800cec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cec6:	e711      	b.n	800ccec <_vfiprintf_r+0x50>
 800cec8:	ab03      	add	r3, sp, #12
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	462a      	mov	r2, r5
 800cece:	4630      	mov	r0, r6
 800ced0:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <_vfiprintf_r+0x25c>)
 800ced2:	a904      	add	r1, sp, #16
 800ced4:	f7fc faee 	bl	80094b4 <_printf_i>
 800ced8:	e7e4      	b.n	800cea4 <_vfiprintf_r+0x208>
 800ceda:	bf00      	nop
 800cedc:	0801f564 	.word	0x0801f564
 800cee0:	0801f584 	.word	0x0801f584
 800cee4:	0801f544 	.word	0x0801f544
 800cee8:	0801f4f4 	.word	0x0801f4f4
 800ceec:	0801f4fa 	.word	0x0801f4fa
 800cef0:	0801f4fe 	.word	0x0801f4fe
 800cef4:	08008f7d 	.word	0x08008f7d
 800cef8:	0800cc79 	.word	0x0800cc79

0800cefc <__swbuf_r>:
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	460e      	mov	r6, r1
 800cf00:	4614      	mov	r4, r2
 800cf02:	4605      	mov	r5, r0
 800cf04:	b118      	cbz	r0, 800cf0e <__swbuf_r+0x12>
 800cf06:	6983      	ldr	r3, [r0, #24]
 800cf08:	b90b      	cbnz	r3, 800cf0e <__swbuf_r+0x12>
 800cf0a:	f000 f9d5 	bl	800d2b8 <__sinit>
 800cf0e:	4b21      	ldr	r3, [pc, #132]	; (800cf94 <__swbuf_r+0x98>)
 800cf10:	429c      	cmp	r4, r3
 800cf12:	d12b      	bne.n	800cf6c <__swbuf_r+0x70>
 800cf14:	686c      	ldr	r4, [r5, #4]
 800cf16:	69a3      	ldr	r3, [r4, #24]
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	071a      	lsls	r2, r3, #28
 800cf1e:	d52f      	bpl.n	800cf80 <__swbuf_r+0x84>
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	b36b      	cbz	r3, 800cf80 <__swbuf_r+0x84>
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	6820      	ldr	r0, [r4, #0]
 800cf28:	b2f6      	uxtb	r6, r6
 800cf2a:	1ac0      	subs	r0, r0, r3
 800cf2c:	6963      	ldr	r3, [r4, #20]
 800cf2e:	4637      	mov	r7, r6
 800cf30:	4283      	cmp	r3, r0
 800cf32:	dc04      	bgt.n	800cf3e <__swbuf_r+0x42>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f92a 	bl	800d190 <_fflush_r>
 800cf3c:	bb30      	cbnz	r0, 800cf8c <__swbuf_r+0x90>
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	3001      	adds	r0, #1
 800cf42:	3b01      	subs	r3, #1
 800cf44:	60a3      	str	r3, [r4, #8]
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	6022      	str	r2, [r4, #0]
 800cf4c:	701e      	strb	r6, [r3, #0]
 800cf4e:	6963      	ldr	r3, [r4, #20]
 800cf50:	4283      	cmp	r3, r0
 800cf52:	d004      	beq.n	800cf5e <__swbuf_r+0x62>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	07db      	lsls	r3, r3, #31
 800cf58:	d506      	bpl.n	800cf68 <__swbuf_r+0x6c>
 800cf5a:	2e0a      	cmp	r6, #10
 800cf5c:	d104      	bne.n	800cf68 <__swbuf_r+0x6c>
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4628      	mov	r0, r5
 800cf62:	f000 f915 	bl	800d190 <_fflush_r>
 800cf66:	b988      	cbnz	r0, 800cf8c <__swbuf_r+0x90>
 800cf68:	4638      	mov	r0, r7
 800cf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6c:	4b0a      	ldr	r3, [pc, #40]	; (800cf98 <__swbuf_r+0x9c>)
 800cf6e:	429c      	cmp	r4, r3
 800cf70:	d101      	bne.n	800cf76 <__swbuf_r+0x7a>
 800cf72:	68ac      	ldr	r4, [r5, #8]
 800cf74:	e7cf      	b.n	800cf16 <__swbuf_r+0x1a>
 800cf76:	4b09      	ldr	r3, [pc, #36]	; (800cf9c <__swbuf_r+0xa0>)
 800cf78:	429c      	cmp	r4, r3
 800cf7a:	bf08      	it	eq
 800cf7c:	68ec      	ldreq	r4, [r5, #12]
 800cf7e:	e7ca      	b.n	800cf16 <__swbuf_r+0x1a>
 800cf80:	4621      	mov	r1, r4
 800cf82:	4628      	mov	r0, r5
 800cf84:	f000 f80c 	bl	800cfa0 <__swsetup_r>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d0cb      	beq.n	800cf24 <__swbuf_r+0x28>
 800cf8c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf90:	e7ea      	b.n	800cf68 <__swbuf_r+0x6c>
 800cf92:	bf00      	nop
 800cf94:	0801f564 	.word	0x0801f564
 800cf98:	0801f584 	.word	0x0801f584
 800cf9c:	0801f544 	.word	0x0801f544

0800cfa0 <__swsetup_r>:
 800cfa0:	4b32      	ldr	r3, [pc, #200]	; (800d06c <__swsetup_r+0xcc>)
 800cfa2:	b570      	push	{r4, r5, r6, lr}
 800cfa4:	681d      	ldr	r5, [r3, #0]
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	b125      	cbz	r5, 800cfb6 <__swsetup_r+0x16>
 800cfac:	69ab      	ldr	r3, [r5, #24]
 800cfae:	b913      	cbnz	r3, 800cfb6 <__swsetup_r+0x16>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f000 f981 	bl	800d2b8 <__sinit>
 800cfb6:	4b2e      	ldr	r3, [pc, #184]	; (800d070 <__swsetup_r+0xd0>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	d10f      	bne.n	800cfdc <__swsetup_r+0x3c>
 800cfbc:	686c      	ldr	r4, [r5, #4]
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfc4:	0719      	lsls	r1, r3, #28
 800cfc6:	d42c      	bmi.n	800d022 <__swsetup_r+0x82>
 800cfc8:	06dd      	lsls	r5, r3, #27
 800cfca:	d411      	bmi.n	800cff0 <__swsetup_r+0x50>
 800cfcc:	2309      	movs	r3, #9
 800cfce:	6033      	str	r3, [r6, #0]
 800cfd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	e03e      	b.n	800d05a <__swsetup_r+0xba>
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <__swsetup_r+0xd4>)
 800cfde:	429c      	cmp	r4, r3
 800cfe0:	d101      	bne.n	800cfe6 <__swsetup_r+0x46>
 800cfe2:	68ac      	ldr	r4, [r5, #8]
 800cfe4:	e7eb      	b.n	800cfbe <__swsetup_r+0x1e>
 800cfe6:	4b24      	ldr	r3, [pc, #144]	; (800d078 <__swsetup_r+0xd8>)
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	bf08      	it	eq
 800cfec:	68ec      	ldreq	r4, [r5, #12]
 800cfee:	e7e6      	b.n	800cfbe <__swsetup_r+0x1e>
 800cff0:	0758      	lsls	r0, r3, #29
 800cff2:	d512      	bpl.n	800d01a <__swsetup_r+0x7a>
 800cff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cff6:	b141      	cbz	r1, 800d00a <__swsetup_r+0x6a>
 800cff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d002      	beq.n	800d006 <__swsetup_r+0x66>
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff fb2f 	bl	800c664 <_free_r>
 800d006:	2300      	movs	r3, #0
 800d008:	6363      	str	r3, [r4, #52]	; 0x34
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	2300      	movs	r3, #0
 800d014:	6063      	str	r3, [r4, #4]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f043 0308 	orr.w	r3, r3, #8
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	b94b      	cbnz	r3, 800d03a <__swsetup_r+0x9a>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d030:	d003      	beq.n	800d03a <__swsetup_r+0x9a>
 800d032:	4621      	mov	r1, r4
 800d034:	4630      	mov	r0, r6
 800d036:	f000 fa05 	bl	800d444 <__smakebuf_r>
 800d03a:	89a0      	ldrh	r0, [r4, #12]
 800d03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d040:	f010 0301 	ands.w	r3, r0, #1
 800d044:	d00a      	beq.n	800d05c <__swsetup_r+0xbc>
 800d046:	2300      	movs	r3, #0
 800d048:	60a3      	str	r3, [r4, #8]
 800d04a:	6963      	ldr	r3, [r4, #20]
 800d04c:	425b      	negs	r3, r3
 800d04e:	61a3      	str	r3, [r4, #24]
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	b943      	cbnz	r3, 800d066 <__swsetup_r+0xc6>
 800d054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d058:	d1ba      	bne.n	800cfd0 <__swsetup_r+0x30>
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	0781      	lsls	r1, r0, #30
 800d05e:	bf58      	it	pl
 800d060:	6963      	ldrpl	r3, [r4, #20]
 800d062:	60a3      	str	r3, [r4, #8]
 800d064:	e7f4      	b.n	800d050 <__swsetup_r+0xb0>
 800d066:	2000      	movs	r0, #0
 800d068:	e7f7      	b.n	800d05a <__swsetup_r+0xba>
 800d06a:	bf00      	nop
 800d06c:	2000000c 	.word	0x2000000c
 800d070:	0801f564 	.word	0x0801f564
 800d074:	0801f584 	.word	0x0801f584
 800d078:	0801f544 	.word	0x0801f544

0800d07c <abort>:
 800d07c:	2006      	movs	r0, #6
 800d07e:	b508      	push	{r3, lr}
 800d080:	f000 fa50 	bl	800d524 <raise>
 800d084:	2001      	movs	r0, #1
 800d086:	f7f9 f92d 	bl	80062e4 <_exit>
	...

0800d08c <__sflush_r>:
 800d08c:	898a      	ldrh	r2, [r1, #12]
 800d08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d090:	4605      	mov	r5, r0
 800d092:	0710      	lsls	r0, r2, #28
 800d094:	460c      	mov	r4, r1
 800d096:	d457      	bmi.n	800d148 <__sflush_r+0xbc>
 800d098:	684b      	ldr	r3, [r1, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dc04      	bgt.n	800d0a8 <__sflush_r+0x1c>
 800d09e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dc01      	bgt.n	800d0a8 <__sflush_r+0x1c>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	d0fa      	beq.n	800d0a4 <__sflush_r+0x18>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0b4:	682f      	ldr	r7, [r5, #0]
 800d0b6:	602b      	str	r3, [r5, #0]
 800d0b8:	d032      	beq.n	800d120 <__sflush_r+0x94>
 800d0ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	075a      	lsls	r2, r3, #29
 800d0c0:	d505      	bpl.n	800d0ce <__sflush_r+0x42>
 800d0c2:	6863      	ldr	r3, [r4, #4]
 800d0c4:	1ac0      	subs	r0, r0, r3
 800d0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0c8:	b10b      	cbz	r3, 800d0ce <__sflush_r+0x42>
 800d0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0cc:	1ac0      	subs	r0, r0, r3
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	6a21      	ldr	r1, [r4, #32]
 800d0d8:	47b0      	blx	r6
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	d106      	bne.n	800d0ee <__sflush_r+0x62>
 800d0e0:	6829      	ldr	r1, [r5, #0]
 800d0e2:	291d      	cmp	r1, #29
 800d0e4:	d82c      	bhi.n	800d140 <__sflush_r+0xb4>
 800d0e6:	4a29      	ldr	r2, [pc, #164]	; (800d18c <__sflush_r+0x100>)
 800d0e8:	40ca      	lsrs	r2, r1
 800d0ea:	07d6      	lsls	r6, r2, #31
 800d0ec:	d528      	bpl.n	800d140 <__sflush_r+0xb4>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	6062      	str	r2, [r4, #4]
 800d0f2:	6922      	ldr	r2, [r4, #16]
 800d0f4:	04d9      	lsls	r1, r3, #19
 800d0f6:	6022      	str	r2, [r4, #0]
 800d0f8:	d504      	bpl.n	800d104 <__sflush_r+0x78>
 800d0fa:	1c42      	adds	r2, r0, #1
 800d0fc:	d101      	bne.n	800d102 <__sflush_r+0x76>
 800d0fe:	682b      	ldr	r3, [r5, #0]
 800d100:	b903      	cbnz	r3, 800d104 <__sflush_r+0x78>
 800d102:	6560      	str	r0, [r4, #84]	; 0x54
 800d104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d106:	602f      	str	r7, [r5, #0]
 800d108:	2900      	cmp	r1, #0
 800d10a:	d0cb      	beq.n	800d0a4 <__sflush_r+0x18>
 800d10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d110:	4299      	cmp	r1, r3
 800d112:	d002      	beq.n	800d11a <__sflush_r+0x8e>
 800d114:	4628      	mov	r0, r5
 800d116:	f7ff faa5 	bl	800c664 <_free_r>
 800d11a:	2000      	movs	r0, #0
 800d11c:	6360      	str	r0, [r4, #52]	; 0x34
 800d11e:	e7c2      	b.n	800d0a6 <__sflush_r+0x1a>
 800d120:	6a21      	ldr	r1, [r4, #32]
 800d122:	2301      	movs	r3, #1
 800d124:	4628      	mov	r0, r5
 800d126:	47b0      	blx	r6
 800d128:	1c41      	adds	r1, r0, #1
 800d12a:	d1c7      	bne.n	800d0bc <__sflush_r+0x30>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0c4      	beq.n	800d0bc <__sflush_r+0x30>
 800d132:	2b1d      	cmp	r3, #29
 800d134:	d001      	beq.n	800d13a <__sflush_r+0xae>
 800d136:	2b16      	cmp	r3, #22
 800d138:	d101      	bne.n	800d13e <__sflush_r+0xb2>
 800d13a:	602f      	str	r7, [r5, #0]
 800d13c:	e7b2      	b.n	800d0a4 <__sflush_r+0x18>
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	e7ae      	b.n	800d0a6 <__sflush_r+0x1a>
 800d148:	690f      	ldr	r7, [r1, #16]
 800d14a:	2f00      	cmp	r7, #0
 800d14c:	d0aa      	beq.n	800d0a4 <__sflush_r+0x18>
 800d14e:	0793      	lsls	r3, r2, #30
 800d150:	bf18      	it	ne
 800d152:	2300      	movne	r3, #0
 800d154:	680e      	ldr	r6, [r1, #0]
 800d156:	bf08      	it	eq
 800d158:	694b      	ldreq	r3, [r1, #20]
 800d15a:	1bf6      	subs	r6, r6, r7
 800d15c:	600f      	str	r7, [r1, #0]
 800d15e:	608b      	str	r3, [r1, #8]
 800d160:	2e00      	cmp	r6, #0
 800d162:	dd9f      	ble.n	800d0a4 <__sflush_r+0x18>
 800d164:	4633      	mov	r3, r6
 800d166:	463a      	mov	r2, r7
 800d168:	4628      	mov	r0, r5
 800d16a:	6a21      	ldr	r1, [r4, #32]
 800d16c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d170:	47e0      	blx	ip
 800d172:	2800      	cmp	r0, #0
 800d174:	dc06      	bgt.n	800d184 <__sflush_r+0xf8>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	f04f 30ff 	mov.w	r0, #4294967295
 800d17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	e790      	b.n	800d0a6 <__sflush_r+0x1a>
 800d184:	4407      	add	r7, r0
 800d186:	1a36      	subs	r6, r6, r0
 800d188:	e7ea      	b.n	800d160 <__sflush_r+0xd4>
 800d18a:	bf00      	nop
 800d18c:	20400001 	.word	0x20400001

0800d190 <_fflush_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	690b      	ldr	r3, [r1, #16]
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b913      	cbnz	r3, 800d1a0 <_fflush_r+0x10>
 800d19a:	2500      	movs	r5, #0
 800d19c:	4628      	mov	r0, r5
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	b118      	cbz	r0, 800d1aa <_fflush_r+0x1a>
 800d1a2:	6983      	ldr	r3, [r0, #24]
 800d1a4:	b90b      	cbnz	r3, 800d1aa <_fflush_r+0x1a>
 800d1a6:	f000 f887 	bl	800d2b8 <__sinit>
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <_fflush_r+0x6c>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	d11b      	bne.n	800d1e8 <_fflush_r+0x58>
 800d1b0:	686c      	ldr	r4, [r5, #4]
 800d1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0ef      	beq.n	800d19a <_fflush_r+0xa>
 800d1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1bc:	07d0      	lsls	r0, r2, #31
 800d1be:	d404      	bmi.n	800d1ca <_fflush_r+0x3a>
 800d1c0:	0599      	lsls	r1, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_fflush_r+0x3a>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f000 f915 	bl	800d3f4 <__retarget_lock_acquire_recursive>
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	f7ff ff5d 	bl	800d08c <__sflush_r>
 800d1d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	07da      	lsls	r2, r3, #31
 800d1d8:	d4e0      	bmi.n	800d19c <_fflush_r+0xc>
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	059b      	lsls	r3, r3, #22
 800d1de:	d4dd      	bmi.n	800d19c <_fflush_r+0xc>
 800d1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1e2:	f000 f908 	bl	800d3f6 <__retarget_lock_release_recursive>
 800d1e6:	e7d9      	b.n	800d19c <_fflush_r+0xc>
 800d1e8:	4b05      	ldr	r3, [pc, #20]	; (800d200 <_fflush_r+0x70>)
 800d1ea:	429c      	cmp	r4, r3
 800d1ec:	d101      	bne.n	800d1f2 <_fflush_r+0x62>
 800d1ee:	68ac      	ldr	r4, [r5, #8]
 800d1f0:	e7df      	b.n	800d1b2 <_fflush_r+0x22>
 800d1f2:	4b04      	ldr	r3, [pc, #16]	; (800d204 <_fflush_r+0x74>)
 800d1f4:	429c      	cmp	r4, r3
 800d1f6:	bf08      	it	eq
 800d1f8:	68ec      	ldreq	r4, [r5, #12]
 800d1fa:	e7da      	b.n	800d1b2 <_fflush_r+0x22>
 800d1fc:	0801f564 	.word	0x0801f564
 800d200:	0801f584 	.word	0x0801f584
 800d204:	0801f544 	.word	0x0801f544

0800d208 <std>:
 800d208:	2300      	movs	r3, #0
 800d20a:	b510      	push	{r4, lr}
 800d20c:	4604      	mov	r4, r0
 800d20e:	e9c0 3300 	strd	r3, r3, [r0]
 800d212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d216:	6083      	str	r3, [r0, #8]
 800d218:	8181      	strh	r1, [r0, #12]
 800d21a:	6643      	str	r3, [r0, #100]	; 0x64
 800d21c:	81c2      	strh	r2, [r0, #14]
 800d21e:	6183      	str	r3, [r0, #24]
 800d220:	4619      	mov	r1, r3
 800d222:	2208      	movs	r2, #8
 800d224:	305c      	adds	r0, #92	; 0x5c
 800d226:	f7fb fe03 	bl	8008e30 <memset>
 800d22a:	4b05      	ldr	r3, [pc, #20]	; (800d240 <std+0x38>)
 800d22c:	6224      	str	r4, [r4, #32]
 800d22e:	6263      	str	r3, [r4, #36]	; 0x24
 800d230:	4b04      	ldr	r3, [pc, #16]	; (800d244 <std+0x3c>)
 800d232:	62a3      	str	r3, [r4, #40]	; 0x28
 800d234:	4b04      	ldr	r3, [pc, #16]	; (800d248 <std+0x40>)
 800d236:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d238:	4b04      	ldr	r3, [pc, #16]	; (800d24c <std+0x44>)
 800d23a:	6323      	str	r3, [r4, #48]	; 0x30
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	bf00      	nop
 800d240:	0800d55d 	.word	0x0800d55d
 800d244:	0800d57f 	.word	0x0800d57f
 800d248:	0800d5b7 	.word	0x0800d5b7
 800d24c:	0800d5db 	.word	0x0800d5db

0800d250 <_cleanup_r>:
 800d250:	4901      	ldr	r1, [pc, #4]	; (800d258 <_cleanup_r+0x8>)
 800d252:	f000 b8af 	b.w	800d3b4 <_fwalk_reent>
 800d256:	bf00      	nop
 800d258:	0800d191 	.word	0x0800d191

0800d25c <__sfmoreglue>:
 800d25c:	2268      	movs	r2, #104	; 0x68
 800d25e:	b570      	push	{r4, r5, r6, lr}
 800d260:	1e4d      	subs	r5, r1, #1
 800d262:	4355      	muls	r5, r2
 800d264:	460e      	mov	r6, r1
 800d266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d26a:	f7ff fa63 	bl	800c734 <_malloc_r>
 800d26e:	4604      	mov	r4, r0
 800d270:	b140      	cbz	r0, 800d284 <__sfmoreglue+0x28>
 800d272:	2100      	movs	r1, #0
 800d274:	e9c0 1600 	strd	r1, r6, [r0]
 800d278:	300c      	adds	r0, #12
 800d27a:	60a0      	str	r0, [r4, #8]
 800d27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d280:	f7fb fdd6 	bl	8008e30 <memset>
 800d284:	4620      	mov	r0, r4
 800d286:	bd70      	pop	{r4, r5, r6, pc}

0800d288 <__sfp_lock_acquire>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__sfp_lock_acquire+0x8>)
 800d28a:	f000 b8b3 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800d28e:	bf00      	nop
 800d290:	200008f9 	.word	0x200008f9

0800d294 <__sfp_lock_release>:
 800d294:	4801      	ldr	r0, [pc, #4]	; (800d29c <__sfp_lock_release+0x8>)
 800d296:	f000 b8ae 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800d29a:	bf00      	nop
 800d29c:	200008f9 	.word	0x200008f9

0800d2a0 <__sinit_lock_acquire>:
 800d2a0:	4801      	ldr	r0, [pc, #4]	; (800d2a8 <__sinit_lock_acquire+0x8>)
 800d2a2:	f000 b8a7 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800d2a6:	bf00      	nop
 800d2a8:	200008fa 	.word	0x200008fa

0800d2ac <__sinit_lock_release>:
 800d2ac:	4801      	ldr	r0, [pc, #4]	; (800d2b4 <__sinit_lock_release+0x8>)
 800d2ae:	f000 b8a2 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800d2b2:	bf00      	nop
 800d2b4:	200008fa 	.word	0x200008fa

0800d2b8 <__sinit>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	f7ff fff0 	bl	800d2a0 <__sinit_lock_acquire>
 800d2c0:	69a3      	ldr	r3, [r4, #24]
 800d2c2:	b11b      	cbz	r3, 800d2cc <__sinit+0x14>
 800d2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c8:	f7ff bff0 	b.w	800d2ac <__sinit_lock_release>
 800d2cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2d0:	6523      	str	r3, [r4, #80]	; 0x50
 800d2d2:	4b13      	ldr	r3, [pc, #76]	; (800d320 <__sinit+0x68>)
 800d2d4:	4a13      	ldr	r2, [pc, #76]	; (800d324 <__sinit+0x6c>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	bf08      	it	eq
 800d2de:	2301      	moveq	r3, #1
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	bf08      	it	eq
 800d2e4:	61a3      	streq	r3, [r4, #24]
 800d2e6:	f000 f81f 	bl	800d328 <__sfp>
 800d2ea:	6060      	str	r0, [r4, #4]
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 f81b 	bl	800d328 <__sfp>
 800d2f2:	60a0      	str	r0, [r4, #8]
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 f817 	bl	800d328 <__sfp>
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2104      	movs	r1, #4
 800d2fe:	60e0      	str	r0, [r4, #12]
 800d300:	6860      	ldr	r0, [r4, #4]
 800d302:	f7ff ff81 	bl	800d208 <std>
 800d306:	2201      	movs	r2, #1
 800d308:	2109      	movs	r1, #9
 800d30a:	68a0      	ldr	r0, [r4, #8]
 800d30c:	f7ff ff7c 	bl	800d208 <std>
 800d310:	2202      	movs	r2, #2
 800d312:	2112      	movs	r1, #18
 800d314:	68e0      	ldr	r0, [r4, #12]
 800d316:	f7ff ff77 	bl	800d208 <std>
 800d31a:	2301      	movs	r3, #1
 800d31c:	61a3      	str	r3, [r4, #24]
 800d31e:	e7d1      	b.n	800d2c4 <__sinit+0xc>
 800d320:	0801f098 	.word	0x0801f098
 800d324:	0800d251 	.word	0x0800d251

0800d328 <__sfp>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	4607      	mov	r7, r0
 800d32c:	f7ff ffac 	bl	800d288 <__sfp_lock_acquire>
 800d330:	4b1e      	ldr	r3, [pc, #120]	; (800d3ac <__sfp+0x84>)
 800d332:	681e      	ldr	r6, [r3, #0]
 800d334:	69b3      	ldr	r3, [r6, #24]
 800d336:	b913      	cbnz	r3, 800d33e <__sfp+0x16>
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff ffbd 	bl	800d2b8 <__sinit>
 800d33e:	3648      	adds	r6, #72	; 0x48
 800d340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d344:	3b01      	subs	r3, #1
 800d346:	d503      	bpl.n	800d350 <__sfp+0x28>
 800d348:	6833      	ldr	r3, [r6, #0]
 800d34a:	b30b      	cbz	r3, 800d390 <__sfp+0x68>
 800d34c:	6836      	ldr	r6, [r6, #0]
 800d34e:	e7f7      	b.n	800d340 <__sfp+0x18>
 800d350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d354:	b9d5      	cbnz	r5, 800d38c <__sfp+0x64>
 800d356:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <__sfp+0x88>)
 800d358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d35c:	60e3      	str	r3, [r4, #12]
 800d35e:	6665      	str	r5, [r4, #100]	; 0x64
 800d360:	f000 f847 	bl	800d3f2 <__retarget_lock_init_recursive>
 800d364:	f7ff ff96 	bl	800d294 <__sfp_lock_release>
 800d368:	2208      	movs	r2, #8
 800d36a:	4629      	mov	r1, r5
 800d36c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d374:	6025      	str	r5, [r4, #0]
 800d376:	61a5      	str	r5, [r4, #24]
 800d378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d37c:	f7fb fd58 	bl	8008e30 <memset>
 800d380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d388:	4620      	mov	r0, r4
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	3468      	adds	r4, #104	; 0x68
 800d38e:	e7d9      	b.n	800d344 <__sfp+0x1c>
 800d390:	2104      	movs	r1, #4
 800d392:	4638      	mov	r0, r7
 800d394:	f7ff ff62 	bl	800d25c <__sfmoreglue>
 800d398:	4604      	mov	r4, r0
 800d39a:	6030      	str	r0, [r6, #0]
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d1d5      	bne.n	800d34c <__sfp+0x24>
 800d3a0:	f7ff ff78 	bl	800d294 <__sfp_lock_release>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	e7ee      	b.n	800d388 <__sfp+0x60>
 800d3aa:	bf00      	nop
 800d3ac:	0801f098 	.word	0x0801f098
 800d3b0:	ffff0001 	.word	0xffff0001

0800d3b4 <_fwalk_reent>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	4688      	mov	r8, r1
 800d3bc:	2700      	movs	r7, #0
 800d3be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800d3ca:	d505      	bpl.n	800d3d8 <_fwalk_reent+0x24>
 800d3cc:	6824      	ldr	r4, [r4, #0]
 800d3ce:	2c00      	cmp	r4, #0
 800d3d0:	d1f7      	bne.n	800d3c2 <_fwalk_reent+0xe>
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	89ab      	ldrh	r3, [r5, #12]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d907      	bls.n	800d3ee <_fwalk_reent+0x3a>
 800d3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	d003      	beq.n	800d3ee <_fwalk_reent+0x3a>
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	47c0      	blx	r8
 800d3ec:	4307      	orrs	r7, r0
 800d3ee:	3568      	adds	r5, #104	; 0x68
 800d3f0:	e7e9      	b.n	800d3c6 <_fwalk_reent+0x12>

0800d3f2 <__retarget_lock_init_recursive>:
 800d3f2:	4770      	bx	lr

0800d3f4 <__retarget_lock_acquire_recursive>:
 800d3f4:	4770      	bx	lr

0800d3f6 <__retarget_lock_release_recursive>:
 800d3f6:	4770      	bx	lr

0800d3f8 <__swhatbuf_r>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	460e      	mov	r6, r1
 800d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d400:	4614      	mov	r4, r2
 800d402:	2900      	cmp	r1, #0
 800d404:	461d      	mov	r5, r3
 800d406:	b096      	sub	sp, #88	; 0x58
 800d408:	da08      	bge.n	800d41c <__swhatbuf_r+0x24>
 800d40a:	2200      	movs	r2, #0
 800d40c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d410:	602a      	str	r2, [r5, #0]
 800d412:	061a      	lsls	r2, r3, #24
 800d414:	d410      	bmi.n	800d438 <__swhatbuf_r+0x40>
 800d416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d41a:	e00e      	b.n	800d43a <__swhatbuf_r+0x42>
 800d41c:	466a      	mov	r2, sp
 800d41e:	f000 f903 	bl	800d628 <_fstat_r>
 800d422:	2800      	cmp	r0, #0
 800d424:	dbf1      	blt.n	800d40a <__swhatbuf_r+0x12>
 800d426:	9a01      	ldr	r2, [sp, #4]
 800d428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d42c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d430:	425a      	negs	r2, r3
 800d432:	415a      	adcs	r2, r3
 800d434:	602a      	str	r2, [r5, #0]
 800d436:	e7ee      	b.n	800d416 <__swhatbuf_r+0x1e>
 800d438:	2340      	movs	r3, #64	; 0x40
 800d43a:	2000      	movs	r0, #0
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	b016      	add	sp, #88	; 0x58
 800d440:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d444 <__smakebuf_r>:
 800d444:	898b      	ldrh	r3, [r1, #12]
 800d446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d448:	079d      	lsls	r5, r3, #30
 800d44a:	4606      	mov	r6, r0
 800d44c:	460c      	mov	r4, r1
 800d44e:	d507      	bpl.n	800d460 <__smakebuf_r+0x1c>
 800d450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	6123      	str	r3, [r4, #16]
 800d458:	2301      	movs	r3, #1
 800d45a:	6163      	str	r3, [r4, #20]
 800d45c:	b002      	add	sp, #8
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	466a      	mov	r2, sp
 800d462:	ab01      	add	r3, sp, #4
 800d464:	f7ff ffc8 	bl	800d3f8 <__swhatbuf_r>
 800d468:	9900      	ldr	r1, [sp, #0]
 800d46a:	4605      	mov	r5, r0
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff f961 	bl	800c734 <_malloc_r>
 800d472:	b948      	cbnz	r0, 800d488 <__smakebuf_r+0x44>
 800d474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d478:	059a      	lsls	r2, r3, #22
 800d47a:	d4ef      	bmi.n	800d45c <__smakebuf_r+0x18>
 800d47c:	f023 0303 	bic.w	r3, r3, #3
 800d480:	f043 0302 	orr.w	r3, r3, #2
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	e7e3      	b.n	800d450 <__smakebuf_r+0xc>
 800d488:	4b0d      	ldr	r3, [pc, #52]	; (800d4c0 <__smakebuf_r+0x7c>)
 800d48a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	6020      	str	r0, [r4, #0]
 800d490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d494:	81a3      	strh	r3, [r4, #12]
 800d496:	9b00      	ldr	r3, [sp, #0]
 800d498:	6120      	str	r0, [r4, #16]
 800d49a:	6163      	str	r3, [r4, #20]
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	b15b      	cbz	r3, 800d4b8 <__smakebuf_r+0x74>
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4a6:	f000 f8d1 	bl	800d64c <_isatty_r>
 800d4aa:	b128      	cbz	r0, 800d4b8 <__smakebuf_r+0x74>
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f023 0303 	bic.w	r3, r3, #3
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	89a0      	ldrh	r0, [r4, #12]
 800d4ba:	4305      	orrs	r5, r0
 800d4bc:	81a5      	strh	r5, [r4, #12]
 800d4be:	e7cd      	b.n	800d45c <__smakebuf_r+0x18>
 800d4c0:	0800d251 	.word	0x0800d251

0800d4c4 <_malloc_usable_size_r>:
 800d4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c8:	1f18      	subs	r0, r3, #4
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bfbc      	itt	lt
 800d4ce:	580b      	ldrlt	r3, [r1, r0]
 800d4d0:	18c0      	addlt	r0, r0, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_raise_r>:
 800d4d4:	291f      	cmp	r1, #31
 800d4d6:	b538      	push	{r3, r4, r5, lr}
 800d4d8:	4604      	mov	r4, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	d904      	bls.n	800d4e8 <_raise_r+0x14>
 800d4de:	2316      	movs	r3, #22
 800d4e0:	6003      	str	r3, [r0, #0]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4ea:	b112      	cbz	r2, 800d4f2 <_raise_r+0x1e>
 800d4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4f0:	b94b      	cbnz	r3, 800d506 <_raise_r+0x32>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 f830 	bl	800d558 <_getpid_r>
 800d4f8:	462a      	mov	r2, r5
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d502:	f000 b817 	b.w	800d534 <_kill_r>
 800d506:	2b01      	cmp	r3, #1
 800d508:	d00a      	beq.n	800d520 <_raise_r+0x4c>
 800d50a:	1c59      	adds	r1, r3, #1
 800d50c:	d103      	bne.n	800d516 <_raise_r+0x42>
 800d50e:	2316      	movs	r3, #22
 800d510:	6003      	str	r3, [r0, #0]
 800d512:	2001      	movs	r0, #1
 800d514:	e7e7      	b.n	800d4e6 <_raise_r+0x12>
 800d516:	2400      	movs	r4, #0
 800d518:	4628      	mov	r0, r5
 800d51a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d51e:	4798      	blx	r3
 800d520:	2000      	movs	r0, #0
 800d522:	e7e0      	b.n	800d4e6 <_raise_r+0x12>

0800d524 <raise>:
 800d524:	4b02      	ldr	r3, [pc, #8]	; (800d530 <raise+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f7ff bfd3 	b.w	800d4d4 <_raise_r>
 800d52e:	bf00      	nop
 800d530:	2000000c 	.word	0x2000000c

0800d534 <_kill_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	2300      	movs	r3, #0
 800d538:	4d06      	ldr	r5, [pc, #24]	; (800d554 <_kill_r+0x20>)
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	f7f8 fec5 	bl	80062d0 <_kill>
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	d102      	bne.n	800d550 <_kill_r+0x1c>
 800d54a:	682b      	ldr	r3, [r5, #0]
 800d54c:	b103      	cbz	r3, 800d550 <_kill_r+0x1c>
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	bf00      	nop
 800d554:	200008f4 	.word	0x200008f4

0800d558 <_getpid_r>:
 800d558:	f7f8 beb8 	b.w	80062cc <_getpid>

0800d55c <__sread>:
 800d55c:	b510      	push	{r4, lr}
 800d55e:	460c      	mov	r4, r1
 800d560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d564:	f000 f894 	bl	800d690 <_read_r>
 800d568:	2800      	cmp	r0, #0
 800d56a:	bfab      	itete	ge
 800d56c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d56e:	89a3      	ldrhlt	r3, [r4, #12]
 800d570:	181b      	addge	r3, r3, r0
 800d572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d576:	bfac      	ite	ge
 800d578:	6563      	strge	r3, [r4, #84]	; 0x54
 800d57a:	81a3      	strhlt	r3, [r4, #12]
 800d57c:	bd10      	pop	{r4, pc}

0800d57e <__swrite>:
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	461f      	mov	r7, r3
 800d584:	898b      	ldrh	r3, [r1, #12]
 800d586:	4605      	mov	r5, r0
 800d588:	05db      	lsls	r3, r3, #23
 800d58a:	460c      	mov	r4, r1
 800d58c:	4616      	mov	r6, r2
 800d58e:	d505      	bpl.n	800d59c <__swrite+0x1e>
 800d590:	2302      	movs	r3, #2
 800d592:	2200      	movs	r2, #0
 800d594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d598:	f000 f868 	bl	800d66c <_lseek_r>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	4632      	mov	r2, r6
 800d5a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	f000 b817 	b.w	800d5e4 <_write_r>

0800d5b6 <__sseek>:
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5be:	f000 f855 	bl	800d66c <_lseek_r>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	bf15      	itete	ne
 800d5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5d2:	81a3      	strheq	r3, [r4, #12]
 800d5d4:	bf18      	it	ne
 800d5d6:	81a3      	strhne	r3, [r4, #12]
 800d5d8:	bd10      	pop	{r4, pc}

0800d5da <__sclose>:
 800d5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5de:	f000 b813 	b.w	800d608 <_close_r>
	...

0800d5e4 <_write_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	4d05      	ldr	r5, [pc, #20]	; (800d604 <_write_r+0x20>)
 800d5f0:	602a      	str	r2, [r5, #0]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f7f8 fe8a 	bl	800630c <_write>
 800d5f8:	1c43      	adds	r3, r0, #1
 800d5fa:	d102      	bne.n	800d602 <_write_r+0x1e>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	b103      	cbz	r3, 800d602 <_write_r+0x1e>
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	200008f4 	.word	0x200008f4

0800d608 <_close_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	2300      	movs	r3, #0
 800d60c:	4d05      	ldr	r5, [pc, #20]	; (800d624 <_close_r+0x1c>)
 800d60e:	4604      	mov	r4, r0
 800d610:	4608      	mov	r0, r1
 800d612:	602b      	str	r3, [r5, #0]
 800d614:	f7f8 fe88 	bl	8006328 <_close>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d102      	bne.n	800d622 <_close_r+0x1a>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	b103      	cbz	r3, 800d622 <_close_r+0x1a>
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	bd38      	pop	{r3, r4, r5, pc}
 800d624:	200008f4 	.word	0x200008f4

0800d628 <_fstat_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	2300      	movs	r3, #0
 800d62c:	4d06      	ldr	r5, [pc, #24]	; (800d648 <_fstat_r+0x20>)
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	f7f8 fe7b 	bl	8006330 <_fstat>
 800d63a:	1c43      	adds	r3, r0, #1
 800d63c:	d102      	bne.n	800d644 <_fstat_r+0x1c>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	b103      	cbz	r3, 800d644 <_fstat_r+0x1c>
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	200008f4 	.word	0x200008f4

0800d64c <_isatty_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	2300      	movs	r3, #0
 800d650:	4d05      	ldr	r5, [pc, #20]	; (800d668 <_isatty_r+0x1c>)
 800d652:	4604      	mov	r4, r0
 800d654:	4608      	mov	r0, r1
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	f7f8 fe70 	bl	800633c <_isatty>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_isatty_r+0x1a>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_isatty_r+0x1a>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	200008f4 	.word	0x200008f4

0800d66c <_lseek_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	4611      	mov	r1, r2
 800d674:	2200      	movs	r2, #0
 800d676:	4d05      	ldr	r5, [pc, #20]	; (800d68c <_lseek_r+0x20>)
 800d678:	602a      	str	r2, [r5, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	f7f8 fe60 	bl	8006340 <_lseek>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	d102      	bne.n	800d68a <_lseek_r+0x1e>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	b103      	cbz	r3, 800d68a <_lseek_r+0x1e>
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	200008f4 	.word	0x200008f4

0800d690 <_read_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4604      	mov	r4, r0
 800d694:	4608      	mov	r0, r1
 800d696:	4611      	mov	r1, r2
 800d698:	2200      	movs	r2, #0
 800d69a:	4d05      	ldr	r5, [pc, #20]	; (800d6b0 <_read_r+0x20>)
 800d69c:	602a      	str	r2, [r5, #0]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f7f8 fe26 	bl	80062f0 <_read>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d102      	bne.n	800d6ae <_read_r+0x1e>
 800d6a8:	682b      	ldr	r3, [r5, #0]
 800d6aa:	b103      	cbz	r3, 800d6ae <_read_r+0x1e>
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	bd38      	pop	{r3, r4, r5, pc}
 800d6b0:	200008f4 	.word	0x200008f4
 800d6b4:	00000000 	.word	0x00000000

0800d6b8 <floor>:
 800d6b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800d6c2:	2d13      	cmp	r5, #19
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	4684      	mov	ip, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	dc30      	bgt.n	800d730 <floor+0x78>
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	db1e      	blt.n	800d710 <floor+0x58>
 800d6d2:	4f35      	ldr	r7, [pc, #212]	; (800d7a8 <floor+0xf0>)
 800d6d4:	412f      	asrs	r7, r5
 800d6d6:	ea01 0207 	and.w	r2, r1, r7
 800d6da:	4302      	orrs	r2, r0
 800d6dc:	d015      	beq.n	800d70a <floor+0x52>
 800d6de:	a330      	add	r3, pc, #192	; (adr r3, 800d7a0 <floor+0xe8>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f7f8 fe64 	bl	80063b0 <__adddf3>
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f7f9 faa6 	bl	8006c3c <__aeabi_dcmpgt>
 800d6f0:	b148      	cbz	r0, 800d706 <floor+0x4e>
 800d6f2:	2c00      	cmp	r4, #0
 800d6f4:	da04      	bge.n	800d700 <floor+0x48>
 800d6f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d6fa:	fa43 f505 	asr.w	r5, r3, r5
 800d6fe:	442c      	add	r4, r5
 800d700:	2600      	movs	r6, #0
 800d702:	ea24 0407 	bic.w	r4, r4, r7
 800d706:	4623      	mov	r3, r4
 800d708:	46b4      	mov	ip, r6
 800d70a:	4660      	mov	r0, ip
 800d70c:	4619      	mov	r1, r3
 800d70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d710:	a323      	add	r3, pc, #140	; (adr r3, 800d7a0 <floor+0xe8>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f8 fe4b 	bl	80063b0 <__adddf3>
 800d71a:	2200      	movs	r2, #0
 800d71c:	2300      	movs	r3, #0
 800d71e:	f7f9 fa8d 	bl	8006c3c <__aeabi_dcmpgt>
 800d722:	2800      	cmp	r0, #0
 800d724:	d0ef      	beq.n	800d706 <floor+0x4e>
 800d726:	2c00      	cmp	r4, #0
 800d728:	db24      	blt.n	800d774 <floor+0xbc>
 800d72a:	2600      	movs	r6, #0
 800d72c:	4634      	mov	r4, r6
 800d72e:	e7ea      	b.n	800d706 <floor+0x4e>
 800d730:	2d33      	cmp	r5, #51	; 0x33
 800d732:	dd08      	ble.n	800d746 <floor+0x8e>
 800d734:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d738:	d1e7      	bne.n	800d70a <floor+0x52>
 800d73a:	4602      	mov	r2, r0
 800d73c:	f7f8 fe38 	bl	80063b0 <__adddf3>
 800d740:	4684      	mov	ip, r0
 800d742:	460b      	mov	r3, r1
 800d744:	e7e1      	b.n	800d70a <floor+0x52>
 800d746:	f04f 37ff 	mov.w	r7, #4294967295
 800d74a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d74e:	40d7      	lsrs	r7, r2
 800d750:	4207      	tst	r7, r0
 800d752:	d0da      	beq.n	800d70a <floor+0x52>
 800d754:	a312      	add	r3, pc, #72	; (adr r3, 800d7a0 <floor+0xe8>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f7f8 fe29 	bl	80063b0 <__adddf3>
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	f7f9 fa6b 	bl	8006c3c <__aeabi_dcmpgt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d0cd      	beq.n	800d706 <floor+0x4e>
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	db0b      	blt.n	800d786 <floor+0xce>
 800d76e:	ea26 0607 	bic.w	r6, r6, r7
 800d772:	e7c8      	b.n	800d706 <floor+0x4e>
 800d774:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d778:	4a0c      	ldr	r2, [pc, #48]	; (800d7ac <floor+0xf4>)
 800d77a:	431e      	orrs	r6, r3
 800d77c:	2e00      	cmp	r6, #0
 800d77e:	bf18      	it	ne
 800d780:	4614      	movne	r4, r2
 800d782:	2600      	movs	r6, #0
 800d784:	e7bf      	b.n	800d706 <floor+0x4e>
 800d786:	2d14      	cmp	r5, #20
 800d788:	d008      	beq.n	800d79c <floor+0xe4>
 800d78a:	2301      	movs	r3, #1
 800d78c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800d790:	fa03 f505 	lsl.w	r5, r3, r5
 800d794:	19ae      	adds	r6, r5, r6
 800d796:	bf28      	it	cs
 800d798:	18e4      	addcs	r4, r4, r3
 800d79a:	e7e8      	b.n	800d76e <floor+0xb6>
 800d79c:	3401      	adds	r4, #1
 800d79e:	e7e6      	b.n	800d76e <floor+0xb6>
 800d7a0:	8800759c 	.word	0x8800759c
 800d7a4:	7e37e43c 	.word	0x7e37e43c
 800d7a8:	000fffff 	.word	0x000fffff
 800d7ac:	bff00000 	.word	0xbff00000

0800d7b0 <_init>:
 800d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b2:	bf00      	nop
 800d7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b6:	bc08      	pop	{r3}
 800d7b8:	469e      	mov	lr, r3
 800d7ba:	4770      	bx	lr

0800d7bc <_fini>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	bf00      	nop
 800d7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c2:	bc08      	pop	{r3}
 800d7c4:	469e      	mov	lr, r3
 800d7c6:	4770      	bx	lr
