
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010edc  0800cd58  0800cd58  0001cd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc34  0801dc34  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801dc34  0801dc34  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801dc34  0801dc34  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc34  0801dc34  0002dc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc38  0801dc38  0002dc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801dc3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001e0  0801de1c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0801de1c  000306d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dff1  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a62  00000000  00000000  0004e1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e50a  00000000  00000000  0004fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0006e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b340  00000000  00000000  0006e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011abf  00000000  00000000  000794f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c6c  00000000  00000000  0008afb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00113c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cbc  00000000  00000000  00113c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018d12  00000000  00000000  00115928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd40 	.word	0x0800cd40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800cd40 	.word	0x0800cd40

08000150 <LCD_Send_Cmd>:
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
	if ((val&0x01)==1)        DB_00_S else DB_00_R
}

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000154:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000158:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800015c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000160:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000164:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000168:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800016c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <LCD_Send_Cmd+0xb4>)
 8000172:	4a25      	ldr	r2, [pc, #148]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000174:	4f25      	ldr	r7, [pc, #148]	; (800020c <LCD_Send_Cmd+0xbc>)
 8000176:	6139      	str	r1, [r7, #16]
 8000178:	f8c7 8010 	str.w	r8, [r7, #16]
 800017c:	6116      	str	r6, [r2, #16]
 800017e:	6111      	str	r1, [r2, #16]
 8000180:	611c      	str	r4, [r3, #16]
 8000182:	611d      	str	r5, [r3, #16]
 8000184:	611e      	str	r6, [r3, #16]
 8000186:	6119      	str	r1, [r3, #16]
 8000188:	f8c3 e010 	str.w	lr, [r3, #16]
 800018c:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000190:	0943      	lsrs	r3, r0, #5
 8000192:	6115      	str	r5, [r2, #16]
 8000194:	6114      	str	r4, [r2, #16]
 8000196:	d02e      	beq.n	80001f6 <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 8000198:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800019a:	0903      	lsrs	r3, r0, #4
 800019c:	2b02      	cmp	r3, #2
 800019e:	6111      	str	r1, [r2, #16]
 80001a0:	d12c      	bne.n	80001fc <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80001a6:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001a8:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001aa:	bf4c      	ite	mi
 80001ac:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ae:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001b4:	0741      	lsls	r1, r0, #29
 80001b6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001b8:	bf4c      	ite	mi
 80001ba:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001bc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80001c2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80001c6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001d2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80001d4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80001d6:	bf4c      	ite	mi
 80001d8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001da:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001e4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <LCD_Send_Cmd+0xbc>)
 80001ec:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001ee:	6119      	str	r1, [r3, #16]
 80001f0:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 80001f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fa:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001fc:	2220      	movs	r2, #32
 80001fe:	4b02      	ldr	r3, [pc, #8]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000200:	611a      	str	r2, [r3, #16]
  }
}
 8000202:	e7d1      	b.n	80001a8 <LCD_Send_Cmd+0x58>
 8000204:	40011000 	.word	0x40011000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000214:	2101      	movs	r1, #1
 8000216:	4b3f      	ldr	r3, [pc, #252]	; (8000314 <LCD_Send_Dat+0x104>)
 8000218:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800021a:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800021c:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800021e:	bf14      	ite	ne
 8000220:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000222:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 8000226:	4b3c      	ldr	r3, [pc, #240]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000228:	0441      	lsls	r1, r0, #17
 800022a:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800022c:	bf4c      	ite	mi
 800022e:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000230:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <LCD_Send_Dat+0x108>)
 8000236:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000238:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800023a:	bf4c      	ite	mi
 800023c:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800023e:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000242:	4b36      	ldr	r3, [pc, #216]	; (800031c <LCD_Send_Dat+0x10c>)
 8000244:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8000246:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 8000248:	bf4c      	ite	mi
 800024a:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800024c:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000250:	4b32      	ldr	r3, [pc, #200]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000252:	0501      	lsls	r1, r0, #20
 8000254:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000256:	bf4c      	ite	mi
 8000258:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800025a:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <LCD_Send_Dat+0x10c>)
 8000260:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000262:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000264:	bf4c      	ite	mi
 8000266:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000268:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <LCD_Send_Dat+0x10c>)
 800026e:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000270:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000272:	bf4c      	ite	mi
 8000274:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000278:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800027e:	05c1      	lsls	r1, r0, #23
 8000280:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000282:	bf4c      	ite	mi
 8000284:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000288:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <LCD_Send_Dat+0x10c>)
 800028e:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000290:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000292:	bf4c      	ite	mi
 8000294:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000296:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800029a:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <LCD_Send_Dat+0x108>)
 800029c:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800029e:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80002a0:	bf4c      	ite	mi
 80002a2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002aa:	0681      	lsls	r1, r0, #26
 80002ac:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ae:	bf4c      	ite	mi
 80002b0:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b2:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <LCD_Send_Dat+0x108>)
 80002b8:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80002ba:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80002bc:	bf4c      	ite	mi
 80002be:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <LCD_Send_Dat+0x108>)
 80002c6:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002c8:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002ca:	bf4c      	ite	mi
 80002cc:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ce:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002d4:	0741      	lsls	r1, r0, #29
 80002d6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002d8:	bf4c      	ite	mi
 80002da:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002dc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80002e2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002e4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002e6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002e8:	bf4c      	ite	mi
 80002ea:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ec:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LCD_Send_Dat+0x10c>)
 80002f2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002f4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002f6:	bf4c      	ite	mi
 80002f8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002fa:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <LCD_Send_Dat+0x10c>)
 8000300:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000304:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000306:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030a:	4b02      	ldr	r3, [pc, #8]	; (8000314 <LCD_Send_Dat+0x104>)
 800030c:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800030e:	6119      	str	r1, [r3, #16]
 8000310:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40010800 	.word	0x40010800
 800031c:	40011000 	.word	0x40011000

08000320 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000324:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000328:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800032c:	468b      	mov	fp, r1
 800032e:	49ab      	ldr	r1, [pc, #684]	; (80005dc <LCD_Window+0x2bc>)
 8000330:	b085      	sub	sp, #20
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000338:	610d      	str	r5, [r1, #16]
 800033a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800033e:	610c      	str	r4, [r1, #16]
 8000340:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000344:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8000348:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800034c:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000350:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000354:	4ba2      	ldr	r3, [pc, #648]	; (80005e0 <LCD_Window+0x2c0>)
 8000356:	4696      	mov	lr, r2
 8000358:	4aa2      	ldr	r2, [pc, #648]	; (80005e4 <LCD_Window+0x2c4>)
 800035a:	6116      	str	r6, [r2, #16]
 800035c:	6115      	str	r5, [r2, #16]
 800035e:	f8c3 c010 	str.w	ip, [r3, #16]
 8000362:	611f      	str	r7, [r3, #16]
 8000364:	611e      	str	r6, [r3, #16]
 8000366:	611d      	str	r5, [r3, #16]
 8000368:	f8c3 9010 	str.w	r9, [r3, #16]
 800036c:	f8c3 a010 	str.w	sl, [r3, #16]
 8000370:	6117      	str	r7, [r2, #16]
 8000372:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000376:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800037c:	2440      	movs	r4, #64	; 0x40
 800037e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000380:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000384:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000386:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800038e:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000392:	611c      	str	r4, [r3, #16]
 8000394:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000396:	f8c1 8010 	str.w	r8, [r1, #16]
 800039a:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800039e:	f8c1 8010 	str.w	r8, [r1, #16]
 80003a2:	f04f 0801 	mov.w	r8, #1
 80003a6:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003aa:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80003ae:	f8c1 8010 	str.w	r8, [r1, #16]
 80003b2:	6116      	str	r6, [r2, #16]
 80003b4:	6115      	str	r5, [r2, #16]
 80003b6:	f8c3 c010 	str.w	ip, [r3, #16]
 80003ba:	611f      	str	r7, [r3, #16]
 80003bc:	611e      	str	r6, [r3, #16]
 80003be:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80003c0:	fa5f f58e 	uxtb.w	r5, lr
 80003c4:	f8c3 9010 	str.w	r9, [r3, #16]
 80003c8:	f8c3 a010 	str.w	sl, [r3, #16]
 80003cc:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003ce:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	bf18      	it	ne
 80003d2:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80003d4:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80003d8:	bf14      	ite	ne
 80003da:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003dc:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003de:	0667      	lsls	r7, r4, #25
 80003e0:	bf54      	ite	pl
 80003e2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80003e6:	2508      	movmi	r5, #8
 80003e8:	4a7e      	ldr	r2, [pc, #504]	; (80005e4 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80003ea:	4621      	mov	r1, r4
 80003ec:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80003ee:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	bf54      	ite	pl
 80003f2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80003f6:	2510      	movmi	r5, #16
 80003f8:	4a7a      	ldr	r2, [pc, #488]	; (80005e4 <LCD_Window+0x2c4>)
 80003fa:	f04f 0a02 	mov.w	sl, #2
 80003fe:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000400:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000402:	bf54      	ite	pl
 8000404:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000408:	2520      	movmi	r5, #32
 800040a:	4a76      	ldr	r2, [pc, #472]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800040c:	0727      	lsls	r7, r4, #28
 800040e:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000410:	bf54      	ite	pl
 8000412:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000416:	2540      	movmi	r5, #64	; 0x40
 8000418:	4a72      	ldr	r2, [pc, #456]	; (80005e4 <LCD_Window+0x2c4>)
 800041a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800041e:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000420:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000422:	bf54      	ite	pl
 8000424:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000428:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800042a:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800042c:	bf54      	ite	pl
 800042e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000432:	2410      	movmi	r4, #16
 8000434:	4a6b      	ldr	r2, [pc, #428]	; (80005e4 <LCD_Window+0x2c4>)
 8000436:	f04f 0801 	mov.w	r8, #1
 800043a:	6115      	str	r5, [r2, #16]
 800043c:	4a68      	ldr	r2, [pc, #416]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800043e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000442:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000444:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000446:	bf54      	ite	pl
 8000448:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800044c:	2120      	movmi	r1, #32
 800044e:	4a64      	ldr	r2, [pc, #400]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000450:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000454:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000456:	4961      	ldr	r1, [pc, #388]	; (80005dc <LCD_Window+0x2bc>)
 8000458:	4a61      	ldr	r2, [pc, #388]	; (80005e0 <LCD_Window+0x2c0>)
 800045a:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800045c:	f8c1 a010 	str.w	sl, [r1, #16]
 8000460:	f8c1 9010 	str.w	r9, [r1, #16]
 8000464:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000468:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800046c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000474:	4c5b      	ldr	r4, [pc, #364]	; (80005e4 <LCD_Window+0x2c4>)
 8000476:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800047a:	6125      	str	r5, [r4, #16]
 800047c:	6127      	str	r7, [r4, #16]
 800047e:	6111      	str	r1, [r2, #16]
 8000480:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000484:	f8c2 c010 	str.w	ip, [r2, #16]
 8000488:	6115      	str	r5, [r2, #16]
 800048a:	6117      	str	r7, [r2, #16]
 800048c:	6111      	str	r1, [r2, #16]
 800048e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000492:	b2c6      	uxtb	r6, r0
 8000494:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000496:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 8000498:	bf16      	itet	ne
 800049a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049c:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004a0:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004a2:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004a4:	bf54      	ite	pl
 80004a6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004aa:	2108      	movmi	r1, #8
 80004ac:	4a4d      	ldr	r2, [pc, #308]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004ae:	0685      	lsls	r5, r0, #26
 80004b0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b2:	bf54      	ite	pl
 80004b4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004b8:	2110      	movmi	r1, #16
 80004ba:	4a4a      	ldr	r2, [pc, #296]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80004bc:	06c4      	lsls	r4, r0, #27
 80004be:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004c0:	bf54      	ite	pl
 80004c2:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004c6:	2120      	movmi	r1, #32
 80004c8:	4a46      	ldr	r2, [pc, #280]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ca:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80004ce:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80004d0:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004d2:	bf54      	ite	pl
 80004d4:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80004d8:	2140      	movmi	r1, #64	; 0x40
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <LCD_Window+0x2c4>)
 80004dc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80004e0:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80004e2:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e4:	bf54      	ite	pl
 80004e6:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80004ea:	2180      	movmi	r1, #128	; 0x80
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80004ee:	0787      	lsls	r7, r0, #30
 80004f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f2:	bf54      	ite	pl
 80004f4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004f8:	2110      	movmi	r1, #16
 80004fa:	4a39      	ldr	r2, [pc, #228]	; (80005e0 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80004fc:	07f5      	lsls	r5, r6, #31
 80004fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000500:	bf54      	ite	pl
 8000502:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000506:	2120      	movmi	r1, #32
 8000508:	2702      	movs	r7, #2
 800050a:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800050e:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000512:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000518:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800051a:	4930      	ldr	r1, [pc, #192]	; (80005dc <LCD_Window+0x2bc>)
 800051c:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <LCD_Window+0x2c0>)
 800051e:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000520:	610f      	str	r7, [r1, #16]
 8000522:	f8c1 a010 	str.w	sl, [r1, #16]
 8000526:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052a:	f8c1 8010 	str.w	r8, [r1, #16]
 800052e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000532:	482c      	ldr	r0, [pc, #176]	; (80005e4 <LCD_Window+0x2c4>)
 8000534:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000538:	6104      	str	r4, [r0, #16]
 800053a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800053e:	6105      	str	r5, [r0, #16]
 8000540:	6111      	str	r1, [r2, #16]
 8000542:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000546:	6116      	str	r6, [r2, #16]
 8000548:	6114      	str	r4, [r2, #16]
 800054a:	6115      	str	r5, [r2, #16]
 800054c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000550:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000552:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000556:	bf18      	it	ne
 8000558:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800055a:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055e:	bf0c      	ite	eq
 8000560:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000562:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000564:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000566:	bf54      	ite	pl
 8000568:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800056c:	2108      	movmi	r1, #8
 800056e:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000570:	0698      	lsls	r0, r3, #26
 8000572:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000574:	bf54      	ite	pl
 8000576:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800057a:	2110      	movmi	r1, #16
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000582:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000584:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000586:	bf54      	ite	pl
 8000588:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800058c:	2120      	movmi	r1, #32
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <LCD_Window+0x2c4>)
 8000590:	f04f 0a02 	mov.w	sl, #2
 8000594:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000596:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000598:	bf54      	ite	pl
 800059a:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800059e:	2140      	movmi	r1, #64	; 0x40
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005a2:	075f      	lsls	r7, r3, #29
 80005a4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a6:	bf54      	ite	pl
 80005a8:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005ac:	2180      	movmi	r1, #128	; 0x80
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005b0:	079e      	lsls	r6, r3, #30
 80005b2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b4:	bf54      	ite	pl
 80005b6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005ba:	2210      	movmi	r2, #16
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LCD_Window+0x2c0>)
 80005be:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80005c2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005c4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80005c8:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005cc:	bf0c      	ite	eq
 80005ce:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005d2:	2220      	movne	r2, #32
 80005d4:	f04f 0801 	mov.w	r8, #1
 80005d8:	e006      	b.n	80005e8 <LCD_Window+0x2c8>
 80005da:	bf00      	nop
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	4bac      	ldr	r3, [pc, #688]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ea:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80005ee:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005f0:	4aab      	ldr	r2, [pc, #684]	; (80008a0 <LCD_Window+0x580>)
 80005f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80005f6:	6110      	str	r0, [r2, #16]
 80005f8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80005fc:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000600:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000604:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000608:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800060c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000610:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000614:	4ba1      	ldr	r3, [pc, #644]	; (800089c <LCD_Window+0x57c>)
 8000616:	49a3      	ldr	r1, [pc, #652]	; (80008a4 <LCD_Window+0x584>)
 8000618:	f8c2 8010 	str.w	r8, [r2, #16]
 800061c:	6108      	str	r0, [r1, #16]
 800061e:	610c      	str	r4, [r1, #16]
 8000620:	f8c3 c010 	str.w	ip, [r3, #16]
 8000624:	611d      	str	r5, [r3, #16]
 8000626:	6118      	str	r0, [r3, #16]
 8000628:	611c      	str	r4, [r3, #16]
 800062a:	611f      	str	r7, [r3, #16]
 800062c:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800062e:	fa5f f38e 	uxtb.w	r3, lr
 8000632:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000634:	bf16      	itet	ne
 8000636:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000638:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800063a:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800063c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000640:	bf14      	ite	ne
 8000642:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000644:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000648:	4b96      	ldr	r3, [pc, #600]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800064a:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000650:	bf14      	ite	ne
 8000652:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000654:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000658:	4b92      	ldr	r3, [pc, #584]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800065a:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000660:	bf14      	ite	ne
 8000662:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000664:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000668:	4b8e      	ldr	r3, [pc, #568]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800066a:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000670:	bf14      	ite	ne
 8000672:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000674:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000678:	4b8a      	ldr	r3, [pc, #552]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800067a:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000680:	bf14      	ite	ne
 8000682:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000684:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000688:	4b86      	ldr	r3, [pc, #536]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800068a:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800068e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000690:	bf14      	ite	ne
 8000692:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000694:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000698:	4b80      	ldr	r3, [pc, #512]	; (800089c <LCD_Window+0x57c>)
 800069a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800069e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006a0:	9b02      	ldr	r3, [sp, #8]
 80006a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006a6:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80006a8:	bf4c      	ite	mi
 80006aa:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ac:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80006b0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006b4:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006b8:	f04f 0802 	mov.w	r8, #2
 80006bc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80006c4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80006c8:	4b74      	ldr	r3, [pc, #464]	; (800089c <LCD_Window+0x57c>)
 80006ca:	4975      	ldr	r1, [pc, #468]	; (80008a0 <LCD_Window+0x580>)
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <LCD_Window+0x57c>)
 80006d0:	4a74      	ldr	r2, [pc, #464]	; (80008a4 <LCD_Window+0x584>)
 80006d2:	6108      	str	r0, [r1, #16]
 80006d4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80006d8:	f8c1 8010 	str.w	r8, [r1, #16]
 80006dc:	f04f 0910 	mov.w	r9, #16
 80006e0:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e4:	610c      	str	r4, [r1, #16]
 80006e6:	f8c1 c010 	str.w	ip, [r1, #16]
 80006ea:	6110      	str	r0, [r2, #16]
 80006ec:	6114      	str	r4, [r2, #16]
 80006ee:	611d      	str	r5, [r3, #16]
 80006f0:	611e      	str	r6, [r3, #16]
 80006f2:	6118      	str	r0, [r3, #16]
 80006f4:	611c      	str	r4, [r3, #16]
 80006f6:	611f      	str	r7, [r3, #16]
 80006f8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80006fc:	f8c3 a010 	str.w	sl, [r3, #16]
 8000700:	6116      	str	r6, [r2, #16]
 8000702:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000704:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000708:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800070a:	2740      	movs	r7, #64	; 0x40
 800070c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070e:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000712:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000714:	2720      	movs	r7, #32
 8000716:	f8c3 9010 	str.w	r9, [r3, #16]
 800071a:	611f      	str	r7, [r3, #16]
 800071c:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000720:	f8c1 8010 	str.w	r8, [r1, #16]
 8000724:	f8c1 e010 	str.w	lr, [r1, #16]
 8000728:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072a:	f8c1 c010 	str.w	ip, [r1, #16]
 800072e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000732:	6110      	str	r0, [r2, #16]
 8000734:	6114      	str	r4, [r2, #16]
 8000736:	611d      	str	r5, [r3, #16]
 8000738:	611e      	str	r6, [r3, #16]
 800073a:	6118      	str	r0, [r3, #16]
 800073c:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 800073e:	9c01      	ldr	r4, [sp, #4]
 8000740:	6119      	str	r1, [r3, #16]
 8000742:	f8c3 a010 	str.w	sl, [r3, #16]
 8000746:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000748:	b2e4      	uxtb	r4, r4
 800074a:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800074c:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000750:	bf18      	it	ne
 8000752:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000754:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	bf14      	ite	ne
 800075c:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800075e:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000760:	064c      	lsls	r4, r1, #25
 8000762:	bf54      	ite	pl
 8000764:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000768:	2408      	movmi	r4, #8
 800076a:	4a4e      	ldr	r2, [pc, #312]	; (80008a4 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 800076c:	4608      	mov	r0, r1
 800076e:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000770:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	bf54      	ite	pl
 8000774:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000778:	2410      	movmi	r4, #16
 800077a:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800077c:	06cf      	lsls	r7, r1, #27
 800077e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000780:	bf54      	ite	pl
 8000782:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000786:	2420      	movmi	r4, #32
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800078a:	070e      	lsls	r6, r1, #28
 800078c:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800078e:	bf54      	ite	pl
 8000790:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000794:	2440      	movmi	r4, #64	; 0x40
 8000796:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <LCD_Window+0x584>)
 8000798:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800079c:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800079e:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a0:	bf54      	ite	pl
 80007a2:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007a6:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007a8:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007aa:	bf54      	ite	pl
 80007ac:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007b0:	2110      	movmi	r1, #16
 80007b2:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <LCD_Window+0x584>)
 80007b4:	f04f 0901 	mov.w	r9, #1
 80007b8:	6114      	str	r4, [r2, #16]
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007bc:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80007c0:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007c2:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c4:	bf54      	ite	pl
 80007c6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007ca:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007cc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80007d0:	f04f 0c02 	mov.w	ip, #2
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80007da:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007dc:	4930      	ldr	r1, [pc, #192]	; (80008a0 <LCD_Window+0x580>)
 80007de:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80007e2:	610c      	str	r4, [r1, #16]
 80007e4:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007e8:	f8c1 c010 	str.w	ip, [r1, #16]
 80007ec:	f8c1 a010 	str.w	sl, [r1, #16]
 80007f0:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f4:	f8c1 8010 	str.w	r8, [r1, #16]
 80007f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <LCD_Window+0x57c>)
 80007fe:	4829      	ldr	r0, [pc, #164]	; (80008a4 <LCD_Window+0x584>)
  data[1] = y1;
 8000800:	fa5f f58b 	uxtb.w	r5, fp
 8000804:	6104      	str	r4, [r0, #16]
 8000806:	6106      	str	r6, [r0, #16]
 8000808:	f8c2 e010 	str.w	lr, [r2, #16]
 800080c:	6117      	str	r7, [r2, #16]
 800080e:	6114      	str	r4, [r2, #16]
 8000810:	6116      	str	r6, [r2, #16]
 8000812:	6111      	str	r1, [r2, #16]
 8000814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000818:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800081a:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 800081c:	bf16      	itet	ne
 800081e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000820:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000822:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000824:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000828:	bf0c      	ite	eq
 800082a:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800082e:	2108      	movne	r1, #8
 8000830:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000832:	f01b 0f20 	tst.w	fp, #32
 8000836:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000838:	bf0c      	ite	eq
 800083a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800083e:	2110      	movne	r1, #16
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000842:	f01b 0f10 	tst.w	fp, #16
 8000846:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000848:	bf0c      	ite	eq
 800084a:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800084e:	2120      	movne	r1, #32
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000852:	f01b 0f08 	tst.w	fp, #8
 8000856:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000858:	bf0c      	ite	eq
 800085a:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800085e:	2140      	movne	r1, #64	; 0x40
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000862:	f01b 0f04 	tst.w	fp, #4
 8000866:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000868:	bf0c      	ite	eq
 800086a:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800086e:	2180      	movne	r1, #128	; 0x80
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000872:	f01b 0f02 	tst.w	fp, #2
 8000876:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000878:	bf0c      	ite	eq
 800087a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800087e:	2110      	movne	r1, #16
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000882:	07ef      	lsls	r7, r5, #31
 8000884:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000886:	bf54      	ite	pl
 8000888:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800088c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8000892:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000896:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800089a:	e005      	b.n	80008a8 <LCD_Window+0x588>
 800089c:	40011000 	.word	0x40011000
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40010800 	.word	0x40010800
 80008a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80008ac:	f04f 0b02 	mov.w	fp, #2
 80008b0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008b4:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80008bc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80008c0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80008c4:	4a7d      	ldr	r2, [pc, #500]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c6:	487e      	ldr	r0, [pc, #504]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80008c8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ca:	497e      	ldr	r1, [pc, #504]	; (8000ac4 <LCD_Window+0x7a4>)
 80008cc:	4a7b      	ldr	r2, [pc, #492]	; (8000abc <LCD_Window+0x79c>)
 80008ce:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008d0:	f8c1 b010 	str.w	fp, [r1, #16]
 80008d4:	f8c1 a010 	str.w	sl, [r1, #16]
 80008d8:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008dc:	f8c1 8010 	str.w	r8, [r1, #16]
 80008e0:	6104      	str	r4, [r0, #16]
 80008e2:	6105      	str	r5, [r0, #16]
 80008e4:	f8c2 e010 	str.w	lr, [r2, #16]
 80008e8:	6116      	str	r6, [r2, #16]
 80008ea:	6114      	str	r4, [r2, #16]
 80008ec:	6115      	str	r5, [r2, #16]
 80008ee:	f8c2 c010 	str.w	ip, [r2, #16]
 80008f2:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80008f4:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 80008f6:	f04f 0a02 	mov.w	sl, #2
 80008fa:	0bd2      	lsrs	r2, r2, #15
 80008fc:	bf16      	itet	ne
 80008fe:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000900:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000902:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000904:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000906:	bf54      	ite	pl
 8000908:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800090c:	2108      	movmi	r1, #8
 800090e:	4a6c      	ldr	r2, [pc, #432]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000910:	069d      	lsls	r5, r3, #26
 8000912:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000914:	bf54      	ite	pl
 8000916:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800091a:	2110      	movmi	r1, #16
 800091c:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800091e:	06dc      	lsls	r4, r3, #27
 8000920:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000922:	bf54      	ite	pl
 8000924:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000928:	2120      	movmi	r1, #32
 800092a:	4a65      	ldr	r2, [pc, #404]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800092c:	0718      	lsls	r0, r3, #28
 800092e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000930:	bf54      	ite	pl
 8000932:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000936:	2140      	movmi	r1, #64	; 0x40
 8000938:	4a61      	ldr	r2, [pc, #388]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800093a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800093e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000940:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000942:	bf54      	ite	pl
 8000944:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000948:	2180      	movmi	r1, #128	; 0x80
 800094a:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800094c:	079b      	lsls	r3, r3, #30
 800094e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000950:	bf54      	ite	pl
 8000952:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000956:	2210      	movmi	r2, #16
 8000958:	4b58      	ldr	r3, [pc, #352]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800095e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000960:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000962:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000966:	07df      	lsls	r7, r3, #31
 8000968:	bf54      	ite	pl
 800096a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800096e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000970:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000974:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000978:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000980:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000984:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000988:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098a:	494d      	ldr	r1, [pc, #308]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 800098c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098e:	4a4d      	ldr	r2, [pc, #308]	; (8000ac4 <LCD_Window+0x7a4>)
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <LCD_Window+0x79c>)
 8000992:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000994:	f8c2 a010 	str.w	sl, [r2, #16]
 8000998:	f8c2 9010 	str.w	r9, [r2, #16]
 800099c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a0:	f8c2 e010 	str.w	lr, [r2, #16]
 80009a4:	6108      	str	r0, [r1, #16]
 80009a6:	610c      	str	r4, [r1, #16]
 80009a8:	f8c3 c010 	str.w	ip, [r3, #16]
 80009ac:	611d      	str	r5, [r3, #16]
 80009ae:	6118      	str	r0, [r3, #16]
 80009b0:	611c      	str	r4, [r3, #16]
 80009b2:	611f      	str	r7, [r3, #16]
 80009b4:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009b6:	9b02      	ldr	r3, [sp, #8]
 80009b8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009bc:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80009be:	bf1c      	itt	ne
 80009c0:	2304      	movne	r3, #4
 80009c2:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80009c4:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c6:	bf08      	it	eq
 80009c8:	610d      	streq	r5, [r1, #16]
 80009ca:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80009cc:	bf4c      	ite	mi
 80009ce:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d0:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009d6:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80009e0:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 80009e2:	bf4c      	ite	mi
 80009e4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80009f8:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	bf4c      	ite	mi
 80009fc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a04:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000a08:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000a10:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000a12:	bf4c      	ite	mi
 8000a14:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a16:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a20:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000a28:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000a2a:	bf4c      	ite	mi
 8000a2c:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2e:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a34:	4922      	ldr	r1, [pc, #136]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a36:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a38:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	f04f 0910 	mov.w	r9, #16
 8000a3e:	079a      	lsls	r2, r3, #30
 8000a40:	bf4c      	ite	mi
 8000a42:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a44:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000a4a:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a50:	9b02      	ldr	r3, [sp, #8]
 8000a52:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000a54:	bf4c      	ite	mi
 8000a56:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a58:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <LCD_Window+0x79c>)
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <LCD_Window+0x7a4>)
 8000a66:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a68:	611e      	str	r6, [r3, #16]
 8000a6a:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	611c      	str	r4, [r3, #16]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000a74:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000a78:	6108      	str	r0, [r1, #16]
 8000a7a:	610c      	str	r4, [r1, #16]
 8000a7c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a80:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a84:	6110      	str	r0, [r2, #16]
 8000a86:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a88:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8a:	f8c2 b010 	str.w	fp, [r2, #16]
 8000a8e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000a92:	f8c1 e010 	str.w	lr, [r1, #16]
 8000a96:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9e:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000aa0:	f8c1 8010 	str.w	r8, [r1, #16]
 8000aa4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000aaa:	6111      	str	r1, [r2, #16]
 8000aac:	6117      	str	r7, [r2, #16]
 8000aae:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ab0:	611e      	str	r6, [r3, #16]
 8000ab2:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000ab4:	b005      	add	sp, #20
 8000ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aba:	bf00      	nop
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000acc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000ad0:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000ad4:	4caf      	ldr	r4, [pc, #700]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000ad6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000ada:	6125      	str	r5, [r4, #16]
 8000adc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ae0:	f8c4 a010 	str.w	sl, [r4, #16]
 8000ae4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ae8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000aec:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000af0:	4681      	mov	r9, r0
 8000af2:	4696      	mov	lr, r2
 8000af4:	48a8      	ldr	r0, [pc, #672]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000af6:	4aa9      	ldr	r2, [pc, #676]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000af8:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afe:	6105      	str	r5, [r0, #16]
 8000b00:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b04:	6117      	str	r7, [r2, #16]
 8000b06:	6116      	str	r6, [r2, #16]
 8000b08:	6115      	str	r5, [r2, #16]
 8000b0a:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b0e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b12:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000b16:	6107      	str	r7, [r0, #16]
 8000b18:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b1c:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b20:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b24:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b28:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b2c:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000b30:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b34:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b38:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b3c:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b44:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b4a:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000b52:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b56:	f04f 0b01 	mov.w	fp, #1
 8000b5a:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000b62:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b66:	6106      	str	r6, [r0, #16]
 8000b68:	6105      	str	r5, [r0, #16]
 8000b6a:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b6e:	6117      	str	r7, [r2, #16]
 8000b70:	6116      	str	r6, [r2, #16]
 8000b72:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b74:	1e4d      	subs	r5, r1, #1
 8000b76:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b78:	fb03 f30e 	mul.w	r3, r3, lr
 8000b7c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b80:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b84:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000b88:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8a:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b8c:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8e:	b293      	uxth	r3, r2
 8000b90:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000b92:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b96:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000b98:	b2ed      	uxtb	r5, r5
 8000b9a:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000b9c:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	bf18      	it	ne
 8000ba0:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000ba2:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000ba6:	9204      	str	r2, [sp, #16]
 8000ba8:	bf14      	ite	ne
 8000baa:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bac:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000bae:	0667      	lsls	r7, r4, #25
 8000bb0:	bf54      	ite	pl
 8000bb2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	2508      	movmi	r5, #8
 8000bb8:	4877      	ldr	r0, [pc, #476]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000bba:	4626      	mov	r6, r4
 8000bbc:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000bbe:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc0:	bf54      	ite	pl
 8000bc2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000bc6:	2510      	movmi	r5, #16
 8000bc8:	4873      	ldr	r0, [pc, #460]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bca:	f04f 0b02 	mov.w	fp, #2
 8000bce:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000bd0:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd2:	bf54      	ite	pl
 8000bd4:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000bd8:	2520      	movmi	r5, #32
 8000bda:	486f      	ldr	r0, [pc, #444]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000bdc:	0727      	lsls	r7, r4, #28
 8000bde:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be0:	bf54      	ite	pl
 8000be2:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000be6:	2540      	movmi	r5, #64	; 0x40
 8000be8:	486b      	ldr	r0, [pc, #428]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bea:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000bee:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000bf0:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf2:	bf54      	ite	pl
 8000bf4:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000bf8:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000bfa:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfc:	bf54      	ite	pl
 8000bfe:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	2410      	movmi	r4, #16
 8000c04:	4864      	ldr	r0, [pc, #400]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c0a:	6105      	str	r5, [r0, #16]
 8000c0c:	4863      	ldr	r0, [pc, #396]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000c14:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c16:	bf54      	ite	pl
 8000c18:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c1c:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000c22:	485e      	ldr	r0, [pc, #376]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c24:	4d5c      	ldr	r5, [pc, #368]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c28:	4c5a      	ldr	r4, [pc, #360]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000c2a:	485c      	ldr	r0, [pc, #368]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000c2c:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c2e:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c32:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c36:	f04f 0a01 	mov.w	sl, #1
 8000c3a:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3e:	f8c4 8010 	str.w	r8, [r4, #16]
 8000c42:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000c46:	612e      	str	r6, [r5, #16]
 8000c48:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000c4c:	612f      	str	r7, [r5, #16]
 8000c4e:	6104      	str	r4, [r0, #16]
 8000c50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000c54:	f8c0 e010 	str.w	lr, [r0, #16]
 8000c58:	6106      	str	r6, [r0, #16]
 8000c5a:	6107      	str	r7, [r0, #16]
 8000c5c:	6104      	str	r4, [r0, #16]
 8000c5e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000c62:	fa5f fc81 	uxtb.w	ip, r1
 8000c66:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000c68:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000c6c:	bf16      	itet	ne
 8000c6e:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c70:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c74:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000c76:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c78:	bf54      	ite	pl
 8000c7a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	2408      	movmi	r4, #8
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000c82:	068e      	lsls	r6, r1, #26
 8000c84:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c86:	bf54      	ite	pl
 8000c88:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c8c:	2410      	movmi	r4, #16
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000c90:	06cd      	lsls	r5, r1, #27
 8000c92:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c94:	bf54      	ite	pl
 8000c96:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c9a:	2420      	movmi	r4, #32
 8000c9c:	483e      	ldr	r0, [pc, #248]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ca4:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	bf54      	ite	pl
 8000ca8:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cac:	2440      	movmi	r4, #64	; 0x40
 8000cae:	483a      	ldr	r0, [pc, #232]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000cb0:	f04f 0b02 	mov.w	fp, #2
 8000cb4:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cb6:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb8:	bf54      	ite	pl
 8000cba:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	2480      	movmi	r4, #128	; 0x80
 8000cc0:	4835      	ldr	r0, [pc, #212]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cc2:	078f      	lsls	r7, r1, #30
 8000cc4:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc6:	bf54      	ite	pl
 8000cc8:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ccc:	2010      	movmi	r0, #16
 8000cce:	4933      	ldr	r1, [pc, #204]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000cd0:	f01c 0f01 	tst.w	ip, #1
 8000cd4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	bf0c      	ite	eq
 8000cd8:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cdc:	2020      	movne	r0, #32
 8000cde:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000ce2:	492e      	ldr	r1, [pc, #184]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000ce8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	482a      	ldr	r0, [pc, #168]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000cec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000cf0:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000cf2:	f8c0 b010 	str.w	fp, [r0, #16]
 8000cf6:	f8c0 a010 	str.w	sl, [r0, #16]
 8000cfa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000d0a:	f8c0 8010 	str.w	r8, [r0, #16]
 8000d0e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000d12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000d18:	4c1f      	ldr	r4, [pc, #124]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d1a:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1e:	6125      	str	r5, [r4, #16]
 8000d20:	6126      	str	r6, [r4, #16]
 8000d22:	f8c1 e010 	str.w	lr, [r1, #16]
 8000d26:	610f      	str	r7, [r1, #16]
 8000d28:	610d      	str	r5, [r1, #16]
 8000d2a:	610e      	str	r6, [r1, #16]
 8000d2c:	6108      	str	r0, [r1, #16]
 8000d2e:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d32:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d34:	bf16      	itet	ne
 8000d36:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d38:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d3a:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d3c:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	bf54      	ite	pl
 8000d40:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	2008      	movmi	r0, #8
 8000d46:	4914      	ldr	r1, [pc, #80]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d48:	0695      	lsls	r5, r2, #26
 8000d4a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	bf54      	ite	pl
 8000d4e:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	2010      	movmi	r0, #16
 8000d54:	4910      	ldr	r1, [pc, #64]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d56:	06d4      	lsls	r4, r2, #27
 8000d58:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5a:	bf54      	ite	pl
 8000d5c:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d60:	2020      	movmi	r0, #32
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d64:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d68:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d6a:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6c:	bf54      	ite	pl
 8000d6e:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d72:	2040      	movmi	r0, #64	; 0x40
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000d76:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d7a:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d7c:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7e:	bf54      	ite	pl
 8000d80:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d84:	2080      	movmi	r0, #128	; 0x80
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d88:	0797      	lsls	r7, r2, #30
 8000d8a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8c:	bf58      	it	pl
 8000d8e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000d92:	e005      	b.n	8000da0 <LCD_Rect_Fill+0x2d8>
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000da0:	bf48      	it	mi
 8000da2:	2110      	movmi	r1, #16
 8000da4:	4aa9      	ldr	r2, [pc, #676]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000daa:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dac:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000db2:	07d6      	lsls	r6, r2, #31
 8000db4:	bf54      	ite	pl
 8000db6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000dba:	2120      	movmi	r1, #32
 8000dbc:	4aa3      	ldr	r2, [pc, #652]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc4:	49a2      	ldr	r1, [pc, #648]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000dc6:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000dca:	610c      	str	r4, [r1, #16]
 8000dcc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000dd8:	f8c1 a010 	str.w	sl, [r1, #16]
 8000ddc:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de0:	4a9a      	ldr	r2, [pc, #616]	; (800104c <LCD_Rect_Fill+0x584>)
 8000de2:	489c      	ldr	r0, [pc, #624]	; (8001054 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000de4:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f8c1 8010 	str.w	r8, [r1, #16]
 8000dec:	6104      	str	r4, [r0, #16]
 8000dee:	6105      	str	r5, [r0, #16]
 8000df0:	f8c2 e010 	str.w	lr, [r2, #16]
 8000df4:	6116      	str	r6, [r2, #16]
 8000df6:	6114      	str	r4, [r2, #16]
 8000df8:	6115      	str	r5, [r2, #16]
 8000dfa:	f8c2 c010 	str.w	ip, [r2, #16]
 8000dfe:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e00:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	f04f 0e02 	mov.w	lr, #2
 8000e06:	09d2      	lsrs	r2, r2, #7
 8000e08:	bf16      	itet	ne
 8000e0a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0c:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e10:	065d      	lsls	r5, r3, #25
 8000e12:	bf4c      	ite	mi
 8000e14:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e16:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000e1a:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e1c:	069c      	lsls	r4, r3, #26
 8000e1e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e20:	bf4c      	ite	mi
 8000e22:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e28:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e2a:	06d8      	lsls	r0, r3, #27
 8000e2c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	bf4c      	ite	mi
 8000e30:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000e36:	4a87      	ldr	r2, [pc, #540]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e3c:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e3e:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000e40:	bf4c      	ite	mi
 8000e42:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e44:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000e48:	4a82      	ldr	r2, [pc, #520]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e4a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000e4e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e50:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000e52:	bf4c      	ite	mi
 8000e54:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e5c:	079f      	lsls	r7, r3, #30
 8000e5e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e60:	bf4c      	ite	mi
 8000e62:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e64:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000e68:	4b78      	ldr	r3, [pc, #480]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000e76:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	bf14      	ite	ne
 8000e7c:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e82:	4973      	ldr	r1, [pc, #460]	; (8001050 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	4b71      	ldr	r3, [pc, #452]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000e90:	6108      	str	r0, [r1, #16]
 8000e92:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000ea2:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea6:	610c      	str	r4, [r1, #16]
 8000ea8:	610f      	str	r7, [r1, #16]
 8000eaa:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <LCD_Rect_Fill+0x584>)
 8000eb0:	4a68      	ldr	r2, [pc, #416]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000eb2:	6110      	str	r0, [r2, #16]
 8000eb4:	6114      	str	r4, [r2, #16]
 8000eb6:	611d      	str	r5, [r3, #16]
 8000eb8:	611e      	str	r6, [r3, #16]
 8000eba:	6118      	str	r0, [r3, #16]
 8000ebc:	611c      	str	r4, [r3, #16]
 8000ebe:	f8c3 a010 	str.w	sl, [r3, #16]
 8000ec2:	f8c3 b010 	str.w	fp, [r3, #16]
 8000ec6:	6116      	str	r6, [r2, #16]
 8000ec8:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ece:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ed0:	2740      	movs	r7, #64	; 0x40
 8000ed2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed4:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000ed8:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	2720      	movs	r7, #32
 8000edc:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ee0:	611f      	str	r7, [r3, #16]
 8000ee2:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	f8c1 e010 	str.w	lr, [r1, #16]
 8000eea:	f8c1 c010 	str.w	ip, [r1, #16]
 8000eee:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef0:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000ef4:	610f      	str	r7, [r1, #16]
 8000ef6:	6110      	str	r0, [r2, #16]
 8000ef8:	6114      	str	r4, [r2, #16]
 8000efa:	611d      	str	r5, [r3, #16]
 8000efc:	611e      	str	r6, [r3, #16]
 8000efe:	6118      	str	r0, [r3, #16]
 8000f00:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8000f02:	9c02      	ldr	r4, [sp, #8]
 8000f04:	f8c3 a010 	str.w	sl, [r3, #16]
 8000f08:	f8c3 b010 	str.w	fp, [r3, #16]
 8000f0c:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000f0e:	b2e4      	uxtb	r4, r4
 8000f10:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f12:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	bf18      	it	ne
 8000f18:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000f1a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	bf14      	ite	ne
 8000f22:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f24:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f26:	064e      	lsls	r6, r1, #25
 8000f28:	bf54      	ite	pl
 8000f2a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	2408      	movmi	r4, #8
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8000f32:	4608      	mov	r0, r1
 8000f34:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f36:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	bf54      	ite	pl
 8000f3a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	2410      	movmi	r4, #16
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f42:	f04f 0b02 	mov.w	fp, #2
 8000f46:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f48:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4a:	bf54      	ite	pl
 8000f4c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	2420      	movmi	r4, #32
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f54:	070f      	lsls	r7, r1, #28
 8000f56:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f58:	bf54      	ite	pl
 8000f5a:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	2440      	movmi	r4, #64	; 0x40
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f62:	074e      	lsls	r6, r1, #29
 8000f64:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	bf54      	ite	pl
 8000f68:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000f6c:	2480      	movmi	r4, #128	; 0x80
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f70:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000f74:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f76:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	bf54      	ite	pl
 8000f7a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	2110      	movmi	r1, #16
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f88:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8a:	bf54      	ite	pl
 8000f8c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f90:	2120      	movmi	r1, #32
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f94:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000f98:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000f9c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000fa0:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	f8c1 b010 	str.w	fp, [r1, #16]
 8000fa6:	f8c1 a010 	str.w	sl, [r1, #16]
 8000faa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb6:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000fba:	f8c1 8010 	str.w	r8, [r1, #16]
 8000fbe:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000fc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <LCD_Rect_Fill+0x584>)
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000fca:	fa5f f589 	uxtb.w	r5, r9
 8000fce:	6104      	str	r4, [r0, #16]
 8000fd0:	6106      	str	r6, [r0, #16]
 8000fd2:	f8c2 e010 	str.w	lr, [r2, #16]
 8000fd6:	6117      	str	r7, [r2, #16]
 8000fd8:	6114      	str	r4, [r2, #16]
 8000fda:	6116      	str	r6, [r2, #16]
 8000fdc:	6111      	str	r1, [r2, #16]
 8000fde:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000fe2:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000fe4:	bf16      	itet	ne
 8000fe6:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe8:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000fec:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff0:	bf0c      	ite	eq
 8000ff2:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	2108      	movne	r1, #8
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000ffa:	f019 0f20 	tst.w	r9, #32
 8000ffe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001000:	bf0c      	ite	eq
 8001002:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001006:	2110      	movne	r1, #16
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800100a:	f019 0f10 	tst.w	r9, #16
 800100e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	bf0c      	ite	eq
 8001012:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001016:	2120      	movne	r1, #32
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800101a:	f019 0f08 	tst.w	r9, #8
 800101e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001020:	bf0c      	ite	eq
 8001022:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001026:	2140      	movne	r1, #64	; 0x40
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800102a:	f019 0f04 	tst.w	r9, #4
 800102e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001030:	bf0c      	ite	eq
 8001032:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001036:	2180      	movne	r1, #128	; 0x80
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800103a:	f019 0f02 	tst.w	r9, #2
 800103e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	bf0c      	ite	eq
 8001042:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001046:	2110      	movne	r1, #16
 8001048:	e006      	b.n	8001058 <LCD_Rect_Fill+0x590>
 800104a:	bf00      	nop
 800104c:	40011000 	.word	0x40011000
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010800 	.word	0x40010800
 8001058:	4ab5      	ldr	r2, [pc, #724]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800105e:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001060:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	bf54      	ite	pl
 8001064:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001068:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800106e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001072:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001076:	f04f 0b02 	mov.w	fp, #2
 800107a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800107e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001082:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8001086:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800108a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800108e:	4aa8      	ldr	r2, [pc, #672]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	48a8      	ldr	r0, [pc, #672]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001092:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001094:	49a8      	ldr	r1, [pc, #672]	; (8001338 <LCD_Rect_Fill+0x870>)
 8001096:	4aa6      	ldr	r2, [pc, #664]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001098:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800109a:	f8c1 b010 	str.w	fp, [r1, #16]
 800109e:	f8c1 a010 	str.w	sl, [r1, #16]
 80010a2:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a6:	f8c1 8010 	str.w	r8, [r1, #16]
 80010aa:	6104      	str	r4, [r0, #16]
 80010ac:	6105      	str	r5, [r0, #16]
 80010ae:	f8c2 e010 	str.w	lr, [r2, #16]
 80010b2:	6116      	str	r6, [r2, #16]
 80010b4:	6114      	str	r4, [r2, #16]
 80010b6:	6115      	str	r5, [r2, #16]
 80010b8:	f8c2 c010 	str.w	ip, [r2, #16]
 80010bc:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010be:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80010c0:	f04f 0a02 	mov.w	sl, #2
 80010c4:	0bd2      	lsrs	r2, r2, #15
 80010c6:	bf16      	itet	ne
 80010c8:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ca:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010cc:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010ce:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d0:	bf54      	ite	pl
 80010d2:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	2108      	movmi	r1, #8
 80010d8:	4a96      	ldr	r2, [pc, #600]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010da:	069e      	lsls	r6, r3, #26
 80010dc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	bf54      	ite	pl
 80010e0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010e4:	2110      	movmi	r1, #16
 80010e6:	4a93      	ldr	r2, [pc, #588]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010e8:	06dd      	lsls	r5, r3, #27
 80010ea:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ec:	bf54      	ite	pl
 80010ee:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	2120      	movmi	r1, #32
 80010f4:	4a8f      	ldr	r2, [pc, #572]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80010f6:	071c      	lsls	r4, r3, #28
 80010f8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fa:	bf54      	ite	pl
 80010fc:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001100:	2140      	movmi	r1, #64	; 0x40
 8001102:	4a8c      	ldr	r2, [pc, #560]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001104:	0758      	lsls	r0, r3, #29
 8001106:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001108:	bf54      	ite	pl
 800110a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800110e:	2180      	movmi	r1, #128	; 0x80
 8001110:	4a88      	ldr	r2, [pc, #544]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001116:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001118:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	bf54      	ite	pl
 800111c:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001120:	2210      	movmi	r2, #16
 8001122:	4b83      	ldr	r3, [pc, #524]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001124:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8001128:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800112a:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001130:	f013 0f01 	tst.w	r3, #1
 8001134:	bf0c      	ite	eq
 8001136:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800113a:	2220      	movne	r2, #32
 800113c:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001140:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001144:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8001148:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800114c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001150:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001154:	4b76      	ldr	r3, [pc, #472]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001156:	4977      	ldr	r1, [pc, #476]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001158:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <LCD_Rect_Fill+0x870>)
 800115c:	4b74      	ldr	r3, [pc, #464]	; (8001330 <LCD_Rect_Fill+0x868>)
 800115e:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001160:	f8c2 a010 	str.w	sl, [r2, #16]
 8001164:	f8c2 9010 	str.w	r9, [r2, #16]
 8001168:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116c:	f8c2 e010 	str.w	lr, [r2, #16]
 8001170:	6108      	str	r0, [r1, #16]
 8001172:	610c      	str	r4, [r1, #16]
 8001174:	f8c3 c010 	str.w	ip, [r3, #16]
 8001178:	611d      	str	r5, [r3, #16]
 800117a:	6118      	str	r0, [r3, #16]
 800117c:	611c      	str	r4, [r3, #16]
 800117e:	611f      	str	r7, [r3, #16]
 8001180:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001188:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800118a:	bf1c      	itt	ne
 800118c:	2304      	movne	r3, #4
 800118e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001190:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	bf08      	it	eq
 8001194:	610d      	streq	r5, [r1, #16]
 8001196:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 800119a:	bf14      	ite	ne
 800119c:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	4b64      	ldr	r3, [pc, #400]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011aa:	9b02      	ldr	r3, [sp, #8]
 80011ac:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80011b0:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80011b4:	bf14      	ite	ne
 80011b6:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011be:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011c2:	9b02      	ldr	r3, [sp, #8]
 80011c4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80011c8:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80011cc:	bf14      	ite	ne
 80011ce:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80011da:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011dc:	9b02      	ldr	r3, [sp, #8]
 80011de:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80011e2:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	bf14      	ite	ne
 80011e8:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f0:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80011f4:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80011f6:	9b02      	ldr	r3, [sp, #8]
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <LCD_Rect_Fill+0x870>)
 80011fa:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	bf14      	ite	ne
 8001200:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001202:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001208:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800120c:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800120e:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001210:	f04f 0910 	mov.w	r9, #16
 8001214:	079a      	lsls	r2, r3, #30
 8001216:	bf4c      	ite	mi
 8001218:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001220:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001224:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800122a:	bf4c      	ite	mi
 800122c:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800123a:	6108      	str	r0, [r1, #16]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 800123e:	610c      	str	r4, [r1, #16]
 8001240:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	f8c1 e010 	str.w	lr, [r1, #16]
 8001246:	610b      	str	r3, [r1, #16]
 8001248:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 800124c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001250:	6118      	str	r0, [r3, #16]
 8001252:	f8c3 e010 	str.w	lr, [r3, #16]
 8001256:	f8c2 c010 	str.w	ip, [r2, #16]
 800125a:	6117      	str	r7, [r2, #16]
 800125c:	6110      	str	r0, [r2, #16]
 800125e:	f8c2 e010 	str.w	lr, [r2, #16]
 8001262:	f8c2 b010 	str.w	fp, [r2, #16]
 8001266:	f8c2 a010 	str.w	sl, [r2, #16]
 800126a:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800126c:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126e:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001272:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001276:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001278:	f8c3 8010 	str.w	r8, [r3, #16]
 800127c:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001282:	6117      	str	r7, [r2, #16]
 8001284:	6116      	str	r6, [r2, #16]
 8001286:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001288:	610c      	str	r4, [r1, #16]
 800128a:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800128c:	9d01      	ldr	r5, [sp, #4]
 800128e:	2d00      	cmp	r5, #0
 8001290:	f000 80c8 	beq.w	8001424 <LCD_Rect_Fill+0x95c>
 8001294:	2500      	movs	r5, #0
 8001296:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001298:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800129a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800129e:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80012a2:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80012a6:	017f      	lsls	r7, r7, #5
 80012a8:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80012ac:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80012b0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80012b8:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80012bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80012c0:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80012c4:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80012c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80012cc:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80012d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80012d4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80012d8:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80012dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80012e4:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80012e8:	f3c9 1900 	ubfx	r9, r9, #4, #1
 80012ec:	f8cd 801c 	str.w	r8, [sp, #28]
 80012f0:	f3c7 2800 	ubfx	r8, r7, #8, #1
 80012f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80012f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80012fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001300:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001304:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8001308:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 800130c:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001310:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001314:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8001318:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800131c:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001320:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001324:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8001328:	f3c8 1880 	ubfx	r8, r8, #6, #1
 800132c:	e006      	b.n	800133c <LCD_Rect_Fill+0x874>
 800132e:	bf00      	nop
 8001330:	40011000 	.word	0x40011000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001340:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	610f      	str	r7, [r1, #16]
 8001344:	f1bc 0f00 	cmp.w	ip, #0
 8001348:	f000 80ac 	beq.w	80014a4 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800134c:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800134e:	611c      	str	r4, [r3, #16]
 8001350:	2f00      	cmp	r7, #0
 8001352:	f000 80ac 	beq.w	80014ae <LCD_Rect_Fill+0x9e6>
 8001356:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001358:	9f03      	ldr	r7, [sp, #12]
 800135a:	2f00      	cmp	r7, #0
 800135c:	f000 809e 	beq.w	800149c <LCD_Rect_Fill+0x9d4>
 8001360:	f04f 0908 	mov.w	r9, #8
 8001364:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001368:	9f04      	ldr	r7, [sp, #16]
 800136a:	2f00      	cmp	r7, #0
 800136c:	f000 8091 	beq.w	8001492 <LCD_Rect_Fill+0x9ca>
 8001370:	f04f 0904 	mov.w	r9, #4
 8001374:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001378:	9f05      	ldr	r7, [sp, #20]
 800137a:	2f00      	cmp	r7, #0
 800137c:	f000 8087 	beq.w	800148e <LCD_Rect_Fill+0x9c6>
 8001380:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001382:	9f06      	ldr	r7, [sp, #24]
 8001384:	2f00      	cmp	r7, #0
 8001386:	d07f      	beq.n	8001488 <LCD_Rect_Fill+0x9c0>
 8001388:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800138a:	9f07      	ldr	r7, [sp, #28]
 800138c:	2f00      	cmp	r7, #0
 800138e:	d076      	beq.n	800147e <LCD_Rect_Fill+0x9b6>
 8001390:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001394:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001398:	9f08      	ldr	r7, [sp, #32]
 800139a:	2f00      	cmp	r7, #0
 800139c:	d06a      	beq.n	8001474 <LCD_Rect_Fill+0x9ac>
 800139e:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80013a2:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80013a6:	f1ba 0f00 	cmp.w	sl, #0
 80013aa:	d05e      	beq.n	800146a <LCD_Rect_Fill+0x9a2>
 80013ac:	f04f 0904 	mov.w	r9, #4
 80013b0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80013b4:	f1bb 0f00 	cmp.w	fp, #0
 80013b8:	d053      	beq.n	8001462 <LCD_Rect_Fill+0x99a>
 80013ba:	f04f 0908 	mov.w	r9, #8
 80013be:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80013c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	d047      	beq.n	8001458 <LCD_Rect_Fill+0x990>
 80013c8:	f04f 0910 	mov.w	r9, #16
 80013cc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80013d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80013d2:	2f00      	cmp	r7, #0
 80013d4:	d03b      	beq.n	800144e <LCD_Rect_Fill+0x986>
 80013d6:	f04f 0920 	mov.w	r9, #32
 80013da:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d02f      	beq.n	8001444 <LCD_Rect_Fill+0x97c>
 80013e4:	f04f 0940 	mov.w	r9, #64	; 0x40
 80013e8:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80013ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80013ee:	b327      	cbz	r7, 800143a <LCD_Rect_Fill+0x972>
 80013f0:	f04f 0980 	mov.w	r9, #128	; 0x80
 80013f4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80013f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80013fa:	b1cf      	cbz	r7, 8001430 <LCD_Rect_Fill+0x968>
 80013fc:	f04f 0910 	mov.w	r9, #16
 8001400:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001404:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001406:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001408:	b17f      	cbz	r7, 800142a <LCD_Rect_Fill+0x962>
 800140a:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140e:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001412:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001416:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001418:	6108      	str	r0, [r1, #16]
 800141a:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 800141c:	610c      	str	r4, [r1, #16]
 800141e:	f8c1 9010 	str.w	r9, [r1, #16]
 8001422:	d18b      	bne.n	800133c <LCD_Rect_Fill+0x874>
}
 8001424:	b00f      	add	sp, #60	; 0x3c
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800142e:	e7ee      	b.n	800140e <LCD_Rect_Fill+0x946>
 8001430:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001434:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001438:	e7e4      	b.n	8001404 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143a:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800143e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001442:	e7d9      	b.n	80013f8 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001444:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 8001448:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800144c:	e7ce      	b.n	80013ec <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001452:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001456:	e7c2      	b.n	80013de <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001458:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 800145c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001460:	e7b6      	b.n	80013d0 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8001466:	611f      	str	r7, [r3, #16]
}
 8001468:	e7ab      	b.n	80013c2 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146a:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 800146e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001472:	e79f      	b.n	80013b4 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001474:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8001478:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800147c:	e793      	b.n	80013a6 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001482:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001486:	e787      	b.n	8001398 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001488:	f8c2 e010 	str.w	lr, [r2, #16]
}
 800148c:	e77d      	b.n	800138a <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800148e:	6110      	str	r0, [r2, #16]
}
 8001490:	e777      	b.n	8001382 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001496:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800149a:	e76d      	b.n	8001378 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80014a0:	6117      	str	r7, [r2, #16]
}
 80014a2:	e761      	b.n	8001368 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014a4:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	6118      	str	r0, [r3, #16]
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	f47f af54 	bne.w	8001356 <LCD_Rect_Fill+0x88e>
 80014ae:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80014b2:	e751      	b.n	8001358 <LCD_Rect_Fill+0x890>

080014b4 <HAL_GPIO_Init>:
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	680e      	ldr	r6, [r1, #0]
{
 80014ba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	2e00      	cmp	r6, #0
 80014be:	f000 80b2 	beq.w	8001626 <HAL_GPIO_Init+0x172>
 80014c2:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4f74      	ldr	r7, [pc, #464]	; (8001698 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80014c6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80014c8:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4d74      	ldr	r5, [pc, #464]	; (800169c <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80014cc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80016a0 <HAL_GPIO_Init+0x1ec>
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x2c>
	position++;
 80014d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80014d8:	f102 0204 	add.w	r2, r2, #4
 80014dc:	f000 80a3 	beq.w	8001626 <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80014e0:	2401      	movs	r4, #1
 80014e2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80014e4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80014ec:	d1f1      	bne.n	80014d2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80014ee:	684e      	ldr	r6, [r1, #4]
 80014f0:	2e12      	cmp	r6, #18
 80014f2:	f200 809b 	bhi.w	800162c <HAL_GPIO_Init+0x178>
 80014f6:	2e12      	cmp	r6, #18
 80014f8:	d81a      	bhi.n	8001530 <HAL_GPIO_Init+0x7c>
 80014fa:	e8df f006 	tbb	[pc, r6]
 80014fe:	baa4      	.short	0xbaa4
 8001500:	1919c3b6 	.word	0x1919c3b6
 8001504:	19191919 	.word	0x19191919
 8001508:	19191919 	.word	0x19191919
 800150c:	ae191919 	.word	0xae191919
 8001510:	b2          	.byte	0xb2
 8001511:	00          	.byte	0x00
 8001512:	f8df e190 	ldr.w	lr, [pc, #400]	; 80016a4 <HAL_GPIO_Init+0x1f0>
 8001516:	4576      	cmp	r6, lr
 8001518:	f000 8095 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 800151c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001520:	4576      	cmp	r6, lr
 8001522:	f000 8090 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 8001526:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800152a:	4576      	cmp	r6, lr
 800152c:	f000 808b 	beq.w	8001646 <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001534:	bf9c      	itt	ls
 8001536:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	bf84      	itt	hi
 8001540:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f8de 4000 	ldr.w	r4, [lr]
 800154c:	fa0a f90b 	lsl.w	r9, sl, fp
 8001550:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001554:	ea24 040b 	bic.w	r4, r4, fp
 8001558:	ea44 0409 	orr.w	r4, r4, r9
 800155c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	684c      	ldr	r4, [r1, #4]
 8001562:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001566:	d076      	beq.n	8001656 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001570:	f04e 0e01 	orr.w	lr, lr, #1
 8001574:	f8c7 e018 	str.w	lr, [r7, #24]
 8001578:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	f00e 0e01 	and.w	lr, lr, #1
 8001584:	f8cd e004 	str.w	lr, [sp, #4]
 8001588:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	f023 0e03 	bic.w	lr, r3, #3
 8001590:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001594:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001598:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159c:	fa06 f609 	lsl.w	r6, r6, r9
 80015a0:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	4e40      	ldr	r6, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x1f4>)
 80015a6:	42b0      	cmp	r0, r6
 80015a8:	d068      	beq.n	800167c <HAL_GPIO_Init+0x1c8>
 80015aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ae:	42b0      	cmp	r0, r6
 80015b0:	d066      	beq.n	8001680 <HAL_GPIO_Init+0x1cc>
 80015b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015b6:	42b0      	cmp	r0, r6
 80015b8:	d05e      	beq.n	8001678 <HAL_GPIO_Init+0x1c4>
 80015ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015be:	42b0      	cmp	r0, r6
 80015c0:	bf0c      	ite	eq
 80015c2:	2603      	moveq	r6, #3
 80015c4:	2604      	movne	r6, #4
 80015c6:	fa06 f609 	lsl.w	r6, r6, r9
 80015ca:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015d2:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	bf14      	ite	ne
 80015da:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015de:	ea26 060c 	biceq.w	r6, r6, ip
 80015e2:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015ea:	bf14      	ite	ne
 80015ec:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f0:	ea26 060c 	biceq.w	r6, r6, ip
 80015f4:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f6:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fc:	bf14      	ite	ne
 80015fe:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	ea26 060c 	biceq.w	r6, r6, ip
 8001606:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800160c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160e:	d01f      	beq.n	8001650 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	ea44 040c 	orr.w	r4, r4, ip
 8001614:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	680e      	ldr	r6, [r1, #0]
	position++;
 8001618:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	fa36 f403 	lsrs.w	r4, r6, r3
 800161e:	f102 0204 	add.w	r2, r2, #4
 8001622:	f47f af5d 	bne.w	80014e0 <HAL_GPIO_Init+0x2c>
}
 8001626:	b003      	add	sp, #12
 8001628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800162c:	4546      	cmp	r6, r8
 800162e:	d00a      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 8001630:	f67f af6f 	bls.w	8001512 <HAL_GPIO_Init+0x5e>
 8001634:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016ac <HAL_GPIO_Init+0x1f8>
 8001638:	4576      	cmp	r6, lr
 800163a:	d004      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 800163c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001640:	4576      	cmp	r6, lr
 8001642:	f47f af75 	bne.w	8001530 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	688e      	ldr	r6, [r1, #8]
 8001648:	b9fe      	cbnz	r6, 800168a <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	f04f 0a04 	mov.w	sl, #4
 800164e:	e76f      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001650:	ea24 040c 	bic.w	r4, r4, ip
 8001654:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	680e      	ldr	r6, [r1, #0]
 8001658:	e73b      	b.n	80014d2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165a:	68cc      	ldr	r4, [r1, #12]
 800165c:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001660:	e766      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001662:	68cc      	ldr	r4, [r1, #12]
 8001664:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001668:	e762      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	68cc      	ldr	r4, [r1, #12]
 800166c:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001670:	e75e      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001672:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001676:	e75b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	2602      	movs	r6, #2
 800167a:	e7a4      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 800167c:	2600      	movs	r6, #0
 800167e:	e7a2      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 8001680:	2601      	movs	r6, #1
 8001682:	e7a0      	b.n	80015c6 <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001684:	f04f 0a00 	mov.w	sl, #0
 8001688:	e752      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168a:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001690:	bf0c      	ite	eq
 8001692:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001694:	6144      	strne	r4, [r0, #20]
 8001696:	e74b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
 8001698:	40021000 	.word	0x40021000
 800169c:	40010400 	.word	0x40010400
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	10310000 	.word	0x10310000

080016b0 <HAL_RCC_OscConfig.constprop.0>:
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4a91      	ldr	r2, [pc, #580]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 80016b2:	b470      	push	{r4, r5, r6}
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 80016b6:	b083      	sub	sp, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	f000 80ee 	beq.w	800189e <HAL_RCC_OscConfig.constprop.0+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c2:	6853      	ldr	r3, [r2, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	f000 80e4 	beq.w	8001896 <HAL_RCC_OscConfig.constprop.0+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	498a      	ldr	r1, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016d0:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80016d2:	680a      	ldr	r2, [r1, #0]
 80016d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016d8:	600a      	str	r2, [r1, #0]
 80016da:	681c      	ldr	r4, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016dc:	e003      	b.n	80016e6 <HAL_RCC_OscConfig.constprop.0+0x36>
 80016de:	681a      	ldr	r2, [r3, #0]
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	1b12      	subs	r2, r2, r4
 80016e2:	2a64      	cmp	r2, #100	; 0x64
 80016e4:	d87a      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	680a      	ldr	r2, [r1, #0]
 80016e8:	0395      	lsls	r5, r2, #14
 80016ea:	d5f8      	bpl.n	80016de <HAL_RCC_OscConfig.constprop.0+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	0799      	lsls	r1, r3, #30
 80016f0:	d525      	bpl.n	800173e <HAL_RCC_OscConfig.constprop.0+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	f012 0f0c 	tst.w	r2, #12
 80016fa:	f000 80a6 	beq.w	800184a <HAL_RCC_OscConfig.constprop.0+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	f002 020c 	and.w	r2, r2, #12
 8001704:	2a08      	cmp	r2, #8
 8001706:	f000 809c 	beq.w	8001842 <HAL_RCC_OscConfig.constprop.0+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170a:	6902      	ldr	r2, [r0, #16]
 800170c:	2a00      	cmp	r2, #0
 800170e:	f000 80ea 	beq.w	80018e6 <HAL_RCC_OscConfig.constprop.0+0x236>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001712:	2401      	movs	r4, #1
 8001714:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001716:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001718:	6014      	str	r4, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4977      	ldr	r1, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 800171c:	681c      	ldr	r4, [r3, #0]
 800171e:	e003      	b.n	8001728 <HAL_RCC_OscConfig.constprop.0+0x78>
 8001720:	681a      	ldr	r2, [r3, #0]
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	1b12      	subs	r2, r2, r4
 8001724:	2a02      	cmp	r2, #2
 8001726:	d859      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	680a      	ldr	r2, [r1, #0]
 800172a:	0796      	lsls	r6, r2, #30
 800172c:	d5f8      	bpl.n	8001720 <HAL_RCC_OscConfig.constprop.0+0x70>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	680b      	ldr	r3, [r1, #0]
 8001730:	6942      	ldr	r2, [r0, #20]
 8001732:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001736:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	6803      	ldr	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	071a      	lsls	r2, r3, #28
 8001740:	d520      	bpl.n	8001784 <HAL_RCC_OscConfig.constprop.0+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001742:	6982      	ldr	r2, [r0, #24]
 8001744:	2a00      	cmp	r2, #0
 8001746:	f000 8089 	beq.w	800185c <HAL_RCC_OscConfig.constprop.0+0x1ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	2401      	movs	r4, #1
 800174c:	4a6c      	ldr	r2, [pc, #432]	; (8001900 <HAL_RCC_OscConfig.constprop.0+0x250>)
 800174e:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001750:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001754:	4968      	ldr	r1, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001756:	681c      	ldr	r4, [r3, #0]
 8001758:	e003      	b.n	8001762 <HAL_RCC_OscConfig.constprop.0+0xb2>
 800175a:	681a      	ldr	r2, [r3, #0]
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	1b12      	subs	r2, r2, r4
 800175e:	2a02      	cmp	r2, #2
 8001760:	d83c      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001764:	0795      	lsls	r5, r2, #30
 8001766:	d5f8      	bpl.n	800175a <HAL_RCC_OscConfig.constprop.0+0xaa>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001768:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_OscConfig.constprop.0+0x254>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fbb3 f3f2 	udiv	r3, r3, r2
 8001774:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001776:	bf00      	nop
  }
  while (Delay --);
 8001778:	9b01      	ldr	r3, [sp, #4]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_RCC_OscConfig.constprop.0+0xc6>
 8001782:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	075e      	lsls	r6, r3, #29
 8001786:	d541      	bpl.n	800180c <HAL_RCC_OscConfig.constprop.0+0x15c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001788:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	00d6      	lsls	r6, r2, #3
 800178e:	d577      	bpl.n	8001880 <HAL_RCC_OscConfig.constprop.0+0x1d0>
    FlagStatus       pwrclkchanged = RESET;
 8001790:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	495d      	ldr	r1, [pc, #372]	; (8001908 <HAL_RCC_OscConfig.constprop.0+0x258>)
 8001794:	680b      	ldr	r3, [r1, #0]
 8001796:	05dd      	lsls	r5, r3, #23
 8001798:	d513      	bpl.n	80017c2 <HAL_RCC_OscConfig.constprop.0+0x112>
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	68c2      	ldr	r2, [r0, #12]
 800179e:	2a01      	cmp	r2, #1
 80017a0:	d020      	beq.n	80017e4 <HAL_RCC_OscConfig.constprop.0+0x134>
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	f000 8088 	beq.w	80018b8 <HAL_RCC_OscConfig.constprop.0+0x208>
 80017a8:	2a05      	cmp	r2, #5
 80017aa:	4a53      	ldr	r2, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80017ac:	6a11      	ldr	r1, [r2, #32]
 80017ae:	f000 80cb 	beq.w	8001948 <HAL_RCC_OscConfig.constprop.0+0x298>
 80017b2:	f021 0101 	bic.w	r1, r1, #1
 80017b6:	6211      	str	r1, [r2, #32]
 80017b8:	6a11      	ldr	r1, [r2, #32]
 80017ba:	f021 0104 	bic.w	r1, r1, #4
 80017be:	6211      	str	r1, [r2, #32]
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig.constprop.0+0x13e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	680a      	ldr	r2, [r1, #0]
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80017c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ca:	600a      	str	r2, [r1, #0]
 80017cc:	681d      	ldr	r5, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	680a      	ldr	r2, [r1, #0]
 80017d0:	05d2      	lsls	r2, r2, #23
 80017d2:	d4e3      	bmi.n	800179c <HAL_RCC_OscConfig.constprop.0+0xec>
 80017d4:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	1b52      	subs	r2, r2, r5
 80017d8:	2a64      	cmp	r2, #100	; 0x64
 80017da:	d9f8      	bls.n	80017ce <HAL_RCC_OscConfig.constprop.0+0x11e>
            return HAL_TIMEOUT;
 80017dc:	2003      	movs	r0, #3
}
 80017de:	b003      	add	sp, #12
 80017e0:	bc70      	pop	{r4, r5, r6}
 80017e2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	4944      	ldr	r1, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80017e6:	6a0a      	ldr	r2, [r1, #32]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	620a      	str	r2, [r1, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f241 3c88 	movw	ip, #5000	; 0x1388
 80017f2:	681d      	ldr	r5, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4940      	ldr	r1, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80017f6:	e003      	b.n	8001800 <HAL_RCC_OscConfig.constprop.0+0x150>
 80017f8:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	1b52      	subs	r2, r2, r5
 80017fc:	4562      	cmp	r2, ip
 80017fe:	d8ed      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	6a0a      	ldr	r2, [r1, #32]
 8001802:	0796      	lsls	r6, r2, #30
 8001804:	d5f8      	bpl.n	80017f8 <HAL_RCC_OscConfig.constprop.0+0x148>
    if (pwrclkchanged == SET)
 8001806:	2c00      	cmp	r4, #0
 8001808:	f040 8098 	bne.w	800193c <HAL_RCC_OscConfig.constprop.0+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	69c3      	ldr	r3, [r0, #28]
 800180e:	b1b3      	cbz	r3, 800183e <HAL_RCC_OscConfig.constprop.0+0x18e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4939      	ldr	r1, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001812:	684a      	ldr	r2, [r1, #4]
 8001814:	f002 020c 	and.w	r2, r2, #12
 8001818:	2a08      	cmp	r2, #8
 800181a:	f000 8081 	beq.w	8001920 <HAL_RCC_OscConfig.constprop.0+0x270>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	2b02      	cmp	r3, #2
 8001820:	f000 809c 	beq.w	800195c <HAL_RCC_OscConfig.constprop.0+0x2ac>
        __HAL_RCC_PLL_DISABLE();
 8001824:	2000      	movs	r0, #0
 8001826:	4a36      	ldr	r2, [pc, #216]	; (8001900 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 800182a:	6610      	str	r0, [r2, #96]	; 0x60
 800182c:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	e003      	b.n	8001838 <HAL_RCC_OscConfig.constprop.0+0x188>
 8001830:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	1a12      	subs	r2, r2, r0
 8001834:	2a02      	cmp	r2, #2
 8001836:	d8d1      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001838:	680a      	ldr	r2, [r1, #0]
 800183a:	0192      	lsls	r2, r2, #6
 800183c:	d4f8      	bmi.n	8001830 <HAL_RCC_OscConfig.constprop.0+0x180>
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e7cd      	b.n	80017de <HAL_RCC_OscConfig.constprop.0+0x12e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	03da      	lsls	r2, r3, #15
 8001846:	f53f af60 	bmi.w	800170a <HAL_RCC_OscConfig.constprop.0+0x5a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	079b      	lsls	r3, r3, #30
 8001850:	d528      	bpl.n	80018a4 <HAL_RCC_OscConfig.constprop.0+0x1f4>
 8001852:	6903      	ldr	r3, [r0, #16]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d025      	beq.n	80018a4 <HAL_RCC_OscConfig.constprop.0+0x1f4>
          return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e7c0      	b.n	80017de <HAL_RCC_OscConfig.constprop.0+0x12e>
      __HAL_RCC_LSI_DISABLE();
 800185c:	4928      	ldr	r1, [pc, #160]	; (8001900 <HAL_RCC_OscConfig.constprop.0+0x250>)
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001860:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001868:	681c      	ldr	r4, [r3, #0]
 800186a:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 800186e:	e003      	b.n	8001878 <HAL_RCC_OscConfig.constprop.0+0x1c8>
 8001870:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001872:	1b12      	subs	r2, r2, r4
 8001874:	2a02      	cmp	r2, #2
 8001876:	d8b1      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800187a:	0792      	lsls	r2, r2, #30
 800187c:	d4f8      	bmi.n	8001870 <HAL_RCC_OscConfig.constprop.0+0x1c0>
 800187e:	e780      	b.n	8001782 <HAL_RCC_OscConfig.constprop.0+0xd2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001882:	2401      	movs	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001888:	61da      	str	r2, [r3, #28]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	9b00      	ldr	r3, [sp, #0]
 8001894:	e77d      	b.n	8001792 <HAL_RCC_OscConfig.constprop.0+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001896:	6853      	ldr	r3, [r2, #4]
 8001898:	03de      	lsls	r6, r3, #15
 800189a:	f57f af18 	bpl.w	80016ce <HAL_RCC_OscConfig.constprop.0+0x1e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e723      	b.n	80016ec <HAL_RCC_OscConfig.constprop.0+0x3c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80018a6:	6941      	ldr	r1, [r0, #20]
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	6803      	ldr	r3, [r0, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e742      	b.n	800173e <HAL_RCC_OscConfig.constprop.0+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	490f      	ldr	r1, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig.constprop.0+0x248>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018be:	6a0a      	ldr	r2, [r1, #32]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	620a      	str	r2, [r1, #32]
 80018c6:	6a0a      	ldr	r2, [r1, #32]
 80018c8:	f022 0204 	bic.w	r2, r2, #4
 80018cc:	620a      	str	r2, [r1, #32]
 80018ce:	681e      	ldr	r6, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	e003      	b.n	80018da <HAL_RCC_OscConfig.constprop.0+0x22a>
 80018d2:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	1b92      	subs	r2, r2, r6
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	d880      	bhi.n	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	6a0a      	ldr	r2, [r1, #32]
 80018dc:	0792      	lsls	r2, r2, #30
 80018de:	d4f8      	bmi.n	80018d2 <HAL_RCC_OscConfig.constprop.0+0x222>
    if (pwrclkchanged == SET)
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	d093      	beq.n	800180c <HAL_RCC_OscConfig.constprop.0+0x15c>
 80018e4:	e02a      	b.n	800193c <HAL_RCC_OscConfig.constprop.0+0x28c>
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4906      	ldr	r1, [pc, #24]	; (8001900 <HAL_RCC_OscConfig.constprop.0+0x250>)
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80018ea:	600a      	str	r2, [r1, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ec:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 80018f6:	e00e      	b.n	8001916 <HAL_RCC_OscConfig.constprop.0+0x266>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	20000200 	.word	0x20000200
 8001900:	42420000 	.word	0x42420000
 8001904:	20000000 	.word	0x20000000
 8001908:	40007000 	.word	0x40007000
 800190c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	1b12      	subs	r2, r2, r4
 8001910:	2a02      	cmp	r2, #2
 8001912:	f63f af63 	bhi.w	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	680a      	ldr	r2, [r1, #0]
 8001918:	0795      	lsls	r5, r2, #30
 800191a:	d4f7      	bmi.n	800190c <HAL_RCC_OscConfig.constprop.0+0x25c>
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	e70e      	b.n	800173e <HAL_RCC_OscConfig.constprop.0+0x8e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	2b01      	cmp	r3, #1
 8001922:	d019      	beq.n	8001958 <HAL_RCC_OscConfig.constprop.0+0x2a8>
        pll_config = RCC->CFGR;
 8001924:	684b      	ldr	r3, [r1, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	6a02      	ldr	r2, [r0, #32]
 8001928:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800192c:	4291      	cmp	r1, r2
 800192e:	d193      	bne.n	8001858 <HAL_RCC_OscConfig.constprop.0+0x1a8>
 8001930:	6a42      	ldr	r2, [r0, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001932:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	4293      	cmp	r3, r2
 8001938:	d081      	beq.n	800183e <HAL_RCC_OscConfig.constprop.0+0x18e>
 800193a:	e78d      	b.n	8001858 <HAL_RCC_OscConfig.constprop.0+0x1a8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_RCC_OscConfig.constprop.0+0x308>)
 800193e:	69d3      	ldr	r3, [r2, #28]
 8001940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	e761      	b.n	800180c <HAL_RCC_OscConfig.constprop.0+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	f041 0104 	orr.w	r1, r1, #4
 800194c:	6211      	str	r1, [r2, #32]
 800194e:	6a11      	ldr	r1, [r2, #32]
 8001950:	f041 0101 	orr.w	r1, r1, #1
 8001954:	6211      	str	r1, [r2, #32]
 8001956:	e74a      	b.n	80017ee <HAL_RCC_OscConfig.constprop.0+0x13e>
        return HAL_ERROR;
 8001958:	4618      	mov	r0, r3
 800195a:	e740      	b.n	80017de <HAL_RCC_OscConfig.constprop.0+0x12e>
        __HAL_RCC_PLL_DISABLE();
 800195c:	2400      	movs	r4, #0
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_RCC_OscConfig.constprop.0+0x30c>)
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig.constprop.0+0x310>)
 8001962:	6614      	str	r4, [r2, #96]	; 0x60
 8001964:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	e004      	b.n	8001972 <HAL_RCC_OscConfig.constprop.0+0x2c2>
 8001968:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	1b12      	subs	r2, r2, r4
 800196c:	2a02      	cmp	r2, #2
 800196e:	f63f af35 	bhi.w	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	680a      	ldr	r2, [r1, #0]
 8001974:	0195      	lsls	r5, r2, #6
 8001976:	d4f7      	bmi.n	8001968 <HAL_RCC_OscConfig.constprop.0+0x2b8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001978:	6a02      	ldr	r2, [r0, #32]
 800197a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig.constprop.0+0x2dc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001980:	684c      	ldr	r4, [r1, #4]
 8001982:	6885      	ldr	r5, [r0, #8]
 8001984:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001988:	432c      	orrs	r4, r5
 800198a:	604c      	str	r4, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800198c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198e:	490a      	ldr	r1, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001990:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001992:	6848      	ldr	r0, [r1, #4]
 8001994:	4322      	orrs	r2, r4
 8001996:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800199a:	4c08      	ldr	r4, [pc, #32]	; (80019bc <HAL_RCC_OscConfig.constprop.0+0x30c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4302      	orrs	r2, r0
 800199e:	604a      	str	r2, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80019a0:	6625      	str	r5, [r4, #96]	; 0x60
 80019a2:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	e004      	b.n	80019b0 <HAL_RCC_OscConfig.constprop.0+0x300>
 80019a6:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	1a12      	subs	r2, r2, r0
 80019aa:	2a02      	cmp	r2, #2
 80019ac:	f63f af16 	bhi.w	80017dc <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	0194      	lsls	r4, r2, #6
 80019b4:	d5f7      	bpl.n	80019a6 <HAL_RCC_OscConfig.constprop.0+0x2f6>
 80019b6:	e742      	b.n	800183e <HAL_RCC_OscConfig.constprop.0+0x18e>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000
 80019c0:	20000200 	.word	0x20000200

080019c4 <LCD_Line.constprop.0>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80019c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c8:	4686      	mov	lr, r0
 80019ca:	b0bb      	sub	sp, #236	; 0xec
{
	int deltaX = abs(x2 - x1);
 80019cc:	9202      	str	r2, [sp, #8]
 80019ce:	eba2 020e 	sub.w	r2, r2, lr
 80019d2:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80019d6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 80019da:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80019de:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 80019e0:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 80019e2:	460d      	mov	r5, r1
 80019e4:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80019e8:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 80019ec:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 80019ee:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 80019f0:	4572      	cmp	r2, lr
 80019f2:	bf8c      	ite	hi
 80019f4:	2201      	movhi	r2, #1
 80019f6:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80019fa:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 80019fe:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8001a00:	bf34      	ite	cc
 8001a02:	2201      	movcc	r2, #1
 8001a04:	f04f 32ff 	movcs.w	r2, #4294967295
 8001a08:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001a0a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8001a0e:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 8001a12:	0152      	lsls	r2, r2, #5
 8001a14:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001a18:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8001a1c:	9136      	str	r1, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8001a22:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8001a26:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8001a2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a2e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8001a32:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	2602      	movs	r6, #2
 8001a38:	9103      	str	r1, [sp, #12]
 8001a3a:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8001a3e:	9104      	str	r1, [sp, #16]
 8001a40:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8001a44:	9105      	str	r1, [sp, #20]
 8001a46:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8001a4a:	9106      	str	r1, [sp, #24]
 8001a4c:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8001a50:	9107      	str	r1, [sp, #28]
 8001a52:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8001a56:	9108      	str	r1, [sp, #32]
 8001a58:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8001a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8001a5e:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8001a62:	910a      	str	r1, [sp, #40]	; 0x28
 8001a64:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8001a68:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001a6c:	920c      	str	r2, [sp, #48]	; 0x30
 8001a6e:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8001a72:	920d      	str	r2, [sp, #52]	; 0x34
 8001a74:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001a78:	920e      	str	r2, [sp, #56]	; 0x38
 8001a7a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8001a7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8001a80:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8001a84:	9210      	str	r2, [sp, #64]	; 0x40
 8001a86:	0a2a      	lsrs	r2, r5, #8
 8001a88:	9225      	str	r2, [sp, #148]	; 0x94
 8001a8a:	0bea      	lsrs	r2, r5, #15
 8001a8c:	9233      	str	r2, [sp, #204]	; 0xcc
 8001a8e:	0baa      	lsrs	r2, r5, #14
 8001a90:	9231      	str	r2, [sp, #196]	; 0xc4
 8001a92:	0b6a      	lsrs	r2, r5, #13
 8001a94:	922f      	str	r2, [sp, #188]	; 0xbc
 8001a96:	0b2a      	lsrs	r2, r5, #12
 8001a98:	922d      	str	r2, [sp, #180]	; 0xb4
 8001a9a:	0aea      	lsrs	r2, r5, #11
 8001a9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001aa0:	922b      	str	r2, [sp, #172]	; 0xac
 8001aa2:	0aaa      	lsrs	r2, r5, #10
 8001aa4:	9311      	str	r3, [sp, #68]	; 0x44
 8001aa6:	9229      	str	r2, [sp, #164]	; 0xa4
 8001aa8:	f005 0301 	and.w	r3, r5, #1
 8001aac:	0a6a      	lsrs	r2, r5, #9
 8001aae:	910b      	str	r1, [sp, #44]	; 0x2c
 8001ab0:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 8001ab2:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8001ab4:	9323      	str	r3, [sp, #140]	; 0x8c
 8001ab6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8001aba:	9324      	str	r3, [sp, #144]	; 0x90
 8001abc:	ea4f 33de 	mov.w	r3, lr, lsr #15
 8001ac0:	9332      	str	r3, [sp, #200]	; 0xc8
 8001ac2:	ea4f 339e 	mov.w	r3, lr, lsr #14
 8001ac6:	9330      	str	r3, [sp, #192]	; 0xc0
 8001ac8:	ea4f 335e 	mov.w	r3, lr, lsr #13
 8001acc:	932e      	str	r3, [sp, #184]	; 0xb8
 8001ace:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8001ad2:	932c      	str	r3, [sp, #176]	; 0xb0
 8001ad4:	ea4f 23de 	mov.w	r3, lr, lsr #11
 8001ad8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8001ada:	932a      	str	r3, [sp, #168]	; 0xa8
 8001adc:	ea4f 239e 	mov.w	r3, lr, lsr #10
 8001ae0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ae2:	ea4f 235e 	mov.w	r3, lr, lsr #9
 8001ae6:	1a52      	subs	r2, r2, r1
 8001ae8:	9326      	str	r3, [sp, #152]	; 0x98
 8001aea:	fa5f f38e 	uxtb.w	r3, lr
 8001aee:	9212      	str	r2, [sp, #72]	; 0x48
 8001af0:	9320      	str	r3, [sp, #128]	; 0x80
 8001af2:	b2ea      	uxtb	r2, r5
 8001af4:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af8:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001e54 <LCD_Line.constprop.0+0x490>
 8001afc:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001e58 <LCD_Line.constprop.0+0x494>
 8001b00:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001e5c <LCD_Line.constprop.0+0x498>
 8001b04:	9221      	str	r2, [sp, #132]	; 0x84
 8001b06:	9322      	str	r3, [sp, #136]	; 0x88
 8001b08:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 8001b0c:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8001b10:	f8ca c010 	str.w	ip, [sl, #16]
 8001b14:	f8ca b010 	str.w	fp, [sl, #16]
 8001b18:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b1c:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b20:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b24:	f8c8 7010 	str.w	r7, [r8, #16]
 8001b28:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b2c:	f8c8 c010 	str.w	ip, [r8, #16]
 8001b30:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b32:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8001b34:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001b38:	b2ab      	uxth	r3, r5
 8001b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8001b3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001b40:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b46:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b4a:	f8c8 1010 	str.w	r1, [r8, #16]
 8001b4e:	f8c9 7010 	str.w	r7, [r9, #16]
 8001b52:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b68:	f8c9 3010 	str.w	r3, [r9, #16]
 8001b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001b70:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b74:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b84:	f8ca 3010 	str.w	r3, [sl, #16]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8e:	f8ca b010 	str.w	fp, [sl, #16]
 8001b92:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b96:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b9e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001ba2:	f8c8 0010 	str.w	r0, [r8, #16]
 8001ba6:	f8c8 c010 	str.w	ip, [r8, #16]
 8001baa:	f8c8 e010 	str.w	lr, [r8, #16]
 8001bae:	f8c8 1010 	str.w	r1, [r8, #16]
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	f000 8560 	beq.w	8002678 <LCD_Line.constprop.0+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001bbe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001bc0:	f013 0301 	ands.w	r3, r3, #1
 8001bc4:	9316      	str	r3, [sp, #88]	; 0x58
 8001bc6:	bf1c      	itt	ne
 8001bc8:	2308      	movne	r3, #8
 8001bca:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001bce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd0:	bf08      	it	eq
 8001bd2:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001bd6:	f013 0301 	ands.w	r3, r3, #1
 8001bda:	9317      	str	r3, [sp, #92]	; 0x5c
 8001bdc:	bf0c      	ite	eq
 8001bde:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	2310      	movne	r3, #16
 8001be4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001be8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001bea:	f013 0301 	ands.w	r3, r3, #1
 8001bee:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf0:	bf0c      	ite	eq
 8001bf2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	2320      	movne	r3, #32
 8001bf8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001bfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001bfe:	f013 0301 	ands.w	r3, r3, #1
 8001c02:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c04:	bf0c      	ite	eq
 8001c06:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	2340      	movne	r3, #64	; 0x40
 8001c0c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001c10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001c12:	f013 0301 	ands.w	r3, r3, #1
 8001c16:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c18:	bf0c      	ite	eq
 8001c1a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	2380      	movne	r3, #128	; 0x80
 8001c20:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001c24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001c26:	f013 0301 	ands.w	r3, r3, #1
 8001c2a:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2c:	bf0c      	ite	eq
 8001c2e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	2310      	movne	r3, #16
 8001c34:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c3a:	f013 0301 	ands.w	r3, r3, #1
 8001c3e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c40:	bf0c      	ite	eq
 8001c42:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	2320      	movne	r3, #32
 8001c48:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c50:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c54:	f8ca 6010 	str.w	r6, [sl, #16]
 8001c58:	f8ca 3010 	str.w	r3, [sl, #16]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c66:	f8ca b010 	str.w	fp, [sl, #16]
 8001c6a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001c6e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001c72:	f8c8 4010 	str.w	r4, [r8, #16]
 8001c76:	f8c8 7010 	str.w	r7, [r8, #16]
 8001c7a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001c7e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001c82:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c8a:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001c90:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001c92:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c96:	09db      	lsrs	r3, r3, #7
 8001c98:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	bf16      	itet	ne
 8001c9c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9e:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001ca6:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001caa:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001cae:	931d      	str	r3, [sp, #116]	; 0x74
 8001cb0:	bf16      	itet	ne
 8001cb2:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001cbc:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001cc0:	f01e 0f20 	tst.w	lr, #32
 8001cc4:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc6:	bf0c      	ite	eq
 8001cc8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ccc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001cce:	f01e 0f10 	tst.w	lr, #16
 8001cd2:	f8c9 3010 	str.w	r3, [r9, #16]
 8001cd6:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001cda:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cdc:	bf0c      	ite	eq
 8001cde:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001ce4:	f01e 0f08 	tst.w	lr, #8
 8001ce8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cec:	bf0c      	ite	eq
 8001cee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001cf4:	f01e 0f04 	tst.w	lr, #4
 8001cf8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cfc:	bf0c      	ite	eq
 8001cfe:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001d04:	f01e 0f02 	tst.w	lr, #2
 8001d08:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001d0c:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001d10:	f8c9 3010 	str.w	r3, [r9, #16]
 8001d14:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d18:	bf0c      	ite	eq
 8001d1a:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	f04f 0e10 	movne.w	lr, #16
 8001d22:	f8c8 e010 	str.w	lr, [r8, #16]
 8001d26:	fa1f fe85 	uxth.w	lr, r5
 8001d2a:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f040 849c 	bne.w	800266c <LCD_Line.constprop.0+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d34:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001d38:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d3c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001d40:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d44:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d48:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d4c:	f8ca 5010 	str.w	r5, [sl, #16]
 8001d50:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d54:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001d58:	f8ca b010 	str.w	fp, [sl, #16]
 8001d5c:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d60:	f8c9 c010 	str.w	ip, [r9, #16]
 8001d64:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d68:	f8c8 7010 	str.w	r7, [r8, #16]
 8001d6c:	f8c8 0010 	str.w	r0, [r8, #16]
 8001d70:	f8c8 c010 	str.w	ip, [r8, #16]
 8001d74:	f8c8 e010 	str.w	lr, [r8, #16]
 8001d78:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d7c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001d7e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	f000 846e 	beq.w	8002664 <LCD_Line.constprop.0+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8001d88:	f04f 0e04 	mov.w	lr, #4
 8001d8c:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d90:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	f040 8460 	bne.w	8002658 <LCD_Line.constprop.0+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d98:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001d9e:	2d00      	cmp	r5, #0
 8001da0:	f040 8454 	bne.w	800264c <LCD_Line.constprop.0+0xc88>
 8001da4:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001da8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001dac:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001dae:	2d00      	cmp	r5, #0
 8001db0:	f040 8446 	bne.w	8002640 <LCD_Line.constprop.0+0xc7c>
 8001db4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001db8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dbc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	f040 8438 	bne.w	8002634 <LCD_Line.constprop.0+0xc70>
 8001dc4:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001dc8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001dcc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	f040 842a 	bne.w	8002628 <LCD_Line.constprop.0+0xc64>
 8001dd4:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001dd8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ddc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	f040 841c 	bne.w	800261c <LCD_Line.constprop.0+0xc58>
 8001de4:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001de8:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001dec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	f040 840e 	bne.w	8002610 <LCD_Line.constprop.0+0xc4c>
 8001df4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001df8:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001dfc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001e00:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e04:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e08:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e0c:	f8ca 5010 	str.w	r5, [sl, #16]
 8001e10:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e14:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001e18:	f8ca b010 	str.w	fp, [sl, #16]
 8001e1c:	f8c9 0010 	str.w	r0, [r9, #16]
 8001e20:	f8c9 c010 	str.w	ip, [r9, #16]
 8001e24:	f8c8 4010 	str.w	r4, [r8, #16]
 8001e28:	f8c8 7010 	str.w	r7, [r8, #16]
 8001e2c:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e30:	f8c8 c010 	str.w	ip, [r8, #16]
 8001e34:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e38:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e3c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001e3e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e42:	2d00      	cmp	r5, #0
 8001e44:	f000 83e1 	beq.w	800260a <LCD_Line.constprop.0+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8001e48:	f04f 0e04 	mov.w	lr, #4
 8001e4c:	f8c9 e010 	str.w	lr, [r9, #16]
 8001e50:	e006      	b.n	8001e60 <LCD_Line.constprop.0+0x49c>
 8001e52:	bf00      	nop
 8001e54:	40010c00 	.word	0x40010c00
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e60:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	f040 83cc 	bne.w	8002600 <LCD_Line.constprop.0+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e68:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e6c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001e6e:	2d00      	cmp	r5, #0
 8001e70:	f040 83c1 	bne.w	80025f6 <LCD_Line.constprop.0+0xc32>
 8001e74:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001e78:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e7c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001e7e:	2d00      	cmp	r5, #0
 8001e80:	f040 83b4 	bne.w	80025ec <LCD_Line.constprop.0+0xc28>
 8001e84:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001e88:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	f040 83a9 	bne.w	80025e4 <LCD_Line.constprop.0+0xc20>
 8001e92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e96:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	f040 839e 	bne.w	80025dc <LCD_Line.constprop.0+0xc18>
 8001ea0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ea4:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 8393 	bne.w	80025d4 <LCD_Line.constprop.0+0xc10>
 8001eae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eb2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 8387 	bne.w	80025cc <LCD_Line.constprop.0+0xc08>
 8001ebe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ec2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001eca:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ecc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ed0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001ed4:	f8ca 3010 	str.w	r3, [sl, #16]
 8001ed8:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eda:	f8ca c010 	str.w	ip, [sl, #16]
 8001ede:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ee2:	f8ca b010 	str.w	fp, [sl, #16]
 8001ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eea:	f8c9 0010 	str.w	r0, [r9, #16]
 8001eee:	f8c9 c010 	str.w	ip, [r9, #16]
 8001ef2:	f8c8 4010 	str.w	r4, [r8, #16]
 8001ef6:	f8c8 7010 	str.w	r7, [r8, #16]
 8001efa:	f8c8 0010 	str.w	r0, [r8, #16]
 8001efe:	f8c8 c010 	str.w	ip, [r8, #16]
 8001f02:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001f06:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0a:	f8c8 1010 	str.w	r1, [r8, #16]
 8001f0e:	f8c8 2010 	str.w	r2, [r8, #16]
 8001f12:	f8c9 7010 	str.w	r7, [r9, #16]
 8001f16:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f22:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f30:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f34:	2310      	movs	r3, #16
 8001f36:	f8c8 3010 	str.w	r3, [r8, #16]
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	f8c8 3010 	str.w	r3, [r8, #16]
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f44:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f48:	f8ca 6010 	str.w	r6, [sl, #16]
 8001f4c:	f8ca 3010 	str.w	r3, [sl, #16]
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f56:	f8ca b010 	str.w	fp, [sl, #16]
 8001f5a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001f5e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001f62:	f8c8 4010 	str.w	r4, [r8, #16]
 8001f66:	f8c8 7010 	str.w	r7, [r8, #16]
 8001f6a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f6e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001f72:	f8c8 1010 	str.w	r1, [r8, #16]
 8001f76:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001f7a:	2d00      	cmp	r5, #0
 8001f7c:	f000 8323 	beq.w	80025c6 <LCD_Line.constprop.0+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8001f80:	2304      	movs	r3, #4
 8001f82:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001f86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001f88:	f013 0301 	ands.w	r3, r3, #1
 8001f8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8001f8e:	bf1c      	itt	ne
 8001f90:	2308      	movne	r3, #8
 8001f92:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001f96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f98:	bf08      	it	eq
 8001f9a:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001f9e:	f013 0301 	ands.w	r3, r3, #1
 8001fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa4:	bf0c      	ite	eq
 8001fa6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	2310      	movne	r3, #16
 8001fac:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001fb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001fb2:	f013 0301 	ands.w	r3, r3, #1
 8001fb6:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb8:	bf0c      	ite	eq
 8001fba:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	2320      	movne	r3, #32
 8001fc0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001fc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001fc6:	f013 0301 	ands.w	r3, r3, #1
 8001fca:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fcc:	bf0c      	ite	eq
 8001fce:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	2340      	movne	r3, #64	; 0x40
 8001fd4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001fd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001fda:	f013 0301 	ands.w	r3, r3, #1
 8001fde:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fe0:	bf0c      	ite	eq
 8001fe2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	2380      	movne	r3, #128	; 0x80
 8001fe8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001fec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001fee:	f013 0301 	ands.w	r3, r3, #1
 8001ff2:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ff4:	bf0c      	ite	eq
 8001ff6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	2310      	movne	r3, #16
 8001ffc:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002000:	f01e 0301 	ands.w	r3, lr, #1
 8002004:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002006:	bf0c      	ite	eq
 8002008:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800200c:	2320      	movne	r3, #32
 800200e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002016:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800201a:	f8ca 6010 	str.w	r6, [sl, #16]
 800201e:	f8ca 3010 	str.w	r3, [sl, #16]
 8002022:	2301      	movs	r3, #1
 8002024:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800202c:	f8ca b010 	str.w	fp, [sl, #16]
 8002030:	f8c9 0010 	str.w	r0, [r9, #16]
 8002034:	f8c9 c010 	str.w	ip, [r9, #16]
 8002038:	f8c8 4010 	str.w	r4, [r8, #16]
 800203c:	f8c8 7010 	str.w	r7, [r8, #16]
 8002040:	f8c8 0010 	str.w	r0, [r8, #16]
 8002044:	f8c8 c010 	str.w	ip, [r8, #16]
 8002048:	f8c8 3010 	str.w	r3, [r8, #16]
 800204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002050:	f8c8 3010 	str.w	r3, [r8, #16]
 8002054:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002056:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002058:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800205c:	09db      	lsrs	r3, r3, #7
 800205e:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8002060:	bf16      	itet	ne
 8002062:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002064:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002068:	f8c9 3010 	strne.w	r3, [r9, #16]
 800206c:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002070:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002074:	9314      	str	r3, [sp, #80]	; 0x50
 8002076:	bf16      	itet	ne
 8002078:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800207a:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800207e:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002082:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002086:	f01e 0f20 	tst.w	lr, #32
 800208a:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208c:	bf0c      	ite	eq
 800208e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002092:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002094:	f01e 0f10 	tst.w	lr, #16
 8002098:	f8c9 3010 	str.w	r3, [r9, #16]
 800209c:	f3ce 1300 	ubfx	r3, lr, #4, #1
 80020a0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a2:	bf0c      	ite	eq
 80020a4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80020a8:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80020aa:	f01e 0f08 	tst.w	lr, #8
 80020ae:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b2:	bf0c      	ite	eq
 80020b4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80020b8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80020ba:	f01e 0f04 	tst.w	lr, #4
 80020be:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c2:	bf0c      	ite	eq
 80020c4:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80020ca:	f01e 0f02 	tst.w	lr, #2
 80020ce:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 80020d2:	f3ce 0280 	ubfx	r2, lr, #2, #1
 80020d6:	f8c9 3010 	str.w	r3, [r9, #16]
 80020da:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020de:	bf0c      	ite	eq
 80020e0:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80020e4:	f04f 0e10 	movne.w	lr, #16
 80020e8:	f8c8 e010 	str.w	lr, [r8, #16]
 80020ec:	fa1f fe85 	uxth.w	lr, r5
 80020f0:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	f040 8261 	bne.w	80025bc <LCD_Line.constprop.0+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fa:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80020fe:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002102:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002106:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800210e:	f8ca 6010 	str.w	r6, [sl, #16]
 8002112:	f8ca 5010 	str.w	r5, [sl, #16]
 8002116:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800211e:	f8ca b010 	str.w	fp, [sl, #16]
 8002122:	f8c9 0010 	str.w	r0, [r9, #16]
 8002126:	f8c9 c010 	str.w	ip, [r9, #16]
 800212a:	f8c8 4010 	str.w	r4, [r8, #16]
 800212e:	f8c8 7010 	str.w	r7, [r8, #16]
 8002132:	f8c8 0010 	str.w	r0, [r8, #16]
 8002136:	f8c8 c010 	str.w	ip, [r8, #16]
 800213a:	f8c8 e010 	str.w	lr, [r8, #16]
 800213e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002142:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002144:	f8c8 e010 	str.w	lr, [r8, #16]
 8002148:	2d00      	cmp	r5, #0
 800214a:	f000 8234 	beq.w	80025b6 <LCD_Line.constprop.0+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 800214e:	f04f 0e04 	mov.w	lr, #4
 8002152:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002156:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002158:	2d00      	cmp	r5, #0
 800215a:	f040 8227 	bne.w	80025ac <LCD_Line.constprop.0+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002162:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8002164:	2d00      	cmp	r5, #0
 8002166:	f040 821c 	bne.w	80025a2 <LCD_Line.constprop.0+0xbde>
 800216a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800216e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002172:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002174:	2d00      	cmp	r5, #0
 8002176:	f040 820f 	bne.w	8002598 <LCD_Line.constprop.0+0xbd4>
 800217a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800217e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002182:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002184:	2d00      	cmp	r5, #0
 8002186:	f040 8202 	bne.w	800258e <LCD_Line.constprop.0+0xbca>
 800218a:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 800218e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002192:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002194:	2d00      	cmp	r5, #0
 8002196:	f040 81f5 	bne.w	8002584 <LCD_Line.constprop.0+0xbc0>
 800219a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 800219e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80021a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	f040 81e8 	bne.w	800257a <LCD_Line.constprop.0+0xbb6>
 80021aa:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80021ae:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80021b2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80021b4:	2d00      	cmp	r5, #0
 80021b6:	f040 81db 	bne.w	8002570 <LCD_Line.constprop.0+0xbac>
 80021ba:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80021be:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80021c6:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ca:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	f8ca 6010 	str.w	r6, [sl, #16]
 80021d2:	f8ca 5010 	str.w	r5, [sl, #16]
 80021d6:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021da:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80021de:	f8ca b010 	str.w	fp, [sl, #16]
 80021e2:	f8c9 0010 	str.w	r0, [r9, #16]
 80021e6:	f8c9 c010 	str.w	ip, [r9, #16]
 80021ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80021ee:	f8c8 7010 	str.w	r7, [r8, #16]
 80021f2:	f8c8 0010 	str.w	r0, [r8, #16]
 80021f6:	f8c8 c010 	str.w	ip, [r8, #16]
 80021fa:	f8c8 e010 	str.w	lr, [r8, #16]
 80021fe:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002202:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002204:	f8c8 e010 	str.w	lr, [r8, #16]
 8002208:	2d00      	cmp	r5, #0
 800220a:	f000 81ae 	beq.w	800256a <LCD_Line.constprop.0+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 800220e:	f04f 0e04 	mov.w	lr, #4
 8002212:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002216:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002218:	2d00      	cmp	r5, #0
 800221a:	f040 81a1 	bne.w	8002560 <LCD_Line.constprop.0+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800221e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002222:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002224:	2d00      	cmp	r5, #0
 8002226:	f040 8196 	bne.w	8002556 <LCD_Line.constprop.0+0xb92>
 800222a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800222e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002232:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002234:	2d00      	cmp	r5, #0
 8002236:	f040 8189 	bne.w	800254c <LCD_Line.constprop.0+0xb88>
 800223a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800223e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002242:	2900      	cmp	r1, #0
 8002244:	f040 817e 	bne.w	8002544 <LCD_Line.constprop.0+0xb80>
 8002248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800224c:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002250:	2a00      	cmp	r2, #0
 8002252:	f040 8173 	bne.w	800253c <LCD_Line.constprop.0+0xb78>
 8002256:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800225a:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8168 	bne.w	8002534 <LCD_Line.constprop.0+0xb70>
 8002264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002268:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800226c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 815c 	bne.w	800252c <LCD_Line.constprop.0+0xb68>
 8002274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002278:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002280:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002284:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002288:	f8ca 6010 	str.w	r6, [sl, #16]
 800228c:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002290:	f8ca c010 	str.w	ip, [sl, #16]
 8002294:	f8ca b010 	str.w	fp, [sl, #16]
 8002298:	f8c9 0010 	str.w	r0, [r9, #16]
 800229c:	f8c9 c010 	str.w	ip, [r9, #16]
 80022a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80022a4:	f8c8 7010 	str.w	r7, [r8, #16]
 80022a8:	f8c8 0010 	str.w	r0, [r8, #16]
 80022ac:	f8c8 c010 	str.w	ip, [r8, #16]
 80022b0:	f8c8 2010 	str.w	r2, [r8, #16]
 80022b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b8:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022bc:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022be:	f8c9 7010 	str.w	r7, [r9, #16]
 80022c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c6:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	f8c9 2010 	str.w	r2, [r9, #16]
 80022ce:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022d4:	f8c9 2010 	str.w	r2, [r9, #16]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022e2:	f8c8 2010 	str.w	r2, [r8, #16]
 80022e6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ec:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022f0:	f8ca 6010 	str.w	r6, [sl, #16]
 80022f4:	f8ca 1010 	str.w	r1, [sl, #16]
 80022f8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80022fc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fe:	f8ca b010 	str.w	fp, [sl, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 810f 	beq.w	8002526 <LCD_Line.constprop.0+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8002308:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8106 	beq.w	8002520 <LCD_Line.constprop.0+0xb5c>
 8002314:	2301      	movs	r3, #1
 8002316:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800231a:	9b04      	ldr	r3, [sp, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80fc 	beq.w	800251a <LCD_Line.constprop.0+0xb56>
 8002322:	2308      	movs	r3, #8
 8002324:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002328:	9b05      	ldr	r3, [sp, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80f2 	beq.w	8002514 <LCD_Line.constprop.0+0xb50>
 8002330:	2304      	movs	r3, #4
 8002332:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002336:	9b06      	ldr	r3, [sp, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80e8 	beq.w	800250e <LCD_Line.constprop.0+0xb4a>
 800233e:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002342:	9b07      	ldr	r3, [sp, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80df 	beq.w	8002508 <LCD_Line.constprop.0+0xb44>
 800234a:	2301      	movs	r3, #1
 800234c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002350:	9b08      	ldr	r3, [sp, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80d3 	beq.w	80024fe <LCD_Line.constprop.0+0xb3a>
 8002358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80c6 	beq.w	80024f4 <LCD_Line.constprop.0+0xb30>
 8002368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800236c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80bb 	beq.w	80024ee <LCD_Line.constprop.0+0xb2a>
 8002378:	2304      	movs	r3, #4
 800237a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800237e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80b1 	beq.w	80024e8 <LCD_Line.constprop.0+0xb24>
 8002386:	2308      	movs	r3, #8
 8002388:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800238c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80a5 	beq.w	80024de <LCD_Line.constprop.0+0xb1a>
 8002394:	2310      	movs	r3, #16
 8002396:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800239a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8099 	beq.w	80024d4 <LCD_Line.constprop.0+0xb10>
 80023a2:	2320      	movs	r3, #32
 80023a4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80023a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 808d 	beq.w	80024ca <LCD_Line.constprop.0+0xb06>
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80023b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8081 	beq.w	80024c0 <LCD_Line.constprop.0+0xafc>
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80023c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d075      	beq.n	80024b6 <LCD_Line.constprop.0+0xaf2>
 80023ca:	2310      	movs	r3, #16
 80023cc:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80023d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d06a      	beq.n	80024ac <LCD_Line.constprop.0+0xae8>
 80023d6:	2320      	movs	r3, #32
 80023d8:	f8c8 3010 	str.w	r3, [r8, #16]
 80023dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80023e4:	f8ca 6010 	str.w	r6, [sl, #16]
 80023e8:	f8ca 3010 	str.w	r3, [sl, #16]
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
		if (x1 == x2 && y1 == y2)
 80023ec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	f000 8145 	beq.w	8002680 <LCD_Line.constprop.0+0xcbc>
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80023f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 80023f8:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 80023fa:	425b      	negs	r3, r3
 80023fc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002400:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002404:	da27      	bge.n	8002456 <LCD_Line.constprop.0+0xa92>
		{
			error -= deltaY;
			x1 += signX;
 8002406:	9d01      	ldr	r5, [sp, #4]
 8002408:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 800240c:	4475      	add	r5, lr
 800240e:	462b      	mov	r3, r5
			error -= deltaY;
 8002410:	460d      	mov	r5, r1
 8002412:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8002414:	1a69      	subs	r1, r5, r1
 8002416:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8002418:	b299      	uxth	r1, r3
 800241a:	9101      	str	r1, [sp, #4]
 800241c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002420:	9124      	str	r1, [sp, #144]	; 0x90
 8002422:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002426:	9132      	str	r1, [sp, #200]	; 0xc8
 8002428:	f3c3 3181 	ubfx	r1, r3, #14, #2
 800242c:	9130      	str	r1, [sp, #192]	; 0xc0
 800242e:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002432:	912e      	str	r1, [sp, #184]	; 0xb8
 8002434:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002438:	912c      	str	r1, [sp, #176]	; 0xb0
 800243a:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 800243e:	912a      	str	r1, [sp, #168]	; 0xa8
 8002440:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002444:	9128      	str	r1, [sp, #160]	; 0xa0
 8002446:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800244a:	9126      	str	r1, [sp, #152]	; 0x98
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	9120      	str	r1, [sp, #128]	; 0x80
 8002454:	9322      	str	r3, [sp, #136]	; 0x88
		}
		if (error2 < deltaX)
 8002456:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002458:	4291      	cmp	r1, r2
 800245a:	f77f ab57 	ble.w	8001b0c <LCD_Line.constprop.0+0x148>
		{
			error += deltaX;
			y1 += signY;
 800245e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002460:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8002462:	4413      	add	r3, r2
			error += deltaX;
 8002464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002466:	440a      	add	r2, r1
 8002468:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 800246a:	b29a      	uxth	r2, r3
 800246c:	9235      	str	r2, [sp, #212]	; 0xd4
 800246e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002472:	9225      	str	r2, [sp, #148]	; 0x94
 8002474:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002478:	9233      	str	r2, [sp, #204]	; 0xcc
 800247a:	f3c3 3281 	ubfx	r2, r3, #14, #2
 800247e:	9231      	str	r2, [sp, #196]	; 0xc4
 8002480:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002484:	922f      	str	r2, [sp, #188]	; 0xbc
 8002486:	f3c3 3203 	ubfx	r2, r3, #12, #4
 800248a:	922d      	str	r2, [sp, #180]	; 0xb4
 800248c:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002490:	922b      	str	r2, [sp, #172]	; 0xac
 8002492:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002496:	9229      	str	r2, [sp, #164]	; 0xa4
 8002498:	f3c3 2246 	ubfx	r2, r3, #9, #7
 800249c:	9227      	str	r2, [sp, #156]	; 0x9c
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	9221      	str	r2, [sp, #132]	; 0x84
 80024a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80024a8:	f7ff bb30 	b.w	8001b0c <LCD_Line.constprop.0+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80024b4:	e792      	b.n	80023dc <LCD_Line.constprop.0+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024ba:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80024be:	e787      	b.n	80023d0 <LCD_Line.constprop.0+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80024c4:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80024c8:	e77c      	b.n	80023c4 <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ce:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80024d2:	e770      	b.n	80023b6 <LCD_Line.constprop.0+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024d8:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80024dc:	e764      	b.n	80023a8 <LCD_Line.constprop.0+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e2:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80024e6:	e758      	b.n	800239a <LCD_Line.constprop.0+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e8:	f8c9 4010 	str.w	r4, [r9, #16]
}
 80024ec:	e74e      	b.n	800238c <LCD_Line.constprop.0+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ee:	f8c9 7010 	str.w	r7, [r9, #16]
}
 80024f2:	e744      	b.n	800237e <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024f8:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80024fc:	e738      	b.n	8002370 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002502:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8002506:	e72b      	b.n	8002360 <LCD_Line.constprop.0+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002508:	f8c8 c010 	str.w	ip, [r8, #16]
}
 800250c:	e720      	b.n	8002350 <LCD_Line.constprop.0+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800250e:	f8c8 0010 	str.w	r0, [r8, #16]
}
 8002512:	e716      	b.n	8002342 <LCD_Line.constprop.0+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002514:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8002518:	e70d      	b.n	8002336 <LCD_Line.constprop.0+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251a:	f8c8 4010 	str.w	r4, [r8, #16]
}
 800251e:	e703      	b.n	8002328 <LCD_Line.constprop.0+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002520:	f8c9 c010 	str.w	ip, [r9, #16]
}
 8002524:	e6f9      	b.n	800231a <LCD_Line.constprop.0+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002526:	f8c9 0010 	str.w	r0, [r9, #16]
}
 800252a:	e6ef      	b.n	800230c <LCD_Line.constprop.0+0x948>
    GPIOx->BSRR = GPIO_Pin;
 800252c:	2320      	movs	r3, #32
 800252e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002532:	e6a3      	b.n	800227c <LCD_Line.constprop.0+0x8b8>
 8002534:	2310      	movs	r3, #16
 8002536:	f8c8 3010 	str.w	r3, [r8, #16]
 800253a:	e697      	b.n	800226c <LCD_Line.constprop.0+0x8a8>
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	f8c9 2010 	str.w	r2, [r9, #16]
 8002542:	e68c      	b.n	800225e <LCD_Line.constprop.0+0x89a>
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	f8c9 1010 	str.w	r1, [r9, #16]
 800254a:	e681      	b.n	8002250 <LCD_Line.constprop.0+0x88c>
 800254c:	f04f 0e20 	mov.w	lr, #32
 8002550:	f8c9 e010 	str.w	lr, [r9, #16]
 8002554:	e675      	b.n	8002242 <LCD_Line.constprop.0+0x87e>
 8002556:	f04f 0e10 	mov.w	lr, #16
 800255a:	f8c9 e010 	str.w	lr, [r9, #16]
 800255e:	e668      	b.n	8002232 <LCD_Line.constprop.0+0x86e>
 8002560:	f04f 0e08 	mov.w	lr, #8
 8002564:	f8c9 e010 	str.w	lr, [r9, #16]
 8002568:	e65b      	b.n	8002222 <LCD_Line.constprop.0+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800256a:	f8c9 7010 	str.w	r7, [r9, #16]
 800256e:	e652      	b.n	8002216 <LCD_Line.constprop.0+0x852>
    GPIOx->BSRR = GPIO_Pin;
 8002570:	f04f 0e20 	mov.w	lr, #32
 8002574:	f8c8 e010 	str.w	lr, [r8, #16]
 8002578:	e623      	b.n	80021c2 <LCD_Line.constprop.0+0x7fe>
 800257a:	f04f 0e10 	mov.w	lr, #16
 800257e:	f8c8 e010 	str.w	lr, [r8, #16]
 8002582:	e616      	b.n	80021b2 <LCD_Line.constprop.0+0x7ee>
 8002584:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002588:	f8c9 e010 	str.w	lr, [r9, #16]
 800258c:	e609      	b.n	80021a2 <LCD_Line.constprop.0+0x7de>
 800258e:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002592:	f8c9 e010 	str.w	lr, [r9, #16]
 8002596:	e5fc      	b.n	8002192 <LCD_Line.constprop.0+0x7ce>
 8002598:	f04f 0e20 	mov.w	lr, #32
 800259c:	f8c9 e010 	str.w	lr, [r9, #16]
 80025a0:	e5ef      	b.n	8002182 <LCD_Line.constprop.0+0x7be>
 80025a2:	f04f 0e10 	mov.w	lr, #16
 80025a6:	f8c9 e010 	str.w	lr, [r9, #16]
 80025aa:	e5e2      	b.n	8002172 <LCD_Line.constprop.0+0x7ae>
 80025ac:	f04f 0e08 	mov.w	lr, #8
 80025b0:	f8c9 e010 	str.w	lr, [r9, #16]
 80025b4:	e5d5      	b.n	8002162 <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025b6:	f8c9 7010 	str.w	r7, [r9, #16]
 80025ba:	e5cc      	b.n	8002156 <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80025bc:	f04f 0e20 	mov.w	lr, #32
 80025c0:	f8c8 e010 	str.w	lr, [r8, #16]
 80025c4:	e59d      	b.n	8002102 <LCD_Line.constprop.0+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c6:	f8c9 7010 	str.w	r7, [r9, #16]
 80025ca:	e4dc      	b.n	8001f86 <LCD_Line.constprop.0+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 80025cc:	2320      	movs	r3, #32
 80025ce:	f8c8 3010 	str.w	r3, [r8, #16]
 80025d2:	e478      	b.n	8001ec6 <LCD_Line.constprop.0+0x502>
 80025d4:	2310      	movs	r3, #16
 80025d6:	f8c8 3010 	str.w	r3, [r8, #16]
 80025da:	e46c      	b.n	8001eb6 <LCD_Line.constprop.0+0x4f2>
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	f8c9 2010 	str.w	r2, [r9, #16]
 80025e2:	e461      	b.n	8001ea8 <LCD_Line.constprop.0+0x4e4>
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	f8c9 1010 	str.w	r1, [r9, #16]
 80025ea:	e456      	b.n	8001e9a <LCD_Line.constprop.0+0x4d6>
 80025ec:	f04f 0e20 	mov.w	lr, #32
 80025f0:	f8c9 e010 	str.w	lr, [r9, #16]
 80025f4:	e44a      	b.n	8001e8c <LCD_Line.constprop.0+0x4c8>
 80025f6:	f04f 0e10 	mov.w	lr, #16
 80025fa:	f8c9 e010 	str.w	lr, [r9, #16]
 80025fe:	e43d      	b.n	8001e7c <LCD_Line.constprop.0+0x4b8>
 8002600:	f04f 0e08 	mov.w	lr, #8
 8002604:	f8c9 e010 	str.w	lr, [r9, #16]
 8002608:	e430      	b.n	8001e6c <LCD_Line.constprop.0+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260a:	f8c9 7010 	str.w	r7, [r9, #16]
 800260e:	e427      	b.n	8001e60 <LCD_Line.constprop.0+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 8002610:	f04f 0e20 	mov.w	lr, #32
 8002614:	f8c8 e010 	str.w	lr, [r8, #16]
 8002618:	f7ff bbf0 	b.w	8001dfc <LCD_Line.constprop.0+0x438>
 800261c:	f04f 0e10 	mov.w	lr, #16
 8002620:	f8c8 e010 	str.w	lr, [r8, #16]
 8002624:	f7ff bbe2 	b.w	8001dec <LCD_Line.constprop.0+0x428>
 8002628:	f04f 0e80 	mov.w	lr, #128	; 0x80
 800262c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002630:	f7ff bbd4 	b.w	8001ddc <LCD_Line.constprop.0+0x418>
 8002634:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002638:	f8c9 e010 	str.w	lr, [r9, #16]
 800263c:	f7ff bbc6 	b.w	8001dcc <LCD_Line.constprop.0+0x408>
 8002640:	f04f 0e20 	mov.w	lr, #32
 8002644:	f8c9 e010 	str.w	lr, [r9, #16]
 8002648:	f7ff bbb8 	b.w	8001dbc <LCD_Line.constprop.0+0x3f8>
 800264c:	f04f 0e10 	mov.w	lr, #16
 8002650:	f8c9 e010 	str.w	lr, [r9, #16]
 8002654:	f7ff bbaa 	b.w	8001dac <LCD_Line.constprop.0+0x3e8>
 8002658:	f04f 0e08 	mov.w	lr, #8
 800265c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002660:	f7ff bb9c 	b.w	8001d9c <LCD_Line.constprop.0+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002664:	f8c9 7010 	str.w	r7, [r9, #16]
 8002668:	f7ff bb92 	b.w	8001d90 <LCD_Line.constprop.0+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 800266c:	f04f 0e20 	mov.w	lr, #32
 8002670:	f8c8 e010 	str.w	lr, [r8, #16]
 8002674:	f7ff bb62 	b.w	8001d3c <LCD_Line.constprop.0+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002678:	f8c9 7010 	str.w	r7, [r9, #16]
 800267c:	f7ff ba9f 	b.w	8001bbe <LCD_Line.constprop.0+0x1fa>
		if (x1 == x2 && y1 == y2)
 8002680:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002682:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002686:	f47f aeb6 	bne.w	80023f6 <LCD_Line.constprop.0+0xa32>
		}
	}
}
 800268a:	b03b      	add	sp, #236	; 0xec
 800268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002690 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002694:	b0ab      	sub	sp, #172	; 0xac
 8002696:	9123      	str	r1, [sp, #140]	; 0x8c
 8002698:	4619      	mov	r1, r3
 800269a:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 800269c:	1a13      	subs	r3, r2, r0
 800269e:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80026a2:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 80026a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 80026a8:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 80026aa:	1acb      	subs	r3, r1, r3
 80026ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026b4:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 80026b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80026b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80026ba:	4282      	cmp	r2, r0
 80026bc:	bf8c      	ite	hi
 80026be:	2201      	movhi	r2, #1
 80026c0:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80026c4:	4299      	cmp	r1, r3
 80026c6:	bf8c      	ite	hi
 80026c8:	2101      	movhi	r1, #1
 80026ca:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80026ce:	9227      	str	r2, [sp, #156]	; 0x9c
 80026d0:	0a1a      	lsrs	r2, r3, #8
 80026d2:	9214      	str	r2, [sp, #80]	; 0x50
 80026d4:	0bda      	lsrs	r2, r3, #15
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	0b9a      	lsrs	r2, r3, #14
 80026da:	9220      	str	r2, [sp, #128]	; 0x80
 80026dc:	0b5a      	lsrs	r2, r3, #13
 80026de:	921e      	str	r2, [sp, #120]	; 0x78
 80026e0:	0b1a      	lsrs	r2, r3, #12
 80026e2:	921c      	str	r2, [sp, #112]	; 0x70
 80026e4:	0ada      	lsrs	r2, r3, #11
 80026e6:	921a      	str	r2, [sp, #104]	; 0x68
 80026e8:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 80026ea:	9128      	str	r1, [sp, #160]	; 0xa0
 80026ec:	9218      	str	r2, [sp, #96]	; 0x60
 80026ee:	b2d9      	uxtb	r1, r3
 80026f0:	0a5a      	lsrs	r2, r3, #9
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	9312      	str	r3, [sp, #72]	; 0x48
 80026f8:	f000 0301 	and.w	r3, r0, #1
 80026fc:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 80026fe:	4663      	mov	r3, ip
 8002700:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002704:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8002708:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800270c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8002710:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002714:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002718:	9216      	str	r2, [sp, #88]	; 0x58
 800271a:	0a02      	lsrs	r2, r0, #8
 800271c:	9213      	str	r2, [sp, #76]	; 0x4c
 800271e:	0bc2      	lsrs	r2, r0, #15
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	0b82      	lsrs	r2, r0, #14
 8002724:	921f      	str	r2, [sp, #124]	; 0x7c
 8002726:	0b42      	lsrs	r2, r0, #13
 8002728:	921d      	str	r2, [sp, #116]	; 0x74
 800272a:	0b02      	lsrs	r2, r0, #12
 800272c:	921b      	str	r2, [sp, #108]	; 0x6c
 800272e:	0ac2      	lsrs	r2, r0, #11
 8002730:	9219      	str	r2, [sp, #100]	; 0x64
 8002732:	0a82      	lsrs	r2, r0, #10
 8002734:	9122      	str	r1, [sp, #136]	; 0x88
 8002736:	9217      	str	r2, [sp, #92]	; 0x5c
 8002738:	b2c1      	uxtb	r1, r0
 800273a:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 800273c:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 800273e:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8002742:	9215      	str	r2, [sp, #84]	; 0x54
 8002744:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 8002746:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002748:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002a9c <LCD_Line.constprop.1+0x40c>
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	f8df a350 	ldr.w	sl, [pc, #848]	; 8002aa0 <LCD_Line.constprop.1+0x410>
 8002752:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8002aa4 <LCD_Line.constprop.1+0x414>
 8002756:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002758:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800275c:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002760:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002762:	f8cb e010 	str.w	lr, [fp, #16]
 8002766:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800276a:	f8ca 7010 	str.w	r7, [sl, #16]
 800276e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002772:	f8ca 4010 	str.w	r4, [sl, #16]
 8002776:	f8c9 6010 	str.w	r6, [r9, #16]
 800277a:	f8c9 5010 	str.w	r5, [r9, #16]
 800277e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002782:	f8c9 4010 	str.w	r4, [r9, #16]
 8002786:	f8c9 8010 	str.w	r8, [r9, #16]
 800278a:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 800278c:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 800278e:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002792:	f8c9 1010 	str.w	r1, [r9, #16]
 8002796:	f8ca 5010 	str.w	r5, [sl, #16]
 800279a:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800279e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027a2:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027aa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027ae:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	f8c9 2010 	str.w	r2, [r9, #16]
 80027b6:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b8:	f8c9 3010 	str.w	r3, [r9, #16]
 80027bc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027c0:	f8cb 2010 	str.w	r2, [fp, #16]
 80027c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c8:	f8cb 2010 	str.w	r2, [fp, #16]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d2:	f8cb e010 	str.w	lr, [fp, #16]
 80027d6:	f8ca 7010 	str.w	r7, [sl, #16]
 80027da:	f8ca 4010 	str.w	r4, [sl, #16]
 80027de:	f8c9 6010 	str.w	r6, [r9, #16]
 80027e2:	f8c9 5010 	str.w	r5, [r9, #16]
 80027e6:	f8c9 7010 	str.w	r7, [r9, #16]
 80027ea:	f8c9 4010 	str.w	r4, [r9, #16]
 80027ee:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	f8c9 1010 	str.w	r1, [r9, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 849f 	beq.w	800313c <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	2304      	movs	r3, #4
 8002800:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002804:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002806:	f013 0001 	ands.w	r0, r3, #1
 800280a:	bf1c      	itt	ne
 800280c:	2308      	movne	r3, #8
 800280e:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002812:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002814:	bf08      	it	eq
 8002816:	f8ca 6010 	streq.w	r6, [sl, #16]
 800281a:	f013 0301 	ands.w	r3, r3, #1
 800281e:	9303      	str	r3, [sp, #12]
 8002820:	bf0c      	ite	eq
 8002822:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002826:	2310      	movne	r3, #16
 8002828:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800282c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800282e:	f013 0301 	ands.w	r3, r3, #1
 8002832:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002834:	bf0c      	ite	eq
 8002836:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800283a:	2320      	movne	r3, #32
 800283c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002840:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002842:	f013 0301 	ands.w	r3, r3, #1
 8002846:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002848:	bf0c      	ite	eq
 800284a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800284e:	2340      	movne	r3, #64	; 0x40
 8002850:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002854:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002856:	f013 0301 	ands.w	r3, r3, #1
 800285a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800285c:	bf0c      	ite	eq
 800285e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002862:	2380      	movne	r3, #128	; 0x80
 8002864:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800286a:	f013 0301 	ands.w	r3, r3, #1
 800286e:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002870:	bf0c      	ite	eq
 8002872:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002876:	2310      	movne	r3, #16
 8002878:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800287c:	f01c 0301 	ands.w	r3, ip, #1
 8002880:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002882:	bf0c      	ite	eq
 8002884:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002888:	2320      	movne	r3, #32
 800288a:	f8c9 3010 	str.w	r3, [r9, #16]
 800288e:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002890:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002894:	f8cb 3010 	str.w	r3, [fp, #16]
 8002898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289c:	f8cb 3010 	str.w	r3, [fp, #16]
 80028a0:	2301      	movs	r3, #1
 80028a2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028aa:	f8cb e010 	str.w	lr, [fp, #16]
 80028ae:	f8ca 7010 	str.w	r7, [sl, #16]
 80028b2:	f8ca 4010 	str.w	r4, [sl, #16]
 80028b6:	f8c9 6010 	str.w	r6, [r9, #16]
 80028ba:	f8c9 5010 	str.w	r5, [r9, #16]
 80028be:	f8c9 7010 	str.w	r7, [r9, #16]
 80028c2:	f8c9 4010 	str.w	r4, [r9, #16]
 80028c6:	f8c9 8010 	str.w	r8, [r9, #16]
 80028ca:	f8c9 3010 	str.w	r3, [r9, #16]
 80028ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80028d0:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80028d2:	09d2      	lsrs	r2, r2, #7
 80028d4:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	bf1c      	itt	ne
 80028d8:	2204      	movne	r2, #4
 80028da:	f8ca 2010 	strne.w	r2, [sl, #16]
 80028de:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e2:	bf08      	it	eq
 80028e4:	f8ca 5010 	streq.w	r5, [sl, #16]
 80028e8:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80028ea:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80028ec:	bf4a      	itet	mi
 80028ee:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f0:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028f4:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80028f8:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80028fc:	0699      	lsls	r1, r3, #26
 80028fe:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002900:	bf54      	ite	pl
 8002902:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002906:	2210      	movmi	r2, #16
 8002908:	f8ca 2010 	str.w	r2, [sl, #16]
 800290c:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002910:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002912:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002914:	bf54      	ite	pl
 8002916:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800291a:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800291c:	0719      	lsls	r1, r3, #28
 800291e:	f8ca 2010 	str.w	r2, [sl, #16]
 8002922:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002926:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002928:	bf54      	ite	pl
 800292a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800292e:	2240      	movmi	r2, #64	; 0x40
 8002930:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002934:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002936:	bf54      	ite	pl
 8002938:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800293c:	2280      	movmi	r2, #128	; 0x80
 800293e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002942:	f8ca 2010 	str.w	r2, [sl, #16]
 8002946:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800294a:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294c:	bf54      	ite	pl
 800294e:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002952:	2310      	movmi	r3, #16
 8002954:	f8c9 3010 	str.w	r3, [r9, #16]
 8002958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800295a:	fa1f fc83 	uxth.w	ip, r3
 800295e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 83e5 	bne.w	8003132 <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002968:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800296c:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002970:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002974:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002978:	f8cb c010 	str.w	ip, [fp, #16]
 800297c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002980:	f8cb c010 	str.w	ip, [fp, #16]
 8002984:	f04f 0c01 	mov.w	ip, #1
 8002988:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002992:	f8cb e010 	str.w	lr, [fp, #16]
 8002996:	f8ca 7010 	str.w	r7, [sl, #16]
 800299a:	f8ca 4010 	str.w	r4, [sl, #16]
 800299e:	f8c9 6010 	str.w	r6, [r9, #16]
 80029a2:	f8c9 5010 	str.w	r5, [r9, #16]
 80029a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80029aa:	f8c9 4010 	str.w	r4, [r9, #16]
 80029ae:	f8c9 8010 	str.w	r8, [r9, #16]
 80029b2:	f8c9 c010 	str.w	ip, [r9, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 83b8 	beq.w	800312c <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 80029bc:	f04f 0c04 	mov.w	ip, #4
 80029c0:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80029c4:	2800      	cmp	r0, #0
 80029c6:	f040 83ad 	bne.w	8003124 <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ca:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029ce:	9b03      	ldr	r3, [sp, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 83a3 	bne.w	800311c <LCD_Line.constprop.1+0xa8c>
 80029d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029da:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029de:	9b04      	ldr	r3, [sp, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 8397 	bne.w	8003114 <LCD_Line.constprop.1+0xa84>
 80029e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80029ea:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f040 838b 	bne.w	800310c <LCD_Line.constprop.1+0xa7c>
 80029f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80029fa:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 837f 	bne.w	8003104 <LCD_Line.constprop.1+0xa74>
 8002a06:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a0a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002a0e:	9b05      	ldr	r3, [sp, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 8373 	bne.w	80030fc <LCD_Line.constprop.1+0xa6c>
 8002a16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a1a:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a1e:	9b06      	ldr	r3, [sp, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 8367 	bne.w	80030f4 <LCD_Line.constprop.1+0xa64>
 8002a26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a2a:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a2e:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a30:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a34:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a3c:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a40:	2001      	movs	r0, #1
 8002a42:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a4a:	9b07      	ldr	r3, [sp, #28]
 8002a4c:	f8cb e010 	str.w	lr, [fp, #16]
 8002a50:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a54:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a58:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a5c:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a60:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a64:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a68:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a6c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 833c 	beq.w	80030ee <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	2004      	movs	r0, #4
 8002a78:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 8331 	bne.w	80030e6 <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a84:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a88:	9b08      	ldr	r3, [sp, #32]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8327 	bne.w	80030de <LCD_Line.constprop.1+0xa4e>
 8002a90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a94:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a98:	e006      	b.n	8002aa8 <LCD_Line.constprop.1+0x418>
 8002a9a:	bf00      	nop
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8313 	bne.w	80030d6 <LCD_Line.constprop.1+0xa46>
 8002ab0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ab4:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8307 	bne.w	80030ce <LCD_Line.constprop.1+0xa3e>
 8002ac0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002ac4:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002ac8:	2900      	cmp	r1, #0
 8002aca:	f040 82fc 	bne.w	80030c6 <LCD_Line.constprop.1+0xa36>
 8002ace:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002ad2:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	f040 82f1 	bne.w	80030be <LCD_Line.constprop.1+0xa2e>
 8002adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ae0:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 82e5 	bne.w	80030b6 <LCD_Line.constprop.1+0xa26>
 8002aec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002af0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002af4:	f8bd 2000 	ldrh.w	r2, [sp]
 8002af8:	f8cb 7010 	str.w	r7, [fp, #16]
 8002afc:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8002b00:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8002b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b08:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002b10:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b1a:	f8cb 4010 	str.w	r4, [fp, #16]
 8002b1e:	f8cb e010 	str.w	lr, [fp, #16]
 8002b22:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b26:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b2a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b2e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b32:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b36:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b3a:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b3e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002b42:	f8ca 5010 	str.w	r5, [sl, #16]
 8002b46:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b4e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b5c:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b60:	2220      	movs	r2, #32
 8002b62:	f8c9 1010 	str.w	r1, [r9, #16]
 8002b66:	f8c9 2010 	str.w	r2, [r9, #16]
 8002b6a:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b6c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b70:	f8cb 2010 	str.w	r2, [fp, #16]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f8cb 3010 	str.w	r3, [fp, #16]
 8002b7a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b7e:	f8cb e010 	str.w	lr, [fp, #16]
 8002b82:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b86:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b8a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b8e:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002b92:	9b00      	ldr	r3, [sp, #0]
 8002b94:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b98:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b9c:	f8c9 8010 	str.w	r8, [r9, #16]
 8002ba0:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8283 	beq.w	80030b0 <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	2304      	movs	r3, #4
 8002bac:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002bb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002bb2:	f013 0001 	ands.w	r0, r3, #1
 8002bb6:	bf1c      	itt	ne
 8002bb8:	2308      	movne	r3, #8
 8002bba:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc0:	bf08      	it	eq
 8002bc2:	f8ca 6010 	streq.w	r6, [sl, #16]
 8002bc6:	f013 0301 	ands.w	r3, r3, #1
 8002bca:	930c      	str	r3, [sp, #48]	; 0x30
 8002bcc:	bf0c      	ite	eq
 8002bce:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	2310      	movne	r3, #16
 8002bd4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002bd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002bda:	f013 0301 	ands.w	r3, r3, #1
 8002bde:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002be0:	bf0c      	ite	eq
 8002be2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	2320      	movne	r3, #32
 8002be8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002bec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002bee:	f013 0301 	ands.w	r3, r3, #1
 8002bf2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bf4:	bf0c      	ite	eq
 8002bf6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	2340      	movne	r3, #64	; 0x40
 8002bfc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c02:	f013 0301 	ands.w	r3, r3, #1
 8002c06:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c08:	bf0c      	ite	eq
 8002c0a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	2380      	movne	r3, #128	; 0x80
 8002c10:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002c16:	f013 0301 	ands.w	r3, r3, #1
 8002c1a:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c1c:	bf0c      	ite	eq
 8002c1e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	2310      	movne	r3, #16
 8002c24:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002c28:	f01c 0301 	ands.w	r3, ip, #1
 8002c2c:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c2e:	bf0c      	ite	eq
 8002c30:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002c34:	2320      	movne	r3, #32
 8002c36:	f8c9 3010 	str.w	r3, [r9, #16]
 8002c3a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c3c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c40:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c48:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c56:	f8cb e010 	str.w	lr, [fp, #16]
 8002c5a:	f8ca 7010 	str.w	r7, [sl, #16]
 8002c5e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002c62:	f8c9 6010 	str.w	r6, [r9, #16]
 8002c66:	f8c9 5010 	str.w	r5, [r9, #16]
 8002c6a:	f8c9 7010 	str.w	r7, [r9, #16]
 8002c6e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002c72:	f8c9 8010 	str.w	r8, [r9, #16]
 8002c76:	f8c9 3010 	str.w	r3, [r9, #16]
 8002c7a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002c7c:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002c7e:	09d2      	lsrs	r2, r2, #7
 8002c80:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	bf1c      	itt	ne
 8002c84:	2204      	movne	r2, #4
 8002c86:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002c8a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	bf08      	it	eq
 8002c90:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002c94:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002c96:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002c98:	bf4a      	itet	mi
 8002c9a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c9c:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ca0:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8002ca4:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002ca8:	0699      	lsls	r1, r3, #26
 8002caa:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cac:	bf54      	ite	pl
 8002cae:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	2210      	movmi	r2, #16
 8002cb4:	f8ca 2010 	str.w	r2, [sl, #16]
 8002cb8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002cbc:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002cbe:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc0:	bf54      	ite	pl
 8002cc2:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002cc6:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002cc8:	0719      	lsls	r1, r3, #28
 8002cca:	f8ca 2010 	str.w	r2, [sl, #16]
 8002cce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002cd2:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd4:	bf54      	ite	pl
 8002cd6:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	2240      	movmi	r2, #64	; 0x40
 8002cdc:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002ce0:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce2:	bf54      	ite	pl
 8002ce4:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002ce8:	2280      	movmi	r2, #128	; 0x80
 8002cea:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002cee:	f8ca 2010 	str.w	r2, [sl, #16]
 8002cf2:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002cf6:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cf8:	bf54      	ite	pl
 8002cfa:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	2310      	movmi	r3, #16
 8002d00:	f8c9 3010 	str.w	r3, [r9, #16]
 8002d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d06:	fa1f fc83 	uxth.w	ip, r3
 8002d0a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 81c9 	bne.w	80030a6 <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d14:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002d18:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d1c:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d20:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d24:	f8cb c010 	str.w	ip, [fp, #16]
 8002d28:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002d2c:	f8cb c010 	str.w	ip, [fp, #16]
 8002d30:	f04f 0c01 	mov.w	ip, #1
 8002d34:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d38:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d3e:	f8cb e010 	str.w	lr, [fp, #16]
 8002d42:	f8ca 7010 	str.w	r7, [sl, #16]
 8002d46:	f8ca 4010 	str.w	r4, [sl, #16]
 8002d4a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002d4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002d52:	f8c9 7010 	str.w	r7, [r9, #16]
 8002d56:	f8c9 4010 	str.w	r4, [r9, #16]
 8002d5a:	f8c9 8010 	str.w	r8, [r9, #16]
 8002d5e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 819c 	beq.w	80030a0 <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8002d68:	f04f 0c04 	mov.w	ip, #4
 8002d6c:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002d70:	2800      	cmp	r0, #0
 8002d72:	f040 8191 	bne.w	8003098 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d76:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 8187 	bne.w	8003090 <LCD_Line.constprop.1+0xa00>
 8002d82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d86:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 817b 	bne.w	8003088 <LCD_Line.constprop.1+0x9f8>
 8002d92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d96:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 816f 	bne.w	8003080 <LCD_Line.constprop.1+0x9f0>
 8002da2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002da6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8163 	bne.w	8003078 <LCD_Line.constprop.1+0x9e8>
 8002db2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002db6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002dba:	9b08      	ldr	r3, [sp, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8157 	bne.w	8003070 <LCD_Line.constprop.1+0x9e0>
 8002dc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002dc6:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002dca:	9b07      	ldr	r3, [sp, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 814b 	bne.w	8003068 <LCD_Line.constprop.1+0x9d8>
 8002dd2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002dd6:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002dda:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ddc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002de0:	f8cb 0010 	str.w	r0, [fp, #16]
 8002de4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002de8:	f8cb 0010 	str.w	r0, [fp, #16]
 8002dec:	2001      	movs	r0, #1
 8002dee:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002df6:	9b06      	ldr	r3, [sp, #24]
 8002df8:	f8cb e010 	str.w	lr, [fp, #16]
 8002dfc:	f8ca 7010 	str.w	r7, [sl, #16]
 8002e00:	f8ca 4010 	str.w	r4, [sl, #16]
 8002e04:	f8c9 6010 	str.w	r6, [r9, #16]
 8002e08:	f8c9 5010 	str.w	r5, [r9, #16]
 8002e0c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002e10:	f8c9 4010 	str.w	r4, [r9, #16]
 8002e14:	f8c9 8010 	str.w	r8, [r9, #16]
 8002e18:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8120 	beq.w	8003062 <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	2004      	movs	r0, #4
 8002e24:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002e28:	9b05      	ldr	r3, [sp, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8115 	bne.w	800305a <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e30:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002e34:	9b04      	ldr	r3, [sp, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 810b 	bne.w	8003052 <LCD_Line.constprop.1+0x9c2>
 8002e3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e40:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002e44:	9b03      	ldr	r3, [sp, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 80ff 	bne.w	800304a <LCD_Line.constprop.1+0x9ba>
 8002e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e50:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 80f3 	bne.w	8003042 <LCD_Line.constprop.1+0x9b2>
 8002e5c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e60:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002e64:	2900      	cmp	r1, #0
 8002e66:	f040 80e8 	bne.w	800303a <LCD_Line.constprop.1+0x9aa>
 8002e6a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002e6e:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	f040 80dd 	bne.w	8003032 <LCD_Line.constprop.1+0x9a2>
 8002e78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e7c:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80d1 	bne.w	800302a <LCD_Line.constprop.1+0x99a>
 8002e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e8c:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e90:	2202      	movs	r2, #2
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e9a:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	f8cb 2010 	str.w	r2, [fp, #16]
 8002ea2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ea6:	f8cb 4010 	str.w	r4, [fp, #16]
 8002eaa:	f8cb e010 	str.w	lr, [fp, #16]
 8002eae:	f8ca 7010 	str.w	r7, [sl, #16]
 8002eb2:	f8ca 4010 	str.w	r4, [sl, #16]
 8002eb6:	f8c9 6010 	str.w	r6, [r9, #16]
 8002eba:	f8c9 5010 	str.w	r5, [r9, #16]
 8002ebe:	f8c9 7010 	str.w	r7, [r9, #16]
 8002ec2:	f8c9 4010 	str.w	r4, [r9, #16]
 8002ec6:	f8c9 8010 	str.w	r8, [r9, #16]
 8002eca:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed0:	f8ca 5010 	str.w	r5, [sl, #16]
 8002ed4:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ed8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002edc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ee0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ee4:	2040      	movs	r0, #64	; 0x40
 8002ee6:	f8ca 0010 	str.w	r0, [sl, #16]
 8002eea:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002ef0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ef8:	f8c9 1010 	str.w	r1, [r9, #16]
 8002efc:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f00:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f02:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	f8cb 2010 	str.w	r2, [fp, #16]
 8002f0a:	f8cb 3010 	str.w	r3, [fp, #16]
 8002f0e:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f16:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f1e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002f22:	f8ca 4010 	str.w	r4, [sl, #16]
 8002f26:	f8c9 6010 	str.w	r6, [r9, #16]
 8002f2a:	f8c9 5010 	str.w	r5, [r9, #16]
 8002f2e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002f32:	f8c9 4010 	str.w	r4, [r9, #16]
 8002f36:	f8c9 8010 	str.w	r8, [r9, #16]
 8002f3a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002f3e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f42:	f8ca 6010 	str.w	r6, [sl, #16]
 8002f46:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	f8ca c010 	str.w	ip, [sl, #16]
 8002f50:	2010      	movs	r0, #16
 8002f52:	f8ca 1010 	str.w	r1, [sl, #16]
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	f8ca 1010 	str.w	r1, [sl, #16]
 8002f5c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002f60:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f64:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f68:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f6e:	f8cb 3010 	str.w	r3, [fp, #16]
 8002f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002f74:	4293      	cmp	r3, r2
 8002f76:	f000 80e5 	beq.w	8003144 <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002f7a:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002f7c:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002f7e:	4243      	negs	r3, r0
 8002f80:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002f84:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002f88:	da24      	bge.n	8002fd4 <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f8c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002f90:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002f92:	4463      	add	r3, ip
			error -= deltaY;
 8002f94:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002f96:	b299      	uxth	r1, r3
 8002f98:	9110      	str	r1, [sp, #64]	; 0x40
 8002f9a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002f9e:	9113      	str	r1, [sp, #76]	; 0x4c
 8002fa0:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002fa4:	9100      	str	r1, [sp, #0]
 8002fa6:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002faa:	911f      	str	r1, [sp, #124]	; 0x7c
 8002fac:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002fb0:	911d      	str	r1, [sp, #116]	; 0x74
 8002fb2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002fb6:	911b      	str	r1, [sp, #108]	; 0x6c
 8002fb8:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002fbc:	9119      	str	r1, [sp, #100]	; 0x64
 8002fbe:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002fc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8002fc4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002fc8:	9115      	str	r1, [sp, #84]	; 0x54
 8002fca:	b2d9      	uxtb	r1, r3
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	9121      	str	r1, [sp, #132]	; 0x84
 8002fd2:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002fd4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002fd6:	4291      	cmp	r1, r2
 8002fd8:	f77f abbe 	ble.w	8002758 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002fdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fde:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002fe0:	4413      	add	r3, r2
			error += deltaX;
 8002fe2:	9a02      	ldr	r2, [sp, #8]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	9223      	str	r2, [sp, #140]	; 0x8c
 8002fec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002ff0:	9214      	str	r2, [sp, #80]	; 0x50
 8002ff2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002ffc:	9220      	str	r2, [sp, #128]	; 0x80
 8002ffe:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8003002:	921e      	str	r2, [sp, #120]	; 0x78
 8003004:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8003008:	921c      	str	r2, [sp, #112]	; 0x70
 800300a:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 800300e:	921a      	str	r2, [sp, #104]	; 0x68
 8003010:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8003014:	9218      	str	r2, [sp, #96]	; 0x60
 8003016:	f3c3 2246 	ubfx	r2, r3, #9, #7
 800301a:	9216      	str	r2, [sp, #88]	; 0x58
 800301c:	b2da      	uxtb	r2, r3
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	9222      	str	r2, [sp, #136]	; 0x88
 8003024:	9312      	str	r3, [sp, #72]	; 0x48
 8003026:	f7ff bb97 	b.w	8002758 <LCD_Line.constprop.1+0xc8>
 800302a:	2320      	movs	r3, #32
 800302c:	f8c9 3010 	str.w	r3, [r9, #16]
 8003030:	e72e      	b.n	8002e90 <LCD_Line.constprop.1+0x800>
 8003032:	2210      	movs	r2, #16
 8003034:	f8c9 2010 	str.w	r2, [r9, #16]
 8003038:	e722      	b.n	8002e80 <LCD_Line.constprop.1+0x7f0>
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	f8ca 1010 	str.w	r1, [sl, #16]
 8003040:	e717      	b.n	8002e72 <LCD_Line.constprop.1+0x7e2>
 8003042:	2040      	movs	r0, #64	; 0x40
 8003044:	f8ca 0010 	str.w	r0, [sl, #16]
 8003048:	e70c      	b.n	8002e64 <LCD_Line.constprop.1+0x7d4>
 800304a:	2020      	movs	r0, #32
 800304c:	f8ca 0010 	str.w	r0, [sl, #16]
 8003050:	e700      	b.n	8002e54 <LCD_Line.constprop.1+0x7c4>
 8003052:	2010      	movs	r0, #16
 8003054:	f8ca 0010 	str.w	r0, [sl, #16]
 8003058:	e6f4      	b.n	8002e44 <LCD_Line.constprop.1+0x7b4>
 800305a:	2008      	movs	r0, #8
 800305c:	f8ca 0010 	str.w	r0, [sl, #16]
 8003060:	e6e8      	b.n	8002e34 <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003062:	f8ca 5010 	str.w	r5, [sl, #16]
 8003066:	e6df      	b.n	8002e28 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8003068:	2020      	movs	r0, #32
 800306a:	f8c9 0010 	str.w	r0, [r9, #16]
 800306e:	e6b4      	b.n	8002dda <LCD_Line.constprop.1+0x74a>
 8003070:	2010      	movs	r0, #16
 8003072:	f8c9 0010 	str.w	r0, [r9, #16]
 8003076:	e6a8      	b.n	8002dca <LCD_Line.constprop.1+0x73a>
 8003078:	2080      	movs	r0, #128	; 0x80
 800307a:	f8ca 0010 	str.w	r0, [sl, #16]
 800307e:	e69c      	b.n	8002dba <LCD_Line.constprop.1+0x72a>
 8003080:	2040      	movs	r0, #64	; 0x40
 8003082:	f8ca 0010 	str.w	r0, [sl, #16]
 8003086:	e690      	b.n	8002daa <LCD_Line.constprop.1+0x71a>
 8003088:	2020      	movs	r0, #32
 800308a:	f8ca 0010 	str.w	r0, [sl, #16]
 800308e:	e684      	b.n	8002d9a <LCD_Line.constprop.1+0x70a>
 8003090:	2010      	movs	r0, #16
 8003092:	f8ca 0010 	str.w	r0, [sl, #16]
 8003096:	e678      	b.n	8002d8a <LCD_Line.constprop.1+0x6fa>
 8003098:	2008      	movs	r0, #8
 800309a:	f8ca 0010 	str.w	r0, [sl, #16]
 800309e:	e66c      	b.n	8002d7a <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a0:	f8ca 5010 	str.w	r5, [sl, #16]
 80030a4:	e664      	b.n	8002d70 <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	f04f 0c20 	mov.w	ip, #32
 80030aa:	f8c9 c010 	str.w	ip, [r9, #16]
 80030ae:	e635      	b.n	8002d1c <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030b0:	f8ca 5010 	str.w	r5, [sl, #16]
 80030b4:	e57c      	b.n	8002bb0 <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	2320      	movs	r3, #32
 80030b8:	f8c9 3010 	str.w	r3, [r9, #16]
 80030bc:	e51a      	b.n	8002af4 <LCD_Line.constprop.1+0x464>
 80030be:	2210      	movs	r2, #16
 80030c0:	f8c9 2010 	str.w	r2, [r9, #16]
 80030c4:	e50e      	b.n	8002ae4 <LCD_Line.constprop.1+0x454>
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	f8ca 1010 	str.w	r1, [sl, #16]
 80030cc:	e503      	b.n	8002ad6 <LCD_Line.constprop.1+0x446>
 80030ce:	2040      	movs	r0, #64	; 0x40
 80030d0:	f8ca 0010 	str.w	r0, [sl, #16]
 80030d4:	e4f8      	b.n	8002ac8 <LCD_Line.constprop.1+0x438>
 80030d6:	2020      	movs	r0, #32
 80030d8:	f8ca 0010 	str.w	r0, [sl, #16]
 80030dc:	e4ec      	b.n	8002ab8 <LCD_Line.constprop.1+0x428>
 80030de:	2010      	movs	r0, #16
 80030e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80030e4:	e4e0      	b.n	8002aa8 <LCD_Line.constprop.1+0x418>
 80030e6:	2008      	movs	r0, #8
 80030e8:	f8ca 0010 	str.w	r0, [sl, #16]
 80030ec:	e4cc      	b.n	8002a88 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ee:	f8ca 5010 	str.w	r5, [sl, #16]
 80030f2:	e4c3      	b.n	8002a7c <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 80030f4:	2020      	movs	r0, #32
 80030f6:	f8c9 0010 	str.w	r0, [r9, #16]
 80030fa:	e498      	b.n	8002a2e <LCD_Line.constprop.1+0x39e>
 80030fc:	2010      	movs	r0, #16
 80030fe:	f8c9 0010 	str.w	r0, [r9, #16]
 8003102:	e48c      	b.n	8002a1e <LCD_Line.constprop.1+0x38e>
 8003104:	2080      	movs	r0, #128	; 0x80
 8003106:	f8ca 0010 	str.w	r0, [sl, #16]
 800310a:	e480      	b.n	8002a0e <LCD_Line.constprop.1+0x37e>
 800310c:	2040      	movs	r0, #64	; 0x40
 800310e:	f8ca 0010 	str.w	r0, [sl, #16]
 8003112:	e474      	b.n	80029fe <LCD_Line.constprop.1+0x36e>
 8003114:	2020      	movs	r0, #32
 8003116:	f8ca 0010 	str.w	r0, [sl, #16]
 800311a:	e468      	b.n	80029ee <LCD_Line.constprop.1+0x35e>
 800311c:	2010      	movs	r0, #16
 800311e:	f8ca 0010 	str.w	r0, [sl, #16]
 8003122:	e45c      	b.n	80029de <LCD_Line.constprop.1+0x34e>
 8003124:	2008      	movs	r0, #8
 8003126:	f8ca 0010 	str.w	r0, [sl, #16]
 800312a:	e450      	b.n	80029ce <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800312c:	f8ca 5010 	str.w	r5, [sl, #16]
 8003130:	e448      	b.n	80029c4 <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8003132:	f04f 0c20 	mov.w	ip, #32
 8003136:	f8c9 c010 	str.w	ip, [r9, #16]
 800313a:	e419      	b.n	8002970 <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800313c:	f8ca 5010 	str.w	r5, [sl, #16]
 8003140:	f7ff bb60 	b.w	8002804 <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8003144:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003146:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003148:	4293      	cmp	r3, r2
 800314a:	f47f af16 	bne.w	8002f7a <LCD_Line.constprop.1+0x8ea>
}
 800314e:	b02b      	add	sp, #172	; 0xac
 8003150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003154 <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8003154:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003156:	4c6c      	ldr	r4, [pc, #432]	; (8003308 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8003158:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315a:	6862      	ldr	r2, [r4, #4]
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e003      	b.n	800316e <I2C_RequestMemoryWrite.constprop.0+0x1a>
 8003166:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	1a5b      	subs	r3, r3, r1
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d834      	bhi.n	80031d8 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316e:	6953      	ldr	r3, [r2, #20]
 8003170:	07db      	lsls	r3, r3, #31
 8003172:	d5f8      	bpl.n	8003166 <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003174:	23ae      	movs	r3, #174	; 0xae
 8003176:	6113      	str	r3, [r2, #16]
 8003178:	e00a      	b.n	8003190 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317a:	6953      	ldr	r3, [r2, #20]
 800317c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003180:	d157      	bne.n	8003232 <I2C_RequestMemoryWrite.constprop.0+0xde>
 8003182:	6825      	ldr	r5, [r4, #0]
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003184:	eba5 0c01 	sub.w	ip, r5, r1
 8003188:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 800318c:	f200 80a0 	bhi.w	80032d0 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003190:	6953      	ldr	r3, [r2, #20]
 8003192:	43db      	mvns	r3, r3
 8003194:	f013 0302 	ands.w	r3, r3, #2
 8003198:	d1ef      	bne.n	800317a <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	6953      	ldr	r3, [r2, #20]
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	6993      	ldr	r3, [r2, #24]
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a6:	6953      	ldr	r3, [r2, #20]
 80031a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80031ac:	d159      	bne.n	8003262 <I2C_RequestMemoryWrite.constprop.0+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ae:	6955      	ldr	r5, [r2, #20]
 80031b0:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 80031b4:	d127      	bne.n	8003206 <I2C_RequestMemoryWrite.constprop.0+0xb2>
 80031b6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	1a5b      	subs	r3, r3, r1
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d9f3      	bls.n	80031a6 <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031be:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c0:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80031c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80031cc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	6463      	str	r3, [r4, #68]	; 0x44
 80031d6:	e025      	b.n	8003224 <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d8:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80031da:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031dc:	6361      	str	r1, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80031de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80031e8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	6463      	str	r3, [r4, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	05da      	lsls	r2, r3, #23
 80031f6:	d54f      	bpl.n	8003298 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80031fc:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003200:	b003      	add	sp, #12
 8003202:	bc70      	pop	{r4, r5, r6}
 8003204:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800320c:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003210:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003218:	6c61      	ldr	r1, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	f041 0104 	orr.w	r1, r1, #4
 8003222:	6461      	str	r1, [r4, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003224:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003226:	2b04      	cmp	r3, #4
 8003228:	d067      	beq.n	80032fa <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 800322a:	2001      	movs	r0, #1
}
 800322c:	b003      	add	sp, #12
 800322e:	bc70      	pop	{r4, r5, r6}
 8003230:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	2520      	movs	r5, #32
    return HAL_ERROR;
 800323a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003242:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003244:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003250:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003252:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800325c:	b003      	add	sp, #12
 800325e:	bc70      	pop	{r4, r5, r6}
 8003260:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003262:	0a03      	lsrs	r3, r0, #8
 8003264:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003266:	6953      	ldr	r3, [r2, #20]
 8003268:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800326c:	d13f      	bne.n	80032ee <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	6955      	ldr	r5, [r2, #20]
 8003270:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8003274:	d114      	bne.n	80032a0 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 8003276:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003278:	1a5b      	subs	r3, r3, r1
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d9f3      	bls.n	8003266 <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 800327e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003280:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003282:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003286:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800328a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800328c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	6463      	str	r3, [r4, #68]	; 0x44
 8003296:	e012      	b.n	80032be <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
}
 800329a:	b003      	add	sp, #12
 800329c:	bc70      	pop	{r4, r5, r6}
 800329e:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a2:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80032a6:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80032a8:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80032b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b8:	f041 0104 	orr.w	r1, r1, #4
 80032bc:	6461      	str	r1, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d1b2      	bne.n	800322a <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e7c5      	b.n	800325c <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	2220      	movs	r2, #32
    return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80032de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032e4:	4313      	orrs	r3, r2
 80032e6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80032e8:	b003      	add	sp, #12
 80032ea:	bc70      	pop	{r4, r5, r6}
 80032ec:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 80032f0:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	6113      	str	r3, [r2, #16]
}
 80032f4:	b003      	add	sp, #12
 80032f6:	bc70      	pop	{r4, r5, r6}
 80032f8:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e7aa      	b.n	800325c <I2C_RequestMemoryWrite.constprop.0+0x108>
 8003306:	bf00      	nop
 8003308:	20000200 	.word	0x20000200

0800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 800330c:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800330e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003310:	4ba1      	ldr	r3, [pc, #644]	; (8003598 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 8003312:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003314:	9200      	str	r2, [sp, #0]
 8003316:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800331c:	2a20      	cmp	r2, #32
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 8003320:	b007      	add	sp, #28
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	e003      	b.n	8003330 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8003328:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	2c19      	cmp	r4, #25
 800332e:	d86a      	bhi.n	8003406 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	6994      	ldr	r4, [r2, #24]
 8003332:	ea6f 0c04 	mvn.w	ip, r4
 8003336:	f01c 0c02 	ands.w	ip, ip, #2
 800333a:	d0f5      	beq.n	8003328 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 800333c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8003340:	2c01      	cmp	r4, #1
 8003342:	d0ed      	beq.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003344:	2401      	movs	r4, #1
 8003346:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334a:	6814      	ldr	r4, [r2, #0]
 800334c:	07e7      	lsls	r7, r4, #31
 800334e:	d555      	bpl.n	80033fc <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003350:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003354:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800335a:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335c:	6814      	ldr	r4, [r2, #0]
 800335e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003362:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003364:	4c8d      	ldr	r4, [pc, #564]	; (800359c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003366:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336a:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336e:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003370:	85de      	strh	r6, [r3, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8003372:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003374:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	631c      	str	r4, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003378:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800337a:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8003380:	8599      	strh	r1, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003384:	6814      	ldr	r4, [r2, #0]
 8003386:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800338a:	6014      	str	r4, [r2, #0]
 800338c:	e003      	b.n	8003396 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 800338e:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	1b64      	subs	r4, r4, r5
 8003392:	2c64      	cmp	r4, #100	; 0x64
 8003394:	d85e      	bhi.n	8003454 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003396:	6954      	ldr	r4, [r2, #20]
 8003398:	07e6      	lsls	r6, r4, #31
 800339a:	d5f8      	bpl.n	800338e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339c:	24ae      	movs	r4, #174	; 0xae
 800339e:	6114      	str	r4, [r2, #16]
 80033a0:	e008      	b.n	80033b4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a2:	6954      	ldr	r4, [r2, #20]
 80033a4:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80033a8:	d169      	bne.n	800347e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 80033aa:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	1b76      	subs	r6, r6, r5
 80033ae:	2e64      	cmp	r6, #100	; 0x64
 80033b0:	f200 8089 	bhi.w	80034c6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b4:	6954      	ldr	r4, [r2, #20]
 80033b6:	43e4      	mvns	r4, r4
 80033b8:	f014 0402 	ands.w	r4, r4, #2
 80033bc:	d1f1      	bne.n	80033a2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	9405      	str	r4, [sp, #20]
 80033c0:	6954      	ldr	r4, [r2, #20]
 80033c2:	9405      	str	r4, [sp, #20]
 80033c4:	6994      	ldr	r4, [r2, #24]
 80033c6:	9405      	str	r4, [sp, #20]
 80033c8:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ca:	6954      	ldr	r4, [r2, #20]
 80033cc:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80033d0:	d16a      	bne.n	80034a8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d2:	6956      	ldr	r6, [r2, #20]
 80033d4:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80033d8:	d124      	bne.n	8003424 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80033da:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	1b64      	subs	r4, r4, r5
 80033de:	2c64      	cmp	r4, #100	; 0x64
 80033e0:	d9f3      	bls.n	80033ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80033e2:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033e4:	635e      	str	r6, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80033e6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ea:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80033f0:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	f041 0120 	orr.w	r1, r1, #32
 80033f8:	6459      	str	r1, [r3, #68]	; 0x44
 80033fa:	e022      	b.n	8003442 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80033fc:	6814      	ldr	r4, [r2, #0]
 80033fe:	f044 0401 	orr.w	r4, r4, #1
 8003402:	6014      	str	r4, [r2, #0]
 8003404:	e7a4      	b.n	8003350 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003406:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003408:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003410:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003416:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003420:	b007      	add	sp, #28
 8003422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800342a:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	635c      	str	r4, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800342e:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003432:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003436:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003438:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343c:	f041 0104 	orr.w	r1, r1, #4
 8003440:	6459      	str	r1, [r3, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b04      	cmp	r3, #4
 8003446:	f47f af6b 	bne.w	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e765      	b.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003454:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003456:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003458:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800345a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800345e:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003464:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	f041 0120 	orr.w	r1, r1, #32
 800346c:	6459      	str	r1, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	05d5      	lsls	r5, r2, #23
 8003472:	f57f af55 	bpl.w	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
 800347c:	e750      	b.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	6810      	ldr	r0, [r2, #0]
 8003488:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800348c:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003490:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003492:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003496:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800349c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a0:	f042 0204 	orr.w	r2, r2, #4
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
 80034a6:	e73b      	b.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a8:	0a04      	lsrs	r4, r0, #8
 80034aa:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ac:	6954      	ldr	r4, [r2, #20]
 80034ae:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80034b2:	d115      	bne.n	80034e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b4:	6956      	ldr	r6, [r2, #20]
 80034b6:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80034ba:	d1b3      	bne.n	8003424 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80034bc:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	2c64      	cmp	r4, #100	; 0x64
 80034c2:	d9f3      	bls.n	80034ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 80034c4:	e78d      	b.n	80033e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c8:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ce:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80034d4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	f042 0220 	orr.w	r2, r2, #32
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
 80034de:	e71f      	b.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e0:	b2c0      	uxtb	r0, r0
 80034e2:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e4:	6950      	ldr	r0, [r2, #20]
 80034e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034ea:	d124      	bne.n	8003536 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ec:	6954      	ldr	r4, [r2, #20]
 80034ee:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80034f2:	d110      	bne.n	8003516 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80034f4:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	1b40      	subs	r0, r0, r5
 80034f8:	2864      	cmp	r0, #100	; 0x64
 80034fa:	d9f3      	bls.n	80034e4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80034fc:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034fe:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003500:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003504:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800350a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	f041 0120 	orr.w	r1, r1, #32
 8003512:	6459      	str	r1, [r3, #68]	; 0x44
 8003514:	e795      	b.n	8003442 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003516:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 800351c:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800351e:	6358      	str	r0, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003528:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800352a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352e:	f041 0104 	orr.w	r1, r1, #4
 8003532:	6459      	str	r1, [r3, #68]	; 0x44
 8003534:	e785      	b.n	8003442 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	6810      	ldr	r0, [r2, #0]
 8003538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800353c:	6010      	str	r0, [r2, #0]
 800353e:	e003      	b.n	8003548 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8003540:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003542:	1b40      	subs	r0, r0, r5
 8003544:	2864      	cmp	r0, #100	; 0x64
 8003546:	d885      	bhi.n	8003454 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	6950      	ldr	r0, [r2, #20]
 800354a:	07c4      	lsls	r4, r0, #31
 800354c:	d5f8      	bpl.n	8003540 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800354e:	20af      	movs	r0, #175	; 0xaf
 8003550:	6110      	str	r0, [r2, #16]
 8003552:	e007      	b.n	8003564 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003554:	6950      	ldr	r0, [r2, #20]
 8003556:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800355a:	d190      	bne.n	800347e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 800355c:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	2c64      	cmp	r4, #100	; 0x64
 8003562:	d81d      	bhi.n	80035a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003564:	6950      	ldr	r0, [r2, #20]
 8003566:	43c0      	mvns	r0, r0
 8003568:	f010 0002 	ands.w	r0, r0, #2
 800356c:	d1f2      	bne.n	8003554 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 800356e:	bb29      	cbnz	r1, 80035bc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003570:	9104      	str	r1, [sp, #16]
 8003572:	6951      	ldr	r1, [r2, #20]
 8003574:	9104      	str	r1, [sp, #16]
 8003576:	6991      	ldr	r1, [r2, #24]
 8003578:	9104      	str	r1, [sp, #16]
 800357a:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003582:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8003594:	e6c4      	b.n	8003320 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003596:	bf00      	nop
 8003598:	20000200 	.word	0x20000200
 800359c:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035a2:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a8:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80035ae:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80035b8:	b007      	add	sp, #28
 80035ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80035bc:	2901      	cmp	r1, #1
 80035be:	f000 80d8 	beq.w	8003772 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 80035c2:	2902      	cmp	r1, #2
 80035c4:	f000 80ec 	beq.w	80037a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	6814      	ldr	r4, [r2, #0]
 80035ca:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80035ce:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d0:	9001      	str	r0, [sp, #4]
 80035d2:	6950      	ldr	r0, [r2, #20]
 80035d4:	9001      	str	r0, [sp, #4]
 80035d6:	6990      	ldr	r0, [r2, #24]
 80035d8:	9001      	str	r0, [sp, #4]
 80035da:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035dc:	4e79      	ldr	r6, [pc, #484]	; (80037c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80035de:	4c7a      	ldr	r4, [pc, #488]	; (80037c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80035e0:	2903      	cmp	r1, #3
 80035e2:	d83c      	bhi.n	800365e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80035e4:	2901      	cmp	r1, #1
 80035e6:	f000 809a 	beq.w	800371e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80035ea:	2902      	cmp	r1, #2
 80035ec:	d005      	beq.n	80035fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80035ee:	e053      	b.n	8003698 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80035f0:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	1b49      	subs	r1, r1, r5
 80035f4:	2964      	cmp	r1, #100	; 0x64
 80035f6:	f200 8097 	bhi.w	8003728 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fa:	6951      	ldr	r1, [r2, #20]
 80035fc:	0748      	lsls	r0, r1, #29
 80035fe:	d5f7      	bpl.n	80035f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	6a98      	ldr	r0, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	6811      	ldr	r1, [r2, #0]
 8003608:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800360c:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	6912      	ldr	r2, [r2, #16]
 8003610:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 8003612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003614:	3201      	adds	r2, #1
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800361a:	3a01      	subs	r2, #1
 800361c:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 800361e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003620:	3a01      	subs	r2, #1
 8003622:	b292      	uxth	r2, r2
 8003624:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8003626:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	6911      	ldr	r1, [r2, #16]
 800362c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362e:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003632:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8003634:	3201      	adds	r2, #1
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003638:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
          hi2c->XferSize--;
 800363a:	3901      	subs	r1, #1
          hi2c->XferCount--;
 800363c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800363e:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8003640:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8003642:	8599      	strh	r1, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003644:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003646:	2900      	cmp	r1, #0
 8003648:	d09c      	beq.n	8003584 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	e7c8      	b.n	80035e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800364e:	6950      	ldr	r0, [r2, #20]
 8003650:	f010 0010 	ands.w	r0, r0, #16
 8003654:	d177      	bne.n	8003746 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003656:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	1b49      	subs	r1, r1, r5
 800365a:	2964      	cmp	r1, #100	; 0x64
 800365c:	d8a0      	bhi.n	80035a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365e:	6951      	ldr	r1, [r2, #20]
 8003660:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003664:	d0f3      	beq.n	800364e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	6911      	ldr	r1, [r2, #16]
 8003668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366a:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 800366c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800366e:	6a98      	ldr	r0, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003670:	3a01      	subs	r2, #1
 8003672:	b292      	uxth	r2, r2
 8003674:	85da      	strh	r2, [r3, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003676:	685a      	ldr	r2, [r3, #4]
        hi2c->XferSize--;
 8003678:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 800367a:	1c47      	adds	r7, r0, #1
 800367c:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800367e:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8003680:	3901      	subs	r1, #1
 8003682:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003684:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003686:	8599      	strh	r1, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003688:	d5dd      	bpl.n	8003646 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	6912      	ldr	r2, [r2, #16]
 800368c:	7042      	strb	r2, [r0, #1]
 800368e:	e7cf      	b.n	8003630 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8003690:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	1b49      	subs	r1, r1, r5
 8003694:	2964      	cmp	r1, #100	; 0x64
 8003696:	d847      	bhi.n	8003728 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	6951      	ldr	r1, [r2, #20]
 800369a:	0749      	lsls	r1, r1, #29
 800369c:	d5f8      	bpl.n	8003690 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	6811      	ldr	r1, [r2, #0]
 80036a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80036a4:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036a6:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036ac:	6832      	ldr	r2, [r6, #0]
 80036ae:	08d2      	lsrs	r2, r2, #3
 80036b0:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036b6:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 80036ba:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80036c0:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036c2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80036c6:	b289      	uxth	r1, r1
 80036c8:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036ca:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80036cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80036ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80036d0:	3a01      	subs	r2, #1
 80036d2:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80036d4:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036d6:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
 80036da:	e002      	b.n	80036e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036dc:	694a      	ldr	r2, [r1, #20]
 80036de:	0752      	lsls	r2, r2, #29
 80036e0:	d440      	bmi.n	8003764 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80036e2:	9a00      	ldr	r2, [sp, #0]
 80036e4:	3a01      	subs	r2, #1
 80036e6:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80036e8:	9a00      	ldr	r2, [sp, #0]
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d1f6      	bne.n	80036dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036fc:	f041 0120 	orr.w	r1, r1, #32
 8003700:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8003702:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003708:	b007      	add	sp, #28
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800370c:	6950      	ldr	r0, [r2, #20]
 800370e:	f010 0010 	ands.w	r0, r0, #16
 8003712:	d118      	bne.n	8003746 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003714:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	1b49      	subs	r1, r1, r5
 8003718:	2964      	cmp	r1, #100	; 0x64
 800371a:	f63f af41 	bhi.w	80035a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800371e:	6951      	ldr	r1, [r2, #20]
 8003720:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003724:	d0f2      	beq.n	800370c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 8003726:	e780      	b.n	800362a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003728:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800372a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800372c:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003732:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003738:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003742:	b007      	add	sp, #28
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003746:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800374a:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374c:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800375a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003760:	b007      	add	sp, #28
 8003762:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	680a      	ldr	r2, [r1, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	690a      	ldr	r2, [r1, #16]
 800376e:	7042      	strb	r2, [r0, #1]
 8003770:	e74f      	b.n	8003612 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	6811      	ldr	r1, [r2, #0]
 8003774:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003778:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800377a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	9003      	str	r0, [sp, #12]
 8003780:	6951      	ldr	r1, [r2, #20]
 8003782:	9103      	str	r1, [sp, #12]
 8003784:	6991      	ldr	r1, [r2, #24]
 8003786:	9103      	str	r1, [sp, #12]
 8003788:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003790:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003792:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003794:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8003796:	2900      	cmp	r1, #0
 8003798:	f43f aef4 	beq.w	8003584 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	e71d      	b.n	80035dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a0:	6811      	ldr	r1, [r2, #0]
 80037a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80037a6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	9002      	str	r0, [sp, #8]
 80037ae:	6951      	ldr	r1, [r2, #20]
 80037b0:	9102      	str	r1, [sp, #8]
 80037b2:	6991      	ldr	r1, [r2, #24]
 80037b4:	9102      	str	r1, [sp, #8]
 80037b6:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80037be:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037c0:	b662      	cpsie	i
}
 80037c2:	e7e7      	b.n	8003794 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 80037c4:	20000000 	.word	0x20000000
 80037c8:	14f8b589 	.word	0x14f8b589

080037cc <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80037cc:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80037ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d0:	460d      	mov	r5, r1
 80037d2:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80037d4:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80037d6:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80037da:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80037dc:	f7ff fd96 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80037e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80037e4:	429d      	cmp	r5, r3
 80037e6:	d101      	bne.n	80037ec <AT24XX_Update+0x20>
}
 80037e8:	b003      	add	sp, #12
 80037ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ec:	4c61      	ldr	r4, [pc, #388]	; (8003974 <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80037ee:	f88d 5004 	strb.w	r5, [sp, #4]
 80037f2:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d1f5      	bne.n	80037e8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fc:	6861      	ldr	r1, [r4, #4]
 80037fe:	e004      	b.n	800380a <AT24XX_Update+0x3e>
 8003800:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	1b52      	subs	r2, r2, r5
 8003804:	2a19      	cmp	r2, #25
 8003806:	f200 80a7 	bhi.w	8003958 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380a:	698b      	ldr	r3, [r1, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	f013 0302 	ands.w	r3, r3, #2
 8003812:	d0f5      	beq.n	8003800 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8003814:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003818:	2b01      	cmp	r3, #1
 800381a:	d0e5      	beq.n	80037e8 <AT24XX_Update+0x1c>
 800381c:	2301      	movs	r3, #1
 800381e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003822:	680b      	ldr	r3, [r1, #0]
 8003824:	07da      	lsls	r2, r3, #31
 8003826:	d403      	bmi.n	8003830 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003828:	680b      	ldr	r3, [r1, #0]
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8003830:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003832:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003834:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003838:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383a:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003842:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003844:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8003848:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800384a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003850:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8003852:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8003854:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003856:	4b48      	ldr	r3, [pc, #288]	; (8003978 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003858:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 800385a:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385c:	6323      	str	r3, [r4, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	f7ff fc79 	bl	8003154 <I2C_RequestMemoryWrite.constprop.0>
 8003862:	2800      	cmp	r0, #0
 8003864:	d1c0      	bne.n	80037e8 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8003866:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003868:	2800      	cmp	r0, #0
 800386a:	f000 8081 	beq.w	8003970 <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386e:	6861      	ldr	r1, [r4, #4]
 8003870:	694b      	ldr	r3, [r1, #20]
 8003872:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003876:	d114      	bne.n	80038a2 <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003878:	694a      	ldr	r2, [r1, #20]
 800387a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800387e:	d130      	bne.n	80038e2 <AT24XX_Update+0x116>
 8003880:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	1b5b      	subs	r3, r3, r5
 8003884:	2b64      	cmp	r3, #100	; 0x64
 8003886:	d9f3      	bls.n	8003870 <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003888:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800388a:	6362      	str	r2, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800388c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003890:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003896:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800389a:	f043 0320 	orr.w	r3, r3, #32
 800389e:	6463      	str	r3, [r4, #68]	; 0x44
 80038a0:	e02e      	b.n	8003900 <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      hi2c->XferSize--;
 80038a4:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a6:	4633      	mov	r3, r6
 80038a8:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 80038ac:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ae:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 80038b0:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80038b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 80038b4:	85a2      	strh	r2, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038bc:	694b      	ldr	r3, [r1, #20]
 80038be:	075b      	lsls	r3, r3, #29
 80038c0:	d427      	bmi.n	8003912 <AT24XX_Update+0x146>
      hi2c->XferSize--;
 80038c2:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d1d3      	bne.n	8003870 <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c8:	694b      	ldr	r3, [r1, #20]
 80038ca:	f013 0304 	ands.w	r3, r3, #4
 80038ce:	d130      	bne.n	8003932 <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d0:	694a      	ldr	r2, [r1, #20]
 80038d2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80038d6:	d104      	bne.n	80038e2 <AT24XX_Update+0x116>
 80038d8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	1b5b      	subs	r3, r3, r5
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d9f3      	bls.n	80038c8 <AT24XX_Update+0xfc>
 80038e0:	e7d2      	b.n	8003888 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80038e8:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80038f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fa:	f042 0204 	orr.w	r2, r2, #4
 80038fe:	6462      	str	r2, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003902:	2b04      	cmp	r3, #4
 8003904:	f47f af70 	bne.w	80037e8 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	680b      	ldr	r3, [r1, #0]
 800390a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e76a      	b.n	80037e8 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003912:	2a00      	cmp	r2, #0
 8003914:	d0d8      	beq.n	80038c8 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003916:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8003918:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391a:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 800391c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 800391e:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8003920:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003922:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8003924:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003926:	62a6      	str	r6, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8003928:	85a0      	strh	r0, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 800392a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 800392c:	2800      	cmp	r0, #0
 800392e:	d19f      	bne.n	8003870 <AT24XX_Update+0xa4>
 8003930:	e7ca      	b.n	80038c8 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	680b      	ldr	r3, [r1, #0]
 8003938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393c:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003946:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	6823      	ldr	r3, [r4, #0]
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	2b05      	cmp	r3, #5
 8003952:	d9fb      	bls.n	800394c <AT24XX_Update+0x180>
}
 8003954:	b003      	add	sp, #12
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003958:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800395a:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800395c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003964:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800396a:	4313      	orrs	r3, r2
 800396c:	6463      	str	r3, [r4, #68]	; 0x44
 800396e:	e73b      	b.n	80037e8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003970:	6861      	ldr	r1, [r4, #4]
 8003972:	e7a9      	b.n	80038c8 <AT24XX_Update+0xfc>
 8003974:	20000200 	.word	0x20000200
 8003978:	ffff0000 	.word	0xffff0000

0800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800397e:	2400      	movs	r4, #0
  return uwTick;
 8003980:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003982:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003984:	9400      	str	r4, [sp, #0]
 8003986:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003988:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 800398c:	2c20      	cmp	r4, #32
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8003990:	b007      	add	sp, #28
 8003992:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003994:	685c      	ldr	r4, [r3, #4]
 8003996:	e004      	b.n	80039a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8003998:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	1bad      	subs	r5, r5, r6
 800399c:	2d19      	cmp	r5, #25
 800399e:	f200 80b3 	bhi.w	8003b08 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a2:	69a5      	ldr	r5, [r4, #24]
 80039a4:	ea6f 0c05 	mvn.w	ip, r5
 80039a8:	f01c 0c02 	ands.w	ip, ip, #2
 80039ac:	d0f4      	beq.n	8003998 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 80039ae:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80039b2:	2d01      	cmp	r5, #1
 80039b4:	d0ec      	beq.n	8003990 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 80039b6:	2501      	movs	r5, #1
 80039b8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039bc:	6825      	ldr	r5, [r4, #0]
 80039be:	07ed      	lsls	r5, r5, #31
 80039c0:	d55d      	bpl.n	8003a7e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039c2:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039c6:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ca:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039cc:	6825      	ldr	r5, [r4, #0]
 80039ce:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80039d2:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80039d4:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d6:	4977      	ldr	r1, [pc, #476]	; (8003bb4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039d8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039dc:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e0:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 80039e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 80039e4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e6:	6319      	str	r1, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80039ec:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039f2:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 80039f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039f8:	d007      	beq.n	8003a0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80039fa:	2d01      	cmp	r5, #1
 80039fc:	d005      	beq.n	8003a0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80039fe:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8003a02:	d002      	beq.n	8003a0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a06:	2911      	cmp	r1, #17
 8003a08:	d109      	bne.n	8003a1e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	6821      	ldr	r1, [r4, #0]
 8003a0c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003a10:	6021      	str	r1, [r4, #0]
 8003a12:	e004      	b.n	8003a1e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 8003a14:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	1b89      	subs	r1, r1, r6
 8003a18:	2964      	cmp	r1, #100	; 0x64
 8003a1a:	f200 8084 	bhi.w	8003b26 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1e:	6961      	ldr	r1, [r4, #20]
 8003a20:	07cf      	lsls	r7, r1, #31
 8003a22:	d5f7      	bpl.n	8003a14 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a24:	6959      	ldr	r1, [r3, #20]
 8003a26:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003a2a:	d12d      	bne.n	8003a88 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a2c:	f040 0001 	orr.w	r0, r0, #1
 8003a30:	b2c0      	uxtb	r0, r0
 8003a32:	6120      	str	r0, [r4, #16]
 8003a34:	e008      	b.n	8003a48 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a36:	6961      	ldr	r1, [r4, #20]
 8003a38:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003a3c:	f040 8088 	bne.w	8003b50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003a40:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	1b80      	subs	r0, r0, r6
 8003a44:	2864      	cmp	r0, #100	; 0x64
 8003a46:	d851      	bhi.n	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a48:	6961      	ldr	r1, [r4, #20]
 8003a4a:	43c9      	mvns	r1, r1
 8003a4c:	f011 0102 	ands.w	r1, r1, #2
 8003a50:	d1f1      	bne.n	8003a36 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	f040 8092 	bne.w	8003b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	9204      	str	r2, [sp, #16]
 8003a5a:	6962      	ldr	r2, [r4, #20]
 8003a5c:	9204      	str	r2, [sp, #16]
 8003a5e:	69a2      	ldr	r2, [r4, #24]
 8003a60:	9204      	str	r2, [sp, #16]
 8003a62:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8003a7c:	e788      	b.n	8003990 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8003a7e:	6825      	ldr	r5, [r4, #0]
 8003a80:	f045 0501 	orr.w	r5, r5, #1
 8003a84:	6025      	str	r5, [r4, #0]
 8003a86:	e79c      	b.n	80039c2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a88:	21f0      	movs	r1, #240	; 0xf0
 8003a8a:	6121      	str	r1, [r4, #16]
 8003a8c:	e007      	b.n	8003a9e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a8e:	6961      	ldr	r1, [r4, #20]
 8003a90:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003a94:	d15c      	bne.n	8003b50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003a96:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	1bad      	subs	r5, r5, r6
 8003a9a:	2d64      	cmp	r5, #100	; 0x64
 8003a9c:	d826      	bhi.n	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	6961      	ldr	r1, [r4, #20]
 8003aa0:	070d      	lsls	r5, r1, #28
 8003aa2:	d5f4      	bpl.n	8003a8e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aa4:	6120      	str	r0, [r4, #16]
 8003aa6:	e007      	b.n	8003ab8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa8:	6961      	ldr	r1, [r4, #20]
 8003aaa:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003aae:	d14f      	bne.n	8003b50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003ab0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	1b80      	subs	r0, r0, r6
 8003ab4:	2864      	cmp	r0, #100	; 0x64
 8003ab6:	d819      	bhi.n	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab8:	6961      	ldr	r1, [r4, #20]
 8003aba:	43c9      	mvns	r1, r1
 8003abc:	f011 0102 	ands.w	r1, r1, #2
 8003ac0:	d1f2      	bne.n	8003aa8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	9105      	str	r1, [sp, #20]
 8003ac4:	6961      	ldr	r1, [r4, #20]
 8003ac6:	9105      	str	r1, [sp, #20]
 8003ac8:	69a1      	ldr	r1, [r4, #24]
 8003aca:	9105      	str	r1, [sp, #20]
 8003acc:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003ad4:	6021      	str	r1, [r4, #0]
 8003ad6:	e003      	b.n	8003ae0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 8003ad8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	1b89      	subs	r1, r1, r6
 8003adc:	2964      	cmp	r1, #100	; 0x64
 8003ade:	d822      	bhi.n	8003b26 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae0:	6961      	ldr	r1, [r4, #20]
 8003ae2:	07c9      	lsls	r1, r1, #31
 8003ae4:	d5f8      	bpl.n	8003ad8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ae6:	21f1      	movs	r1, #241	; 0xf1
 8003ae8:	6121      	str	r1, [r4, #16]
 8003aea:	e7ad      	b.n	8003a48 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aec:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003aee:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af4:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003afa:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003b04:	b007      	add	sp, #28
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b08:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b0a:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b12:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003b18:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	f042 0220 	orr.w	r2, r2, #32
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003b22:	b007      	add	sp, #28
 8003b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b26:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b28:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b2a:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b30:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003b36:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	645a      	str	r2, [r3, #68]	; 0x44
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b40:	6822      	ldr	r2, [r4, #0]
 8003b42:	05d0      	lsls	r0, r2, #23
 8003b44:	f57f af24 	bpl.w	8003990 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b4e:	e71f      	b.n	8003990 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b50:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b52:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b56:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b60:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b68:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003b6e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b72:	f042 0204 	orr.w	r2, r2, #4
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003b78:	b007      	add	sp, #28
 8003b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8003b7c:	2a01      	cmp	r2, #1
 8003b7e:	f000 80fc 	beq.w	8003d7a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 8003b82:	2a02      	cmp	r2, #2
 8003b84:	f000 80be 	beq.w	8003d04 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8003b8e:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	9101      	str	r1, [sp, #4]
 8003b92:	6961      	ldr	r1, [r4, #20]
 8003b94:	9101      	str	r1, [sp, #4]
 8003b96:	69a1      	ldr	r1, [r4, #24]
 8003b98:	9101      	str	r1, [sp, #4]
 8003b9a:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b9c:	4d06      	ldr	r5, [pc, #24]	; (8003bb8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8003b9e:	4807      	ldr	r0, [pc, #28]	; (8003bbc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 8003ba0:	2a03      	cmp	r2, #3
 8003ba2:	d847      	bhi.n	8003c34 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 8003ba4:	2a01      	cmp	r2, #1
 8003ba6:	f000 80a5 	beq.w	8003cf4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 8003baa:	2a02      	cmp	r2, #2
 8003bac:	d00d      	beq.n	8003bca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 8003bae:	e05e      	b.n	8003c6e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 8003bb0:	20000200 	.word	0x20000200
 8003bb4:	ffff0000 	.word	0xffff0000
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	14f8b589 	.word	0x14f8b589
 8003bc0:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	1b92      	subs	r2, r2, r6
 8003bc4:	2a64      	cmp	r2, #100	; 0x64
 8003bc6:	f200 80b4 	bhi.w	8003d32 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bca:	6962      	ldr	r2, [r4, #20]
 8003bcc:	0757      	lsls	r7, r2, #29
 8003bce:	d5f7      	bpl.n	8003bc0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003bdc:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	6912      	ldr	r2, [r2, #16]
 8003be0:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 8003be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be4:	3201      	adds	r2, #1
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bea:	3a01      	subs	r2, #1
 8003bec:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003bee:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	6911      	ldr	r1, [r2, #16]
 8003bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfe:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c02:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          hi2c->pBuffPtr++;
 8003c04:	3201      	adds	r2, #1
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003c0a:	3901      	subs	r1, #1
          hi2c->XferSize--;
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003c10:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8003c12:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003c14:	85d9      	strh	r1, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	f43f af28 	beq.w	8003a6c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c1c:	685c      	ldr	r4, [r3, #4]
 8003c1e:	e7bf      	b.n	8003ba0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c20:	6961      	ldr	r1, [r4, #20]
 8003c22:	f011 0110 	ands.w	r1, r1, #16
 8003c26:	f040 8093 	bne.w	8003d50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003c2a:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	1b92      	subs	r2, r2, r6
 8003c2e:	2a64      	cmp	r2, #100	; 0x64
 8003c30:	f63f af5c 	bhi.w	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c34:	6962      	ldr	r2, [r4, #20]
 8003c36:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003c3a:	d0f1      	beq.n	8003c20 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3c:	6921      	ldr	r1, [r4, #16]
 8003c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c40:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003c42:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8003c44:	6a99      	ldr	r1, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c46:	3a01      	subs	r2, #1
 8003c48:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c4a:	685c      	ldr	r4, [r3, #4]
        hi2c->XferCount--;
 8003c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8003c4e:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8003c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 8003c52:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c54:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8003c56:	3a01      	subs	r2, #1
 8003c58:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c5a:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003c5c:	859a      	strh	r2, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c5e:	d5da      	bpl.n	8003c16 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	6922      	ldr	r2, [r4, #16]
 8003c62:	704a      	strb	r2, [r1, #1]
 8003c64:	e7cc      	b.n	8003c00 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8003c66:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	1b92      	subs	r2, r2, r6
 8003c6a:	2a64      	cmp	r2, #100	; 0x64
 8003c6c:	d861      	bhi.n	8003d32 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c6e:	6962      	ldr	r2, [r4, #20]
 8003c70:	0751      	lsls	r1, r2, #29
 8003c72:	d5f8      	bpl.n	8003c66 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c82:	682a      	ldr	r2, [r5, #0]
 8003c84:	08d2      	lsrs	r2, r2, #3
 8003c86:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c8c:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8003c90:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8003c96:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c98:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8003c9c:	b289      	uxth	r1, r1
 8003c9e:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ca0:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 8003ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8003ca4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8003caa:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cac:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e002      	b.n	8003cb8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cb2:	694a      	ldr	r2, [r1, #20]
 8003cb4:	0752      	lsls	r2, r2, #29
 8003cb6:	d459      	bmi.n	8003d6c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 8003cb8:	9a00      	ldr	r2, [sp, #0]
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8003cbe:	9a00      	ldr	r2, [sp, #0]
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	d1f6      	bne.n	8003cb2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003cd2:	f041 0120 	orr.w	r1, r1, #32
 8003cd6:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003cde:	b007      	add	sp, #28
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ce2:	6961      	ldr	r1, [r4, #20]
 8003ce4:	f011 0110 	ands.w	r1, r1, #16
 8003ce8:	d132      	bne.n	8003d50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003cea:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cec:	1b92      	subs	r2, r2, r6
 8003cee:	2a64      	cmp	r2, #100	; 0x64
 8003cf0:	f63f aefc 	bhi.w	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf4:	6962      	ldr	r2, [r4, #20]
 8003cf6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003cfa:	d0f2      	beq.n	8003ce2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	6921      	ldr	r1, [r4, #16]
 8003cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d00:	7011      	strb	r1, [r2, #0]
 8003d02:	e77d      	b.n	8003c00 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	9102      	str	r1, [sp, #8]
 8003d12:	6951      	ldr	r1, [r2, #20]
 8003d14:	9102      	str	r1, [sp, #8]
 8003d16:	6991      	ldr	r1, [r2, #24]
 8003d18:	9102      	str	r1, [sp, #8]
 8003d1a:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d22:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d24:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003d26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d28:	2a00      	cmp	r2, #0
 8003d2a:	f43f ae9f 	beq.w	8003a6c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2e:	685c      	ldr	r4, [r3, #4]
 8003d30:	e734      	b.n	8003b9c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d32:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d34:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d36:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d3c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003d42:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003d4c:	b007      	add	sp, #28
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	f06f 0010 	mvn.w	r0, #16
 8003d56:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d5a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d62:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d68:	6459      	str	r1, [r3, #68]	; 0x44
 8003d6a:	e611      	b.n	8003990 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	680a      	ldr	r2, [r1, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	690a      	ldr	r2, [r1, #16]
 8003d76:	7062      	strb	r2, [r4, #1]
 8003d78:	e733      	b.n	8003be2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d82:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	9103      	str	r1, [sp, #12]
 8003d88:	6951      	ldr	r1, [r2, #20]
 8003d8a:	9103      	str	r1, [sp, #12]
 8003d8c:	6991      	ldr	r1, [r2, #24]
 8003d8e:	9103      	str	r1, [sp, #12]
 8003d90:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003d98:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d9a:	b662      	cpsie	i
}
 8003d9c:	e7c3      	b.n	8003d26 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8003d9e:	bf00      	nop

08003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	4b97      	ldr	r3, [pc, #604]	; (8004000 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8003da4:	b083      	sub	sp, #12
 8003da6:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da8:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8003dac:	2c20      	cmp	r4, #32
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003db0:	b003      	add	sp, #12
 8003db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db4:	685c      	ldr	r4, [r3, #4]
 8003db6:	e004      	b.n	8003dc2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003db8:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	1bad      	subs	r5, r5, r6
 8003dbc:	2d19      	cmp	r5, #25
 8003dbe:	f200 80cc 	bhi.w	8003f5a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc2:	69a5      	ldr	r5, [r4, #24]
 8003dc4:	ea6f 0c05 	mvn.w	ip, r5
 8003dc8:	f01c 0c02 	ands.w	ip, ip, #2
 8003dcc:	d0f4      	beq.n	8003db8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003dce:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8003dd2:	2d01      	cmp	r5, #1
 8003dd4:	d0ec      	beq.n	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003dd6:	2501      	movs	r5, #1
 8003dd8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ddc:	6825      	ldr	r5, [r4, #0]
 8003dde:	07ed      	lsls	r5, r5, #31
 8003de0:	f140 80a7 	bpl.w	8003f32 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003de4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003de8:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dec:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dee:	6825      	ldr	r5, [r4, #0]
 8003df0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003df4:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003df6:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dfa:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dfe:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003e00:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e02:	4a80      	ldr	r2, [pc, #512]	; (8004004 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8003e04:	8ddd      	ldrh	r5, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hi2c->XferSize    = hi2c->XferCount;
 8003e0a:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e0c:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003e0e:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003e10:	859d      	strh	r5, [r3, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e12:	d007      	beq.n	8003e24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003e14:	2a01      	cmp	r2, #1
 8003e16:	d005      	beq.n	8003e24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003e18:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003e1c:	d002      	beq.n	8003e24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e20:	2a12      	cmp	r2, #18
 8003e22:	d109      	bne.n	8003e38 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2a:	6022      	str	r2, [r4, #0]
 8003e2c:	e004      	b.n	8003e38 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 8003e2e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	1b92      	subs	r2, r2, r6
 8003e32:	2a64      	cmp	r2, #100	; 0x64
 8003e34:	f200 80a0 	bhi.w	8003f78 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e38:	6962      	ldr	r2, [r4, #20]
 8003e3a:	07d2      	lsls	r2, r2, #31
 8003e3c:	d5f7      	bpl.n	8003e2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003e44:	d17a      	bne.n	8003f3c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e46:	6120      	str	r0, [r4, #16]
 8003e48:	e009      	b.n	8003e5e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4a:	6962      	ldr	r2, [r4, #20]
 8003e4c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003e50:	f040 80a7 	bne.w	8003fa2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003e54:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	1b89      	subs	r1, r1, r6
 8003e58:	2964      	cmp	r1, #100	; 0x64
 8003e5a:	f200 80b8 	bhi.w	8003fce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e5e:	6962      	ldr	r2, [r4, #20]
 8003e60:	43d2      	mvns	r2, r2
 8003e62:	f012 0202 	ands.w	r2, r2, #2
 8003e66:	d1f0      	bne.n	8003e4a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	6962      	ldr	r2, [r4, #20]
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	69a2      	ldr	r2, [r4, #24]
 8003e70:	9201      	str	r2, [sp, #4]
 8003e72:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	f000 80b6 	beq.w	8003fe6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7a:	6962      	ldr	r2, [r4, #20]
 8003e7c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003e80:	d12c      	bne.n	8003edc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e82:	6961      	ldr	r1, [r4, #20]
 8003e84:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003e88:	d110      	bne.n	8003eac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003e8a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	1b92      	subs	r2, r2, r6
 8003e8e:	2a64      	cmp	r2, #100	; 0x64
 8003e90:	d9f3      	bls.n	8003e7a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e92:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e94:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e9a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003ea0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	f042 0220 	orr.w	r2, r2, #32
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eaa:	e00e      	b.n	8003eca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eae:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003eb2:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ebe:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec4:	f041 0104 	orr.w	r1, r1, #4
 8003ec8:	6459      	str	r1, [r3, #68]	; 0x44
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	f47f af6f 	bne.w	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	e769      	b.n	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003edc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
      hi2c->XferSize--;
 8003ede:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003ee6:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee8:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003eea:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
      hi2c->pBuffPtr++;
 8003eec:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eee:	3901      	subs	r1, #1
 8003ef0:	b289      	uxth	r1, r1
 8003ef2:	85d9      	strh	r1, [r3, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ef4:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003ef6:	859a      	strh	r2, [r3, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ef8:	0749      	lsls	r1, r1, #29
 8003efa:	d518      	bpl.n	8003f2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 8003efc:	b1ba      	cbz	r2, 8003f2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efe:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003f00:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f02:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003f04:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->XferSize--;
 8003f06:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003f08:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003f0a:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003f0c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003f0e:	629f      	str	r7, [r3, #40]	; 0x28
        hi2c->XferSize--;
 8003f10:	859d      	strh	r5, [r3, #44]	; 0x2c
        hi2c->XferCount--;
 8003f12:	85da      	strh	r2, [r3, #46]	; 0x2e
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f14:	6962      	ldr	r2, [r4, #20]
 8003f16:	f012 0204 	ands.w	r2, r2, #4
 8003f1a:	d1ab      	bne.n	8003e74 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f1c:	6961      	ldr	r1, [r4, #20]
 8003f1e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003f22:	d1c3      	bne.n	8003eac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003f24:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	1b92      	subs	r2, r2, r6
 8003f28:	2a64      	cmp	r2, #100	; 0x64
 8003f2a:	d9f3      	bls.n	8003f14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8003f2c:	e7b1      	b.n	8003e92 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 8003f2e:	4615      	mov	r5, r2
 8003f30:	e7f0      	b.n	8003f14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f045 0501 	orr.w	r5, r5, #1
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	e753      	b.n	8003de4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f3c:	22f0      	movs	r2, #240	; 0xf0
 8003f3e:	6122      	str	r2, [r4, #16]
 8003f40:	e007      	b.n	8003f52 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f42:	6962      	ldr	r2, [r4, #20]
 8003f44:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003f48:	d12b      	bne.n	8003fa2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003f4a:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4c:	1b89      	subs	r1, r1, r6
 8003f4e:	2964      	cmp	r1, #100	; 0x64
 8003f50:	d83d      	bhi.n	8003fce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f52:	6962      	ldr	r2, [r4, #20]
 8003f54:	0717      	lsls	r7, r2, #28
 8003f56:	d5f4      	bpl.n	8003f42 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8003f58:	e775      	b.n	8003e46 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f5a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f5c:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f64:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003f6a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003f74:	b003      	add	sp, #12
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f78:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f7c:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f82:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003f88:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	f042 0220 	orr.w	r2, r2, #32
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	05d1      	lsls	r1, r2, #23
 8003f96:	f57f af0b 	bpl.w	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003fa0:	e706      	b.n	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fb6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fba:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003fc0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc4:	f042 0204 	orr.w	r2, r2, #4
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003fca:	b003      	add	sp, #12
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fce:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fd2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
 8003fe4:	e6e4      	b.n	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff0:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003ff6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    return HAL_OK;
 8003ffe:	e6d7      	b.n	8003db0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8004000:	20000200 	.word	0x20000200
 8004004:	ffff0000 	.word	0xffff0000

08004008 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8004008:	2300      	movs	r3, #0
void DS3231_Update(void) {
 800400a:	b500      	push	{lr}
 800400c:	b083      	sub	sp, #12
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800400e:	f10d 0107 	add.w	r1, sp, #7
 8004012:	2201      	movs	r2, #1
 8004014:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8004016:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800401a:	f7ff fec1 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800401e:	2213      	movs	r2, #19
 8004020:	20d0      	movs	r0, #208	; 0xd0
 8004022:	4903      	ldr	r1, [pc, #12]	; (8004030 <DS3231_Update+0x28>)
 8004024:	f7ff fcaa 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8004028:	b003      	add	sp, #12
 800402a:	f85d fb04 	ldr.w	pc, [sp], #4
 800402e:	bf00      	nop
 8004030:	20000258 	.word	0x20000258

08004034 <LCD_Char.constprop.1.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800403a:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 800403c:	b085      	sub	sp, #20
 800403e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8004042:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004046:	b38b      	cbz	r3, 80040ac <LCD_Char.constprop.1.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8004048:	2600      	movs	r6, #0
 800404a:	4691      	mov	r9, r2
 800404c:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800404e:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004050:	f899 1002 	ldrb.w	r1, [r9, #2]
 8004054:	b351      	cbz	r1, 80040ac <LCD_Char.constprop.1.isra.0+0x78>
 8004056:	2400      	movs	r4, #0
 8004058:	4622      	mov	r2, r4
		{
			if(bit == 0)
 800405a:	2e00      	cmp	r6, #0
 800405c:	d045      	beq.n	80040ea <LCD_Char.constprop.1.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 800405e:	4633      	mov	r3, r6
 8004060:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8004062:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8004066:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 800406a:	d022      	beq.n	80040b2 <LCD_Char.constprop.1.isra.0+0x7e>
				set_pixels++;
 800406c:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800406e:	3401      	adds	r4, #1
 8004070:	b2e4      	uxtb	r4, r4
 8004072:	42a1      	cmp	r1, r4
 8004074:	d8f1      	bhi.n	800405a <LCD_Char.constprop.1.isra.0+0x26>
		}
		if (set_pixels > 0)
 8004076:	b18a      	cbz	r2, 800409c <LCD_Char.constprop.1.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8004080:	9b02      	ldr	r3, [sp, #8]
 8004082:	4420      	add	r0, r4
 8004084:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8004088:	1a80      	subs	r0, r0, r2
 800408a:	4418      	add	r0, r3
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	4451      	add	r1, sl
 8004090:	4419      	add	r1, r3
 8004092:	b280      	uxth	r0, r0
 8004094:	2301      	movs	r3, #1
 8004096:	b289      	uxth	r1, r1
 8004098:	f7fc fd16 	bl	8000ac8 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800409c:	f899 3003 	ldrb.w	r3, [r9, #3]
 80040a0:	f10a 0a01 	add.w	sl, sl, #1
 80040a4:	fa5f fa8a 	uxtb.w	sl, sl
 80040a8:	459a      	cmp	sl, r3
 80040aa:	d3d1      	bcc.n	8004050 <LCD_Char.constprop.1.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 80040ac:	b005      	add	sp, #20
 80040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	d0db      	beq.n	800406e <LCD_Char.constprop.1.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80040b6:	f999 1006 	ldrsb.w	r1, [r9, #6]
 80040ba:	f999 0005 	ldrsb.w	r0, [r9, #5]
 80040be:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80040c2:	4451      	add	r1, sl
 80040c4:	4461      	add	r1, ip
 80040c6:	4420      	add	r0, r4
 80040c8:	f8dd c008 	ldr.w	ip, [sp, #8]
 80040cc:	1a80      	subs	r0, r0, r2
 80040ce:	4460      	add	r0, ip
 80040d0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80040d4:	b289      	uxth	r1, r1
 80040d6:	2301      	movs	r3, #1
 80040d8:	f8cd c000 	str.w	ip, [sp]
 80040dc:	b280      	uxth	r0, r0
 80040de:	f7fc fcf3 	bl	8000ac8 <LCD_Rect_Fill>
				set_pixels = 0;
 80040e2:	462a      	mov	r2, r5
 80040e4:	f899 1002 	ldrb.w	r1, [r9, #2]
 80040e8:	e7c1      	b.n	800406e <LCD_Char.constprop.1.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80040ea:	f108 0001 	add.w	r0, r8, #1
 80040ee:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 80040f2:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80040f4:	2640      	movs	r6, #64	; 0x40
 80040f6:	fa1f f880 	uxth.w	r8, r0
 80040fa:	e7b2      	b.n	8004062 <LCD_Char.constprop.1.isra.0+0x2e>

080040fc <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80040fc:	b470      	push	{r4, r5, r6}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040fe:	4c19      	ldr	r4, [pc, #100]	; (8004164 <HAL_InitTick.isra.0+0x68>)
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_InitTick.isra.0+0x6c>)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800410a:	3b01      	subs	r3, #1
 800410c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004110:	d20d      	bcs.n	800412e <HAL_InitTick.isra.0+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004112:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411a:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411c:	2607      	movs	r6, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411e:	4d13      	ldr	r5, [pc, #76]	; (800416c <HAL_InitTick.isra.0+0x70>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004120:	280f      	cmp	r0, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004122:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004124:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004128:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800412a:	6116      	str	r6, [r2, #16]
 800412c:	d901      	bls.n	8004132 <HAL_InitTick.isra.0+0x36>
}
 800412e:	bc70      	pop	{r4, r5, r6}
 8004130:	4770      	bx	lr
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004132:	68eb      	ldr	r3, [r5, #12]
    uwTickPrio = TickPriority;
 8004134:	6060      	str	r0, [r4, #4]
 8004136:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800413a:	1af2      	subs	r2, r6, r3
 800413c:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800413e:	f103 0504 	add.w	r5, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004142:	bf28      	it	cs
 8004144:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004146:	2d06      	cmp	r5, #6
 8004148:	bf88      	it	hi
 800414a:	1ed9      	subhi	r1, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	4093      	lsls	r3, r2
 8004152:	ea20 0003 	bic.w	r0, r0, r3
 8004156:	4088      	lsls	r0, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	4c04      	ldr	r4, [pc, #16]	; (800416c <HAL_InitTick.isra.0+0x70>)
 800415a:	0100      	lsls	r0, r0, #4
 800415c:	b2c0      	uxtb	r0, r0
 800415e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8004162:	e7e4      	b.n	800412e <HAL_InitTick.isra.0+0x32>
 8004164:	20000000 	.word	0x20000000
 8004168:	10624dd3 	.word	0x10624dd3
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8004174:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004178:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800417a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800417c:	460d      	mov	r5, r1
 800417e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004180:	f001 face 	bl	8005720 <strlen>
 8004184:	b3a8      	cbz	r0, 80041f2 <LCD_Font.constprop.0+0x82>
 8004186:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004188:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800418a:	2682      	movs	r6, #130	; 0x82
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800418c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800418e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80041f8 <LCD_Font.constprop.0+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004192:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <LCD_Font.constprop.0+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004194:	f10d 0b08 	add.w	fp, sp, #8
 8004198:	e01c      	b.n	80041d4 <LCD_Font.constprop.0+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 800419a:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800419e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80041a2:	d812      	bhi.n	80041ca <LCD_Font.constprop.0+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80041a4:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80041a8:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80041ac:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80041ae:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80041b2:	4638      	mov	r0, r7
 80041b4:	4631      	mov	r1, r6
 80041b6:	f7ff ff3d 	bl	8004034 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80041ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041be:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 80041c0:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041c2:	f001 faad 	bl	8005720 <strlen>
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <LCD_Font.constprop.0+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80041c8:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041ca:	3401      	adds	r4, #1
 80041cc:	b2a4      	uxth	r4, r4
 80041ce:	4284      	cmp	r4, r0
 80041d0:	4622      	mov	r2, r4
 80041d2:	d20e      	bcs.n	80041f2 <LCD_Font.constprop.0+0x82>
		char c = text[text_pos];
 80041d4:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80041d6:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 80041da:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80041dc:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 80041e0:	d1db      	bne.n	800419a <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041e2:	3401      	adds	r4, #1
 80041e4:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80041e6:	362b      	adds	r6, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041e8:	4284      	cmp	r4, r0
			cursor_x = x;
 80041ea:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041ec:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80041ee:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80041f0:	d3f0      	bcc.n	80041d4 <LCD_Font.constprop.0+0x64>
		}
	}
}
 80041f2:	b005      	add	sp, #20
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	0800cd58 	.word	0x0800cd58
 80041fc:	0801c2b0 	.word	0x0801c2b0

08004200 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8004204:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004208:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800420a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800420c:	460d      	mov	r5, r1
 800420e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004210:	f001 fa86 	bl	8005720 <strlen>
 8004214:	b3b8      	cbz	r0, 8004286 <LCD_Font.constprop.1+0x86>
 8004216:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004218:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800421a:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800421c:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800421e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800428c <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004224:	f10d 0b08 	add.w	fp, sp, #8
 8004228:	e01d      	b.n	8004266 <LCD_Font.constprop.1+0x66>
 800422a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800422e:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004230:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
		else if(c >= font.first && c <= font.last && c != '\r')
 8004234:	d812      	bhi.n	800425c <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004236:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800423a:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800423e:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004240:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004244:	4638      	mov	r0, r7
 8004246:	4631      	mov	r1, r6
 8004248:	f7ff fef4 	bl	8004034 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 800424c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004250:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004252:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004254:	f001 fa64 	bl	8005720 <strlen>
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 800425a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800425c:	3401      	adds	r4, #1
 800425e:	b2a4      	uxth	r4, r4
 8004260:	4284      	cmp	r4, r0
 8004262:	4622      	mov	r2, r4
 8004264:	d20f      	bcs.n	8004286 <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 8004266:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800426a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800426e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8004272:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8004274:	d1d9      	bne.n	800422a <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004276:	3401      	adds	r4, #1
 8004278:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800427a:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800427c:	4284      	cmp	r4, r0
			cursor_x = x;
 800427e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004280:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8004282:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004284:	d3ef      	bcc.n	8004266 <LCD_Font.constprop.1+0x66>
}
 8004286:	b005      	add	sp, #20
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	0800cd58 	.word	0x0800cd58
 8004290:	0800d39c 	.word	0x0800d39c

08004294 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_y = y;
 8004298:	b20b      	sxth	r3, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800429a:	b09f      	sub	sp, #124	; 0x7c
	int16_t cursor_x = x;
 800429c:	b204      	sxth	r4, r0
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800429e:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80042a0:	9216      	str	r2, [sp, #88]	; 0x58
	int16_t cursor_x = x;
 80042a2:	9418      	str	r4, [sp, #96]	; 0x60
	int16_t cursor_y = y;
 80042a4:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80042a6:	f001 fa3b 	bl	8005720 <strlen>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d068      	beq.n	8004380 <LCD_Font.constprop.2+0xec>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004388 <LCD_Font.constprop.2+0xf4>
 80042b4:	4f35      	ldr	r7, [pc, #212]	; (800438c <LCD_Font.constprop.2+0xf8>)
 80042b6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004390 <LCD_Font.constprop.2+0xfc>
 80042ba:	9307      	str	r3, [sp, #28]
		char c = text[text_pos];
 80042bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80042be:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 80042c0:	2b0a      	cmp	r3, #10
 80042c2:	d052      	beq.n	800436a <LCD_Font.constprop.2+0xd6>
		else if(c >= font.first && c <= font.last && c != '\r')
 80042c4:	3b20      	subs	r3, #32
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	2a5e      	cmp	r2, #94	; 0x5e
 80042ca:	d853      	bhi.n	8004374 <LCD_Font.constprop.2+0xe0>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80042cc:	4a31      	ldr	r2, [pc, #196]	; (8004394 <LCD_Font.constprop.2+0x100>)
 80042ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042d6:	ab1e      	add	r3, sp, #120	; 0x78
 80042d8:	e903 0003 	stmdb	r3, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042dc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
	uint16_t bo = glyph -> bitmapOffset;
 80042e0:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042e4:	9317      	str	r3, [sp, #92]	; 0x5c
	uint16_t bo = glyph -> bitmapOffset;
 80042e6:	9205      	str	r2, [sp, #20]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f001 8151 	beq.w	8005590 <LCD_Font.constprop.2+0x12fc>
			cursor_x += glyph.xAdvance * size;
 80042ee:	b2a3      	uxth	r3, r4
 80042f0:	9315      	str	r3, [sp, #84]	; 0x54
 80042f2:	2300      	movs	r3, #0
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80042f4:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	uint8_t bits = 0, bit = 0;
 80042f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
			cursor_x += glyph.xAdvance * size;
 80042fc:	9306      	str	r3, [sp, #24]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80042fe:	9204      	str	r2, [sp, #16]
 8004300:	9b04      	ldr	r3, [sp, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 846d 	beq.w	8004be2 <LCD_Font.constprop.2+0x94e>
 8004308:	2300      	movs	r3, #0
 800430a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800430e:	469e      	mov	lr, r3
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	e011      	b.n	8004338 <LCD_Font.constprop.2+0xa4>
			bit >>= 1;
 8004314:	0852      	lsrs	r2, r2, #1
 8004316:	9201      	str	r2, [sp, #4]
			if(bits & bit)
 8004318:	9a02      	ldr	r2, [sp, #8]
 800431a:	421a      	tst	r2, r3
 800431c:	d01d      	beq.n	800435a <LCD_Font.constprop.2+0xc6>
				set_pixels++;
 800431e:	f10e 0201 	add.w	r2, lr, #1
 8004322:	4673      	mov	r3, lr
 8004324:	fa1f fe82 	uxth.w	lr, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004328:	9a00      	ldr	r2, [sp, #0]
 800432a:	9904      	ldr	r1, [sp, #16]
 800432c:	3201      	adds	r2, #1
 800432e:	9200      	str	r2, [sp, #0]
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	428a      	cmp	r2, r1
 8004334:	f080 8451 	bcs.w	8004bda <LCD_Font.constprop.2+0x946>
			if(bit == 0)
 8004338:	9a01      	ldr	r2, [sp, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	2a00      	cmp	r2, #0
 800433e:	d1e9      	bne.n	8004314 <LCD_Font.constprop.2+0x80>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	9301      	str	r3, [sp, #4]
				bit  = 0x80;
 8004344:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004346:	9905      	ldr	r1, [sp, #20]
 8004348:	4813      	ldr	r0, [pc, #76]	; (8004398 <LCD_Font.constprop.2+0x104>)
 800434a:	1c4a      	adds	r2, r1, #1
 800434c:	5c09      	ldrb	r1, [r1, r0]
 800434e:	b292      	uxth	r2, r2
 8004350:	9102      	str	r1, [sp, #8]
 8004352:	9205      	str	r2, [sp, #20]
			if(bits & bit)
 8004354:	9a02      	ldr	r2, [sp, #8]
 8004356:	421a      	tst	r2, r3
 8004358:	d1e1      	bne.n	800431e <LCD_Font.constprop.2+0x8a>
			else if (set_pixels > 0)
 800435a:	f1be 0f00 	cmp.w	lr, #0
 800435e:	d11d      	bne.n	800439c <LCD_Font.constprop.2+0x108>
				set_pixels++;
 8004360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004364:	f04f 0e00 	mov.w	lr, #0
 8004368:	e7de      	b.n	8004328 <LCD_Font.constprop.2+0x94>
			cursor_y += font.yAdvance * size;
 800436a:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 800436c:	9c18      	ldr	r4, [sp, #96]	; 0x60
			cursor_y += font.yAdvance * size;
 800436e:	332b      	adds	r3, #43	; 0x2b
 8004370:	b21b      	sxth	r3, r3
 8004372:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	3301      	adds	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	4283      	cmp	r3, r0
 800437c:	9307      	str	r3, [sp, #28]
 800437e:	d39d      	bcc.n	80042bc <LCD_Font.constprop.2+0x28>
}
 8004380:	b01f      	add	sp, #124	; 0x7c
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	40010c00 	.word	0x40010c00
 800438c:	40010800 	.word	0x40010800
 8004390:	40011000 	.word	0x40011000
 8004394:	0800cd58 	.word	0x0800cd58
 8004398:	0801c2b0 	.word	0x0801c2b0
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800439c:	9c00      	ldr	r4, [sp, #0]
 800439e:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
 80043a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043a6:	4423      	add	r3, r4
 80043a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80043aa:	eba3 030e 	sub.w	r3, r3, lr
 80043ae:	4423      	add	r3, r4
 80043b0:	fa1f fa83 	uxth.w	sl, r3
 80043b4:	9c06      	ldr	r4, [sp, #24]
 80043b6:	f99d 3076 	ldrsb.w	r3, [sp, #118]	; 0x76
 80043ba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80043be:	4423      	add	r3, r4
 80043c0:	9c08      	ldr	r4, [sp, #32]
 80043c2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80043c6:	4423      	add	r3, r4
 80043c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043cc:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80043d0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80043d4:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043d8:	f04f 0910 	mov.w	r9, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043dc:	f8cb c010 	str.w	ip, [fp, #16]
 80043e0:	613e      	str	r6, [r7, #16]
 80043e2:	613a      	str	r2, [r7, #16]
 80043e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80043e8:	f8c8 1010 	str.w	r1, [r8, #16]
 80043ec:	f8c8 6010 	str.w	r6, [r8, #16]
 80043f0:	f8c8 2010 	str.w	r2, [r8, #16]
 80043f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80043f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80043fc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004400:	6139      	str	r1, [r7, #16]
 8004402:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004404:	f8c7 9010 	str.w	r9, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004408:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800440a:	2440      	movs	r4, #64	; 0x40
 800440c:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800440e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8004412:	613c      	str	r4, [r7, #16]
 8004414:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004418:	f8c8 9010 	str.w	r9, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800441c:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004420:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004422:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004426:	f8cb 4010 	str.w	r4, [fp, #16]
 800442a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800442e:	f8cb 4010 	str.w	r4, [fp, #16]
 8004432:	2401      	movs	r4, #1
 8004434:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004438:	f8cb c010 	str.w	ip, [fp, #16]
 800443c:	613e      	str	r6, [r7, #16]
 800443e:	613a      	str	r2, [r7, #16]
 8004440:	f8c8 0010 	str.w	r0, [r8, #16]
 8004444:	f8c8 1010 	str.w	r1, [r8, #16]
 8004448:	f8c8 6010 	str.w	r6, [r8, #16]
 800444c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004454:	f8c8 5010 	str.w	r5, [r8, #16]
 8004458:	f8c8 2010 	str.w	r2, [r8, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800445c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004460:	4452      	add	r2, sl
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004462:	f3c3 34c0 	ubfx	r4, r3, #15, #1
	data[0] = x1 >> 8;
 8004466:	f3c3 2007 	ubfx	r0, r3, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800446a:	fa1f f982 	uxth.w	r9, r2
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800446e:	b29a      	uxth	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004470:	041b      	lsls	r3, r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8004472:	bf48      	it	mi
 8004474:	2304      	movmi	r3, #4
 8004476:	9403      	str	r4, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004478:	bf54      	ite	pl
 800447a:	6139      	strpl	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800447c:	613b      	strmi	r3, [r7, #16]
 800447e:	f3c2 3380 	ubfx	r3, r2, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004482:	0455      	lsls	r5, r2, #17
 8004484:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004486:	bf54      	ite	pl
 8004488:	f44f 2300 	movpl.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800448c:	2308      	movmi	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800448e:	0494      	lsls	r4, r2, #18
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	f3c2 3340 	ubfx	r3, r2, #13, #1
 8004496:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004498:	bf54      	ite	pl
 800449a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800449e:	2310      	movmi	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80044a0:	04d1      	lsls	r1, r2, #19
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	f3c2 3300 	ubfx	r3, r2, #12, #1
 80044a8:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044aa:	bf54      	ite	pl
 80044ac:	f44f 1300 	movpl.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80044b0:	2320      	movmi	r3, #32
 80044b2:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80044b4:	0513      	lsls	r3, r2, #20
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044b6:	bf54      	ite	pl
 80044b8:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80044bc:	2340      	movmi	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80044be:	0555      	lsls	r5, r2, #21
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	f3c2 2380 	ubfx	r3, r2, #10, #1
 80044c6:	9310      	str	r3, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044c8:	bf54      	ite	pl
 80044ca:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80044ce:	2380      	movmi	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80044d0:	0594      	lsls	r4, r2, #22
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	f3c2 2340 	ubfx	r3, r2, #9, #1
 80044d8:	9311      	str	r3, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044da:	bf54      	ite	pl
 80044dc:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80044e0:	2310      	movmi	r3, #16
 80044e2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80044e6:	f010 0301 	ands.w	r3, r0, #1
 80044ea:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ec:	bf0c      	ite	eq
 80044ee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80044f2:	2320      	movne	r3, #32
 80044f4:	f8c8 3010 	str.w	r3, [r8, #16]
 80044f8:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044fa:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	f8cb 3010 	str.w	r3, [fp, #16]
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	f8cb 3010 	str.w	r3, [fp, #16]
 800450a:	2301      	movs	r3, #1
 800450c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004510:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004514:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004518:	f8cb 3010 	str.w	r3, [fp, #16]
 800451c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004520:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004524:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 8004528:	613e      	str	r6, [r7, #16]
 800452a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800452e:	6139      	str	r1, [r7, #16]
 8004530:	f8c8 3010 	str.w	r3, [r8, #16]
 8004534:	9413      	str	r4, [sp, #76]	; 0x4c
 8004536:	f8c8 0010 	str.w	r0, [r8, #16]
 800453a:	f8c8 6010 	str.w	r6, [r8, #16]
 800453e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004542:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004546:	f8c8 5010 	str.w	r5, [r8, #16]
 800454a:	f8c8 1010 	str.w	r1, [r8, #16]
 800454e:	0611      	lsls	r1, r2, #24
    GPIOx->BSRR = GPIO_Pin;
 8004550:	bf48      	it	mi
 8004552:	2104      	movmi	r1, #4
 8004554:	b2d3      	uxtb	r3, r2
 8004556:	bf4c      	ite	mi
 8004558:	6139      	strmi	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455a:	6138      	strpl	r0, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800455c:	065d      	lsls	r5, r3, #25
 800455e:	bf54      	ite	pl
 8004560:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004564:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004566:	0698      	lsls	r0, r3, #26
 8004568:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800456a:	bf54      	ite	pl
 800456c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004570:	2110      	movmi	r1, #16
 8004572:	6139      	str	r1, [r7, #16]
 8004574:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8004578:	9114      	str	r1, [sp, #80]	; 0x50
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800457a:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800457c:	bf54      	ite	pl
 800457e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004582:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004584:	0718      	lsls	r0, r3, #28
 8004586:	6139      	str	r1, [r7, #16]
 8004588:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800458c:	910e      	str	r1, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800458e:	bf54      	ite	pl
 8004590:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004594:	2140      	movmi	r1, #64	; 0x40
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800459c:	910d      	str	r1, [sp, #52]	; 0x34
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800459e:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045a0:	bf54      	ite	pl
 80045a2:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80045a6:	2180      	movmi	r1, #128	; 0x80
 80045a8:	f3c3 1480 	ubfx	r4, r3, #6, #1
 80045ac:	6139      	str	r1, [r7, #16]
 80045ae:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80045b2:	f3c3 0140 	ubfx	r1, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80045b6:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045b8:	bf54      	ite	pl
 80045ba:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80045be:	2310      	movmi	r3, #16
 80045c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80045c2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80045c6:	f012 0301 	ands.w	r3, r2, #1
 80045ca:	930c      	str	r3, [sp, #48]	; 0x30
 80045cc:	f3c2 2cc0 	ubfx	ip, r2, #11, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045d0:	bf0c      	ite	eq
 80045d2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80045d6:	2320      	movne	r3, #32
 80045d8:	2202      	movs	r2, #2
 80045da:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045de:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045e2:	f8cb 2010 	str.w	r2, [fp, #16]
 80045e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ea:	f8cb 2010 	str.w	r2, [fp, #16]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045fc:	f8cb 2010 	str.w	r2, [fp, #16]
 8004600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004604:	613e      	str	r6, [r7, #16]
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	f8c8 2010 	str.w	r2, [r8, #16]
 800460c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004610:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004614:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004618:	f8c8 2010 	str.w	r2, [r8, #16]
 800461c:	f8c8 6010 	str.w	r6, [r8, #16]
 8004620:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	f8c8 0010 	str.w	r0, [r8, #16]
 800462a:	f8c8 1010 	str.w	r1, [r8, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8721 	beq.w	8005476 <LCD_Font.constprop.2+0x11e2>
    GPIOx->BSRR = GPIO_Pin;
 8004634:	2304      	movs	r3, #4
 8004636:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 8720 	bne.w	8005480 <LCD_Font.constprop.2+0x11ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004640:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004644:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 871f 	bne.w	800548c <LCD_Font.constprop.2+0x11f8>
 800464e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004652:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 871e 	bne.w	8005498 <LCD_Font.constprop.2+0x1204>
 800465c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004660:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004662:	f1bc 0f00 	cmp.w	ip, #0
 8004666:	f040 871d 	bne.w	80054a4 <LCD_Font.constprop.2+0x1210>
 800466a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800466e:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 871c 	bne.w	80054b0 <LCD_Font.constprop.2+0x121c>
 8004678:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800467c:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800467e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 871b 	bne.w	80054bc <LCD_Font.constprop.2+0x1228>
 8004686:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800468a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800468e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 871a 	bne.w	80054ca <LCD_Font.constprop.2+0x1236>
 8004696:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800469a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800469e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a0:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80046a4:	f8cb 2010 	str.w	r2, [fp, #16]
 80046a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ac:	f8cb 2010 	str.w	r2, [fp, #16]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80046ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046be:	f8cb 2010 	str.w	r2, [fp, #16]
 80046c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046c6:	613e      	str	r6, [r7, #16]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	f8c8 2010 	str.w	r2, [r8, #16]
 80046ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80046d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80046da:	f8c8 2010 	str.w	r2, [r8, #16]
 80046de:	f8c8 6010 	str.w	r6, [r8, #16]
 80046e2:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80046e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046e8:	f8c8 0010 	str.w	r0, [r8, #16]
 80046ec:	f8c8 1010 	str.w	r1, [r8, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8718 	beq.w	8005526 <LCD_Font.constprop.2+0x1292>
    GPIOx->BSRR = GPIO_Pin;
 80046f6:	2304      	movs	r3, #4
 80046f8:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	f040 86ea 	bne.w	80054d4 <LCD_Font.constprop.2+0x1240>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004704:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004706:	2d00      	cmp	r5, #0
 8004708:	f040 86e9 	bne.w	80054de <LCD_Font.constprop.2+0x124a>
 800470c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004710:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 86e8 	bne.w	80054ea <LCD_Font.constprop.2+0x1256>
 800471a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800471e:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 86e7 	bne.w	80054f6 <LCD_Font.constprop.2+0x1262>
 8004728:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800472c:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800472e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 86e6 	bne.w	8005502 <LCD_Font.constprop.2+0x126e>
 8004736:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800473a:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800473c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 86e5 	bne.w	800550e <LCD_Font.constprop.2+0x127a>
 8004744:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004748:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800474c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 86e4 	bne.w	800551c <LCD_Font.constprop.2+0x1288>
 8004754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004758:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800475c:	2502      	movs	r5, #2
 800475e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004762:	f8cb 6010 	str.w	r6, [fp, #16]
 8004766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800476a:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800476e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004772:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004776:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800477a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800477e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004782:	f8cb 3010 	str.w	r3, [fp, #16]
 8004786:	f8cb 0010 	str.w	r0, [fp, #16]
 800478a:	613e      	str	r6, [r7, #16]
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004792:	f8c8 2010 	str.w	r2, [r8, #16]
 8004796:	f8c8 6010 	str.w	r6, [r8, #16]
 800479a:	f8c8 3010 	str.w	r3, [r8, #16]
 800479e:	f8c8 4010 	str.w	r4, [r8, #16]
 80047a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80047a6:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80047ae:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80047b2:	613a      	str	r2, [r7, #16]
 80047b4:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047b6:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ba:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047bc:	2440      	movs	r4, #64	; 0x40
 80047be:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80047c4:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047c6:	f8c8 c010 	str.w	ip, [r8, #16]
 80047ca:	f04f 0c20 	mov.w	ip, #32
 80047ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80047d2:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047d6:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047da:	f8cb 5010 	str.w	r5, [fp, #16]
 80047de:	2501      	movs	r5, #1
 80047e0:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047e4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80047e8:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ec:	f8cb 0010 	str.w	r0, [fp, #16]
 80047f0:	613e      	str	r6, [r7, #16]
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	f8c8 1010 	str.w	r1, [r8, #16]
 80047f8:	f8c8 2010 	str.w	r2, [r8, #16]
 80047fc:	f8c8 6010 	str.w	r6, [r8, #16]
 8004800:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004804:	ea5f 33da 	movs.w	r3, sl, lsr #15
 8004808:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800480c:	bf18      	it	ne
 800480e:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004810:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004814:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004818:	bf14      	ite	ne
 800481a:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800481c:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800481e:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8004822:	bf0c      	ite	eq
 8004824:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004828:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800482a:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800482e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004830:	bf0c      	ite	eq
 8004832:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004836:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004838:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 800483c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800483e:	bf0c      	ite	eq
 8004840:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004844:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004846:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 800484a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800484c:	bf0c      	ite	eq
 800484e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004852:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004854:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004858:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800485a:	bf0c      	ite	eq
 800485c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004860:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004862:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004866:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004868:	bf0c      	ite	eq
 800486a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800486e:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004870:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004874:	f8c8 3010 	str.w	r3, [r8, #16]
 8004878:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800487c:	bf0c      	ite	eq
 800487e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004882:	2320      	movne	r3, #32
 8004884:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004888:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800488c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004894:	f8cb 2010 	str.w	r2, [fp, #16]
 8004898:	2201      	movs	r2, #1
 800489a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800489e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a6:	f8cb 2010 	str.w	r2, [fp, #16]
 80048aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048ae:	613e      	str	r6, [r7, #16]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	f8c8 2010 	str.w	r2, [r8, #16]
 80048b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80048ba:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80048be:	f8c8 2010 	str.w	r2, [r8, #16]
 80048c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80048c6:	f8c8 6010 	str.w	r6, [r8, #16]
 80048ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80048ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048d2:	bf18      	it	ne
 80048d4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048d6:	f8c8 0010 	str.w	r0, [r8, #16]
 80048da:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048de:	bf14      	ite	ne
 80048e0:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048e2:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80048e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80048e8:	bf0c      	ite	eq
 80048ea:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80048ee:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80048f0:	f01a 0f20 	tst.w	sl, #32
 80048f4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048f6:	bf0c      	ite	eq
 80048f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80048fc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80048fe:	f01a 0f10 	tst.w	sl, #16
 8004902:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004904:	bf0c      	ite	eq
 8004906:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800490a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800490c:	f01a 0f08 	tst.w	sl, #8
 8004910:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004912:	bf0c      	ite	eq
 8004914:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004918:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800491a:	f01a 0f04 	tst.w	sl, #4
 800491e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004920:	bf0c      	ite	eq
 8004922:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004926:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004928:	f01a 0f02 	tst.w	sl, #2
 800492c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800492e:	bf0c      	ite	eq
 8004930:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004934:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004936:	f01a 0f01 	tst.w	sl, #1
 800493a:	f8c8 3010 	str.w	r3, [r8, #16]
 800493e:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004942:	bf0c      	ite	eq
 8004944:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004948:	2320      	movne	r3, #32
 800494a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800494e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004952:	f8cb 2010 	str.w	r2, [fp, #16]
 8004956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800495a:	f8cb 2010 	str.w	r2, [fp, #16]
 800495e:	2201      	movs	r2, #1
 8004960:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004964:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800496c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004970:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004974:	613e      	str	r6, [r7, #16]
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	f8c8 2010 	str.w	r2, [r8, #16]
 800497c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004980:	f8c8 2010 	str.w	r2, [r8, #16]
 8004984:	f8c8 6010 	str.w	r6, [r8, #16]
 8004988:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800498c:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004990:	bf18      	it	ne
 8004992:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004994:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800499c:	f8c8 0010 	str.w	r0, [r8, #16]
 80049a0:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049a4:	bf14      	ite	ne
 80049a6:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049a8:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80049aa:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80049ae:	bf0c      	ite	eq
 80049b0:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80049b4:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80049b6:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80049ba:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049bc:	bf0c      	ite	eq
 80049be:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80049c2:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80049c4:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 80049c8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ca:	bf0c      	ite	eq
 80049cc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80049d0:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80049d2:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80049d6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049d8:	bf0c      	ite	eq
 80049da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80049de:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80049e0:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80049e4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049e6:	bf0c      	ite	eq
 80049e8:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80049ec:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80049ee:	f419 7f00 	tst.w	r9, #512	; 0x200
 80049f2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049f4:	bf0c      	ite	eq
 80049f6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80049fa:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80049fc:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004a00:	f8c8 3010 	str.w	r3, [r8, #16]
 8004a04:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a08:	bf0c      	ite	eq
 8004a0a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	2320      	movne	r3, #32
 8004a10:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a14:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a18:	f8cb 2010 	str.w	r2, [fp, #16]
 8004a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a20:	f8cb 2010 	str.w	r2, [fp, #16]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a32:	f8cb 2010 	str.w	r2, [fp, #16]
 8004a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a3a:	613e      	str	r6, [r7, #16]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004a42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004a46:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004a4a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004a4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004a52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a56:	f8c8 6010 	str.w	r6, [r8, #16]
 8004a5a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a5e:	bf18      	it	ne
 8004a60:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a62:	f8c8 0010 	str.w	r0, [r8, #16]
 8004a66:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	bf14      	ite	ne
 8004a6c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a6e:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004a70:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004a74:	bf0c      	ite	eq
 8004a76:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004a7a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004a7c:	f019 0f20 	tst.w	r9, #32
 8004a80:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a82:	bf0c      	ite	eq
 8004a84:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a88:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004a8a:	f019 0f10 	tst.w	r9, #16
 8004a8e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a90:	bf0c      	ite	eq
 8004a92:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a96:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004a98:	f019 0f08 	tst.w	r9, #8
 8004a9c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a9e:	bf0c      	ite	eq
 8004aa0:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004aa4:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004aa6:	f019 0f04 	tst.w	r9, #4
 8004aaa:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aac:	bf0c      	ite	eq
 8004aae:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004ab2:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004ab4:	f019 0f02 	tst.w	r9, #2
 8004ab8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aba:	bf0c      	ite	eq
 8004abc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004ac0:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004ac2:	f019 0f01 	tst.w	r9, #1
 8004ac6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aca:	bf0c      	ite	eq
 8004acc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004ad0:	2320      	movne	r3, #32
 8004ad2:	f04f 0902 	mov.w	r9, #2
 8004ad6:	f8c8 3010 	str.w	r3, [r8, #16]
 8004ada:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ae2:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8004ae6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004aea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004aee:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	f8cb 9010 	str.w	r9, [fp, #16]
 8004af6:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004afa:	f8cb 3010 	str.w	r3, [fp, #16]
 8004afe:	f8cb 0010 	str.w	r0, [fp, #16]
 8004b02:	613e      	str	r6, [r7, #16]
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b0a:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b0e:	f8c8 6010 	str.w	r6, [r8, #16]
 8004b12:	f8c8 3010 	str.w	r3, [r8, #16]
 8004b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b1a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8004b1e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b22:	2310      	movs	r3, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b24:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b2c:	6139      	str	r1, [r7, #16]
 8004b2e:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b34:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004b40:	f04f 0c00 	mov.w	ip, #0
 8004b44:	f8c8 3010 	str.w	r3, [r8, #16]
 8004b48:	f8c8 2010 	str.w	r2, [r8, #16]
 8004b4c:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b50:	f8cb 9010 	str.w	r9, [fp, #16]
 8004b54:	f8cb a010 	str.w	sl, [fp, #16]
 8004b58:	f8cd e00c 	str.w	lr, [sp, #12]
 8004b5c:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b5e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004b62:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004b6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b6e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8004b72:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8004b76:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b7e:	613e      	str	r6, [r7, #16]
 8004b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b84:	6138      	str	r0, [r7, #16]
 8004b86:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8004b8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b8e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b92:	f8c8 6010 	str.w	r6, [r8, #16]
 8004b96:	f8c8 0010 	str.w	r0, [r8, #16]
 8004b9a:	f8c8 a010 	str.w	sl, [r8, #16]
 8004b9e:	f8c8 9010 	str.w	r9, [r8, #16]
 8004ba2:	6139      	str	r1, [r7, #16]
 8004ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004ba8:	613c      	str	r4, [r7, #16]
 8004baa:	613a      	str	r2, [r7, #16]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	613d      	str	r5, [r7, #16]
 8004bb0:	6139      	str	r1, [r7, #16]
 8004bb2:	f8c8 2010 	str.w	r2, [r8, #16]
 8004bb6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bc0:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004bc4:	f8cb 3010 	str.w	r3, [fp, #16]
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	f10c 0c01 	add.w	ip, ip, #1
 8004bce:	4563      	cmp	r3, ip
 8004bd0:	f8cb e010 	str.w	lr, [fp, #16]
 8004bd4:	d1c2      	bne.n	8004b5c <LCD_Font.constprop.2+0x8c8>
 8004bd6:	f7ff bbc3 	b.w	8004360 <LCD_Font.constprop.2+0xcc>
		if (set_pixels > 0)
 8004bda:	4672      	mov	r2, lr
 8004bdc:	f8cd e000 	str.w	lr, [sp]
 8004be0:	b98a      	cbnz	r2, 8004c06 <LCD_Font.constprop.2+0x972>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004be2:	9b06      	ldr	r3, [sp, #24]
 8004be4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004be6:	3301      	adds	r3, #1
 8004be8:	9306      	str	r3, [sp, #24]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f63f ab87 	bhi.w	8004300 <LCD_Font.constprop.2+0x6c>
			cursor_x += glyph.xAdvance * size;
 8004bf2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8004bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004bf8:	9816      	ldr	r0, [sp, #88]	; 0x58
			cursor_x += glyph.xAdvance * size;
 8004bfa:	4423      	add	r3, r4
 8004bfc:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004bfe:	f000 fd8f 	bl	8005720 <strlen>
 8004c02:	f7ff bbb7 	b.w	8004374 <LCD_Font.constprop.2+0xe0>
 8004c06:	460e      	mov	r6, r1
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004c08:	f99d 2075 	ldrsb.w	r2, [sp, #117]	; 0x75
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c0c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c10:	4432      	add	r2, r6
 8004c12:	9e00      	ldr	r6, [sp, #0]
 8004c14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004c18:	1b92      	subs	r2, r2, r6
 8004c1a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004c1c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004c20:	4432      	add	r2, r6
 8004c22:	fa1f fa82 	uxth.w	sl, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004c26:	4453      	add	r3, sl
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004c28:	f99d 2076 	ldrsb.w	r2, [sp, #118]	; 0x76
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004c2c:	fa1f f983 	uxth.w	r9, r3
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004c30:	9b06      	ldr	r3, [sp, #24]
 8004c32:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004c36:	441a      	add	r2, r3
 8004c38:	9b08      	ldr	r3, [sp, #32]
 8004c3a:	f8cb 1010 	str.w	r1, [fp, #16]
 8004c3e:	441a      	add	r2, r3
 8004c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c44:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c4c:	6138      	str	r0, [r7, #16]
 8004c4e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004c52:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c54:	f04f 0e10 	mov.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c58:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c5c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8004c60:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c64:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c68:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c6c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c70:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c72:	f8c8 6010 	str.w	r6, [r8, #16]
 8004c76:	613c      	str	r4, [r7, #16]
 8004c78:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	f8c7 e010 	str.w	lr, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c7e:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c82:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c88:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c90:	f8c8 c010 	str.w	ip, [r8, #16]
 8004c94:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c98:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	f8cb 3010 	str.w	r3, [fp, #16]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cae:	f8cb 3010 	str.w	r3, [fp, #16]
 8004cb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cb6:	6138      	str	r0, [r7, #16]
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	f8c8 5010 	str.w	r5, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004cbe:	0415      	lsls	r5, r2, #16
 8004cc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cc4:	f8c8 0010 	str.w	r0, [r8, #16]
 8004cc8:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ccc:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8004cd0:	f8c8 3010 	str.w	r3, [r8, #16]
	data[0] = x1 >> 8;
 8004cd4:	f3c2 2107 	ubfx	r1, r2, #8, #8
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004cd8:	b293      	uxth	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 8004cda:	bf48      	it	mi
 8004cdc:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cde:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004ce2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ce4:	bf54      	ite	pl
 8004ce6:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ce8:	613a      	strmi	r2, [r7, #16]
 8004cea:	f3c3 3280 	ubfx	r2, r3, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004cee:	0458      	lsls	r0, r3, #17
 8004cf0:	9219      	str	r2, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf2:	bf54      	ite	pl
 8004cf4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004cf8:	2208      	movmi	r2, #8
 8004cfa:	613a      	str	r2, [r7, #16]
 8004cfc:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004d00:	9214      	str	r2, [sp, #80]	; 0x50
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004d02:	049a      	lsls	r2, r3, #18
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d04:	bf54      	ite	pl
 8004d06:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004d0a:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004d0c:	04de      	lsls	r6, r3, #19
 8004d0e:	613a      	str	r2, [r7, #16]
 8004d10:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004d14:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d16:	bf54      	ite	pl
 8004d18:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004d1c:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004d1e:	051d      	lsls	r5, r3, #20
 8004d20:	613a      	str	r2, [r7, #16]
 8004d22:	f3c3 22c0 	ubfx	r2, r3, #11, #1
 8004d26:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d28:	bf54      	ite	pl
 8004d2a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004d2e:	2240      	movmi	r2, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004d30:	055c      	lsls	r4, r3, #21
 8004d32:	613a      	str	r2, [r7, #16]
 8004d34:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8004d38:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d3a:	bf54      	ite	pl
 8004d3c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004d40:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004d42:	0598      	lsls	r0, r3, #22
 8004d44:	613a      	str	r2, [r7, #16]
 8004d46:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8004d4a:	9212      	str	r2, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d4c:	bf54      	ite	pl
 8004d4e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004d52:	2210      	movmi	r2, #16
 8004d54:	f8c8 2010 	str.w	r2, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004d58:	f011 0201 	ands.w	r2, r1, #1
 8004d5c:	921a      	str	r2, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d5e:	bf0c      	ite	eq
 8004d60:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004d64:	2220      	movne	r2, #32
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004d66:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8004d6a:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d6e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004d72:	950c      	str	r5, [sp, #48]	; 0x30
    GPIOx->BSRR = GPIO_Pin;
 8004d74:	2502      	movs	r5, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d76:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d7a:	f8cb 5010 	str.w	r5, [fp, #16]
 8004d7e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d82:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004d86:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d8a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	2501      	movs	r5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d90:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8004d94:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004d98:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004da0:	f8cb e010 	str.w	lr, [fp, #16]
 8004da4:	6139      	str	r1, [r7, #16]
 8004da6:	6138      	str	r0, [r7, #16]
 8004da8:	f8c8 c010 	str.w	ip, [r8, #16]
 8004dac:	f8c8 4010 	str.w	r4, [r8, #16]
 8004db0:	f8c8 1010 	str.w	r1, [r8, #16]
 8004db4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004db8:	f8c8 0010 	str.w	r0, [r8, #16]
 8004dbc:	f8c8 6010 	str.w	r6, [r8, #16]
 8004dc0:	f8c8 1010 	str.w	r1, [r8, #16]
 8004dc4:	0619      	lsls	r1, r3, #24
    GPIOx->BSRR = GPIO_Pin;
 8004dc6:	bf48      	it	mi
 8004dc8:	2104      	movmi	r1, #4
 8004dca:	b2da      	uxtb	r2, r3
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dcc:	bf54      	ite	pl
 8004dce:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004dd0:	6139      	strmi	r1, [r7, #16]
 8004dd2:	f3c2 1180 	ubfx	r1, r2, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004dd6:	0656      	lsls	r6, r2, #25
 8004dd8:	9111      	str	r1, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dda:	bf54      	ite	pl
 8004ddc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004de0:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004de2:	0695      	lsls	r5, r2, #26
 8004de4:	6139      	str	r1, [r7, #16]
 8004de6:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004dea:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dec:	bf54      	ite	pl
 8004dee:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004df2:	2110      	movmi	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004df4:	06d4      	lsls	r4, r2, #27
 8004df6:	6139      	str	r1, [r7, #16]
 8004df8:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004dfc:	9110      	str	r1, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dfe:	bf54      	ite	pl
 8004e00:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e04:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004e06:	0710      	lsls	r0, r2, #28
 8004e08:	6139      	str	r1, [r7, #16]
 8004e0a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004e0e:	910a      	str	r1, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e10:	bf54      	ite	pl
 8004e12:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004e16:	2140      	movmi	r1, #64	; 0x40
 8004e18:	6139      	str	r1, [r7, #16]
 8004e1a:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004e1e:	911b      	str	r1, [sp, #108]	; 0x6c
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004e20:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e22:	bf54      	ite	pl
 8004e24:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004e28:	2180      	movmi	r1, #128	; 0x80
 8004e2a:	6139      	str	r1, [r7, #16]
 8004e2c:	f3c2 0140 	ubfx	r1, r2, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004e30:	0792      	lsls	r2, r2, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e32:	bf54      	ite	pl
 8004e34:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004e38:	2210      	movmi	r2, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004e3a:	f013 0301 	ands.w	r3, r3, #1
 8004e3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004e40:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e44:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e46:	bf0c      	ite	eq
 8004e48:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e4c:	2320      	movne	r3, #32
 8004e4e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004e52:	f8c8 3010 	str.w	r3, [r8, #16]
 8004e56:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e62:	f8cb 3010 	str.w	r3, [fp, #16]
 8004e66:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e6e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e72:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e76:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004e7a:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e7e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004e86:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e8a:	f8cb 6010 	str.w	r6, [fp, #16]
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	613a      	str	r2, [r7, #16]
 8004e92:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e96:	f8c8 1010 	str.w	r1, [r8, #16]
 8004e9a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ea0:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ea4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ea8:	f8c8 0010 	str.w	r0, [r8, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 836d 	beq.w	800558c <LCD_Font.constprop.2+0x12f8>
    GPIOx->BSRR = GPIO_Pin;
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004eb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8364 	bne.w	8005586 <LCD_Font.constprop.2+0x12f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ebe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ec2:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004ec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 835a 	bne.w	8005580 <LCD_Font.constprop.2+0x12ec>
 8004ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ed0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8350 	bne.w	800557a <LCD_Font.constprop.2+0x12e6>
 8004eda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ede:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8346 	bne.w	8005574 <LCD_Font.constprop.2+0x12e0>
 8004ee8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004eec:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 833c 	bne.w	800556e <LCD_Font.constprop.2+0x12da>
 8004ef6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004efa:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 8331 	bne.w	8005566 <LCD_Font.constprop.2+0x12d2>
 8004f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f08:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004f0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 8325 	bne.w	800555e <LCD_Font.constprop.2+0x12ca>
 8004f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f18:	f8c8 3010 	str.w	r3, [r8, #16]
 8004f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004f20:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004f24:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f28:	f8cb 3010 	str.w	r3, [fp, #16]
 8004f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004f30:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f34:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004f38:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f3c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004f40:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004f44:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004f50:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f54:	f8cb 6010 	str.w	r6, [fp, #16]
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	613a      	str	r2, [r7, #16]
 8004f5c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f60:	f8c8 1010 	str.w	r1, [r8, #16]
 8004f64:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f6a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004f6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f72:	f8c8 0010 	str.w	r0, [r8, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 82ef 	beq.w	800555a <LCD_Font.constprop.2+0x12c6>
    GPIOx->BSRR = GPIO_Pin;
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 82e6 	bne.w	8005554 <LCD_Font.constprop.2+0x12c0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f8c:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 82dc 	bne.w	800554e <LCD_Font.constprop.2+0x12ba>
 8004f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f9a:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 82d2 	bne.w	8005548 <LCD_Font.constprop.2+0x12b4>
 8004fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fa8:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 82c8 	bne.w	8005542 <LCD_Font.constprop.2+0x12ae>
 8004fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fb6:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004fb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 82be 	bne.w	800553c <LCD_Font.constprop.2+0x12a8>
 8004fc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fc4:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f040 82b3 	bne.w	8005534 <LCD_Font.constprop.2+0x12a0>
 8004fce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fd2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 82a7 	bne.w	800552c <LCD_Font.constprop.2+0x1298>
 8004fde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fe2:	f8c8 3010 	str.w	r3, [r8, #16]
 8004fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004fea:	2602      	movs	r6, #2
 8004fec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff0:	f8cb 3010 	str.w	r3, [fp, #16]
 8004ff4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004ff8:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ffc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8005000:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005004:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005008:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800500c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005010:	f8cb 2010 	str.w	r2, [fp, #16]
 8005014:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8005018:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800501c:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	613a      	str	r2, [r7, #16]
 8005024:	f8c8 0010 	str.w	r0, [r8, #16]
 8005028:	f8c8 1010 	str.w	r1, [r8, #16]
 800502c:	f8c8 3010 	str.w	r3, [r8, #16]
 8005030:	f8c8 2010 	str.w	r2, [r8, #16]
 8005034:	f8c8 5010 	str.w	r5, [r8, #16]
 8005038:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 800503c:	f8c8 e010 	str.w	lr, [r8, #16]
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005044:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005048:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800504a:	2540      	movs	r5, #64	; 0x40
 800504c:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800504e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8005052:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005054:	f8c8 c010 	str.w	ip, [r8, #16]
 8005058:	f04f 0c20 	mov.w	ip, #32
 800505c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005060:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005064:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005068:	f8cb 6010 	str.w	r6, [fp, #16]
 800506c:	2601      	movs	r6, #1
 800506e:	f8cb 5010 	str.w	r5, [fp, #16]
 8005072:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005076:	f8cb 4010 	str.w	r4, [fp, #16]
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	613a      	str	r2, [r7, #16]
 800507e:	f8c8 0010 	str.w	r0, [r8, #16]
 8005082:	f8c8 1010 	str.w	r1, [r8, #16]
 8005086:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800508a:	ea5f 33da 	movs.w	r3, sl, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800508e:	bf18      	it	ne
 8005090:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005092:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005096:	f8c8 2010 	str.w	r2, [r8, #16]
 800509a:	f8c8 5010 	str.w	r5, [r8, #16]
 800509e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050a2:	bf14      	ite	ne
 80050a4:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050a6:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80050a8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 80050ac:	bf0c      	ite	eq
 80050ae:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80050b2:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80050b4:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050ba:	bf0c      	ite	eq
 80050bc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80050c0:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80050c2:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 80050c6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c8:	bf0c      	ite	eq
 80050ca:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80050ce:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80050d0:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 80050d4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d6:	bf0c      	ite	eq
 80050d8:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80050dc:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80050de:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80050e2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050e4:	bf0c      	ite	eq
 80050e6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80050ea:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80050ec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80050f0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050f2:	bf0c      	ite	eq
 80050f4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80050f8:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80050fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050fe:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005102:	bf0c      	ite	eq
 8005104:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005108:	2320      	movne	r3, #32
 800510a:	f04f 0e02 	mov.w	lr, #2
 800510e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005112:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800511a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800511e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005122:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8005126:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800512a:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800512e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005132:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005136:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800513a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800513e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005142:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005146:	f8cb 6010 	str.w	r6, [fp, #16]
 800514a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	613a      	str	r2, [r7, #16]
 8005152:	f8c8 5010 	str.w	r5, [r8, #16]
 8005156:	f8c8 1010 	str.w	r1, [r8, #16]
 800515a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800515e:	bf18      	it	ne
 8005160:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005162:	f8c8 2010 	str.w	r2, [r8, #16]
 8005166:	f8c8 4010 	str.w	r4, [r8, #16]
 800516a:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800516e:	bf14      	ite	ne
 8005170:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005172:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005174:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005178:	bf0c      	ite	eq
 800517a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800517e:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005180:	f01a 0f20 	tst.w	sl, #32
 8005184:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005186:	bf0c      	ite	eq
 8005188:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800518c:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800518e:	f01a 0f10 	tst.w	sl, #16
 8005192:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005194:	bf0c      	ite	eq
 8005196:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800519a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800519c:	f01a 0f08 	tst.w	sl, #8
 80051a0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051a2:	bf0c      	ite	eq
 80051a4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80051a8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051aa:	f01a 0f04 	tst.w	sl, #4
 80051ae:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051b0:	bf0c      	ite	eq
 80051b2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80051b6:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80051b8:	f01a 0f02 	tst.w	sl, #2
 80051bc:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051be:	bf0c      	ite	eq
 80051c0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80051c4:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80051c6:	f01a 0f01 	tst.w	sl, #1
 80051ca:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ce:	bf0c      	ite	eq
 80051d0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80051d4:	2320      	movne	r3, #32
 80051d6:	f04f 0e02 	mov.w	lr, #2
 80051da:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80051de:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051ea:	f8cb 3010 	str.w	r3, [fp, #16]
 80051ee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80051f2:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051f6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051fe:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005202:	f04f 0c01 	mov.w	ip, #1
 8005206:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800520a:	f8cb 6010 	str.w	r6, [fp, #16]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	613a      	str	r2, [r7, #16]
 8005212:	f8c8 5010 	str.w	r5, [r8, #16]
 8005216:	f8c8 1010 	str.w	r1, [r8, #16]
 800521a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800521e:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8005222:	bf18      	it	ne
 8005224:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005226:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800522a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800522e:	f8c8 2010 	str.w	r2, [r8, #16]
 8005232:	f8c8 4010 	str.w	r4, [r8, #16]
 8005236:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800523a:	bf14      	ite	ne
 800523c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800523e:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005240:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8005244:	bf0c      	ite	eq
 8005246:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800524a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800524c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8005250:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005252:	bf0c      	ite	eq
 8005254:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005258:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800525a:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 800525e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005260:	bf0c      	ite	eq
 8005262:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005266:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005268:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800526c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800526e:	bf0c      	ite	eq
 8005270:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005274:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005276:	f419 6f80 	tst.w	r9, #1024	; 0x400
 800527a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800527c:	bf0c      	ite	eq
 800527e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8005282:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005284:	f419 7f00 	tst.w	r9, #512	; 0x200
 8005288:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800528a:	bf0c      	ite	eq
 800528c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005290:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005292:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005296:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800529a:	bf0c      	ite	eq
 800529c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80052a0:	2320      	movne	r3, #32
 80052a2:	f04f 0e02 	mov.w	lr, #2
 80052a6:	f8c8 3010 	str.w	r3, [r8, #16]
 80052aa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b6:	f8cb 3010 	str.w	r3, [fp, #16]
 80052ba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80052be:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052c2:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80052c6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052ca:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80052ce:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80052d2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80052d6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052da:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052de:	f8cb 6010 	str.w	r6, [fp, #16]
 80052e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	613a      	str	r2, [r7, #16]
 80052ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80052ee:	f8c8 1010 	str.w	r1, [r8, #16]
 80052f2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80052f6:	bf18      	it	ne
 80052f8:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052fa:	f8c8 2010 	str.w	r2, [r8, #16]
 80052fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8005302:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005306:	bf14      	ite	ne
 8005308:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800530a:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800530c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005310:	bf0c      	ite	eq
 8005312:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005316:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005318:	f019 0f20 	tst.w	r9, #32
 800531c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800531e:	bf0c      	ite	eq
 8005320:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005324:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005326:	f019 0f10 	tst.w	r9, #16
 800532a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800532c:	bf0c      	ite	eq
 800532e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005332:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005334:	f019 0f08 	tst.w	r9, #8
 8005338:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800533a:	bf0c      	ite	eq
 800533c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005340:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005342:	f019 0f04 	tst.w	r9, #4
 8005346:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005348:	bf0c      	ite	eq
 800534a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800534e:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005350:	f019 0f02 	tst.w	r9, #2
 8005354:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005356:	bf0c      	ite	eq
 8005358:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800535c:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800535e:	f019 0f01 	tst.w	r9, #1
 8005362:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005366:	bf0c      	ite	eq
 8005368:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800536c:	2320      	movne	r3, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800536e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8005372:	f8c8 3010 	str.w	r3, [r8, #16]
 8005376:	f04f 0902 	mov.w	r9, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800537a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800537e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005382:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8005386:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800538a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800538e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005396:	f8cb 9010 	str.w	r9, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800539a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800539e:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053a2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80053a6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053aa:	2610      	movs	r6, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053ac:	f8cb 4010 	str.w	r4, [fp, #16]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	613a      	str	r2, [r7, #16]
 80053b4:	f8c8 5010 	str.w	r5, [r8, #16]
 80053b8:	f8c8 0010 	str.w	r0, [r8, #16]
 80053bc:	f8c8 3010 	str.w	r3, [r8, #16]
 80053c0:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053c4:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053c6:	f8c8 e010 	str.w	lr, [r8, #16]
 80053ca:	f8c8 c010 	str.w	ip, [r8, #16]
 80053ce:	6138      	str	r0, [r7, #16]
 80053d0:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053d2:	613e      	str	r6, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053d4:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053d6:	613a      	str	r2, [r7, #16]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80053e0:	f04f 0c00 	mov.w	ip, #0
 80053e4:	f8c8 2010 	str.w	r2, [r8, #16]
 80053e8:	f8c8 1010 	str.w	r1, [r8, #16]
 80053ec:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80053f0:	f8cb 9010 	str.w	r9, [fp, #16]
 80053f4:	f8cb a010 	str.w	sl, [fp, #16]
 80053f8:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80053fe:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005402:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8005406:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800540a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800540e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8005412:	f8cb 2010 	str.w	r2, [fp, #16]
 8005416:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005420:	613c      	str	r4, [r7, #16]
 8005422:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8005426:	f8c8 5010 	str.w	r5, [r8, #16]
 800542a:	f8c8 0010 	str.w	r0, [r8, #16]
 800542e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005432:	f8c8 4010 	str.w	r4, [r8, #16]
 8005436:	f8c8 9010 	str.w	r9, [r8, #16]
 800543a:	f8c8 e010 	str.w	lr, [r8, #16]
 800543e:	6138      	str	r0, [r7, #16]
 8005440:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005444:	613d      	str	r5, [r7, #16]
 8005446:	6139      	str	r1, [r7, #16]
 8005448:	613a      	str	r2, [r7, #16]
 800544a:	613e      	str	r6, [r7, #16]
 800544c:	6138      	str	r0, [r7, #16]
 800544e:	f8c8 1010 	str.w	r1, [r8, #16]
 8005452:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005456:	2202      	movs	r2, #2
 8005458:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800545c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005460:	f8cb 2010 	str.w	r2, [fp, #16]
 8005464:	9a00      	ldr	r2, [sp, #0]
 8005466:	f10c 0c01 	add.w	ip, ip, #1
 800546a:	4562      	cmp	r2, ip
 800546c:	f8cb a010 	str.w	sl, [fp, #16]
 8005470:	d1c2      	bne.n	80053f8 <LCD_Font.constprop.2+0x1164>
 8005472:	f7ff bbb6 	b.w	8004be2 <LCD_Font.constprop.2+0x94e>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005478:	613a      	str	r2, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f43f a8e0 	beq.w	8004640 <LCD_Font.constprop.2+0x3ac>
    GPIOx->BSRR = GPIO_Pin;
 8005480:	2308      	movs	r3, #8
 8005482:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	f43f a8e1 	beq.w	800464e <LCD_Font.constprop.2+0x3ba>
 800548c:	2310      	movs	r3, #16
 800548e:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005492:	2b00      	cmp	r3, #0
 8005494:	f43f a8e2 	beq.w	800465c <LCD_Font.constprop.2+0x3c8>
 8005498:	2320      	movs	r3, #32
 800549a:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800549c:	f1bc 0f00 	cmp.w	ip, #0
 80054a0:	f43f a8e3 	beq.w	800466a <LCD_Font.constprop.2+0x3d6>
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80054a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f43f a8e4 	beq.w	8004678 <LCD_Font.constprop.2+0x3e4>
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80054b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f43f a8e5 	beq.w	8004686 <LCD_Font.constprop.2+0x3f2>
 80054bc:	2310      	movs	r3, #16
 80054be:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80054c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f43f a8e6 	beq.w	8004696 <LCD_Font.constprop.2+0x402>
 80054ca:	2320      	movs	r3, #32
 80054cc:	f8c8 3010 	str.w	r3, [r8, #16]
 80054d0:	f7ff b8e5 	b.w	800469e <LCD_Font.constprop.2+0x40a>
 80054d4:	2308      	movs	r3, #8
 80054d6:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80054d8:	2d00      	cmp	r5, #0
 80054da:	f43f a917 	beq.w	800470c <LCD_Font.constprop.2+0x478>
 80054de:	2310      	movs	r3, #16
 80054e0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80054e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f43f a918 	beq.w	800471a <LCD_Font.constprop.2+0x486>
 80054ea:	2320      	movs	r3, #32
 80054ec:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80054ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f43f a919 	beq.w	8004728 <LCD_Font.constprop.2+0x494>
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80054fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f43f a91a 	beq.w	8004736 <LCD_Font.constprop.2+0x4a2>
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	f43f a91b 	beq.w	8004744 <LCD_Font.constprop.2+0x4b0>
 800550e:	2310      	movs	r3, #16
 8005510:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005516:	2b00      	cmp	r3, #0
 8005518:	f43f a91c 	beq.w	8004754 <LCD_Font.constprop.2+0x4c0>
 800551c:	2320      	movs	r3, #32
 800551e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005522:	f7ff b91b 	b.w	800475c <LCD_Font.constprop.2+0x4c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005526:	613a      	str	r2, [r7, #16]
 8005528:	f7ff b8e7 	b.w	80046fa <LCD_Font.constprop.2+0x466>
    GPIOx->BSRR = GPIO_Pin;
 800552c:	2320      	movs	r3, #32
 800552e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005532:	e558      	b.n	8004fe6 <LCD_Font.constprop.2+0xd52>
 8005534:	2310      	movs	r3, #16
 8005536:	f8c8 3010 	str.w	r3, [r8, #16]
 800553a:	e54c      	b.n	8004fd6 <LCD_Font.constprop.2+0xd42>
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e541      	b.n	8004fc6 <LCD_Font.constprop.2+0xd32>
 8005542:	2340      	movs	r3, #64	; 0x40
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e537      	b.n	8004fb8 <LCD_Font.constprop.2+0xd24>
 8005548:	2320      	movs	r3, #32
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e52d      	b.n	8004faa <LCD_Font.constprop.2+0xd16>
 800554e:	2310      	movs	r3, #16
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e523      	b.n	8004f9c <LCD_Font.constprop.2+0xd08>
 8005554:	2308      	movs	r3, #8
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e519      	b.n	8004f8e <LCD_Font.constprop.2+0xcfa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800555a:	6139      	str	r1, [r7, #16]
 800555c:	e510      	b.n	8004f80 <LCD_Font.constprop.2+0xcec>
    GPIOx->BSRR = GPIO_Pin;
 800555e:	2320      	movs	r3, #32
 8005560:	f8c8 3010 	str.w	r3, [r8, #16]
 8005564:	e4da      	b.n	8004f1c <LCD_Font.constprop.2+0xc88>
 8005566:	2310      	movs	r3, #16
 8005568:	f8c8 3010 	str.w	r3, [r8, #16]
 800556c:	e4ce      	b.n	8004f0c <LCD_Font.constprop.2+0xc78>
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e4c3      	b.n	8004efc <LCD_Font.constprop.2+0xc68>
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e4b9      	b.n	8004eee <LCD_Font.constprop.2+0xc5a>
 800557a:	2320      	movs	r3, #32
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	e4af      	b.n	8004ee0 <LCD_Font.constprop.2+0xc4c>
 8005580:	2310      	movs	r3, #16
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	e4a5      	b.n	8004ed2 <LCD_Font.constprop.2+0xc3e>
 8005586:	2308      	movs	r3, #8
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e49b      	b.n	8004ec4 <LCD_Font.constprop.2+0xc30>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800558c:	6139      	str	r1, [r7, #16]
 800558e:	e492      	b.n	8004eb6 <LCD_Font.constprop.2+0xc22>
			cursor_x += glyph.xAdvance * size;
 8005590:	b2a3      	uxth	r3, r4
 8005592:	9315      	str	r3, [sp, #84]	; 0x54
 8005594:	f7ff bb2d 	b.w	8004bf2 <LCD_Font.constprop.2+0x95e>

08005598 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800559c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055a0:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055a2:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055a4:	4616      	mov	r6, r2
 80055a6:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 80055a8:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055aa:	f000 f8b9 	bl	8005720 <strlen>
 80055ae:	b3a0      	cbz	r0, 800561a <LCD_Font.constprop.3+0x82>
 80055b0:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80055b2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055b4:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055b6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005620 <LCD_Font.constprop.3+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <LCD_Font.constprop.3+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055bc:	f10d 0b08 	add.w	fp, sp, #8
 80055c0:	e01c      	b.n	80055fc <LCD_Font.constprop.3+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 80055c2:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055c6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80055ca:	d812      	bhi.n	80055f2 <LCD_Font.constprop.3+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055cc:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055d0:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055d4:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055d6:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055da:	4638      	mov	r0, r7
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fe fd29 	bl	8004034 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80055e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e6:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 80055e8:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ea:	f000 f899 	bl	8005720 <strlen>
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <LCD_Font.constprop.3+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80055f0:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055f2:	3401      	adds	r4, #1
 80055f4:	b2a4      	uxth	r4, r4
 80055f6:	4284      	cmp	r4, r0
 80055f8:	4622      	mov	r2, r4
 80055fa:	d20e      	bcs.n	800561a <LCD_Font.constprop.3+0x82>
		char c = text[text_pos];
 80055fc:	5cb1      	ldrb	r1, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80055fe:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 8005602:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005604:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8005608:	d1db      	bne.n	80055c2 <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800560a:	3401      	adds	r4, #1
 800560c:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800560e:	352b      	adds	r5, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005610:	4284      	cmp	r4, r0
			cursor_x = x;
 8005612:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005614:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005616:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005618:	d3f0      	bcc.n	80055fc <LCD_Font.constprop.3+0x64>
}
 800561a:	b005      	add	sp, #20
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	0800cd58 	.word	0x0800cd58
 8005624:	0801c2b0 	.word	0x0801c2b0

08005628 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005628:	e7fe      	b.n	8005628 <NMI_Handler>
 800562a:	bf00      	nop

0800562c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800562c:	e7fe      	b.n	800562c <HardFault_Handler>
 800562e:	bf00      	nop

08005630 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005630:	e7fe      	b.n	8005630 <MemManage_Handler>
 8005632:	bf00      	nop

08005634 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005634:	e7fe      	b.n	8005634 <BusFault_Handler>
 8005636:	bf00      	nop

08005638 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005638:	e7fe      	b.n	8005638 <UsageFault_Handler>
 800563a:	bf00      	nop

0800563c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <DebugMon_Handler>:
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <PendSV_Handler>:
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005648:	4a02      	ldr	r2, [pc, #8]	; (8005654 <SysTick_Handler+0xc>)
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000200 	.word	0x20000200

08005658 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005658:	2001      	movs	r0, #1
 800565a:	4770      	bx	lr

0800565c <_kill>:

int _kill(int pid, int sig)
{
 800565c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800565e:	f002 fe8f 	bl	8008380 <__errno>
 8005662:	2216      	movs	r2, #22
 8005664:	4603      	mov	r3, r0
	return -1;
}
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800566a:	601a      	str	r2, [r3, #0]
}
 800566c:	bd08      	pop	{r3, pc}
 800566e:	bf00      	nop

08005670 <_exit>:

void _exit (int status)
{
 8005670:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005672:	f002 fe85 	bl	8008380 <__errno>
 8005676:	2316      	movs	r3, #22
 8005678:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800567a:	e7fe      	b.n	800567a <_exit+0xa>

0800567c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800567c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800567e:	1e16      	subs	r6, r2, #0
 8005680:	dd07      	ble.n	8005692 <_read+0x16>
 8005682:	460c      	mov	r4, r1
 8005684:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005686:	f3af 8000 	nop.w
 800568a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800568e:	42a5      	cmp	r5, r4
 8005690:	d1f9      	bne.n	8005686 <_read+0xa>
	}

return len;
}
 8005692:	4630      	mov	r0, r6
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	bf00      	nop

08005698 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005698:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800569a:	1e16      	subs	r6, r2, #0
 800569c:	dd07      	ble.n	80056ae <_write+0x16>
 800569e:	460c      	mov	r4, r1
 80056a0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80056a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80056a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056aa:	42ac      	cmp	r4, r5
 80056ac:	d1f9      	bne.n	80056a2 <_write+0xa>
	}
	return len;
}
 80056ae:	4630      	mov	r0, r6
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	bf00      	nop

080056b4 <_close>:

int _close(int file)
{
	return -1;
}
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop

080056bc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80056bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80056c0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80056c2:	604b      	str	r3, [r1, #4]
}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop

080056c8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80056c8:	2001      	movs	r0, #1
 80056ca:	4770      	bx	lr

080056cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr

080056d0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056d0:	490e      	ldr	r1, [pc, #56]	; (800570c <_sbrk+0x3c>)
{
 80056d2:	4603      	mov	r3, r0
 80056d4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056d6:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <_sbrk+0x40>)
 80056d8:	4c0e      	ldr	r4, [pc, #56]	; (8005714 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 80056da:	f8d1 04c4 	ldr.w	r0, [r1, #1220]	; 0x4c4
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056de:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80056e0:	b128      	cbz	r0, 80056ee <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056e2:	4403      	add	r3, r0
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d809      	bhi.n	80056fc <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80056e8:	f8c1 34c4 	str.w	r3, [r1, #1220]	; 0x4c4

  return (void *)prev_heap_end;
}
 80056ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80056ee:	4c0a      	ldr	r4, [pc, #40]	; (8005718 <_sbrk+0x48>)
 80056f0:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80056f2:	4403      	add	r3, r0
 80056f4:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80056f6:	f8c1 44c4 	str.w	r4, [r1, #1220]	; 0x4c4
  if (__sbrk_heap_end + incr > max_heap)
 80056fa:	d9f5      	bls.n	80056e8 <_sbrk+0x18>
    errno = ENOMEM;
 80056fc:	f002 fe40 	bl	8008380 <__errno>
 8005700:	220c      	movs	r2, #12
 8005702:	4603      	mov	r3, r0
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bd10      	pop	{r4, pc}
 800570c:	20000200 	.word	0x20000200
 8005710:	20005000 	.word	0x20005000
 8005714:	00000400 	.word	0x00000400
 8005718:	200006d8 	.word	0x200006d8

0800571c <SystemInit>:
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop

08005720 <strlen>:
 8005720:	4603      	mov	r3, r0
 8005722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005726:	2a00      	cmp	r2, #0
 8005728:	d1fb      	bne.n	8005722 <strlen+0x2>
 800572a:	1a18      	subs	r0, r3, r0
 800572c:	3801      	subs	r0, #1
 800572e:	4770      	bx	lr

08005730 <__aeabi_drsub>:
 8005730:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005734:	e002      	b.n	800573c <__adddf3>
 8005736:	bf00      	nop

08005738 <__aeabi_dsub>:
 8005738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800573c <__adddf3>:
 800573c:	b530      	push	{r4, r5, lr}
 800573e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005742:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005746:	ea94 0f05 	teq	r4, r5
 800574a:	bf08      	it	eq
 800574c:	ea90 0f02 	teqeq	r0, r2
 8005750:	bf1f      	itttt	ne
 8005752:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005756:	ea55 0c02 	orrsne.w	ip, r5, r2
 800575a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800575e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005762:	f000 80e2 	beq.w	800592a <__adddf3+0x1ee>
 8005766:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800576a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800576e:	bfb8      	it	lt
 8005770:	426d      	neglt	r5, r5
 8005772:	dd0c      	ble.n	800578e <__adddf3+0x52>
 8005774:	442c      	add	r4, r5
 8005776:	ea80 0202 	eor.w	r2, r0, r2
 800577a:	ea81 0303 	eor.w	r3, r1, r3
 800577e:	ea82 0000 	eor.w	r0, r2, r0
 8005782:	ea83 0101 	eor.w	r1, r3, r1
 8005786:	ea80 0202 	eor.w	r2, r0, r2
 800578a:	ea81 0303 	eor.w	r3, r1, r3
 800578e:	2d36      	cmp	r5, #54	; 0x36
 8005790:	bf88      	it	hi
 8005792:	bd30      	pophi	{r4, r5, pc}
 8005794:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005798:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800579c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80057a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80057a4:	d002      	beq.n	80057ac <__adddf3+0x70>
 80057a6:	4240      	negs	r0, r0
 80057a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80057ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80057b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80057b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80057b8:	d002      	beq.n	80057c0 <__adddf3+0x84>
 80057ba:	4252      	negs	r2, r2
 80057bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80057c0:	ea94 0f05 	teq	r4, r5
 80057c4:	f000 80a7 	beq.w	8005916 <__adddf3+0x1da>
 80057c8:	f1a4 0401 	sub.w	r4, r4, #1
 80057cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80057d0:	db0d      	blt.n	80057ee <__adddf3+0xb2>
 80057d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80057d6:	fa22 f205 	lsr.w	r2, r2, r5
 80057da:	1880      	adds	r0, r0, r2
 80057dc:	f141 0100 	adc.w	r1, r1, #0
 80057e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80057e4:	1880      	adds	r0, r0, r2
 80057e6:	fa43 f305 	asr.w	r3, r3, r5
 80057ea:	4159      	adcs	r1, r3
 80057ec:	e00e      	b.n	800580c <__adddf3+0xd0>
 80057ee:	f1a5 0520 	sub.w	r5, r5, #32
 80057f2:	f10e 0e20 	add.w	lr, lr, #32
 80057f6:	2a01      	cmp	r2, #1
 80057f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80057fc:	bf28      	it	cs
 80057fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005802:	fa43 f305 	asr.w	r3, r3, r5
 8005806:	18c0      	adds	r0, r0, r3
 8005808:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800580c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005810:	d507      	bpl.n	8005822 <__adddf3+0xe6>
 8005812:	f04f 0e00 	mov.w	lr, #0
 8005816:	f1dc 0c00 	rsbs	ip, ip, #0
 800581a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800581e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005826:	d31b      	bcc.n	8005860 <__adddf3+0x124>
 8005828:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800582c:	d30c      	bcc.n	8005848 <__adddf3+0x10c>
 800582e:	0849      	lsrs	r1, r1, #1
 8005830:	ea5f 0030 	movs.w	r0, r0, rrx
 8005834:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005838:	f104 0401 	add.w	r4, r4, #1
 800583c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005840:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005844:	f080 809a 	bcs.w	800597c <__adddf3+0x240>
 8005848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800584c:	bf08      	it	eq
 800584e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005852:	f150 0000 	adcs.w	r0, r0, #0
 8005856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800585a:	ea41 0105 	orr.w	r1, r1, r5
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005864:	4140      	adcs	r0, r0
 8005866:	eb41 0101 	adc.w	r1, r1, r1
 800586a:	3c01      	subs	r4, #1
 800586c:	bf28      	it	cs
 800586e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005872:	d2e9      	bcs.n	8005848 <__adddf3+0x10c>
 8005874:	f091 0f00 	teq	r1, #0
 8005878:	bf04      	itt	eq
 800587a:	4601      	moveq	r1, r0
 800587c:	2000      	moveq	r0, #0
 800587e:	fab1 f381 	clz	r3, r1
 8005882:	bf08      	it	eq
 8005884:	3320      	addeq	r3, #32
 8005886:	f1a3 030b 	sub.w	r3, r3, #11
 800588a:	f1b3 0220 	subs.w	r2, r3, #32
 800588e:	da0c      	bge.n	80058aa <__adddf3+0x16e>
 8005890:	320c      	adds	r2, #12
 8005892:	dd08      	ble.n	80058a6 <__adddf3+0x16a>
 8005894:	f102 0c14 	add.w	ip, r2, #20
 8005898:	f1c2 020c 	rsb	r2, r2, #12
 800589c:	fa01 f00c 	lsl.w	r0, r1, ip
 80058a0:	fa21 f102 	lsr.w	r1, r1, r2
 80058a4:	e00c      	b.n	80058c0 <__adddf3+0x184>
 80058a6:	f102 0214 	add.w	r2, r2, #20
 80058aa:	bfd8      	it	le
 80058ac:	f1c2 0c20 	rsble	ip, r2, #32
 80058b0:	fa01 f102 	lsl.w	r1, r1, r2
 80058b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80058b8:	bfdc      	itt	le
 80058ba:	ea41 010c 	orrle.w	r1, r1, ip
 80058be:	4090      	lslle	r0, r2
 80058c0:	1ae4      	subs	r4, r4, r3
 80058c2:	bfa2      	ittt	ge
 80058c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80058c8:	4329      	orrge	r1, r5
 80058ca:	bd30      	popge	{r4, r5, pc}
 80058cc:	ea6f 0404 	mvn.w	r4, r4
 80058d0:	3c1f      	subs	r4, #31
 80058d2:	da1c      	bge.n	800590e <__adddf3+0x1d2>
 80058d4:	340c      	adds	r4, #12
 80058d6:	dc0e      	bgt.n	80058f6 <__adddf3+0x1ba>
 80058d8:	f104 0414 	add.w	r4, r4, #20
 80058dc:	f1c4 0220 	rsb	r2, r4, #32
 80058e0:	fa20 f004 	lsr.w	r0, r0, r4
 80058e4:	fa01 f302 	lsl.w	r3, r1, r2
 80058e8:	ea40 0003 	orr.w	r0, r0, r3
 80058ec:	fa21 f304 	lsr.w	r3, r1, r4
 80058f0:	ea45 0103 	orr.w	r1, r5, r3
 80058f4:	bd30      	pop	{r4, r5, pc}
 80058f6:	f1c4 040c 	rsb	r4, r4, #12
 80058fa:	f1c4 0220 	rsb	r2, r4, #32
 80058fe:	fa20 f002 	lsr.w	r0, r0, r2
 8005902:	fa01 f304 	lsl.w	r3, r1, r4
 8005906:	ea40 0003 	orr.w	r0, r0, r3
 800590a:	4629      	mov	r1, r5
 800590c:	bd30      	pop	{r4, r5, pc}
 800590e:	fa21 f004 	lsr.w	r0, r1, r4
 8005912:	4629      	mov	r1, r5
 8005914:	bd30      	pop	{r4, r5, pc}
 8005916:	f094 0f00 	teq	r4, #0
 800591a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800591e:	bf06      	itte	eq
 8005920:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005924:	3401      	addeq	r4, #1
 8005926:	3d01      	subne	r5, #1
 8005928:	e74e      	b.n	80057c8 <__adddf3+0x8c>
 800592a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800592e:	bf18      	it	ne
 8005930:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005934:	d029      	beq.n	800598a <__adddf3+0x24e>
 8005936:	ea94 0f05 	teq	r4, r5
 800593a:	bf08      	it	eq
 800593c:	ea90 0f02 	teqeq	r0, r2
 8005940:	d005      	beq.n	800594e <__adddf3+0x212>
 8005942:	ea54 0c00 	orrs.w	ip, r4, r0
 8005946:	bf04      	itt	eq
 8005948:	4619      	moveq	r1, r3
 800594a:	4610      	moveq	r0, r2
 800594c:	bd30      	pop	{r4, r5, pc}
 800594e:	ea91 0f03 	teq	r1, r3
 8005952:	bf1e      	ittt	ne
 8005954:	2100      	movne	r1, #0
 8005956:	2000      	movne	r0, #0
 8005958:	bd30      	popne	{r4, r5, pc}
 800595a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800595e:	d105      	bne.n	800596c <__adddf3+0x230>
 8005960:	0040      	lsls	r0, r0, #1
 8005962:	4149      	adcs	r1, r1
 8005964:	bf28      	it	cs
 8005966:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800596a:	bd30      	pop	{r4, r5, pc}
 800596c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005970:	bf3c      	itt	cc
 8005972:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005976:	bd30      	popcc	{r4, r5, pc}
 8005978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800597c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005980:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005984:	f04f 0000 	mov.w	r0, #0
 8005988:	bd30      	pop	{r4, r5, pc}
 800598a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800598e:	bf1a      	itte	ne
 8005990:	4619      	movne	r1, r3
 8005992:	4610      	movne	r0, r2
 8005994:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005998:	bf1c      	itt	ne
 800599a:	460b      	movne	r3, r1
 800599c:	4602      	movne	r2, r0
 800599e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80059a2:	bf06      	itte	eq
 80059a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80059a8:	ea91 0f03 	teqeq	r1, r3
 80059ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80059b0:	bd30      	pop	{r4, r5, pc}
 80059b2:	bf00      	nop

080059b4 <__aeabi_ui2d>:
 80059b4:	f090 0f00 	teq	r0, #0
 80059b8:	bf04      	itt	eq
 80059ba:	2100      	moveq	r1, #0
 80059bc:	4770      	bxeq	lr
 80059be:	b530      	push	{r4, r5, lr}
 80059c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80059c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80059c8:	f04f 0500 	mov.w	r5, #0
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	e750      	b.n	8005874 <__adddf3+0x138>
 80059d2:	bf00      	nop

080059d4 <__aeabi_i2d>:
 80059d4:	f090 0f00 	teq	r0, #0
 80059d8:	bf04      	itt	eq
 80059da:	2100      	moveq	r1, #0
 80059dc:	4770      	bxeq	lr
 80059de:	b530      	push	{r4, r5, lr}
 80059e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80059e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80059e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80059ec:	bf48      	it	mi
 80059ee:	4240      	negmi	r0, r0
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	e73e      	b.n	8005874 <__adddf3+0x138>
 80059f6:	bf00      	nop

080059f8 <__aeabi_f2d>:
 80059f8:	0042      	lsls	r2, r0, #1
 80059fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80059fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8005a02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005a06:	bf1f      	itttt	ne
 8005a08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005a10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005a14:	4770      	bxne	lr
 8005a16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005a1a:	bf08      	it	eq
 8005a1c:	4770      	bxeq	lr
 8005a1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005a22:	bf04      	itt	eq
 8005a24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005a28:	4770      	bxeq	lr
 8005a2a:	b530      	push	{r4, r5, lr}
 8005a2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005a34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005a38:	e71c      	b.n	8005874 <__adddf3+0x138>
 8005a3a:	bf00      	nop

08005a3c <__aeabi_ul2d>:
 8005a3c:	ea50 0201 	orrs.w	r2, r0, r1
 8005a40:	bf08      	it	eq
 8005a42:	4770      	bxeq	lr
 8005a44:	b530      	push	{r4, r5, lr}
 8005a46:	f04f 0500 	mov.w	r5, #0
 8005a4a:	e00a      	b.n	8005a62 <__aeabi_l2d+0x16>

08005a4c <__aeabi_l2d>:
 8005a4c:	ea50 0201 	orrs.w	r2, r0, r1
 8005a50:	bf08      	it	eq
 8005a52:	4770      	bxeq	lr
 8005a54:	b530      	push	{r4, r5, lr}
 8005a56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005a5a:	d502      	bpl.n	8005a62 <__aeabi_l2d+0x16>
 8005a5c:	4240      	negs	r0, r0
 8005a5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005a62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005a66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005a6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005a6e:	f43f aed8 	beq.w	8005822 <__adddf3+0xe6>
 8005a72:	f04f 0203 	mov.w	r2, #3
 8005a76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005a7a:	bf18      	it	ne
 8005a7c:	3203      	addne	r2, #3
 8005a7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005a82:	bf18      	it	ne
 8005a84:	3203      	addne	r2, #3
 8005a86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005a8a:	f1c2 0320 	rsb	r3, r2, #32
 8005a8e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005a92:	fa20 f002 	lsr.w	r0, r0, r2
 8005a96:	fa01 fe03 	lsl.w	lr, r1, r3
 8005a9a:	ea40 000e 	orr.w	r0, r0, lr
 8005a9e:	fa21 f102 	lsr.w	r1, r1, r2
 8005aa2:	4414      	add	r4, r2
 8005aa4:	e6bd      	b.n	8005822 <__adddf3+0xe6>
 8005aa6:	bf00      	nop

08005aa8 <__aeabi_dmul>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005aae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005ab2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005ab6:	bf1d      	ittte	ne
 8005ab8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005abc:	ea94 0f0c 	teqne	r4, ip
 8005ac0:	ea95 0f0c 	teqne	r5, ip
 8005ac4:	f000 f8de 	bleq	8005c84 <__aeabi_dmul+0x1dc>
 8005ac8:	442c      	add	r4, r5
 8005aca:	ea81 0603 	eor.w	r6, r1, r3
 8005ace:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005ad2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005ad6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005ada:	bf18      	it	ne
 8005adc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005ae0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae8:	d038      	beq.n	8005b5c <__aeabi_dmul+0xb4>
 8005aea:	fba0 ce02 	umull	ip, lr, r0, r2
 8005aee:	f04f 0500 	mov.w	r5, #0
 8005af2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005af6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005afa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005afe:	f04f 0600 	mov.w	r6, #0
 8005b02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005b06:	f09c 0f00 	teq	ip, #0
 8005b0a:	bf18      	it	ne
 8005b0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005b10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005b14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005b18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005b1c:	d204      	bcs.n	8005b28 <__aeabi_dmul+0x80>
 8005b1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005b22:	416d      	adcs	r5, r5
 8005b24:	eb46 0606 	adc.w	r6, r6, r6
 8005b28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005b2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005b30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005b34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005b38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005b3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005b40:	bf88      	it	hi
 8005b42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005b46:	d81e      	bhi.n	8005b86 <__aeabi_dmul+0xde>
 8005b48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005b4c:	bf08      	it	eq
 8005b4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005b52:	f150 0000 	adcs.w	r0, r0, #0
 8005b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005b60:	ea46 0101 	orr.w	r1, r6, r1
 8005b64:	ea40 0002 	orr.w	r0, r0, r2
 8005b68:	ea81 0103 	eor.w	r1, r1, r3
 8005b6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005b70:	bfc2      	ittt	gt
 8005b72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005b76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005b7a:	bd70      	popgt	{r4, r5, r6, pc}
 8005b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b80:	f04f 0e00 	mov.w	lr, #0
 8005b84:	3c01      	subs	r4, #1
 8005b86:	f300 80ab 	bgt.w	8005ce0 <__aeabi_dmul+0x238>
 8005b8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005b8e:	bfde      	ittt	le
 8005b90:	2000      	movle	r0, #0
 8005b92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005b96:	bd70      	pople	{r4, r5, r6, pc}
 8005b98:	f1c4 0400 	rsb	r4, r4, #0
 8005b9c:	3c20      	subs	r4, #32
 8005b9e:	da35      	bge.n	8005c0c <__aeabi_dmul+0x164>
 8005ba0:	340c      	adds	r4, #12
 8005ba2:	dc1b      	bgt.n	8005bdc <__aeabi_dmul+0x134>
 8005ba4:	f104 0414 	add.w	r4, r4, #20
 8005ba8:	f1c4 0520 	rsb	r5, r4, #32
 8005bac:	fa00 f305 	lsl.w	r3, r0, r5
 8005bb0:	fa20 f004 	lsr.w	r0, r0, r4
 8005bb4:	fa01 f205 	lsl.w	r2, r1, r5
 8005bb8:	ea40 0002 	orr.w	r0, r0, r2
 8005bbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005bc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005bc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005bc8:	fa21 f604 	lsr.w	r6, r1, r4
 8005bcc:	eb42 0106 	adc.w	r1, r2, r6
 8005bd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005bd4:	bf08      	it	eq
 8005bd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f1c4 040c 	rsb	r4, r4, #12
 8005be0:	f1c4 0520 	rsb	r5, r4, #32
 8005be4:	fa00 f304 	lsl.w	r3, r0, r4
 8005be8:	fa20 f005 	lsr.w	r0, r0, r5
 8005bec:	fa01 f204 	lsl.w	r2, r1, r4
 8005bf0:	ea40 0002 	orr.w	r0, r0, r2
 8005bf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005bf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005bfc:	f141 0100 	adc.w	r1, r1, #0
 8005c00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005c04:	bf08      	it	eq
 8005c06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f1c4 0520 	rsb	r5, r4, #32
 8005c10:	fa00 f205 	lsl.w	r2, r0, r5
 8005c14:	ea4e 0e02 	orr.w	lr, lr, r2
 8005c18:	fa20 f304 	lsr.w	r3, r0, r4
 8005c1c:	fa01 f205 	lsl.w	r2, r1, r5
 8005c20:	ea43 0302 	orr.w	r3, r3, r2
 8005c24:	fa21 f004 	lsr.w	r0, r1, r4
 8005c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005c2c:	fa21 f204 	lsr.w	r2, r1, r4
 8005c30:	ea20 0002 	bic.w	r0, r0, r2
 8005c34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005c3c:	bf08      	it	eq
 8005c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f094 0f00 	teq	r4, #0
 8005c48:	d10f      	bne.n	8005c6a <__aeabi_dmul+0x1c2>
 8005c4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005c4e:	0040      	lsls	r0, r0, #1
 8005c50:	eb41 0101 	adc.w	r1, r1, r1
 8005c54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005c58:	bf08      	it	eq
 8005c5a:	3c01      	subeq	r4, #1
 8005c5c:	d0f7      	beq.n	8005c4e <__aeabi_dmul+0x1a6>
 8005c5e:	ea41 0106 	orr.w	r1, r1, r6
 8005c62:	f095 0f00 	teq	r5, #0
 8005c66:	bf18      	it	ne
 8005c68:	4770      	bxne	lr
 8005c6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005c6e:	0052      	lsls	r2, r2, #1
 8005c70:	eb43 0303 	adc.w	r3, r3, r3
 8005c74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005c78:	bf08      	it	eq
 8005c7a:	3d01      	subeq	r5, #1
 8005c7c:	d0f7      	beq.n	8005c6e <__aeabi_dmul+0x1c6>
 8005c7e:	ea43 0306 	orr.w	r3, r3, r6
 8005c82:	4770      	bx	lr
 8005c84:	ea94 0f0c 	teq	r4, ip
 8005c88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005c8c:	bf18      	it	ne
 8005c8e:	ea95 0f0c 	teqne	r5, ip
 8005c92:	d00c      	beq.n	8005cae <__aeabi_dmul+0x206>
 8005c94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005c98:	bf18      	it	ne
 8005c9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005c9e:	d1d1      	bne.n	8005c44 <__aeabi_dmul+0x19c>
 8005ca0:	ea81 0103 	eor.w	r1, r1, r3
 8005ca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ca8:	f04f 0000 	mov.w	r0, #0
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005cb2:	bf06      	itte	eq
 8005cb4:	4610      	moveq	r0, r2
 8005cb6:	4619      	moveq	r1, r3
 8005cb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005cbc:	d019      	beq.n	8005cf2 <__aeabi_dmul+0x24a>
 8005cbe:	ea94 0f0c 	teq	r4, ip
 8005cc2:	d102      	bne.n	8005cca <__aeabi_dmul+0x222>
 8005cc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005cc8:	d113      	bne.n	8005cf2 <__aeabi_dmul+0x24a>
 8005cca:	ea95 0f0c 	teq	r5, ip
 8005cce:	d105      	bne.n	8005cdc <__aeabi_dmul+0x234>
 8005cd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005cd4:	bf1c      	itt	ne
 8005cd6:	4610      	movne	r0, r2
 8005cd8:	4619      	movne	r1, r3
 8005cda:	d10a      	bne.n	8005cf2 <__aeabi_dmul+0x24a>
 8005cdc:	ea81 0103 	eor.w	r1, r1, r3
 8005ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ce4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005ce8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cec:	f04f 0000 	mov.w	r0, #0
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005cf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}

08005cfc <__aeabi_ddiv>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005d06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005d0a:	bf1d      	ittte	ne
 8005d0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005d10:	ea94 0f0c 	teqne	r4, ip
 8005d14:	ea95 0f0c 	teqne	r5, ip
 8005d18:	f000 f8a7 	bleq	8005e6a <__aeabi_ddiv+0x16e>
 8005d1c:	eba4 0405 	sub.w	r4, r4, r5
 8005d20:	ea81 0e03 	eor.w	lr, r1, r3
 8005d24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005d28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005d2c:	f000 8088 	beq.w	8005e40 <__aeabi_ddiv+0x144>
 8005d30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005d34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005d38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005d3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005d40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005d44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005d48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005d4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005d50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005d54:	429d      	cmp	r5, r3
 8005d56:	bf08      	it	eq
 8005d58:	4296      	cmpeq	r6, r2
 8005d5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005d5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005d62:	d202      	bcs.n	8005d6a <__aeabi_ddiv+0x6e>
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	ea4f 0232 	mov.w	r2, r2, rrx
 8005d6a:	1ab6      	subs	r6, r6, r2
 8005d6c:	eb65 0503 	sbc.w	r5, r5, r3
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	ea4f 0232 	mov.w	r2, r2, rrx
 8005d76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005d7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005d7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005d82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005d86:	bf22      	ittt	cs
 8005d88:	1ab6      	subcs	r6, r6, r2
 8005d8a:	4675      	movcs	r5, lr
 8005d8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	ea4f 0232 	mov.w	r2, r2, rrx
 8005d96:	ebb6 0e02 	subs.w	lr, r6, r2
 8005d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005d9e:	bf22      	ittt	cs
 8005da0:	1ab6      	subcs	r6, r6, r2
 8005da2:	4675      	movcs	r5, lr
 8005da4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	ea4f 0232 	mov.w	r2, r2, rrx
 8005dae:	ebb6 0e02 	subs.w	lr, r6, r2
 8005db2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005db6:	bf22      	ittt	cs
 8005db8:	1ab6      	subcs	r6, r6, r2
 8005dba:	4675      	movcs	r5, lr
 8005dbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005dc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005dca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005dce:	bf22      	ittt	cs
 8005dd0:	1ab6      	subcs	r6, r6, r2
 8005dd2:	4675      	movcs	r5, lr
 8005dd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005dd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8005ddc:	d018      	beq.n	8005e10 <__aeabi_ddiv+0x114>
 8005dde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005de2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005de6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005dea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005dee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005df2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005df6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005dfa:	d1c0      	bne.n	8005d7e <__aeabi_ddiv+0x82>
 8005dfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005e00:	d10b      	bne.n	8005e1a <__aeabi_ddiv+0x11e>
 8005e02:	ea41 0100 	orr.w	r1, r1, r0
 8005e06:	f04f 0000 	mov.w	r0, #0
 8005e0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005e0e:	e7b6      	b.n	8005d7e <__aeabi_ddiv+0x82>
 8005e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005e14:	bf04      	itt	eq
 8005e16:	4301      	orreq	r1, r0
 8005e18:	2000      	moveq	r0, #0
 8005e1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005e1e:	bf88      	it	hi
 8005e20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005e24:	f63f aeaf 	bhi.w	8005b86 <__aeabi_dmul+0xde>
 8005e28:	ebb5 0c03 	subs.w	ip, r5, r3
 8005e2c:	bf04      	itt	eq
 8005e2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005e32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005e36:	f150 0000 	adcs.w	r0, r0, #0
 8005e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005e44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005e48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005e4c:	bfc2      	ittt	gt
 8005e4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005e52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005e56:	bd70      	popgt	{r4, r5, r6, pc}
 8005e58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005e5c:	f04f 0e00 	mov.w	lr, #0
 8005e60:	3c01      	subs	r4, #1
 8005e62:	e690      	b.n	8005b86 <__aeabi_dmul+0xde>
 8005e64:	ea45 0e06 	orr.w	lr, r5, r6
 8005e68:	e68d      	b.n	8005b86 <__aeabi_dmul+0xde>
 8005e6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005e6e:	ea94 0f0c 	teq	r4, ip
 8005e72:	bf08      	it	eq
 8005e74:	ea95 0f0c 	teqeq	r5, ip
 8005e78:	f43f af3b 	beq.w	8005cf2 <__aeabi_dmul+0x24a>
 8005e7c:	ea94 0f0c 	teq	r4, ip
 8005e80:	d10a      	bne.n	8005e98 <__aeabi_ddiv+0x19c>
 8005e82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005e86:	f47f af34 	bne.w	8005cf2 <__aeabi_dmul+0x24a>
 8005e8a:	ea95 0f0c 	teq	r5, ip
 8005e8e:	f47f af25 	bne.w	8005cdc <__aeabi_dmul+0x234>
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	e72c      	b.n	8005cf2 <__aeabi_dmul+0x24a>
 8005e98:	ea95 0f0c 	teq	r5, ip
 8005e9c:	d106      	bne.n	8005eac <__aeabi_ddiv+0x1b0>
 8005e9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005ea2:	f43f aefd 	beq.w	8005ca0 <__aeabi_dmul+0x1f8>
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	e722      	b.n	8005cf2 <__aeabi_dmul+0x24a>
 8005eac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005eb0:	bf18      	it	ne
 8005eb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005eb6:	f47f aec5 	bne.w	8005c44 <__aeabi_dmul+0x19c>
 8005eba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005ebe:	f47f af0d 	bne.w	8005cdc <__aeabi_dmul+0x234>
 8005ec2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005ec6:	f47f aeeb 	bne.w	8005ca0 <__aeabi_dmul+0x1f8>
 8005eca:	e712      	b.n	8005cf2 <__aeabi_dmul+0x24a>

08005ecc <__gedf2>:
 8005ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8005ed0:	e006      	b.n	8005ee0 <__cmpdf2+0x4>
 8005ed2:	bf00      	nop

08005ed4 <__ledf2>:
 8005ed4:	f04f 0c01 	mov.w	ip, #1
 8005ed8:	e002      	b.n	8005ee0 <__cmpdf2+0x4>
 8005eda:	bf00      	nop

08005edc <__cmpdf2>:
 8005edc:	f04f 0c01 	mov.w	ip, #1
 8005ee0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005ef0:	bf18      	it	ne
 8005ef2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005ef6:	d01b      	beq.n	8005f30 <__cmpdf2+0x54>
 8005ef8:	b001      	add	sp, #4
 8005efa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005efe:	bf0c      	ite	eq
 8005f00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005f04:	ea91 0f03 	teqne	r1, r3
 8005f08:	bf02      	ittt	eq
 8005f0a:	ea90 0f02 	teqeq	r0, r2
 8005f0e:	2000      	moveq	r0, #0
 8005f10:	4770      	bxeq	lr
 8005f12:	f110 0f00 	cmn.w	r0, #0
 8005f16:	ea91 0f03 	teq	r1, r3
 8005f1a:	bf58      	it	pl
 8005f1c:	4299      	cmppl	r1, r3
 8005f1e:	bf08      	it	eq
 8005f20:	4290      	cmpeq	r0, r2
 8005f22:	bf2c      	ite	cs
 8005f24:	17d8      	asrcs	r0, r3, #31
 8005f26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005f2a:	f040 0001 	orr.w	r0, r0, #1
 8005f2e:	4770      	bx	lr
 8005f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005f38:	d102      	bne.n	8005f40 <__cmpdf2+0x64>
 8005f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005f3e:	d107      	bne.n	8005f50 <__cmpdf2+0x74>
 8005f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005f48:	d1d6      	bne.n	8005ef8 <__cmpdf2+0x1c>
 8005f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005f4e:	d0d3      	beq.n	8005ef8 <__cmpdf2+0x1c>
 8005f50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <__aeabi_cdrcmple>:
 8005f58:	4684      	mov	ip, r0
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4662      	mov	r2, ip
 8005f5e:	468c      	mov	ip, r1
 8005f60:	4619      	mov	r1, r3
 8005f62:	4663      	mov	r3, ip
 8005f64:	e000      	b.n	8005f68 <__aeabi_cdcmpeq>
 8005f66:	bf00      	nop

08005f68 <__aeabi_cdcmpeq>:
 8005f68:	b501      	push	{r0, lr}
 8005f6a:	f7ff ffb7 	bl	8005edc <__cmpdf2>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	bf48      	it	mi
 8005f72:	f110 0f00 	cmnmi.w	r0, #0
 8005f76:	bd01      	pop	{r0, pc}

08005f78 <__aeabi_dcmpeq>:
 8005f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005f7c:	f7ff fff4 	bl	8005f68 <__aeabi_cdcmpeq>
 8005f80:	bf0c      	ite	eq
 8005f82:	2001      	moveq	r0, #1
 8005f84:	2000      	movne	r0, #0
 8005f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f8a:	bf00      	nop

08005f8c <__aeabi_dcmplt>:
 8005f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005f90:	f7ff ffea 	bl	8005f68 <__aeabi_cdcmpeq>
 8005f94:	bf34      	ite	cc
 8005f96:	2001      	movcc	r0, #1
 8005f98:	2000      	movcs	r0, #0
 8005f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f9e:	bf00      	nop

08005fa0 <__aeabi_dcmple>:
 8005fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005fa4:	f7ff ffe0 	bl	8005f68 <__aeabi_cdcmpeq>
 8005fa8:	bf94      	ite	ls
 8005faa:	2001      	movls	r0, #1
 8005fac:	2000      	movhi	r0, #0
 8005fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8005fb2:	bf00      	nop

08005fb4 <__aeabi_dcmpge>:
 8005fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005fb8:	f7ff ffce 	bl	8005f58 <__aeabi_cdrcmple>
 8005fbc:	bf94      	ite	ls
 8005fbe:	2001      	movls	r0, #1
 8005fc0:	2000      	movhi	r0, #0
 8005fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005fc6:	bf00      	nop

08005fc8 <__aeabi_dcmpgt>:
 8005fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005fcc:	f7ff ffc4 	bl	8005f58 <__aeabi_cdrcmple>
 8005fd0:	bf34      	ite	cc
 8005fd2:	2001      	movcc	r0, #1
 8005fd4:	2000      	movcs	r0, #0
 8005fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005fda:	bf00      	nop

08005fdc <__aeabi_dcmpun>:
 8005fdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005fe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005fe4:	d102      	bne.n	8005fec <__aeabi_dcmpun+0x10>
 8005fe6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005fea:	d10a      	bne.n	8006002 <__aeabi_dcmpun+0x26>
 8005fec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005ff0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005ff4:	d102      	bne.n	8005ffc <__aeabi_dcmpun+0x20>
 8005ff6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005ffa:	d102      	bne.n	8006002 <__aeabi_dcmpun+0x26>
 8005ffc:	f04f 0000 	mov.w	r0, #0
 8006000:	4770      	bx	lr
 8006002:	f04f 0001 	mov.w	r0, #1
 8006006:	4770      	bx	lr

08006008 <__aeabi_d2iz>:
 8006008:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800600c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006010:	d215      	bcs.n	800603e <__aeabi_d2iz+0x36>
 8006012:	d511      	bpl.n	8006038 <__aeabi_d2iz+0x30>
 8006014:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006018:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800601c:	d912      	bls.n	8006044 <__aeabi_d2iz+0x3c>
 800601e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006026:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800602a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800602e:	fa23 f002 	lsr.w	r0, r3, r2
 8006032:	bf18      	it	ne
 8006034:	4240      	negne	r0, r0
 8006036:	4770      	bx	lr
 8006038:	f04f 0000 	mov.w	r0, #0
 800603c:	4770      	bx	lr
 800603e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006042:	d105      	bne.n	8006050 <__aeabi_d2iz+0x48>
 8006044:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006048:	bf08      	it	eq
 800604a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800604e:	4770      	bx	lr
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <__aeabi_d2uiz>:
 8006058:	004a      	lsls	r2, r1, #1
 800605a:	d211      	bcs.n	8006080 <__aeabi_d2uiz+0x28>
 800605c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006060:	d211      	bcs.n	8006086 <__aeabi_d2uiz+0x2e>
 8006062:	d50d      	bpl.n	8006080 <__aeabi_d2uiz+0x28>
 8006064:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006068:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800606c:	d40e      	bmi.n	800608c <__aeabi_d2uiz+0x34>
 800606e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006076:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800607a:	fa23 f002 	lsr.w	r0, r3, r2
 800607e:	4770      	bx	lr
 8006080:	f04f 0000 	mov.w	r0, #0
 8006084:	4770      	bx	lr
 8006086:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800608a:	d102      	bne.n	8006092 <__aeabi_d2uiz+0x3a>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	4770      	bx	lr
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	4770      	bx	lr

08006098 <__aeabi_d2f>:
 8006098:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800609c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80060a0:	bf24      	itt	cs
 80060a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80060a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80060aa:	d90d      	bls.n	80060c8 <__aeabi_d2f+0x30>
 80060ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80060b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80060b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80060b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80060bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80060c0:	bf08      	it	eq
 80060c2:	f020 0001 	biceq.w	r0, r0, #1
 80060c6:	4770      	bx	lr
 80060c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80060cc:	d121      	bne.n	8006112 <__aeabi_d2f+0x7a>
 80060ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80060d2:	bfbc      	itt	lt
 80060d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80060d8:	4770      	bxlt	lr
 80060da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80060e2:	f1c2 0218 	rsb	r2, r2, #24
 80060e6:	f1c2 0c20 	rsb	ip, r2, #32
 80060ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80060ee:	fa20 f002 	lsr.w	r0, r0, r2
 80060f2:	bf18      	it	ne
 80060f4:	f040 0001 	orrne.w	r0, r0, #1
 80060f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80060fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006100:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006104:	ea40 000c 	orr.w	r0, r0, ip
 8006108:	fa23 f302 	lsr.w	r3, r3, r2
 800610c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006110:	e7cc      	b.n	80060ac <__aeabi_d2f+0x14>
 8006112:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006116:	d107      	bne.n	8006128 <__aeabi_d2f+0x90>
 8006118:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800611c:	bf1e      	ittt	ne
 800611e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006122:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006126:	4770      	bxne	lr
 8006128:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800612c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006130:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop

08006138 <__gesf2>:
 8006138:	f04f 3cff 	mov.w	ip, #4294967295
 800613c:	e006      	b.n	800614c <__cmpsf2+0x4>
 800613e:	bf00      	nop

08006140 <__lesf2>:
 8006140:	f04f 0c01 	mov.w	ip, #1
 8006144:	e002      	b.n	800614c <__cmpsf2+0x4>
 8006146:	bf00      	nop

08006148 <__cmpsf2>:
 8006148:	f04f 0c01 	mov.w	ip, #1
 800614c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006154:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006158:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800615c:	bf18      	it	ne
 800615e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006162:	d011      	beq.n	8006188 <__cmpsf2+0x40>
 8006164:	b001      	add	sp, #4
 8006166:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800616a:	bf18      	it	ne
 800616c:	ea90 0f01 	teqne	r0, r1
 8006170:	bf58      	it	pl
 8006172:	ebb2 0003 	subspl.w	r0, r2, r3
 8006176:	bf88      	it	hi
 8006178:	17c8      	asrhi	r0, r1, #31
 800617a:	bf38      	it	cc
 800617c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8006180:	bf18      	it	ne
 8006182:	f040 0001 	orrne.w	r0, r0, #1
 8006186:	4770      	bx	lr
 8006188:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800618c:	d102      	bne.n	8006194 <__cmpsf2+0x4c>
 800618e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8006192:	d105      	bne.n	80061a0 <__cmpsf2+0x58>
 8006194:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006198:	d1e4      	bne.n	8006164 <__cmpsf2+0x1c>
 800619a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800619e:	d0e1      	beq.n	8006164 <__cmpsf2+0x1c>
 80061a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <__aeabi_cfrcmple>:
 80061a8:	4684      	mov	ip, r0
 80061aa:	4608      	mov	r0, r1
 80061ac:	4661      	mov	r1, ip
 80061ae:	e7ff      	b.n	80061b0 <__aeabi_cfcmpeq>

080061b0 <__aeabi_cfcmpeq>:
 80061b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80061b2:	f7ff ffc9 	bl	8006148 <__cmpsf2>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	bf48      	it	mi
 80061ba:	f110 0f00 	cmnmi.w	r0, #0
 80061be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080061c0 <__aeabi_fcmpeq>:
 80061c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061c4:	f7ff fff4 	bl	80061b0 <__aeabi_cfcmpeq>
 80061c8:	bf0c      	ite	eq
 80061ca:	2001      	moveq	r0, #1
 80061cc:	2000      	movne	r0, #0
 80061ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80061d2:	bf00      	nop

080061d4 <__aeabi_fcmplt>:
 80061d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061d8:	f7ff ffea 	bl	80061b0 <__aeabi_cfcmpeq>
 80061dc:	bf34      	ite	cc
 80061de:	2001      	movcc	r0, #1
 80061e0:	2000      	movcs	r0, #0
 80061e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80061e6:	bf00      	nop

080061e8 <__aeabi_fcmple>:
 80061e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061ec:	f7ff ffe0 	bl	80061b0 <__aeabi_cfcmpeq>
 80061f0:	bf94      	ite	ls
 80061f2:	2001      	movls	r0, #1
 80061f4:	2000      	movhi	r0, #0
 80061f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80061fa:	bf00      	nop

080061fc <__aeabi_fcmpge>:
 80061fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006200:	f7ff ffd2 	bl	80061a8 <__aeabi_cfrcmple>
 8006204:	bf94      	ite	ls
 8006206:	2001      	movls	r0, #1
 8006208:	2000      	movhi	r0, #0
 800620a:	f85d fb08 	ldr.w	pc, [sp], #8
 800620e:	bf00      	nop

08006210 <__aeabi_fcmpgt>:
 8006210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006214:	f7ff ffc8 	bl	80061a8 <__aeabi_cfrcmple>
 8006218:	bf34      	ite	cc
 800621a:	2001      	movcc	r0, #1
 800621c:	2000      	movcs	r0, #0
 800621e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006222:	bf00      	nop

08006224 <__aeabi_d2lz>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4605      	mov	r5, r0
 8006228:	460c      	mov	r4, r1
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	4628      	mov	r0, r5
 8006230:	4621      	mov	r1, r4
 8006232:	f7ff feab 	bl	8005f8c <__aeabi_dcmplt>
 8006236:	b928      	cbnz	r0, 8006244 <__aeabi_d2lz+0x20>
 8006238:	4628      	mov	r0, r5
 800623a:	4621      	mov	r1, r4
 800623c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006240:	f000 b80a 	b.w	8006258 <__aeabi_d2ulz>
 8006244:	4628      	mov	r0, r5
 8006246:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800624a:	f000 f805 	bl	8006258 <__aeabi_d2ulz>
 800624e:	4240      	negs	r0, r0
 8006250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006254:	bd38      	pop	{r3, r4, r5, pc}
 8006256:	bf00      	nop

08006258 <__aeabi_d2ulz>:
 8006258:	b5d0      	push	{r4, r6, r7, lr}
 800625a:	2200      	movs	r2, #0
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <__aeabi_d2ulz+0x34>)
 800625e:	4606      	mov	r6, r0
 8006260:	460f      	mov	r7, r1
 8006262:	f7ff fc21 	bl	8005aa8 <__aeabi_dmul>
 8006266:	f7ff fef7 	bl	8006058 <__aeabi_d2uiz>
 800626a:	4604      	mov	r4, r0
 800626c:	f7ff fba2 	bl	80059b4 <__aeabi_ui2d>
 8006270:	2200      	movs	r2, #0
 8006272:	4b07      	ldr	r3, [pc, #28]	; (8006290 <__aeabi_d2ulz+0x38>)
 8006274:	f7ff fc18 	bl	8005aa8 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7ff fa5a 	bl	8005738 <__aeabi_dsub>
 8006284:	f7ff fee8 	bl	8006058 <__aeabi_d2uiz>
 8006288:	4621      	mov	r1, r4
 800628a:	bdd0      	pop	{r4, r6, r7, pc}
 800628c:	3df00000 	.word	0x3df00000
 8006290:	41f00000 	.word	0x41f00000

08006294 <__aeabi_fmul>:
 8006294:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006298:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800629c:	bf1e      	ittt	ne
 800629e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80062a2:	ea92 0f0c 	teqne	r2, ip
 80062a6:	ea93 0f0c 	teqne	r3, ip
 80062aa:	d06f      	beq.n	800638c <__aeabi_fmul+0xf8>
 80062ac:	441a      	add	r2, r3
 80062ae:	ea80 0c01 	eor.w	ip, r0, r1
 80062b2:	0240      	lsls	r0, r0, #9
 80062b4:	bf18      	it	ne
 80062b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80062ba:	d01e      	beq.n	80062fa <__aeabi_fmul+0x66>
 80062bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80062c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80062c8:	fba0 3101 	umull	r3, r1, r0, r1
 80062cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80062d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80062d4:	bf3e      	ittt	cc
 80062d6:	0049      	lslcc	r1, r1, #1
 80062d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80062dc:	005b      	lslcc	r3, r3, #1
 80062de:	ea40 0001 	orr.w	r0, r0, r1
 80062e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80062e6:	2afd      	cmp	r2, #253	; 0xfd
 80062e8:	d81d      	bhi.n	8006326 <__aeabi_fmul+0x92>
 80062ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80062f2:	bf08      	it	eq
 80062f4:	f020 0001 	biceq.w	r0, r0, #1
 80062f8:	4770      	bx	lr
 80062fa:	f090 0f00 	teq	r0, #0
 80062fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006302:	bf08      	it	eq
 8006304:	0249      	lsleq	r1, r1, #9
 8006306:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800630a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800630e:	3a7f      	subs	r2, #127	; 0x7f
 8006310:	bfc2      	ittt	gt
 8006312:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006316:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800631a:	4770      	bxgt	lr
 800631c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	3a01      	subs	r2, #1
 8006326:	dc5d      	bgt.n	80063e4 <__aeabi_fmul+0x150>
 8006328:	f112 0f19 	cmn.w	r2, #25
 800632c:	bfdc      	itt	le
 800632e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006332:	4770      	bxle	lr
 8006334:	f1c2 0200 	rsb	r2, r2, #0
 8006338:	0041      	lsls	r1, r0, #1
 800633a:	fa21 f102 	lsr.w	r1, r1, r2
 800633e:	f1c2 0220 	rsb	r2, r2, #32
 8006342:	fa00 fc02 	lsl.w	ip, r0, r2
 8006346:	ea5f 0031 	movs.w	r0, r1, rrx
 800634a:	f140 0000 	adc.w	r0, r0, #0
 800634e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006352:	bf08      	it	eq
 8006354:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006358:	4770      	bx	lr
 800635a:	f092 0f00 	teq	r2, #0
 800635e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006362:	bf02      	ittt	eq
 8006364:	0040      	lsleq	r0, r0, #1
 8006366:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800636a:	3a01      	subeq	r2, #1
 800636c:	d0f9      	beq.n	8006362 <__aeabi_fmul+0xce>
 800636e:	ea40 000c 	orr.w	r0, r0, ip
 8006372:	f093 0f00 	teq	r3, #0
 8006376:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800637a:	bf02      	ittt	eq
 800637c:	0049      	lsleq	r1, r1, #1
 800637e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006382:	3b01      	subeq	r3, #1
 8006384:	d0f9      	beq.n	800637a <__aeabi_fmul+0xe6>
 8006386:	ea41 010c 	orr.w	r1, r1, ip
 800638a:	e78f      	b.n	80062ac <__aeabi_fmul+0x18>
 800638c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006390:	ea92 0f0c 	teq	r2, ip
 8006394:	bf18      	it	ne
 8006396:	ea93 0f0c 	teqne	r3, ip
 800639a:	d00a      	beq.n	80063b2 <__aeabi_fmul+0x11e>
 800639c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80063a0:	bf18      	it	ne
 80063a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80063a6:	d1d8      	bne.n	800635a <__aeabi_fmul+0xc6>
 80063a8:	ea80 0001 	eor.w	r0, r0, r1
 80063ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80063b0:	4770      	bx	lr
 80063b2:	f090 0f00 	teq	r0, #0
 80063b6:	bf17      	itett	ne
 80063b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80063bc:	4608      	moveq	r0, r1
 80063be:	f091 0f00 	teqne	r1, #0
 80063c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80063c6:	d014      	beq.n	80063f2 <__aeabi_fmul+0x15e>
 80063c8:	ea92 0f0c 	teq	r2, ip
 80063cc:	d101      	bne.n	80063d2 <__aeabi_fmul+0x13e>
 80063ce:	0242      	lsls	r2, r0, #9
 80063d0:	d10f      	bne.n	80063f2 <__aeabi_fmul+0x15e>
 80063d2:	ea93 0f0c 	teq	r3, ip
 80063d6:	d103      	bne.n	80063e0 <__aeabi_fmul+0x14c>
 80063d8:	024b      	lsls	r3, r1, #9
 80063da:	bf18      	it	ne
 80063dc:	4608      	movne	r0, r1
 80063de:	d108      	bne.n	80063f2 <__aeabi_fmul+0x15e>
 80063e0:	ea80 0001 	eor.w	r0, r0, r1
 80063e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80063e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80063ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80063f0:	4770      	bx	lr
 80063f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80063f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80063fa:	4770      	bx	lr

080063fc <__aeabi_frsub>:
 80063fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006400:	e002      	b.n	8006408 <__addsf3>
 8006402:	bf00      	nop

08006404 <__aeabi_fsub>:
 8006404:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006408 <__addsf3>:
 8006408:	0042      	lsls	r2, r0, #1
 800640a:	bf1f      	itttt	ne
 800640c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006410:	ea92 0f03 	teqne	r2, r3
 8006414:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006418:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800641c:	d06a      	beq.n	80064f4 <__addsf3+0xec>
 800641e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006422:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006426:	bfc1      	itttt	gt
 8006428:	18d2      	addgt	r2, r2, r3
 800642a:	4041      	eorgt	r1, r0
 800642c:	4048      	eorgt	r0, r1
 800642e:	4041      	eorgt	r1, r0
 8006430:	bfb8      	it	lt
 8006432:	425b      	neglt	r3, r3
 8006434:	2b19      	cmp	r3, #25
 8006436:	bf88      	it	hi
 8006438:	4770      	bxhi	lr
 800643a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800643e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006442:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006446:	bf18      	it	ne
 8006448:	4240      	negne	r0, r0
 800644a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800644e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006452:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006456:	bf18      	it	ne
 8006458:	4249      	negne	r1, r1
 800645a:	ea92 0f03 	teq	r2, r3
 800645e:	d03f      	beq.n	80064e0 <__addsf3+0xd8>
 8006460:	f1a2 0201 	sub.w	r2, r2, #1
 8006464:	fa41 fc03 	asr.w	ip, r1, r3
 8006468:	eb10 000c 	adds.w	r0, r0, ip
 800646c:	f1c3 0320 	rsb	r3, r3, #32
 8006470:	fa01 f103 	lsl.w	r1, r1, r3
 8006474:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006478:	d502      	bpl.n	8006480 <__addsf3+0x78>
 800647a:	4249      	negs	r1, r1
 800647c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006480:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006484:	d313      	bcc.n	80064ae <__addsf3+0xa6>
 8006486:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800648a:	d306      	bcc.n	800649a <__addsf3+0x92>
 800648c:	0840      	lsrs	r0, r0, #1
 800648e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006492:	f102 0201 	add.w	r2, r2, #1
 8006496:	2afe      	cmp	r2, #254	; 0xfe
 8006498:	d251      	bcs.n	800653e <__addsf3+0x136>
 800649a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800649e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80064a2:	bf08      	it	eq
 80064a4:	f020 0001 	biceq.w	r0, r0, #1
 80064a8:	ea40 0003 	orr.w	r0, r0, r3
 80064ac:	4770      	bx	lr
 80064ae:	0049      	lsls	r1, r1, #1
 80064b0:	eb40 0000 	adc.w	r0, r0, r0
 80064b4:	3a01      	subs	r2, #1
 80064b6:	bf28      	it	cs
 80064b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80064bc:	d2ed      	bcs.n	800649a <__addsf3+0x92>
 80064be:	fab0 fc80 	clz	ip, r0
 80064c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80064c6:	ebb2 020c 	subs.w	r2, r2, ip
 80064ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80064ce:	bfaa      	itet	ge
 80064d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80064d4:	4252      	neglt	r2, r2
 80064d6:	4318      	orrge	r0, r3
 80064d8:	bfbc      	itt	lt
 80064da:	40d0      	lsrlt	r0, r2
 80064dc:	4318      	orrlt	r0, r3
 80064de:	4770      	bx	lr
 80064e0:	f092 0f00 	teq	r2, #0
 80064e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80064e8:	bf06      	itte	eq
 80064ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80064ee:	3201      	addeq	r2, #1
 80064f0:	3b01      	subne	r3, #1
 80064f2:	e7b5      	b.n	8006460 <__addsf3+0x58>
 80064f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80064f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80064fc:	bf18      	it	ne
 80064fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006502:	d021      	beq.n	8006548 <__addsf3+0x140>
 8006504:	ea92 0f03 	teq	r2, r3
 8006508:	d004      	beq.n	8006514 <__addsf3+0x10c>
 800650a:	f092 0f00 	teq	r2, #0
 800650e:	bf08      	it	eq
 8006510:	4608      	moveq	r0, r1
 8006512:	4770      	bx	lr
 8006514:	ea90 0f01 	teq	r0, r1
 8006518:	bf1c      	itt	ne
 800651a:	2000      	movne	r0, #0
 800651c:	4770      	bxne	lr
 800651e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006522:	d104      	bne.n	800652e <__addsf3+0x126>
 8006524:	0040      	lsls	r0, r0, #1
 8006526:	bf28      	it	cs
 8006528:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800652c:	4770      	bx	lr
 800652e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006532:	bf3c      	itt	cc
 8006534:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006538:	4770      	bxcc	lr
 800653a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800653e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006542:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006546:	4770      	bx	lr
 8006548:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800654c:	bf16      	itet	ne
 800654e:	4608      	movne	r0, r1
 8006550:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006554:	4601      	movne	r1, r0
 8006556:	0242      	lsls	r2, r0, #9
 8006558:	bf06      	itte	eq
 800655a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800655e:	ea90 0f01 	teqeq	r0, r1
 8006562:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006566:	4770      	bx	lr

08006568 <__aeabi_ui2f>:
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e004      	b.n	8006578 <__aeabi_i2f+0x8>
 800656e:	bf00      	nop

08006570 <__aeabi_i2f>:
 8006570:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006574:	bf48      	it	mi
 8006576:	4240      	negmi	r0, r0
 8006578:	ea5f 0c00 	movs.w	ip, r0
 800657c:	bf08      	it	eq
 800657e:	4770      	bxeq	lr
 8006580:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006584:	4601      	mov	r1, r0
 8006586:	f04f 0000 	mov.w	r0, #0
 800658a:	e01c      	b.n	80065c6 <__aeabi_l2f+0x2a>

0800658c <__aeabi_ul2f>:
 800658c:	ea50 0201 	orrs.w	r2, r0, r1
 8006590:	bf08      	it	eq
 8006592:	4770      	bxeq	lr
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e00a      	b.n	80065b0 <__aeabi_l2f+0x14>
 800659a:	bf00      	nop

0800659c <__aeabi_l2f>:
 800659c:	ea50 0201 	orrs.w	r2, r0, r1
 80065a0:	bf08      	it	eq
 80065a2:	4770      	bxeq	lr
 80065a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80065a8:	d502      	bpl.n	80065b0 <__aeabi_l2f+0x14>
 80065aa:	4240      	negs	r0, r0
 80065ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80065b0:	ea5f 0c01 	movs.w	ip, r1
 80065b4:	bf02      	ittt	eq
 80065b6:	4684      	moveq	ip, r0
 80065b8:	4601      	moveq	r1, r0
 80065ba:	2000      	moveq	r0, #0
 80065bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80065c0:	bf08      	it	eq
 80065c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80065c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80065ca:	fabc f28c 	clz	r2, ip
 80065ce:	3a08      	subs	r2, #8
 80065d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80065d4:	db10      	blt.n	80065f8 <__aeabi_l2f+0x5c>
 80065d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80065da:	4463      	add	r3, ip
 80065dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80065e0:	f1c2 0220 	rsb	r2, r2, #32
 80065e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80065e8:	fa20 f202 	lsr.w	r2, r0, r2
 80065ec:	eb43 0002 	adc.w	r0, r3, r2
 80065f0:	bf08      	it	eq
 80065f2:	f020 0001 	biceq.w	r0, r0, #1
 80065f6:	4770      	bx	lr
 80065f8:	f102 0220 	add.w	r2, r2, #32
 80065fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8006600:	f1c2 0220 	rsb	r2, r2, #32
 8006604:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006608:	fa21 f202 	lsr.w	r2, r1, r2
 800660c:	eb43 0002 	adc.w	r0, r3, r2
 8006610:	bf08      	it	eq
 8006612:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006616:	4770      	bx	lr

08006618 <__aeabi_f2uiz>:
 8006618:	0042      	lsls	r2, r0, #1
 800661a:	d20e      	bcs.n	800663a <__aeabi_f2uiz+0x22>
 800661c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006620:	d30b      	bcc.n	800663a <__aeabi_f2uiz+0x22>
 8006622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8006626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800662a:	d409      	bmi.n	8006640 <__aeabi_f2uiz+0x28>
 800662c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006634:	fa23 f002 	lsr.w	r0, r3, r2
 8006638:	4770      	bx	lr
 800663a:	f04f 0000 	mov.w	r0, #0
 800663e:	4770      	bx	lr
 8006640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006644:	d101      	bne.n	800664a <__aeabi_f2uiz+0x32>
 8006646:	0242      	lsls	r2, r0, #9
 8006648:	d102      	bne.n	8006650 <__aeabi_f2uiz+0x38>
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	4770      	bx	lr
 8006650:	f04f 0000 	mov.w	r0, #0
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop

08006658 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006658:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800665c:	4c38      	ldr	r4, [pc, #224]	; (8006740 <main+0xe8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800665e:	4939      	ldr	r1, [pc, #228]	; (8006744 <main+0xec>)
 8006660:	6822      	ldr	r2, [r4, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006662:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006666:	f042 0210 	orr.w	r2, r2, #16
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <main+0xf0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006670:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8006672:	4313      	orrs	r3, r2
 8006674:	b0b1      	sub	sp, #196	; 0xc4
  SCB->AIRCR =  reg_value;
 8006676:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8006678:	200f      	movs	r0, #15
 800667a:	f7fd fd3f 	bl	80040fc <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800667e:	4b33      	ldr	r3, [pc, #204]	; (800674c <main+0xf4>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006680:	4933      	ldr	r1, [pc, #204]	; (8006750 <main+0xf8>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006682:	699a      	ldr	r2, [r3, #24]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006684:	2001      	movs	r0, #1
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	619a      	str	r2, [r3, #24]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	f002 0201 	and.w	r2, r2, #1
 8006692:	921a      	str	r2, [sp, #104]	; 0x68
 8006694:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800669c:	61da      	str	r2, [r3, #28]
 800669e:	69db      	ldr	r3, [r3, #28]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066a0:	2200      	movs	r2, #0
 80066a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a6:	9319      	str	r3, [sp, #100]	; 0x64
 80066a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80066aa:	684b      	ldr	r3, [r1, #4]
 80066ac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80066b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066b4:	604b      	str	r3, [r1, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80066ba:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80066be:	f44f 10e0 	mov.w	r0, #1835008	; 0x1c0000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066c2:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066c8:	e9cd 2228 	strd	r2, r2, [sp, #160]	; 0xa0
 80066cc:	e9cd 222b 	strd	r2, r2, [sp, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066d0:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80066d2:	902f      	str	r0, [sp, #188]	; 0xbc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066d4:	a826      	add	r0, sp, #152	; 0x98
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066d6:	912a      	str	r1, [sp, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066d8:	922d      	str	r2, [sp, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066da:	932e      	str	r3, [sp, #184]	; 0xb8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066dc:	f7fa ffe8 	bl	80016b0 <HAL_RCC_OscConfig.constprop.0>
 80066e0:	b108      	cbz	r0, 80066e6 <main+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 80066e2:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80066e4:	e7fe      	b.n	80066e4 <main+0x8c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f013 0f06 	tst.w	r3, #6
 80066ec:	d10c      	bne.n	8006708 <main+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	f043 0302 	orr.w	r3, r3, #2
 80066f8:	6023      	str	r3, [r4, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	2b02      	cmp	r3, #2
 8006702:	d001      	beq.n	8006708 <main+0xb0>
 8006704:	b672      	cpsid	i
 8006706:	e7fe      	b.n	8006706 <main+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006708:	4a10      	ldr	r2, [pc, #64]	; (800674c <main+0xf4>)
 800670a:	6853      	ldr	r3, [r2, #4]
 800670c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006710:	6053      	str	r3, [r2, #4]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006712:	6853      	ldr	r3, [r2, #4]
 8006714:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006718:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800671a:	6853      	ldr	r3, [r2, #4]
 800671c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006720:	6053      	str	r3, [r2, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	0199      	lsls	r1, r3, #6
 8006726:	d5ed      	bpl.n	8006704 <main+0xac>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006728:	6853      	ldr	r3, [r2, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672a:	f241 3188 	movw	r1, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	6053      	str	r3, [r2, #4]
  return uwTick;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <main+0xfc>)
 800673a:	6818      	ldr	r0, [r3, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673c:	e011      	b.n	8006762 <main+0x10a>
 800673e:	bf00      	nop
 8006740:	40022000 	.word	0x40022000
 8006744:	e000ed00 	.word	0xe000ed00
 8006748:	05fa0300 	.word	0x05fa0300
 800674c:	40021000 	.word	0x40021000
 8006750:	40010000 	.word	0x40010000
 8006754:	20000200 	.word	0x20000200
 8006758:	4b9d      	ldr	r3, [pc, #628]	; (80069d0 <main+0x378>)
 800675a:	681b      	ldr	r3, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	1a1b      	subs	r3, r3, r0
 800675e:	428b      	cmp	r3, r1
 8006760:	d8d0      	bhi.n	8006704 <main+0xac>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	6853      	ldr	r3, [r2, #4]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b08      	cmp	r3, #8
 800676a:	d1f5      	bne.n	8006758 <main+0x100>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800676c:	4a99      	ldr	r2, [pc, #612]	; (80069d4 <main+0x37c>)
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	2b02      	cmp	r3, #2
 8006776:	d90a      	bls.n	800678e <main+0x136>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	f023 0307 	bic.w	r3, r3, #7
 800677e:	f043 0302 	orr.w	r3, r3, #2
 8006782:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b02      	cmp	r3, #2
 800678c:	d1ba      	bne.n	8006704 <main+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800678e:	4c92      	ldr	r4, [pc, #584]	; (80069d8 <main+0x380>)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006790:	4a92      	ldr	r2, [pc, #584]	; (80069dc <main+0x384>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006792:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006794:	ad22      	add	r5, sp, #136	; 0x88
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006796:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800679a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800679e:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80067a6:	6063      	str	r3, [r4, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80067a8:	f240 2301 	movw	r3, #513	; 0x201
 80067ac:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80067b0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80067b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80067b6:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80067b8:	f003 020c 	and.w	r2, r3, #12
 80067bc:	2a08      	cmp	r2, #8
 80067be:	f000 80d2 	beq.w	8006966 <main+0x30e>
      sysclockfreq = HSE_VALUE;
 80067c2:	4d87      	ldr	r5, [pc, #540]	; (80069e0 <main+0x388>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c4:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067c6:	4c84      	ldr	r4, [pc, #528]	; (80069d8 <main+0x380>)
 80067c8:	4a86      	ldr	r2, [pc, #536]	; (80069e4 <main+0x38c>)
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	4f86      	ldr	r7, [pc, #536]	; (80069e8 <main+0x390>)
 80067ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80067d2:	4413      	add	r3, r2
 80067d4:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80067d8:	f8df a210 	ldr.w	sl, [pc, #528]	; 80069ec <main+0x394>
 80067dc:	40dd      	lsrs	r5, r3
 80067de:	4b84      	ldr	r3, [pc, #528]	; (80069f0 <main+0x398>)
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80067e0:	f04f 0800 	mov.w	r8, #0
  HAL_InitTick(uwTickPrio);
 80067e4:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067e6:	601d      	str	r5, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80067e8:	f7fd fc88 	bl	80040fc <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ec:	9628      	str	r6, [sp, #160]	; 0xa0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80067ee:	69a3      	ldr	r3, [r4, #24]
 80067f0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80067f4:	f043 0310 	orr.w	r3, r3, #16
 80067f8:	61a3      	str	r3, [r4, #24]
 80067fa:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067fc:	2202      	movs	r2, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	9318      	str	r3, [sp, #96]	; 0x60
 8006804:	9b18      	ldr	r3, [sp, #96]	; 0x60
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006806:	69a3      	ldr	r3, [r4, #24]
 8006808:	487a      	ldr	r0, [pc, #488]	; (80069f4 <main+0x39c>)
 800680a:	f043 0320 	orr.w	r3, r3, #32
 800680e:	61a3      	str	r3, [r4, #24]
 8006810:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006812:	f04f 0903 	mov.w	r9, #3
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	9317      	str	r3, [sp, #92]	; 0x5c
 800681c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800681e:	69a3      	ldr	r3, [r4, #24]
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	61a3      	str	r3, [r4, #24]
 8006826:	69a3      	ldr	r3, [r4, #24]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	9316      	str	r3, [sp, #88]	; 0x58
 800682e:	9b16      	ldr	r3, [sp, #88]	; 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006830:	69a3      	ldr	r3, [r4, #24]
 8006832:	f043 0308 	orr.w	r3, r3, #8
 8006836:	61a3      	str	r3, [r4, #24]
 8006838:	69a3      	ldr	r3, [r4, #24]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	9315      	str	r3, [sp, #84]	; 0x54
 8006840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006842:	4b6d      	ldr	r3, [pc, #436]	; (80069f8 <main+0x3a0>)
 8006844:	6103      	str	r3, [r0, #16]
 8006846:	4b6d      	ldr	r3, [pc, #436]	; (80069fc <main+0x3a4>)
 8006848:	f8ca 1010 	str.w	r1, [sl, #16]
 800684c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_Pin;
 800684e:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006850:	9229      	str	r2, [sp, #164]	; 0xa4
	GPIO_InitStruct.Pin = LED_Pin;
 8006852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006856:	a926      	add	r1, sp, #152	; 0x98
	GPIO_InitStruct.Pin = LED_Pin;
 8006858:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800685c:	f7fa fe2a 	bl	80014b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006860:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8006864:	2301      	movs	r3, #1
 8006866:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
 800686a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800686e:	f7fa fe21 	bl	80014b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006872:	22ff      	movs	r2, #255	; 0xff
 8006874:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006876:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006878:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800687c:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006880:	f7fa fe18 	bl	80014b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006884:	f640 4203 	movw	r2, #3075	; 0xc03
 8006888:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800688a:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 800688c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8006890:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006894:	f7fa fe0e 	bl	80014b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006898:	2204      	movs	r2, #4
 800689a:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689c:	9628      	str	r6, [sp, #160]	; 0xa0
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 800689e:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80068a2:	f7fa fe07 	bl	80014b4 <HAL_GPIO_Init>
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80068a6:	4b4a      	ldr	r3, [pc, #296]	; (80069d0 <main+0x378>)
	hi2c1.Init.ClockSpeed = 400000;
 80068a8:	4f55      	ldr	r7, [pc, #340]	; (8006a00 <main+0x3a8>)
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80068aa:	461a      	mov	r2, r3
	hi2c1.Init.OwnAddress1 = 0;
 80068ac:	e9c3 6603 	strd	r6, r6, [r3, #12]
	hi2c1.Init.OwnAddress2 = 0;
 80068b0:	e9c3 6606 	strd	r6, r6, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80068b4:	621e      	str	r6, [r3, #32]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80068b6:	625e      	str	r6, [r3, #36]	; 0x24
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80068b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068bc:	6153      	str	r3, [r2, #20]
	hi2c1.Init.ClockSpeed = 400000;
 80068be:	4b51      	ldr	r3, [pc, #324]	; (8006a04 <main+0x3ac>)
 80068c0:	e9c2 7301 	strd	r7, r3, [r2, #4]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068c4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80068c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d060      	beq.n	8006992 <main+0x33a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80068d0:	2324      	movs	r3, #36	; 0x24
 80068d2:	483f      	ldr	r0, [pc, #252]	; (80069d0 <main+0x378>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068d4:	4940      	ldr	r1, [pc, #256]	; (80069d8 <main+0x380>)
 80068d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80068da:	6843      	ldr	r3, [r0, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068dc:	6886      	ldr	r6, [r0, #8]
  __HAL_I2C_DISABLE(hi2c);
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ec:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	684a      	ldr	r2, [r1, #4]
 80068f8:	493a      	ldr	r1, [pc, #232]	; (80069e4 <main+0x38c>)
 80068fa:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80068fe:	440a      	add	r2, r1
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006900:	4941      	ldr	r1, [pc, #260]	; (8006a08 <main+0x3b0>)
 8006902:	f892 25f0 	ldrb.w	r2, [r2, #1520]	; 0x5f0
 8006906:	428e      	cmp	r6, r1
 8006908:	bf94      	ite	ls
 800690a:	4940      	ldrls	r1, [pc, #256]	; (8006a0c <main+0x3b4>)
 800690c:	4940      	ldrhi	r1, [pc, #256]	; (8006a10 <main+0x3b8>)
 800690e:	fa25 f202 	lsr.w	r2, r5, r2
 8006912:	428a      	cmp	r2, r1
 8006914:	bf8c      	ite	hi
 8006916:	2100      	movhi	r1, #0
 8006918:	2101      	movls	r1, #1
 800691a:	bb11      	cbnz	r1, 8006962 <main+0x30a>
  freqrange = I2C_FREQRANGE(pclk1);
 800691c:	493d      	ldr	r1, [pc, #244]	; (8006a14 <main+0x3bc>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800691e:	6858      	ldr	r0, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006920:	fbb2 f1f1 	udiv	r1, r2, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006924:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8006928:	4308      	orrs	r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800692a:	4c37      	ldr	r4, [pc, #220]	; (8006a08 <main+0x3b0>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800692c:	6058      	str	r0, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800692e:	6a18      	ldr	r0, [r3, #32]
 8006930:	42a6      	cmp	r6, r4
 8006932:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8006936:	d86f      	bhi.n	8006a18 <main+0x3c0>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006938:	3a01      	subs	r2, #1
 800693a:	0076      	lsls	r6, r6, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800693c:	3101      	adds	r1, #1
 800693e:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006940:	fbb2 f2f6 	udiv	r2, r2, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006944:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006946:	f640 71fc 	movw	r1, #4092	; 0xffc
 800694a:	69d8      	ldr	r0, [r3, #28]
 800694c:	3201      	adds	r2, #1
 800694e:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 8006952:	420a      	tst	r2, r1
 8006954:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8006958:	f001 82be 	beq.w	8007ed8 <main+0x1880>
 800695c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006960:	e08c      	b.n	8006a7c <main+0x424>
 8006962:	b672      	cpsid	i
	while (1)
 8006964:	e7fe      	b.n	8006964 <main+0x30c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006966:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800696a:	32c0      	adds	r2, #192	; 0xc0
 800696c:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800696e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006970:	f812 5c38 	ldrb.w	r5, [r2, #-56]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006974:	f141 82ab 	bpl.w	8007ece <main+0x1876>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006978:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800697a:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <main+0x388>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800697c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006980:	fb02 f505 	mul.w	r5, r2, r5
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006984:	33c0      	adds	r3, #192	; 0xc0
 8006986:	446b      	add	r3, sp
 8006988:	f813 3c44 	ldrb.w	r3, [r3, #-68]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800698c:	fbb5 f5f3 	udiv	r5, r5, r3
 8006990:	e718      	b.n	80067c4 <main+0x16c>
    hi2c->Lock = HAL_UNLOCKED;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <main+0x378>)
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006994:	9228      	str	r2, [sp, #160]	; 0xa0
 8006996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800699a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800699c:	69a3      	ldr	r3, [r4, #24]
 800699e:	f043 0308 	orr.w	r3, r3, #8
 80069a2:	61a3      	str	r3, [r4, #24]
 80069a4:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069a6:	9229      	str	r2, [sp, #164]	; 0xa4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069ae:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069b2:	2312      	movs	r3, #18
 80069b4:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b8:	f7fa fd7c 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069bc:	69e3      	ldr	r3, [r4, #28]
 80069be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c2:	61e3      	str	r3, [r4, #28]
 80069c4:	69e3      	ldr	r3, [r4, #28]
 80069c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80069cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80069ce:	e77f      	b.n	80068d0 <main+0x278>
 80069d0:	20000200 	.word	0x20000200
 80069d4:	40022000 	.word	0x40022000
 80069d8:	40021000 	.word	0x40021000
 80069dc:	0801d6bc 	.word	0x0801d6bc
 80069e0:	007a1200 	.word	0x007a1200
 80069e4:	0800cd58 	.word	0x0800cd58
 80069e8:	40010c00 	.word	0x40010c00
 80069ec:	40010800 	.word	0x40010800
 80069f0:	20000000 	.word	0x20000000
 80069f4:	40011000 	.word	0x40011000
 80069f8:	e03f0000 	.word	0xe03f0000
 80069fc:	0c030000 	.word	0x0c030000
 8006a00:	40005400 	.word	0x40005400
 8006a04:	00061a80 	.word	0x00061a80
 8006a08:	000186a0 	.word	0x000186a0
 8006a0c:	001e847f 	.word	0x001e847f
 8006a10:	003d08ff 	.word	0x003d08ff
 8006a14:	000f4240 	.word	0x000f4240
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a18:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8006a1c:	fb04 f101 	mul.w	r1, r4, r1
 8006a20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006a24:	fbb1 f1f4 	udiv	r1, r1, r4
 8006a28:	3101      	adds	r1, #1
 8006a2a:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a2c:	4cca      	ldr	r4, [pc, #808]	; (8006d58 <main+0x700>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a2e:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a30:	69d8      	ldr	r0, [r3, #28]
 8006a32:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006a36:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 8006a3a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8006a3e:	f1bc 0f00 	cmp.w	ip, #0
 8006a42:	f040 832e 	bne.w	80070a2 <main+0xa4a>
 8006a46:	1e57      	subs	r7, r2, #1
 8006a48:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8006a4c:	fbb7 f4f4 	udiv	r4, r7, r4
 8006a50:	0524      	lsls	r4, r4, #20
 8006a52:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8006a56:	bf14      	ite	ne
 8006a58:	2400      	movne	r4, #0
 8006a5a:	2401      	moveq	r4, #1
 8006a5c:	0071      	lsls	r1, r6, #1
 8006a5e:	2c00      	cmp	r4, #0
 8006a60:	f041 823d 	bne.w	8007ede <main+0x1886>
 8006a64:	f1bc 0f00 	cmp.w	ip, #0
 8006a68:	f041 83ba 	bne.w	80081e0 <main+0x1b88>
 8006a6c:	198a      	adds	r2, r1, r6
 8006a6e:	fbb7 f2f2 	udiv	r2, r7, r2
 8006a72:	3201      	adds	r2, #1
 8006a74:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a7c:	4302      	orrs	r2, r0
 8006a7e:	61da      	str	r2, [r3, #28]
  hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	2020      	movs	r0, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a82:	2200      	movs	r2, #0
	huart1.Init.BaudRate = 115200;
 8006a84:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006a88:	260c      	movs	r6, #12
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	f8df e2c8 	ldr.w	lr, [pc, #712]	; 8006d58 <main+0x700>
 8006a90:	f021 0cc0 	bic.w	ip, r1, #192	; 0xc0
 8006a94:	e9de 1408 	ldrd	r1, r4, [lr, #32]
 8006a98:	4321      	orrs	r1, r4
 8006a9a:	ea41 010c 	orr.w	r1, r1, ip
 8006a9e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006aa0:	6899      	ldr	r1, [r3, #8]
 8006aa2:	f421 4c03 	bic.w	ip, r1, #33536	; 0x8300
 8006aa6:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 8006aaa:	e9de 4104 	ldrd	r4, r1, [lr, #16]
 8006aae:	4321      	orrs	r1, r4
 8006ab0:	ea41 010c 	orr.w	r1, r1, ip
 8006ab4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ab6:	68d9      	ldr	r1, [r3, #12]
 8006ab8:	f021 0cff 	bic.w	ip, r1, #255	; 0xff
 8006abc:	e9de 1406 	ldrd	r1, r4, [lr, #24]
 8006ac0:	4321      	orrs	r1, r4
 8006ac2:	ea41 010c 	orr.w	r1, r1, ip
 8006ac6:	60d9      	str	r1, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	f041 0101 	orr.w	r1, r1, #1
 8006ace:	6019      	str	r1, [r3, #0]
	huart1.Instance = USART1;
 8006ad0:	4ba2      	ldr	r3, [pc, #648]	; (8006d5c <main+0x704>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad2:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	f88e 0041 	strb.w	r0, [lr, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ada:	f8ce 2034 	str.w	r2, [lr, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	f88e 2042 	strb.w	r2, [lr, #66]	; 0x42
 8006ae2:	f8ce 306c 	str.w	r3, [lr, #108]	; 0x6c
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	f89e 30a9 	ldrb.w	r3, [lr, #169]	; 0xa9
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006aea:	e9ce 221d 	strd	r2, r2, [lr, #116]	; 0x74
	huart1.Init.BaudRate = 115200;
 8006aee:	f8ce 7070 	str.w	r7, [lr, #112]	; 0x70
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006af2:	f8ce 6080 	str.w	r6, [lr, #128]	; 0x80
	huart1.Init.Parity = UART_PARITY_NONE;
 8006af6:	f8ce 207c 	str.w	r2, [lr, #124]	; 0x7c
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006afa:	f8ce 2084 	str.w	r2, [lr, #132]	; 0x84
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006afe:	f8ce 2088 	str.w	r2, [lr, #136]	; 0x88
 8006b02:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f001 833e 	beq.w	8008188 <main+0x1b30>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0c:	2324      	movs	r3, #36	; 0x24
 8006b0e:	4c92      	ldr	r4, [pc, #584]	; (8006d58 <main+0x700>)

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  huart->gState = HAL_UART_STATE_BUSY;
 8006b12:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
  __HAL_UART_DISABLE(huart);
 8006b16:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b18:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1e:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	6913      	ldr	r3, [r2, #16]
 8006b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b2a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006b2c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1,
 8006b2e:	68d0      	ldr	r0, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b30:	430b      	orrs	r3, r1
 8006b32:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  MODIFY_REG(huart->Instance->CR1,
 8006b36:	f420 50b0 	bic.w	r0, r0, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b3a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8006b3c:	f020 000c 	bic.w	r0, r0, #12
 8006b40:	4303      	orrs	r3, r0
 8006b42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b44:	6953      	ldr	r3, [r2, #20]
 8006b46:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8006b52:	4b82      	ldr	r3, [pc, #520]	; (8006d5c <main+0x704>)
 8006b54:	429a      	cmp	r2, r3
 8006b56:	f001 830b 	beq.w	8008170 <main+0x1b18>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b5a:	4b81      	ldr	r3, [pc, #516]	; (8006d60 <main+0x708>)
 8006b5c:	4981      	ldr	r1, [pc, #516]	; (8006d64 <main+0x70c>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006b64:	440b      	add	r3, r1
 8006b66:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8006b6a:	40dd      	lsrs	r5, r3
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6c:	2319      	movs	r3, #25
 8006b6e:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8006d58 <main+0x700>
 8006b72:	fb03 f505 	mul.w	r5, r3, r5
 8006b76:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8006b7a:	2764      	movs	r7, #100	; 0x64
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	fbb5 f3f3 	udiv	r3, r5, r3
 8006b82:	fbb3 f6f7 	udiv	r6, r3, r7
 8006b86:	fb07 3316 	mls	r3, r7, r6, r3
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	3332      	adds	r3, #50	; 0x32
 8006b8e:	fbb3 f3f7 	udiv	r3, r3, r7
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	2120      	movs	r1, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b94:	2500      	movs	r5, #0
 8006b96:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b9a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8006b9e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba0:	6913      	ldr	r3, [r2, #16]
 8006ba2:	4871      	ldr	r0, [pc, #452]	; (8006d68 <main+0x710>)
 8006ba4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006ba8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006baa:	6953      	ldr	r3, [r2, #20]
 8006bac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006bb0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006bb2:	68d3      	ldr	r3, [r2, #12]
 8006bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bb8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bba:	f8cc 50ac 	str.w	r5, [ip, #172]	; 0xac
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	f88c 10a9 	strb.w	r1, [ip, #169]	; 0xa9
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	f88c 10aa 	strb.w	r1, [ip, #170]	; 0xaa
 8006bc6:	6104      	str	r4, [r0, #16]
 8006bc8:	f8dc 2000 	ldr.w	r2, [ip]
 8006bcc:	4b62      	ldr	r3, [pc, #392]	; (8006d58 <main+0x700>)
 8006bce:	681b      	ldr	r3, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	2bc8      	cmp	r3, #200	; 0xc8
 8006bd4:	d9fa      	bls.n	8006bcc <main+0x574>
    GPIOx->BSRR = GPIO_Pin;
 8006bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bda:	4b63      	ldr	r3, [pc, #396]	; (8006d68 <main+0x710>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8006bdc:	2011      	movs	r0, #17
 8006bde:	611a      	str	r2, [r3, #16]
 8006be0:	f7f9 fab6 	bl	8000150 <LCD_Send_Cmd>
  return uwTick;
 8006be4:	4b5c      	ldr	r3, [pc, #368]	; (8006d58 <main+0x700>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <main+0x700>)
 8006bea:	681b      	ldr	r3, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	2b78      	cmp	r3, #120	; 0x78
 8006bf0:	d9fa      	bls.n	8006be8 <main+0x590>
  HAL_Delay(120);
	LCD_Send_Cmd(HX8357_COLMOD);
 8006bf2:	203a      	movs	r0, #58	; 0x3a
 8006bf4:	f7f9 faac 	bl	8000150 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8006bf8:	2055      	movs	r0, #85	; 0x55
 8006bfa:	f7f9 fb09 	bl	8000210 <LCD_Send_Dat>
  return uwTick;
 8006bfe:	4b56      	ldr	r3, [pc, #344]	; (8006d58 <main+0x700>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <main+0x700>)
 8006c04:	681b      	ldr	r3, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	d9fa      	bls.n	8006c02 <main+0x5aa>
  HAL_Delay(5);
  LCD_Send_Cmd(HX8357_DISPON);
 8006c0c:	2029      	movs	r0, #41	; 0x29
 8006c0e:	f7f9 fa9f 	bl	8000150 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8006c12:	2036      	movs	r0, #54	; 0x36
 8006c14:	f7f9 fa9c 	bl	8000150 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8006c18:	2008      	movs	r0, #8
 8006c1a:	f7f9 faf9 	bl	8000210 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	f240 13df 	movw	r3, #479	; 0x1df
 8006c24:	f240 123f 	movw	r2, #319	; 0x13f
 8006c28:	4608      	mov	r0, r1
 8006c2a:	f7f9 fb79 	bl	8000320 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c2e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8006c32:	f44f 3c16 	mov.w	ip, #153600	; 0x25800
 8006c36:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8006c3a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006d68 <main+0x710>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c3e:	4a4b      	ldr	r2, [pc, #300]	; (8006d6c <main+0x714>)
 8006c40:	4b4b      	ldr	r3, [pc, #300]	; (8006d70 <main+0x718>)
    GPIOx->BSRR = GPIO_Pin;
 8006c42:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8006c48:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c4c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8006c50:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8006c54:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8006c58:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8006c5c:	f8cb 1010 	str.w	r1, [fp, #16]
 8006c60:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 8006c64:	6116      	str	r6, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c66:	2120      	movs	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c68:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c6a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c6e:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c70:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c72:	6118      	str	r0, [r3, #16]
 8006c74:	611e      	str	r6, [r3, #16]
 8006c76:	611c      	str	r4, [r3, #16]
 8006c78:	f8c3 a010 	str.w	sl, [r3, #16]
 8006c7c:	f8c3 9010 	str.w	r9, [r3, #16]
 8006c80:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c82:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c84:	6115      	str	r5, [r2, #16]
 8006c86:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c8a:	6111      	str	r1, [r2, #16]
 8006c8c:	f8c2 e010 	str.w	lr, [r2, #16]
 8006c90:	6117      	str	r7, [r2, #16]
 8006c92:	6118      	str	r0, [r3, #16]
 8006c94:	6119      	str	r1, [r3, #16]
 8006c96:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c98:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006c9c:	f8cb 1010 	str.w	r1, [fp, #16]
 8006ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8006ca4:	f1bc 0c01 	subs.w	ip, ip, #1
 8006ca8:	f8cb 1010 	str.w	r1, [fp, #16]
 8006cac:	d1c9      	bne.n	8006c42 <main+0x5ea>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8006cae:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cb0:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8006cb4:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8006cb8:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8006cbc:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	f7f9 fb2d 	bl	8000320 <LCD_Window>
 8006cc6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006d74 <main+0x71c>
    GPIOx->BSRR = GPIO_Pin;
 8006cca:	4927      	ldr	r1, [pc, #156]	; (8006d68 <main+0x710>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ccc:	4a27      	ldr	r2, [pc, #156]	; (8006d6c <main+0x714>)
 8006cce:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <main+0x718>)
    GPIOx->BSRR = GPIO_Pin;
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cd4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006cd8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8006cdc:	6108      	str	r0, [r1, #16]
 8006cde:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8006ce2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006ce6:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8006cea:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8006cee:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8006cf2:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8006cf6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8006cfa:	f8c2 b010 	str.w	fp, [r2, #16]
 8006cfe:	6116      	str	r6, [r2, #16]
 8006d00:	611f      	str	r7, [r3, #16]
 8006d02:	611d      	str	r5, [r3, #16]
 8006d04:	f8c3 b010 	str.w	fp, [r3, #16]
 8006d08:	611e      	str	r6, [r3, #16]
 8006d0a:	f8c3 a010 	str.w	sl, [r3, #16]
 8006d0e:	f8c3 9010 	str.w	r9, [r3, #16]
 8006d12:	6115      	str	r5, [r2, #16]
 8006d14:	6117      	str	r7, [r2, #16]
 8006d16:	6114      	str	r4, [r2, #16]
 8006d18:	6110      	str	r0, [r2, #16]
 8006d1a:	f8c2 e010 	str.w	lr, [r2, #16]
 8006d1e:	f8c2 c010 	str.w	ip, [r2, #16]
 8006d22:	611c      	str	r4, [r3, #16]
 8006d24:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006d26:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006d28:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006d2c:	6108      	str	r0, [r1, #16]
 8006d2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8006d32:	f1b8 0801 	subs.w	r8, r8, #1
 8006d36:	6108      	str	r0, [r1, #16]
 8006d38:	d1ca      	bne.n	8006cd0 <main+0x678>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 8006d3a:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8006d78 <main+0x720>
 8006d3e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006d42:	217f      	movs	r1, #127	; 0x7f
 8006d44:	2014      	movs	r0, #20
 8006d46:	4a0d      	ldr	r2, [pc, #52]	; (8006d7c <main+0x724>)
 8006d48:	f7fe fc26 	bl	8005598 <LCD_Font.constprop.3>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 8006d4c:	f1aa 0402 	sub.w	r4, sl, #2
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 8006d50:	217f      	movs	r1, #127	; 0x7f
 8006d52:	2014      	movs	r0, #20
 8006d54:	e014      	b.n	8006d80 <main+0x728>
 8006d56:	bf00      	nop
 8006d58:	20000200 	.word	0x20000200
 8006d5c:	40013800 	.word	0x40013800
 8006d60:	40021000 	.word	0x40021000
 8006d64:	0800cd58 	.word	0x0800cd58
 8006d68:	40010c00 	.word	0x40010c00
 8006d6c:	40010800 	.word	0x40010800
 8006d70:	40011000 	.word	0x40011000
 8006d74:	000251c4 	.word	0x000251c4
 8006d78:	200002b0 	.word	0x200002b0
 8006d7c:	0801d648 	.word	0x0801d648
 8006d80:	4acf      	ldr	r2, [pc, #828]	; (80070c0 <main+0xa68>)
 8006d82:	f7fd fa87 	bl	8004294 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 8006d86:	b2a7      	uxth	r7, r4
 8006d88:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006d8c:	217f      	movs	r1, #127	; 0x7f
 8006d8e:	2014      	movs	r0, #20
 8006d90:	4acc      	ldr	r2, [pc, #816]	; (80070c4 <main+0xa6c>)
 8006d92:	f7fe fc01 	bl	8005598 <LCD_Font.constprop.3>
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8006d96:	f5c7 737a 	rsb	r3, r7, #1000	; 0x3e8
 8006d9a:	3301      	adds	r3, #1
    uint16_t dt[1] = {0};
 8006d9c:	4645      	mov	r5, r8
 8006d9e:	fa1f f883 	uxth.w	r8, r3
 8006da2:	f5c7 737a 	rsb	r3, r7, #1000	; 0x3e8
 8006da6:	fa1f f983 	uxth.w	r9, r3
 8006daa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006dae:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006db2:	b2a6      	uxth	r6, r4
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006db4:	eb09 0006 	add.w	r0, r9, r6
 8006db8:	b280      	uxth	r0, r0
 8006dba:	a926      	add	r1, sp, #152	; 0x98
    uint16_t dt[1] = {0};
 8006dbc:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006dc0:	f7fc faa4 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8006dc4:	eb08 0006 	add.w	r0, r8, r6
 8006dc8:	b280      	uxth	r0, r0
    return dt[0];
 8006dca:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006dce:	a926      	add	r1, sp, #152	; 0x98
    uint16_t dt[1] = {0};
 8006dd0:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006dd4:	f7fc fa9a 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006dd8:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
	return (byteH << 8) | byteL;
 8006ddc:	b2f6      	uxtb	r6, r6
 8006dde:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8006de2:	4bb9      	ldr	r3, [pc, #740]	; (80070c8 <main+0xa70>)
 8006de4:	f824 6f02 	strh.w	r6, [r4, #2]!
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d1e2      	bne.n	8006db2 <main+0x75a>
 8006dec:	f103 0802 	add.w	r8, r3, #2
 8006df0:	fa1f f688 	uxth.w	r6, r8
 8006df4:	f103 0904 	add.w	r9, r3, #4
 8006df8:	f5c6 63fa 	rsb	r3, r6, #2000	; 0x7d0
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	fa1f fb83 	uxth.w	fp, r3
 8006e02:	f5c6 63fa 	rsb	r3, r6, #2000	; 0x7d0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	9702      	str	r7, [sp, #8]
    uint16_t dt[1] = {0};
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	4647      	mov	r7, r8
 8006e0e:	46b0      	mov	r8, r6
 8006e10:	461e      	mov	r6, r3
 8006e12:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8006e18:	b2bd      	uxth	r5, r7
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e1a:	1970      	adds	r0, r6, r5
 8006e1c:	b280      	uxth	r0, r0
 8006e1e:	a926      	add	r1, sp, #152	; 0x98
    uint16_t dt[1] = {0};
 8006e20:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e24:	f7fc fa72 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8006e28:	eb0b 0005 	add.w	r0, fp, r5
 8006e2c:	b280      	uxth	r0, r0
    return dt[0];
 8006e2e:	f8bd 5098 	ldrh.w	r5, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e32:	a926      	add	r1, sp, #152	; 0x98
    uint16_t dt[1] = {0};
 8006e34:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e38:	f7fc fa68 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006e3c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
	return (byteH << 8) | byteL;
 8006e40:	b2ed      	uxtb	r5, r5
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8006e42:	4ba2      	ldr	r3, [pc, #648]	; (80070cc <main+0xa74>)
	return (byteH << 8) | byteL;
 8006e44:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8006e48:	f827 5f02 	strh.w	r5, [r7, #2]!
 8006e4c:	42bb      	cmp	r3, r7
 8006e4e:	d1e3      	bne.n	8006e18 <main+0x7c0>
 8006e50:	4646      	mov	r6, r8
 8006e52:	f103 0802 	add.w	r8, r3, #2
 8006e56:	fa1f f588 	uxth.w	r5, r8
 8006e5a:	f5c5 623b 	rsb	r2, r5, #2992	; 0xbb0
 8006e5e:	3208      	adds	r2, #8
 8006e60:	b293      	uxth	r3, r2
 8006e62:	f5c5 623b 	rsb	r2, r5, #2992	; 0xbb0
 8006e66:	3209      	adds	r2, #9
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	9603      	str	r6, [sp, #12]
    uint16_t dt[1] = {0};
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	4646      	mov	r6, r8
 8006e70:	4693      	mov	fp, r2
 8006e72:	46a8      	mov	r8, r5
 8006e74:	461d      	mov	r5, r3
 8006e76:	9308      	str	r3, [sp, #32]
 8006e78:	920b      	str	r2, [sp, #44]	; 0x2c
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8006e7a:	b2b7      	uxth	r7, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e7c:	19e8      	adds	r0, r5, r7
 8006e7e:	b280      	uxth	r0, r0
 8006e80:	a926      	add	r1, sp, #152	; 0x98
    uint16_t dt[1] = {0};
 8006e82:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e86:	f7fc fa41 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8006e8a:	eb0b 0007 	add.w	r0, fp, r7
 8006e8e:	a926      	add	r1, sp, #152	; 0x98
    return dt[0];
 8006e90:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e94:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8006e96:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006e9a:	f7fc fa37 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006e9e:	f89d 1098 	ldrb.w	r1, [sp, #152]	; 0x98
	return (byteH << 8) | byteL;
 8006ea2:	b2fb      	uxtb	r3, r7
 8006ea4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8006ea8:	f826 3f02 	strh.w	r3, [r6, #2]!
 8006eac:	4b88      	ldr	r3, [pc, #544]	; (80070d0 <main+0xa78>)
 8006eae:	42b3      	cmp	r3, r6
 8006eb0:	d1e3      	bne.n	8006e7a <main+0x822>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 8006eb2:	217f      	movs	r1, #127	; 0x7f
 8006eb4:	e9dd 7602 	ldrd	r7, r6, [sp, #8]
 8006eb8:	2014      	movs	r0, #20
 8006eba:	4a82      	ldr	r2, [pc, #520]	; (80070c4 <main+0xa6c>)
 8006ebc:	f7fd f9ea 	bl	8004294 <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8006ec0:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	20ec      	movs	r0, #236	; 0xec
 8006ec8:	a926      	add	r1, sp, #152	; 0x98
    cmd[0] = 0xF2; // ctrl_hum
 8006eca:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ece:	f7fc ff67 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8006ed2:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	20ec      	movs	r0, #236	; 0xec
 8006eda:	a926      	add	r1, sp, #152	; 0x98
    cmd[0] = 0xF4; // ctrl_meas
 8006edc:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ee0:	f7fc ff5e 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8006ee4:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ee8:	2202      	movs	r2, #2
 8006eea:	20ec      	movs	r0, #236	; 0xec
 8006eec:	a926      	add	r1, sp, #152	; 0x98
    cmd[0] = 0xF5; // config
 8006eee:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006ef2:	f7fc ff55 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8006ef6:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ef8:	2201      	movs	r2, #1
 8006efa:	20ec      	movs	r0, #236	; 0xec
 8006efc:	a926      	add	r1, sp, #152	; 0x98
    cmd[0] = 0x88; // read dig_T regs
 8006efe:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f02:	f7fc ff4d 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8006f06:	2206      	movs	r2, #6
 8006f08:	20ec      	movs	r0, #236	; 0xec
 8006f0a:	a926      	add	r1, sp, #152	; 0x98
 8006f0c:	f7fc fd36 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8006f10:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006f12:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8006f16:	4645      	mov	r5, r8
    cmd[0] = 0x8E; // read dig_P regs
 8006f18:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006f1c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80070d4 <main+0xa7c>
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006f20:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f24:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006f26:	f8a8 3464 	strh.w	r3, [r8, #1124]	; 0x464
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006f2a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006f2e:	f8a8 2462 	strh.w	r2, [r8, #1122]	; 0x462
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f32:	a926      	add	r1, sp, #152	; 0x98
 8006f34:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006f36:	f8a8 3466 	strh.w	r3, [r8, #1126]	; 0x466
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f3a:	f7fc ff31 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8006f3e:	2212      	movs	r2, #18
 8006f40:	20ec      	movs	r0, #236	; 0xec
 8006f42:	a926      	add	r1, sp, #152	; 0x98
 8006f44:	f7fc fd1a 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8006f48:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006f4a:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
    cmd[0] = 0xA1; // read dig_H regs
 8006f4e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006f52:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f56:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006f58:	f8a8 346a 	strh.w	r3, [r8, #1130]	; 0x46a
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006f5c:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006f60:	f8a8 2468 	strh.w	r2, [r8, #1128]	; 0x468
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006f64:	f8a8 346c 	strh.w	r3, [r8, #1132]	; 0x46c
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006f68:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f6c:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006f6e:	f8a8 346e 	strh.w	r3, [r8, #1134]	; 0x46e
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006f72:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f76:	a926      	add	r1, sp, #152	; 0x98
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006f78:	f8a8 3470 	strh.w	r3, [r8, #1136]	; 0x470
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8006f7c:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
 8006f80:	f8a8 3472 	strh.w	r3, [r8, #1138]	; 0x472
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8006f84:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8006f88:	f8a8 3474 	strh.w	r3, [r8, #1140]	; 0x474
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8006f8c:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 8006f90:	f8a8 3476 	strh.w	r3, [r8, #1142]	; 0x476
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8006f94:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8006f98:	f8a8 3478 	strh.w	r3, [r8, #1144]	; 0x478
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006f9c:	f7fc ff00 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	20ec      	movs	r0, #236	; 0xec
 8006fa4:	a926      	add	r1, sp, #152	; 0x98
 8006fa6:	f7fc fce9 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8006faa:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006fac:	2201      	movs	r2, #1
 8006fae:	20ec      	movs	r0, #236	; 0xec
 8006fb0:	f10d 0199 	add.w	r1, sp, #153	; 0x99
    cmd[1] = 0xE1; // read dig_H regs
 8006fb4:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006fb8:	f7fc fef2 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	20ec      	movs	r0, #236	; 0xec
 8006fc0:	f10d 0199 	add.w	r1, sp, #153	; 0x99
 8006fc4:	f7fc fcda 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8006fc8:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006fcc:	f89d 309d 	ldrb.w	r3, [sp, #157]	; 0x9d
    dig_H1 = cmd[0];
 8006fd0:	f8a8 247a 	strh.w	r2, [r8, #1146]	; 0x47a
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006fd4:	f8bd 2099 	ldrh.w	r2, [sp, #153]	; 0x99
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006fd8:	f89d 009c 	ldrb.w	r0, [sp, #156]	; 0x9c
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006fdc:	f8a8 247c 	strh.w	r2, [r8, #1148]	; 0x47c
    dig_H3 = cmd[3];
 8006fe0:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006fe4:	f89d 109e 	ldrb.w	r1, [sp, #158]	; 0x9e
    dig_H3 = cmd[3];
 8006fe8:	f8a8 247e 	strh.w	r2, [r8, #1150]	; 0x47e
    dig_H6 = cmd[7];
 8006fec:	f89d 209f 	ldrb.w	r2, [sp, #159]	; 0x9f
 8006ff0:	f8a8 2484 	strh.w	r2, [r8, #1156]	; 0x484
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006ff4:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006ff8:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006ffa:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006ffe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007002:	f8a8 2480 	strh.w	r2, [r8, #1152]	; 0x480
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007006:	f8a8 3482 	strh.w	r3, [r8, #1154]	; 0x482
	DS3231_Update();
 800700a:	f7fc fffd 	bl	8004008 <DS3231_Update>
	uint8_t uartTransmit[] = "UART OK\r\n";
 800700e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007010:	469c      	mov	ip, r3
 8007012:	4a31      	ldr	r2, [pc, #196]	; (80070d8 <main+0xa80>)
  if (huart->gState == HAL_UART_STATE_READY)
 8007014:	f898 e0a9 	ldrb.w	lr, [r8, #169]	; 0xa9
 8007018:	ca07      	ldmia	r2, {r0, r1, r2}
 800701a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800701e:	f1be 0f20 	cmp.w	lr, #32
 8007022:	f8ac 2000 	strh.w	r2, [ip]
 8007026:	d167      	bne.n	80070f8 <main+0xaa0>
    __HAL_LOCK(huart);
 8007028:	f898 20a8 	ldrb.w	r2, [r8, #168]	; 0xa8
 800702c:	2a01      	cmp	r2, #1
 800702e:	d063      	beq.n	80070f8 <main+0xaa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007030:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007032:	f8c8 40ac 	str.w	r4, [r8, #172]	; 0xac
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007036:	f888 20a9 	strb.w	r2, [r8, #169]	; 0xa9
    huart->TxXferSize = Size;
 800703a:	220a      	movs	r2, #10
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703c:	f8d8 1074 	ldr.w	r1, [r8, #116]	; 0x74
  return uwTick;
 8007040:	f8d8 0000 	ldr.w	r0, [r8]
 8007044:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007048:	4644      	mov	r4, r8
    huart->TxXferSize = Size;
 800704a:	f8a8 2090 	strh.w	r2, [r8, #144]	; 0x90
    huart->TxXferCount = Size;
 800704e:	f8a8 2092 	strh.w	r2, [r8, #146]	; 0x92
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007052:	f001 80d1 	beq.w	80081f8 <main+0x1ba0>
      pdata8bits  = pData;
 8007056:	461c      	mov	r4, r3
      pdata16bits = NULL;
 8007058:	f04f 0c00 	mov.w	ip, #0
    __HAL_UNLOCK(huart);
 800705c:	2300      	movs	r3, #0
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <main+0xa7c>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007060:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    __HAL_UNLOCK(huart);
 8007062:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
    while (huart->TxXferCount > 0U)
 8007066:	4b1b      	ldr	r3, [pc, #108]	; (80070d4 <main+0xa7c>)
 8007068:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800706c:	b29b      	uxth	r3, r3
 800706e:	b933      	cbnz	r3, 800707e <main+0xa26>
 8007070:	e03a      	b.n	80070e8 <main+0xa90>
 8007072:	4a18      	ldr	r2, [pc, #96]	; (80070d4 <main+0xa7c>)
 8007074:	6812      	ldr	r2, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007076:	1a12      	subs	r2, r2, r0
 8007078:	2a64      	cmp	r2, #100	; 0x64
 800707a:	f201 801d 	bhi.w	80080b8 <main+0x1a60>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	680b      	ldr	r3, [r1, #0]
 8007080:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8007084:	d0f5      	beq.n	8007072 <main+0xa1a>
      if (pdata8bits == NULL)
 8007086:	2c00      	cmp	r4, #0
 8007088:	f001 806b 	beq.w	8008162 <main+0x1b0a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800708c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007090:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <main+0xa7c>)
 8007094:	f8b2 3092 	ldrh.w	r3, [r2, #146]	; 0x92
 8007098:	3b01      	subs	r3, #1
 800709a:	b29b      	uxth	r3, r3
 800709c:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
 80070a0:	e7e1      	b.n	8007066 <main+0xa0e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070a2:	2419      	movs	r4, #25
 80070a4:	fb06 f404 	mul.w	r4, r6, r4
 80070a8:	1e57      	subs	r7, r2, #1
 80070aa:	fbb7 f4f4 	udiv	r4, r7, r4
 80070ae:	0524      	lsls	r4, r4, #20
 80070b0:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 80070b4:	bf14      	ite	ne
 80070b6:	2400      	movne	r4, #0
 80070b8:	2401      	moveq	r4, #1
 80070ba:	0071      	lsls	r1, r6, #1
 80070bc:	e4cf      	b.n	8006a5e <main+0x406>
 80070be:	bf00      	nop
 80070c0:	0801d648 	.word	0x0801d648
 80070c4:	0801d658 	.word	0x0801d658
 80070c8:	200003e8 	.word	0x200003e8
 80070cc:	20000524 	.word	0x20000524
 80070d0:	20000660 	.word	0x20000660
 80070d4:	20000200 	.word	0x20000200
 80070d8:	0801d6d0 	.word	0x0801d6d0
 80070dc:	4ad6      	ldr	r2, [pc, #856]	; (8007438 <main+0xde0>)
 80070de:	6812      	ldr	r2, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070e0:	1a12      	subs	r2, r2, r0
 80070e2:	2a64      	cmp	r2, #100	; 0x64
 80070e4:	f200 87e8 	bhi.w	80080b8 <main+0x1a60>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e8:	680b      	ldr	r3, [r1, #0]
 80070ea:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80070ee:	d0f5      	beq.n	80070dc <main+0xa84>
    huart->gState = HAL_UART_STATE_READY;
 80070f0:	2320      	movs	r3, #32
 80070f2:	4ad1      	ldr	r2, [pc, #836]	; (8007438 <main+0xde0>)
 80070f4:	f882 30a9 	strb.w	r3, [r2, #169]	; 0xa9
 80070f8:	f5c7 7379 	rsb	r3, r7, #996	; 0x3e4
 80070fc:	461a      	mov	r2, r3
 80070fe:	f5c6 63f9 	rsb	r3, r6, #1992	; 0x7c8
 8007102:	4619      	mov	r1, r3
 8007104:	f5c5 633b 	rsb	r3, r5, #2992	; 0xbb0
 8007108:	4618      	mov	r0, r3
 800710a:	4613      	mov	r3, r2
 800710c:	3303      	adds	r3, #3
 800710e:	9311      	str	r3, [sp, #68]	; 0x44
 8007110:	460b      	mov	r3, r1
 8007112:	3307      	adds	r3, #7
 8007114:	9312      	str	r3, [sp, #72]	; 0x48
 8007116:	4603      	mov	r3, r0
 8007118:	3307      	adds	r3, #7
 800711a:	9313      	str	r3, [sp, #76]	; 0x4c
 800711c:	f50a 739b 	add.w	r3, sl, #310	; 0x136
 8007120:	930e      	str	r3, [sp, #56]	; 0x38
 8007122:	f509 739b 	add.w	r3, r9, #310	; 0x136
 8007126:	930f      	str	r3, [sp, #60]	; 0x3c
 8007128:	4bc4      	ldr	r3, [pc, #784]	; (800743c <main+0xde4>)
 800712a:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800712e:	9310      	str	r3, [sp, #64]	; 0x40
		if (rx_index != 0) {
 8007130:	4bc1      	ldr	r3, [pc, #772]	; (8007438 <main+0xde0>)
 8007132:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 86bc 	bne.w	8007eb4 <main+0x185c>
		DS3231_Update();
 800713c:	f7fc ff64 	bl	8004008 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8007140:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 8007438 <main+0xde0>
 8007144:	f89c 6058 	ldrb.w	r6, [ip, #88]	; 0x58
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8007148:	f89c 5059 	ldrb.w	r5, [ip, #89]	; 0x59
    return ((val / 16 * 10) + (val % 16));
 800714c:	0937      	lsrs	r7, r6, #4
 800714e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007152:	f006 060f 	and.w	r6, r6, #15
 8007156:	eb06 0647 	add.w	r6, r6, r7, lsl #1
		rtcSec = DS3231_getSec();
 800715a:	4667      	mov	r7, ip
 800715c:	b2f6      	uxtb	r6, r6
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 800715e:	f89c 405a 	ldrb.w	r4, [ip, #90]	; 0x5a
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8007162:	f89c 005b 	ldrb.w	r0, [ip, #91]	; 0x5b
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8007166:	f89c 105c 	ldrb.w	r1, [ip, #92]	; 0x5c
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 800716a:	f89c 205d 	ldrb.w	r2, [ip, #93]	; 0x5d
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 800716e:	f89c 305e 	ldrb.w	r3, [ip, #94]	; 0x5e
 8007172:	46b4      	mov	ip, r6
    return ((val / 16 * 10) + (val % 16));
 8007174:	9607      	str	r6, [sp, #28]
 8007176:	f887 6487 	strb.w	r6, [r7, #1159]	; 0x487
 800717a:	092e      	lsrs	r6, r5, #4
 800717c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007180:	f005 050f 	and.w	r5, r5, #15
 8007184:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8007188:	b2ed      	uxtb	r5, r5
 800718a:	9506      	str	r5, [sp, #24]
		rtcMin = DS3231_getMin();
 800718c:	f887 5488 	strb.w	r5, [r7, #1160]	; 0x488
 8007190:	0925      	lsrs	r5, r4, #4
 8007192:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007196:	f004 040f 	and.w	r4, r4, #15
 800719a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 800719e:	f887 4489 	strb.w	r4, [r7, #1161]	; 0x489
 80071a2:	0904      	lsrs	r4, r0, #4
 80071a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80071a8:	f000 000f 	and.w	r0, r0, #15
 80071ac:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 80071b0:	f887 048a 	strb.w	r0, [r7, #1162]	; 0x48a
 80071b4:	0908      	lsrs	r0, r1, #4
 80071b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80071ba:	f001 010f 	and.w	r1, r1, #15
 80071be:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 80071c2:	f887 148b 	strb.w	r1, [r7, #1163]	; 0x48b
 80071c6:	0911      	lsrs	r1, r2, #4
 80071c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80071cc:	f002 020f 	and.w	r2, r2, #15
 80071d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 80071d4:	f887 248c 	strb.w	r2, [r7, #1164]	; 0x48c
 80071d8:	091a      	lsrs	r2, r3, #4
 80071da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 80071e6:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
		if (rtcSecLast != rtcSec) {
 80071ea:	4b95      	ldr	r3, [pc, #596]	; (8007440 <main+0xde8>)
 80071ec:	7a1b      	ldrb	r3, [r3, #8]
 80071ee:	4563      	cmp	r3, ip
 80071f0:	d09e      	beq.n	8007130 <main+0xad8>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f04f 0b08 	mov.w	fp, #8
	P = 1 - radius;
 80071f8:	2001      	movs	r0, #1
 80071fa:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 80071fe:	f06f 0306 	mvn.w	r3, #6
 8007202:	e9cd 0304 	strd	r0, r3, [sp, #16]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007206:	4d8f      	ldr	r5, [pc, #572]	; (8007444 <main+0xdec>)
 8007208:	2301      	movs	r3, #1
 800720a:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800720e:	f10b 0723 	add.w	r7, fp, #35	; 0x23
 8007212:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007216:	b2bf      	uxth	r7, r7
 8007218:	fa1f f989 	uxth.w	r9, r9
 800721c:	4639      	mov	r1, r7
 800721e:	461a      	mov	r2, r3
 8007220:	4648      	mov	r0, r9
 8007222:	9500      	str	r5, [sp, #0]
 8007224:	f7f9 fc50 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007228:	2301      	movs	r3, #1
 800722a:	f104 0a23 	add.w	sl, r4, #35	; 0x23
 800722e:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007232:	b2b6      	uxth	r6, r6
 8007234:	fa1f fa8a 	uxth.w	sl, sl
 8007238:	4630      	mov	r0, r6
 800723a:	461a      	mov	r2, r3
 800723c:	4651      	mov	r1, sl
 800723e:	9500      	str	r5, [sp, #0]
 8007240:	f7f9 fc42 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007244:	2301      	movs	r3, #1
 8007246:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 800724a:	fa1f f888 	uxth.w	r8, r8
 800724e:	4639      	mov	r1, r7
 8007250:	461a      	mov	r2, r3
 8007252:	4640      	mov	r0, r8
 8007254:	9500      	str	r5, [sp, #0]
 8007256:	f7f9 fc37 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800725a:	2301      	movs	r3, #1
 800725c:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007260:	b2bf      	uxth	r7, r7
 8007262:	461a      	mov	r2, r3
 8007264:	4651      	mov	r1, sl
 8007266:	4638      	mov	r0, r7
 8007268:	9500      	str	r5, [sp, #0]
 800726a:	f7f9 fc2d 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800726e:	2301      	movs	r3, #1
 8007270:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8007274:	b2a4      	uxth	r4, r4
 8007276:	4621      	mov	r1, r4
 8007278:	4630      	mov	r0, r6
 800727a:	461a      	mov	r2, r3
 800727c:	9500      	str	r5, [sp, #0]
 800727e:	f7f9 fc23 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007282:	2301      	movs	r3, #1
 8007284:	f1cb 0623 	rsb	r6, fp, #35	; 0x23
 8007288:	b2b6      	uxth	r6, r6
 800728a:	4631      	mov	r1, r6
 800728c:	461a      	mov	r2, r3
 800728e:	4648      	mov	r0, r9
 8007290:	9500      	str	r5, [sp, #0]
 8007292:	f7f9 fc19 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007296:	2301      	movs	r3, #1
 8007298:	4631      	mov	r1, r6
 800729a:	461a      	mov	r2, r3
 800729c:	4640      	mov	r0, r8
 800729e:	9500      	str	r5, [sp, #0]
 80072a0:	f7f9 fc12 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80072a4:	2301      	movs	r3, #1
 80072a6:	4621      	mov	r1, r4
 80072a8:	461a      	mov	r2, r3
 80072aa:	4638      	mov	r0, r7
 80072ac:	9500      	str	r5, [sp, #0]
 80072ae:	f7f9 fc0b 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 80072b2:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 80072b6:	9b05      	ldr	r3, [sp, #20]
 80072b8:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 80072ba:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 80072bc:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 80072c0:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 80072c4:	f2c0 86bd 	blt.w	8008042 <main+0x19ea>
			a_++;
 80072c8:	9c04      	ldr	r4, [sp, #16]
			P = (P + 5) + (2 * (a_ - b_));
 80072ca:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80072ce:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80072d0:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 80072d2:	9a02      	ldr	r2, [sp, #8]
			b_--;
 80072d4:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80072d6:	3201      	adds	r2, #1
 80072d8:	3301      	adds	r3, #1
 80072da:	4284      	cmp	r4, r0
			b_--;
 80072dc:	9003      	str	r0, [sp, #12]
	while (a_ <= b_)
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	fa1f fb80 	uxth.w	fp, r0
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	dd8f      	ble.n	8007208 <main+0xbb0>
 80072e8:	2300      	movs	r3, #0
 80072ea:	f04f 0b08 	mov.w	fp, #8
 80072ee:	2101      	movs	r1, #1
 80072f0:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 80072f4:	f06f 0306 	mvn.w	r3, #6
 80072f8:	e9cd 1304 	strd	r1, r3, [sp, #16]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80072fc:	4d51      	ldr	r5, [pc, #324]	; (8007444 <main+0xdec>)
 80072fe:	2301      	movs	r3, #1
 8007300:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8007304:	f10b 074b 	add.w	r7, fp, #75	; 0x4b
 8007308:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800730c:	b2bf      	uxth	r7, r7
 800730e:	fa1f f989 	uxth.w	r9, r9
 8007312:	4639      	mov	r1, r7
 8007314:	461a      	mov	r2, r3
 8007316:	4648      	mov	r0, r9
 8007318:	9500      	str	r5, [sp, #0]
 800731a:	f7f9 fbd5 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800731e:	2301      	movs	r3, #1
 8007320:	f104 0a4b 	add.w	sl, r4, #75	; 0x4b
 8007324:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007328:	b2b6      	uxth	r6, r6
 800732a:	fa1f fa8a 	uxth.w	sl, sl
 800732e:	4630      	mov	r0, r6
 8007330:	461a      	mov	r2, r3
 8007332:	4651      	mov	r1, sl
 8007334:	9500      	str	r5, [sp, #0]
 8007336:	f7f9 fbc7 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 800733a:	2301      	movs	r3, #1
 800733c:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007340:	fa1f f888 	uxth.w	r8, r8
 8007344:	4639      	mov	r1, r7
 8007346:	461a      	mov	r2, r3
 8007348:	4640      	mov	r0, r8
 800734a:	9500      	str	r5, [sp, #0]
 800734c:	f7f9 fbbc 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007350:	2301      	movs	r3, #1
 8007352:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007356:	b2bf      	uxth	r7, r7
 8007358:	461a      	mov	r2, r3
 800735a:	4651      	mov	r1, sl
 800735c:	4638      	mov	r0, r7
 800735e:	9500      	str	r5, [sp, #0]
 8007360:	f7f9 fbb2 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007364:	2301      	movs	r3, #1
 8007366:	f1c4 044b 	rsb	r4, r4, #75	; 0x4b
 800736a:	b2a4      	uxth	r4, r4
 800736c:	4621      	mov	r1, r4
 800736e:	4630      	mov	r0, r6
 8007370:	461a      	mov	r2, r3
 8007372:	9500      	str	r5, [sp, #0]
 8007374:	f7f9 fba8 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007378:	2301      	movs	r3, #1
 800737a:	f1cb 064b 	rsb	r6, fp, #75	; 0x4b
 800737e:	b2b6      	uxth	r6, r6
 8007380:	4631      	mov	r1, r6
 8007382:	461a      	mov	r2, r3
 8007384:	4648      	mov	r0, r9
 8007386:	9500      	str	r5, [sp, #0]
 8007388:	f7f9 fb9e 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800738c:	2301      	movs	r3, #1
 800738e:	4631      	mov	r1, r6
 8007390:	461a      	mov	r2, r3
 8007392:	4640      	mov	r0, r8
 8007394:	9500      	str	r5, [sp, #0]
 8007396:	f7f9 fb97 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800739a:	2301      	movs	r3, #1
 800739c:	4621      	mov	r1, r4
 800739e:	461a      	mov	r2, r3
 80073a0:	4638      	mov	r0, r7
 80073a2:	9500      	str	r5, [sp, #0]
 80073a4:	f7f9 fb90 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 80073a8:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 80073ac:	9b05      	ldr	r3, [sp, #20]
 80073ae:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 80073b0:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 80073b2:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 80073b6:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 80073ba:	f2c0 85a7 	blt.w	8007f0c <main+0x18b4>
			a_++;
 80073be:	9c04      	ldr	r4, [sp, #16]
			P = (P + 5) + (2 * (a_ - b_));
 80073c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80073c4:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80073c6:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 80073c8:	9a02      	ldr	r2, [sp, #8]
			b_--;
 80073ca:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80073cc:	3201      	adds	r2, #1
 80073ce:	3301      	adds	r3, #1
 80073d0:	4284      	cmp	r4, r0
			b_--;
 80073d2:	9003      	str	r0, [sp, #12]
	while (a_ <= b_)
 80073d4:	9202      	str	r2, [sp, #8]
 80073d6:	fa1f fb80 	uxth.w	fp, r0
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	dd8f      	ble.n	80072fe <main+0xca6>
			if (rtcSec % 2 != 0) {
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	f013 0601 	ands.w	r6, r3, #1
 80073e4:	f000 85a3 	beq.w	8007f2e <main+0x18d6>
	b_ = radius;
 80073e8:	f04f 0807 	mov.w	r8, #7
 80073ec:	f04f 0a00 	mov.w	sl, #0
 80073f0:	2601      	movs	r6, #1
	P = 1 - radius;
 80073f2:	f06f 0705 	mvn.w	r7, #5
 80073f6:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80073f8:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80073fc:	f8df c044 	ldr.w	ip, [pc, #68]	; 8007444 <main+0xdec>
 8007400:	b2b5      	uxth	r5, r6
 8007402:	f10a 0b01 	add.w	fp, sl, #1
 8007406:	3401      	adds	r4, #1
 8007408:	b2a4      	uxth	r4, r4
 800740a:	fa1f fb8b 	uxth.w	fp, fp
 800740e:	f1c9 0123 	rsb	r1, r9, #35	; 0x23
 8007412:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007416:	4623      	mov	r3, r4
 8007418:	465a      	mov	r2, fp
 800741a:	b289      	uxth	r1, r1
 800741c:	b280      	uxth	r0, r0
 800741e:	f8cd c000 	str.w	ip, [sp]
 8007422:	f7f9 fb51 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007426:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8007444 <main+0xdec>
 800742a:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 800742e:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007432:	4622      	mov	r2, r4
 8007434:	e008      	b.n	8007448 <main+0xdf0>
 8007436:	bf00      	nop
 8007438:	20000200 	.word	0x20000200
 800743c:	20000528 	.word	0x20000528
 8007440:	20000000 	.word	0x20000000
 8007444:	00ffa500 	.word	0x00ffa500
 8007448:	b289      	uxth	r1, r1
 800744a:	465b      	mov	r3, fp
 800744c:	f8cd c000 	str.w	ip, [sp]
 8007450:	b280      	uxth	r0, r0
 8007452:	f7f9 fb39 	bl	8000ac8 <LCD_Rect_Fill>
 8007456:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007458:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 800745a:	eba4 0408 	sub.w	r4, r4, r8
 800745e:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007462:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007466:	f2c0 8605 	blt.w	8008074 <main+0x1a1c>
			b_--;
 800746a:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 800746e:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007470:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007474:	f10a 0a02 	add.w	sl, sl, #2
 8007478:	fa1f f988 	uxth.w	r9, r8
 800747c:	f106 0601 	add.w	r6, r6, #1
 8007480:	ddba      	ble.n	80073f8 <main+0xda0>
 8007482:	f04f 0807 	mov.w	r8, #7
 8007486:	f04f 0a00 	mov.w	sl, #0
 800748a:	2601      	movs	r6, #1
 800748c:	f06f 0705 	mvn.w	r7, #5
 8007490:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007492:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007496:	f8df c378 	ldr.w	ip, [pc, #888]	; 8007810 <main+0x11b8>
 800749a:	b2b5      	uxth	r5, r6
 800749c:	f10a 0b01 	add.w	fp, sl, #1
 80074a0:	3401      	adds	r4, #1
 80074a2:	b2a4      	uxth	r4, r4
 80074a4:	fa1f fb8b 	uxth.w	fp, fp
 80074a8:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 80074ac:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80074b0:	4623      	mov	r3, r4
 80074b2:	465a      	mov	r2, fp
 80074b4:	b289      	uxth	r1, r1
 80074b6:	b280      	uxth	r0, r0
 80074b8:	f8cd c000 	str.w	ip, [sp]
 80074bc:	f7f9 fb04 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80074c0:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8007810 <main+0x11b8>
 80074c4:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 80074c8:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 80074cc:	4622      	mov	r2, r4
 80074ce:	b289      	uxth	r1, r1
 80074d0:	465b      	mov	r3, fp
 80074d2:	f8cd c000 	str.w	ip, [sp]
 80074d6:	b280      	uxth	r0, r0
 80074d8:	f7f9 faf6 	bl	8000ac8 <LCD_Rect_Fill>
 80074dc:	1e74      	subs	r4, r6, #1
		if (P < 0)
 80074de:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 80074e0:	eba4 0408 	sub.w	r4, r4, r8
 80074e4:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 80074e8:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 80074ec:	f2c0 85b7 	blt.w	800805e <main+0x1a06>
			b_--;
 80074f0:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 80074f4:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 80074f6:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 80074fa:	f10a 0a02 	add.w	sl, sl, #2
 80074fe:	fa1f f988 	uxth.w	r9, r8
 8007502:	f106 0601 	add.w	r6, r6, #1
 8007506:	ddc4      	ble.n	8007492 <main+0xe3a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007508:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800750c:	4bc1      	ldr	r3, [pc, #772]	; (8007814 <main+0x11bc>)
 800750e:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 8007510:	4dc1      	ldr	r5, [pc, #772]	; (8007818 <main+0x11c0>)
 8007512:	9b06      	ldr	r3, [sp, #24]
 8007514:	7a6a      	ldrb	r2, [r5, #9]
 8007516:	429a      	cmp	r2, r3
 8007518:	f000 80af 	beq.w	800767a <main+0x1022>
				sprintf(clockPrint, "%02d", rtcMinLast);
 800751c:	49bf      	ldr	r1, [pc, #764]	; (800781c <main+0x11c4>)
				sprintf(clockPrint, "%02d", rtcMin);
 800751e:	4cc0      	ldr	r4, [pc, #768]	; (8007820 <main+0x11c8>)
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007520:	a826      	add	r0, sp, #152	; 0x98
 8007522:	f001 fdd1 	bl	80090c8 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007526:	2200      	movs	r2, #0
 8007528:	20b4      	movs	r0, #180	; 0xb4
 800752a:	a926      	add	r1, sp, #152	; 0x98
 800752c:	f7fc fe68 	bl	8004200 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007530:	f894 2488 	ldrb.w	r2, [r4, #1160]	; 0x488
 8007534:	49b9      	ldr	r1, [pc, #740]	; (800781c <main+0x11c4>)
 8007536:	a826      	add	r0, sp, #152	; 0x98
 8007538:	f001 fdc6 	bl	80090c8 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 800753c:	4ab4      	ldr	r2, [pc, #720]	; (8007810 <main+0x11b8>)
 800753e:	20b4      	movs	r0, #180	; 0xb4
 8007540:	a926      	add	r1, sp, #152	; 0x98
 8007542:	f7fc fe5d 	bl	8004200 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 8007546:	7aaa      	ldrb	r2, [r5, #10]
 8007548:	f894 3489 	ldrb.w	r3, [r4, #1161]	; 0x489
 800754c:	4293      	cmp	r3, r2
 800754e:	f000 808f 	beq.w	8007670 <main+0x1018>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8007552:	49b2      	ldr	r1, [pc, #712]	; (800781c <main+0x11c4>)
 8007554:	a826      	add	r0, sp, #152	; 0x98
 8007556:	f001 fdb7 	bl	80090c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800755a:	2200      	movs	r2, #0
					if (rtcDayLast != rtcDay) {
 800755c:	4627      	mov	r7, r4
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800755e:	4610      	mov	r0, r2
 8007560:	a926      	add	r1, sp, #152	; 0x98
 8007562:	f7fc fe4d 	bl	8004200 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 8007566:	f894 2489 	ldrb.w	r2, [r4, #1161]	; 0x489
 800756a:	49ac      	ldr	r1, [pc, #688]	; (800781c <main+0x11c4>)
 800756c:	a826      	add	r0, sp, #152	; 0x98
 800756e:	f001 fdab 	bl	80090c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007572:	2000      	movs	r0, #0
 8007574:	4aa6      	ldr	r2, [pc, #664]	; (8007810 <main+0x11b8>)
 8007576:	a926      	add	r1, sp, #152	; 0x98
 8007578:	f7fc fe42 	bl	8004200 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 800757c:	f894 448a 	ldrb.w	r4, [r4, #1162]	; 0x48a
 8007580:	f897 348e 	ldrb.w	r3, [r7, #1166]	; 0x48e
 8007584:	42a3      	cmp	r3, r4
 8007586:	d062      	beq.n	800764e <main+0xff6>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8007588:	2607      	movs	r6, #7
 800758a:	1d63      	adds	r3, r4, #5
 800758c:	fbb3 f1f6 	udiv	r1, r3, r6
 8007590:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8007824 <main+0x11cc>
 8007594:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007598:	1a5b      	subs	r3, r3, r1
 800759a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800759e:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 80075a2:	2200      	movs	r2, #0
 80075a4:	2002      	movs	r0, #2
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80075a6:	3406      	adds	r4, #6
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 80075a8:	f7fc fde2 	bl	8004170 <LCD_Font.constprop.0>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80075ac:	fbb4 f6f6 	udiv	r6, r4, r6
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 80075b0:	250c      	movs	r5, #12
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80075b2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80075b6:	1ba4      	subs	r4, r4, r6
 80075b8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80075bc:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 80075c0:	2002      	movs	r0, #2
 80075c2:	4a99      	ldr	r2, [pc, #612]	; (8007828 <main+0x11d0>)
 80075c4:	f7fc fdd4 	bl	8004170 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80075c8:	f897 3491 	ldrb.w	r3, [r7, #1169]	; 0x491
 80075cc:	4997      	ldr	r1, [pc, #604]	; (800782c <main+0x11d4>)
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 80075d4:	f897 2490 	ldrb.w	r2, [r7, #1168]	; 0x490
 80075d8:	a826      	add	r0, sp, #152	; 0x98
 80075da:	f001 fd75 	bl	80090c8 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 80075de:	2200      	movs	r2, #0
 80075e0:	2064      	movs	r0, #100	; 0x64
 80075e2:	a926      	add	r1, sp, #152	; 0x98
 80075e4:	f7fc fdc4 	bl	8004170 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 80075e8:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 80075ec:	498f      	ldr	r1, [pc, #572]	; (800782c <main+0x11d4>)
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 80075f4:	f897 248b 	ldrb.w	r2, [r7, #1163]	; 0x48b
 80075f8:	a826      	add	r0, sp, #152	; 0x98
 80075fa:	f001 fd65 	bl	80090c8 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 80075fe:	2064      	movs	r0, #100	; 0x64
 8007600:	4a89      	ldr	r2, [pc, #548]	; (8007828 <main+0x11d0>)
 8007602:	a926      	add	r1, sp, #152	; 0x98
 8007604:	f7fc fdb4 	bl	8004170 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 8007608:	f897 448c 	ldrb.w	r4, [r7, #1164]	; 0x48c
 800760c:	2200      	movs	r2, #0
 800760e:	f104 030a 	add.w	r3, r4, #10
 8007612:	fbb3 f1f5 	udiv	r1, r3, r5
 8007616:	fb05 3311 	mls	r3, r5, r1, r3
 800761a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800761e:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 8007622:	f44f 708c 	mov.w	r0, #280	; 0x118
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 8007626:	340b      	adds	r4, #11
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 8007628:	f7fc fda2 	bl	8004170 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 800762c:	fbb4 f3f5 	udiv	r3, r4, r5
 8007630:	fb05 4413 	mls	r4, r5, r3, r4
 8007634:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007638:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 800763c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8007640:	4a79      	ldr	r2, [pc, #484]	; (8007828 <main+0x11d0>)
 8007642:	f7fc fd95 	bl	8004170 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 8007646:	f897 348a 	ldrb.w	r3, [r7, #1162]	; 0x48a
 800764a:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
					rtcDateLast = rtcDate;
 800764e:	4a74      	ldr	r2, [pc, #464]	; (8007820 <main+0x11c8>)
 8007650:	f892 348b 	ldrb.w	r3, [r2, #1163]	; 0x48b
 8007654:	f882 3490 	strb.w	r3, [r2, #1168]	; 0x490
					rtcMonthLast = rtcMonth;
 8007658:	f892 348c 	ldrb.w	r3, [r2, #1164]	; 0x48c
 800765c:	f882 348f 	strb.w	r3, [r2, #1167]	; 0x48f
					rtcYearLast = rtcYear;
 8007660:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 8007664:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
					rtcHrsLast = rtcHrs;
 8007668:	f892 3489 	ldrb.w	r3, [r2, #1161]	; 0x489
 800766c:	4a6a      	ldr	r2, [pc, #424]	; (8007818 <main+0x11c0>)
 800766e:	7293      	strb	r3, [r2, #10]
				rtcMinLast = rtcMin;
 8007670:	4b6b      	ldr	r3, [pc, #428]	; (8007820 <main+0x11c8>)
 8007672:	4a69      	ldr	r2, [pc, #420]	; (8007818 <main+0x11c0>)
 8007674:	f893 3488 	ldrb.w	r3, [r3, #1160]	; 0x488
 8007678:	7253      	strb	r3, [r2, #9]
    cmd[0] = 0xFA; // temp_msb
 800767a:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800767c:	2201      	movs	r2, #1
 800767e:	20ec      	movs	r0, #236	; 0xec
 8007680:	a922      	add	r1, sp, #136	; 0x88
    cmd[0] = 0xFA; // temp_msb
 8007682:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007686:	f7fc fb8b 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 800768a:	2203      	movs	r2, #3
 800768c:	20ec      	movs	r0, #236	; 0xec
 800768e:	f10d 0189 	add.w	r1, sp, #137	; 0x89
 8007692:	f7fc f973 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007696:	f89d 308a 	ldrb.w	r3, [sp, #138]	; 0x8a
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800769a:	4c61      	ldr	r4, [pc, #388]	; (8007820 <main+0x11c8>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800769c:	f89d 2089 	ldrb.w	r2, [sp, #137]	; 0x89
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80076a6:	f89d 108b 	ldrb.w	r1, [sp, #139]	; 0x8b
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80076aa:	f8b4 2462 	ldrh.w	r2, [r4, #1122]	; 0x462
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80076ae:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80076b2:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 80076b6:	fb03 f903 	mul.w	r9, r3, r3
 80076ba:	f9b4 3466 	ldrsh.w	r3, [r4, #1126]	; 0x466
 80076be:	ea4f 3919 	mov.w	r9, r9, lsr #12
 80076c2:	fb03 f909 	mul.w	r9, r3, r9
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80076c6:	0052      	lsls	r2, r2, #1
 80076c8:	f9b4 3464 	ldrsh.w	r3, [r4, #1124]	; 0x464
 80076cc:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 80076d0:	fb03 f202 	mul.w	r2, r3, r2
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80076d4:	ea4f 3999 	mov.w	r9, r9, lsr #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80076d8:	eb09 29d2 	add.w	r9, r9, r2, lsr #11
    temp = (temp * 5 + 128) >> 8;
 80076dc:	eb09 0089 	add.w	r0, r9, r9, lsl #2
 80076e0:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 80076e2:	f8c4 9494 	str.w	r9, [r4, #1172]	; 0x494
    tempf = (float) temp;
 80076e6:	1200      	asrs	r0, r0, #8
 80076e8:	f7fe ff42 	bl	8006570 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 80076ec:	4950      	ldr	r1, [pc, #320]	; (8007830 <main+0x11d8>)
 80076ee:	f7fe fdd1 	bl	8006294 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80076f2:	f7fe f981 	bl	80059f8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b4e      	ldr	r3, [pc, #312]	; (8007834 <main+0x11dc>)
 80076fa:	f7fe f9d5 	bl	8005aa8 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <main+0x11e0>)
 8007702:	f7fe f81b 	bl	800573c <__adddf3>
 8007706:	f005 fa9f 	bl	800cc48 <floor>
 800770a:	a33f      	add	r3, pc, #252	; (adr r3, 8007808 <main+0x11b0>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7fe f9ca 	bl	8005aa8 <__aeabi_dmul>
 8007714:	f7fe fcc0 	bl	8006098 <__aeabi_d2f>
 8007718:	4680      	mov	r8, r0
	temperature = BME280_getTemperature(-1);
 800771a:	f7fe f96d 	bl	80059f8 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 800771e:	23fd      	movs	r3, #253	; 0xfd
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007724:	2201      	movs	r2, #1
 8007726:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xFD; // hum_msb
 8007728:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800772c:	a922      	add	r1, sp, #136	; 0x88
 800772e:	f504 6394 	add.w	r3, r4, #1184	; 0x4a0
 8007732:	e943 6702 	strd	r6, r7, [r3, #-8]
 8007736:	f7fc fb33 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 800773a:	2202      	movs	r2, #2
 800773c:	20ec      	movs	r0, #236	; 0xec
 800773e:	f10d 0189 	add.w	r1, sp, #137	; 0x89
 8007742:	f7fc f91b 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007746:	f8b4 347e 	ldrh.w	r3, [r4, #1150]	; 0x47e
    v_x1 = t_fine - 76800;
 800774a:	f5a9 3296 	sub.w	r2, r9, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800774e:	f9b4 1484 	ldrsh.w	r1, [r4, #1156]	; 0x484
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007752:	fb02 f303 	mul.w	r3, r2, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007756:	fb02 f101 	mul.w	r1, r2, r1
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800775a:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800775c:	1289      	asrs	r1, r1, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800775e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007762:	fb01 f303 	mul.w	r3, r1, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007766:	f8bd 1089 	ldrh.w	r1, [sp, #137]	; 0x89
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800776a:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 800776c:	ba49      	rev16	r1, r1
 800776e:	b288      	uxth	r0, r1
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007770:	f9b4 1480 	ldrsh.w	r1, [r4, #1152]	; 0x480
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007774:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007778:	0509      	lsls	r1, r1, #20
 800777a:	ebc1 3180 	rsb	r1, r1, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 800777e:	f9b4 047c 	ldrsh.w	r0, [r4, #1148]	; 0x47c
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007782:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007786:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800778a:	f9b4 0482 	ldrsh.w	r0, [r4, #1154]	; 0x482
                                            (int32_t) dig_H2 + 8192) >> 14));
 800778e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007792:	fb02 1210 	mls	r2, r2, r0, r1
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007796:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007798:	0bd2      	lsrs	r2, r2, #15
 800779a:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800779e:	13da      	asrs	r2, r3, #15
 80077a0:	fb02 f202 	mul.w	r2, r2, r2
 80077a4:	f8b4 147a 	ldrh.w	r1, [r4, #1146]	; 0x47a
 80077a8:	11d0      	asrs	r0, r2, #7
 80077aa:	fb01 f000 	mul.w	r0, r1, r0
 80077ae:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80077b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80077b6:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80077ba:	bfa8      	it	ge
 80077bc:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 80077c0:	1300      	asrs	r0, r0, #12
 80077c2:	f7fe fed5 	bl	8006570 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 80077c6:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80077ca:	f7fe fd63 	bl	8006294 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80077ce:	f7fe f913 	bl	80059f8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80077d2:	2200      	movs	r2, #0
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <main+0x11dc>)
 80077d6:	f7fe f967 	bl	8005aa8 <__aeabi_dmul>
 80077da:	2200      	movs	r2, #0
 80077dc:	4b16      	ldr	r3, [pc, #88]	; (8007838 <main+0x11e0>)
 80077de:	f7fd ffad 	bl	800573c <__adddf3>
 80077e2:	f005 fa31 	bl	800cc48 <floor>
 80077e6:	a308      	add	r3, pc, #32	; (adr r3, 8007808 <main+0x11b0>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7fe f95c 	bl	8005aa8 <__aeabi_dmul>
 80077f0:	f7fe fc52 	bl	8006098 <__aeabi_d2f>
 80077f4:	4682      	mov	sl, r0
	humidity = BME280_getHumidity(-1);
 80077f6:	f7fe f8ff 	bl	80059f8 <__aeabi_f2d>
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80077fa:	46a3      	mov	fp, r4
    cmd[0] = 0xF7; // press_msb
 80077fc:	23f7      	movs	r3, #247	; 0xf7
 80077fe:	4604      	mov	r4, r0
 8007800:	460d      	mov	r5, r1
 8007802:	e01b      	b.n	800783c <main+0x11e4>
 8007804:	f3af 8000 	nop.w
 8007808:	9999999a 	.word	0x9999999a
 800780c:	3fb99999 	.word	0x3fb99999
 8007810:	00ffa500 	.word	0x00ffa500
 8007814:	40011000 	.word	0x40011000
 8007818:	20000000 	.word	0x20000000
 800781c:	0801d670 	.word	0x0801d670
 8007820:	20000200 	.word	0x20000200
 8007824:	0800cd58 	.word	0x0800cd58
 8007828:	007f7f7f 	.word	0x007f7f7f
 800782c:	0801d678 	.word	0x0801d678
 8007830:	3c23d70a 	.word	0x3c23d70a
 8007834:	40240000 	.word	0x40240000
 8007838:	3fe00000 	.word	0x3fe00000
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800783c:	2201      	movs	r2, #1
 800783e:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF7; // press_msb
 8007840:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007844:	a922      	add	r1, sp, #136	; 0x88
 8007846:	f50b 6394 	add.w	r3, fp, #1184	; 0x4a0
    var1 = (t_fine >> 1) - 64000;
 800784a:	ea4f 0969 	mov.w	r9, r9, asr #1
 800784e:	e9c3 4500 	strd	r4, r5, [r3]
 8007852:	f5a9 497a 	sub.w	r9, r9, #64000	; 0xfa00
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007856:	f7fc faa3 	bl	8003da0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 800785a:	2203      	movs	r2, #3
 800785c:	20ec      	movs	r0, #236	; 0xec
 800785e:	f10d 0189 	add.w	r1, sp, #137	; 0x89
 8007862:	f7fc f88b 	bl	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007866:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800786a:	fb02 f202 	mul.w	r2, r2, r2
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 800786e:	f9bb 346a 	ldrsh.w	r3, [fp, #1130]	; 0x46a
 8007872:	f9bb 146c 	ldrsh.w	r1, [fp, #1132]	; 0x46c
 8007876:	fb09 f303 	mul.w	r3, r9, r3
 800787a:	1350      	asrs	r0, r2, #13
 800787c:	fb00 f101 	mul.w	r1, r0, r1
 8007880:	105b      	asrs	r3, r3, #1
 8007882:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007886:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8007888:	f8bb 1468 	ldrh.w	r1, [fp, #1128]	; 0x468
 800788c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007890:	fb01 f303 	mul.w	r3, r1, r3
    if (var1 == 0) {
 8007894:	13db      	asrs	r3, r3, #15
 8007896:	f000 840b 	beq.w	80080b0 <main+0x1a58>
    var2 = var2 + ((var1 * dig_P5) << 1);
 800789a:	f9bb 1470 	ldrsh.w	r1, [fp, #1136]	; 0x470
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800789e:	12d2      	asrs	r2, r2, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80078a0:	fb09 f901 	mul.w	r9, r9, r1
 80078a4:	ea4f 0149 	mov.w	r1, r9, lsl #1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80078a8:	f9bb 9472 	ldrsh.w	r9, [fp, #1138]	; 0x472
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80078ac:	f89d 0089 	ldrb.w	r0, [sp, #137]	; 0x89
    var2 = var2 + ((var1 * dig_P5) << 1);
 80078b0:	fb09 1902 	mla	r9, r9, r2, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80078b4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80078b8:	f89d 108a 	ldrb.w	r1, [sp, #138]	; 0x8a
 80078bc:	0912      	lsrs	r2, r2, #4
 80078be:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80078c2:	f9bb 146e 	ldrsh.w	r1, [fp, #1134]	; 0x46e
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80078c6:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80078ca:	0409      	lsls	r1, r1, #16
 80078cc:	eb01 01a9 	add.w	r1, r1, r9, asr #2
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80078d0:	eb02 3221 	add.w	r2, r2, r1, asr #12
 80078d4:	49c3      	ldr	r1, [pc, #780]	; (8007be4 <main+0x158c>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80078d6:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8007be8 <main+0x1590>
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80078da:	fb01 f202 	mul.w	r2, r1, r2
 80078de:	f102 4243 	add.w	r2, r2, #3271557120	; 0xc3000000
 80078e2:	f502 02a0 	add.w	r2, r2, #5242880	; 0x500000
    if (press < 0x80000000) {
 80078e6:	2a00      	cmp	r2, #0
        press = (press / var1) * 2;
 80078e8:	bfb3      	iteet	lt
 80078ea:	fbb2 f3f3 	udivlt	r3, r2, r3
        press = (press << 1) / var1;
 80078ee:	0052      	lslge	r2, r2, #1
 80078f0:	fbb2 f3f3 	udivge	r3, r2, r3
        press = (press / var1) * 2;
 80078f4:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 80078f6:	08da      	lsrs	r2, r3, #3
 80078f8:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80078fc:	f9b9 1476 	ldrsh.w	r1, [r9, #1142]	; 0x476
 8007900:	0898      	lsrs	r0, r3, #2
 8007902:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8007906:	f9b9 1478 	ldrsh.w	r1, [r9, #1144]	; 0x478
 800790a:	0b52      	lsrs	r2, r2, #13
 800790c:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8007910:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8007912:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8007916:	f9b9 2474 	ldrsh.w	r2, [r9, #1140]	; 0x474
 800791a:	4410      	add	r0, r2
    pressf = (float) press;
 800791c:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8007920:	f7fe fe22 	bl	8006568 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8007924:	49b1      	ldr	r1, [pc, #708]	; (8007bec <main+0x1594>)
 8007926:	f7fe fcb5 	bl	8006294 <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 800792a:	f7fe fe75 	bl	8006618 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800792e:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8007932:	f240 331e 	movw	r3, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8007936:	b280      	uxth	r0, r0
 8007938:	f8a9 04a8 	strh.w	r0, [r9, #1192]	; 0x4a8
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800793c:	4410      	add	r0, r2
 800793e:	b280      	uxth	r0, r0
 8007940:	4298      	cmp	r0, r3
 8007942:	f200 82ac 	bhi.w	8007e9e <main+0x1846>
 8007946:	4640      	mov	r0, r8
 8007948:	49a9      	ldr	r1, [pc, #676]	; (8007bf0 <main+0x1598>)
 800794a:	f7fe fc43 	bl	80061d4 <__aeabi_fcmplt>
 800794e:	2800      	cmp	r0, #0
 8007950:	f000 82a5 	beq.w	8007e9e <main+0x1846>
 8007954:	4640      	mov	r0, r8
 8007956:	49a7      	ldr	r1, [pc, #668]	; (8007bf4 <main+0x159c>)
 8007958:	f7fe fc5a 	bl	8006210 <__aeabi_fcmpgt>
 800795c:	2800      	cmp	r0, #0
 800795e:	f000 829e 	beq.w	8007e9e <main+0x1846>
 8007962:	4650      	mov	r0, sl
 8007964:	2100      	movs	r1, #0
 8007966:	f7fe fc53 	bl	8006210 <__aeabi_fcmpgt>
 800796a:	2800      	cmp	r0, #0
 800796c:	f000 8297 	beq.w	8007e9e <main+0x1846>
 8007970:	4650      	mov	r0, sl
 8007972:	49a1      	ldr	r1, [pc, #644]	; (8007bf8 <main+0x15a0>)
 8007974:	f7fe fc2e 	bl	80061d4 <__aeabi_fcmplt>
 8007978:	2800      	cmp	r0, #0
 800797a:	f000 8290 	beq.w	8007e9e <main+0x1846>
		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 800797e:	f509 6396 	add.w	r3, r9, #1200	; 0x4b0
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	e9d3 6700 	ldrd	r6, r7, [r3]
 800798a:	4632      	mov	r2, r6
 800798c:	463b      	mov	r3, r7
 800798e:	f7fe faf3 	bl	8005f78 <__aeabi_dcmpeq>
 8007992:	2800      	cmp	r0, #0
 8007994:	f040 83a9 	bne.w	80080ea <main+0x1a92>
 8007998:	4640      	mov	r0, r8
 800799a:	4998      	ldr	r1, [pc, #608]	; (8007bfc <main+0x15a4>)
 800799c:	f7fe fc24 	bl	80061e8 <__aeabi_fcmple>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f000 83a2 	beq.w	80080ea <main+0x1a92>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80079a6:	2200      	movs	r2, #0
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	4b94      	ldr	r3, [pc, #592]	; (8007c00 <main+0x15a8>)
 80079ae:	f7fe fb01 	bl	8005fb4 <__aeabi_dcmpge>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f040 8433 	bne.w	800821e <main+0x1bc6>
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7fe fae4 	bl	8005f8c <__aeabi_dcmplt>
 80079c4:	2200      	movs	r2, #0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f040 8436 	bne.w	8008238 <main+0x1be0>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	4639      	mov	r1, r7
 80079d2:	f7fe faf9 	bl	8005fc8 <__aeabi_dcmpgt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f040 8474 	bne.w	80082c4 <main+0x1c6c>
			else if (temperatureLast <= -10) {
 80079dc:	2200      	movs	r2, #0
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	4b88      	ldr	r3, [pc, #544]	; (8007c04 <main+0x15ac>)
 80079e4:	f7fe fadc 	bl	8005fa0 <__aeabi_dcmple>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 8434 	bne.w	8008256 <main+0x1bfe>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80079ee:	4986      	ldr	r1, [pc, #536]	; (8007c08 <main+0x15b0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	e951 4502 	ldrd	r4, r5, [r1, #-8]
 80079f6:	4b82      	ldr	r3, [pc, #520]	; (8007c00 <main+0x15a8>)
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7fe fada 	bl	8005fb4 <__aeabi_dcmpge>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	f040 8458 	bne.w	80082b6 <main+0x1c5e>
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7fe fabd 	bl	8005f8c <__aeabi_dcmplt>
 8007a12:	2200      	movs	r2, #0
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f040 842f 	bne.w	8008278 <main+0x1c20>
			else if (temperature < 10 && temperature > 0) {
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	f7fe fad2 	bl	8005fc8 <__aeabi_dcmpgt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f040 845a 	bne.w	80082de <main+0x1c86>
			else if (temperature <= -10) {
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4b74      	ldr	r3, [pc, #464]	; (8007c04 <main+0x15ac>)
 8007a32:	f7fe fab5 	bl	8005fa0 <__aeabi_dcmple>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f040 842b 	bne.w	8008292 <main+0x1c3a>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8007a3c:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8007c08 <main+0x15b0>
 8007a40:	e9dc 6700 	ldrd	r6, r7, [ip]
 8007a44:	e9dc 4506 	ldrd	r4, r5, [ip, #24]
			temperatureLast = temperature;
 8007a48:	e95c 8902 	ldrd	r8, r9, [ip, #-8]
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
			temperatureLast = temperature;
 8007a54:	e9cc 8904 	strd	r8, r9, [ip, #16]
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8007a58:	f7fe fa8e 	bl	8005f78 <__aeabi_dcmpeq>
 8007a5c:	b978      	cbnz	r0, 8007a7e <main+0x1426>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2300      	movs	r3, #0
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7fe faa5 	bl	8005fb4 <__aeabi_dcmpge>
 8007a6a:	b140      	cbz	r0, 8007a7e <main+0x1426>
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	4639      	mov	r1, r7
 8007a70:	2200      	movs	r2, #0
 8007a72:	4b66      	ldr	r3, [pc, #408]	; (8007c0c <main+0x15b4>)
 8007a74:	f7fe fa8a 	bl	8005f8c <__aeabi_dcmplt>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f040 8342 	bne.w	8008102 <main+0x1aaa>
		if (pressureLast != pressure) {
 8007a7e:	4b5a      	ldr	r3, [pc, #360]	; (8007be8 <main+0x1590>)
 8007a80:	f8b3 24c0 	ldrh.w	r2, [r3, #1216]	; 0x4c0
 8007a84:	f8b3 34a8 	ldrh.w	r3, [r3, #1192]	; 0x4a8
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d024      	beq.n	8007ad6 <main+0x147e>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007a8c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007a90:	bf2c      	ite	cs
 8007a92:	495f      	ldrcs	r1, [pc, #380]	; (8007c10 <main+0x15b8>)
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 8007a94:	495f      	ldrcc	r1, [pc, #380]	; (8007c14 <main+0x15bc>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007a96:	a822      	add	r0, sp, #136	; 0x88
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 8007a98:	f001 fb16 	bl	80090c8 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 8007a9c:	21bb      	movs	r1, #187	; 0xbb
 8007a9e:	f240 1041 	movw	r0, #321	; 0x141
 8007aa2:	aa22      	add	r2, sp, #136	; 0x88
 8007aa4:	f7fc fbf6 	bl	8004294 <LCD_Font.constprop.2>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8007aa8:	4b4f      	ldr	r3, [pc, #316]	; (8007be8 <main+0x1590>)
 8007aaa:	a822      	add	r0, sp, #136	; 0x88
 8007aac:	f8b3 24a8 	ldrh.w	r2, [r3, #1192]	; 0x4a8
 8007ab0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007ab4:	bf2c      	ite	cs
 8007ab6:	4956      	ldrcs	r1, [pc, #344]	; (8007c10 <main+0x15b8>)
			else sprintf(weatherPrintP, " %02d HP", pressure);
 8007ab8:	4956      	ldrcc	r1, [pc, #344]	; (8007c14 <main+0x15bc>)
 8007aba:	f001 fb05 	bl	80090c8 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8007abe:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <main+0x15c0>)
 8007ac0:	aa22      	add	r2, sp, #136	; 0x88
 8007ac2:	21bb      	movs	r1, #187	; 0xbb
 8007ac4:	f240 1041 	movw	r0, #321	; 0x141
 8007ac8:	f7fd fd66 	bl	8005598 <LCD_Font.constprop.3>
			pressureLast = pressure;
 8007acc:	4a46      	ldr	r2, [pc, #280]	; (8007be8 <main+0x1590>)
 8007ace:	f8b2 34a8 	ldrh.w	r3, [r2, #1192]	; 0x4a8
 8007ad2:	f8a2 34c0 	strh.w	r3, [r2, #1216]	; 0x4c0
    uint16_t dt[1] = {0};
 8007ad6:	2400      	movs	r4, #0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007ad8:	a922      	add	r1, sp, #136	; 0x88
 8007ada:	4620      	mov	r0, r4
    uint16_t dt[1] = {0};
 8007adc:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007ae0:	f7fb fc14 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
		if (AT24XX_Read(0) != rtcHrs) {
 8007ae4:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <main+0x1590>)
    return dt[0];
 8007ae6:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8007aea:	f892 1489 	ldrb.w	r1, [r2, #1161]	; 0x489
 8007aee:	4299      	cmp	r1, r3
 8007af0:	f000 82f4 	beq.w	80080dc <main+0x1a84>
			AT24XX_Update(0, rtcHrs);
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7fb fe69 	bl	80037cc <AT24XX_Update>
 8007afa:	4e48      	ldr	r6, [pc, #288]	; (8007c1c <main+0x15c4>)
 8007afc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007afe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007b02:	b2b5      	uxth	r5, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b04:	eb08 0005 	add.w	r0, r8, r5
 8007b08:	b280      	uxth	r0, r0
 8007b0a:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007b0c:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b10:	f7fb fbfc 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007b14:	1978      	adds	r0, r7, r5
 8007b16:	b280      	uxth	r0, r0
    return dt[0];
 8007b18:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b1c:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007b1e:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b22:	f7fb fbf3 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007b26:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
	return (byteH << 8) | byteL;
 8007b2a:	b2ed      	uxtb	r5, r5
 8007b2c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007b30:	4b3b      	ldr	r3, [pc, #236]	; (8007c20 <main+0x15c8>)
 8007b32:	f826 5f02 	strh.w	r5, [r6, #2]!
 8007b36:	42b3      	cmp	r3, r6
 8007b38:	d1e3      	bne.n	8007b02 <main+0x14aa>
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 8007b3a:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
			hT[155] = (uint16_t) (temperature * 10);
 8007b3e:	4c37      	ldr	r4, [pc, #220]	; (8007c1c <main+0x15c4>)
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 8007b40:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007b44:	1e88      	subs	r0, r1, #2
 8007b46:	f004 faf5 	bl	800c134 <memmove>
			hT[155] = (uint16_t) (temperature * 10);
 8007b4a:	f204 31f2 	addw	r1, r4, #1010	; 0x3f2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007b54:	4b2a      	ldr	r3, [pc, #168]	; (8007c00 <main+0x15a8>)
 8007b56:	f7fd ffa7 	bl	8005aa8 <__aeabi_dmul>
 8007b5a:	f7fe fa7d 	bl	8006058 <__aeabi_d2uiz>
 8007b5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007b60:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007b62:	f8a4 0138 	strh.w	r0, [r4, #312]	; 0x138
				AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8007b66:	1930      	adds	r0, r6, r4
 8007b68:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8007b6c:	b280      	uxth	r0, r0
 8007b6e:	b2e9      	uxtb	r1, r5
 8007b70:	f7fb fe2c 	bl	80037cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8007b74:	1938      	adds	r0, r7, r4
 8007b76:	0a29      	lsrs	r1, r5, #8
 8007b78:	b280      	uxth	r0, r0
 8007b7a:	f7fb fe27 	bl	80037cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007b7e:	4b28      	ldr	r3, [pc, #160]	; (8007c20 <main+0x15c8>)
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d1f0      	bne.n	8007b66 <main+0x150e>
    uint16_t dt[1] = {0};
 8007b84:	2400      	movs	r4, #0
 8007b86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007b88:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007b8c:	1c9e      	adds	r6, r3, #2
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007b8e:	b2b5      	uxth	r5, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b90:	eb08 0005 	add.w	r0, r8, r5
 8007b94:	b280      	uxth	r0, r0
 8007b96:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007b98:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007b9c:	f7fb fbb6 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007ba0:	1978      	adds	r0, r7, r5
 8007ba2:	b280      	uxth	r0, r0
    return dt[0];
 8007ba4:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007ba8:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007baa:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007bae:	f7fb fbad 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007bb2:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
	return (byteH << 8) | byteL;
 8007bb6:	b2ed      	uxtb	r5, r5
 8007bb8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <main+0x15cc>)
 8007bbe:	f826 5f02 	strh.w	r5, [r6, #2]!
 8007bc2:	42b3      	cmp	r3, r6
 8007bc4:	d1e3      	bne.n	8007b8e <main+0x1536>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8007bc6:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
			hH[155] = (uint16_t) (humidity * 10);
 8007bca:	4c17      	ldr	r4, [pc, #92]	; (8007c28 <main+0x15d0>)
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8007bcc:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007bd0:	1e88      	subs	r0, r1, #2
 8007bd2:	f004 faaf 	bl	800c134 <memmove>
			hH[155] = (uint16_t) (humidity * 10);
 8007bd6:	f204 21b6 	addw	r1, r4, #694	; 0x2b6
 8007bda:	2200      	movs	r2, #0
 8007bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be0:	e024      	b.n	8007c2c <main+0x15d4>
 8007be2:	bf00      	nop
 8007be4:	fffff3cb 	.word	0xfffff3cb
 8007be8:	20000200 	.word	0x20000200
 8007bec:	3c23d70a 	.word	0x3c23d70a
 8007bf0:	42aa0000 	.word	0x42aa0000
 8007bf4:	c2200000 	.word	0xc2200000
 8007bf8:	42c80000 	.word	0x42c80000
 8007bfc:	42200000 	.word	0x42200000
 8007c00:	40240000 	.word	0x40240000
 8007c04:	c0240000 	.word	0xc0240000
 8007c08:	200006a0 	.word	0x200006a0
 8007c0c:	40590000 	.word	0x40590000
 8007c10:	0801d6a8 	.word	0x0801d6a8
 8007c14:	0801d6b0 	.word	0x0801d6b0
 8007c18:	007f7f7f 	.word	0x007f7f7f
 8007c1c:	200002ae 	.word	0x200002ae
 8007c20:	200003e8 	.word	0x200003e8
 8007c24:	20000524 	.word	0x20000524
 8007c28:	200003ea 	.word	0x200003ea
 8007c2c:	4bad      	ldr	r3, [pc, #692]	; (8007ee4 <main+0x188c>)
 8007c2e:	f7fd ff3b 	bl	8005aa8 <__aeabi_dmul>
 8007c32:	f7fe fa11 	bl	8006058 <__aeabi_d2uiz>
 8007c36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007c38:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007c3a:	f8a4 0138 	strh.w	r0, [r4, #312]	; 0x138
				AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8007c3e:	1930      	adds	r0, r6, r4
 8007c40:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8007c44:	b280      	uxth	r0, r0
 8007c46:	b2e9      	uxtb	r1, r5
 8007c48:	f7fb fdc0 	bl	80037cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8007c4c:	1938      	adds	r0, r7, r4
 8007c4e:	0a29      	lsrs	r1, r5, #8
 8007c50:	b280      	uxth	r0, r0
 8007c52:	f7fb fdbb 	bl	80037cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007c56:	4ba4      	ldr	r3, [pc, #656]	; (8007ee8 <main+0x1890>)
 8007c58:	429c      	cmp	r4, r3
 8007c5a:	d1f0      	bne.n	8007c3e <main+0x15e6>
    uint16_t dt[1] = {0};
 8007c5c:	2400      	movs	r4, #0
 8007c5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c64:	1c9e      	adds	r6, r3, #2
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007c66:	b2b5      	uxth	r5, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c68:	eb08 0005 	add.w	r0, r8, r5
 8007c6c:	b280      	uxth	r0, r0
 8007c6e:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007c70:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c74:	f7fb fb4a 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007c78:	1978      	adds	r0, r7, r5
 8007c7a:	b280      	uxth	r0, r0
    return dt[0];
 8007c7c:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c80:	a922      	add	r1, sp, #136	; 0x88
    uint16_t dt[1] = {0};
 8007c82:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c86:	f7fb fb41 	bl	800330c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007c8a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
	return (byteH << 8) | byteL;
 8007c8e:	b2ed      	uxtb	r5, r5
 8007c90:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007c94:	4b95      	ldr	r3, [pc, #596]	; (8007eec <main+0x1894>)
 8007c96:	f826 5f02 	strh.w	r5, [r6, #2]!
 8007c9a:	429e      	cmp	r6, r3
 8007c9c:	d1e3      	bne.n	8007c66 <main+0x160e>
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 8007c9e:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
			hP[155] = (uint16_t)pressure;
 8007ca2:	f5a3 749d 	sub.w	r4, r3, #314	; 0x13a
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 8007ca6:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007caa:	1e88      	subs	r0, r1, #2
 8007cac:	f004 fa42 	bl	800c134 <memmove>
			hP[155] = (uint16_t)pressure;
 8007cb0:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
 8007cb4:	9e08      	ldr	r6, [sp, #32]
 8007cb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007cb8:	f8a4 3138 	strh.w	r3, [r4, #312]	; 0x138
				AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8007cbc:	1930      	adds	r0, r6, r4
 8007cbe:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8007cc2:	b280      	uxth	r0, r0
 8007cc4:	b2e9      	uxtb	r1, r5
 8007cc6:	f7fb fd81 	bl	80037cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8007cca:	1938      	adds	r0, r7, r4
 8007ccc:	0a29      	lsrs	r1, r5, #8
 8007cce:	b280      	uxth	r0, r0
 8007cd0:	f7fb fd7c 	bl	80037cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007cd4:	4b85      	ldr	r3, [pc, #532]	; (8007eec <main+0x1894>)
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	d1f0      	bne.n	8007cbc <main+0x1664>
	LCD_Line(x, y, x + w, y, size, color24);
 8007cda:	23be      	movs	r3, #190	; 0xbe
 8007cdc:	229f      	movs	r2, #159	; 0x9f
 8007cde:	4619      	mov	r1, r3
 8007ce0:	2002      	movs	r0, #2
 8007ce2:	f7fa fcd5 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007ce6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007cea:	229f      	movs	r2, #159	; 0x9f
 8007cec:	4619      	mov	r1, r3
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f7fa fcce 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	21be      	movs	r1, #190	; 0xbe
 8007cfe:	f7fa fcc7 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007d02:	229f      	movs	r2, #159	; 0x9f
 8007d04:	2503      	movs	r5, #3
 8007d06:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007d0a:	21be      	movs	r1, #190	; 0xbe
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fa fcbf 	bl	8002690 <LCD_Line.constprop.1>
 8007d12:	4e77      	ldr	r6, [pc, #476]	; (8007ef0 <main+0x1898>)
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8007d14:	4f77      	ldr	r7, [pc, #476]	; (8007ef4 <main+0x189c>)
 8007d16:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8007d1a:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8007d1e:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8007d20:	fb87 0103 	smull	r0, r1, r7, r3
 8007d24:	17db      	asrs	r3, r3, #31
 8007d26:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b14      	subs	r3, #20
 8007d2e:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8007d32:	fb87 0103 	smull	r0, r1, r7, r3
 8007d36:	17dc      	asrs	r4, r3, #31
 8007d38:	ebc4 04a1 	rsb	r4, r4, r1, asr #2
 8007d3c:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8007d3e:	4628      	mov	r0, r5
 8007d40:	2300      	movs	r3, #0
 8007d42:	21bf      	movs	r1, #191	; 0xbf
 8007d44:	f384 0407 	usat	r4, #7, r4
 8007d48:	f7f9 fe3c 	bl	80019c4 <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8007d4c:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8007d54:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8007d58:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8007d62:	b289      	uxth	r1, r1
 8007d64:	462a      	mov	r2, r5
 8007d66:	f7f9 fe2d 	bl	80019c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	45b0      	cmp	r8, r6
 8007d6e:	b2ad      	uxth	r5, r5
 8007d70:	d1d3      	bne.n	8007d1a <main+0x16c2>
	LCD_Line(x, y, x + w, y, size, color24);
 8007d72:	23be      	movs	r3, #190	; 0xbe
 8007d74:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007d78:	4619      	mov	r1, r3
 8007d7a:	20a1      	movs	r0, #161	; 0xa1
 8007d7c:	f7fa fc88 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007d80:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007d84:	20a1      	movs	r0, #161	; 0xa1
 8007d86:	461a      	mov	r2, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7fa fc81 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8007d8e:	22a1      	movs	r2, #161	; 0xa1
 8007d90:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007d94:	4610      	mov	r0, r2
 8007d96:	21be      	movs	r1, #190	; 0xbe
 8007d98:	f7fa fc7a 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007d9c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007da0:	25a2      	movs	r5, #162	; 0xa2
 8007da2:	21be      	movs	r1, #190	; 0xbe
 8007da4:	461a      	mov	r2, r3
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa fc72 	bl	8002690 <LCD_Line.constprop.1>
 8007dac:	4e52      	ldr	r6, [pc, #328]	; (8007ef8 <main+0x18a0>)
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8007dae:	4f51      	ldr	r7, [pc, #324]	; (8007ef4 <main+0x189c>)
 8007db0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007db4:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8007db8:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8007dba:	fb87 0103 	smull	r0, r1, r7, r3
 8007dbe:	17db      	asrs	r3, r3, #31
 8007dc0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b0a      	subs	r3, #10
 8007dc8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8007dcc:	fb87 0103 	smull	r0, r1, r7, r3
 8007dd0:	17dc      	asrs	r4, r3, #31
 8007dd2:	ebc4 1461 	rsb	r4, r4, r1, asr #5
 8007dd6:	b224      	sxth	r4, r4
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8007dd8:	4628      	mov	r0, r5
 8007dda:	2300      	movs	r3, #0
 8007ddc:	21bf      	movs	r1, #191	; 0xbf
 8007dde:	f384 0407 	usat	r4, #7, r4
 8007de2:	f7f9 fdef 	bl	80019c4 <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8007de6:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8007dee:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8007df2:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8007df6:	4628      	mov	r0, r5
 8007df8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8007dfc:	b289      	uxth	r1, r1
 8007dfe:	462a      	mov	r2, r5
 8007e00:	f7f9 fde0 	bl	80019c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8007e04:	3501      	adds	r5, #1
 8007e06:	45b0      	cmp	r8, r6
 8007e08:	b2ad      	uxth	r5, r5
 8007e0a:	d1d3      	bne.n	8007db4 <main+0x175c>
	LCD_Line(x, y, x + w, y, size, color24);
 8007e0c:	23be      	movs	r3, #190	; 0xbe
 8007e0e:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007e12:	4619      	mov	r1, r3
 8007e14:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8007e18:	f7fa fc3a 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007e1c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007e20:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007e24:	4619      	mov	r1, r3
 8007e26:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8007e2a:	f7fa fc31 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8007e2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007e32:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007e36:	4610      	mov	r0, r2
 8007e38:	21be      	movs	r1, #190	; 0xbe
 8007e3a:	f7fa fc29 	bl	8002690 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007e3e:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007e42:	f44f 75a1 	mov.w	r5, #322	; 0x142
 8007e46:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007e4a:	21be      	movs	r1, #190	; 0xbe
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f7fa fc1f 	bl	8002690 <LCD_Line.constprop.1>
 8007e52:	4e2a      	ldr	r6, [pc, #168]	; (8007efc <main+0x18a4>)
 8007e54:	9f10      	ldr	r7, [sp, #64]	; 0x40
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007e56:	f836 4f02 	ldrh.w	r4, [r6, #2]!
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8007e5a:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007e5c:	f5a4 7466 	sub.w	r4, r4, #920	; 0x398
 8007e60:	b224      	sxth	r4, r4
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8007e62:	4628      	mov	r0, r5
 8007e64:	2300      	movs	r3, #0
 8007e66:	21bf      	movs	r1, #191	; 0xbf
 8007e68:	f384 0407 	usat	r4, #7, r4
 8007e6c:	f7f9 fdaa 	bl	80019c4 <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8007e70:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8007e78:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8007e7c:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8007e80:	4628      	mov	r0, r5
 8007e82:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8007e86:	b289      	uxth	r1, r1
 8007e88:	462a      	mov	r2, r5
 8007e8a:	f7f9 fd9b 	bl	80019c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8007e8e:	3501      	adds	r5, #1
 8007e90:	42b7      	cmp	r7, r6
 8007e92:	b2ad      	uxth	r5, r5
 8007e94:	d1df      	bne.n	8007e56 <main+0x17fe>
			viewGraphs = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <main+0x18a8>)
 8007e9a:	f882 34c2 	strb.w	r3, [r2, #1218]	; 0x4c2
			rtcSecLast = rtcSec;
 8007e9e:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <main+0x18a8>)
 8007ea0:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <main+0x18ac>)
 8007ea2:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8007ea6:	7213      	strb	r3, [r2, #8]
		if (rx_index != 0) {
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <main+0x18a8>)
 8007eaa:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f43f a944 	beq.w	800713c <main+0xae4>
 8007eb4:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <main+0x18a8>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <main+0x18a8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	2bc8      	cmp	r3, #200	; 0xc8
 8007ec0:	d9fa      	bls.n	8007eb8 <main+0x1860>
			rx_index = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <main+0x18a8>)
 8007ec6:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 8007eca:	f7ff b937 	b.w	800713c <main+0xae4>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <main+0x18b0>)
 8007ed0:	fb03 f505 	mul.w	r5, r3, r5
 8007ed4:	f7fe bc76 	b.w	80067c4 <main+0x16c>
 8007ed8:	2204      	movs	r2, #4
 8007eda:	f7fe bdcf 	b.w	8006a7c <main+0x424>
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f7fe bdcc 	b.w	8006a7c <main+0x424>
 8007ee4:	40240000 	.word	0x40240000
 8007ee8:	20000524 	.word	0x20000524
 8007eec:	20000660 	.word	0x20000660
 8007ef0:	200002ae 	.word	0x200002ae
 8007ef4:	66666667 	.word	0x66666667
 8007ef8:	200003ea 	.word	0x200003ea
 8007efc:	20000526 	.word	0x20000526
 8007f00:	20000200 	.word	0x20000200
 8007f04:	20000000 	.word	0x20000000
 8007f08:	003d0900 	.word	0x003d0900
			a_++;
 8007f0c:	9904      	ldr	r1, [sp, #16]
			P = (P + 3) + (2 * a_);
 8007f0e:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8007f12:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8007f14:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8007f16:	3301      	adds	r3, #1
 8007f18:	1c62      	adds	r2, r4, #1
 8007f1a:	42b1      	cmp	r1, r6
 8007f1c:	9202      	str	r2, [sp, #8]
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	f77f a9ed 	ble.w	80072fe <main+0xca6>
			if (rtcSec % 2 != 0) {
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	f013 0601 	ands.w	r6, r3, #1
 8007f2a:	f47f aa5d 	bne.w	80073e8 <main+0xd90>
	b_ = radius;
 8007f2e:	f04f 0907 	mov.w	r9, #7
 8007f32:	2701      	movs	r7, #1
	P = 1 - radius;
 8007f34:	f06f 0805 	mvn.w	r8, #5
 8007f38:	46ca      	mov	sl, r9
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8007f42:	b2bd      	uxth	r5, r7
 8007f44:	f106 0b01 	add.w	fp, r6, #1
 8007f48:	3401      	adds	r4, #1
 8007f4a:	b2a4      	uxth	r4, r4
 8007f4c:	fa1f fb8b 	uxth.w	fp, fp
 8007f50:	f1ca 0123 	rsb	r1, sl, #35	; 0x23
 8007f54:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007f58:	4623      	mov	r3, r4
 8007f5a:	465a      	mov	r2, fp
 8007f5c:	b289      	uxth	r1, r1
 8007f5e:	b280      	uxth	r0, r0
 8007f60:	f8cd c000 	str.w	ip, [sp]
 8007f64:	f7f8 fdb0 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007f68:	f04f 0c00 	mov.w	ip, #0
 8007f6c:	f1ca 00ac 	rsb	r0, sl, #172	; 0xac
 8007f70:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007f74:	4622      	mov	r2, r4
 8007f76:	b289      	uxth	r1, r1
 8007f78:	465b      	mov	r3, fp
 8007f7a:	f8cd c000 	str.w	ip, [sp]
 8007f7e:	b280      	uxth	r0, r0
 8007f80:	f7f8 fda2 	bl	8000ac8 <LCD_Rect_Fill>
 8007f84:	1e7c      	subs	r4, r7, #1
		if (P < 0)
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007f8a:	eba4 0409 	sub.w	r4, r4, r9
 8007f8e:	f108 0205 	add.w	r2, r8, #5
			P = (P + 3) + (2 * a_);
 8007f92:	f108 0103 	add.w	r1, r8, #3
		if (P < 0)
 8007f96:	f2c0 8081 	blt.w	800809c <main+0x1a44>
			b_--;
 8007f9a:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8007f9e:	454f      	cmp	r7, r9
			P = (P + 5) + (2 * (a_ - b_));
 8007fa0:	eb02 0844 	add.w	r8, r2, r4, lsl #1
	while (a_ <= b_)
 8007fa4:	f106 0602 	add.w	r6, r6, #2
 8007fa8:	fa1f fa89 	uxth.w	sl, r9
 8007fac:	f107 0701 	add.w	r7, r7, #1
 8007fb0:	ddc3      	ble.n	8007f3a <main+0x18e2>
 8007fb2:	f04f 0807 	mov.w	r8, #7
 8007fb6:	f04f 0a00 	mov.w	sl, #0
 8007fba:	2601      	movs	r6, #1
 8007fbc:	f06f 0705 	mvn.w	r7, #5
 8007fc0:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007fc2:	f04f 0c00 	mov.w	ip, #0
 8007fc6:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007fca:	b2b5      	uxth	r5, r6
 8007fcc:	f10a 0b01 	add.w	fp, sl, #1
 8007fd0:	3401      	adds	r4, #1
 8007fd2:	b2a4      	uxth	r4, r4
 8007fd4:	fa1f fb8b 	uxth.w	fp, fp
 8007fd8:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8007fdc:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	465a      	mov	r2, fp
 8007fe4:	b289      	uxth	r1, r1
 8007fe6:	b280      	uxth	r0, r0
 8007fe8:	f8cd c000 	str.w	ip, [sp]
 8007fec:	f7f8 fd6c 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007ff0:	f04f 0c00 	mov.w	ip, #0
 8007ff4:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007ff8:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	b289      	uxth	r1, r1
 8008000:	465b      	mov	r3, fp
 8008002:	f8cd c000 	str.w	ip, [sp]
 8008006:	b280      	uxth	r0, r0
 8008008:	f7f8 fd5e 	bl	8000ac8 <LCD_Rect_Fill>
 800800c:	1e74      	subs	r4, r6, #1
		if (P < 0)
 800800e:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8008010:	eba4 0408 	sub.w	r4, r4, r8
 8008014:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8008018:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 800801c:	db35      	blt.n	800808a <main+0x1a32>
			b_--;
 800801e:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8008022:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8008024:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8008028:	f10a 0a02 	add.w	sl, sl, #2
 800802c:	fa1f f988 	uxth.w	r9, r8
 8008030:	f106 0601 	add.w	r6, r6, #1
 8008034:	ddc5      	ble.n	8007fc2 <main+0x196a>
    GPIOx->BSRR = GPIO_Pin;
 8008036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800803a:	4bb0      	ldr	r3, [pc, #704]	; (80082fc <main+0x1ca4>)
 800803c:	611a      	str	r2, [r3, #16]
 800803e:	f7ff ba67 	b.w	8007510 <main+0xeb8>
			a_++;
 8008042:	9904      	ldr	r1, [sp, #16]
			P = (P + 3) + (2 * a_);
 8008044:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8008048:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 800804a:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 800804c:	3301      	adds	r3, #1
 800804e:	1c62      	adds	r2, r4, #1
 8008050:	428e      	cmp	r6, r1
 8008052:	9202      	str	r2, [sp, #8]
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	f6bf a8d7 	bge.w	8007208 <main+0xbb0>
 800805a:	f7ff b945 	b.w	80072e8 <main+0xc90>
 800805e:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8008060:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8008064:	f106 0601 	add.w	r6, r6, #1
 8008068:	f10a 0a02 	add.w	sl, sl, #2
 800806c:	f6bf aa11 	bge.w	8007492 <main+0xe3a>
 8008070:	f7ff ba4a 	b.w	8007508 <main+0xeb0>
 8008074:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8008076:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 800807a:	f106 0601 	add.w	r6, r6, #1
 800807e:	f10a 0a02 	add.w	sl, sl, #2
 8008082:	f6bf a9b9 	bge.w	80073f8 <main+0xda0>
 8008086:	f7ff b9fc 	b.w	8007482 <main+0xe2a>
 800808a:	4546      	cmp	r6, r8
			P = (P + 3) + (2 * a_);
 800808c:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8008090:	f106 0601 	add.w	r6, r6, #1
 8008094:	f10a 0a02 	add.w	sl, sl, #2
 8008098:	dd93      	ble.n	8007fc2 <main+0x196a>
 800809a:	e7cc      	b.n	8008036 <main+0x19de>
 800809c:	45b9      	cmp	r9, r7
			P = (P + 3) + (2 * a_);
 800809e:	eb06 0801 	add.w	r8, r6, r1
	while (a_ <= b_)
 80080a2:	f107 0701 	add.w	r7, r7, #1
 80080a6:	f106 0602 	add.w	r6, r6, #2
 80080aa:	f6bf af46 	bge.w	8007f3a <main+0x18e2>
 80080ae:	e780      	b.n	8007fb2 <main+0x195a>
	pressure = (uint16_t)BME280_getPressure();
 80080b0:	4a93      	ldr	r2, [pc, #588]	; (8008300 <main+0x1ca8>)
 80080b2:	f8a2 34a8 	strh.w	r3, [r2, #1192]	; 0x4a8
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80080b6:	e6f2      	b.n	8007e9e <main+0x1846>
        huart->gState  = HAL_UART_STATE_READY;
 80080b8:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ba:	68ca      	ldr	r2, [r1, #12]
 80080bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080c0:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	694a      	ldr	r2, [r1, #20]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	614a      	str	r2, [r1, #20]
        __HAL_UNLOCK(huart);
 80080ca:	4a8d      	ldr	r2, [pc, #564]	; (8008300 <main+0x1ca8>)
        huart->gState  = HAL_UART_STATE_READY;
 80080cc:	f882 00a9 	strb.w	r0, [r2, #169]	; 0xa9
        __HAL_UNLOCK(huart);
 80080d0:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
        huart->RxState = HAL_UART_STATE_READY;
 80080d4:	f882 00aa 	strb.w	r0, [r2, #170]	; 0xaa
 80080d8:	f7ff b80e 	b.w	80070f8 <main+0xaa0>
		if (!viewGraphs) {
 80080dc:	4b88      	ldr	r3, [pc, #544]	; (8008300 <main+0x1ca8>)
 80080de:	f893 34c2 	ldrb.w	r3, [r3, #1218]	; 0x4c2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f47f aedb 	bne.w	8007e9e <main+0x1846>
 80080e8:	e5f7      	b.n	8007cda <main+0x1682>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80080ea:	4b86      	ldr	r3, [pc, #536]	; (8008304 <main+0x1cac>)
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	f7fd ff3e 	bl	8005f78 <__aeabi_dcmpeq>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f47f acbe 	bne.w	8007a7e <main+0x1426>
			sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8008102:	4622      	mov	r2, r4
 8008104:	462b      	mov	r3, r5
 8008106:	4980      	ldr	r1, [pc, #512]	; (8008308 <main+0x1cb0>)
 8008108:	a822      	add	r0, sp, #136	; 0x88
 800810a:	f000 ffdd 	bl	80090c8 <siprintf>
			if (humidityLast >= 10)
 800810e:	497d      	ldr	r1, [pc, #500]	; (8008304 <main+0x1cac>)
 8008110:	2200      	movs	r2, #0
 8008112:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008116:	4b7d      	ldr	r3, [pc, #500]	; (800830c <main+0x1cb4>)
 8008118:	f7fd ff4c 	bl	8005fb4 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 800811c:	21bb      	movs	r1, #187	; 0xbb
 800811e:	aa22      	add	r2, sp, #136	; 0x88
			if (humidityLast >= 10)
 8008120:	2800      	cmp	r0, #0
 8008122:	d078      	beq.n	8008216 <main+0x1bbe>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8008124:	20a2      	movs	r0, #162	; 0xa2
 8008126:	f7fc f8b5 	bl	8004294 <LCD_Font.constprop.2>
			sprintf(weatherPrintH, "%.1f %%H", humidity);
 800812a:	4b79      	ldr	r3, [pc, #484]	; (8008310 <main+0x1cb8>)
 800812c:	4976      	ldr	r1, [pc, #472]	; (8008308 <main+0x1cb0>)
 800812e:	461c      	mov	r4, r3
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	a822      	add	r0, sp, #136	; 0x88
 8008136:	f000 ffc7 	bl	80090c8 <siprintf>
			if (humidity >= 10)
 800813a:	cc30      	ldmia	r4, {r4, r5}
 800813c:	2200      	movs	r2, #0
 800813e:	4629      	mov	r1, r5
 8008140:	4b72      	ldr	r3, [pc, #456]	; (800830c <main+0x1cb4>)
 8008142:	4620      	mov	r0, r4
 8008144:	f7fd ff36 	bl	8005fb4 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8008148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800814c:	21bb      	movs	r1, #187	; 0xbb
 800814e:	aa22      	add	r2, sp, #136	; 0x88
			if (humidity >= 10)
 8008150:	2800      	cmp	r0, #0
 8008152:	d05c      	beq.n	800820e <main+0x1bb6>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8008154:	20a2      	movs	r0, #162	; 0xa2
 8008156:	f7fd fa1f 	bl	8005598 <LCD_Font.constprop.3>
			humidityLast = humidity;
 800815a:	4b6a      	ldr	r3, [pc, #424]	; (8008304 <main+0x1cac>)
 800815c:	e943 4502 	strd	r4, r5, [r3, #-8]
 8008160:	e48d      	b.n	8007a7e <main+0x1426>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008162:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8008166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816a:	604b      	str	r3, [r1, #4]
 800816c:	f7fe bf91 	b.w	8007092 <main+0xa3a>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008170:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4967      	ldr	r1, [pc, #412]	; (8008314 <main+0x1cbc>)
 8008178:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800817c:	440b      	add	r3, r1
 800817e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8008182:	40dd      	lsrs	r5, r3
 8008184:	f7fe bcf2 	b.w	8006b6c <main+0x514>
    huart->Lock = HAL_UNLOCKED;
 8008188:	4b5d      	ldr	r3, [pc, #372]	; (8008300 <main+0x1ca8>)
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818a:	9428      	str	r4, [sp, #160]	; 0xa0
 800818c:	f883 40a8 	strb.w	r4, [r3, #168]	; 0xa8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008190:	4b61      	ldr	r3, [pc, #388]	; (8008318 <main+0x1cc0>)
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008192:	2003      	movs	r0, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8008194:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008196:	a926      	add	r1, sp, #152	; 0x98
    __HAL_RCC_USART1_CLK_ENABLE();
 8008198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800819c:	619a      	str	r2, [r3, #24]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80081a4:	921e      	str	r2, [sp, #120]	; 0x78
 80081a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	f042 0204 	orr.w	r2, r2, #4
 80081ae:	619a      	str	r2, [r3, #24]
 80081b0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081b2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	931d      	str	r3, [sp, #116]	; 0x74
 80081bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081be:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081c0:	9029      	str	r0, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c2:	4856      	ldr	r0, [pc, #344]	; (800831c <main+0x1cc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081c4:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c8:	f7f9 f974 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80081cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081d0:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d2:	9428      	str	r4, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80081d4:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d8:	f7f9 f96c 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80081dc:	f7fe bc96 	b.w	8006b0c <main+0x4b4>
 80081e0:	2219      	movs	r2, #25
 80081e2:	fb06 f202 	mul.w	r2, r6, r2
 80081e6:	fbb7 f2f2 	udiv	r2, r7, r2
 80081ea:	3201      	adds	r2, #1
 80081ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80081f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80081f4:	f7fe bc42 	b.w	8006a7c <main+0x424>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f8:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
      pdata16bits = (uint16_t *) pData;
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	bf0d      	iteet	eq
 8008200:	469c      	moveq	ip, r3
 8008202:	f04f 0c00 	movne.w	ip, #0
 8008206:	461c      	movne	r4, r3
 8008208:	2400      	moveq	r4, #0
 800820a:	f7fe bf27 	b.w	800705c <main+0xa04>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 800820e:	20bc      	movs	r0, #188	; 0xbc
 8008210:	f7fd f9c2 	bl	8005598 <LCD_Font.constprop.3>
 8008214:	e7a1      	b.n	800815a <main+0x1b02>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8008216:	20bc      	movs	r0, #188	; 0xbc
 8008218:	f7fc f83c 	bl	8004294 <LCD_Font.constprop.2>
 800821c:	e785      	b.n	800812a <main+0x1ad2>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 800821e:	4632      	mov	r2, r6
 8008220:	463b      	mov	r3, r7
 8008222:	493f      	ldr	r1, [pc, #252]	; (8008320 <main+0x1cc8>)
 8008224:	a822      	add	r0, sp, #136	; 0x88
 8008226:	f000 ff4f 	bl	80090c8 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 800822a:	21bb      	movs	r1, #187	; 0xbb
 800822c:	2003      	movs	r0, #3
 800822e:	aa22      	add	r2, sp, #136	; 0x88
 8008230:	f7fc f830 	bl	8004294 <LCD_Font.constprop.2>
 8008234:	f7ff bbdb 	b.w	80079ee <main+0x1396>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	4b39      	ldr	r3, [pc, #228]	; (8008324 <main+0x1ccc>)
 800823e:	f7fd fec3 	bl	8005fc8 <__aeabi_dcmpgt>
 8008242:	2800      	cmp	r0, #0
 8008244:	d1eb      	bne.n	800821e <main+0x1bc6>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7fd febb 	bl	8005fc8 <__aeabi_dcmpgt>
 8008252:	2800      	cmp	r0, #0
 8008254:	d136      	bne.n	80082c4 <main+0x1c6c>
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8008256:	4639      	mov	r1, r7
 8008258:	4630      	mov	r0, r6
 800825a:	f7fd fed5 	bl	8006008 <__aeabi_d2iz>
 800825e:	4602      	mov	r2, r0
 8008260:	4931      	ldr	r1, [pc, #196]	; (8008328 <main+0x1cd0>)
 8008262:	a822      	add	r0, sp, #136	; 0x88
 8008264:	b252      	sxtb	r2, r2
 8008266:	f000 ff2f 	bl	80090c8 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 800826a:	21bb      	movs	r1, #187	; 0xbb
 800826c:	2003      	movs	r0, #3
 800826e:	aa22      	add	r2, sp, #136	; 0x88
 8008270:	f7fc f810 	bl	8004294 <LCD_Font.constprop.2>
 8008274:	f7ff bbbb 	b.w	80079ee <main+0x1396>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	4b29      	ldr	r3, [pc, #164]	; (8008324 <main+0x1ccc>)
 800827e:	f7fd fea3 	bl	8005fc8 <__aeabi_dcmpgt>
 8008282:	b9c0      	cbnz	r0, 80082b6 <main+0x1c5e>
			else if (temperature < 10 && temperature > 0) {
 8008284:	2200      	movs	r2, #0
 8008286:	2300      	movs	r3, #0
 8008288:	4620      	mov	r0, r4
 800828a:	4629      	mov	r1, r5
 800828c:	f7fd fe9c 	bl	8005fc8 <__aeabi_dcmpgt>
 8008290:	bb28      	cbnz	r0, 80082de <main+0x1c86>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8008292:	4629      	mov	r1, r5
 8008294:	4620      	mov	r0, r4
 8008296:	f7fd feb7 	bl	8006008 <__aeabi_d2iz>
 800829a:	4602      	mov	r2, r0
 800829c:	4923      	ldr	r1, [pc, #140]	; (800832c <main+0x1cd4>)
 800829e:	a822      	add	r0, sp, #136	; 0x88
 80082a0:	b252      	sxtb	r2, r2
 80082a2:	f000 ff11 	bl	80090c8 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 80082a6:	21bb      	movs	r1, #187	; 0xbb
 80082a8:	2003      	movs	r0, #3
 80082aa:	4b21      	ldr	r3, [pc, #132]	; (8008330 <main+0x1cd8>)
 80082ac:	aa22      	add	r2, sp, #136	; 0x88
 80082ae:	f7fd f973 	bl	8005598 <LCD_Font.constprop.3>
 80082b2:	f7ff bbc3 	b.w	8007a3c <main+0x13e4>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	4919      	ldr	r1, [pc, #100]	; (8008320 <main+0x1cc8>)
 80082bc:	a822      	add	r0, sp, #136	; 0x88
 80082be:	f000 ff03 	bl	80090c8 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 80082c2:	e7f0      	b.n	80082a6 <main+0x1c4e>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	4915      	ldr	r1, [pc, #84]	; (8008320 <main+0x1cc8>)
 80082ca:	a822      	add	r0, sp, #136	; 0x88
 80082cc:	f000 fefc 	bl	80090c8 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 80082d0:	21bb      	movs	r1, #187	; 0xbb
 80082d2:	201d      	movs	r0, #29
 80082d4:	aa22      	add	r2, sp, #136	; 0x88
 80082d6:	f7fb ffdd 	bl	8004294 <LCD_Font.constprop.2>
 80082da:	f7ff bb88 	b.w	80079ee <main+0x1396>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 80082de:	4622      	mov	r2, r4
 80082e0:	462b      	mov	r3, r5
 80082e2:	490f      	ldr	r1, [pc, #60]	; (8008320 <main+0x1cc8>)
 80082e4:	a822      	add	r0, sp, #136	; 0x88
 80082e6:	f000 feef 	bl	80090c8 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 80082ea:	21bb      	movs	r1, #187	; 0xbb
 80082ec:	201d      	movs	r0, #29
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <main+0x1cd8>)
 80082f0:	aa22      	add	r2, sp, #136	; 0x88
 80082f2:	f7fd f951 	bl	8005598 <LCD_Font.constprop.3>
 80082f6:	f7ff bba1 	b.w	8007a3c <main+0x13e4>
 80082fa:	bf00      	nop
 80082fc:	40011000 	.word	0x40011000
 8008300:	20000200 	.word	0x20000200
 8008304:	200006c0 	.word	0x200006c0
 8008308:	0801d69c 	.word	0x0801d69c
 800830c:	40240000 	.word	0x40240000
 8008310:	200006a0 	.word	0x200006a0
 8008314:	0800cd58 	.word	0x0800cd58
 8008318:	40021000 	.word	0x40021000
 800831c:	40010800 	.word	0x40010800
 8008320:	0801d688 	.word	0x0801d688
 8008324:	c0240000 	.word	0xc0240000
 8008328:	0801d690 	.word	0x0801d690
 800832c:	0801d694 	.word	0x0801d694
 8008330:	00ffa500 	.word	0x00ffa500

08008334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008334:	480c      	ldr	r0, [pc, #48]	; (8008368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008336:	490d      	ldr	r1, [pc, #52]	; (800836c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008338:	4a0d      	ldr	r2, [pc, #52]	; (8008370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800833a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800833c:	e002      	b.n	8008344 <LoopCopyDataInit>

0800833e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800833e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008342:	3304      	adds	r3, #4

08008344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008348:	d3f9      	bcc.n	800833e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800834c:	4c0a      	ldr	r4, [pc, #40]	; (8008378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800834e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008350:	e001      	b.n	8008356 <LoopFillZerobss>

08008352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008354:	3204      	adds	r2, #4

08008356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008358:	d3fb      	bcc.n	8008352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800835a:	f7fd f9df 	bl	800571c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800835e:	f000 f815 	bl	800838c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008362:	f7fe f979 	bl	8006658 <main>
  bx lr
 8008366:	4770      	bx	lr
  ldr r0, =_sdata
 8008368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800836c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8008370:	0801dc3c 	.word	0x0801dc3c
  ldr r2, =_sbss
 8008374:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008378:	200006d8 	.word	0x200006d8

0800837c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800837c:	e7fe      	b.n	800837c <ADC1_2_IRQHandler>
	...

08008380 <__errno>:
 8008380:	4b01      	ldr	r3, [pc, #4]	; (8008388 <__errno+0x8>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	2000000c 	.word	0x2000000c

0800838c <__libc_init_array>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	2600      	movs	r6, #0
 8008390:	4d0c      	ldr	r5, [pc, #48]	; (80083c4 <__libc_init_array+0x38>)
 8008392:	4c0d      	ldr	r4, [pc, #52]	; (80083c8 <__libc_init_array+0x3c>)
 8008394:	1b64      	subs	r4, r4, r5
 8008396:	10a4      	asrs	r4, r4, #2
 8008398:	42a6      	cmp	r6, r4
 800839a:	d109      	bne.n	80083b0 <__libc_init_array+0x24>
 800839c:	f004 fcd0 	bl	800cd40 <_init>
 80083a0:	2600      	movs	r6, #0
 80083a2:	4d0a      	ldr	r5, [pc, #40]	; (80083cc <__libc_init_array+0x40>)
 80083a4:	4c0a      	ldr	r4, [pc, #40]	; (80083d0 <__libc_init_array+0x44>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	42a6      	cmp	r6, r4
 80083ac:	d105      	bne.n	80083ba <__libc_init_array+0x2e>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b4:	4798      	blx	r3
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7ee      	b.n	8008398 <__libc_init_array+0xc>
 80083ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80083be:	4798      	blx	r3
 80083c0:	3601      	adds	r6, #1
 80083c2:	e7f2      	b.n	80083aa <__libc_init_array+0x1e>
 80083c4:	0801dc34 	.word	0x0801dc34
 80083c8:	0801dc34 	.word	0x0801dc34
 80083cc:	0801dc34 	.word	0x0801dc34
 80083d0:	0801dc38 	.word	0x0801dc38

080083d4 <memset>:
 80083d4:	4603      	mov	r3, r0
 80083d6:	4402      	add	r2, r0
 80083d8:	4293      	cmp	r3, r2
 80083da:	d100      	bne.n	80083de <memset+0xa>
 80083dc:	4770      	bx	lr
 80083de:	f803 1b01 	strb.w	r1, [r3], #1
 80083e2:	e7f9      	b.n	80083d8 <memset+0x4>

080083e4 <__cvt>:
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ea:	461f      	mov	r7, r3
 80083ec:	bfbb      	ittet	lt
 80083ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80083f2:	461f      	movlt	r7, r3
 80083f4:	2300      	movge	r3, #0
 80083f6:	232d      	movlt	r3, #45	; 0x2d
 80083f8:	b088      	sub	sp, #32
 80083fa:	4614      	mov	r4, r2
 80083fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008400:	7013      	strb	r3, [r2, #0]
 8008402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008404:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008408:	f023 0820 	bic.w	r8, r3, #32
 800840c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008410:	d005      	beq.n	800841e <__cvt+0x3a>
 8008412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008416:	d100      	bne.n	800841a <__cvt+0x36>
 8008418:	3501      	adds	r5, #1
 800841a:	2302      	movs	r3, #2
 800841c:	e000      	b.n	8008420 <__cvt+0x3c>
 800841e:	2303      	movs	r3, #3
 8008420:	aa07      	add	r2, sp, #28
 8008422:	9204      	str	r2, [sp, #16]
 8008424:	aa06      	add	r2, sp, #24
 8008426:	e9cd a202 	strd	sl, r2, [sp, #8]
 800842a:	e9cd 3500 	strd	r3, r5, [sp]
 800842e:	4622      	mov	r2, r4
 8008430:	463b      	mov	r3, r7
 8008432:	f001 fd85 	bl	8009f40 <_dtoa_r>
 8008436:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800843a:	4606      	mov	r6, r0
 800843c:	d102      	bne.n	8008444 <__cvt+0x60>
 800843e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008440:	07db      	lsls	r3, r3, #31
 8008442:	d522      	bpl.n	800848a <__cvt+0xa6>
 8008444:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008448:	eb06 0905 	add.w	r9, r6, r5
 800844c:	d110      	bne.n	8008470 <__cvt+0x8c>
 800844e:	7833      	ldrb	r3, [r6, #0]
 8008450:	2b30      	cmp	r3, #48	; 0x30
 8008452:	d10a      	bne.n	800846a <__cvt+0x86>
 8008454:	2200      	movs	r2, #0
 8008456:	2300      	movs	r3, #0
 8008458:	4620      	mov	r0, r4
 800845a:	4639      	mov	r1, r7
 800845c:	f7fd fd8c 	bl	8005f78 <__aeabi_dcmpeq>
 8008460:	b918      	cbnz	r0, 800846a <__cvt+0x86>
 8008462:	f1c5 0501 	rsb	r5, r5, #1
 8008466:	f8ca 5000 	str.w	r5, [sl]
 800846a:	f8da 3000 	ldr.w	r3, [sl]
 800846e:	4499      	add	r9, r3
 8008470:	2200      	movs	r2, #0
 8008472:	2300      	movs	r3, #0
 8008474:	4620      	mov	r0, r4
 8008476:	4639      	mov	r1, r7
 8008478:	f7fd fd7e 	bl	8005f78 <__aeabi_dcmpeq>
 800847c:	b108      	cbz	r0, 8008482 <__cvt+0x9e>
 800847e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008482:	2230      	movs	r2, #48	; 0x30
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	454b      	cmp	r3, r9
 8008488:	d307      	bcc.n	800849a <__cvt+0xb6>
 800848a:	4630      	mov	r0, r6
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	b008      	add	sp, #32
 8008496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849a:	1c59      	adds	r1, r3, #1
 800849c:	9107      	str	r1, [sp, #28]
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e7f0      	b.n	8008484 <__cvt+0xa0>

080084a2 <__exponent>:
 80084a2:	4603      	mov	r3, r0
 80084a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a6:	2900      	cmp	r1, #0
 80084a8:	f803 2b02 	strb.w	r2, [r3], #2
 80084ac:	bfb6      	itet	lt
 80084ae:	222d      	movlt	r2, #45	; 0x2d
 80084b0:	222b      	movge	r2, #43	; 0x2b
 80084b2:	4249      	neglt	r1, r1
 80084b4:	2909      	cmp	r1, #9
 80084b6:	7042      	strb	r2, [r0, #1]
 80084b8:	dd2b      	ble.n	8008512 <__exponent+0x70>
 80084ba:	f10d 0407 	add.w	r4, sp, #7
 80084be:	46a4      	mov	ip, r4
 80084c0:	270a      	movs	r7, #10
 80084c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80084c6:	460a      	mov	r2, r1
 80084c8:	46a6      	mov	lr, r4
 80084ca:	fb07 1516 	mls	r5, r7, r6, r1
 80084ce:	2a63      	cmp	r2, #99	; 0x63
 80084d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80084d4:	4631      	mov	r1, r6
 80084d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80084da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084de:	dcf0      	bgt.n	80084c2 <__exponent+0x20>
 80084e0:	3130      	adds	r1, #48	; 0x30
 80084e2:	f1ae 0502 	sub.w	r5, lr, #2
 80084e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084ea:	4629      	mov	r1, r5
 80084ec:	1c44      	adds	r4, r0, #1
 80084ee:	4561      	cmp	r1, ip
 80084f0:	d30a      	bcc.n	8008508 <__exponent+0x66>
 80084f2:	f10d 0209 	add.w	r2, sp, #9
 80084f6:	eba2 020e 	sub.w	r2, r2, lr
 80084fa:	4565      	cmp	r5, ip
 80084fc:	bf88      	it	hi
 80084fe:	2200      	movhi	r2, #0
 8008500:	4413      	add	r3, r2
 8008502:	1a18      	subs	r0, r3, r0
 8008504:	b003      	add	sp, #12
 8008506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008508:	f811 2b01 	ldrb.w	r2, [r1], #1
 800850c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008510:	e7ed      	b.n	80084ee <__exponent+0x4c>
 8008512:	2330      	movs	r3, #48	; 0x30
 8008514:	3130      	adds	r1, #48	; 0x30
 8008516:	7083      	strb	r3, [r0, #2]
 8008518:	70c1      	strb	r1, [r0, #3]
 800851a:	1d03      	adds	r3, r0, #4
 800851c:	e7f1      	b.n	8008502 <__exponent+0x60>
	...

08008520 <_printf_float>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	b091      	sub	sp, #68	; 0x44
 8008526:	460c      	mov	r4, r1
 8008528:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800852c:	4616      	mov	r6, r2
 800852e:	461f      	mov	r7, r3
 8008530:	4605      	mov	r5, r0
 8008532:	f002 fe59 	bl	800b1e8 <_localeconv_r>
 8008536:	6803      	ldr	r3, [r0, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	f7fd f8f0 	bl	8005720 <strlen>
 8008540:	2300      	movs	r3, #0
 8008542:	930e      	str	r3, [sp, #56]	; 0x38
 8008544:	f8d8 3000 	ldr.w	r3, [r8]
 8008548:	900a      	str	r0, [sp, #40]	; 0x28
 800854a:	3307      	adds	r3, #7
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	f103 0208 	add.w	r2, r3, #8
 8008554:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008558:	f8d4 b000 	ldr.w	fp, [r4]
 800855c:	f8c8 2000 	str.w	r2, [r8]
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008568:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800856c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008570:	930b      	str	r3, [sp, #44]	; 0x2c
 8008572:	f04f 32ff 	mov.w	r2, #4294967295
 8008576:	4640      	mov	r0, r8
 8008578:	4b9c      	ldr	r3, [pc, #624]	; (80087ec <_printf_float+0x2cc>)
 800857a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800857c:	f7fd fd2e 	bl	8005fdc <__aeabi_dcmpun>
 8008580:	bb70      	cbnz	r0, 80085e0 <_printf_float+0xc0>
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	4640      	mov	r0, r8
 8008588:	4b98      	ldr	r3, [pc, #608]	; (80087ec <_printf_float+0x2cc>)
 800858a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800858c:	f7fd fd08 	bl	8005fa0 <__aeabi_dcmple>
 8008590:	bb30      	cbnz	r0, 80085e0 <_printf_float+0xc0>
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4640      	mov	r0, r8
 8008598:	4651      	mov	r1, sl
 800859a:	f7fd fcf7 	bl	8005f8c <__aeabi_dcmplt>
 800859e:	b110      	cbz	r0, 80085a6 <_printf_float+0x86>
 80085a0:	232d      	movs	r3, #45	; 0x2d
 80085a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a6:	4b92      	ldr	r3, [pc, #584]	; (80087f0 <_printf_float+0x2d0>)
 80085a8:	4892      	ldr	r0, [pc, #584]	; (80087f4 <_printf_float+0x2d4>)
 80085aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80085ae:	bf94      	ite	ls
 80085b0:	4698      	movls	r8, r3
 80085b2:	4680      	movhi	r8, r0
 80085b4:	2303      	movs	r3, #3
 80085b6:	f04f 0a00 	mov.w	sl, #0
 80085ba:	6123      	str	r3, [r4, #16]
 80085bc:	f02b 0304 	bic.w	r3, fp, #4
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	4633      	mov	r3, r6
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
 80085c8:	9700      	str	r7, [sp, #0]
 80085ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80085cc:	f000 f9d4 	bl	8008978 <_printf_common>
 80085d0:	3001      	adds	r0, #1
 80085d2:	f040 8090 	bne.w	80086f6 <_printf_float+0x1d6>
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295
 80085da:	b011      	add	sp, #68	; 0x44
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	4642      	mov	r2, r8
 80085e2:	4653      	mov	r3, sl
 80085e4:	4640      	mov	r0, r8
 80085e6:	4651      	mov	r1, sl
 80085e8:	f7fd fcf8 	bl	8005fdc <__aeabi_dcmpun>
 80085ec:	b148      	cbz	r0, 8008602 <_printf_float+0xe2>
 80085ee:	f1ba 0f00 	cmp.w	sl, #0
 80085f2:	bfb8      	it	lt
 80085f4:	232d      	movlt	r3, #45	; 0x2d
 80085f6:	4880      	ldr	r0, [pc, #512]	; (80087f8 <_printf_float+0x2d8>)
 80085f8:	bfb8      	it	lt
 80085fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085fe:	4b7f      	ldr	r3, [pc, #508]	; (80087fc <_printf_float+0x2dc>)
 8008600:	e7d3      	b.n	80085aa <_printf_float+0x8a>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	d142      	bne.n	8008692 <_printf_float+0x172>
 800860c:	2306      	movs	r3, #6
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	9206      	str	r2, [sp, #24]
 8008614:	aa0e      	add	r2, sp, #56	; 0x38
 8008616:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800861a:	aa0d      	add	r2, sp, #52	; 0x34
 800861c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008620:	9203      	str	r2, [sp, #12]
 8008622:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008626:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	4642      	mov	r2, r8
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4628      	mov	r0, r5
 8008634:	4653      	mov	r3, sl
 8008636:	910b      	str	r1, [sp, #44]	; 0x2c
 8008638:	f7ff fed4 	bl	80083e4 <__cvt>
 800863c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800863e:	4680      	mov	r8, r0
 8008640:	2947      	cmp	r1, #71	; 0x47
 8008642:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008644:	d108      	bne.n	8008658 <_printf_float+0x138>
 8008646:	1cc8      	adds	r0, r1, #3
 8008648:	db02      	blt.n	8008650 <_printf_float+0x130>
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	4299      	cmp	r1, r3
 800864e:	dd40      	ble.n	80086d2 <_printf_float+0x1b2>
 8008650:	f1a9 0902 	sub.w	r9, r9, #2
 8008654:	fa5f f989 	uxtb.w	r9, r9
 8008658:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800865c:	d81f      	bhi.n	800869e <_printf_float+0x17e>
 800865e:	464a      	mov	r2, r9
 8008660:	3901      	subs	r1, #1
 8008662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008666:	910d      	str	r1, [sp, #52]	; 0x34
 8008668:	f7ff ff1b 	bl	80084a2 <__exponent>
 800866c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800866e:	4682      	mov	sl, r0
 8008670:	1813      	adds	r3, r2, r0
 8008672:	2a01      	cmp	r2, #1
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	dc02      	bgt.n	800867e <_printf_float+0x15e>
 8008678:	6822      	ldr	r2, [r4, #0]
 800867a:	07d2      	lsls	r2, r2, #31
 800867c:	d501      	bpl.n	8008682 <_printf_float+0x162>
 800867e:	3301      	adds	r3, #1
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008686:	2b00      	cmp	r3, #0
 8008688:	d09b      	beq.n	80085c2 <_printf_float+0xa2>
 800868a:	232d      	movs	r3, #45	; 0x2d
 800868c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008690:	e797      	b.n	80085c2 <_printf_float+0xa2>
 8008692:	2947      	cmp	r1, #71	; 0x47
 8008694:	d1bc      	bne.n	8008610 <_printf_float+0xf0>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1ba      	bne.n	8008610 <_printf_float+0xf0>
 800869a:	2301      	movs	r3, #1
 800869c:	e7b7      	b.n	800860e <_printf_float+0xee>
 800869e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80086a2:	d118      	bne.n	80086d6 <_printf_float+0x1b6>
 80086a4:	2900      	cmp	r1, #0
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	dd0b      	ble.n	80086c2 <_printf_float+0x1a2>
 80086aa:	6121      	str	r1, [r4, #16]
 80086ac:	b913      	cbnz	r3, 80086b4 <_printf_float+0x194>
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	07d0      	lsls	r0, r2, #31
 80086b2:	d502      	bpl.n	80086ba <_printf_float+0x19a>
 80086b4:	3301      	adds	r3, #1
 80086b6:	440b      	add	r3, r1
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	f04f 0a00 	mov.w	sl, #0
 80086be:	65a1      	str	r1, [r4, #88]	; 0x58
 80086c0:	e7df      	b.n	8008682 <_printf_float+0x162>
 80086c2:	b913      	cbnz	r3, 80086ca <_printf_float+0x1aa>
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	07d2      	lsls	r2, r2, #31
 80086c8:	d501      	bpl.n	80086ce <_printf_float+0x1ae>
 80086ca:	3302      	adds	r3, #2
 80086cc:	e7f4      	b.n	80086b8 <_printf_float+0x198>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e7f2      	b.n	80086b8 <_printf_float+0x198>
 80086d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80086d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d8:	4299      	cmp	r1, r3
 80086da:	db05      	blt.n	80086e8 <_printf_float+0x1c8>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	6121      	str	r1, [r4, #16]
 80086e0:	07d8      	lsls	r0, r3, #31
 80086e2:	d5ea      	bpl.n	80086ba <_printf_float+0x19a>
 80086e4:	1c4b      	adds	r3, r1, #1
 80086e6:	e7e7      	b.n	80086b8 <_printf_float+0x198>
 80086e8:	2900      	cmp	r1, #0
 80086ea:	bfcc      	ite	gt
 80086ec:	2201      	movgt	r2, #1
 80086ee:	f1c1 0202 	rsble	r2, r1, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	e7e0      	b.n	80086b8 <_printf_float+0x198>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	055a      	lsls	r2, r3, #21
 80086fa:	d407      	bmi.n	800870c <_printf_float+0x1ec>
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	4642      	mov	r2, r8
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	d12b      	bne.n	8008762 <_printf_float+0x242>
 800870a:	e764      	b.n	80085d6 <_printf_float+0xb6>
 800870c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008710:	f240 80dd 	bls.w	80088ce <_printf_float+0x3ae>
 8008714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	f7fd fc2c 	bl	8005f78 <__aeabi_dcmpeq>
 8008720:	2800      	cmp	r0, #0
 8008722:	d033      	beq.n	800878c <_printf_float+0x26c>
 8008724:	2301      	movs	r3, #1
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	4a35      	ldr	r2, [pc, #212]	; (8008800 <_printf_float+0x2e0>)
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	f43f af51 	beq.w	80085d6 <_printf_float+0xb6>
 8008734:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008738:	429a      	cmp	r2, r3
 800873a:	db02      	blt.n	8008742 <_printf_float+0x222>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	07d8      	lsls	r0, r3, #31
 8008740:	d50f      	bpl.n	8008762 <_printf_float+0x242>
 8008742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f af42 	beq.w	80085d6 <_printf_float+0xb6>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	f104 091a 	add.w	r9, r4, #26
 800875a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875c:	3b01      	subs	r3, #1
 800875e:	4543      	cmp	r3, r8
 8008760:	dc09      	bgt.n	8008776 <_printf_float+0x256>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	079b      	lsls	r3, r3, #30
 8008766:	f100 8102 	bmi.w	800896e <_printf_float+0x44e>
 800876a:	68e0      	ldr	r0, [r4, #12]
 800876c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800876e:	4298      	cmp	r0, r3
 8008770:	bfb8      	it	lt
 8008772:	4618      	movlt	r0, r3
 8008774:	e731      	b.n	80085da <_printf_float+0xba>
 8008776:	2301      	movs	r3, #1
 8008778:	464a      	mov	r2, r9
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	f43f af28 	beq.w	80085d6 <_printf_float+0xb6>
 8008786:	f108 0801 	add.w	r8, r8, #1
 800878a:	e7e6      	b.n	800875a <_printf_float+0x23a>
 800878c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800878e:	2b00      	cmp	r3, #0
 8008790:	dc38      	bgt.n	8008804 <_printf_float+0x2e4>
 8008792:	2301      	movs	r3, #1
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <_printf_float+0x2e0>)
 800879a:	47b8      	blx	r7
 800879c:	3001      	adds	r0, #1
 800879e:	f43f af1a 	beq.w	80085d6 <_printf_float+0xb6>
 80087a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087a6:	4313      	orrs	r3, r2
 80087a8:	d102      	bne.n	80087b0 <_printf_float+0x290>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	07d9      	lsls	r1, r3, #31
 80087ae:	d5d8      	bpl.n	8008762 <_printf_float+0x242>
 80087b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087b4:	4631      	mov	r1, r6
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b8      	blx	r7
 80087ba:	3001      	adds	r0, #1
 80087bc:	f43f af0b 	beq.w	80085d6 <_printf_float+0xb6>
 80087c0:	f04f 0900 	mov.w	r9, #0
 80087c4:	f104 0a1a 	add.w	sl, r4, #26
 80087c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ca:	425b      	negs	r3, r3
 80087cc:	454b      	cmp	r3, r9
 80087ce:	dc01      	bgt.n	80087d4 <_printf_float+0x2b4>
 80087d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d2:	e794      	b.n	80086fe <_printf_float+0x1de>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4652      	mov	r2, sl
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f aef9 	beq.w	80085d6 <_printf_float+0xb6>
 80087e4:	f109 0901 	add.w	r9, r9, #1
 80087e8:	e7ee      	b.n	80087c8 <_printf_float+0x2a8>
 80087ea:	bf00      	nop
 80087ec:	7fefffff 	.word	0x7fefffff
 80087f0:	0801d72c 	.word	0x0801d72c
 80087f4:	0801d730 	.word	0x0801d730
 80087f8:	0801d738 	.word	0x0801d738
 80087fc:	0801d734 	.word	0x0801d734
 8008800:	0801d73c 	.word	0x0801d73c
 8008804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008808:	429a      	cmp	r2, r3
 800880a:	bfa8      	it	ge
 800880c:	461a      	movge	r2, r3
 800880e:	2a00      	cmp	r2, #0
 8008810:	4691      	mov	r9, r2
 8008812:	dc37      	bgt.n	8008884 <_printf_float+0x364>
 8008814:	f04f 0b00 	mov.w	fp, #0
 8008818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800881c:	f104 021a 	add.w	r2, r4, #26
 8008820:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008824:	ebaa 0309 	sub.w	r3, sl, r9
 8008828:	455b      	cmp	r3, fp
 800882a:	dc33      	bgt.n	8008894 <_printf_float+0x374>
 800882c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008830:	429a      	cmp	r2, r3
 8008832:	db3b      	blt.n	80088ac <_printf_float+0x38c>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	07da      	lsls	r2, r3, #31
 8008838:	d438      	bmi.n	80088ac <_printf_float+0x38c>
 800883a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800883c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800883e:	eba3 020a 	sub.w	r2, r3, sl
 8008842:	eba3 0901 	sub.w	r9, r3, r1
 8008846:	4591      	cmp	r9, r2
 8008848:	bfa8      	it	ge
 800884a:	4691      	movge	r9, r2
 800884c:	f1b9 0f00 	cmp.w	r9, #0
 8008850:	dc34      	bgt.n	80088bc <_printf_float+0x39c>
 8008852:	f04f 0800 	mov.w	r8, #0
 8008856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800885a:	f104 0a1a 	add.w	sl, r4, #26
 800885e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	eba3 0309 	sub.w	r3, r3, r9
 8008868:	4543      	cmp	r3, r8
 800886a:	f77f af7a 	ble.w	8008762 <_printf_float+0x242>
 800886e:	2301      	movs	r3, #1
 8008870:	4652      	mov	r2, sl
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47b8      	blx	r7
 8008878:	3001      	adds	r0, #1
 800887a:	f43f aeac 	beq.w	80085d6 <_printf_float+0xb6>
 800887e:	f108 0801 	add.w	r8, r8, #1
 8008882:	e7ec      	b.n	800885e <_printf_float+0x33e>
 8008884:	4613      	mov	r3, r2
 8008886:	4631      	mov	r1, r6
 8008888:	4642      	mov	r2, r8
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	d1c0      	bne.n	8008814 <_printf_float+0x2f4>
 8008892:	e6a0      	b.n	80085d6 <_printf_float+0xb6>
 8008894:	2301      	movs	r3, #1
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	920b      	str	r2, [sp, #44]	; 0x2c
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	f43f ae99 	beq.w	80085d6 <_printf_float+0xb6>
 80088a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a6:	f10b 0b01 	add.w	fp, fp, #1
 80088aa:	e7b9      	b.n	8008820 <_printf_float+0x300>
 80088ac:	4631      	mov	r1, r6
 80088ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	d1bf      	bne.n	800883a <_printf_float+0x31a>
 80088ba:	e68c      	b.n	80085d6 <_printf_float+0xb6>
 80088bc:	464b      	mov	r3, r9
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	eb08 020a 	add.w	r2, r8, sl
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	d1c2      	bne.n	8008852 <_printf_float+0x332>
 80088cc:	e683      	b.n	80085d6 <_printf_float+0xb6>
 80088ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088d0:	2a01      	cmp	r2, #1
 80088d2:	dc01      	bgt.n	80088d8 <_printf_float+0x3b8>
 80088d4:	07db      	lsls	r3, r3, #31
 80088d6:	d537      	bpl.n	8008948 <_printf_float+0x428>
 80088d8:	2301      	movs	r3, #1
 80088da:	4642      	mov	r2, r8
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f ae77 	beq.w	80085d6 <_printf_float+0xb6>
 80088e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f ae6f 	beq.w	80085d6 <_printf_float+0xb6>
 80088f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	f7fd fb3a 	bl	8005f78 <__aeabi_dcmpeq>
 8008904:	b9d8      	cbnz	r0, 800893e <_printf_float+0x41e>
 8008906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008908:	f108 0201 	add.w	r2, r8, #1
 800890c:	3b01      	subs	r3, #1
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	d10e      	bne.n	8008936 <_printf_float+0x416>
 8008918:	e65d      	b.n	80085d6 <_printf_float+0xb6>
 800891a:	2301      	movs	r3, #1
 800891c:	464a      	mov	r2, r9
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f ae56 	beq.w	80085d6 <_printf_float+0xb6>
 800892a:	f108 0801 	add.w	r8, r8, #1
 800892e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008930:	3b01      	subs	r3, #1
 8008932:	4543      	cmp	r3, r8
 8008934:	dcf1      	bgt.n	800891a <_printf_float+0x3fa>
 8008936:	4653      	mov	r3, sl
 8008938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800893c:	e6e0      	b.n	8008700 <_printf_float+0x1e0>
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	f104 091a 	add.w	r9, r4, #26
 8008946:	e7f2      	b.n	800892e <_printf_float+0x40e>
 8008948:	2301      	movs	r3, #1
 800894a:	4642      	mov	r2, r8
 800894c:	e7df      	b.n	800890e <_printf_float+0x3ee>
 800894e:	2301      	movs	r3, #1
 8008950:	464a      	mov	r2, r9
 8008952:	4631      	mov	r1, r6
 8008954:	4628      	mov	r0, r5
 8008956:	47b8      	blx	r7
 8008958:	3001      	adds	r0, #1
 800895a:	f43f ae3c 	beq.w	80085d6 <_printf_float+0xb6>
 800895e:	f108 0801 	add.w	r8, r8, #1
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008966:	1a5b      	subs	r3, r3, r1
 8008968:	4543      	cmp	r3, r8
 800896a:	dcf0      	bgt.n	800894e <_printf_float+0x42e>
 800896c:	e6fd      	b.n	800876a <_printf_float+0x24a>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	f104 0919 	add.w	r9, r4, #25
 8008976:	e7f4      	b.n	8008962 <_printf_float+0x442>

08008978 <_printf_common>:
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	4616      	mov	r6, r2
 800897e:	4699      	mov	r9, r3
 8008980:	688a      	ldr	r2, [r1, #8]
 8008982:	690b      	ldr	r3, [r1, #16]
 8008984:	4607      	mov	r7, r0
 8008986:	4293      	cmp	r3, r2
 8008988:	bfb8      	it	lt
 800898a:	4613      	movlt	r3, r2
 800898c:	6033      	str	r3, [r6, #0]
 800898e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008992:	460c      	mov	r4, r1
 8008994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008998:	b10a      	cbz	r2, 800899e <_printf_common+0x26>
 800899a:	3301      	adds	r3, #1
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	0699      	lsls	r1, r3, #26
 80089a2:	bf42      	ittt	mi
 80089a4:	6833      	ldrmi	r3, [r6, #0]
 80089a6:	3302      	addmi	r3, #2
 80089a8:	6033      	strmi	r3, [r6, #0]
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	f015 0506 	ands.w	r5, r5, #6
 80089b0:	d106      	bne.n	80089c0 <_printf_common+0x48>
 80089b2:	f104 0a19 	add.w	sl, r4, #25
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	6832      	ldr	r2, [r6, #0]
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	42ab      	cmp	r3, r5
 80089be:	dc28      	bgt.n	8008a12 <_printf_common+0x9a>
 80089c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c4:	1e13      	subs	r3, r2, #0
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	bf18      	it	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	0692      	lsls	r2, r2, #26
 80089ce:	d42d      	bmi.n	8008a2c <_printf_common+0xb4>
 80089d0:	4649      	mov	r1, r9
 80089d2:	4638      	mov	r0, r7
 80089d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d8:	47c0      	blx	r8
 80089da:	3001      	adds	r0, #1
 80089dc:	d020      	beq.n	8008a20 <_printf_common+0xa8>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	68e5      	ldr	r5, [r4, #12]
 80089e2:	f003 0306 	and.w	r3, r3, #6
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	bf18      	it	ne
 80089ea:	2500      	movne	r5, #0
 80089ec:	6832      	ldr	r2, [r6, #0]
 80089ee:	f04f 0600 	mov.w	r6, #0
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	bf08      	it	eq
 80089f6:	1aad      	subeq	r5, r5, r2
 80089f8:	6922      	ldr	r2, [r4, #16]
 80089fa:	bf08      	it	eq
 80089fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a00:	4293      	cmp	r3, r2
 8008a02:	bfc4      	itt	gt
 8008a04:	1a9b      	subgt	r3, r3, r2
 8008a06:	18ed      	addgt	r5, r5, r3
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xcc>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xac>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4649      	mov	r1, r9
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xb0>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c4      	b.n	80089b6 <_printf_common+0x3e>
 8008a2c:	2030      	movs	r0, #48	; 0x30
 8008a2e:	18e1      	adds	r1, r4, r3
 8008a30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a3a:	4422      	add	r2, r4
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a42:	e7c5      	b.n	80089d0 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa8>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x92>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	4691      	mov	r9, r2
 8008a60:	2f78      	cmp	r7, #120	; 0x78
 8008a62:	4680      	mov	r8, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	469a      	mov	sl, r3
 8008a68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	; 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d9 	beq.w	8008c2c <_printf_i+0x1d4>
 8008a7a:	2f58      	cmp	r7, #88	; 0x58
 8008a7c:	f000 80a4 	beq.w	8008bc8 <_printf_i+0x170>
 8008a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	; (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c13 	.word	0x08008c13
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008bf5 	.word	0x08008bf5
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c35 	.word	0x08008c35
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bfd 	.word	0x08008bfd
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	602a      	str	r2, [r5, #0]
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0a4      	b.n	8008c4e <_printf_i+0x1f6>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	6829      	ldr	r1, [r5, #0]
 8008b08:	0606      	lsls	r6, r0, #24
 8008b0a:	f101 0304 	add.w	r3, r1, #4
 8008b0e:	d50a      	bpl.n	8008b26 <_printf_i+0xce>
 8008b10:	680e      	ldr	r6, [r1, #0]
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	da03      	bge.n	8008b20 <_printf_i+0xc8>
 8008b18:	232d      	movs	r3, #45	; 0x2d
 8008b1a:	4276      	negs	r6, r6
 8008b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b20:	230a      	movs	r3, #10
 8008b22:	485e      	ldr	r0, [pc, #376]	; (8008c9c <_printf_i+0x244>)
 8008b24:	e019      	b.n	8008b5a <_printf_i+0x102>
 8008b26:	680e      	ldr	r6, [r1, #0]
 8008b28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b2c:	602b      	str	r3, [r5, #0]
 8008b2e:	bf18      	it	ne
 8008b30:	b236      	sxthne	r6, r6
 8008b32:	e7ef      	b.n	8008b14 <_printf_i+0xbc>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	6029      	str	r1, [r5, #0]
 8008b3c:	0601      	lsls	r1, r0, #24
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0xec>
 8008b40:	681e      	ldr	r6, [r3, #0]
 8008b42:	e002      	b.n	8008b4a <_printf_i+0xf2>
 8008b44:	0646      	lsls	r6, r0, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0xe8>
 8008b48:	881e      	ldrh	r6, [r3, #0]
 8008b4a:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2308      	moveq	r3, #8
 8008b50:	230a      	movne	r3, #10
 8008b52:	4852      	ldr	r0, [pc, #328]	; (8008c9c <_printf_i+0x244>)
 8008b54:	2100      	movs	r1, #0
 8008b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b5a:	6865      	ldr	r5, [r4, #4]
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	bfa8      	it	ge
 8008b60:	6821      	ldrge	r1, [r4, #0]
 8008b62:	60a5      	str	r5, [r4, #8]
 8008b64:	bfa4      	itt	ge
 8008b66:	f021 0104 	bicge.w	r1, r1, #4
 8008b6a:	6021      	strge	r1, [r4, #0]
 8008b6c:	b90e      	cbnz	r6, 8008b72 <_printf_i+0x11a>
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	d04d      	beq.n	8008c0e <_printf_i+0x1b6>
 8008b72:	4615      	mov	r5, r2
 8008b74:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b78:	fb03 6711 	mls	r7, r3, r1, r6
 8008b7c:	5dc7      	ldrb	r7, [r0, r7]
 8008b7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b82:	4637      	mov	r7, r6
 8008b84:	42bb      	cmp	r3, r7
 8008b86:	460e      	mov	r6, r1
 8008b88:	d9f4      	bls.n	8008b74 <_printf_i+0x11c>
 8008b8a:	2b08      	cmp	r3, #8
 8008b8c:	d10b      	bne.n	8008ba6 <_printf_i+0x14e>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	07de      	lsls	r6, r3, #31
 8008b92:	d508      	bpl.n	8008ba6 <_printf_i+0x14e>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	6861      	ldr	r1, [r4, #4]
 8008b98:	4299      	cmp	r1, r3
 8008b9a:	bfde      	ittt	le
 8008b9c:	2330      	movle	r3, #48	; 0x30
 8008b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba6:	1b52      	subs	r2, r2, r5
 8008ba8:	6122      	str	r2, [r4, #16]
 8008baa:	464b      	mov	r3, r9
 8008bac:	4621      	mov	r1, r4
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f8cd a000 	str.w	sl, [sp]
 8008bb4:	aa03      	add	r2, sp, #12
 8008bb6:	f7ff fedf 	bl	8008978 <_printf_common>
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d14c      	bne.n	8008c58 <_printf_i+0x200>
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	b004      	add	sp, #16
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	4834      	ldr	r0, [pc, #208]	; (8008c9c <_printf_i+0x244>)
 8008bca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bce:	6829      	ldr	r1, [r5, #0]
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bd6:	6029      	str	r1, [r5, #0]
 8008bd8:	061d      	lsls	r5, r3, #24
 8008bda:	d514      	bpl.n	8008c06 <_printf_i+0x1ae>
 8008bdc:	07df      	lsls	r7, r3, #31
 8008bde:	bf44      	itt	mi
 8008be0:	f043 0320 	orrmi.w	r3, r3, #32
 8008be4:	6023      	strmi	r3, [r4, #0]
 8008be6:	b91e      	cbnz	r6, 8008bf0 <_printf_i+0x198>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f023 0320 	bic.w	r3, r3, #32
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	e7af      	b.n	8008b54 <_printf_i+0xfc>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	f043 0320 	orr.w	r3, r3, #32
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	2378      	movs	r3, #120	; 0x78
 8008bfe:	4828      	ldr	r0, [pc, #160]	; (8008ca0 <_printf_i+0x248>)
 8008c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c04:	e7e3      	b.n	8008bce <_printf_i+0x176>
 8008c06:	0659      	lsls	r1, r3, #25
 8008c08:	bf48      	it	mi
 8008c0a:	b2b6      	uxthmi	r6, r6
 8008c0c:	e7e6      	b.n	8008bdc <_printf_i+0x184>
 8008c0e:	4615      	mov	r5, r2
 8008c10:	e7bb      	b.n	8008b8a <_printf_i+0x132>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	6826      	ldr	r6, [r4, #0]
 8008c16:	1d18      	adds	r0, r3, #4
 8008c18:	6961      	ldr	r1, [r4, #20]
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	0635      	lsls	r5, r6, #24
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	d501      	bpl.n	8008c26 <_printf_i+0x1ce>
 8008c22:	6019      	str	r1, [r3, #0]
 8008c24:	e002      	b.n	8008c2c <_printf_i+0x1d4>
 8008c26:	0670      	lsls	r0, r6, #25
 8008c28:	d5fb      	bpl.n	8008c22 <_printf_i+0x1ca>
 8008c2a:	8019      	strh	r1, [r3, #0]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4615      	mov	r5, r2
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	e7ba      	b.n	8008baa <_printf_i+0x152>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	2100      	movs	r1, #0
 8008c38:	1d1a      	adds	r2, r3, #4
 8008c3a:	602a      	str	r2, [r5, #0]
 8008c3c:	681d      	ldr	r5, [r3, #0]
 8008c3e:	6862      	ldr	r2, [r4, #4]
 8008c40:	4628      	mov	r0, r5
 8008c42:	f002 faef 	bl	800b224 <memchr>
 8008c46:	b108      	cbz	r0, 8008c4c <_printf_i+0x1f4>
 8008c48:	1b40      	subs	r0, r0, r5
 8008c4a:	6060      	str	r0, [r4, #4]
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	6123      	str	r3, [r4, #16]
 8008c50:	2300      	movs	r3, #0
 8008c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c56:	e7a8      	b.n	8008baa <_printf_i+0x152>
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	47d0      	blx	sl
 8008c62:	3001      	adds	r0, #1
 8008c64:	d0ab      	beq.n	8008bbe <_printf_i+0x166>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	079b      	lsls	r3, r3, #30
 8008c6a:	d413      	bmi.n	8008c94 <_printf_i+0x23c>
 8008c6c:	68e0      	ldr	r0, [r4, #12]
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	4298      	cmp	r0, r3
 8008c72:	bfb8      	it	lt
 8008c74:	4618      	movlt	r0, r3
 8008c76:	e7a4      	b.n	8008bc2 <_printf_i+0x16a>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	4640      	mov	r0, r8
 8008c80:	47d0      	blx	sl
 8008c82:	3001      	adds	r0, #1
 8008c84:	d09b      	beq.n	8008bbe <_printf_i+0x166>
 8008c86:	3501      	adds	r5, #1
 8008c88:	68e3      	ldr	r3, [r4, #12]
 8008c8a:	9903      	ldr	r1, [sp, #12]
 8008c8c:	1a5b      	subs	r3, r3, r1
 8008c8e:	42ab      	cmp	r3, r5
 8008c90:	dcf2      	bgt.n	8008c78 <_printf_i+0x220>
 8008c92:	e7eb      	b.n	8008c6c <_printf_i+0x214>
 8008c94:	2500      	movs	r5, #0
 8008c96:	f104 0619 	add.w	r6, r4, #25
 8008c9a:	e7f5      	b.n	8008c88 <_printf_i+0x230>
 8008c9c:	0801d73e 	.word	0x0801d73e
 8008ca0:	0801d74f 	.word	0x0801d74f

08008ca4 <_scanf_float>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	b087      	sub	sp, #28
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	688b      	ldr	r3, [r1, #8]
 8008cae:	4617      	mov	r7, r2
 8008cb0:	1e5a      	subs	r2, r3, #1
 8008cb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cb6:	bf85      	ittet	hi
 8008cb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cbc:	195b      	addhi	r3, r3, r5
 8008cbe:	2300      	movls	r3, #0
 8008cc0:	9302      	strhi	r3, [sp, #8]
 8008cc2:	bf88      	it	hi
 8008cc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cc8:	468b      	mov	fp, r1
 8008cca:	f04f 0500 	mov.w	r5, #0
 8008cce:	bf8c      	ite	hi
 8008cd0:	608b      	strhi	r3, [r1, #8]
 8008cd2:	9302      	strls	r3, [sp, #8]
 8008cd4:	680b      	ldr	r3, [r1, #0]
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cdc:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	465e      	mov	r6, fp
 8008ce4:	46aa      	mov	sl, r5
 8008ce6:	46a9      	mov	r9, r5
 8008ce8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cec:	9501      	str	r5, [sp, #4]
 8008cee:	68a2      	ldr	r2, [r4, #8]
 8008cf0:	b152      	cbz	r2, 8008d08 <_scanf_float+0x64>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b4e      	cmp	r3, #78	; 0x4e
 8008cf8:	d864      	bhi.n	8008dc4 <_scanf_float+0x120>
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d83c      	bhi.n	8008d78 <_scanf_float+0xd4>
 8008cfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d02:	b2c8      	uxtb	r0, r1
 8008d04:	280e      	cmp	r0, #14
 8008d06:	d93a      	bls.n	8008d7e <_scanf_float+0xda>
 8008d08:	f1b9 0f00 	cmp.w	r9, #0
 8008d0c:	d003      	beq.n	8008d16 <_scanf_float+0x72>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d1a:	f1ba 0f01 	cmp.w	sl, #1
 8008d1e:	f200 8113 	bhi.w	8008f48 <_scanf_float+0x2a4>
 8008d22:	455e      	cmp	r6, fp
 8008d24:	f200 8105 	bhi.w	8008f32 <_scanf_float+0x28e>
 8008d28:	2501      	movs	r5, #1
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	b007      	add	sp, #28
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d36:	2a0d      	cmp	r2, #13
 8008d38:	d8e6      	bhi.n	8008d08 <_scanf_float+0x64>
 8008d3a:	a101      	add	r1, pc, #4	; (adr r1, 8008d40 <_scanf_float+0x9c>)
 8008d3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d40:	08008e7f 	.word	0x08008e7f
 8008d44:	08008d09 	.word	0x08008d09
 8008d48:	08008d09 	.word	0x08008d09
 8008d4c:	08008d09 	.word	0x08008d09
 8008d50:	08008edf 	.word	0x08008edf
 8008d54:	08008eb7 	.word	0x08008eb7
 8008d58:	08008d09 	.word	0x08008d09
 8008d5c:	08008d09 	.word	0x08008d09
 8008d60:	08008e8d 	.word	0x08008e8d
 8008d64:	08008d09 	.word	0x08008d09
 8008d68:	08008d09 	.word	0x08008d09
 8008d6c:	08008d09 	.word	0x08008d09
 8008d70:	08008d09 	.word	0x08008d09
 8008d74:	08008e45 	.word	0x08008e45
 8008d78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d7c:	e7db      	b.n	8008d36 <_scanf_float+0x92>
 8008d7e:	290e      	cmp	r1, #14
 8008d80:	d8c2      	bhi.n	8008d08 <_scanf_float+0x64>
 8008d82:	a001      	add	r0, pc, #4	; (adr r0, 8008d88 <_scanf_float+0xe4>)
 8008d84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d88:	08008e37 	.word	0x08008e37
 8008d8c:	08008d09 	.word	0x08008d09
 8008d90:	08008e37 	.word	0x08008e37
 8008d94:	08008ecb 	.word	0x08008ecb
 8008d98:	08008d09 	.word	0x08008d09
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008e21 	.word	0x08008e21
 8008da4:	08008e21 	.word	0x08008e21
 8008da8:	08008e21 	.word	0x08008e21
 8008dac:	08008e21 	.word	0x08008e21
 8008db0:	08008e21 	.word	0x08008e21
 8008db4:	08008e21 	.word	0x08008e21
 8008db8:	08008e21 	.word	0x08008e21
 8008dbc:	08008e21 	.word	0x08008e21
 8008dc0:	08008e21 	.word	0x08008e21
 8008dc4:	2b6e      	cmp	r3, #110	; 0x6e
 8008dc6:	d809      	bhi.n	8008ddc <_scanf_float+0x138>
 8008dc8:	2b60      	cmp	r3, #96	; 0x60
 8008dca:	d8b2      	bhi.n	8008d32 <_scanf_float+0x8e>
 8008dcc:	2b54      	cmp	r3, #84	; 0x54
 8008dce:	d077      	beq.n	8008ec0 <_scanf_float+0x21c>
 8008dd0:	2b59      	cmp	r3, #89	; 0x59
 8008dd2:	d199      	bne.n	8008d08 <_scanf_float+0x64>
 8008dd4:	2d07      	cmp	r5, #7
 8008dd6:	d197      	bne.n	8008d08 <_scanf_float+0x64>
 8008dd8:	2508      	movs	r5, #8
 8008dda:	e029      	b.n	8008e30 <_scanf_float+0x18c>
 8008ddc:	2b74      	cmp	r3, #116	; 0x74
 8008dde:	d06f      	beq.n	8008ec0 <_scanf_float+0x21c>
 8008de0:	2b79      	cmp	r3, #121	; 0x79
 8008de2:	e7f6      	b.n	8008dd2 <_scanf_float+0x12e>
 8008de4:	6821      	ldr	r1, [r4, #0]
 8008de6:	05c8      	lsls	r0, r1, #23
 8008de8:	d51a      	bpl.n	8008e20 <_scanf_float+0x17c>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008df0:	6021      	str	r1, [r4, #0]
 8008df2:	f109 0901 	add.w	r9, r9, #1
 8008df6:	b11b      	cbz	r3, 8008e00 <_scanf_float+0x15c>
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	9302      	str	r3, [sp, #8]
 8008dfe:	60a2      	str	r2, [r4, #8]
 8008e00:	68a3      	ldr	r3, [r4, #8]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	60a3      	str	r3, [r4, #8]
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	f340 8084 	ble.w	8008f20 <_scanf_float+0x27c>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	e766      	b.n	8008cee <_scanf_float+0x4a>
 8008e20:	eb1a 0f05 	cmn.w	sl, r5
 8008e24:	f47f af70 	bne.w	8008d08 <_scanf_float+0x64>
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e2e:	6022      	str	r2, [r4, #0]
 8008e30:	f806 3b01 	strb.w	r3, [r6], #1
 8008e34:	e7e4      	b.n	8008e00 <_scanf_float+0x15c>
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	0610      	lsls	r0, r2, #24
 8008e3a:	f57f af65 	bpl.w	8008d08 <_scanf_float+0x64>
 8008e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e42:	e7f4      	b.n	8008e2e <_scanf_float+0x18a>
 8008e44:	f1ba 0f00 	cmp.w	sl, #0
 8008e48:	d10e      	bne.n	8008e68 <_scanf_float+0x1c4>
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d10e      	bne.n	8008e6e <_scanf_float+0x1ca>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e5a:	d108      	bne.n	8008e6e <_scanf_float+0x1ca>
 8008e5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e60:	f04f 0a01 	mov.w	sl, #1
 8008e64:	6022      	str	r2, [r4, #0]
 8008e66:	e7e3      	b.n	8008e30 <_scanf_float+0x18c>
 8008e68:	f1ba 0f02 	cmp.w	sl, #2
 8008e6c:	d055      	beq.n	8008f1a <_scanf_float+0x276>
 8008e6e:	2d01      	cmp	r5, #1
 8008e70:	d002      	beq.n	8008e78 <_scanf_float+0x1d4>
 8008e72:	2d04      	cmp	r5, #4
 8008e74:	f47f af48 	bne.w	8008d08 <_scanf_float+0x64>
 8008e78:	3501      	adds	r5, #1
 8008e7a:	b2ed      	uxtb	r5, r5
 8008e7c:	e7d8      	b.n	8008e30 <_scanf_float+0x18c>
 8008e7e:	f1ba 0f01 	cmp.w	sl, #1
 8008e82:	f47f af41 	bne.w	8008d08 <_scanf_float+0x64>
 8008e86:	f04f 0a02 	mov.w	sl, #2
 8008e8a:	e7d1      	b.n	8008e30 <_scanf_float+0x18c>
 8008e8c:	b97d      	cbnz	r5, 8008eae <_scanf_float+0x20a>
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	f47f af3c 	bne.w	8008d0e <_scanf_float+0x6a>
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ea0:	f47f af39 	bne.w	8008d16 <_scanf_float+0x72>
 8008ea4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ea8:	2501      	movs	r5, #1
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	e7c0      	b.n	8008e30 <_scanf_float+0x18c>
 8008eae:	2d03      	cmp	r5, #3
 8008eb0:	d0e2      	beq.n	8008e78 <_scanf_float+0x1d4>
 8008eb2:	2d05      	cmp	r5, #5
 8008eb4:	e7de      	b.n	8008e74 <_scanf_float+0x1d0>
 8008eb6:	2d02      	cmp	r5, #2
 8008eb8:	f47f af26 	bne.w	8008d08 <_scanf_float+0x64>
 8008ebc:	2503      	movs	r5, #3
 8008ebe:	e7b7      	b.n	8008e30 <_scanf_float+0x18c>
 8008ec0:	2d06      	cmp	r5, #6
 8008ec2:	f47f af21 	bne.w	8008d08 <_scanf_float+0x64>
 8008ec6:	2507      	movs	r5, #7
 8008ec8:	e7b2      	b.n	8008e30 <_scanf_float+0x18c>
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	0591      	lsls	r1, r2, #22
 8008ece:	f57f af1b 	bpl.w	8008d08 <_scanf_float+0x64>
 8008ed2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008edc:	e7a8      	b.n	8008e30 <_scanf_float+0x18c>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ee4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ee8:	d006      	beq.n	8008ef8 <_scanf_float+0x254>
 8008eea:	0550      	lsls	r0, r2, #21
 8008eec:	f57f af0c 	bpl.w	8008d08 <_scanf_float+0x64>
 8008ef0:	f1b9 0f00 	cmp.w	r9, #0
 8008ef4:	f43f af0f 	beq.w	8008d16 <_scanf_float+0x72>
 8008ef8:	0591      	lsls	r1, r2, #22
 8008efa:	bf58      	it	pl
 8008efc:	9901      	ldrpl	r1, [sp, #4]
 8008efe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f02:	bf58      	it	pl
 8008f04:	eba9 0101 	subpl.w	r1, r9, r1
 8008f08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f0c:	f04f 0900 	mov.w	r9, #0
 8008f10:	bf58      	it	pl
 8008f12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	e78a      	b.n	8008e30 <_scanf_float+0x18c>
 8008f1a:	f04f 0a03 	mov.w	sl, #3
 8008f1e:	e787      	b.n	8008e30 <_scanf_float+0x18c>
 8008f20:	4639      	mov	r1, r7
 8008f22:	4640      	mov	r0, r8
 8008f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f28:	4798      	blx	r3
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	f43f aedf 	beq.w	8008cee <_scanf_float+0x4a>
 8008f30:	e6ea      	b.n	8008d08 <_scanf_float+0x64>
 8008f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f36:	463a      	mov	r2, r7
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f3e:	4798      	blx	r3
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	e6ec      	b.n	8008d22 <_scanf_float+0x7e>
 8008f48:	1e6b      	subs	r3, r5, #1
 8008f4a:	2b06      	cmp	r3, #6
 8008f4c:	d825      	bhi.n	8008f9a <_scanf_float+0x2f6>
 8008f4e:	2d02      	cmp	r5, #2
 8008f50:	d836      	bhi.n	8008fc0 <_scanf_float+0x31c>
 8008f52:	455e      	cmp	r6, fp
 8008f54:	f67f aee8 	bls.w	8008d28 <_scanf_float+0x84>
 8008f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f5c:	463a      	mov	r2, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f64:	4798      	blx	r3
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	6123      	str	r3, [r4, #16]
 8008f6c:	e7f1      	b.n	8008f52 <_scanf_float+0x2ae>
 8008f6e:	9802      	ldr	r0, [sp, #8]
 8008f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f78:	463a      	mov	r2, r7
 8008f7a:	9002      	str	r0, [sp, #8]
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4798      	blx	r3
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f8a:	fa5f fa8a 	uxtb.w	sl, sl
 8008f8e:	f1ba 0f02 	cmp.w	sl, #2
 8008f92:	d1ec      	bne.n	8008f6e <_scanf_float+0x2ca>
 8008f94:	3d03      	subs	r5, #3
 8008f96:	b2ed      	uxtb	r5, r5
 8008f98:	1b76      	subs	r6, r6, r5
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	05da      	lsls	r2, r3, #23
 8008f9e:	d52f      	bpl.n	8009000 <_scanf_float+0x35c>
 8008fa0:	055b      	lsls	r3, r3, #21
 8008fa2:	d510      	bpl.n	8008fc6 <_scanf_float+0x322>
 8008fa4:	455e      	cmp	r6, fp
 8008fa6:	f67f aebf 	bls.w	8008d28 <_scanf_float+0x84>
 8008faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fae:	463a      	mov	r2, r7
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fb6:	4798      	blx	r3
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	e7f1      	b.n	8008fa4 <_scanf_float+0x300>
 8008fc0:	46aa      	mov	sl, r5
 8008fc2:	9602      	str	r6, [sp, #8]
 8008fc4:	e7df      	b.n	8008f86 <_scanf_float+0x2e2>
 8008fc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	2965      	cmp	r1, #101	; 0x65
 8008fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	d00c      	beq.n	8008ff4 <_scanf_float+0x350>
 8008fda:	2945      	cmp	r1, #69	; 0x45
 8008fdc:	d00a      	beq.n	8008ff4 <_scanf_float+0x350>
 8008fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4798      	blx	r3
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	1eb5      	subs	r5, r6, #2
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	463a      	mov	r2, r7
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ffc:	4798      	blx	r3
 8008ffe:	462e      	mov	r6, r5
 8009000:	6825      	ldr	r5, [r4, #0]
 8009002:	f015 0510 	ands.w	r5, r5, #16
 8009006:	d155      	bne.n	80090b4 <_scanf_float+0x410>
 8009008:	7035      	strb	r5, [r6, #0]
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009014:	d11b      	bne.n	800904e <_scanf_float+0x3aa>
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	454b      	cmp	r3, r9
 800901a:	eba3 0209 	sub.w	r2, r3, r9
 800901e:	d123      	bne.n	8009068 <_scanf_float+0x3c4>
 8009020:	2200      	movs	r2, #0
 8009022:	4659      	mov	r1, fp
 8009024:	4640      	mov	r0, r8
 8009026:	f000 fe7b 	bl	8009d20 <_strtod_r>
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	f012 0f02 	tst.w	r2, #2
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	d021      	beq.n	800907e <_scanf_float+0x3da>
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	9903      	ldr	r1, [sp, #12]
 800903e:	600a      	str	r2, [r1, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	e9c3 6700 	strd	r6, r7, [r3]
 8009046:	68e3      	ldr	r3, [r4, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60e3      	str	r3, [r4, #12]
 800904c:	e66d      	b.n	8008d2a <_scanf_float+0x86>
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0e5      	beq.n	8009020 <_scanf_float+0x37c>
 8009054:	9905      	ldr	r1, [sp, #20]
 8009056:	230a      	movs	r3, #10
 8009058:	462a      	mov	r2, r5
 800905a:	4640      	mov	r0, r8
 800905c:	3101      	adds	r1, #1
 800905e:	f000 fee1 	bl	8009e24 <_strtol_r>
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	9e05      	ldr	r6, [sp, #20]
 8009066:	1ac2      	subs	r2, r0, r3
 8009068:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800906c:	429e      	cmp	r6, r3
 800906e:	bf28      	it	cs
 8009070:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009074:	4630      	mov	r0, r6
 8009076:	4910      	ldr	r1, [pc, #64]	; (80090b8 <_scanf_float+0x414>)
 8009078:	f000 f826 	bl	80090c8 <siprintf>
 800907c:	e7d0      	b.n	8009020 <_scanf_float+0x37c>
 800907e:	f012 0f04 	tst.w	r2, #4
 8009082:	f103 0204 	add.w	r2, r3, #4
 8009086:	d1d9      	bne.n	800903c <_scanf_float+0x398>
 8009088:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800908c:	f8cc 2000 	str.w	r2, [ip]
 8009090:	f8d3 8000 	ldr.w	r8, [r3]
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	f7fc ffa0 	bl	8005fdc <__aeabi_dcmpun>
 800909c:	b128      	cbz	r0, 80090aa <_scanf_float+0x406>
 800909e:	4807      	ldr	r0, [pc, #28]	; (80090bc <_scanf_float+0x418>)
 80090a0:	f000 f80e 	bl	80090c0 <nanf>
 80090a4:	f8c8 0000 	str.w	r0, [r8]
 80090a8:	e7cd      	b.n	8009046 <_scanf_float+0x3a2>
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7fc fff3 	bl	8006098 <__aeabi_d2f>
 80090b2:	e7f7      	b.n	80090a4 <_scanf_float+0x400>
 80090b4:	2500      	movs	r5, #0
 80090b6:	e638      	b.n	8008d2a <_scanf_float+0x86>
 80090b8:	0801d760 	.word	0x0801d760
 80090bc:	0801dbd0 	.word	0x0801dbd0

080090c0 <nanf>:
 80090c0:	4800      	ldr	r0, [pc, #0]	; (80090c4 <nanf+0x4>)
 80090c2:	4770      	bx	lr
 80090c4:	7fc00000 	.word	0x7fc00000

080090c8 <siprintf>:
 80090c8:	b40e      	push	{r1, r2, r3}
 80090ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090ce:	b500      	push	{lr}
 80090d0:	b09c      	sub	sp, #112	; 0x70
 80090d2:	ab1d      	add	r3, sp, #116	; 0x74
 80090d4:	9002      	str	r0, [sp, #8]
 80090d6:	9006      	str	r0, [sp, #24]
 80090d8:	9107      	str	r1, [sp, #28]
 80090da:	9104      	str	r1, [sp, #16]
 80090dc:	4808      	ldr	r0, [pc, #32]	; (8009100 <siprintf+0x38>)
 80090de:	4909      	ldr	r1, [pc, #36]	; (8009104 <siprintf+0x3c>)
 80090e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e4:	9105      	str	r1, [sp, #20]
 80090e6:	6800      	ldr	r0, [r0, #0]
 80090e8:	a902      	add	r1, sp, #8
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	f002 feba 	bl	800be64 <_svfiprintf_r>
 80090f0:	2200      	movs	r2, #0
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	b01c      	add	sp, #112	; 0x70
 80090f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090fc:	b003      	add	sp, #12
 80090fe:	4770      	bx	lr
 8009100:	2000000c 	.word	0x2000000c
 8009104:	ffff0208 	.word	0xffff0208

08009108 <sulp>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	460f      	mov	r7, r1
 800910e:	4690      	mov	r8, r2
 8009110:	f002 fc14 	bl	800b93c <__ulp>
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	f1b8 0f00 	cmp.w	r8, #0
 800911c:	d011      	beq.n	8009142 <sulp+0x3a>
 800911e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009126:	2b00      	cmp	r3, #0
 8009128:	dd0b      	ble.n	8009142 <sulp+0x3a>
 800912a:	2400      	movs	r4, #0
 800912c:	051b      	lsls	r3, r3, #20
 800912e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	f7fc fcb5 	bl	8005aa8 <__aeabi_dmul>
 800913e:	4604      	mov	r4, r0
 8009140:	460d      	mov	r5, r1
 8009142:	4620      	mov	r0, r4
 8009144:	4629      	mov	r1, r5
 8009146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914a:	0000      	movs	r0, r0
 800914c:	0000      	movs	r0, r0
	...

08009150 <_strtod_l>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	469b      	mov	fp, r3
 8009156:	2300      	movs	r3, #0
 8009158:	b09f      	sub	sp, #124	; 0x7c
 800915a:	931a      	str	r3, [sp, #104]	; 0x68
 800915c:	4b9e      	ldr	r3, [pc, #632]	; (80093d8 <_strtod_l+0x288>)
 800915e:	4682      	mov	sl, r0
 8009160:	681f      	ldr	r7, [r3, #0]
 8009162:	460e      	mov	r6, r1
 8009164:	4638      	mov	r0, r7
 8009166:	9215      	str	r2, [sp, #84]	; 0x54
 8009168:	f7fc fada 	bl	8005720 <strlen>
 800916c:	f04f 0800 	mov.w	r8, #0
 8009170:	4604      	mov	r4, r0
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	9619      	str	r6, [sp, #100]	; 0x64
 8009178:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	2a2b      	cmp	r2, #43	; 0x2b
 800917e:	d04c      	beq.n	800921a <_strtod_l+0xca>
 8009180:	d83a      	bhi.n	80091f8 <_strtod_l+0xa8>
 8009182:	2a0d      	cmp	r2, #13
 8009184:	d833      	bhi.n	80091ee <_strtod_l+0x9e>
 8009186:	2a08      	cmp	r2, #8
 8009188:	d833      	bhi.n	80091f2 <_strtod_l+0xa2>
 800918a:	2a00      	cmp	r2, #0
 800918c:	d03d      	beq.n	800920a <_strtod_l+0xba>
 800918e:	2300      	movs	r3, #0
 8009190:	930a      	str	r3, [sp, #40]	; 0x28
 8009192:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009194:	782b      	ldrb	r3, [r5, #0]
 8009196:	2b30      	cmp	r3, #48	; 0x30
 8009198:	f040 80aa 	bne.w	80092f0 <_strtod_l+0x1a0>
 800919c:	786b      	ldrb	r3, [r5, #1]
 800919e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091a2:	2b58      	cmp	r3, #88	; 0x58
 80091a4:	d166      	bne.n	8009274 <_strtod_l+0x124>
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	4650      	mov	r0, sl
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	ab1a      	add	r3, sp, #104	; 0x68
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4a8a      	ldr	r2, [pc, #552]	; (80093dc <_strtod_l+0x28c>)
 80091b2:	f8cd b008 	str.w	fp, [sp, #8]
 80091b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80091b8:	a919      	add	r1, sp, #100	; 0x64
 80091ba:	f001 fd17 	bl	800abec <__gethex>
 80091be:	f010 0607 	ands.w	r6, r0, #7
 80091c2:	4604      	mov	r4, r0
 80091c4:	d005      	beq.n	80091d2 <_strtod_l+0x82>
 80091c6:	2e06      	cmp	r6, #6
 80091c8:	d129      	bne.n	800921e <_strtod_l+0xce>
 80091ca:	2300      	movs	r3, #0
 80091cc:	3501      	adds	r5, #1
 80091ce:	9519      	str	r5, [sp, #100]	; 0x64
 80091d0:	930a      	str	r3, [sp, #40]	; 0x28
 80091d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 858a 	bne.w	8009cee <_strtod_l+0xb9e>
 80091da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091dc:	b1d3      	cbz	r3, 8009214 <_strtod_l+0xc4>
 80091de:	4642      	mov	r2, r8
 80091e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	b01f      	add	sp, #124	; 0x7c
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	2a20      	cmp	r2, #32
 80091f0:	d1cd      	bne.n	800918e <_strtod_l+0x3e>
 80091f2:	3301      	adds	r3, #1
 80091f4:	9319      	str	r3, [sp, #100]	; 0x64
 80091f6:	e7bf      	b.n	8009178 <_strtod_l+0x28>
 80091f8:	2a2d      	cmp	r2, #45	; 0x2d
 80091fa:	d1c8      	bne.n	800918e <_strtod_l+0x3e>
 80091fc:	2201      	movs	r2, #1
 80091fe:	920a      	str	r2, [sp, #40]	; 0x28
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	9219      	str	r2, [sp, #100]	; 0x64
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1c3      	bne.n	8009192 <_strtod_l+0x42>
 800920a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800920c:	9619      	str	r6, [sp, #100]	; 0x64
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 856b 	bne.w	8009cea <_strtod_l+0xb9a>
 8009214:	4642      	mov	r2, r8
 8009216:	464b      	mov	r3, r9
 8009218:	e7e4      	b.n	80091e4 <_strtod_l+0x94>
 800921a:	2200      	movs	r2, #0
 800921c:	e7ef      	b.n	80091fe <_strtod_l+0xae>
 800921e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009220:	b13a      	cbz	r2, 8009232 <_strtod_l+0xe2>
 8009222:	2135      	movs	r1, #53	; 0x35
 8009224:	a81c      	add	r0, sp, #112	; 0x70
 8009226:	f002 fc8d 	bl	800bb44 <__copybits>
 800922a:	4650      	mov	r0, sl
 800922c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800922e:	f002 f855 	bl	800b2dc <_Bfree>
 8009232:	3e01      	subs	r6, #1
 8009234:	2e04      	cmp	r6, #4
 8009236:	d806      	bhi.n	8009246 <_strtod_l+0xf6>
 8009238:	e8df f006 	tbb	[pc, r6]
 800923c:	1714030a 	.word	0x1714030a
 8009240:	0a          	.byte	0x0a
 8009241:	00          	.byte	0x00
 8009242:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009246:	0721      	lsls	r1, r4, #28
 8009248:	d5c3      	bpl.n	80091d2 <_strtod_l+0x82>
 800924a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800924e:	e7c0      	b.n	80091d2 <_strtod_l+0x82>
 8009250:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009252:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009256:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800925a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800925e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009262:	e7f0      	b.n	8009246 <_strtod_l+0xf6>
 8009264:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80093e0 <_strtod_l+0x290>
 8009268:	e7ed      	b.n	8009246 <_strtod_l+0xf6>
 800926a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800926e:	f04f 38ff 	mov.w	r8, #4294967295
 8009272:	e7e8      	b.n	8009246 <_strtod_l+0xf6>
 8009274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	9219      	str	r2, [sp, #100]	; 0x64
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	2b30      	cmp	r3, #48	; 0x30
 800927e:	d0f9      	beq.n	8009274 <_strtod_l+0x124>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0a6      	beq.n	80091d2 <_strtod_l+0x82>
 8009284:	2301      	movs	r3, #1
 8009286:	9307      	str	r3, [sp, #28]
 8009288:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800928a:	220a      	movs	r2, #10
 800928c:	9308      	str	r3, [sp, #32]
 800928e:	2300      	movs	r3, #0
 8009290:	469b      	mov	fp, r3
 8009292:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009296:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009298:	7805      	ldrb	r5, [r0, #0]
 800929a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800929e:	b2d9      	uxtb	r1, r3
 80092a0:	2909      	cmp	r1, #9
 80092a2:	d927      	bls.n	80092f4 <_strtod_l+0x1a4>
 80092a4:	4622      	mov	r2, r4
 80092a6:	4639      	mov	r1, r7
 80092a8:	f002 fef2 	bl	800c090 <strncmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d033      	beq.n	8009318 <_strtod_l+0x1c8>
 80092b0:	2000      	movs	r0, #0
 80092b2:	462a      	mov	r2, r5
 80092b4:	465c      	mov	r4, fp
 80092b6:	4603      	mov	r3, r0
 80092b8:	9004      	str	r0, [sp, #16]
 80092ba:	2a65      	cmp	r2, #101	; 0x65
 80092bc:	d001      	beq.n	80092c2 <_strtod_l+0x172>
 80092be:	2a45      	cmp	r2, #69	; 0x45
 80092c0:	d114      	bne.n	80092ec <_strtod_l+0x19c>
 80092c2:	b91c      	cbnz	r4, 80092cc <_strtod_l+0x17c>
 80092c4:	9a07      	ldr	r2, [sp, #28]
 80092c6:	4302      	orrs	r2, r0
 80092c8:	d09f      	beq.n	800920a <_strtod_l+0xba>
 80092ca:	2400      	movs	r4, #0
 80092cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80092ce:	1c72      	adds	r2, r6, #1
 80092d0:	9219      	str	r2, [sp, #100]	; 0x64
 80092d2:	7872      	ldrb	r2, [r6, #1]
 80092d4:	2a2b      	cmp	r2, #43	; 0x2b
 80092d6:	d079      	beq.n	80093cc <_strtod_l+0x27c>
 80092d8:	2a2d      	cmp	r2, #45	; 0x2d
 80092da:	f000 8083 	beq.w	80093e4 <_strtod_l+0x294>
 80092de:	2700      	movs	r7, #0
 80092e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80092e4:	2909      	cmp	r1, #9
 80092e6:	f240 8083 	bls.w	80093f0 <_strtod_l+0x2a0>
 80092ea:	9619      	str	r6, [sp, #100]	; 0x64
 80092ec:	2500      	movs	r5, #0
 80092ee:	e09f      	b.n	8009430 <_strtod_l+0x2e0>
 80092f0:	2300      	movs	r3, #0
 80092f2:	e7c8      	b.n	8009286 <_strtod_l+0x136>
 80092f4:	f1bb 0f08 	cmp.w	fp, #8
 80092f8:	bfd5      	itete	le
 80092fa:	9906      	ldrle	r1, [sp, #24]
 80092fc:	9905      	ldrgt	r1, [sp, #20]
 80092fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8009302:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009306:	f100 0001 	add.w	r0, r0, #1
 800930a:	bfd4      	ite	le
 800930c:	9306      	strle	r3, [sp, #24]
 800930e:	9305      	strgt	r3, [sp, #20]
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	9019      	str	r0, [sp, #100]	; 0x64
 8009316:	e7be      	b.n	8009296 <_strtod_l+0x146>
 8009318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800931a:	191a      	adds	r2, r3, r4
 800931c:	9219      	str	r2, [sp, #100]	; 0x64
 800931e:	5d1a      	ldrb	r2, [r3, r4]
 8009320:	f1bb 0f00 	cmp.w	fp, #0
 8009324:	d036      	beq.n	8009394 <_strtod_l+0x244>
 8009326:	465c      	mov	r4, fp
 8009328:	9004      	str	r0, [sp, #16]
 800932a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800932e:	2b09      	cmp	r3, #9
 8009330:	d912      	bls.n	8009358 <_strtod_l+0x208>
 8009332:	2301      	movs	r3, #1
 8009334:	e7c1      	b.n	80092ba <_strtod_l+0x16a>
 8009336:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009338:	3001      	adds	r0, #1
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	9219      	str	r2, [sp, #100]	; 0x64
 800933e:	785a      	ldrb	r2, [r3, #1]
 8009340:	2a30      	cmp	r2, #48	; 0x30
 8009342:	d0f8      	beq.n	8009336 <_strtod_l+0x1e6>
 8009344:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009348:	2b08      	cmp	r3, #8
 800934a:	f200 84d5 	bhi.w	8009cf8 <_strtod_l+0xba8>
 800934e:	9004      	str	r0, [sp, #16]
 8009350:	2000      	movs	r0, #0
 8009352:	4604      	mov	r4, r0
 8009354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	3a30      	subs	r2, #48	; 0x30
 800935a:	f100 0301 	add.w	r3, r0, #1
 800935e:	d013      	beq.n	8009388 <_strtod_l+0x238>
 8009360:	9904      	ldr	r1, [sp, #16]
 8009362:	1905      	adds	r5, r0, r4
 8009364:	4419      	add	r1, r3
 8009366:	9104      	str	r1, [sp, #16]
 8009368:	4623      	mov	r3, r4
 800936a:	210a      	movs	r1, #10
 800936c:	42ab      	cmp	r3, r5
 800936e:	d113      	bne.n	8009398 <_strtod_l+0x248>
 8009370:	1823      	adds	r3, r4, r0
 8009372:	2b08      	cmp	r3, #8
 8009374:	f104 0401 	add.w	r4, r4, #1
 8009378:	4404      	add	r4, r0
 800937a:	dc1b      	bgt.n	80093b4 <_strtod_l+0x264>
 800937c:	230a      	movs	r3, #10
 800937e:	9906      	ldr	r1, [sp, #24]
 8009380:	fb03 2301 	mla	r3, r3, r1, r2
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	2300      	movs	r3, #0
 8009388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800938a:	4618      	mov	r0, r3
 800938c:	1c51      	adds	r1, r2, #1
 800938e:	9119      	str	r1, [sp, #100]	; 0x64
 8009390:	7852      	ldrb	r2, [r2, #1]
 8009392:	e7ca      	b.n	800932a <_strtod_l+0x1da>
 8009394:	4658      	mov	r0, fp
 8009396:	e7d3      	b.n	8009340 <_strtod_l+0x1f0>
 8009398:	2b08      	cmp	r3, #8
 800939a:	dc04      	bgt.n	80093a6 <_strtod_l+0x256>
 800939c:	9f06      	ldr	r7, [sp, #24]
 800939e:	434f      	muls	r7, r1
 80093a0:	9706      	str	r7, [sp, #24]
 80093a2:	3301      	adds	r3, #1
 80093a4:	e7e2      	b.n	800936c <_strtod_l+0x21c>
 80093a6:	1c5f      	adds	r7, r3, #1
 80093a8:	2f10      	cmp	r7, #16
 80093aa:	bfde      	ittt	le
 80093ac:	9f05      	ldrle	r7, [sp, #20]
 80093ae:	434f      	mulle	r7, r1
 80093b0:	9705      	strle	r7, [sp, #20]
 80093b2:	e7f6      	b.n	80093a2 <_strtod_l+0x252>
 80093b4:	2c10      	cmp	r4, #16
 80093b6:	bfdf      	itttt	le
 80093b8:	230a      	movle	r3, #10
 80093ba:	9905      	ldrle	r1, [sp, #20]
 80093bc:	fb03 2301 	mlale	r3, r3, r1, r2
 80093c0:	9305      	strle	r3, [sp, #20]
 80093c2:	e7e0      	b.n	8009386 <_strtod_l+0x236>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	2301      	movs	r3, #1
 80093ca:	e77b      	b.n	80092c4 <_strtod_l+0x174>
 80093cc:	2700      	movs	r7, #0
 80093ce:	1cb2      	adds	r2, r6, #2
 80093d0:	9219      	str	r2, [sp, #100]	; 0x64
 80093d2:	78b2      	ldrb	r2, [r6, #2]
 80093d4:	e784      	b.n	80092e0 <_strtod_l+0x190>
 80093d6:	bf00      	nop
 80093d8:	0801d9f4 	.word	0x0801d9f4
 80093dc:	0801d768 	.word	0x0801d768
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	2701      	movs	r7, #1
 80093e6:	e7f2      	b.n	80093ce <_strtod_l+0x27e>
 80093e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093ea:	1c51      	adds	r1, r2, #1
 80093ec:	9119      	str	r1, [sp, #100]	; 0x64
 80093ee:	7852      	ldrb	r2, [r2, #1]
 80093f0:	2a30      	cmp	r2, #48	; 0x30
 80093f2:	d0f9      	beq.n	80093e8 <_strtod_l+0x298>
 80093f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80093f8:	2908      	cmp	r1, #8
 80093fa:	f63f af77 	bhi.w	80092ec <_strtod_l+0x19c>
 80093fe:	f04f 0e0a 	mov.w	lr, #10
 8009402:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009406:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009408:	9209      	str	r2, [sp, #36]	; 0x24
 800940a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800940c:	1c51      	adds	r1, r2, #1
 800940e:	9119      	str	r1, [sp, #100]	; 0x64
 8009410:	7852      	ldrb	r2, [r2, #1]
 8009412:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009416:	2d09      	cmp	r5, #9
 8009418:	d935      	bls.n	8009486 <_strtod_l+0x336>
 800941a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800941c:	1b49      	subs	r1, r1, r5
 800941e:	2908      	cmp	r1, #8
 8009420:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009424:	dc02      	bgt.n	800942c <_strtod_l+0x2dc>
 8009426:	4565      	cmp	r5, ip
 8009428:	bfa8      	it	ge
 800942a:	4665      	movge	r5, ip
 800942c:	b107      	cbz	r7, 8009430 <_strtod_l+0x2e0>
 800942e:	426d      	negs	r5, r5
 8009430:	2c00      	cmp	r4, #0
 8009432:	d14c      	bne.n	80094ce <_strtod_l+0x37e>
 8009434:	9907      	ldr	r1, [sp, #28]
 8009436:	4301      	orrs	r1, r0
 8009438:	f47f aecb 	bne.w	80091d2 <_strtod_l+0x82>
 800943c:	2b00      	cmp	r3, #0
 800943e:	f47f aee4 	bne.w	800920a <_strtod_l+0xba>
 8009442:	2a69      	cmp	r2, #105	; 0x69
 8009444:	d026      	beq.n	8009494 <_strtod_l+0x344>
 8009446:	dc23      	bgt.n	8009490 <_strtod_l+0x340>
 8009448:	2a49      	cmp	r2, #73	; 0x49
 800944a:	d023      	beq.n	8009494 <_strtod_l+0x344>
 800944c:	2a4e      	cmp	r2, #78	; 0x4e
 800944e:	f47f aedc 	bne.w	800920a <_strtod_l+0xba>
 8009452:	499d      	ldr	r1, [pc, #628]	; (80096c8 <_strtod_l+0x578>)
 8009454:	a819      	add	r0, sp, #100	; 0x64
 8009456:	f001 fe17 	bl	800b088 <__match>
 800945a:	2800      	cmp	r0, #0
 800945c:	f43f aed5 	beq.w	800920a <_strtod_l+0xba>
 8009460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	2b28      	cmp	r3, #40	; 0x28
 8009466:	d12c      	bne.n	80094c2 <_strtod_l+0x372>
 8009468:	4998      	ldr	r1, [pc, #608]	; (80096cc <_strtod_l+0x57c>)
 800946a:	aa1c      	add	r2, sp, #112	; 0x70
 800946c:	a819      	add	r0, sp, #100	; 0x64
 800946e:	f001 fe1f 	bl	800b0b0 <__hexnan>
 8009472:	2805      	cmp	r0, #5
 8009474:	d125      	bne.n	80094c2 <_strtod_l+0x372>
 8009476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009478:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800947c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009480:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009484:	e6a5      	b.n	80091d2 <_strtod_l+0x82>
 8009486:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800948a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800948e:	e7bc      	b.n	800940a <_strtod_l+0x2ba>
 8009490:	2a6e      	cmp	r2, #110	; 0x6e
 8009492:	e7dc      	b.n	800944e <_strtod_l+0x2fe>
 8009494:	498e      	ldr	r1, [pc, #568]	; (80096d0 <_strtod_l+0x580>)
 8009496:	a819      	add	r0, sp, #100	; 0x64
 8009498:	f001 fdf6 	bl	800b088 <__match>
 800949c:	2800      	cmp	r0, #0
 800949e:	f43f aeb4 	beq.w	800920a <_strtod_l+0xba>
 80094a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a4:	498b      	ldr	r1, [pc, #556]	; (80096d4 <_strtod_l+0x584>)
 80094a6:	3b01      	subs	r3, #1
 80094a8:	a819      	add	r0, sp, #100	; 0x64
 80094aa:	9319      	str	r3, [sp, #100]	; 0x64
 80094ac:	f001 fdec 	bl	800b088 <__match>
 80094b0:	b910      	cbnz	r0, 80094b8 <_strtod_l+0x368>
 80094b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094b4:	3301      	adds	r3, #1
 80094b6:	9319      	str	r3, [sp, #100]	; 0x64
 80094b8:	f04f 0800 	mov.w	r8, #0
 80094bc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80096d8 <_strtod_l+0x588>
 80094c0:	e687      	b.n	80091d2 <_strtod_l+0x82>
 80094c2:	4886      	ldr	r0, [pc, #536]	; (80096dc <_strtod_l+0x58c>)
 80094c4:	f002 fdce 	bl	800c064 <nan>
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	e681      	b.n	80091d2 <_strtod_l+0x82>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	f1bb 0f00 	cmp.w	fp, #0
 80094d4:	bf08      	it	eq
 80094d6:	46a3      	moveq	fp, r4
 80094d8:	1aeb      	subs	r3, r5, r3
 80094da:	2c10      	cmp	r4, #16
 80094dc:	9806      	ldr	r0, [sp, #24]
 80094de:	4626      	mov	r6, r4
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	bfa8      	it	ge
 80094e4:	2610      	movge	r6, #16
 80094e6:	f7fc fa65 	bl	80059b4 <__aeabi_ui2d>
 80094ea:	2c09      	cmp	r4, #9
 80094ec:	4680      	mov	r8, r0
 80094ee:	4689      	mov	r9, r1
 80094f0:	dd13      	ble.n	800951a <_strtod_l+0x3ca>
 80094f2:	4b7b      	ldr	r3, [pc, #492]	; (80096e0 <_strtod_l+0x590>)
 80094f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80094fc:	f7fc fad4 	bl	8005aa8 <__aeabi_dmul>
 8009500:	4680      	mov	r8, r0
 8009502:	9805      	ldr	r0, [sp, #20]
 8009504:	4689      	mov	r9, r1
 8009506:	f7fc fa55 	bl	80059b4 <__aeabi_ui2d>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7fc f913 	bl	800573c <__adddf3>
 8009516:	4680      	mov	r8, r0
 8009518:	4689      	mov	r9, r1
 800951a:	2c0f      	cmp	r4, #15
 800951c:	dc36      	bgt.n	800958c <_strtod_l+0x43c>
 800951e:	9b07      	ldr	r3, [sp, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f43f ae56 	beq.w	80091d2 <_strtod_l+0x82>
 8009526:	dd22      	ble.n	800956e <_strtod_l+0x41e>
 8009528:	2b16      	cmp	r3, #22
 800952a:	dc09      	bgt.n	8009540 <_strtod_l+0x3f0>
 800952c:	496c      	ldr	r1, [pc, #432]	; (80096e0 <_strtod_l+0x590>)
 800952e:	4642      	mov	r2, r8
 8009530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009534:	464b      	mov	r3, r9
 8009536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800953a:	f7fc fab5 	bl	8005aa8 <__aeabi_dmul>
 800953e:	e7c3      	b.n	80094c8 <_strtod_l+0x378>
 8009540:	9a07      	ldr	r2, [sp, #28]
 8009542:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009546:	4293      	cmp	r3, r2
 8009548:	db20      	blt.n	800958c <_strtod_l+0x43c>
 800954a:	4d65      	ldr	r5, [pc, #404]	; (80096e0 <_strtod_l+0x590>)
 800954c:	f1c4 040f 	rsb	r4, r4, #15
 8009550:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009554:	4642      	mov	r2, r8
 8009556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800955a:	464b      	mov	r3, r9
 800955c:	f7fc faa4 	bl	8005aa8 <__aeabi_dmul>
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	1b1c      	subs	r4, r3, r4
 8009564:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800956c:	e7e5      	b.n	800953a <_strtod_l+0x3ea>
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	3316      	adds	r3, #22
 8009572:	db0b      	blt.n	800958c <_strtod_l+0x43c>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	4640      	mov	r0, r8
 8009578:	1b5d      	subs	r5, r3, r5
 800957a:	4b59      	ldr	r3, [pc, #356]	; (80096e0 <_strtod_l+0x590>)
 800957c:	4649      	mov	r1, r9
 800957e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009582:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009586:	f7fc fbb9 	bl	8005cfc <__aeabi_ddiv>
 800958a:	e79d      	b.n	80094c8 <_strtod_l+0x378>
 800958c:	9b07      	ldr	r3, [sp, #28]
 800958e:	1ba6      	subs	r6, r4, r6
 8009590:	441e      	add	r6, r3
 8009592:	2e00      	cmp	r6, #0
 8009594:	dd74      	ble.n	8009680 <_strtod_l+0x530>
 8009596:	f016 030f 	ands.w	r3, r6, #15
 800959a:	d00a      	beq.n	80095b2 <_strtod_l+0x462>
 800959c:	4950      	ldr	r1, [pc, #320]	; (80096e0 <_strtod_l+0x590>)
 800959e:	4642      	mov	r2, r8
 80095a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a8:	464b      	mov	r3, r9
 80095aa:	f7fc fa7d 	bl	8005aa8 <__aeabi_dmul>
 80095ae:	4680      	mov	r8, r0
 80095b0:	4689      	mov	r9, r1
 80095b2:	f036 060f 	bics.w	r6, r6, #15
 80095b6:	d052      	beq.n	800965e <_strtod_l+0x50e>
 80095b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80095bc:	dd27      	ble.n	800960e <_strtod_l+0x4be>
 80095be:	f04f 0b00 	mov.w	fp, #0
 80095c2:	f8cd b010 	str.w	fp, [sp, #16]
 80095c6:	f8cd b020 	str.w	fp, [sp, #32]
 80095ca:	f8cd b018 	str.w	fp, [sp, #24]
 80095ce:	2322      	movs	r3, #34	; 0x22
 80095d0:	f04f 0800 	mov.w	r8, #0
 80095d4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80096d8 <_strtod_l+0x588>
 80095d8:	f8ca 3000 	str.w	r3, [sl]
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f43f adf7 	beq.w	80091d2 <_strtod_l+0x82>
 80095e4:	4650      	mov	r0, sl
 80095e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80095e8:	f001 fe78 	bl	800b2dc <_Bfree>
 80095ec:	4650      	mov	r0, sl
 80095ee:	9906      	ldr	r1, [sp, #24]
 80095f0:	f001 fe74 	bl	800b2dc <_Bfree>
 80095f4:	4650      	mov	r0, sl
 80095f6:	9904      	ldr	r1, [sp, #16]
 80095f8:	f001 fe70 	bl	800b2dc <_Bfree>
 80095fc:	4650      	mov	r0, sl
 80095fe:	9908      	ldr	r1, [sp, #32]
 8009600:	f001 fe6c 	bl	800b2dc <_Bfree>
 8009604:	4659      	mov	r1, fp
 8009606:	4650      	mov	r0, sl
 8009608:	f001 fe68 	bl	800b2dc <_Bfree>
 800960c:	e5e1      	b.n	80091d2 <_strtod_l+0x82>
 800960e:	4b35      	ldr	r3, [pc, #212]	; (80096e4 <_strtod_l+0x594>)
 8009610:	4640      	mov	r0, r8
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	2300      	movs	r3, #0
 8009616:	4649      	mov	r1, r9
 8009618:	461f      	mov	r7, r3
 800961a:	1136      	asrs	r6, r6, #4
 800961c:	2e01      	cmp	r6, #1
 800961e:	dc21      	bgt.n	8009664 <_strtod_l+0x514>
 8009620:	b10b      	cbz	r3, 8009626 <_strtod_l+0x4d6>
 8009622:	4680      	mov	r8, r0
 8009624:	4689      	mov	r9, r1
 8009626:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <_strtod_l+0x594>)
 8009628:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800962c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009630:	4642      	mov	r2, r8
 8009632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009636:	464b      	mov	r3, r9
 8009638:	f7fc fa36 	bl	8005aa8 <__aeabi_dmul>
 800963c:	4b26      	ldr	r3, [pc, #152]	; (80096d8 <_strtod_l+0x588>)
 800963e:	460a      	mov	r2, r1
 8009640:	400b      	ands	r3, r1
 8009642:	4929      	ldr	r1, [pc, #164]	; (80096e8 <_strtod_l+0x598>)
 8009644:	4680      	mov	r8, r0
 8009646:	428b      	cmp	r3, r1
 8009648:	d8b9      	bhi.n	80095be <_strtod_l+0x46e>
 800964a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800964e:	428b      	cmp	r3, r1
 8009650:	bf86      	itte	hi
 8009652:	f04f 38ff 	movhi.w	r8, #4294967295
 8009656:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80096ec <_strtod_l+0x59c>
 800965a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800965e:	2300      	movs	r3, #0
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	e07f      	b.n	8009764 <_strtod_l+0x614>
 8009664:	07f2      	lsls	r2, r6, #31
 8009666:	d505      	bpl.n	8009674 <_strtod_l+0x524>
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7fc fa1b 	bl	8005aa8 <__aeabi_dmul>
 8009672:	2301      	movs	r3, #1
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	3701      	adds	r7, #1
 8009678:	3208      	adds	r2, #8
 800967a:	1076      	asrs	r6, r6, #1
 800967c:	9205      	str	r2, [sp, #20]
 800967e:	e7cd      	b.n	800961c <_strtod_l+0x4cc>
 8009680:	d0ed      	beq.n	800965e <_strtod_l+0x50e>
 8009682:	4276      	negs	r6, r6
 8009684:	f016 020f 	ands.w	r2, r6, #15
 8009688:	d00a      	beq.n	80096a0 <_strtod_l+0x550>
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <_strtod_l+0x590>)
 800968c:	4640      	mov	r0, r8
 800968e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009692:	4649      	mov	r1, r9
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7fc fb30 	bl	8005cfc <__aeabi_ddiv>
 800969c:	4680      	mov	r8, r0
 800969e:	4689      	mov	r9, r1
 80096a0:	1136      	asrs	r6, r6, #4
 80096a2:	d0dc      	beq.n	800965e <_strtod_l+0x50e>
 80096a4:	2e1f      	cmp	r6, #31
 80096a6:	dd23      	ble.n	80096f0 <_strtod_l+0x5a0>
 80096a8:	f04f 0b00 	mov.w	fp, #0
 80096ac:	f8cd b010 	str.w	fp, [sp, #16]
 80096b0:	f8cd b020 	str.w	fp, [sp, #32]
 80096b4:	f8cd b018 	str.w	fp, [sp, #24]
 80096b8:	2322      	movs	r3, #34	; 0x22
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	f04f 0900 	mov.w	r9, #0
 80096c2:	f8ca 3000 	str.w	r3, [sl]
 80096c6:	e789      	b.n	80095dc <_strtod_l+0x48c>
 80096c8:	0801d739 	.word	0x0801d739
 80096cc:	0801d77c 	.word	0x0801d77c
 80096d0:	0801d731 	.word	0x0801d731
 80096d4:	0801d8bc 	.word	0x0801d8bc
 80096d8:	7ff00000 	.word	0x7ff00000
 80096dc:	0801dbd0 	.word	0x0801dbd0
 80096e0:	0801dab0 	.word	0x0801dab0
 80096e4:	0801da88 	.word	0x0801da88
 80096e8:	7ca00000 	.word	0x7ca00000
 80096ec:	7fefffff 	.word	0x7fefffff
 80096f0:	f016 0310 	ands.w	r3, r6, #16
 80096f4:	bf18      	it	ne
 80096f6:	236a      	movne	r3, #106	; 0x6a
 80096f8:	4640      	mov	r0, r8
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	4649      	mov	r1, r9
 80096fe:	2300      	movs	r3, #0
 8009700:	4fb0      	ldr	r7, [pc, #704]	; (80099c4 <_strtod_l+0x874>)
 8009702:	07f2      	lsls	r2, r6, #31
 8009704:	d504      	bpl.n	8009710 <_strtod_l+0x5c0>
 8009706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970a:	f7fc f9cd 	bl	8005aa8 <__aeabi_dmul>
 800970e:	2301      	movs	r3, #1
 8009710:	1076      	asrs	r6, r6, #1
 8009712:	f107 0708 	add.w	r7, r7, #8
 8009716:	d1f4      	bne.n	8009702 <_strtod_l+0x5b2>
 8009718:	b10b      	cbz	r3, 800971e <_strtod_l+0x5ce>
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	9b05      	ldr	r3, [sp, #20]
 8009720:	b1c3      	cbz	r3, 8009754 <_strtod_l+0x604>
 8009722:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009726:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800972a:	2b00      	cmp	r3, #0
 800972c:	4649      	mov	r1, r9
 800972e:	dd11      	ble.n	8009754 <_strtod_l+0x604>
 8009730:	2b1f      	cmp	r3, #31
 8009732:	f340 8127 	ble.w	8009984 <_strtod_l+0x834>
 8009736:	2b34      	cmp	r3, #52	; 0x34
 8009738:	bfd8      	it	le
 800973a:	f04f 33ff 	movle.w	r3, #4294967295
 800973e:	f04f 0800 	mov.w	r8, #0
 8009742:	bfcf      	iteee	gt
 8009744:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009748:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800974c:	fa03 f202 	lslle.w	r2, r3, r2
 8009750:	ea02 0901 	andle.w	r9, r2, r1
 8009754:	2200      	movs	r2, #0
 8009756:	2300      	movs	r3, #0
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7fc fc0c 	bl	8005f78 <__aeabi_dcmpeq>
 8009760:	2800      	cmp	r0, #0
 8009762:	d1a1      	bne.n	80096a8 <_strtod_l+0x558>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	465a      	mov	r2, fp
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4650      	mov	r0, sl
 800976c:	4623      	mov	r3, r4
 800976e:	9908      	ldr	r1, [sp, #32]
 8009770:	f001 fe1c 	bl	800b3ac <__s2b>
 8009774:	9008      	str	r0, [sp, #32]
 8009776:	2800      	cmp	r0, #0
 8009778:	f43f af21 	beq.w	80095be <_strtod_l+0x46e>
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	f04f 0b00 	mov.w	fp, #0
 8009782:	1b5d      	subs	r5, r3, r5
 8009784:	9b07      	ldr	r3, [sp, #28]
 8009786:	f8cd b010 	str.w	fp, [sp, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfb4      	ite	lt
 800978e:	462b      	movlt	r3, r5
 8009790:	2300      	movge	r3, #0
 8009792:	930e      	str	r3, [sp, #56]	; 0x38
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800979a:	9314      	str	r3, [sp, #80]	; 0x50
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	4650      	mov	r0, sl
 80097a0:	6859      	ldr	r1, [r3, #4]
 80097a2:	f001 fd5b 	bl	800b25c <_Balloc>
 80097a6:	9006      	str	r0, [sp, #24]
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f43f af10 	beq.w	80095ce <_strtod_l+0x47e>
 80097ae:	9b08      	ldr	r3, [sp, #32]
 80097b0:	300c      	adds	r0, #12
 80097b2:	691a      	ldr	r2, [r3, #16]
 80097b4:	f103 010c 	add.w	r1, r3, #12
 80097b8:	3202      	adds	r2, #2
 80097ba:	0092      	lsls	r2, r2, #2
 80097bc:	f001 fd40 	bl	800b240 <memcpy>
 80097c0:	ab1c      	add	r3, sp, #112	; 0x70
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4642      	mov	r2, r8
 80097ca:	464b      	mov	r3, r9
 80097cc:	4650      	mov	r0, sl
 80097ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80097d2:	f002 f92d 	bl	800ba30 <__d2b>
 80097d6:	901a      	str	r0, [sp, #104]	; 0x68
 80097d8:	2800      	cmp	r0, #0
 80097da:	f43f aef8 	beq.w	80095ce <_strtod_l+0x47e>
 80097de:	2101      	movs	r1, #1
 80097e0:	4650      	mov	r0, sl
 80097e2:	f001 fe7b 	bl	800b4dc <__i2b>
 80097e6:	4603      	mov	r3, r0
 80097e8:	9004      	str	r0, [sp, #16]
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f43f aeef 	beq.w	80095ce <_strtod_l+0x47e>
 80097f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80097f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	bfab      	itete	ge
 80097f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80097fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80097fc:	18ee      	addge	r6, r5, r3
 80097fe:	1b5c      	sublt	r4, r3, r5
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	bfa8      	it	ge
 8009804:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009806:	eba5 0503 	sub.w	r5, r5, r3
 800980a:	4415      	add	r5, r2
 800980c:	4b6e      	ldr	r3, [pc, #440]	; (80099c8 <_strtod_l+0x878>)
 800980e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009812:	bfb8      	it	lt
 8009814:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009816:	429d      	cmp	r5, r3
 8009818:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800981c:	f280 80c4 	bge.w	80099a8 <_strtod_l+0x858>
 8009820:	1b5b      	subs	r3, r3, r5
 8009822:	2b1f      	cmp	r3, #31
 8009824:	f04f 0701 	mov.w	r7, #1
 8009828:	eba2 0203 	sub.w	r2, r2, r3
 800982c:	f300 80b1 	bgt.w	8009992 <_strtod_l+0x842>
 8009830:	2500      	movs	r5, #0
 8009832:	fa07 f303 	lsl.w	r3, r7, r3
 8009836:	930f      	str	r3, [sp, #60]	; 0x3c
 8009838:	18b7      	adds	r7, r6, r2
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	42be      	cmp	r6, r7
 800983e:	4414      	add	r4, r2
 8009840:	441c      	add	r4, r3
 8009842:	4633      	mov	r3, r6
 8009844:	bfa8      	it	ge
 8009846:	463b      	movge	r3, r7
 8009848:	42a3      	cmp	r3, r4
 800984a:	bfa8      	it	ge
 800984c:	4623      	movge	r3, r4
 800984e:	2b00      	cmp	r3, #0
 8009850:	bfc2      	ittt	gt
 8009852:	1aff      	subgt	r7, r7, r3
 8009854:	1ae4      	subgt	r4, r4, r3
 8009856:	1af6      	subgt	r6, r6, r3
 8009858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd17      	ble.n	800988e <_strtod_l+0x73e>
 800985e:	461a      	mov	r2, r3
 8009860:	4650      	mov	r0, sl
 8009862:	9904      	ldr	r1, [sp, #16]
 8009864:	f001 fef8 	bl	800b658 <__pow5mult>
 8009868:	9004      	str	r0, [sp, #16]
 800986a:	2800      	cmp	r0, #0
 800986c:	f43f aeaf 	beq.w	80095ce <_strtod_l+0x47e>
 8009870:	4601      	mov	r1, r0
 8009872:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009874:	4650      	mov	r0, sl
 8009876:	f001 fe47 	bl	800b508 <__multiply>
 800987a:	9009      	str	r0, [sp, #36]	; 0x24
 800987c:	2800      	cmp	r0, #0
 800987e:	f43f aea6 	beq.w	80095ce <_strtod_l+0x47e>
 8009882:	4650      	mov	r0, sl
 8009884:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009886:	f001 fd29 	bl	800b2dc <_Bfree>
 800988a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988c:	931a      	str	r3, [sp, #104]	; 0x68
 800988e:	2f00      	cmp	r7, #0
 8009890:	f300 808e 	bgt.w	80099b0 <_strtod_l+0x860>
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	dd08      	ble.n	80098ac <_strtod_l+0x75c>
 800989a:	4650      	mov	r0, sl
 800989c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800989e:	9906      	ldr	r1, [sp, #24]
 80098a0:	f001 feda 	bl	800b658 <__pow5mult>
 80098a4:	9006      	str	r0, [sp, #24]
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f ae91 	beq.w	80095ce <_strtod_l+0x47e>
 80098ac:	2c00      	cmp	r4, #0
 80098ae:	dd08      	ble.n	80098c2 <_strtod_l+0x772>
 80098b0:	4622      	mov	r2, r4
 80098b2:	4650      	mov	r0, sl
 80098b4:	9906      	ldr	r1, [sp, #24]
 80098b6:	f001 ff29 	bl	800b70c <__lshift>
 80098ba:	9006      	str	r0, [sp, #24]
 80098bc:	2800      	cmp	r0, #0
 80098be:	f43f ae86 	beq.w	80095ce <_strtod_l+0x47e>
 80098c2:	2e00      	cmp	r6, #0
 80098c4:	dd08      	ble.n	80098d8 <_strtod_l+0x788>
 80098c6:	4632      	mov	r2, r6
 80098c8:	4650      	mov	r0, sl
 80098ca:	9904      	ldr	r1, [sp, #16]
 80098cc:	f001 ff1e 	bl	800b70c <__lshift>
 80098d0:	9004      	str	r0, [sp, #16]
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f43f ae7b 	beq.w	80095ce <_strtod_l+0x47e>
 80098d8:	4650      	mov	r0, sl
 80098da:	9a06      	ldr	r2, [sp, #24]
 80098dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098de:	f001 ffa1 	bl	800b824 <__mdiff>
 80098e2:	4683      	mov	fp, r0
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f43f ae72 	beq.w	80095ce <_strtod_l+0x47e>
 80098ea:	2400      	movs	r4, #0
 80098ec:	68c3      	ldr	r3, [r0, #12]
 80098ee:	9904      	ldr	r1, [sp, #16]
 80098f0:	60c4      	str	r4, [r0, #12]
 80098f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f4:	f001 ff7a 	bl	800b7ec <__mcmp>
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	da6b      	bge.n	80099d4 <_strtod_l+0x884>
 80098fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098fe:	ea53 0308 	orrs.w	r3, r3, r8
 8009902:	f040 8091 	bne.w	8009a28 <_strtod_l+0x8d8>
 8009906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 808c 	bne.w	8009a28 <_strtod_l+0x8d8>
 8009910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009914:	0d1b      	lsrs	r3, r3, #20
 8009916:	051b      	lsls	r3, r3, #20
 8009918:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800991c:	f240 8084 	bls.w	8009a28 <_strtod_l+0x8d8>
 8009920:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009924:	b91b      	cbnz	r3, 800992e <_strtod_l+0x7de>
 8009926:	f8db 3010 	ldr.w	r3, [fp, #16]
 800992a:	2b01      	cmp	r3, #1
 800992c:	dd7c      	ble.n	8009a28 <_strtod_l+0x8d8>
 800992e:	4659      	mov	r1, fp
 8009930:	2201      	movs	r2, #1
 8009932:	4650      	mov	r0, sl
 8009934:	f001 feea 	bl	800b70c <__lshift>
 8009938:	9904      	ldr	r1, [sp, #16]
 800993a:	4683      	mov	fp, r0
 800993c:	f001 ff56 	bl	800b7ec <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	dd71      	ble.n	8009a28 <_strtod_l+0x8d8>
 8009944:	9905      	ldr	r1, [sp, #20]
 8009946:	464b      	mov	r3, r9
 8009948:	4a20      	ldr	r2, [pc, #128]	; (80099cc <_strtod_l+0x87c>)
 800994a:	2900      	cmp	r1, #0
 800994c:	f000 808c 	beq.w	8009a68 <_strtod_l+0x918>
 8009950:	ea02 0109 	and.w	r1, r2, r9
 8009954:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009958:	f300 8086 	bgt.w	8009a68 <_strtod_l+0x918>
 800995c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009960:	f77f aeaa 	ble.w	80096b8 <_strtod_l+0x568>
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <_strtod_l+0x880>)
 800996a:	2200      	movs	r2, #0
 800996c:	f7fc f89c 	bl	8005aa8 <__aeabi_dmul>
 8009970:	460b      	mov	r3, r1
 8009972:	4303      	orrs	r3, r0
 8009974:	bf08      	it	eq
 8009976:	2322      	moveq	r3, #34	; 0x22
 8009978:	4680      	mov	r8, r0
 800997a:	4689      	mov	r9, r1
 800997c:	bf08      	it	eq
 800997e:	f8ca 3000 	streq.w	r3, [sl]
 8009982:	e62f      	b.n	80095e4 <_strtod_l+0x494>
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	ea03 0808 	and.w	r8, r3, r8
 8009990:	e6e0      	b.n	8009754 <_strtod_l+0x604>
 8009992:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009996:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800999a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800999e:	35e2      	adds	r5, #226	; 0xe2
 80099a0:	fa07 f505 	lsl.w	r5, r7, r5
 80099a4:	970f      	str	r7, [sp, #60]	; 0x3c
 80099a6:	e747      	b.n	8009838 <_strtod_l+0x6e8>
 80099a8:	2301      	movs	r3, #1
 80099aa:	2500      	movs	r5, #0
 80099ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ae:	e743      	b.n	8009838 <_strtod_l+0x6e8>
 80099b0:	463a      	mov	r2, r7
 80099b2:	4650      	mov	r0, sl
 80099b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099b6:	f001 fea9 	bl	800b70c <__lshift>
 80099ba:	901a      	str	r0, [sp, #104]	; 0x68
 80099bc:	2800      	cmp	r0, #0
 80099be:	f47f af69 	bne.w	8009894 <_strtod_l+0x744>
 80099c2:	e604      	b.n	80095ce <_strtod_l+0x47e>
 80099c4:	0801d790 	.word	0x0801d790
 80099c8:	fffffc02 	.word	0xfffffc02
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	39500000 	.word	0x39500000
 80099d4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80099d8:	d165      	bne.n	8009aa6 <_strtod_l+0x956>
 80099da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099e0:	b35a      	cbz	r2, 8009a3a <_strtod_l+0x8ea>
 80099e2:	4a99      	ldr	r2, [pc, #612]	; (8009c48 <_strtod_l+0xaf8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d12b      	bne.n	8009a40 <_strtod_l+0x8f0>
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	4641      	mov	r1, r8
 80099ec:	b303      	cbz	r3, 8009a30 <_strtod_l+0x8e0>
 80099ee:	464a      	mov	r2, r9
 80099f0:	4b96      	ldr	r3, [pc, #600]	; (8009c4c <_strtod_l+0xafc>)
 80099f2:	4013      	ands	r3, r2
 80099f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	d81b      	bhi.n	8009a36 <_strtod_l+0x8e6>
 80099fe:	0d1b      	lsrs	r3, r3, #20
 8009a00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a04:	fa02 f303 	lsl.w	r3, r2, r3
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d119      	bne.n	8009a40 <_strtod_l+0x8f0>
 8009a0c:	4b90      	ldr	r3, [pc, #576]	; (8009c50 <_strtod_l+0xb00>)
 8009a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d102      	bne.n	8009a1a <_strtod_l+0x8ca>
 8009a14:	3101      	adds	r1, #1
 8009a16:	f43f adda 	beq.w	80095ce <_strtod_l+0x47e>
 8009a1a:	f04f 0800 	mov.w	r8, #0
 8009a1e:	4b8b      	ldr	r3, [pc, #556]	; (8009c4c <_strtod_l+0xafc>)
 8009a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a22:	401a      	ands	r2, r3
 8009a24:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d19a      	bne.n	8009964 <_strtod_l+0x814>
 8009a2e:	e5d9      	b.n	80095e4 <_strtod_l+0x494>
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295
 8009a34:	e7e8      	b.n	8009a08 <_strtod_l+0x8b8>
 8009a36:	4613      	mov	r3, r2
 8009a38:	e7e6      	b.n	8009a08 <_strtod_l+0x8b8>
 8009a3a:	ea53 0308 	orrs.w	r3, r3, r8
 8009a3e:	d081      	beq.n	8009944 <_strtod_l+0x7f4>
 8009a40:	b1e5      	cbz	r5, 8009a7c <_strtod_l+0x92c>
 8009a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a44:	421d      	tst	r5, r3
 8009a46:	d0ef      	beq.n	8009a28 <_strtod_l+0x8d8>
 8009a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	9a05      	ldr	r2, [sp, #20]
 8009a50:	b1c3      	cbz	r3, 8009a84 <_strtod_l+0x934>
 8009a52:	f7ff fb59 	bl	8009108 <sulp>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a5e:	f7fb fe6d 	bl	800573c <__adddf3>
 8009a62:	4680      	mov	r8, r0
 8009a64:	4689      	mov	r9, r1
 8009a66:	e7df      	b.n	8009a28 <_strtod_l+0x8d8>
 8009a68:	4013      	ands	r3, r2
 8009a6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a6e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009a72:	f04f 38ff 	mov.w	r8, #4294967295
 8009a76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009a7a:	e7d5      	b.n	8009a28 <_strtod_l+0x8d8>
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a7e:	ea13 0f08 	tst.w	r3, r8
 8009a82:	e7e0      	b.n	8009a46 <_strtod_l+0x8f6>
 8009a84:	f7ff fb40 	bl	8009108 <sulp>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a90:	f7fb fe52 	bl	8005738 <__aeabi_dsub>
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	4680      	mov	r8, r0
 8009a9a:	4689      	mov	r9, r1
 8009a9c:	f7fc fa6c 	bl	8005f78 <__aeabi_dcmpeq>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d0c1      	beq.n	8009a28 <_strtod_l+0x8d8>
 8009aa4:	e608      	b.n	80096b8 <_strtod_l+0x568>
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	9904      	ldr	r1, [sp, #16]
 8009aaa:	f002 f81d 	bl	800bae8 <__ratio>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	460f      	mov	r7, r1
 8009ab8:	f7fc fa72 	bl	8005fa0 <__aeabi_dcmple>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d070      	beq.n	8009ba2 <_strtod_l+0xa52>
 8009ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d042      	beq.n	8009b4c <_strtod_l+0x9fc>
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	4f62      	ldr	r7, [pc, #392]	; (8009c54 <_strtod_l+0xb04>)
 8009aca:	4d62      	ldr	r5, [pc, #392]	; (8009c54 <_strtod_l+0xb04>)
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ad2:	0d1b      	lsrs	r3, r3, #20
 8009ad4:	051b      	lsls	r3, r3, #20
 8009ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ada:	4b5f      	ldr	r3, [pc, #380]	; (8009c58 <_strtod_l+0xb08>)
 8009adc:	429a      	cmp	r2, r3
 8009ade:	f040 80c3 	bne.w	8009c68 <_strtod_l+0xb18>
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009aea:	4649      	mov	r1, r9
 8009aec:	f001 ff26 	bl	800b93c <__ulp>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7fb ffd6 	bl	8005aa8 <__aeabi_dmul>
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	f7fb fe1c 	bl	800573c <__adddf3>
 8009b04:	460b      	mov	r3, r1
 8009b06:	4951      	ldr	r1, [pc, #324]	; (8009c4c <_strtod_l+0xafc>)
 8009b08:	4a54      	ldr	r2, [pc, #336]	; (8009c5c <_strtod_l+0xb0c>)
 8009b0a:	4019      	ands	r1, r3
 8009b0c:	4291      	cmp	r1, r2
 8009b0e:	4680      	mov	r8, r0
 8009b10:	d95d      	bls.n	8009bce <_strtod_l+0xa7e>
 8009b12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b14:	4b4e      	ldr	r3, [pc, #312]	; (8009c50 <_strtod_l+0xb00>)
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d103      	bne.n	8009b22 <_strtod_l+0x9d2>
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f43f ad56 	beq.w	80095ce <_strtod_l+0x47e>
 8009b22:	f04f 38ff 	mov.w	r8, #4294967295
 8009b26:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009c50 <_strtod_l+0xb00>
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b2e:	f001 fbd5 	bl	800b2dc <_Bfree>
 8009b32:	4650      	mov	r0, sl
 8009b34:	9906      	ldr	r1, [sp, #24]
 8009b36:	f001 fbd1 	bl	800b2dc <_Bfree>
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	9904      	ldr	r1, [sp, #16]
 8009b3e:	f001 fbcd 	bl	800b2dc <_Bfree>
 8009b42:	4659      	mov	r1, fp
 8009b44:	4650      	mov	r0, sl
 8009b46:	f001 fbc9 	bl	800b2dc <_Bfree>
 8009b4a:	e627      	b.n	800979c <_strtod_l+0x64c>
 8009b4c:	f1b8 0f00 	cmp.w	r8, #0
 8009b50:	d119      	bne.n	8009b86 <_strtod_l+0xa36>
 8009b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b58:	b9e3      	cbnz	r3, 8009b94 <_strtod_l+0xa44>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4b3c      	ldr	r3, [pc, #240]	; (8009c54 <_strtod_l+0xb04>)
 8009b62:	f7fc fa13 	bl	8005f8c <__aeabi_dcmplt>
 8009b66:	b9c8      	cbnz	r0, 8009b9c <_strtod_l+0xa4c>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4b3c      	ldr	r3, [pc, #240]	; (8009c60 <_strtod_l+0xb10>)
 8009b70:	f7fb ff9a 	bl	8005aa8 <__aeabi_dmul>
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009b7c:	9416      	str	r4, [sp, #88]	; 0x58
 8009b7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b80:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009b84:	e7a2      	b.n	8009acc <_strtod_l+0x97c>
 8009b86:	f1b8 0f01 	cmp.w	r8, #1
 8009b8a:	d103      	bne.n	8009b94 <_strtod_l+0xa44>
 8009b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f43f ad92 	beq.w	80096b8 <_strtod_l+0x568>
 8009b94:	2600      	movs	r6, #0
 8009b96:	2400      	movs	r4, #0
 8009b98:	4f32      	ldr	r7, [pc, #200]	; (8009c64 <_strtod_l+0xb14>)
 8009b9a:	e796      	b.n	8009aca <_strtod_l+0x97a>
 8009b9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009b9e:	4d30      	ldr	r5, [pc, #192]	; (8009c60 <_strtod_l+0xb10>)
 8009ba0:	e7ea      	b.n	8009b78 <_strtod_l+0xa28>
 8009ba2:	4b2f      	ldr	r3, [pc, #188]	; (8009c60 <_strtod_l+0xb10>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7fb ff7d 	bl	8005aa8 <__aeabi_dmul>
 8009bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	460d      	mov	r5, r1
 8009bb4:	b933      	cbnz	r3, 8009bc4 <_strtod_l+0xa74>
 8009bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bba:	9010      	str	r0, [sp, #64]	; 0x40
 8009bbc:	9311      	str	r3, [sp, #68]	; 0x44
 8009bbe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009bc2:	e783      	b.n	8009acc <_strtod_l+0x97c>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009bcc:	e7f7      	b.n	8009bbe <_strtod_l+0xa6e>
 8009bce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1a8      	bne.n	8009b2a <_strtod_l+0x9da>
 8009bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bde:	0d1b      	lsrs	r3, r3, #20
 8009be0:	051b      	lsls	r3, r3, #20
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d1a1      	bne.n	8009b2a <_strtod_l+0x9da>
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7fc fb1b 	bl	8006224 <__aeabi_d2lz>
 8009bee:	f7fb ff2d 	bl	8005a4c <__aeabi_l2d>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7fb fd9d 	bl	8005738 <__aeabi_dsub>
 8009bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c04:	ea43 0308 	orr.w	r3, r3, r8
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	d066      	beq.n	8009cde <_strtod_l+0xb8e>
 8009c10:	a309      	add	r3, pc, #36	; (adr r3, 8009c38 <_strtod_l+0xae8>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7fc f9b9 	bl	8005f8c <__aeabi_dcmplt>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f47f ace2 	bne.w	80095e4 <_strtod_l+0x494>
 8009c20:	a307      	add	r3, pc, #28	; (adr r3, 8009c40 <_strtod_l+0xaf0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	4620      	mov	r0, r4
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7fc f9cd 	bl	8005fc8 <__aeabi_dcmpgt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f af7b 	beq.w	8009b2a <_strtod_l+0x9da>
 8009c34:	e4d6      	b.n	80095e4 <_strtod_l+0x494>
 8009c36:	bf00      	nop
 8009c38:	94a03595 	.word	0x94a03595
 8009c3c:	3fdfffff 	.word	0x3fdfffff
 8009c40:	35afe535 	.word	0x35afe535
 8009c44:	3fe00000 	.word	0x3fe00000
 8009c48:	000fffff 	.word	0x000fffff
 8009c4c:	7ff00000 	.word	0x7ff00000
 8009c50:	7fefffff 	.word	0x7fefffff
 8009c54:	3ff00000 	.word	0x3ff00000
 8009c58:	7fe00000 	.word	0x7fe00000
 8009c5c:	7c9fffff 	.word	0x7c9fffff
 8009c60:	3fe00000 	.word	0x3fe00000
 8009c64:	bff00000 	.word	0xbff00000
 8009c68:	9b05      	ldr	r3, [sp, #20]
 8009c6a:	b313      	cbz	r3, 8009cb2 <_strtod_l+0xb62>
 8009c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c72:	d81e      	bhi.n	8009cb2 <_strtod_l+0xb62>
 8009c74:	a326      	add	r3, pc, #152	; (adr r3, 8009d10 <_strtod_l+0xbc0>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	f7fc f98f 	bl	8005fa0 <__aeabi_dcmple>
 8009c82:	b190      	cbz	r0, 8009caa <_strtod_l+0xb5a>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7fc f9e6 	bl	8006058 <__aeabi_d2uiz>
 8009c8c:	2801      	cmp	r0, #1
 8009c8e:	bf38      	it	cc
 8009c90:	2001      	movcc	r0, #1
 8009c92:	f7fb fe8f 	bl	80059b4 <__aeabi_ui2d>
 8009c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c98:	4604      	mov	r4, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	b9d3      	cbnz	r3, 8009cd4 <_strtod_l+0xb84>
 8009c9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca2:	9012      	str	r0, [sp, #72]	; 0x48
 8009ca4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ca6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009caa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009cb0:	1a9f      	subs	r7, r3, r2
 8009cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cb6:	f001 fe41 	bl	800b93c <__ulp>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f7fb fef1 	bl	8005aa8 <__aeabi_dmul>
 8009cc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cca:	f7fb fd37 	bl	800573c <__adddf3>
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4689      	mov	r9, r1
 8009cd2:	e77e      	b.n	8009bd2 <_strtod_l+0xa82>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009cdc:	e7e3      	b.n	8009ca6 <_strtod_l+0xb56>
 8009cde:	a30e      	add	r3, pc, #56	; (adr r3, 8009d18 <_strtod_l+0xbc8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7fc f952 	bl	8005f8c <__aeabi_dcmplt>
 8009ce8:	e7a1      	b.n	8009c2e <_strtod_l+0xade>
 8009cea:	2300      	movs	r3, #0
 8009cec:	930a      	str	r3, [sp, #40]	; 0x28
 8009cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	f7ff ba71 	b.w	80091da <_strtod_l+0x8a>
 8009cf8:	2a65      	cmp	r2, #101	; 0x65
 8009cfa:	f43f ab63 	beq.w	80093c4 <_strtod_l+0x274>
 8009cfe:	2a45      	cmp	r2, #69	; 0x45
 8009d00:	f43f ab60 	beq.w	80093c4 <_strtod_l+0x274>
 8009d04:	2301      	movs	r3, #1
 8009d06:	f7ff bb95 	b.w	8009434 <_strtod_l+0x2e4>
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	ffc00000 	.word	0xffc00000
 8009d14:	41dfffff 	.word	0x41dfffff
 8009d18:	94a03595 	.word	0x94a03595
 8009d1c:	3fcfffff 	.word	0x3fcfffff

08009d20 <_strtod_r>:
 8009d20:	4b01      	ldr	r3, [pc, #4]	; (8009d28 <_strtod_r+0x8>)
 8009d22:	f7ff ba15 	b.w	8009150 <_strtod_l>
 8009d26:	bf00      	nop
 8009d28:	20000074 	.word	0x20000074

08009d2c <_strtol_l.constprop.0>:
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d32:	4680      	mov	r8, r0
 8009d34:	d001      	beq.n	8009d3a <_strtol_l.constprop.0+0xe>
 8009d36:	2b24      	cmp	r3, #36	; 0x24
 8009d38:	d906      	bls.n	8009d48 <_strtol_l.constprop.0+0x1c>
 8009d3a:	f7fe fb21 	bl	8008380 <__errno>
 8009d3e:	2316      	movs	r3, #22
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	2000      	movs	r0, #0
 8009d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d48:	460d      	mov	r5, r1
 8009d4a:	4f35      	ldr	r7, [pc, #212]	; (8009e20 <_strtol_l.constprop.0+0xf4>)
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d52:	5de6      	ldrb	r6, [r4, r7]
 8009d54:	f016 0608 	ands.w	r6, r6, #8
 8009d58:	d1f8      	bne.n	8009d4c <_strtol_l.constprop.0+0x20>
 8009d5a:	2c2d      	cmp	r4, #45	; 0x2d
 8009d5c:	d12f      	bne.n	8009dbe <_strtol_l.constprop.0+0x92>
 8009d5e:	2601      	movs	r6, #1
 8009d60:	782c      	ldrb	r4, [r5, #0]
 8009d62:	1c85      	adds	r5, r0, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d057      	beq.n	8009e18 <_strtol_l.constprop.0+0xec>
 8009d68:	2b10      	cmp	r3, #16
 8009d6a:	d109      	bne.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009d6c:	2c30      	cmp	r4, #48	; 0x30
 8009d6e:	d107      	bne.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009d70:	7828      	ldrb	r0, [r5, #0]
 8009d72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d76:	2858      	cmp	r0, #88	; 0x58
 8009d78:	d149      	bne.n	8009e0e <_strtol_l.constprop.0+0xe2>
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	786c      	ldrb	r4, [r5, #1]
 8009d7e:	3502      	adds	r5, #2
 8009d80:	2700      	movs	r7, #0
 8009d82:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009d86:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009d8a:	fbbe f9f3 	udiv	r9, lr, r3
 8009d8e:	4638      	mov	r0, r7
 8009d90:	fb03 ea19 	mls	sl, r3, r9, lr
 8009d94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d98:	f1bc 0f09 	cmp.w	ip, #9
 8009d9c:	d814      	bhi.n	8009dc8 <_strtol_l.constprop.0+0x9c>
 8009d9e:	4664      	mov	r4, ip
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	dd22      	ble.n	8009dea <_strtol_l.constprop.0+0xbe>
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	db1d      	blt.n	8009de4 <_strtol_l.constprop.0+0xb8>
 8009da8:	4581      	cmp	r9, r0
 8009daa:	d31b      	bcc.n	8009de4 <_strtol_l.constprop.0+0xb8>
 8009dac:	d101      	bne.n	8009db2 <_strtol_l.constprop.0+0x86>
 8009dae:	45a2      	cmp	sl, r4
 8009db0:	db18      	blt.n	8009de4 <_strtol_l.constprop.0+0xb8>
 8009db2:	2701      	movs	r7, #1
 8009db4:	fb00 4003 	mla	r0, r0, r3, r4
 8009db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dbc:	e7ea      	b.n	8009d94 <_strtol_l.constprop.0+0x68>
 8009dbe:	2c2b      	cmp	r4, #43	; 0x2b
 8009dc0:	bf04      	itt	eq
 8009dc2:	782c      	ldrbeq	r4, [r5, #0]
 8009dc4:	1c85      	addeq	r5, r0, #2
 8009dc6:	e7cd      	b.n	8009d64 <_strtol_l.constprop.0+0x38>
 8009dc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009dcc:	f1bc 0f19 	cmp.w	ip, #25
 8009dd0:	d801      	bhi.n	8009dd6 <_strtol_l.constprop.0+0xaa>
 8009dd2:	3c37      	subs	r4, #55	; 0x37
 8009dd4:	e7e4      	b.n	8009da0 <_strtol_l.constprop.0+0x74>
 8009dd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009dda:	f1bc 0f19 	cmp.w	ip, #25
 8009dde:	d804      	bhi.n	8009dea <_strtol_l.constprop.0+0xbe>
 8009de0:	3c57      	subs	r4, #87	; 0x57
 8009de2:	e7dd      	b.n	8009da0 <_strtol_l.constprop.0+0x74>
 8009de4:	f04f 37ff 	mov.w	r7, #4294967295
 8009de8:	e7e6      	b.n	8009db8 <_strtol_l.constprop.0+0x8c>
 8009dea:	2f00      	cmp	r7, #0
 8009dec:	da07      	bge.n	8009dfe <_strtol_l.constprop.0+0xd2>
 8009dee:	2322      	movs	r3, #34	; 0x22
 8009df0:	4670      	mov	r0, lr
 8009df2:	f8c8 3000 	str.w	r3, [r8]
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	d0a4      	beq.n	8009d44 <_strtol_l.constprop.0+0x18>
 8009dfa:	1e69      	subs	r1, r5, #1
 8009dfc:	e005      	b.n	8009e0a <_strtol_l.constprop.0+0xde>
 8009dfe:	b106      	cbz	r6, 8009e02 <_strtol_l.constprop.0+0xd6>
 8009e00:	4240      	negs	r0, r0
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	d09e      	beq.n	8009d44 <_strtol_l.constprop.0+0x18>
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d1f7      	bne.n	8009dfa <_strtol_l.constprop.0+0xce>
 8009e0a:	6011      	str	r1, [r2, #0]
 8009e0c:	e79a      	b.n	8009d44 <_strtol_l.constprop.0+0x18>
 8009e0e:	2430      	movs	r4, #48	; 0x30
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1b5      	bne.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009e14:	2308      	movs	r3, #8
 8009e16:	e7b3      	b.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009e18:	2c30      	cmp	r4, #48	; 0x30
 8009e1a:	d0a9      	beq.n	8009d70 <_strtol_l.constprop.0+0x44>
 8009e1c:	230a      	movs	r3, #10
 8009e1e:	e7af      	b.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009e20:	0801d7b9 	.word	0x0801d7b9

08009e24 <_strtol_r>:
 8009e24:	f7ff bf82 	b.w	8009d2c <_strtol_l.constprop.0>

08009e28 <quorem>:
 8009e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	6903      	ldr	r3, [r0, #16]
 8009e2e:	690c      	ldr	r4, [r1, #16]
 8009e30:	4607      	mov	r7, r0
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	f2c0 8082 	blt.w	8009f3c <quorem+0x114>
 8009e38:	3c01      	subs	r4, #1
 8009e3a:	f100 0514 	add.w	r5, r0, #20
 8009e3e:	f101 0814 	add.w	r8, r1, #20
 8009e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e50:	3301      	adds	r3, #1
 8009e52:	429a      	cmp	r2, r3
 8009e54:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e60:	d331      	bcc.n	8009ec6 <quorem+0x9e>
 8009e62:	f04f 0e00 	mov.w	lr, #0
 8009e66:	4640      	mov	r0, r8
 8009e68:	46ac      	mov	ip, r5
 8009e6a:	46f2      	mov	sl, lr
 8009e6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e70:	b293      	uxth	r3, r2
 8009e72:	fb06 e303 	mla	r3, r6, r3, lr
 8009e76:	0c12      	lsrs	r2, r2, #16
 8009e78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	fb06 e202 	mla	r2, r6, r2, lr
 8009e82:	ebaa 0303 	sub.w	r3, sl, r3
 8009e86:	f8dc a000 	ldr.w	sl, [ip]
 8009e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e8e:	fa1f fa8a 	uxth.w	sl, sl
 8009e92:	4453      	add	r3, sl
 8009e94:	f8dc a000 	ldr.w	sl, [ip]
 8009e98:	b292      	uxth	r2, r2
 8009e9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea8:	4581      	cmp	r9, r0
 8009eaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009eae:	f84c 3b04 	str.w	r3, [ip], #4
 8009eb2:	d2db      	bcs.n	8009e6c <quorem+0x44>
 8009eb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009eb8:	b92b      	cbnz	r3, 8009ec6 <quorem+0x9e>
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	429d      	cmp	r5, r3
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	d32f      	bcc.n	8009f24 <quorem+0xfc>
 8009ec4:	613c      	str	r4, [r7, #16]
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f001 fc90 	bl	800b7ec <__mcmp>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	db25      	blt.n	8009f1c <quorem+0xf4>
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f04f 0c00 	mov.w	ip, #0
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	f858 1b04 	ldr.w	r1, [r8], #4
 8009edc:	f8d0 e000 	ldr.w	lr, [r0]
 8009ee0:	b28b      	uxth	r3, r1
 8009ee2:	ebac 0303 	sub.w	r3, ip, r3
 8009ee6:	fa1f f28e 	uxth.w	r2, lr
 8009eea:	4413      	add	r3, r2
 8009eec:	0c0a      	lsrs	r2, r1, #16
 8009eee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009efc:	45c1      	cmp	r9, r8
 8009efe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f02:	f840 3b04 	str.w	r3, [r0], #4
 8009f06:	d2e7      	bcs.n	8009ed8 <quorem+0xb0>
 8009f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f10:	b922      	cbnz	r2, 8009f1c <quorem+0xf4>
 8009f12:	3b04      	subs	r3, #4
 8009f14:	429d      	cmp	r5, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	d30a      	bcc.n	8009f30 <quorem+0x108>
 8009f1a:	613c      	str	r4, [r7, #16]
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	b003      	add	sp, #12
 8009f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	3b04      	subs	r3, #4
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	d1cb      	bne.n	8009ec4 <quorem+0x9c>
 8009f2c:	3c01      	subs	r4, #1
 8009f2e:	e7c6      	b.n	8009ebe <quorem+0x96>
 8009f30:	6812      	ldr	r2, [r2, #0]
 8009f32:	3b04      	subs	r3, #4
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	d1f0      	bne.n	8009f1a <quorem+0xf2>
 8009f38:	3c01      	subs	r4, #1
 8009f3a:	e7eb      	b.n	8009f14 <quorem+0xec>
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	e7ee      	b.n	8009f1e <quorem+0xf6>

08009f40 <_dtoa_r>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	4616      	mov	r6, r2
 8009f46:	461f      	mov	r7, r3
 8009f48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f4a:	b099      	sub	sp, #100	; 0x64
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f56:	b974      	cbnz	r4, 8009f76 <_dtoa_r+0x36>
 8009f58:	2010      	movs	r0, #16
 8009f5a:	f001 f949 	bl	800b1f0 <malloc>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	6268      	str	r0, [r5, #36]	; 0x24
 8009f62:	b920      	cbnz	r0, 8009f6e <_dtoa_r+0x2e>
 8009f64:	21ea      	movs	r1, #234	; 0xea
 8009f66:	4ba8      	ldr	r3, [pc, #672]	; (800a208 <_dtoa_r+0x2c8>)
 8009f68:	48a8      	ldr	r0, [pc, #672]	; (800a20c <_dtoa_r+0x2cc>)
 8009f6a:	f002 f8b3 	bl	800c0d4 <__assert_func>
 8009f6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f72:	6004      	str	r4, [r0, #0]
 8009f74:	60c4      	str	r4, [r0, #12]
 8009f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	b151      	cbz	r1, 8009f92 <_dtoa_r+0x52>
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4093      	lsls	r3, r2
 8009f82:	604a      	str	r2, [r1, #4]
 8009f84:	608b      	str	r3, [r1, #8]
 8009f86:	4628      	mov	r0, r5
 8009f88:	f001 f9a8 	bl	800b2dc <_Bfree>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	1e3b      	subs	r3, r7, #0
 8009f94:	bfaf      	iteee	ge
 8009f96:	2300      	movge	r3, #0
 8009f98:	2201      	movlt	r2, #1
 8009f9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f9e:	9305      	strlt	r3, [sp, #20]
 8009fa0:	bfa8      	it	ge
 8009fa2:	f8c8 3000 	strge.w	r3, [r8]
 8009fa6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009faa:	4b99      	ldr	r3, [pc, #612]	; (800a210 <_dtoa_r+0x2d0>)
 8009fac:	bfb8      	it	lt
 8009fae:	f8c8 2000 	strlt.w	r2, [r8]
 8009fb2:	ea33 0309 	bics.w	r3, r3, r9
 8009fb6:	d119      	bne.n	8009fec <_dtoa_r+0xac>
 8009fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fc4:	4333      	orrs	r3, r6
 8009fc6:	f000 857f 	beq.w	800aac8 <_dtoa_r+0xb88>
 8009fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fcc:	b953      	cbnz	r3, 8009fe4 <_dtoa_r+0xa4>
 8009fce:	4b91      	ldr	r3, [pc, #580]	; (800a214 <_dtoa_r+0x2d4>)
 8009fd0:	e022      	b.n	800a018 <_dtoa_r+0xd8>
 8009fd2:	4b91      	ldr	r3, [pc, #580]	; (800a218 <_dtoa_r+0x2d8>)
 8009fd4:	9303      	str	r3, [sp, #12]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	9803      	ldr	r0, [sp, #12]
 8009fde:	b019      	add	sp, #100	; 0x64
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	4b8b      	ldr	r3, [pc, #556]	; (800a214 <_dtoa_r+0x2d4>)
 8009fe6:	9303      	str	r3, [sp, #12]
 8009fe8:	3303      	adds	r3, #3
 8009fea:	e7f5      	b.n	8009fd8 <_dtoa_r+0x98>
 8009fec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ff0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f7fb ffbc 	bl	8005f78 <__aeabi_dcmpeq>
 800a000:	4680      	mov	r8, r0
 800a002:	b158      	cbz	r0, 800a01c <_dtoa_r+0xdc>
 800a004:	2301      	movs	r3, #1
 800a006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8558 	beq.w	800aac2 <_dtoa_r+0xb82>
 800a012:	4882      	ldr	r0, [pc, #520]	; (800a21c <_dtoa_r+0x2dc>)
 800a014:	6018      	str	r0, [r3, #0]
 800a016:	1e43      	subs	r3, r0, #1
 800a018:	9303      	str	r3, [sp, #12]
 800a01a:	e7df      	b.n	8009fdc <_dtoa_r+0x9c>
 800a01c:	ab16      	add	r3, sp, #88	; 0x58
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	ab17      	add	r3, sp, #92	; 0x5c
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	4628      	mov	r0, r5
 800a026:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a02a:	f001 fd01 	bl	800ba30 <__d2b>
 800a02e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a032:	4683      	mov	fp, r0
 800a034:	2c00      	cmp	r4, #0
 800a036:	d07f      	beq.n	800a138 <_dtoa_r+0x1f8>
 800a038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a03c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a03e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a046:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a04a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a04e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a052:	2200      	movs	r2, #0
 800a054:	4b72      	ldr	r3, [pc, #456]	; (800a220 <_dtoa_r+0x2e0>)
 800a056:	f7fb fb6f 	bl	8005738 <__aeabi_dsub>
 800a05a:	a365      	add	r3, pc, #404	; (adr r3, 800a1f0 <_dtoa_r+0x2b0>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7fb fd22 	bl	8005aa8 <__aeabi_dmul>
 800a064:	a364      	add	r3, pc, #400	; (adr r3, 800a1f8 <_dtoa_r+0x2b8>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7fb fb67 	bl	800573c <__adddf3>
 800a06e:	4606      	mov	r6, r0
 800a070:	4620      	mov	r0, r4
 800a072:	460f      	mov	r7, r1
 800a074:	f7fb fcae 	bl	80059d4 <__aeabi_i2d>
 800a078:	a361      	add	r3, pc, #388	; (adr r3, 800a200 <_dtoa_r+0x2c0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7fb fd13 	bl	8005aa8 <__aeabi_dmul>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7fb fb57 	bl	800573c <__adddf3>
 800a08e:	4606      	mov	r6, r0
 800a090:	460f      	mov	r7, r1
 800a092:	f7fb ffb9 	bl	8006008 <__aeabi_d2iz>
 800a096:	2200      	movs	r2, #0
 800a098:	4682      	mov	sl, r0
 800a09a:	2300      	movs	r3, #0
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7fb ff74 	bl	8005f8c <__aeabi_dcmplt>
 800a0a4:	b148      	cbz	r0, 800a0ba <_dtoa_r+0x17a>
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	f7fb fc94 	bl	80059d4 <__aeabi_i2d>
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	f7fb ff62 	bl	8005f78 <__aeabi_dcmpeq>
 800a0b4:	b908      	cbnz	r0, 800a0ba <_dtoa_r+0x17a>
 800a0b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ba:	f1ba 0f16 	cmp.w	sl, #22
 800a0be:	d858      	bhi.n	800a172 <_dtoa_r+0x232>
 800a0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c4:	4b57      	ldr	r3, [pc, #348]	; (800a224 <_dtoa_r+0x2e4>)
 800a0c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7fb ff5d 	bl	8005f8c <__aeabi_dcmplt>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d04f      	beq.n	800a176 <_dtoa_r+0x236>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0e0:	1b1c      	subs	r4, r3, r4
 800a0e2:	1e63      	subs	r3, r4, #1
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	bf49      	itett	mi
 800a0e8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a0ec:	2300      	movpl	r3, #0
 800a0ee:	9306      	strmi	r3, [sp, #24]
 800a0f0:	2300      	movmi	r3, #0
 800a0f2:	bf54      	ite	pl
 800a0f4:	9306      	strpl	r3, [sp, #24]
 800a0f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a0f8:	f1ba 0f00 	cmp.w	sl, #0
 800a0fc:	db3d      	blt.n	800a17a <_dtoa_r+0x23a>
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a104:	4453      	add	r3, sl
 800a106:	9309      	str	r3, [sp, #36]	; 0x24
 800a108:	2300      	movs	r3, #0
 800a10a:	930a      	str	r3, [sp, #40]	; 0x28
 800a10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a10e:	2b09      	cmp	r3, #9
 800a110:	f200 808c 	bhi.w	800a22c <_dtoa_r+0x2ec>
 800a114:	2b05      	cmp	r3, #5
 800a116:	bfc4      	itt	gt
 800a118:	3b04      	subgt	r3, #4
 800a11a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a11c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a11e:	bfc8      	it	gt
 800a120:	2400      	movgt	r4, #0
 800a122:	f1a3 0302 	sub.w	r3, r3, #2
 800a126:	bfd8      	it	le
 800a128:	2401      	movle	r4, #1
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	f200 808a 	bhi.w	800a244 <_dtoa_r+0x304>
 800a130:	e8df f003 	tbb	[pc, r3]
 800a134:	5b4d4f2d 	.word	0x5b4d4f2d
 800a138:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a13c:	441c      	add	r4, r3
 800a13e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a142:	2b20      	cmp	r3, #32
 800a144:	bfc3      	ittte	gt
 800a146:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a14a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a14e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a152:	f1c3 0320 	rsble	r3, r3, #32
 800a156:	bfc6      	itte	gt
 800a158:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a15c:	4318      	orrgt	r0, r3
 800a15e:	fa06 f003 	lslle.w	r0, r6, r3
 800a162:	f7fb fc27 	bl	80059b4 <__aeabi_ui2d>
 800a166:	2301      	movs	r3, #1
 800a168:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a16c:	3c01      	subs	r4, #1
 800a16e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a170:	e76f      	b.n	800a052 <_dtoa_r+0x112>
 800a172:	2301      	movs	r3, #1
 800a174:	e7b2      	b.n	800a0dc <_dtoa_r+0x19c>
 800a176:	900f      	str	r0, [sp, #60]	; 0x3c
 800a178:	e7b1      	b.n	800a0de <_dtoa_r+0x19e>
 800a17a:	9b06      	ldr	r3, [sp, #24]
 800a17c:	eba3 030a 	sub.w	r3, r3, sl
 800a180:	9306      	str	r3, [sp, #24]
 800a182:	f1ca 0300 	rsb	r3, sl, #0
 800a186:	930a      	str	r3, [sp, #40]	; 0x28
 800a188:	2300      	movs	r3, #0
 800a18a:	930e      	str	r3, [sp, #56]	; 0x38
 800a18c:	e7be      	b.n	800a10c <_dtoa_r+0x1cc>
 800a18e:	2300      	movs	r3, #0
 800a190:	930b      	str	r3, [sp, #44]	; 0x2c
 800a192:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a194:	2b00      	cmp	r3, #0
 800a196:	dc58      	bgt.n	800a24a <_dtoa_r+0x30a>
 800a198:	f04f 0901 	mov.w	r9, #1
 800a19c:	464b      	mov	r3, r9
 800a19e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a1a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a1aa:	6042      	str	r2, [r0, #4]
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	f102 0614 	add.w	r6, r2, #20
 800a1b2:	429e      	cmp	r6, r3
 800a1b4:	6841      	ldr	r1, [r0, #4]
 800a1b6:	d94e      	bls.n	800a256 <_dtoa_r+0x316>
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f001 f84f 	bl	800b25c <_Balloc>
 800a1be:	9003      	str	r0, [sp, #12]
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d14c      	bne.n	800a25e <_dtoa_r+0x31e>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1ca:	4b17      	ldr	r3, [pc, #92]	; (800a228 <_dtoa_r+0x2e8>)
 800a1cc:	e6cc      	b.n	8009f68 <_dtoa_r+0x28>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7de      	b.n	800a190 <_dtoa_r+0x250>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1d8:	eb0a 0903 	add.w	r9, sl, r3
 800a1dc:	f109 0301 	add.w	r3, r9, #1
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	bfb8      	it	lt
 800a1e6:	2301      	movlt	r3, #1
 800a1e8:	e7dd      	b.n	800a1a6 <_dtoa_r+0x266>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e7f2      	b.n	800a1d4 <_dtoa_r+0x294>
 800a1ee:	bf00      	nop
 800a1f0:	636f4361 	.word	0x636f4361
 800a1f4:	3fd287a7 	.word	0x3fd287a7
 800a1f8:	8b60c8b3 	.word	0x8b60c8b3
 800a1fc:	3fc68a28 	.word	0x3fc68a28
 800a200:	509f79fb 	.word	0x509f79fb
 800a204:	3fd34413 	.word	0x3fd34413
 800a208:	0801d8c6 	.word	0x0801d8c6
 800a20c:	0801d8dd 	.word	0x0801d8dd
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	0801d8c2 	.word	0x0801d8c2
 800a218:	0801d8b9 	.word	0x0801d8b9
 800a21c:	0801d73d 	.word	0x0801d73d
 800a220:	3ff80000 	.word	0x3ff80000
 800a224:	0801dab0 	.word	0x0801dab0
 800a228:	0801d95b 	.word	0x0801d95b
 800a22c:	2401      	movs	r4, #1
 800a22e:	2300      	movs	r3, #0
 800a230:	940b      	str	r4, [sp, #44]	; 0x2c
 800a232:	9322      	str	r3, [sp, #136]	; 0x88
 800a234:	f04f 39ff 	mov.w	r9, #4294967295
 800a238:	2200      	movs	r2, #0
 800a23a:	2312      	movs	r3, #18
 800a23c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a240:	9223      	str	r2, [sp, #140]	; 0x8c
 800a242:	e7b0      	b.n	800a1a6 <_dtoa_r+0x266>
 800a244:	2301      	movs	r3, #1
 800a246:	930b      	str	r3, [sp, #44]	; 0x2c
 800a248:	e7f4      	b.n	800a234 <_dtoa_r+0x2f4>
 800a24a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a24e:	464b      	mov	r3, r9
 800a250:	f8cd 9020 	str.w	r9, [sp, #32]
 800a254:	e7a7      	b.n	800a1a6 <_dtoa_r+0x266>
 800a256:	3101      	adds	r1, #1
 800a258:	6041      	str	r1, [r0, #4]
 800a25a:	0052      	lsls	r2, r2, #1
 800a25c:	e7a7      	b.n	800a1ae <_dtoa_r+0x26e>
 800a25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a260:	9a03      	ldr	r2, [sp, #12]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	2b0e      	cmp	r3, #14
 800a268:	f200 80a8 	bhi.w	800a3bc <_dtoa_r+0x47c>
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	f000 80a5 	beq.w	800a3bc <_dtoa_r+0x47c>
 800a272:	f1ba 0f00 	cmp.w	sl, #0
 800a276:	dd34      	ble.n	800a2e2 <_dtoa_r+0x3a2>
 800a278:	4a9a      	ldr	r2, [pc, #616]	; (800a4e4 <_dtoa_r+0x5a4>)
 800a27a:	f00a 030f 	and.w	r3, sl, #15
 800a27e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a282:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a286:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a28a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a28e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a292:	d016      	beq.n	800a2c2 <_dtoa_r+0x382>
 800a294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a298:	4b93      	ldr	r3, [pc, #588]	; (800a4e8 <_dtoa_r+0x5a8>)
 800a29a:	2703      	movs	r7, #3
 800a29c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2a0:	f7fb fd2c 	bl	8005cfc <__aeabi_ddiv>
 800a2a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2a8:	f004 040f 	and.w	r4, r4, #15
 800a2ac:	4e8e      	ldr	r6, [pc, #568]	; (800a4e8 <_dtoa_r+0x5a8>)
 800a2ae:	b954      	cbnz	r4, 800a2c6 <_dtoa_r+0x386>
 800a2b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2b8:	f7fb fd20 	bl	8005cfc <__aeabi_ddiv>
 800a2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c0:	e029      	b.n	800a316 <_dtoa_r+0x3d6>
 800a2c2:	2702      	movs	r7, #2
 800a2c4:	e7f2      	b.n	800a2ac <_dtoa_r+0x36c>
 800a2c6:	07e1      	lsls	r1, r4, #31
 800a2c8:	d508      	bpl.n	800a2dc <_dtoa_r+0x39c>
 800a2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2d2:	f7fb fbe9 	bl	8005aa8 <__aeabi_dmul>
 800a2d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2da:	3701      	adds	r7, #1
 800a2dc:	1064      	asrs	r4, r4, #1
 800a2de:	3608      	adds	r6, #8
 800a2e0:	e7e5      	b.n	800a2ae <_dtoa_r+0x36e>
 800a2e2:	f000 80a5 	beq.w	800a430 <_dtoa_r+0x4f0>
 800a2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ea:	f1ca 0400 	rsb	r4, sl, #0
 800a2ee:	4b7d      	ldr	r3, [pc, #500]	; (800a4e4 <_dtoa_r+0x5a4>)
 800a2f0:	f004 020f 	and.w	r2, r4, #15
 800a2f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7fb fbd4 	bl	8005aa8 <__aeabi_dmul>
 800a300:	2702      	movs	r7, #2
 800a302:	2300      	movs	r3, #0
 800a304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a308:	4e77      	ldr	r6, [pc, #476]	; (800a4e8 <_dtoa_r+0x5a8>)
 800a30a:	1124      	asrs	r4, r4, #4
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	f040 8084 	bne.w	800a41a <_dtoa_r+0x4da>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1d2      	bne.n	800a2bc <_dtoa_r+0x37c>
 800a316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 808b 	beq.w	800a434 <_dtoa_r+0x4f4>
 800a31e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a32a:	2200      	movs	r2, #0
 800a32c:	4b6f      	ldr	r3, [pc, #444]	; (800a4ec <_dtoa_r+0x5ac>)
 800a32e:	f7fb fe2d 	bl	8005f8c <__aeabi_dcmplt>
 800a332:	2800      	cmp	r0, #0
 800a334:	d07e      	beq.n	800a434 <_dtoa_r+0x4f4>
 800a336:	9b08      	ldr	r3, [sp, #32]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d07b      	beq.n	800a434 <_dtoa_r+0x4f4>
 800a33c:	f1b9 0f00 	cmp.w	r9, #0
 800a340:	dd38      	ble.n	800a3b4 <_dtoa_r+0x474>
 800a342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a346:	2200      	movs	r2, #0
 800a348:	4b69      	ldr	r3, [pc, #420]	; (800a4f0 <_dtoa_r+0x5b0>)
 800a34a:	f7fb fbad 	bl	8005aa8 <__aeabi_dmul>
 800a34e:	464c      	mov	r4, r9
 800a350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a354:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a358:	3701      	adds	r7, #1
 800a35a:	4638      	mov	r0, r7
 800a35c:	f7fb fb3a 	bl	80059d4 <__aeabi_i2d>
 800a360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a364:	f7fb fba0 	bl	8005aa8 <__aeabi_dmul>
 800a368:	2200      	movs	r2, #0
 800a36a:	4b62      	ldr	r3, [pc, #392]	; (800a4f4 <_dtoa_r+0x5b4>)
 800a36c:	f7fb f9e6 	bl	800573c <__adddf3>
 800a370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a378:	9611      	str	r6, [sp, #68]	; 0x44
 800a37a:	2c00      	cmp	r4, #0
 800a37c:	d15d      	bne.n	800a43a <_dtoa_r+0x4fa>
 800a37e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a382:	2200      	movs	r2, #0
 800a384:	4b5c      	ldr	r3, [pc, #368]	; (800a4f8 <_dtoa_r+0x5b8>)
 800a386:	f7fb f9d7 	bl	8005738 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a392:	4633      	mov	r3, r6
 800a394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a396:	f7fb fe17 	bl	8005fc8 <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f040 829c 	bne.w	800a8d8 <_dtoa_r+0x998>
 800a3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3aa:	f7fb fdef 	bl	8005f8c <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f040 8290 	bne.w	800a8d4 <_dtoa_r+0x994>
 800a3b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a3b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f2c0 8152 	blt.w	800a668 <_dtoa_r+0x728>
 800a3c4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3c8:	f300 814e 	bgt.w	800a668 <_dtoa_r+0x728>
 800a3cc:	4b45      	ldr	r3, [pc, #276]	; (800a4e4 <_dtoa_r+0x5a4>)
 800a3ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a3da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f280 80db 	bge.w	800a598 <_dtoa_r+0x658>
 800a3e2:	9b08      	ldr	r3, [sp, #32]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f300 80d7 	bgt.w	800a598 <_dtoa_r+0x658>
 800a3ea:	f040 8272 	bne.w	800a8d2 <_dtoa_r+0x992>
 800a3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	4b40      	ldr	r3, [pc, #256]	; (800a4f8 <_dtoa_r+0x5b8>)
 800a3f6:	f7fb fb57 	bl	8005aa8 <__aeabi_dmul>
 800a3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3fe:	f7fb fdd9 	bl	8005fb4 <__aeabi_dcmpge>
 800a402:	9c08      	ldr	r4, [sp, #32]
 800a404:	4626      	mov	r6, r4
 800a406:	2800      	cmp	r0, #0
 800a408:	f040 8248 	bne.w	800a89c <_dtoa_r+0x95c>
 800a40c:	2331      	movs	r3, #49	; 0x31
 800a40e:	9f03      	ldr	r7, [sp, #12]
 800a410:	f10a 0a01 	add.w	sl, sl, #1
 800a414:	f807 3b01 	strb.w	r3, [r7], #1
 800a418:	e244      	b.n	800a8a4 <_dtoa_r+0x964>
 800a41a:	07e2      	lsls	r2, r4, #31
 800a41c:	d505      	bpl.n	800a42a <_dtoa_r+0x4ea>
 800a41e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a422:	f7fb fb41 	bl	8005aa8 <__aeabi_dmul>
 800a426:	2301      	movs	r3, #1
 800a428:	3701      	adds	r7, #1
 800a42a:	1064      	asrs	r4, r4, #1
 800a42c:	3608      	adds	r6, #8
 800a42e:	e76d      	b.n	800a30c <_dtoa_r+0x3cc>
 800a430:	2702      	movs	r7, #2
 800a432:	e770      	b.n	800a316 <_dtoa_r+0x3d6>
 800a434:	46d0      	mov	r8, sl
 800a436:	9c08      	ldr	r4, [sp, #32]
 800a438:	e78f      	b.n	800a35a <_dtoa_r+0x41a>
 800a43a:	9903      	ldr	r1, [sp, #12]
 800a43c:	4b29      	ldr	r3, [pc, #164]	; (800a4e4 <_dtoa_r+0x5a4>)
 800a43e:	4421      	add	r1, r4
 800a440:	9112      	str	r1, [sp, #72]	; 0x48
 800a442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a444:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a448:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a44c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a450:	2900      	cmp	r1, #0
 800a452:	d055      	beq.n	800a500 <_dtoa_r+0x5c0>
 800a454:	2000      	movs	r0, #0
 800a456:	4929      	ldr	r1, [pc, #164]	; (800a4fc <_dtoa_r+0x5bc>)
 800a458:	f7fb fc50 	bl	8005cfc <__aeabi_ddiv>
 800a45c:	463b      	mov	r3, r7
 800a45e:	4632      	mov	r2, r6
 800a460:	f7fb f96a 	bl	8005738 <__aeabi_dsub>
 800a464:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a468:	9f03      	ldr	r7, [sp, #12]
 800a46a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46e:	f7fb fdcb 	bl	8006008 <__aeabi_d2iz>
 800a472:	4604      	mov	r4, r0
 800a474:	f7fb faae 	bl	80059d4 <__aeabi_i2d>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a480:	f7fb f95a 	bl	8005738 <__aeabi_dsub>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	3430      	adds	r4, #48	; 0x30
 800a48a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a48e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a492:	f807 4b01 	strb.w	r4, [r7], #1
 800a496:	f7fb fd79 	bl	8005f8c <__aeabi_dcmplt>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d174      	bne.n	800a588 <_dtoa_r+0x648>
 800a49e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	4911      	ldr	r1, [pc, #68]	; (800a4ec <_dtoa_r+0x5ac>)
 800a4a6:	f7fb f947 	bl	8005738 <__aeabi_dsub>
 800a4aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ae:	f7fb fd6d 	bl	8005f8c <__aeabi_dcmplt>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f040 80b7 	bne.w	800a626 <_dtoa_r+0x6e6>
 800a4b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4ba:	429f      	cmp	r7, r3
 800a4bc:	f43f af7a 	beq.w	800a3b4 <_dtoa_r+0x474>
 800a4c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <_dtoa_r+0x5b0>)
 800a4c8:	f7fb faee 	bl	8005aa8 <__aeabi_dmul>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4d6:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <_dtoa_r+0x5b0>)
 800a4d8:	f7fb fae6 	bl	8005aa8 <__aeabi_dmul>
 800a4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e0:	e7c3      	b.n	800a46a <_dtoa_r+0x52a>
 800a4e2:	bf00      	nop
 800a4e4:	0801dab0 	.word	0x0801dab0
 800a4e8:	0801da88 	.word	0x0801da88
 800a4ec:	3ff00000 	.word	0x3ff00000
 800a4f0:	40240000 	.word	0x40240000
 800a4f4:	401c0000 	.word	0x401c0000
 800a4f8:	40140000 	.word	0x40140000
 800a4fc:	3fe00000 	.word	0x3fe00000
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7fb fad0 	bl	8005aa8 <__aeabi_dmul>
 800a508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a50a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a50e:	9c03      	ldr	r4, [sp, #12]
 800a510:	9314      	str	r3, [sp, #80]	; 0x50
 800a512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a516:	f7fb fd77 	bl	8006008 <__aeabi_d2iz>
 800a51a:	9015      	str	r0, [sp, #84]	; 0x54
 800a51c:	f7fb fa5a 	bl	80059d4 <__aeabi_i2d>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a528:	f7fb f906 	bl	8005738 <__aeabi_dsub>
 800a52c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a52e:	4606      	mov	r6, r0
 800a530:	3330      	adds	r3, #48	; 0x30
 800a532:	f804 3b01 	strb.w	r3, [r4], #1
 800a536:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a538:	460f      	mov	r7, r1
 800a53a:	429c      	cmp	r4, r3
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	d124      	bne.n	800a58c <_dtoa_r+0x64c>
 800a542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a546:	4bb0      	ldr	r3, [pc, #704]	; (800a808 <_dtoa_r+0x8c8>)
 800a548:	f7fb f8f8 	bl	800573c <__adddf3>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7fb fd38 	bl	8005fc8 <__aeabi_dcmpgt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d163      	bne.n	800a624 <_dtoa_r+0x6e4>
 800a55c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a560:	2000      	movs	r0, #0
 800a562:	49a9      	ldr	r1, [pc, #676]	; (800a808 <_dtoa_r+0x8c8>)
 800a564:	f7fb f8e8 	bl	8005738 <__aeabi_dsub>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7fb fd0c 	bl	8005f8c <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	f43f af1d 	beq.w	800a3b4 <_dtoa_r+0x474>
 800a57a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a57c:	1e7b      	subs	r3, r7, #1
 800a57e:	9314      	str	r3, [sp, #80]	; 0x50
 800a580:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a584:	2b30      	cmp	r3, #48	; 0x30
 800a586:	d0f8      	beq.n	800a57a <_dtoa_r+0x63a>
 800a588:	46c2      	mov	sl, r8
 800a58a:	e03b      	b.n	800a604 <_dtoa_r+0x6c4>
 800a58c:	4b9f      	ldr	r3, [pc, #636]	; (800a80c <_dtoa_r+0x8cc>)
 800a58e:	f7fb fa8b 	bl	8005aa8 <__aeabi_dmul>
 800a592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a596:	e7bc      	b.n	800a512 <_dtoa_r+0x5d2>
 800a598:	9f03      	ldr	r7, [sp, #12]
 800a59a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a59e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7fb fba9 	bl	8005cfc <__aeabi_ddiv>
 800a5aa:	f7fb fd2d 	bl	8006008 <__aeabi_d2iz>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	f7fb fa10 	bl	80059d4 <__aeabi_i2d>
 800a5b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5b8:	f7fb fa76 	bl	8005aa8 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	f7fb f8b8 	bl	8005738 <__aeabi_dsub>
 800a5c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a5cc:	f807 6b01 	strb.w	r6, [r7], #1
 800a5d0:	9e03      	ldr	r6, [sp, #12]
 800a5d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a5d6:	1bbe      	subs	r6, r7, r6
 800a5d8:	45b4      	cmp	ip, r6
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	d136      	bne.n	800a64e <_dtoa_r+0x70e>
 800a5e0:	f7fb f8ac 	bl	800573c <__adddf3>
 800a5e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	4689      	mov	r9, r1
 800a5ec:	f7fb fcec 	bl	8005fc8 <__aeabi_dcmpgt>
 800a5f0:	bb58      	cbnz	r0, 800a64a <_dtoa_r+0x70a>
 800a5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	f7fb fcbd 	bl	8005f78 <__aeabi_dcmpeq>
 800a5fe:	b108      	cbz	r0, 800a604 <_dtoa_r+0x6c4>
 800a600:	07e1      	lsls	r1, r4, #31
 800a602:	d422      	bmi.n	800a64a <_dtoa_r+0x70a>
 800a604:	4628      	mov	r0, r5
 800a606:	4659      	mov	r1, fp
 800a608:	f000 fe68 	bl	800b2dc <_Bfree>
 800a60c:	2300      	movs	r3, #0
 800a60e:	703b      	strb	r3, [r7, #0]
 800a610:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a612:	f10a 0001 	add.w	r0, sl, #1
 800a616:	6018      	str	r0, [r3, #0]
 800a618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f43f acde 	beq.w	8009fdc <_dtoa_r+0x9c>
 800a620:	601f      	str	r7, [r3, #0]
 800a622:	e4db      	b.n	8009fdc <_dtoa_r+0x9c>
 800a624:	4627      	mov	r7, r4
 800a626:	463b      	mov	r3, r7
 800a628:	461f      	mov	r7, r3
 800a62a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a62e:	2a39      	cmp	r2, #57	; 0x39
 800a630:	d107      	bne.n	800a642 <_dtoa_r+0x702>
 800a632:	9a03      	ldr	r2, [sp, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d1f7      	bne.n	800a628 <_dtoa_r+0x6e8>
 800a638:	2230      	movs	r2, #48	; 0x30
 800a63a:	9903      	ldr	r1, [sp, #12]
 800a63c:	f108 0801 	add.w	r8, r8, #1
 800a640:	700a      	strb	r2, [r1, #0]
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	3201      	adds	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
 800a648:	e79e      	b.n	800a588 <_dtoa_r+0x648>
 800a64a:	46d0      	mov	r8, sl
 800a64c:	e7eb      	b.n	800a626 <_dtoa_r+0x6e6>
 800a64e:	2200      	movs	r2, #0
 800a650:	4b6e      	ldr	r3, [pc, #440]	; (800a80c <_dtoa_r+0x8cc>)
 800a652:	f7fb fa29 	bl	8005aa8 <__aeabi_dmul>
 800a656:	2200      	movs	r2, #0
 800a658:	2300      	movs	r3, #0
 800a65a:	4680      	mov	r8, r0
 800a65c:	4689      	mov	r9, r1
 800a65e:	f7fb fc8b 	bl	8005f78 <__aeabi_dcmpeq>
 800a662:	2800      	cmp	r0, #0
 800a664:	d09b      	beq.n	800a59e <_dtoa_r+0x65e>
 800a666:	e7cd      	b.n	800a604 <_dtoa_r+0x6c4>
 800a668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	f000 80d0 	beq.w	800a810 <_dtoa_r+0x8d0>
 800a670:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a672:	2a01      	cmp	r2, #1
 800a674:	f300 80ae 	bgt.w	800a7d4 <_dtoa_r+0x894>
 800a678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	f000 80a6 	beq.w	800a7cc <_dtoa_r+0x88c>
 800a680:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a684:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a686:	9f06      	ldr	r7, [sp, #24]
 800a688:	9a06      	ldr	r2, [sp, #24]
 800a68a:	2101      	movs	r1, #1
 800a68c:	441a      	add	r2, r3
 800a68e:	9206      	str	r2, [sp, #24]
 800a690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a692:	4628      	mov	r0, r5
 800a694:	441a      	add	r2, r3
 800a696:	9209      	str	r2, [sp, #36]	; 0x24
 800a698:	f000 ff20 	bl	800b4dc <__i2b>
 800a69c:	4606      	mov	r6, r0
 800a69e:	2f00      	cmp	r7, #0
 800a6a0:	dd0c      	ble.n	800a6bc <_dtoa_r+0x77c>
 800a6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd09      	ble.n	800a6bc <_dtoa_r+0x77c>
 800a6a8:	42bb      	cmp	r3, r7
 800a6aa:	bfa8      	it	ge
 800a6ac:	463b      	movge	r3, r7
 800a6ae:	9a06      	ldr	r2, [sp, #24]
 800a6b0:	1aff      	subs	r7, r7, r3
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	9206      	str	r2, [sp, #24]
 800a6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6be:	b1f3      	cbz	r3, 800a6fe <_dtoa_r+0x7be>
 800a6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 80a8 	beq.w	800a818 <_dtoa_r+0x8d8>
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	dd10      	ble.n	800a6ee <_dtoa_r+0x7ae>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 ffc1 	bl	800b658 <__pow5mult>
 800a6d6:	465a      	mov	r2, fp
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4606      	mov	r6, r0
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 ff13 	bl	800b508 <__multiply>
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 fdf8 	bl	800b2dc <_Bfree>
 800a6ec:	46c3      	mov	fp, r8
 800a6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f0:	1b1a      	subs	r2, r3, r4
 800a6f2:	d004      	beq.n	800a6fe <_dtoa_r+0x7be>
 800a6f4:	4659      	mov	r1, fp
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f000 ffae 	bl	800b658 <__pow5mult>
 800a6fc:	4683      	mov	fp, r0
 800a6fe:	2101      	movs	r1, #1
 800a700:	4628      	mov	r0, r5
 800a702:	f000 feeb 	bl	800b4dc <__i2b>
 800a706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a708:	4604      	mov	r4, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f340 8086 	ble.w	800a81c <_dtoa_r+0x8dc>
 800a710:	461a      	mov	r2, r3
 800a712:	4601      	mov	r1, r0
 800a714:	4628      	mov	r0, r5
 800a716:	f000 ff9f 	bl	800b658 <__pow5mult>
 800a71a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a71c:	4604      	mov	r4, r0
 800a71e:	2b01      	cmp	r3, #1
 800a720:	dd7f      	ble.n	800a822 <_dtoa_r+0x8e2>
 800a722:	f04f 0800 	mov.w	r8, #0
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a72c:	6918      	ldr	r0, [r3, #16]
 800a72e:	f000 fe87 	bl	800b440 <__hi0bits>
 800a732:	f1c0 0020 	rsb	r0, r0, #32
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	4418      	add	r0, r3
 800a73a:	f010 001f 	ands.w	r0, r0, #31
 800a73e:	f000 8092 	beq.w	800a866 <_dtoa_r+0x926>
 800a742:	f1c0 0320 	rsb	r3, r0, #32
 800a746:	2b04      	cmp	r3, #4
 800a748:	f340 808a 	ble.w	800a860 <_dtoa_r+0x920>
 800a74c:	f1c0 001c 	rsb	r0, r0, #28
 800a750:	9b06      	ldr	r3, [sp, #24]
 800a752:	4407      	add	r7, r0
 800a754:	4403      	add	r3, r0
 800a756:	9306      	str	r3, [sp, #24]
 800a758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75a:	4403      	add	r3, r0
 800a75c:	9309      	str	r3, [sp, #36]	; 0x24
 800a75e:	9b06      	ldr	r3, [sp, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x830>
 800a764:	4659      	mov	r1, fp
 800a766:	461a      	mov	r2, r3
 800a768:	4628      	mov	r0, r5
 800a76a:	f000 ffcf 	bl	800b70c <__lshift>
 800a76e:	4683      	mov	fp, r0
 800a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd05      	ble.n	800a782 <_dtoa_r+0x842>
 800a776:	4621      	mov	r1, r4
 800a778:	461a      	mov	r2, r3
 800a77a:	4628      	mov	r0, r5
 800a77c:	f000 ffc6 	bl	800b70c <__lshift>
 800a780:	4604      	mov	r4, r0
 800a782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d070      	beq.n	800a86a <_dtoa_r+0x92a>
 800a788:	4621      	mov	r1, r4
 800a78a:	4658      	mov	r0, fp
 800a78c:	f001 f82e 	bl	800b7ec <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	da6a      	bge.n	800a86a <_dtoa_r+0x92a>
 800a794:	2300      	movs	r3, #0
 800a796:	4659      	mov	r1, fp
 800a798:	220a      	movs	r2, #10
 800a79a:	4628      	mov	r0, r5
 800a79c:	f000 fdc0 	bl	800b320 <__multadd>
 800a7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a2:	4683      	mov	fp, r0
 800a7a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8194 	beq.w	800aad6 <_dtoa_r+0xb96>
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	220a      	movs	r2, #10
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 fdb3 	bl	800b320 <__multadd>
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	4606      	mov	r6, r0
 800a7c0:	f300 8093 	bgt.w	800a8ea <_dtoa_r+0x9aa>
 800a7c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dc57      	bgt.n	800a87a <_dtoa_r+0x93a>
 800a7ca:	e08e      	b.n	800a8ea <_dtoa_r+0x9aa>
 800a7cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7d2:	e757      	b.n	800a684 <_dtoa_r+0x744>
 800a7d4:	9b08      	ldr	r3, [sp, #32]
 800a7d6:	1e5c      	subs	r4, r3, #1
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	bfb7      	itett	lt
 800a7de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7e0:	1b1c      	subge	r4, r3, r4
 800a7e2:	1ae2      	sublt	r2, r4, r3
 800a7e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a7e6:	bfbe      	ittt	lt
 800a7e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a7ea:	189b      	addlt	r3, r3, r2
 800a7ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	bfb8      	it	lt
 800a7f2:	2400      	movlt	r4, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfbb      	ittet	lt
 800a7f8:	9b06      	ldrlt	r3, [sp, #24]
 800a7fa:	9a08      	ldrlt	r2, [sp, #32]
 800a7fc:	9f06      	ldrge	r7, [sp, #24]
 800a7fe:	1a9f      	sublt	r7, r3, r2
 800a800:	bfac      	ite	ge
 800a802:	9b08      	ldrge	r3, [sp, #32]
 800a804:	2300      	movlt	r3, #0
 800a806:	e73f      	b.n	800a688 <_dtoa_r+0x748>
 800a808:	3fe00000 	.word	0x3fe00000
 800a80c:	40240000 	.word	0x40240000
 800a810:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a812:	9f06      	ldr	r7, [sp, #24]
 800a814:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a816:	e742      	b.n	800a69e <_dtoa_r+0x75e>
 800a818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a81a:	e76b      	b.n	800a6f4 <_dtoa_r+0x7b4>
 800a81c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a81e:	2b01      	cmp	r3, #1
 800a820:	dc19      	bgt.n	800a856 <_dtoa_r+0x916>
 800a822:	9b04      	ldr	r3, [sp, #16]
 800a824:	b9bb      	cbnz	r3, 800a856 <_dtoa_r+0x916>
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a82c:	b99b      	cbnz	r3, 800a856 <_dtoa_r+0x916>
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a834:	0d1b      	lsrs	r3, r3, #20
 800a836:	051b      	lsls	r3, r3, #20
 800a838:	b183      	cbz	r3, 800a85c <_dtoa_r+0x91c>
 800a83a:	f04f 0801 	mov.w	r8, #1
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	3301      	adds	r3, #1
 800a842:	9306      	str	r3, [sp, #24]
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	3301      	adds	r3, #1
 800a848:	9309      	str	r3, [sp, #36]	; 0x24
 800a84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f47f af6a 	bne.w	800a726 <_dtoa_r+0x7e6>
 800a852:	2001      	movs	r0, #1
 800a854:	e76f      	b.n	800a736 <_dtoa_r+0x7f6>
 800a856:	f04f 0800 	mov.w	r8, #0
 800a85a:	e7f6      	b.n	800a84a <_dtoa_r+0x90a>
 800a85c:	4698      	mov	r8, r3
 800a85e:	e7f4      	b.n	800a84a <_dtoa_r+0x90a>
 800a860:	f43f af7d 	beq.w	800a75e <_dtoa_r+0x81e>
 800a864:	4618      	mov	r0, r3
 800a866:	301c      	adds	r0, #28
 800a868:	e772      	b.n	800a750 <_dtoa_r+0x810>
 800a86a:	9b08      	ldr	r3, [sp, #32]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dc36      	bgt.n	800a8de <_dtoa_r+0x99e>
 800a870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a872:	2b02      	cmp	r3, #2
 800a874:	dd33      	ble.n	800a8de <_dtoa_r+0x99e>
 800a876:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d10d      	bne.n	800a89c <_dtoa_r+0x95c>
 800a880:	4621      	mov	r1, r4
 800a882:	464b      	mov	r3, r9
 800a884:	2205      	movs	r2, #5
 800a886:	4628      	mov	r0, r5
 800a888:	f000 fd4a 	bl	800b320 <__multadd>
 800a88c:	4601      	mov	r1, r0
 800a88e:	4604      	mov	r4, r0
 800a890:	4658      	mov	r0, fp
 800a892:	f000 ffab 	bl	800b7ec <__mcmp>
 800a896:	2800      	cmp	r0, #0
 800a898:	f73f adb8 	bgt.w	800a40c <_dtoa_r+0x4cc>
 800a89c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a89e:	9f03      	ldr	r7, [sp, #12]
 800a8a0:	ea6f 0a03 	mvn.w	sl, r3
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 fd16 	bl	800b2dc <_Bfree>
 800a8b0:	2e00      	cmp	r6, #0
 800a8b2:	f43f aea7 	beq.w	800a604 <_dtoa_r+0x6c4>
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d005      	beq.n	800a8c8 <_dtoa_r+0x988>
 800a8bc:	45b0      	cmp	r8, r6
 800a8be:	d003      	beq.n	800a8c8 <_dtoa_r+0x988>
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 fd0a 	bl	800b2dc <_Bfree>
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 fd06 	bl	800b2dc <_Bfree>
 800a8d0:	e698      	b.n	800a604 <_dtoa_r+0x6c4>
 800a8d2:	2400      	movs	r4, #0
 800a8d4:	4626      	mov	r6, r4
 800a8d6:	e7e1      	b.n	800a89c <_dtoa_r+0x95c>
 800a8d8:	46c2      	mov	sl, r8
 800a8da:	4626      	mov	r6, r4
 800a8dc:	e596      	b.n	800a40c <_dtoa_r+0x4cc>
 800a8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 80fd 	beq.w	800aae4 <_dtoa_r+0xba4>
 800a8ea:	2f00      	cmp	r7, #0
 800a8ec:	dd05      	ble.n	800a8fa <_dtoa_r+0x9ba>
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	463a      	mov	r2, r7
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 ff0a 	bl	800b70c <__lshift>
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	d05c      	beq.n	800a9ba <_dtoa_r+0xa7a>
 800a900:	4628      	mov	r0, r5
 800a902:	6871      	ldr	r1, [r6, #4]
 800a904:	f000 fcaa 	bl	800b25c <_Balloc>
 800a908:	4607      	mov	r7, r0
 800a90a:	b928      	cbnz	r0, 800a918 <_dtoa_r+0x9d8>
 800a90c:	4602      	mov	r2, r0
 800a90e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a912:	4b7f      	ldr	r3, [pc, #508]	; (800ab10 <_dtoa_r+0xbd0>)
 800a914:	f7ff bb28 	b.w	8009f68 <_dtoa_r+0x28>
 800a918:	6932      	ldr	r2, [r6, #16]
 800a91a:	f106 010c 	add.w	r1, r6, #12
 800a91e:	3202      	adds	r2, #2
 800a920:	0092      	lsls	r2, r2, #2
 800a922:	300c      	adds	r0, #12
 800a924:	f000 fc8c 	bl	800b240 <memcpy>
 800a928:	2201      	movs	r2, #1
 800a92a:	4639      	mov	r1, r7
 800a92c:	4628      	mov	r0, r5
 800a92e:	f000 feed 	bl	800b70c <__lshift>
 800a932:	46b0      	mov	r8, r6
 800a934:	4606      	mov	r6, r0
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	9308      	str	r3, [sp, #32]
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	444b      	add	r3, r9
 800a940:	930a      	str	r3, [sp, #40]	; 0x28
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	9309      	str	r3, [sp, #36]	; 0x24
 800a94a:	9b08      	ldr	r3, [sp, #32]
 800a94c:	4621      	mov	r1, r4
 800a94e:	3b01      	subs	r3, #1
 800a950:	4658      	mov	r0, fp
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	f7ff fa68 	bl	8009e28 <quorem>
 800a958:	4603      	mov	r3, r0
 800a95a:	4641      	mov	r1, r8
 800a95c:	3330      	adds	r3, #48	; 0x30
 800a95e:	9006      	str	r0, [sp, #24]
 800a960:	4658      	mov	r0, fp
 800a962:	930b      	str	r3, [sp, #44]	; 0x2c
 800a964:	f000 ff42 	bl	800b7ec <__mcmp>
 800a968:	4632      	mov	r2, r6
 800a96a:	4681      	mov	r9, r0
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 ff58 	bl	800b824 <__mdiff>
 800a974:	68c2      	ldr	r2, [r0, #12]
 800a976:	4607      	mov	r7, r0
 800a978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97a:	bb02      	cbnz	r2, 800a9be <_dtoa_r+0xa7e>
 800a97c:	4601      	mov	r1, r0
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 ff34 	bl	800b7ec <__mcmp>
 800a984:	4602      	mov	r2, r0
 800a986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a988:	4639      	mov	r1, r7
 800a98a:	4628      	mov	r0, r5
 800a98c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a990:	f000 fca4 	bl	800b2dc <_Bfree>
 800a994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a998:	9f08      	ldr	r7, [sp, #32]
 800a99a:	ea43 0102 	orr.w	r1, r3, r2
 800a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9a4:	d10d      	bne.n	800a9c2 <_dtoa_r+0xa82>
 800a9a6:	2b39      	cmp	r3, #57	; 0x39
 800a9a8:	d029      	beq.n	800a9fe <_dtoa_r+0xabe>
 800a9aa:	f1b9 0f00 	cmp.w	r9, #0
 800a9ae:	dd01      	ble.n	800a9b4 <_dtoa_r+0xa74>
 800a9b0:	9b06      	ldr	r3, [sp, #24]
 800a9b2:	3331      	adds	r3, #49	; 0x31
 800a9b4:	9a04      	ldr	r2, [sp, #16]
 800a9b6:	7013      	strb	r3, [r2, #0]
 800a9b8:	e776      	b.n	800a8a8 <_dtoa_r+0x968>
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	e7b9      	b.n	800a932 <_dtoa_r+0x9f2>
 800a9be:	2201      	movs	r2, #1
 800a9c0:	e7e2      	b.n	800a988 <_dtoa_r+0xa48>
 800a9c2:	f1b9 0f00 	cmp.w	r9, #0
 800a9c6:	db06      	blt.n	800a9d6 <_dtoa_r+0xa96>
 800a9c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a9ca:	ea41 0909 	orr.w	r9, r1, r9
 800a9ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9d0:	ea59 0101 	orrs.w	r1, r9, r1
 800a9d4:	d120      	bne.n	800aa18 <_dtoa_r+0xad8>
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	ddec      	ble.n	800a9b4 <_dtoa_r+0xa74>
 800a9da:	4659      	mov	r1, fp
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4628      	mov	r0, r5
 800a9e0:	9308      	str	r3, [sp, #32]
 800a9e2:	f000 fe93 	bl	800b70c <__lshift>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4683      	mov	fp, r0
 800a9ea:	f000 feff 	bl	800b7ec <__mcmp>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	9b08      	ldr	r3, [sp, #32]
 800a9f2:	dc02      	bgt.n	800a9fa <_dtoa_r+0xaba>
 800a9f4:	d1de      	bne.n	800a9b4 <_dtoa_r+0xa74>
 800a9f6:	07da      	lsls	r2, r3, #31
 800a9f8:	d5dc      	bpl.n	800a9b4 <_dtoa_r+0xa74>
 800a9fa:	2b39      	cmp	r3, #57	; 0x39
 800a9fc:	d1d8      	bne.n	800a9b0 <_dtoa_r+0xa70>
 800a9fe:	2339      	movs	r3, #57	; 0x39
 800aa00:	9a04      	ldr	r2, [sp, #16]
 800aa02:	7013      	strb	r3, [r2, #0]
 800aa04:	463b      	mov	r3, r7
 800aa06:	461f      	mov	r7, r3
 800aa08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	2a39      	cmp	r2, #57	; 0x39
 800aa10:	d050      	beq.n	800aab4 <_dtoa_r+0xb74>
 800aa12:	3201      	adds	r2, #1
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	e747      	b.n	800a8a8 <_dtoa_r+0x968>
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	dd03      	ble.n	800aa24 <_dtoa_r+0xae4>
 800aa1c:	2b39      	cmp	r3, #57	; 0x39
 800aa1e:	d0ee      	beq.n	800a9fe <_dtoa_r+0xabe>
 800aa20:	3301      	adds	r3, #1
 800aa22:	e7c7      	b.n	800a9b4 <_dtoa_r+0xa74>
 800aa24:	9a08      	ldr	r2, [sp, #32]
 800aa26:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa28:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa2c:	428a      	cmp	r2, r1
 800aa2e:	d02a      	beq.n	800aa86 <_dtoa_r+0xb46>
 800aa30:	4659      	mov	r1, fp
 800aa32:	2300      	movs	r3, #0
 800aa34:	220a      	movs	r2, #10
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 fc72 	bl	800b320 <__multadd>
 800aa3c:	45b0      	cmp	r8, r6
 800aa3e:	4683      	mov	fp, r0
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	f04f 020a 	mov.w	r2, #10
 800aa48:	4641      	mov	r1, r8
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	d107      	bne.n	800aa5e <_dtoa_r+0xb1e>
 800aa4e:	f000 fc67 	bl	800b320 <__multadd>
 800aa52:	4680      	mov	r8, r0
 800aa54:	4606      	mov	r6, r0
 800aa56:	9b08      	ldr	r3, [sp, #32]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	9308      	str	r3, [sp, #32]
 800aa5c:	e775      	b.n	800a94a <_dtoa_r+0xa0a>
 800aa5e:	f000 fc5f 	bl	800b320 <__multadd>
 800aa62:	4631      	mov	r1, r6
 800aa64:	4680      	mov	r8, r0
 800aa66:	2300      	movs	r3, #0
 800aa68:	220a      	movs	r2, #10
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 fc58 	bl	800b320 <__multadd>
 800aa70:	4606      	mov	r6, r0
 800aa72:	e7f0      	b.n	800aa56 <_dtoa_r+0xb16>
 800aa74:	f1b9 0f00 	cmp.w	r9, #0
 800aa78:	bfcc      	ite	gt
 800aa7a:	464f      	movgt	r7, r9
 800aa7c:	2701      	movle	r7, #1
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	9a03      	ldr	r2, [sp, #12]
 800aa84:	4417      	add	r7, r2
 800aa86:	4659      	mov	r1, fp
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	9308      	str	r3, [sp, #32]
 800aa8e:	f000 fe3d 	bl	800b70c <__lshift>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4683      	mov	fp, r0
 800aa96:	f000 fea9 	bl	800b7ec <__mcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	dcb2      	bgt.n	800aa04 <_dtoa_r+0xac4>
 800aa9e:	d102      	bne.n	800aaa6 <_dtoa_r+0xb66>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	07db      	lsls	r3, r3, #31
 800aaa4:	d4ae      	bmi.n	800aa04 <_dtoa_r+0xac4>
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	461f      	mov	r7, r3
 800aaaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaae:	2a30      	cmp	r2, #48	; 0x30
 800aab0:	d0fa      	beq.n	800aaa8 <_dtoa_r+0xb68>
 800aab2:	e6f9      	b.n	800a8a8 <_dtoa_r+0x968>
 800aab4:	9a03      	ldr	r2, [sp, #12]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d1a5      	bne.n	800aa06 <_dtoa_r+0xac6>
 800aaba:	2331      	movs	r3, #49	; 0x31
 800aabc:	f10a 0a01 	add.w	sl, sl, #1
 800aac0:	e779      	b.n	800a9b6 <_dtoa_r+0xa76>
 800aac2:	4b14      	ldr	r3, [pc, #80]	; (800ab14 <_dtoa_r+0xbd4>)
 800aac4:	f7ff baa8 	b.w	800a018 <_dtoa_r+0xd8>
 800aac8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f47f aa81 	bne.w	8009fd2 <_dtoa_r+0x92>
 800aad0:	4b11      	ldr	r3, [pc, #68]	; (800ab18 <_dtoa_r+0xbd8>)
 800aad2:	f7ff baa1 	b.w	800a018 <_dtoa_r+0xd8>
 800aad6:	f1b9 0f00 	cmp.w	r9, #0
 800aada:	dc03      	bgt.n	800aae4 <_dtoa_r+0xba4>
 800aadc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aade:	2b02      	cmp	r3, #2
 800aae0:	f73f aecb 	bgt.w	800a87a <_dtoa_r+0x93a>
 800aae4:	9f03      	ldr	r7, [sp, #12]
 800aae6:	4621      	mov	r1, r4
 800aae8:	4658      	mov	r0, fp
 800aaea:	f7ff f99d 	bl	8009e28 <quorem>
 800aaee:	9a03      	ldr	r2, [sp, #12]
 800aaf0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aaf4:	f807 3b01 	strb.w	r3, [r7], #1
 800aaf8:	1aba      	subs	r2, r7, r2
 800aafa:	4591      	cmp	r9, r2
 800aafc:	ddba      	ble.n	800aa74 <_dtoa_r+0xb34>
 800aafe:	4659      	mov	r1, fp
 800ab00:	2300      	movs	r3, #0
 800ab02:	220a      	movs	r2, #10
 800ab04:	4628      	mov	r0, r5
 800ab06:	f000 fc0b 	bl	800b320 <__multadd>
 800ab0a:	4683      	mov	fp, r0
 800ab0c:	e7eb      	b.n	800aae6 <_dtoa_r+0xba6>
 800ab0e:	bf00      	nop
 800ab10:	0801d95b 	.word	0x0801d95b
 800ab14:	0801d73c 	.word	0x0801d73c
 800ab18:	0801d8b9 	.word	0x0801d8b9

0800ab1c <rshift>:
 800ab1c:	6903      	ldr	r3, [r0, #16]
 800ab1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab26:	f100 0414 	add.w	r4, r0, #20
 800ab2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab2e:	dd46      	ble.n	800abbe <rshift+0xa2>
 800ab30:	f011 011f 	ands.w	r1, r1, #31
 800ab34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab3c:	d10c      	bne.n	800ab58 <rshift+0x3c>
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f100 0710 	add.w	r7, r0, #16
 800ab44:	42b1      	cmp	r1, r6
 800ab46:	d335      	bcc.n	800abb4 <rshift+0x98>
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	1eea      	subs	r2, r5, #3
 800ab4e:	4296      	cmp	r6, r2
 800ab50:	bf38      	it	cc
 800ab52:	2300      	movcc	r3, #0
 800ab54:	4423      	add	r3, r4
 800ab56:	e015      	b.n	800ab84 <rshift+0x68>
 800ab58:	46a1      	mov	r9, r4
 800ab5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab5e:	f1c1 0820 	rsb	r8, r1, #32
 800ab62:	40cf      	lsrs	r7, r1
 800ab64:	f105 0e04 	add.w	lr, r5, #4
 800ab68:	4576      	cmp	r6, lr
 800ab6a:	46f4      	mov	ip, lr
 800ab6c:	d816      	bhi.n	800ab9c <rshift+0x80>
 800ab6e:	1a9a      	subs	r2, r3, r2
 800ab70:	0092      	lsls	r2, r2, #2
 800ab72:	3a04      	subs	r2, #4
 800ab74:	3501      	adds	r5, #1
 800ab76:	42ae      	cmp	r6, r5
 800ab78:	bf38      	it	cc
 800ab7a:	2200      	movcc	r2, #0
 800ab7c:	18a3      	adds	r3, r4, r2
 800ab7e:	50a7      	str	r7, [r4, r2]
 800ab80:	b107      	cbz	r7, 800ab84 <rshift+0x68>
 800ab82:	3304      	adds	r3, #4
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	eba3 0204 	sub.w	r2, r3, r4
 800ab8a:	bf08      	it	eq
 800ab8c:	2300      	moveq	r3, #0
 800ab8e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab92:	6102      	str	r2, [r0, #16]
 800ab94:	bf08      	it	eq
 800ab96:	6143      	streq	r3, [r0, #20]
 800ab98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab9c:	f8dc c000 	ldr.w	ip, [ip]
 800aba0:	fa0c fc08 	lsl.w	ip, ip, r8
 800aba4:	ea4c 0707 	orr.w	r7, ip, r7
 800aba8:	f849 7b04 	str.w	r7, [r9], #4
 800abac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abb0:	40cf      	lsrs	r7, r1
 800abb2:	e7d9      	b.n	800ab68 <rshift+0x4c>
 800abb4:	f851 cb04 	ldr.w	ip, [r1], #4
 800abb8:	f847 cf04 	str.w	ip, [r7, #4]!
 800abbc:	e7c2      	b.n	800ab44 <rshift+0x28>
 800abbe:	4623      	mov	r3, r4
 800abc0:	e7e0      	b.n	800ab84 <rshift+0x68>

0800abc2 <__hexdig_fun>:
 800abc2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	d802      	bhi.n	800abd0 <__hexdig_fun+0xe>
 800abca:	3820      	subs	r0, #32
 800abcc:	b2c0      	uxtb	r0, r0
 800abce:	4770      	bx	lr
 800abd0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d801      	bhi.n	800abdc <__hexdig_fun+0x1a>
 800abd8:	3847      	subs	r0, #71	; 0x47
 800abda:	e7f7      	b.n	800abcc <__hexdig_fun+0xa>
 800abdc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	d801      	bhi.n	800abe8 <__hexdig_fun+0x26>
 800abe4:	3827      	subs	r0, #39	; 0x27
 800abe6:	e7f1      	b.n	800abcc <__hexdig_fun+0xa>
 800abe8:	2000      	movs	r0, #0
 800abea:	4770      	bx	lr

0800abec <__gethex>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	b08b      	sub	sp, #44	; 0x2c
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	4bb2      	ldr	r3, [pc, #712]	; (800aec0 <__gethex+0x2d4>)
 800abf6:	9002      	str	r0, [sp, #8]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	468b      	mov	fp, r1
 800abfc:	4618      	mov	r0, r3
 800abfe:	4690      	mov	r8, r2
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	f7fa fd8d 	bl	8005720 <strlen>
 800ac06:	4682      	mov	sl, r0
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	f8db 2000 	ldr.w	r2, [fp]
 800ac0e:	4403      	add	r3, r0
 800ac10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac14:	9306      	str	r3, [sp, #24]
 800ac16:	1c93      	adds	r3, r2, #2
 800ac18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac20:	32fe      	adds	r2, #254	; 0xfe
 800ac22:	18d1      	adds	r1, r2, r3
 800ac24:	461f      	mov	r7, r3
 800ac26:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac2a:	9101      	str	r1, [sp, #4]
 800ac2c:	2830      	cmp	r0, #48	; 0x30
 800ac2e:	d0f8      	beq.n	800ac22 <__gethex+0x36>
 800ac30:	f7ff ffc7 	bl	800abc2 <__hexdig_fun>
 800ac34:	4604      	mov	r4, r0
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d13a      	bne.n	800acb0 <__gethex+0xc4>
 800ac3a:	4652      	mov	r2, sl
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	9903      	ldr	r1, [sp, #12]
 800ac40:	f001 fa26 	bl	800c090 <strncmp>
 800ac44:	4605      	mov	r5, r0
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d166      	bne.n	800ad18 <__gethex+0x12c>
 800ac4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ac4e:	eb07 060a 	add.w	r6, r7, sl
 800ac52:	f7ff ffb6 	bl	800abc2 <__hexdig_fun>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d060      	beq.n	800ad1c <__gethex+0x130>
 800ac5a:	4633      	mov	r3, r6
 800ac5c:	7818      	ldrb	r0, [r3, #0]
 800ac5e:	461f      	mov	r7, r3
 800ac60:	2830      	cmp	r0, #48	; 0x30
 800ac62:	f103 0301 	add.w	r3, r3, #1
 800ac66:	d0f9      	beq.n	800ac5c <__gethex+0x70>
 800ac68:	f7ff ffab 	bl	800abc2 <__hexdig_fun>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	fab0 f480 	clz	r4, r0
 800ac72:	4635      	mov	r5, r6
 800ac74:	0964      	lsrs	r4, r4, #5
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	463a      	mov	r2, r7
 800ac7a:	4616      	mov	r6, r2
 800ac7c:	7830      	ldrb	r0, [r6, #0]
 800ac7e:	3201      	adds	r2, #1
 800ac80:	f7ff ff9f 	bl	800abc2 <__hexdig_fun>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1f8      	bne.n	800ac7a <__gethex+0x8e>
 800ac88:	4652      	mov	r2, sl
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	9903      	ldr	r1, [sp, #12]
 800ac8e:	f001 f9ff 	bl	800c090 <strncmp>
 800ac92:	b980      	cbnz	r0, 800acb6 <__gethex+0xca>
 800ac94:	b94d      	cbnz	r5, 800acaa <__gethex+0xbe>
 800ac96:	eb06 050a 	add.w	r5, r6, sl
 800ac9a:	462a      	mov	r2, r5
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	7830      	ldrb	r0, [r6, #0]
 800aca0:	3201      	adds	r2, #1
 800aca2:	f7ff ff8e 	bl	800abc2 <__hexdig_fun>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1f8      	bne.n	800ac9c <__gethex+0xb0>
 800acaa:	1bad      	subs	r5, r5, r6
 800acac:	00ad      	lsls	r5, r5, #2
 800acae:	e004      	b.n	800acba <__gethex+0xce>
 800acb0:	2400      	movs	r4, #0
 800acb2:	4625      	mov	r5, r4
 800acb4:	e7e0      	b.n	800ac78 <__gethex+0x8c>
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	d1f7      	bne.n	800acaa <__gethex+0xbe>
 800acba:	7833      	ldrb	r3, [r6, #0]
 800acbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acc0:	2b50      	cmp	r3, #80	; 0x50
 800acc2:	d139      	bne.n	800ad38 <__gethex+0x14c>
 800acc4:	7873      	ldrb	r3, [r6, #1]
 800acc6:	2b2b      	cmp	r3, #43	; 0x2b
 800acc8:	d02a      	beq.n	800ad20 <__gethex+0x134>
 800acca:	2b2d      	cmp	r3, #45	; 0x2d
 800accc:	d02c      	beq.n	800ad28 <__gethex+0x13c>
 800acce:	f04f 0900 	mov.w	r9, #0
 800acd2:	1c71      	adds	r1, r6, #1
 800acd4:	7808      	ldrb	r0, [r1, #0]
 800acd6:	f7ff ff74 	bl	800abc2 <__hexdig_fun>
 800acda:	1e43      	subs	r3, r0, #1
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b18      	cmp	r3, #24
 800ace0:	d82a      	bhi.n	800ad38 <__gethex+0x14c>
 800ace2:	f1a0 0210 	sub.w	r2, r0, #16
 800ace6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acea:	f7ff ff6a 	bl	800abc2 <__hexdig_fun>
 800acee:	1e43      	subs	r3, r0, #1
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b18      	cmp	r3, #24
 800acf4:	d91b      	bls.n	800ad2e <__gethex+0x142>
 800acf6:	f1b9 0f00 	cmp.w	r9, #0
 800acfa:	d000      	beq.n	800acfe <__gethex+0x112>
 800acfc:	4252      	negs	r2, r2
 800acfe:	4415      	add	r5, r2
 800ad00:	f8cb 1000 	str.w	r1, [fp]
 800ad04:	b1d4      	cbz	r4, 800ad3c <__gethex+0x150>
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bf14      	ite	ne
 800ad0c:	2700      	movne	r7, #0
 800ad0e:	2706      	moveq	r7, #6
 800ad10:	4638      	mov	r0, r7
 800ad12:	b00b      	add	sp, #44	; 0x2c
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	463e      	mov	r6, r7
 800ad1a:	4625      	mov	r5, r4
 800ad1c:	2401      	movs	r4, #1
 800ad1e:	e7cc      	b.n	800acba <__gethex+0xce>
 800ad20:	f04f 0900 	mov.w	r9, #0
 800ad24:	1cb1      	adds	r1, r6, #2
 800ad26:	e7d5      	b.n	800acd4 <__gethex+0xe8>
 800ad28:	f04f 0901 	mov.w	r9, #1
 800ad2c:	e7fa      	b.n	800ad24 <__gethex+0x138>
 800ad2e:	230a      	movs	r3, #10
 800ad30:	fb03 0202 	mla	r2, r3, r2, r0
 800ad34:	3a10      	subs	r2, #16
 800ad36:	e7d6      	b.n	800ace6 <__gethex+0xfa>
 800ad38:	4631      	mov	r1, r6
 800ad3a:	e7e1      	b.n	800ad00 <__gethex+0x114>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	1bf3      	subs	r3, r6, r7
 800ad40:	3b01      	subs	r3, #1
 800ad42:	2b07      	cmp	r3, #7
 800ad44:	dc0a      	bgt.n	800ad5c <__gethex+0x170>
 800ad46:	9802      	ldr	r0, [sp, #8]
 800ad48:	f000 fa88 	bl	800b25c <_Balloc>
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	b940      	cbnz	r0, 800ad62 <__gethex+0x176>
 800ad50:	4602      	mov	r2, r0
 800ad52:	21de      	movs	r1, #222	; 0xde
 800ad54:	4b5b      	ldr	r3, [pc, #364]	; (800aec4 <__gethex+0x2d8>)
 800ad56:	485c      	ldr	r0, [pc, #368]	; (800aec8 <__gethex+0x2dc>)
 800ad58:	f001 f9bc 	bl	800c0d4 <__assert_func>
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	105b      	asrs	r3, r3, #1
 800ad60:	e7ef      	b.n	800ad42 <__gethex+0x156>
 800ad62:	f04f 0b00 	mov.w	fp, #0
 800ad66:	f100 0914 	add.w	r9, r0, #20
 800ad6a:	f1ca 0301 	rsb	r3, sl, #1
 800ad6e:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad72:	f8cd b004 	str.w	fp, [sp, #4]
 800ad76:	9308      	str	r3, [sp, #32]
 800ad78:	42b7      	cmp	r7, r6
 800ad7a:	d33f      	bcc.n	800adfc <__gethex+0x210>
 800ad7c:	9f04      	ldr	r7, [sp, #16]
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	f847 3b04 	str.w	r3, [r7], #4
 800ad84:	eba7 0709 	sub.w	r7, r7, r9
 800ad88:	10bf      	asrs	r7, r7, #2
 800ad8a:	6127      	str	r7, [r4, #16]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fb57 	bl	800b440 <__hi0bits>
 800ad92:	017f      	lsls	r7, r7, #5
 800ad94:	f8d8 6000 	ldr.w	r6, [r8]
 800ad98:	1a3f      	subs	r7, r7, r0
 800ad9a:	42b7      	cmp	r7, r6
 800ad9c:	dd62      	ble.n	800ae64 <__gethex+0x278>
 800ad9e:	1bbf      	subs	r7, r7, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fef1 	bl	800bb8a <__any_on>
 800ada8:	4682      	mov	sl, r0
 800adaa:	b1a8      	cbz	r0, 800add8 <__gethex+0x1ec>
 800adac:	f04f 0a01 	mov.w	sl, #1
 800adb0:	1e7b      	subs	r3, r7, #1
 800adb2:	1159      	asrs	r1, r3, #5
 800adb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800adb8:	f003 021f 	and.w	r2, r3, #31
 800adbc:	fa0a f202 	lsl.w	r2, sl, r2
 800adc0:	420a      	tst	r2, r1
 800adc2:	d009      	beq.n	800add8 <__gethex+0x1ec>
 800adc4:	4553      	cmp	r3, sl
 800adc6:	dd05      	ble.n	800add4 <__gethex+0x1e8>
 800adc8:	4620      	mov	r0, r4
 800adca:	1eb9      	subs	r1, r7, #2
 800adcc:	f000 fedd 	bl	800bb8a <__any_on>
 800add0:	2800      	cmp	r0, #0
 800add2:	d144      	bne.n	800ae5e <__gethex+0x272>
 800add4:	f04f 0a02 	mov.w	sl, #2
 800add8:	4639      	mov	r1, r7
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff fe9e 	bl	800ab1c <rshift>
 800ade0:	443d      	add	r5, r7
 800ade2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ade6:	42ab      	cmp	r3, r5
 800ade8:	da4a      	bge.n	800ae80 <__gethex+0x294>
 800adea:	4621      	mov	r1, r4
 800adec:	9802      	ldr	r0, [sp, #8]
 800adee:	f000 fa75 	bl	800b2dc <_Bfree>
 800adf2:	2300      	movs	r3, #0
 800adf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adf6:	27a3      	movs	r7, #163	; 0xa3
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	e789      	b.n	800ad10 <__gethex+0x124>
 800adfc:	1e73      	subs	r3, r6, #1
 800adfe:	9a06      	ldr	r2, [sp, #24]
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d019      	beq.n	800ae3e <__gethex+0x252>
 800ae0a:	f1bb 0f20 	cmp.w	fp, #32
 800ae0e:	d107      	bne.n	800ae20 <__gethex+0x234>
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	9a01      	ldr	r2, [sp, #4]
 800ae14:	f843 2b04 	str.w	r2, [r3], #4
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	469b      	mov	fp, r3
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae24:	f7ff fecd 	bl	800abc2 <__hexdig_fun>
 800ae28:	9b01      	ldr	r3, [sp, #4]
 800ae2a:	f000 000f 	and.w	r0, r0, #15
 800ae2e:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae32:	4303      	orrs	r3, r0
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	f10b 0b04 	add.w	fp, fp, #4
 800ae3a:	9b07      	ldr	r3, [sp, #28]
 800ae3c:	e00d      	b.n	800ae5a <__gethex+0x26e>
 800ae3e:	9a08      	ldr	r2, [sp, #32]
 800ae40:	1e73      	subs	r3, r6, #1
 800ae42:	4413      	add	r3, r2
 800ae44:	42bb      	cmp	r3, r7
 800ae46:	d3e0      	bcc.n	800ae0a <__gethex+0x21e>
 800ae48:	4618      	mov	r0, r3
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	9903      	ldr	r1, [sp, #12]
 800ae4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae50:	f001 f91e 	bl	800c090 <strncmp>
 800ae54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d1d7      	bne.n	800ae0a <__gethex+0x21e>
 800ae5a:	461e      	mov	r6, r3
 800ae5c:	e78c      	b.n	800ad78 <__gethex+0x18c>
 800ae5e:	f04f 0a03 	mov.w	sl, #3
 800ae62:	e7b9      	b.n	800add8 <__gethex+0x1ec>
 800ae64:	da09      	bge.n	800ae7a <__gethex+0x28e>
 800ae66:	1bf7      	subs	r7, r6, r7
 800ae68:	4621      	mov	r1, r4
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	9802      	ldr	r0, [sp, #8]
 800ae6e:	f000 fc4d 	bl	800b70c <__lshift>
 800ae72:	4604      	mov	r4, r0
 800ae74:	1bed      	subs	r5, r5, r7
 800ae76:	f100 0914 	add.w	r9, r0, #20
 800ae7a:	f04f 0a00 	mov.w	sl, #0
 800ae7e:	e7b0      	b.n	800ade2 <__gethex+0x1f6>
 800ae80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae84:	42a8      	cmp	r0, r5
 800ae86:	dd72      	ble.n	800af6e <__gethex+0x382>
 800ae88:	1b45      	subs	r5, r0, r5
 800ae8a:	42ae      	cmp	r6, r5
 800ae8c:	dc35      	bgt.n	800aefa <__gethex+0x30e>
 800ae8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d029      	beq.n	800aeea <__gethex+0x2fe>
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d02b      	beq.n	800aef2 <__gethex+0x306>
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d11c      	bne.n	800aed8 <__gethex+0x2ec>
 800ae9e:	42ae      	cmp	r6, r5
 800aea0:	d11a      	bne.n	800aed8 <__gethex+0x2ec>
 800aea2:	2e01      	cmp	r6, #1
 800aea4:	d112      	bne.n	800aecc <__gethex+0x2e0>
 800aea6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aeaa:	9a05      	ldr	r2, [sp, #20]
 800aeac:	2762      	movs	r7, #98	; 0x62
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	6123      	str	r3, [r4, #16]
 800aeb4:	f8c9 3000 	str.w	r3, [r9]
 800aeb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeba:	601c      	str	r4, [r3, #0]
 800aebc:	e728      	b.n	800ad10 <__gethex+0x124>
 800aebe:	bf00      	nop
 800aec0:	0801d9f4 	.word	0x0801d9f4
 800aec4:	0801d95b 	.word	0x0801d95b
 800aec8:	0801d96c 	.word	0x0801d96c
 800aecc:	4620      	mov	r0, r4
 800aece:	1e71      	subs	r1, r6, #1
 800aed0:	f000 fe5b 	bl	800bb8a <__any_on>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1e6      	bne.n	800aea6 <__gethex+0x2ba>
 800aed8:	4621      	mov	r1, r4
 800aeda:	9802      	ldr	r0, [sp, #8]
 800aedc:	f000 f9fe 	bl	800b2dc <_Bfree>
 800aee0:	2300      	movs	r3, #0
 800aee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aee4:	2750      	movs	r7, #80	; 0x50
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	e712      	b.n	800ad10 <__gethex+0x124>
 800aeea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f3      	bne.n	800aed8 <__gethex+0x2ec>
 800aef0:	e7d9      	b.n	800aea6 <__gethex+0x2ba>
 800aef2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1d6      	bne.n	800aea6 <__gethex+0x2ba>
 800aef8:	e7ee      	b.n	800aed8 <__gethex+0x2ec>
 800aefa:	1e6f      	subs	r7, r5, #1
 800aefc:	f1ba 0f00 	cmp.w	sl, #0
 800af00:	d132      	bne.n	800af68 <__gethex+0x37c>
 800af02:	b127      	cbz	r7, 800af0e <__gethex+0x322>
 800af04:	4639      	mov	r1, r7
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fe3f 	bl	800bb8a <__any_on>
 800af0c:	4682      	mov	sl, r0
 800af0e:	2101      	movs	r1, #1
 800af10:	117b      	asrs	r3, r7, #5
 800af12:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af16:	f007 071f 	and.w	r7, r7, #31
 800af1a:	fa01 f707 	lsl.w	r7, r1, r7
 800af1e:	421f      	tst	r7, r3
 800af20:	f04f 0702 	mov.w	r7, #2
 800af24:	4629      	mov	r1, r5
 800af26:	4620      	mov	r0, r4
 800af28:	bf18      	it	ne
 800af2a:	f04a 0a02 	orrne.w	sl, sl, #2
 800af2e:	1b76      	subs	r6, r6, r5
 800af30:	f7ff fdf4 	bl	800ab1c <rshift>
 800af34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af38:	f1ba 0f00 	cmp.w	sl, #0
 800af3c:	d048      	beq.n	800afd0 <__gethex+0x3e4>
 800af3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d015      	beq.n	800af72 <__gethex+0x386>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d017      	beq.n	800af7a <__gethex+0x38e>
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d109      	bne.n	800af62 <__gethex+0x376>
 800af4e:	f01a 0f02 	tst.w	sl, #2
 800af52:	d006      	beq.n	800af62 <__gethex+0x376>
 800af54:	f8d9 0000 	ldr.w	r0, [r9]
 800af58:	ea4a 0a00 	orr.w	sl, sl, r0
 800af5c:	f01a 0f01 	tst.w	sl, #1
 800af60:	d10e      	bne.n	800af80 <__gethex+0x394>
 800af62:	f047 0710 	orr.w	r7, r7, #16
 800af66:	e033      	b.n	800afd0 <__gethex+0x3e4>
 800af68:	f04f 0a01 	mov.w	sl, #1
 800af6c:	e7cf      	b.n	800af0e <__gethex+0x322>
 800af6e:	2701      	movs	r7, #1
 800af70:	e7e2      	b.n	800af38 <__gethex+0x34c>
 800af72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af74:	f1c3 0301 	rsb	r3, r3, #1
 800af78:	9315      	str	r3, [sp, #84]	; 0x54
 800af7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0f0      	beq.n	800af62 <__gethex+0x376>
 800af80:	f04f 0c00 	mov.w	ip, #0
 800af84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af88:	f104 0314 	add.w	r3, r4, #20
 800af8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af94:	4618      	mov	r0, r3
 800af96:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af9e:	d01c      	beq.n	800afda <__gethex+0x3ee>
 800afa0:	3201      	adds	r2, #1
 800afa2:	6002      	str	r2, [r0, #0]
 800afa4:	2f02      	cmp	r7, #2
 800afa6:	f104 0314 	add.w	r3, r4, #20
 800afaa:	d13d      	bne.n	800b028 <__gethex+0x43c>
 800afac:	f8d8 2000 	ldr.w	r2, [r8]
 800afb0:	3a01      	subs	r2, #1
 800afb2:	42b2      	cmp	r2, r6
 800afb4:	d10a      	bne.n	800afcc <__gethex+0x3e0>
 800afb6:	2201      	movs	r2, #1
 800afb8:	1171      	asrs	r1, r6, #5
 800afba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afbe:	f006 061f 	and.w	r6, r6, #31
 800afc2:	fa02 f606 	lsl.w	r6, r2, r6
 800afc6:	421e      	tst	r6, r3
 800afc8:	bf18      	it	ne
 800afca:	4617      	movne	r7, r2
 800afcc:	f047 0720 	orr.w	r7, r7, #32
 800afd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afd2:	601c      	str	r4, [r3, #0]
 800afd4:	9b05      	ldr	r3, [sp, #20]
 800afd6:	601d      	str	r5, [r3, #0]
 800afd8:	e69a      	b.n	800ad10 <__gethex+0x124>
 800afda:	4299      	cmp	r1, r3
 800afdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800afe0:	d8d8      	bhi.n	800af94 <__gethex+0x3a8>
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	459b      	cmp	fp, r3
 800afe6:	db17      	blt.n	800b018 <__gethex+0x42c>
 800afe8:	6861      	ldr	r1, [r4, #4]
 800afea:	9802      	ldr	r0, [sp, #8]
 800afec:	3101      	adds	r1, #1
 800afee:	f000 f935 	bl	800b25c <_Balloc>
 800aff2:	4681      	mov	r9, r0
 800aff4:	b918      	cbnz	r0, 800affe <__gethex+0x412>
 800aff6:	4602      	mov	r2, r0
 800aff8:	2184      	movs	r1, #132	; 0x84
 800affa:	4b19      	ldr	r3, [pc, #100]	; (800b060 <__gethex+0x474>)
 800affc:	e6ab      	b.n	800ad56 <__gethex+0x16a>
 800affe:	6922      	ldr	r2, [r4, #16]
 800b000:	f104 010c 	add.w	r1, r4, #12
 800b004:	3202      	adds	r2, #2
 800b006:	0092      	lsls	r2, r2, #2
 800b008:	300c      	adds	r0, #12
 800b00a:	f000 f919 	bl	800b240 <memcpy>
 800b00e:	4621      	mov	r1, r4
 800b010:	9802      	ldr	r0, [sp, #8]
 800b012:	f000 f963 	bl	800b2dc <_Bfree>
 800b016:	464c      	mov	r4, r9
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	6122      	str	r2, [r4, #16]
 800b01e:	2201      	movs	r2, #1
 800b020:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b024:	615a      	str	r2, [r3, #20]
 800b026:	e7bd      	b.n	800afa4 <__gethex+0x3b8>
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	455a      	cmp	r2, fp
 800b02c:	dd0b      	ble.n	800b046 <__gethex+0x45a>
 800b02e:	2101      	movs	r1, #1
 800b030:	4620      	mov	r0, r4
 800b032:	f7ff fd73 	bl	800ab1c <rshift>
 800b036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b03a:	3501      	adds	r5, #1
 800b03c:	42ab      	cmp	r3, r5
 800b03e:	f6ff aed4 	blt.w	800adea <__gethex+0x1fe>
 800b042:	2701      	movs	r7, #1
 800b044:	e7c2      	b.n	800afcc <__gethex+0x3e0>
 800b046:	f016 061f 	ands.w	r6, r6, #31
 800b04a:	d0fa      	beq.n	800b042 <__gethex+0x456>
 800b04c:	4453      	add	r3, sl
 800b04e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b052:	f000 f9f5 	bl	800b440 <__hi0bits>
 800b056:	f1c6 0620 	rsb	r6, r6, #32
 800b05a:	42b0      	cmp	r0, r6
 800b05c:	dbe7      	blt.n	800b02e <__gethex+0x442>
 800b05e:	e7f0      	b.n	800b042 <__gethex+0x456>
 800b060:	0801d95b 	.word	0x0801d95b

0800b064 <L_shift>:
 800b064:	f1c2 0208 	rsb	r2, r2, #8
 800b068:	0092      	lsls	r2, r2, #2
 800b06a:	b570      	push	{r4, r5, r6, lr}
 800b06c:	f1c2 0620 	rsb	r6, r2, #32
 800b070:	6843      	ldr	r3, [r0, #4]
 800b072:	6804      	ldr	r4, [r0, #0]
 800b074:	fa03 f506 	lsl.w	r5, r3, r6
 800b078:	432c      	orrs	r4, r5
 800b07a:	40d3      	lsrs	r3, r2
 800b07c:	6004      	str	r4, [r0, #0]
 800b07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b082:	4288      	cmp	r0, r1
 800b084:	d3f4      	bcc.n	800b070 <L_shift+0xc>
 800b086:	bd70      	pop	{r4, r5, r6, pc}

0800b088 <__match>:
 800b088:	b530      	push	{r4, r5, lr}
 800b08a:	6803      	ldr	r3, [r0, #0]
 800b08c:	3301      	adds	r3, #1
 800b08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b092:	b914      	cbnz	r4, 800b09a <__match+0x12>
 800b094:	6003      	str	r3, [r0, #0]
 800b096:	2001      	movs	r0, #1
 800b098:	bd30      	pop	{r4, r5, pc}
 800b09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b09e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0a2:	2d19      	cmp	r5, #25
 800b0a4:	bf98      	it	ls
 800b0a6:	3220      	addls	r2, #32
 800b0a8:	42a2      	cmp	r2, r4
 800b0aa:	d0f0      	beq.n	800b08e <__match+0x6>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7f3      	b.n	800b098 <__match+0x10>

0800b0b0 <__hexnan>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	680b      	ldr	r3, [r1, #0]
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	115e      	asrs	r6, r3, #5
 800b0bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0c0:	f013 031f 	ands.w	r3, r3, #31
 800b0c4:	bf18      	it	ne
 800b0c6:	3604      	addne	r6, #4
 800b0c8:	1f37      	subs	r7, r6, #4
 800b0ca:	46b9      	mov	r9, r7
 800b0cc:	463c      	mov	r4, r7
 800b0ce:	46ab      	mov	fp, r5
 800b0d0:	b087      	sub	sp, #28
 800b0d2:	4690      	mov	r8, r2
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0dc:	9502      	str	r5, [sp, #8]
 800b0de:	7851      	ldrb	r1, [r2, #1]
 800b0e0:	1c53      	adds	r3, r2, #1
 800b0e2:	9303      	str	r3, [sp, #12]
 800b0e4:	b341      	cbz	r1, 800b138 <__hexnan+0x88>
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	9205      	str	r2, [sp, #20]
 800b0ea:	9104      	str	r1, [sp, #16]
 800b0ec:	f7ff fd69 	bl	800abc2 <__hexdig_fun>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d14f      	bne.n	800b194 <__hexnan+0xe4>
 800b0f4:	9904      	ldr	r1, [sp, #16]
 800b0f6:	9a05      	ldr	r2, [sp, #20]
 800b0f8:	2920      	cmp	r1, #32
 800b0fa:	d818      	bhi.n	800b12e <__hexnan+0x7e>
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	459b      	cmp	fp, r3
 800b100:	dd13      	ble.n	800b12a <__hexnan+0x7a>
 800b102:	454c      	cmp	r4, r9
 800b104:	d206      	bcs.n	800b114 <__hexnan+0x64>
 800b106:	2d07      	cmp	r5, #7
 800b108:	dc04      	bgt.n	800b114 <__hexnan+0x64>
 800b10a:	462a      	mov	r2, r5
 800b10c:	4649      	mov	r1, r9
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff ffa8 	bl	800b064 <L_shift>
 800b114:	4544      	cmp	r4, r8
 800b116:	d950      	bls.n	800b1ba <__hexnan+0x10a>
 800b118:	2300      	movs	r3, #0
 800b11a:	f1a4 0904 	sub.w	r9, r4, #4
 800b11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b122:	461d      	mov	r5, r3
 800b124:	464c      	mov	r4, r9
 800b126:	f8cd b008 	str.w	fp, [sp, #8]
 800b12a:	9a03      	ldr	r2, [sp, #12]
 800b12c:	e7d7      	b.n	800b0de <__hexnan+0x2e>
 800b12e:	2929      	cmp	r1, #41	; 0x29
 800b130:	d156      	bne.n	800b1e0 <__hexnan+0x130>
 800b132:	3202      	adds	r2, #2
 800b134:	f8ca 2000 	str.w	r2, [sl]
 800b138:	f1bb 0f00 	cmp.w	fp, #0
 800b13c:	d050      	beq.n	800b1e0 <__hexnan+0x130>
 800b13e:	454c      	cmp	r4, r9
 800b140:	d206      	bcs.n	800b150 <__hexnan+0xa0>
 800b142:	2d07      	cmp	r5, #7
 800b144:	dc04      	bgt.n	800b150 <__hexnan+0xa0>
 800b146:	462a      	mov	r2, r5
 800b148:	4649      	mov	r1, r9
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff ff8a 	bl	800b064 <L_shift>
 800b150:	4544      	cmp	r4, r8
 800b152:	d934      	bls.n	800b1be <__hexnan+0x10e>
 800b154:	4623      	mov	r3, r4
 800b156:	f1a8 0204 	sub.w	r2, r8, #4
 800b15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b15e:	429f      	cmp	r7, r3
 800b160:	f842 1f04 	str.w	r1, [r2, #4]!
 800b164:	d2f9      	bcs.n	800b15a <__hexnan+0xaa>
 800b166:	1b3b      	subs	r3, r7, r4
 800b168:	f023 0303 	bic.w	r3, r3, #3
 800b16c:	3304      	adds	r3, #4
 800b16e:	3401      	adds	r4, #1
 800b170:	3e03      	subs	r6, #3
 800b172:	42b4      	cmp	r4, r6
 800b174:	bf88      	it	hi
 800b176:	2304      	movhi	r3, #4
 800b178:	2200      	movs	r2, #0
 800b17a:	4443      	add	r3, r8
 800b17c:	f843 2b04 	str.w	r2, [r3], #4
 800b180:	429f      	cmp	r7, r3
 800b182:	d2fb      	bcs.n	800b17c <__hexnan+0xcc>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	b91b      	cbnz	r3, 800b190 <__hexnan+0xe0>
 800b188:	4547      	cmp	r7, r8
 800b18a:	d127      	bne.n	800b1dc <__hexnan+0x12c>
 800b18c:	2301      	movs	r3, #1
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	2005      	movs	r0, #5
 800b192:	e026      	b.n	800b1e2 <__hexnan+0x132>
 800b194:	3501      	adds	r5, #1
 800b196:	2d08      	cmp	r5, #8
 800b198:	f10b 0b01 	add.w	fp, fp, #1
 800b19c:	dd06      	ble.n	800b1ac <__hexnan+0xfc>
 800b19e:	4544      	cmp	r4, r8
 800b1a0:	d9c3      	bls.n	800b12a <__hexnan+0x7a>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2501      	movs	r5, #1
 800b1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1aa:	3c04      	subs	r4, #4
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	f000 000f 	and.w	r0, r0, #15
 800b1b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	e7b7      	b.n	800b12a <__hexnan+0x7a>
 800b1ba:	2508      	movs	r5, #8
 800b1bc:	e7b5      	b.n	800b12a <__hexnan+0x7a>
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0df      	beq.n	800b184 <__hexnan+0xd4>
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	f1c3 0320 	rsb	r3, r3, #32
 800b1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1d4:	401a      	ands	r2, r3
 800b1d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b1da:	e7d3      	b.n	800b184 <__hexnan+0xd4>
 800b1dc:	3f04      	subs	r7, #4
 800b1de:	e7d1      	b.n	800b184 <__hexnan+0xd4>
 800b1e0:	2004      	movs	r0, #4
 800b1e2:	b007      	add	sp, #28
 800b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1e8 <_localeconv_r>:
 800b1e8:	4800      	ldr	r0, [pc, #0]	; (800b1ec <_localeconv_r+0x4>)
 800b1ea:	4770      	bx	lr
 800b1ec:	20000164 	.word	0x20000164

0800b1f0 <malloc>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	; (800b1fc <malloc+0xc>)
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f000 bd65 	b.w	800bcc4 <_malloc_r>
 800b1fa:	bf00      	nop
 800b1fc:	2000000c 	.word	0x2000000c

0800b200 <__ascii_mbtowc>:
 800b200:	b082      	sub	sp, #8
 800b202:	b901      	cbnz	r1, 800b206 <__ascii_mbtowc+0x6>
 800b204:	a901      	add	r1, sp, #4
 800b206:	b142      	cbz	r2, 800b21a <__ascii_mbtowc+0x1a>
 800b208:	b14b      	cbz	r3, 800b21e <__ascii_mbtowc+0x1e>
 800b20a:	7813      	ldrb	r3, [r2, #0]
 800b20c:	600b      	str	r3, [r1, #0]
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	1e10      	subs	r0, r2, #0
 800b212:	bf18      	it	ne
 800b214:	2001      	movne	r0, #1
 800b216:	b002      	add	sp, #8
 800b218:	4770      	bx	lr
 800b21a:	4610      	mov	r0, r2
 800b21c:	e7fb      	b.n	800b216 <__ascii_mbtowc+0x16>
 800b21e:	f06f 0001 	mvn.w	r0, #1
 800b222:	e7f8      	b.n	800b216 <__ascii_mbtowc+0x16>

0800b224 <memchr>:
 800b224:	4603      	mov	r3, r0
 800b226:	b510      	push	{r4, lr}
 800b228:	b2c9      	uxtb	r1, r1
 800b22a:	4402      	add	r2, r0
 800b22c:	4293      	cmp	r3, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	d101      	bne.n	800b236 <memchr+0x12>
 800b232:	2000      	movs	r0, #0
 800b234:	e003      	b.n	800b23e <memchr+0x1a>
 800b236:	7804      	ldrb	r4, [r0, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	428c      	cmp	r4, r1
 800b23c:	d1f6      	bne.n	800b22c <memchr+0x8>
 800b23e:	bd10      	pop	{r4, pc}

0800b240 <memcpy>:
 800b240:	440a      	add	r2, r1
 800b242:	4291      	cmp	r1, r2
 800b244:	f100 33ff 	add.w	r3, r0, #4294967295
 800b248:	d100      	bne.n	800b24c <memcpy+0xc>
 800b24a:	4770      	bx	lr
 800b24c:	b510      	push	{r4, lr}
 800b24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b252:	4291      	cmp	r1, r2
 800b254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b258:	d1f9      	bne.n	800b24e <memcpy+0xe>
 800b25a:	bd10      	pop	{r4, pc}

0800b25c <_Balloc>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b260:	4604      	mov	r4, r0
 800b262:	460d      	mov	r5, r1
 800b264:	b976      	cbnz	r6, 800b284 <_Balloc+0x28>
 800b266:	2010      	movs	r0, #16
 800b268:	f7ff ffc2 	bl	800b1f0 <malloc>
 800b26c:	4602      	mov	r2, r0
 800b26e:	6260      	str	r0, [r4, #36]	; 0x24
 800b270:	b920      	cbnz	r0, 800b27c <_Balloc+0x20>
 800b272:	2166      	movs	r1, #102	; 0x66
 800b274:	4b17      	ldr	r3, [pc, #92]	; (800b2d4 <_Balloc+0x78>)
 800b276:	4818      	ldr	r0, [pc, #96]	; (800b2d8 <_Balloc+0x7c>)
 800b278:	f000 ff2c 	bl	800c0d4 <__assert_func>
 800b27c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b280:	6006      	str	r6, [r0, #0]
 800b282:	60c6      	str	r6, [r0, #12]
 800b284:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b286:	68f3      	ldr	r3, [r6, #12]
 800b288:	b183      	cbz	r3, 800b2ac <_Balloc+0x50>
 800b28a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b292:	b9b8      	cbnz	r0, 800b2c4 <_Balloc+0x68>
 800b294:	2101      	movs	r1, #1
 800b296:	fa01 f605 	lsl.w	r6, r1, r5
 800b29a:	1d72      	adds	r2, r6, #5
 800b29c:	4620      	mov	r0, r4
 800b29e:	0092      	lsls	r2, r2, #2
 800b2a0:	f000 fc94 	bl	800bbcc <_calloc_r>
 800b2a4:	b160      	cbz	r0, 800b2c0 <_Balloc+0x64>
 800b2a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2aa:	e00e      	b.n	800b2ca <_Balloc+0x6e>
 800b2ac:	2221      	movs	r2, #33	; 0x21
 800b2ae:	2104      	movs	r1, #4
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fc8b 	bl	800bbcc <_calloc_r>
 800b2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b8:	60f0      	str	r0, [r6, #12]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e4      	bne.n	800b28a <_Balloc+0x2e>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	6802      	ldr	r2, [r0, #0]
 800b2c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2d0:	e7f7      	b.n	800b2c2 <_Balloc+0x66>
 800b2d2:	bf00      	nop
 800b2d4:	0801d8c6 	.word	0x0801d8c6
 800b2d8:	0801da08 	.word	0x0801da08

0800b2dc <_Bfree>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	b976      	cbnz	r6, 800b304 <_Bfree+0x28>
 800b2e6:	2010      	movs	r0, #16
 800b2e8:	f7ff ff82 	bl	800b1f0 <malloc>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	6268      	str	r0, [r5, #36]	; 0x24
 800b2f0:	b920      	cbnz	r0, 800b2fc <_Bfree+0x20>
 800b2f2:	218a      	movs	r1, #138	; 0x8a
 800b2f4:	4b08      	ldr	r3, [pc, #32]	; (800b318 <_Bfree+0x3c>)
 800b2f6:	4809      	ldr	r0, [pc, #36]	; (800b31c <_Bfree+0x40>)
 800b2f8:	f000 feec 	bl	800c0d4 <__assert_func>
 800b2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b300:	6006      	str	r6, [r0, #0]
 800b302:	60c6      	str	r6, [r0, #12]
 800b304:	b13c      	cbz	r4, 800b316 <_Bfree+0x3a>
 800b306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b308:	6862      	ldr	r2, [r4, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b310:	6021      	str	r1, [r4, #0]
 800b312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	0801d8c6 	.word	0x0801d8c6
 800b31c:	0801da08 	.word	0x0801da08

0800b320 <__multadd>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	4607      	mov	r7, r0
 800b326:	460c      	mov	r4, r1
 800b328:	461e      	mov	r6, r3
 800b32a:	2000      	movs	r0, #0
 800b32c:	690d      	ldr	r5, [r1, #16]
 800b32e:	f101 0c14 	add.w	ip, r1, #20
 800b332:	f8dc 3000 	ldr.w	r3, [ip]
 800b336:	3001      	adds	r0, #1
 800b338:	b299      	uxth	r1, r3
 800b33a:	fb02 6101 	mla	r1, r2, r1, r6
 800b33e:	0c1e      	lsrs	r6, r3, #16
 800b340:	0c0b      	lsrs	r3, r1, #16
 800b342:	fb02 3306 	mla	r3, r2, r6, r3
 800b346:	b289      	uxth	r1, r1
 800b348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b34c:	4285      	cmp	r5, r0
 800b34e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b352:	f84c 1b04 	str.w	r1, [ip], #4
 800b356:	dcec      	bgt.n	800b332 <__multadd+0x12>
 800b358:	b30e      	cbz	r6, 800b39e <__multadd+0x7e>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc19      	bgt.n	800b394 <__multadd+0x74>
 800b360:	6861      	ldr	r1, [r4, #4]
 800b362:	4638      	mov	r0, r7
 800b364:	3101      	adds	r1, #1
 800b366:	f7ff ff79 	bl	800b25c <_Balloc>
 800b36a:	4680      	mov	r8, r0
 800b36c:	b928      	cbnz	r0, 800b37a <__multadd+0x5a>
 800b36e:	4602      	mov	r2, r0
 800b370:	21b5      	movs	r1, #181	; 0xb5
 800b372:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <__multadd+0x84>)
 800b374:	480c      	ldr	r0, [pc, #48]	; (800b3a8 <__multadd+0x88>)
 800b376:	f000 fead 	bl	800c0d4 <__assert_func>
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	f104 010c 	add.w	r1, r4, #12
 800b380:	3202      	adds	r2, #2
 800b382:	0092      	lsls	r2, r2, #2
 800b384:	300c      	adds	r0, #12
 800b386:	f7ff ff5b 	bl	800b240 <memcpy>
 800b38a:	4621      	mov	r1, r4
 800b38c:	4638      	mov	r0, r7
 800b38e:	f7ff ffa5 	bl	800b2dc <_Bfree>
 800b392:	4644      	mov	r4, r8
 800b394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b398:	3501      	adds	r5, #1
 800b39a:	615e      	str	r6, [r3, #20]
 800b39c:	6125      	str	r5, [r4, #16]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a4:	0801d95b 	.word	0x0801d95b
 800b3a8:	0801da08 	.word	0x0801da08

0800b3ac <__s2b>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4615      	mov	r5, r2
 800b3b2:	2209      	movs	r2, #9
 800b3b4:	461f      	mov	r7, r3
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3be:	4606      	mov	r6, r0
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	db09      	blt.n	800b3dc <__s2b+0x30>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff ff47 	bl	800b25c <_Balloc>
 800b3ce:	b940      	cbnz	r0, 800b3e2 <__s2b+0x36>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	21ce      	movs	r1, #206	; 0xce
 800b3d4:	4b18      	ldr	r3, [pc, #96]	; (800b438 <__s2b+0x8c>)
 800b3d6:	4819      	ldr	r0, [pc, #100]	; (800b43c <__s2b+0x90>)
 800b3d8:	f000 fe7c 	bl	800c0d4 <__assert_func>
 800b3dc:	0052      	lsls	r2, r2, #1
 800b3de:	3101      	adds	r1, #1
 800b3e0:	e7f0      	b.n	800b3c4 <__s2b+0x18>
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	2d09      	cmp	r5, #9
 800b3e6:	6143      	str	r3, [r0, #20]
 800b3e8:	f04f 0301 	mov.w	r3, #1
 800b3ec:	6103      	str	r3, [r0, #16]
 800b3ee:	dd16      	ble.n	800b41e <__s2b+0x72>
 800b3f0:	f104 0909 	add.w	r9, r4, #9
 800b3f4:	46c8      	mov	r8, r9
 800b3f6:	442c      	add	r4, r5
 800b3f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3fc:	4601      	mov	r1, r0
 800b3fe:	220a      	movs	r2, #10
 800b400:	4630      	mov	r0, r6
 800b402:	3b30      	subs	r3, #48	; 0x30
 800b404:	f7ff ff8c 	bl	800b320 <__multadd>
 800b408:	45a0      	cmp	r8, r4
 800b40a:	d1f5      	bne.n	800b3f8 <__s2b+0x4c>
 800b40c:	f1a5 0408 	sub.w	r4, r5, #8
 800b410:	444c      	add	r4, r9
 800b412:	1b2d      	subs	r5, r5, r4
 800b414:	1963      	adds	r3, r4, r5
 800b416:	42bb      	cmp	r3, r7
 800b418:	db04      	blt.n	800b424 <__s2b+0x78>
 800b41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41e:	2509      	movs	r5, #9
 800b420:	340a      	adds	r4, #10
 800b422:	e7f6      	b.n	800b412 <__s2b+0x66>
 800b424:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b428:	4601      	mov	r1, r0
 800b42a:	220a      	movs	r2, #10
 800b42c:	4630      	mov	r0, r6
 800b42e:	3b30      	subs	r3, #48	; 0x30
 800b430:	f7ff ff76 	bl	800b320 <__multadd>
 800b434:	e7ee      	b.n	800b414 <__s2b+0x68>
 800b436:	bf00      	nop
 800b438:	0801d95b 	.word	0x0801d95b
 800b43c:	0801da08 	.word	0x0801da08

0800b440 <__hi0bits>:
 800b440:	0c02      	lsrs	r2, r0, #16
 800b442:	0412      	lsls	r2, r2, #16
 800b444:	4603      	mov	r3, r0
 800b446:	b9ca      	cbnz	r2, 800b47c <__hi0bits+0x3c>
 800b448:	0403      	lsls	r3, r0, #16
 800b44a:	2010      	movs	r0, #16
 800b44c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b450:	bf04      	itt	eq
 800b452:	021b      	lsleq	r3, r3, #8
 800b454:	3008      	addeq	r0, #8
 800b456:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b45a:	bf04      	itt	eq
 800b45c:	011b      	lsleq	r3, r3, #4
 800b45e:	3004      	addeq	r0, #4
 800b460:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b464:	bf04      	itt	eq
 800b466:	009b      	lsleq	r3, r3, #2
 800b468:	3002      	addeq	r0, #2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	db05      	blt.n	800b47a <__hi0bits+0x3a>
 800b46e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b472:	f100 0001 	add.w	r0, r0, #1
 800b476:	bf08      	it	eq
 800b478:	2020      	moveq	r0, #32
 800b47a:	4770      	bx	lr
 800b47c:	2000      	movs	r0, #0
 800b47e:	e7e5      	b.n	800b44c <__hi0bits+0xc>

0800b480 <__lo0bits>:
 800b480:	6803      	ldr	r3, [r0, #0]
 800b482:	4602      	mov	r2, r0
 800b484:	f013 0007 	ands.w	r0, r3, #7
 800b488:	d00b      	beq.n	800b4a2 <__lo0bits+0x22>
 800b48a:	07d9      	lsls	r1, r3, #31
 800b48c:	d421      	bmi.n	800b4d2 <__lo0bits+0x52>
 800b48e:	0798      	lsls	r0, r3, #30
 800b490:	bf49      	itett	mi
 800b492:	085b      	lsrmi	r3, r3, #1
 800b494:	089b      	lsrpl	r3, r3, #2
 800b496:	2001      	movmi	r0, #1
 800b498:	6013      	strmi	r3, [r2, #0]
 800b49a:	bf5c      	itt	pl
 800b49c:	2002      	movpl	r0, #2
 800b49e:	6013      	strpl	r3, [r2, #0]
 800b4a0:	4770      	bx	lr
 800b4a2:	b299      	uxth	r1, r3
 800b4a4:	b909      	cbnz	r1, 800b4aa <__lo0bits+0x2a>
 800b4a6:	2010      	movs	r0, #16
 800b4a8:	0c1b      	lsrs	r3, r3, #16
 800b4aa:	b2d9      	uxtb	r1, r3
 800b4ac:	b909      	cbnz	r1, 800b4b2 <__lo0bits+0x32>
 800b4ae:	3008      	adds	r0, #8
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	0719      	lsls	r1, r3, #28
 800b4b4:	bf04      	itt	eq
 800b4b6:	091b      	lsreq	r3, r3, #4
 800b4b8:	3004      	addeq	r0, #4
 800b4ba:	0799      	lsls	r1, r3, #30
 800b4bc:	bf04      	itt	eq
 800b4be:	089b      	lsreq	r3, r3, #2
 800b4c0:	3002      	addeq	r0, #2
 800b4c2:	07d9      	lsls	r1, r3, #31
 800b4c4:	d403      	bmi.n	800b4ce <__lo0bits+0x4e>
 800b4c6:	085b      	lsrs	r3, r3, #1
 800b4c8:	f100 0001 	add.w	r0, r0, #1
 800b4cc:	d003      	beq.n	800b4d6 <__lo0bits+0x56>
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	4770      	bx	lr
 800b4d6:	2020      	movs	r0, #32
 800b4d8:	4770      	bx	lr
	...

0800b4dc <__i2b>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	460c      	mov	r4, r1
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	f7ff febb 	bl	800b25c <_Balloc>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	b928      	cbnz	r0, 800b4f6 <__i2b+0x1a>
 800b4ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b4ee:	4b04      	ldr	r3, [pc, #16]	; (800b500 <__i2b+0x24>)
 800b4f0:	4804      	ldr	r0, [pc, #16]	; (800b504 <__i2b+0x28>)
 800b4f2:	f000 fdef 	bl	800c0d4 <__assert_func>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	6144      	str	r4, [r0, #20]
 800b4fa:	6103      	str	r3, [r0, #16]
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	bf00      	nop
 800b500:	0801d95b 	.word	0x0801d95b
 800b504:	0801da08 	.word	0x0801da08

0800b508 <__multiply>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	4691      	mov	r9, r2
 800b50e:	690a      	ldr	r2, [r1, #16]
 800b510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b514:	460c      	mov	r4, r1
 800b516:	429a      	cmp	r2, r3
 800b518:	bfbe      	ittt	lt
 800b51a:	460b      	movlt	r3, r1
 800b51c:	464c      	movlt	r4, r9
 800b51e:	4699      	movlt	r9, r3
 800b520:	6927      	ldr	r7, [r4, #16]
 800b522:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	6861      	ldr	r1, [r4, #4]
 800b52a:	eb07 060a 	add.w	r6, r7, sl
 800b52e:	42b3      	cmp	r3, r6
 800b530:	b085      	sub	sp, #20
 800b532:	bfb8      	it	lt
 800b534:	3101      	addlt	r1, #1
 800b536:	f7ff fe91 	bl	800b25c <_Balloc>
 800b53a:	b930      	cbnz	r0, 800b54a <__multiply+0x42>
 800b53c:	4602      	mov	r2, r0
 800b53e:	f240 115d 	movw	r1, #349	; 0x15d
 800b542:	4b43      	ldr	r3, [pc, #268]	; (800b650 <__multiply+0x148>)
 800b544:	4843      	ldr	r0, [pc, #268]	; (800b654 <__multiply+0x14c>)
 800b546:	f000 fdc5 	bl	800c0d4 <__assert_func>
 800b54a:	f100 0514 	add.w	r5, r0, #20
 800b54e:	462b      	mov	r3, r5
 800b550:	2200      	movs	r2, #0
 800b552:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b556:	4543      	cmp	r3, r8
 800b558:	d321      	bcc.n	800b59e <__multiply+0x96>
 800b55a:	f104 0314 	add.w	r3, r4, #20
 800b55e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b562:	f109 0314 	add.w	r3, r9, #20
 800b566:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b56a:	9202      	str	r2, [sp, #8]
 800b56c:	1b3a      	subs	r2, r7, r4
 800b56e:	3a15      	subs	r2, #21
 800b570:	f022 0203 	bic.w	r2, r2, #3
 800b574:	3204      	adds	r2, #4
 800b576:	f104 0115 	add.w	r1, r4, #21
 800b57a:	428f      	cmp	r7, r1
 800b57c:	bf38      	it	cc
 800b57e:	2204      	movcc	r2, #4
 800b580:	9201      	str	r2, [sp, #4]
 800b582:	9a02      	ldr	r2, [sp, #8]
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	429a      	cmp	r2, r3
 800b588:	d80c      	bhi.n	800b5a4 <__multiply+0x9c>
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	dd03      	ble.n	800b596 <__multiply+0x8e>
 800b58e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b592:	2b00      	cmp	r3, #0
 800b594:	d059      	beq.n	800b64a <__multiply+0x142>
 800b596:	6106      	str	r6, [r0, #16]
 800b598:	b005      	add	sp, #20
 800b59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59e:	f843 2b04 	str.w	r2, [r3], #4
 800b5a2:	e7d8      	b.n	800b556 <__multiply+0x4e>
 800b5a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5a8:	f1ba 0f00 	cmp.w	sl, #0
 800b5ac:	d023      	beq.n	800b5f6 <__multiply+0xee>
 800b5ae:	46a9      	mov	r9, r5
 800b5b0:	f04f 0c00 	mov.w	ip, #0
 800b5b4:	f104 0e14 	add.w	lr, r4, #20
 800b5b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5bc:	f8d9 1000 	ldr.w	r1, [r9]
 800b5c0:	fa1f fb82 	uxth.w	fp, r2
 800b5c4:	b289      	uxth	r1, r1
 800b5c6:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5ca:	4461      	add	r1, ip
 800b5cc:	f8d9 c000 	ldr.w	ip, [r9]
 800b5d0:	0c12      	lsrs	r2, r2, #16
 800b5d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b5d6:	fb0a c202 	mla	r2, sl, r2, ip
 800b5da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5de:	b289      	uxth	r1, r1
 800b5e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5e4:	4577      	cmp	r7, lr
 800b5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ea:	f849 1b04 	str.w	r1, [r9], #4
 800b5ee:	d8e3      	bhi.n	800b5b8 <__multiply+0xb0>
 800b5f0:	9a01      	ldr	r2, [sp, #4]
 800b5f2:	f845 c002 	str.w	ip, [r5, r2]
 800b5f6:	9a03      	ldr	r2, [sp, #12]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5fe:	f1b9 0f00 	cmp.w	r9, #0
 800b602:	d020      	beq.n	800b646 <__multiply+0x13e>
 800b604:	46ae      	mov	lr, r5
 800b606:	f04f 0a00 	mov.w	sl, #0
 800b60a:	6829      	ldr	r1, [r5, #0]
 800b60c:	f104 0c14 	add.w	ip, r4, #20
 800b610:	f8bc b000 	ldrh.w	fp, [ip]
 800b614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b618:	b289      	uxth	r1, r1
 800b61a:	fb09 220b 	mla	r2, r9, fp, r2
 800b61e:	4492      	add	sl, r2
 800b620:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b624:	f84e 1b04 	str.w	r1, [lr], #4
 800b628:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b62c:	f8be 1000 	ldrh.w	r1, [lr]
 800b630:	0c12      	lsrs	r2, r2, #16
 800b632:	fb09 1102 	mla	r1, r9, r2, r1
 800b636:	4567      	cmp	r7, ip
 800b638:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b63c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b640:	d8e6      	bhi.n	800b610 <__multiply+0x108>
 800b642:	9a01      	ldr	r2, [sp, #4]
 800b644:	50a9      	str	r1, [r5, r2]
 800b646:	3504      	adds	r5, #4
 800b648:	e79b      	b.n	800b582 <__multiply+0x7a>
 800b64a:	3e01      	subs	r6, #1
 800b64c:	e79d      	b.n	800b58a <__multiply+0x82>
 800b64e:	bf00      	nop
 800b650:	0801d95b 	.word	0x0801d95b
 800b654:	0801da08 	.word	0x0801da08

0800b658 <__pow5mult>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	4615      	mov	r5, r2
 800b65e:	f012 0203 	ands.w	r2, r2, #3
 800b662:	4606      	mov	r6, r0
 800b664:	460f      	mov	r7, r1
 800b666:	d007      	beq.n	800b678 <__pow5mult+0x20>
 800b668:	4c25      	ldr	r4, [pc, #148]	; (800b700 <__pow5mult+0xa8>)
 800b66a:	3a01      	subs	r2, #1
 800b66c:	2300      	movs	r3, #0
 800b66e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b672:	f7ff fe55 	bl	800b320 <__multadd>
 800b676:	4607      	mov	r7, r0
 800b678:	10ad      	asrs	r5, r5, #2
 800b67a:	d03d      	beq.n	800b6f8 <__pow5mult+0xa0>
 800b67c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b67e:	b97c      	cbnz	r4, 800b6a0 <__pow5mult+0x48>
 800b680:	2010      	movs	r0, #16
 800b682:	f7ff fdb5 	bl	800b1f0 <malloc>
 800b686:	4602      	mov	r2, r0
 800b688:	6270      	str	r0, [r6, #36]	; 0x24
 800b68a:	b928      	cbnz	r0, 800b698 <__pow5mult+0x40>
 800b68c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b690:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <__pow5mult+0xac>)
 800b692:	481d      	ldr	r0, [pc, #116]	; (800b708 <__pow5mult+0xb0>)
 800b694:	f000 fd1e 	bl	800c0d4 <__assert_func>
 800b698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b69c:	6004      	str	r4, [r0, #0]
 800b69e:	60c4      	str	r4, [r0, #12]
 800b6a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6a8:	b94c      	cbnz	r4, 800b6be <__pow5mult+0x66>
 800b6aa:	f240 2171 	movw	r1, #625	; 0x271
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7ff ff14 	bl	800b4dc <__i2b>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	f04f 0900 	mov.w	r9, #0
 800b6c2:	07eb      	lsls	r3, r5, #31
 800b6c4:	d50a      	bpl.n	800b6dc <__pow5mult+0x84>
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7ff ff1c 	bl	800b508 <__multiply>
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f7ff fe01 	bl	800b2dc <_Bfree>
 800b6da:	4647      	mov	r7, r8
 800b6dc:	106d      	asrs	r5, r5, #1
 800b6de:	d00b      	beq.n	800b6f8 <__pow5mult+0xa0>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	b938      	cbnz	r0, 800b6f4 <__pow5mult+0x9c>
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff ff0d 	bl	800b508 <__multiply>
 800b6ee:	6020      	str	r0, [r4, #0]
 800b6f0:	f8c0 9000 	str.w	r9, [r0]
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	e7e4      	b.n	800b6c2 <__pow5mult+0x6a>
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	bf00      	nop
 800b700:	0801db78 	.word	0x0801db78
 800b704:	0801d8c6 	.word	0x0801d8c6
 800b708:	0801da08 	.word	0x0801da08

0800b70c <__lshift>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	4607      	mov	r7, r0
 800b714:	4691      	mov	r9, r2
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	6849      	ldr	r1, [r1, #4]
 800b71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b724:	f108 0601 	add.w	r6, r8, #1
 800b728:	42b3      	cmp	r3, r6
 800b72a:	db0b      	blt.n	800b744 <__lshift+0x38>
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff fd95 	bl	800b25c <_Balloc>
 800b732:	4605      	mov	r5, r0
 800b734:	b948      	cbnz	r0, 800b74a <__lshift+0x3e>
 800b736:	4602      	mov	r2, r0
 800b738:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b73c:	4b29      	ldr	r3, [pc, #164]	; (800b7e4 <__lshift+0xd8>)
 800b73e:	482a      	ldr	r0, [pc, #168]	; (800b7e8 <__lshift+0xdc>)
 800b740:	f000 fcc8 	bl	800c0d4 <__assert_func>
 800b744:	3101      	adds	r1, #1
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	e7ee      	b.n	800b728 <__lshift+0x1c>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f100 0114 	add.w	r1, r0, #20
 800b750:	f100 0210 	add.w	r2, r0, #16
 800b754:	4618      	mov	r0, r3
 800b756:	4553      	cmp	r3, sl
 800b758:	db37      	blt.n	800b7ca <__lshift+0xbe>
 800b75a:	6920      	ldr	r0, [r4, #16]
 800b75c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	f019 091f 	ands.w	r9, r9, #31
 800b768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b76c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b770:	d02f      	beq.n	800b7d2 <__lshift+0xc6>
 800b772:	468a      	mov	sl, r1
 800b774:	f04f 0c00 	mov.w	ip, #0
 800b778:	f1c9 0e20 	rsb	lr, r9, #32
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	fa02 f209 	lsl.w	r2, r2, r9
 800b782:	ea42 020c 	orr.w	r2, r2, ip
 800b786:	f84a 2b04 	str.w	r2, [sl], #4
 800b78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78e:	4298      	cmp	r0, r3
 800b790:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b794:	d8f2      	bhi.n	800b77c <__lshift+0x70>
 800b796:	1b03      	subs	r3, r0, r4
 800b798:	3b15      	subs	r3, #21
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	3304      	adds	r3, #4
 800b7a0:	f104 0215 	add.w	r2, r4, #21
 800b7a4:	4290      	cmp	r0, r2
 800b7a6:	bf38      	it	cc
 800b7a8:	2304      	movcc	r3, #4
 800b7aa:	f841 c003 	str.w	ip, [r1, r3]
 800b7ae:	f1bc 0f00 	cmp.w	ip, #0
 800b7b2:	d001      	beq.n	800b7b8 <__lshift+0xac>
 800b7b4:	f108 0602 	add.w	r6, r8, #2
 800b7b8:	3e01      	subs	r6, #1
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	4621      	mov	r1, r4
 800b7be:	612e      	str	r6, [r5, #16]
 800b7c0:	f7ff fd8c 	bl	800b2dc <_Bfree>
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	e7c1      	b.n	800b756 <__lshift+0x4a>
 800b7d2:	3904      	subs	r1, #4
 800b7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d8:	4298      	cmp	r0, r3
 800b7da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7de:	d8f9      	bhi.n	800b7d4 <__lshift+0xc8>
 800b7e0:	e7ea      	b.n	800b7b8 <__lshift+0xac>
 800b7e2:	bf00      	nop
 800b7e4:	0801d95b 	.word	0x0801d95b
 800b7e8:	0801da08 	.word	0x0801da08

0800b7ec <__mcmp>:
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	690a      	ldr	r2, [r1, #16]
 800b7f0:	6900      	ldr	r0, [r0, #16]
 800b7f2:	b530      	push	{r4, r5, lr}
 800b7f4:	1a80      	subs	r0, r0, r2
 800b7f6:	d10d      	bne.n	800b814 <__mcmp+0x28>
 800b7f8:	3314      	adds	r3, #20
 800b7fa:	3114      	adds	r1, #20
 800b7fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b80c:	4295      	cmp	r5, r2
 800b80e:	d002      	beq.n	800b816 <__mcmp+0x2a>
 800b810:	d304      	bcc.n	800b81c <__mcmp+0x30>
 800b812:	2001      	movs	r0, #1
 800b814:	bd30      	pop	{r4, r5, pc}
 800b816:	42a3      	cmp	r3, r4
 800b818:	d3f4      	bcc.n	800b804 <__mcmp+0x18>
 800b81a:	e7fb      	b.n	800b814 <__mcmp+0x28>
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e7f8      	b.n	800b814 <__mcmp+0x28>
	...

0800b824 <__mdiff>:
 800b824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	460d      	mov	r5, r1
 800b82a:	4607      	mov	r7, r0
 800b82c:	4611      	mov	r1, r2
 800b82e:	4628      	mov	r0, r5
 800b830:	4614      	mov	r4, r2
 800b832:	f7ff ffdb 	bl	800b7ec <__mcmp>
 800b836:	1e06      	subs	r6, r0, #0
 800b838:	d111      	bne.n	800b85e <__mdiff+0x3a>
 800b83a:	4631      	mov	r1, r6
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff fd0d 	bl	800b25c <_Balloc>
 800b842:	4602      	mov	r2, r0
 800b844:	b928      	cbnz	r0, 800b852 <__mdiff+0x2e>
 800b846:	f240 2132 	movw	r1, #562	; 0x232
 800b84a:	4b3a      	ldr	r3, [pc, #232]	; (800b934 <__mdiff+0x110>)
 800b84c:	483a      	ldr	r0, [pc, #232]	; (800b938 <__mdiff+0x114>)
 800b84e:	f000 fc41 	bl	800c0d4 <__assert_func>
 800b852:	2301      	movs	r3, #1
 800b854:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b858:	4610      	mov	r0, r2
 800b85a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85e:	bfa4      	itt	ge
 800b860:	4623      	movge	r3, r4
 800b862:	462c      	movge	r4, r5
 800b864:	4638      	mov	r0, r7
 800b866:	6861      	ldr	r1, [r4, #4]
 800b868:	bfa6      	itte	ge
 800b86a:	461d      	movge	r5, r3
 800b86c:	2600      	movge	r6, #0
 800b86e:	2601      	movlt	r6, #1
 800b870:	f7ff fcf4 	bl	800b25c <_Balloc>
 800b874:	4602      	mov	r2, r0
 800b876:	b918      	cbnz	r0, 800b880 <__mdiff+0x5c>
 800b878:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b87c:	4b2d      	ldr	r3, [pc, #180]	; (800b934 <__mdiff+0x110>)
 800b87e:	e7e5      	b.n	800b84c <__mdiff+0x28>
 800b880:	f102 0814 	add.w	r8, r2, #20
 800b884:	46c2      	mov	sl, r8
 800b886:	f04f 0c00 	mov.w	ip, #0
 800b88a:	6927      	ldr	r7, [r4, #16]
 800b88c:	60c6      	str	r6, [r0, #12]
 800b88e:	692e      	ldr	r6, [r5, #16]
 800b890:	f104 0014 	add.w	r0, r4, #20
 800b894:	f105 0914 	add.w	r9, r5, #20
 800b898:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b89c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8a0:	3410      	adds	r4, #16
 800b8a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b8a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8aa:	fa1f f18b 	uxth.w	r1, fp
 800b8ae:	448c      	add	ip, r1
 800b8b0:	b299      	uxth	r1, r3
 800b8b2:	0c1b      	lsrs	r3, r3, #16
 800b8b4:	ebac 0101 	sub.w	r1, ip, r1
 800b8b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8c0:	b289      	uxth	r1, r1
 800b8c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b8c6:	454e      	cmp	r6, r9
 800b8c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8cc:	f84a 3b04 	str.w	r3, [sl], #4
 800b8d0:	d8e7      	bhi.n	800b8a2 <__mdiff+0x7e>
 800b8d2:	1b73      	subs	r3, r6, r5
 800b8d4:	3b15      	subs	r3, #21
 800b8d6:	f023 0303 	bic.w	r3, r3, #3
 800b8da:	3515      	adds	r5, #21
 800b8dc:	3304      	adds	r3, #4
 800b8de:	42ae      	cmp	r6, r5
 800b8e0:	bf38      	it	cc
 800b8e2:	2304      	movcc	r3, #4
 800b8e4:	4418      	add	r0, r3
 800b8e6:	4443      	add	r3, r8
 800b8e8:	461e      	mov	r6, r3
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	4575      	cmp	r5, lr
 800b8ee:	d30e      	bcc.n	800b90e <__mdiff+0xea>
 800b8f0:	f10e 0103 	add.w	r1, lr, #3
 800b8f4:	1a09      	subs	r1, r1, r0
 800b8f6:	f021 0103 	bic.w	r1, r1, #3
 800b8fa:	3803      	subs	r0, #3
 800b8fc:	4586      	cmp	lr, r0
 800b8fe:	bf38      	it	cc
 800b900:	2100      	movcc	r1, #0
 800b902:	4419      	add	r1, r3
 800b904:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b908:	b18b      	cbz	r3, 800b92e <__mdiff+0x10a>
 800b90a:	6117      	str	r7, [r2, #16]
 800b90c:	e7a4      	b.n	800b858 <__mdiff+0x34>
 800b90e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b912:	fa1f f188 	uxth.w	r1, r8
 800b916:	4461      	add	r1, ip
 800b918:	140c      	asrs	r4, r1, #16
 800b91a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b91e:	b289      	uxth	r1, r1
 800b920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b924:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b928:	f846 1b04 	str.w	r1, [r6], #4
 800b92c:	e7de      	b.n	800b8ec <__mdiff+0xc8>
 800b92e:	3f01      	subs	r7, #1
 800b930:	e7e8      	b.n	800b904 <__mdiff+0xe0>
 800b932:	bf00      	nop
 800b934:	0801d95b 	.word	0x0801d95b
 800b938:	0801da08 	.word	0x0801da08

0800b93c <__ulp>:
 800b93c:	4b11      	ldr	r3, [pc, #68]	; (800b984 <__ulp+0x48>)
 800b93e:	400b      	ands	r3, r1
 800b940:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b944:	2b00      	cmp	r3, #0
 800b946:	dd02      	ble.n	800b94e <__ulp+0x12>
 800b948:	2000      	movs	r0, #0
 800b94a:	4619      	mov	r1, r3
 800b94c:	4770      	bx	lr
 800b94e:	425b      	negs	r3, r3
 800b950:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b954:	f04f 0000 	mov.w	r0, #0
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b960:	da04      	bge.n	800b96c <__ulp+0x30>
 800b962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b966:	fa43 f102 	asr.w	r1, r3, r2
 800b96a:	4770      	bx	lr
 800b96c:	f1a2 0314 	sub.w	r3, r2, #20
 800b970:	2b1e      	cmp	r3, #30
 800b972:	bfd6      	itet	le
 800b974:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b978:	2301      	movgt	r3, #1
 800b97a:	fa22 f303 	lsrle.w	r3, r2, r3
 800b97e:	4618      	mov	r0, r3
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	7ff00000 	.word	0x7ff00000

0800b988 <__b2d>:
 800b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98c:	6907      	ldr	r7, [r0, #16]
 800b98e:	f100 0914 	add.w	r9, r0, #20
 800b992:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b996:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b99a:	f1a7 0804 	sub.w	r8, r7, #4
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7ff fd4e 	bl	800b440 <__hi0bits>
 800b9a4:	f1c0 0320 	rsb	r3, r0, #32
 800b9a8:	280a      	cmp	r0, #10
 800b9aa:	600b      	str	r3, [r1, #0]
 800b9ac:	491f      	ldr	r1, [pc, #124]	; (800ba2c <__b2d+0xa4>)
 800b9ae:	dc17      	bgt.n	800b9e0 <__b2d+0x58>
 800b9b0:	45c1      	cmp	r9, r8
 800b9b2:	bf28      	it	cs
 800b9b4:	2200      	movcs	r2, #0
 800b9b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b9ba:	fa26 f30c 	lsr.w	r3, r6, ip
 800b9be:	bf38      	it	cc
 800b9c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b9c4:	ea43 0501 	orr.w	r5, r3, r1
 800b9c8:	f100 0315 	add.w	r3, r0, #21
 800b9cc:	fa06 f303 	lsl.w	r3, r6, r3
 800b9d0:	fa22 f20c 	lsr.w	r2, r2, ip
 800b9d4:	ea43 0402 	orr.w	r4, r3, r2
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e0:	45c1      	cmp	r9, r8
 800b9e2:	bf2e      	itee	cs
 800b9e4:	2200      	movcs	r2, #0
 800b9e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b9ea:	f1a7 0808 	subcc.w	r8, r7, #8
 800b9ee:	f1b0 030b 	subs.w	r3, r0, #11
 800b9f2:	d016      	beq.n	800ba22 <__b2d+0x9a>
 800b9f4:	f1c3 0720 	rsb	r7, r3, #32
 800b9f8:	fa22 f107 	lsr.w	r1, r2, r7
 800b9fc:	45c8      	cmp	r8, r9
 800b9fe:	fa06 f603 	lsl.w	r6, r6, r3
 800ba02:	ea46 0601 	orr.w	r6, r6, r1
 800ba06:	bf94      	ite	ls
 800ba08:	2100      	movls	r1, #0
 800ba0a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ba0e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ba12:	fa02 f003 	lsl.w	r0, r2, r3
 800ba16:	40f9      	lsrs	r1, r7
 800ba18:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba1c:	ea40 0401 	orr.w	r4, r0, r1
 800ba20:	e7da      	b.n	800b9d8 <__b2d+0x50>
 800ba22:	4614      	mov	r4, r2
 800ba24:	ea46 0501 	orr.w	r5, r6, r1
 800ba28:	e7d6      	b.n	800b9d8 <__b2d+0x50>
 800ba2a:	bf00      	nop
 800ba2c:	3ff00000 	.word	0x3ff00000

0800ba30 <__d2b>:
 800ba30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ba34:	2101      	movs	r1, #1
 800ba36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ba3a:	4690      	mov	r8, r2
 800ba3c:	461d      	mov	r5, r3
 800ba3e:	f7ff fc0d 	bl	800b25c <_Balloc>
 800ba42:	4604      	mov	r4, r0
 800ba44:	b930      	cbnz	r0, 800ba54 <__d2b+0x24>
 800ba46:	4602      	mov	r2, r0
 800ba48:	f240 310a 	movw	r1, #778	; 0x30a
 800ba4c:	4b24      	ldr	r3, [pc, #144]	; (800bae0 <__d2b+0xb0>)
 800ba4e:	4825      	ldr	r0, [pc, #148]	; (800bae4 <__d2b+0xb4>)
 800ba50:	f000 fb40 	bl	800c0d4 <__assert_func>
 800ba54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ba58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ba5c:	bb2d      	cbnz	r5, 800baaa <__d2b+0x7a>
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	f1b8 0300 	subs.w	r3, r8, #0
 800ba64:	d026      	beq.n	800bab4 <__d2b+0x84>
 800ba66:	4668      	mov	r0, sp
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	f7ff fd09 	bl	800b480 <__lo0bits>
 800ba6e:	9900      	ldr	r1, [sp, #0]
 800ba70:	b1f0      	cbz	r0, 800bab0 <__d2b+0x80>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	f1c0 0320 	rsb	r3, r0, #32
 800ba78:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	40c2      	lsrs	r2, r0
 800ba80:	6163      	str	r3, [r4, #20]
 800ba82:	9201      	str	r2, [sp, #4]
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bf14      	ite	ne
 800ba8a:	2102      	movne	r1, #2
 800ba8c:	2101      	moveq	r1, #1
 800ba8e:	61a3      	str	r3, [r4, #24]
 800ba90:	6121      	str	r1, [r4, #16]
 800ba92:	b1c5      	cbz	r5, 800bac6 <__d2b+0x96>
 800ba94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba98:	4405      	add	r5, r0
 800ba9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba9e:	603d      	str	r5, [r7, #0]
 800baa0:	6030      	str	r0, [r6, #0]
 800baa2:	4620      	mov	r0, r4
 800baa4:	b002      	add	sp, #8
 800baa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baae:	e7d6      	b.n	800ba5e <__d2b+0x2e>
 800bab0:	6161      	str	r1, [r4, #20]
 800bab2:	e7e7      	b.n	800ba84 <__d2b+0x54>
 800bab4:	a801      	add	r0, sp, #4
 800bab6:	f7ff fce3 	bl	800b480 <__lo0bits>
 800baba:	2101      	movs	r1, #1
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	6121      	str	r1, [r4, #16]
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	3020      	adds	r0, #32
 800bac4:	e7e5      	b.n	800ba92 <__d2b+0x62>
 800bac6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800baca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bace:	6038      	str	r0, [r7, #0]
 800bad0:	6918      	ldr	r0, [r3, #16]
 800bad2:	f7ff fcb5 	bl	800b440 <__hi0bits>
 800bad6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bada:	6031      	str	r1, [r6, #0]
 800badc:	e7e1      	b.n	800baa2 <__d2b+0x72>
 800bade:	bf00      	nop
 800bae0:	0801d95b 	.word	0x0801d95b
 800bae4:	0801da08 	.word	0x0801da08

0800bae8 <__ratio>:
 800bae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	4688      	mov	r8, r1
 800baee:	4669      	mov	r1, sp
 800baf0:	4681      	mov	r9, r0
 800baf2:	f7ff ff49 	bl	800b988 <__b2d>
 800baf6:	460f      	mov	r7, r1
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	4640      	mov	r0, r8
 800bafe:	a901      	add	r1, sp, #4
 800bb00:	f7ff ff42 	bl	800b988 <__b2d>
 800bb04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb0c:	468b      	mov	fp, r1
 800bb0e:	eba3 0c02 	sub.w	ip, r3, r2
 800bb12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb16:	1a9b      	subs	r3, r3, r2
 800bb18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bfd5      	itete	le
 800bb20:	460a      	movle	r2, r1
 800bb22:	462a      	movgt	r2, r5
 800bb24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb28:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb2c:	bfd8      	it	le
 800bb2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb32:	465b      	mov	r3, fp
 800bb34:	4602      	mov	r2, r0
 800bb36:	4639      	mov	r1, r7
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7fa f8df 	bl	8005cfc <__aeabi_ddiv>
 800bb3e:	b003      	add	sp, #12
 800bb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb44 <__copybits>:
 800bb44:	3901      	subs	r1, #1
 800bb46:	b570      	push	{r4, r5, r6, lr}
 800bb48:	1149      	asrs	r1, r1, #5
 800bb4a:	6914      	ldr	r4, [r2, #16]
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	f102 0314 	add.w	r3, r2, #20
 800bb52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb5a:	1f05      	subs	r5, r0, #4
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d30c      	bcc.n	800bb7a <__copybits+0x36>
 800bb60:	1aa3      	subs	r3, r4, r2
 800bb62:	3b11      	subs	r3, #17
 800bb64:	f023 0303 	bic.w	r3, r3, #3
 800bb68:	3211      	adds	r2, #17
 800bb6a:	42a2      	cmp	r2, r4
 800bb6c:	bf88      	it	hi
 800bb6e:	2300      	movhi	r3, #0
 800bb70:	4418      	add	r0, r3
 800bb72:	2300      	movs	r3, #0
 800bb74:	4288      	cmp	r0, r1
 800bb76:	d305      	bcc.n	800bb84 <__copybits+0x40>
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
 800bb7a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb7e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb82:	e7eb      	b.n	800bb5c <__copybits+0x18>
 800bb84:	f840 3b04 	str.w	r3, [r0], #4
 800bb88:	e7f4      	b.n	800bb74 <__copybits+0x30>

0800bb8a <__any_on>:
 800bb8a:	f100 0214 	add.w	r2, r0, #20
 800bb8e:	6900      	ldr	r0, [r0, #16]
 800bb90:	114b      	asrs	r3, r1, #5
 800bb92:	4298      	cmp	r0, r3
 800bb94:	b510      	push	{r4, lr}
 800bb96:	db11      	blt.n	800bbbc <__any_on+0x32>
 800bb98:	dd0a      	ble.n	800bbb0 <__any_on+0x26>
 800bb9a:	f011 011f 	ands.w	r1, r1, #31
 800bb9e:	d007      	beq.n	800bbb0 <__any_on+0x26>
 800bba0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bba4:	fa24 f001 	lsr.w	r0, r4, r1
 800bba8:	fa00 f101 	lsl.w	r1, r0, r1
 800bbac:	428c      	cmp	r4, r1
 800bbae:	d10b      	bne.n	800bbc8 <__any_on+0x3e>
 800bbb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d803      	bhi.n	800bbc0 <__any_on+0x36>
 800bbb8:	2000      	movs	r0, #0
 800bbba:	bd10      	pop	{r4, pc}
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	e7f7      	b.n	800bbb0 <__any_on+0x26>
 800bbc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	d0f5      	beq.n	800bbb4 <__any_on+0x2a>
 800bbc8:	2001      	movs	r0, #1
 800bbca:	e7f6      	b.n	800bbba <__any_on+0x30>

0800bbcc <_calloc_r>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	fba1 5402 	umull	r5, r4, r1, r2
 800bbd2:	b934      	cbnz	r4, 800bbe2 <_calloc_r+0x16>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f000 f875 	bl	800bcc4 <_malloc_r>
 800bbda:	4606      	mov	r6, r0
 800bbdc:	b928      	cbnz	r0, 800bbea <_calloc_r+0x1e>
 800bbde:	4630      	mov	r0, r6
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	220c      	movs	r2, #12
 800bbe4:	2600      	movs	r6, #0
 800bbe6:	6002      	str	r2, [r0, #0]
 800bbe8:	e7f9      	b.n	800bbde <_calloc_r+0x12>
 800bbea:	462a      	mov	r2, r5
 800bbec:	4621      	mov	r1, r4
 800bbee:	f7fc fbf1 	bl	80083d4 <memset>
 800bbf2:	e7f4      	b.n	800bbde <_calloc_r+0x12>

0800bbf4 <_free_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	2900      	cmp	r1, #0
 800bbfa:	d040      	beq.n	800bc7e <_free_r+0x8a>
 800bbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc00:	1f0c      	subs	r4, r1, #4
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	bfb8      	it	lt
 800bc06:	18e4      	addlt	r4, r4, r3
 800bc08:	f000 faae 	bl	800c168 <__malloc_lock>
 800bc0c:	4a1c      	ldr	r2, [pc, #112]	; (800bc80 <_free_r+0x8c>)
 800bc0e:	6813      	ldr	r3, [r2, #0]
 800bc10:	b933      	cbnz	r3, 800bc20 <_free_r+0x2c>
 800bc12:	6063      	str	r3, [r4, #4]
 800bc14:	6014      	str	r4, [r2, #0]
 800bc16:	4628      	mov	r0, r5
 800bc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc1c:	f000 baaa 	b.w	800c174 <__malloc_unlock>
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	d908      	bls.n	800bc36 <_free_r+0x42>
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	1821      	adds	r1, r4, r0
 800bc28:	428b      	cmp	r3, r1
 800bc2a:	bf01      	itttt	eq
 800bc2c:	6819      	ldreq	r1, [r3, #0]
 800bc2e:	685b      	ldreq	r3, [r3, #4]
 800bc30:	1809      	addeq	r1, r1, r0
 800bc32:	6021      	streq	r1, [r4, #0]
 800bc34:	e7ed      	b.n	800bc12 <_free_r+0x1e>
 800bc36:	461a      	mov	r2, r3
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	b10b      	cbz	r3, 800bc40 <_free_r+0x4c>
 800bc3c:	42a3      	cmp	r3, r4
 800bc3e:	d9fa      	bls.n	800bc36 <_free_r+0x42>
 800bc40:	6811      	ldr	r1, [r2, #0]
 800bc42:	1850      	adds	r0, r2, r1
 800bc44:	42a0      	cmp	r0, r4
 800bc46:	d10b      	bne.n	800bc60 <_free_r+0x6c>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	4401      	add	r1, r0
 800bc4c:	1850      	adds	r0, r2, r1
 800bc4e:	4283      	cmp	r3, r0
 800bc50:	6011      	str	r1, [r2, #0]
 800bc52:	d1e0      	bne.n	800bc16 <_free_r+0x22>
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	4401      	add	r1, r0
 800bc5a:	6011      	str	r1, [r2, #0]
 800bc5c:	6053      	str	r3, [r2, #4]
 800bc5e:	e7da      	b.n	800bc16 <_free_r+0x22>
 800bc60:	d902      	bls.n	800bc68 <_free_r+0x74>
 800bc62:	230c      	movs	r3, #12
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	e7d6      	b.n	800bc16 <_free_r+0x22>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	1821      	adds	r1, r4, r0
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	bf01      	itttt	eq
 800bc70:	6819      	ldreq	r1, [r3, #0]
 800bc72:	685b      	ldreq	r3, [r3, #4]
 800bc74:	1809      	addeq	r1, r1, r0
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	6063      	str	r3, [r4, #4]
 800bc7a:	6054      	str	r4, [r2, #4]
 800bc7c:	e7cb      	b.n	800bc16 <_free_r+0x22>
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	200006c8 	.word	0x200006c8

0800bc84 <sbrk_aligned>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	4e0e      	ldr	r6, [pc, #56]	; (800bcc0 <sbrk_aligned+0x3c>)
 800bc88:	460c      	mov	r4, r1
 800bc8a:	6831      	ldr	r1, [r6, #0]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	b911      	cbnz	r1, 800bc96 <sbrk_aligned+0x12>
 800bc90:	f000 f9ee 	bl	800c070 <_sbrk_r>
 800bc94:	6030      	str	r0, [r6, #0]
 800bc96:	4621      	mov	r1, r4
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f000 f9e9 	bl	800c070 <_sbrk_r>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d00a      	beq.n	800bcb8 <sbrk_aligned+0x34>
 800bca2:	1cc4      	adds	r4, r0, #3
 800bca4:	f024 0403 	bic.w	r4, r4, #3
 800bca8:	42a0      	cmp	r0, r4
 800bcaa:	d007      	beq.n	800bcbc <sbrk_aligned+0x38>
 800bcac:	1a21      	subs	r1, r4, r0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 f9de 	bl	800c070 <_sbrk_r>
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d101      	bne.n	800bcbc <sbrk_aligned+0x38>
 800bcb8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	200006cc 	.word	0x200006cc

0800bcc4 <_malloc_r>:
 800bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc8:	1ccd      	adds	r5, r1, #3
 800bcca:	f025 0503 	bic.w	r5, r5, #3
 800bcce:	3508      	adds	r5, #8
 800bcd0:	2d0c      	cmp	r5, #12
 800bcd2:	bf38      	it	cc
 800bcd4:	250c      	movcc	r5, #12
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	4607      	mov	r7, r0
 800bcda:	db01      	blt.n	800bce0 <_malloc_r+0x1c>
 800bcdc:	42a9      	cmp	r1, r5
 800bcde:	d905      	bls.n	800bcec <_malloc_r+0x28>
 800bce0:	230c      	movs	r3, #12
 800bce2:	2600      	movs	r6, #0
 800bce4:	603b      	str	r3, [r7, #0]
 800bce6:	4630      	mov	r0, r6
 800bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcec:	4e2e      	ldr	r6, [pc, #184]	; (800bda8 <_malloc_r+0xe4>)
 800bcee:	f000 fa3b 	bl	800c168 <__malloc_lock>
 800bcf2:	6833      	ldr	r3, [r6, #0]
 800bcf4:	461c      	mov	r4, r3
 800bcf6:	bb34      	cbnz	r4, 800bd46 <_malloc_r+0x82>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	f7ff ffc2 	bl	800bc84 <sbrk_aligned>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	4604      	mov	r4, r0
 800bd04:	d14d      	bne.n	800bda2 <_malloc_r+0xde>
 800bd06:	6834      	ldr	r4, [r6, #0]
 800bd08:	4626      	mov	r6, r4
 800bd0a:	2e00      	cmp	r6, #0
 800bd0c:	d140      	bne.n	800bd90 <_malloc_r+0xcc>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	4631      	mov	r1, r6
 800bd12:	4638      	mov	r0, r7
 800bd14:	eb04 0803 	add.w	r8, r4, r3
 800bd18:	f000 f9aa 	bl	800c070 <_sbrk_r>
 800bd1c:	4580      	cmp	r8, r0
 800bd1e:	d13a      	bne.n	800bd96 <_malloc_r+0xd2>
 800bd20:	6821      	ldr	r1, [r4, #0]
 800bd22:	3503      	adds	r5, #3
 800bd24:	1a6d      	subs	r5, r5, r1
 800bd26:	f025 0503 	bic.w	r5, r5, #3
 800bd2a:	3508      	adds	r5, #8
 800bd2c:	2d0c      	cmp	r5, #12
 800bd2e:	bf38      	it	cc
 800bd30:	250c      	movcc	r5, #12
 800bd32:	4638      	mov	r0, r7
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7ff ffa5 	bl	800bc84 <sbrk_aligned>
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	d02b      	beq.n	800bd96 <_malloc_r+0xd2>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	442b      	add	r3, r5
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	e00e      	b.n	800bd64 <_malloc_r+0xa0>
 800bd46:	6822      	ldr	r2, [r4, #0]
 800bd48:	1b52      	subs	r2, r2, r5
 800bd4a:	d41e      	bmi.n	800bd8a <_malloc_r+0xc6>
 800bd4c:	2a0b      	cmp	r2, #11
 800bd4e:	d916      	bls.n	800bd7e <_malloc_r+0xba>
 800bd50:	1961      	adds	r1, r4, r5
 800bd52:	42a3      	cmp	r3, r4
 800bd54:	6025      	str	r5, [r4, #0]
 800bd56:	bf18      	it	ne
 800bd58:	6059      	strne	r1, [r3, #4]
 800bd5a:	6863      	ldr	r3, [r4, #4]
 800bd5c:	bf08      	it	eq
 800bd5e:	6031      	streq	r1, [r6, #0]
 800bd60:	5162      	str	r2, [r4, r5]
 800bd62:	604b      	str	r3, [r1, #4]
 800bd64:	4638      	mov	r0, r7
 800bd66:	f104 060b 	add.w	r6, r4, #11
 800bd6a:	f000 fa03 	bl	800c174 <__malloc_unlock>
 800bd6e:	f026 0607 	bic.w	r6, r6, #7
 800bd72:	1d23      	adds	r3, r4, #4
 800bd74:	1af2      	subs	r2, r6, r3
 800bd76:	d0b6      	beq.n	800bce6 <_malloc_r+0x22>
 800bd78:	1b9b      	subs	r3, r3, r6
 800bd7a:	50a3      	str	r3, [r4, r2]
 800bd7c:	e7b3      	b.n	800bce6 <_malloc_r+0x22>
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	bf0c      	ite	eq
 800bd84:	6032      	streq	r2, [r6, #0]
 800bd86:	605a      	strne	r2, [r3, #4]
 800bd88:	e7ec      	b.n	800bd64 <_malloc_r+0xa0>
 800bd8a:	4623      	mov	r3, r4
 800bd8c:	6864      	ldr	r4, [r4, #4]
 800bd8e:	e7b2      	b.n	800bcf6 <_malloc_r+0x32>
 800bd90:	4634      	mov	r4, r6
 800bd92:	6876      	ldr	r6, [r6, #4]
 800bd94:	e7b9      	b.n	800bd0a <_malloc_r+0x46>
 800bd96:	230c      	movs	r3, #12
 800bd98:	4638      	mov	r0, r7
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	f000 f9ea 	bl	800c174 <__malloc_unlock>
 800bda0:	e7a1      	b.n	800bce6 <_malloc_r+0x22>
 800bda2:	6025      	str	r5, [r4, #0]
 800bda4:	e7de      	b.n	800bd64 <_malloc_r+0xa0>
 800bda6:	bf00      	nop
 800bda8:	200006c8 	.word	0x200006c8

0800bdac <__ssputs_r>:
 800bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	688e      	ldr	r6, [r1, #8]
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	429e      	cmp	r6, r3
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	4690      	mov	r8, r2
 800bdba:	461f      	mov	r7, r3
 800bdbc:	d838      	bhi.n	800be30 <__ssputs_r+0x84>
 800bdbe:	898a      	ldrh	r2, [r1, #12]
 800bdc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdc4:	d032      	beq.n	800be2c <__ssputs_r+0x80>
 800bdc6:	6825      	ldr	r5, [r4, #0]
 800bdc8:	6909      	ldr	r1, [r1, #16]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	eba5 0901 	sub.w	r9, r5, r1
 800bdd0:	6965      	ldr	r5, [r4, #20]
 800bdd2:	444b      	add	r3, r9
 800bdd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bddc:	106d      	asrs	r5, r5, #1
 800bdde:	429d      	cmp	r5, r3
 800bde0:	bf38      	it	cc
 800bde2:	461d      	movcc	r5, r3
 800bde4:	0553      	lsls	r3, r2, #21
 800bde6:	d531      	bpl.n	800be4c <__ssputs_r+0xa0>
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7ff ff6b 	bl	800bcc4 <_malloc_r>
 800bdee:	4606      	mov	r6, r0
 800bdf0:	b950      	cbnz	r0, 800be08 <__ssputs_r+0x5c>
 800bdf2:	230c      	movs	r3, #12
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf8:	f8ca 3000 	str.w	r3, [sl]
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be02:	81a3      	strh	r3, [r4, #12]
 800be04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be08:	464a      	mov	r2, r9
 800be0a:	6921      	ldr	r1, [r4, #16]
 800be0c:	f7ff fa18 	bl	800b240 <memcpy>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	6126      	str	r6, [r4, #16]
 800be1e:	444e      	add	r6, r9
 800be20:	6026      	str	r6, [r4, #0]
 800be22:	463e      	mov	r6, r7
 800be24:	6165      	str	r5, [r4, #20]
 800be26:	eba5 0509 	sub.w	r5, r5, r9
 800be2a:	60a5      	str	r5, [r4, #8]
 800be2c:	42be      	cmp	r6, r7
 800be2e:	d900      	bls.n	800be32 <__ssputs_r+0x86>
 800be30:	463e      	mov	r6, r7
 800be32:	4632      	mov	r2, r6
 800be34:	4641      	mov	r1, r8
 800be36:	6820      	ldr	r0, [r4, #0]
 800be38:	f000 f97c 	bl	800c134 <memmove>
 800be3c:	68a3      	ldr	r3, [r4, #8]
 800be3e:	2000      	movs	r0, #0
 800be40:	1b9b      	subs	r3, r3, r6
 800be42:	60a3      	str	r3, [r4, #8]
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	4433      	add	r3, r6
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	e7db      	b.n	800be04 <__ssputs_r+0x58>
 800be4c:	462a      	mov	r2, r5
 800be4e:	f000 f997 	bl	800c180 <_realloc_r>
 800be52:	4606      	mov	r6, r0
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e1      	bne.n	800be1c <__ssputs_r+0x70>
 800be58:	4650      	mov	r0, sl
 800be5a:	6921      	ldr	r1, [r4, #16]
 800be5c:	f7ff feca 	bl	800bbf4 <_free_r>
 800be60:	e7c7      	b.n	800bdf2 <__ssputs_r+0x46>
	...

0800be64 <_svfiprintf_r>:
 800be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	4698      	mov	r8, r3
 800be6a:	898b      	ldrh	r3, [r1, #12]
 800be6c:	4607      	mov	r7, r0
 800be6e:	061b      	lsls	r3, r3, #24
 800be70:	460d      	mov	r5, r1
 800be72:	4614      	mov	r4, r2
 800be74:	b09d      	sub	sp, #116	; 0x74
 800be76:	d50e      	bpl.n	800be96 <_svfiprintf_r+0x32>
 800be78:	690b      	ldr	r3, [r1, #16]
 800be7a:	b963      	cbnz	r3, 800be96 <_svfiprintf_r+0x32>
 800be7c:	2140      	movs	r1, #64	; 0x40
 800be7e:	f7ff ff21 	bl	800bcc4 <_malloc_r>
 800be82:	6028      	str	r0, [r5, #0]
 800be84:	6128      	str	r0, [r5, #16]
 800be86:	b920      	cbnz	r0, 800be92 <_svfiprintf_r+0x2e>
 800be88:	230c      	movs	r3, #12
 800be8a:	603b      	str	r3, [r7, #0]
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	e0d1      	b.n	800c036 <_svfiprintf_r+0x1d2>
 800be92:	2340      	movs	r3, #64	; 0x40
 800be94:	616b      	str	r3, [r5, #20]
 800be96:	2300      	movs	r3, #0
 800be98:	9309      	str	r3, [sp, #36]	; 0x24
 800be9a:	2320      	movs	r3, #32
 800be9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bea0:	2330      	movs	r3, #48	; 0x30
 800bea2:	f04f 0901 	mov.w	r9, #1
 800bea6:	f8cd 800c 	str.w	r8, [sp, #12]
 800beaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c050 <_svfiprintf_r+0x1ec>
 800beae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beb2:	4623      	mov	r3, r4
 800beb4:	469a      	mov	sl, r3
 800beb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beba:	b10a      	cbz	r2, 800bec0 <_svfiprintf_r+0x5c>
 800bebc:	2a25      	cmp	r2, #37	; 0x25
 800bebe:	d1f9      	bne.n	800beb4 <_svfiprintf_r+0x50>
 800bec0:	ebba 0b04 	subs.w	fp, sl, r4
 800bec4:	d00b      	beq.n	800bede <_svfiprintf_r+0x7a>
 800bec6:	465b      	mov	r3, fp
 800bec8:	4622      	mov	r2, r4
 800beca:	4629      	mov	r1, r5
 800becc:	4638      	mov	r0, r7
 800bece:	f7ff ff6d 	bl	800bdac <__ssputs_r>
 800bed2:	3001      	adds	r0, #1
 800bed4:	f000 80aa 	beq.w	800c02c <_svfiprintf_r+0x1c8>
 800bed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beda:	445a      	add	r2, fp
 800bedc:	9209      	str	r2, [sp, #36]	; 0x24
 800bede:	f89a 3000 	ldrb.w	r3, [sl]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 80a2 	beq.w	800c02c <_svfiprintf_r+0x1c8>
 800bee8:	2300      	movs	r3, #0
 800beea:	f04f 32ff 	mov.w	r2, #4294967295
 800beee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bef2:	f10a 0a01 	add.w	sl, sl, #1
 800bef6:	9304      	str	r3, [sp, #16]
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800befe:	931a      	str	r3, [sp, #104]	; 0x68
 800bf00:	4654      	mov	r4, sl
 800bf02:	2205      	movs	r2, #5
 800bf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf08:	4851      	ldr	r0, [pc, #324]	; (800c050 <_svfiprintf_r+0x1ec>)
 800bf0a:	f7ff f98b 	bl	800b224 <memchr>
 800bf0e:	9a04      	ldr	r2, [sp, #16]
 800bf10:	b9d8      	cbnz	r0, 800bf4a <_svfiprintf_r+0xe6>
 800bf12:	06d0      	lsls	r0, r2, #27
 800bf14:	bf44      	itt	mi
 800bf16:	2320      	movmi	r3, #32
 800bf18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf1c:	0711      	lsls	r1, r2, #28
 800bf1e:	bf44      	itt	mi
 800bf20:	232b      	movmi	r3, #43	; 0x2b
 800bf22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf26:	f89a 3000 	ldrb.w	r3, [sl]
 800bf2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf2c:	d015      	beq.n	800bf5a <_svfiprintf_r+0xf6>
 800bf2e:	4654      	mov	r4, sl
 800bf30:	2000      	movs	r0, #0
 800bf32:	f04f 0c0a 	mov.w	ip, #10
 800bf36:	9a07      	ldr	r2, [sp, #28]
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf3e:	3b30      	subs	r3, #48	; 0x30
 800bf40:	2b09      	cmp	r3, #9
 800bf42:	d94e      	bls.n	800bfe2 <_svfiprintf_r+0x17e>
 800bf44:	b1b0      	cbz	r0, 800bf74 <_svfiprintf_r+0x110>
 800bf46:	9207      	str	r2, [sp, #28]
 800bf48:	e014      	b.n	800bf74 <_svfiprintf_r+0x110>
 800bf4a:	eba0 0308 	sub.w	r3, r0, r8
 800bf4e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf52:	4313      	orrs	r3, r2
 800bf54:	46a2      	mov	sl, r4
 800bf56:	9304      	str	r3, [sp, #16]
 800bf58:	e7d2      	b.n	800bf00 <_svfiprintf_r+0x9c>
 800bf5a:	9b03      	ldr	r3, [sp, #12]
 800bf5c:	1d19      	adds	r1, r3, #4
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	9103      	str	r1, [sp, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bfbb      	ittet	lt
 800bf66:	425b      	neglt	r3, r3
 800bf68:	f042 0202 	orrlt.w	r2, r2, #2
 800bf6c:	9307      	strge	r3, [sp, #28]
 800bf6e:	9307      	strlt	r3, [sp, #28]
 800bf70:	bfb8      	it	lt
 800bf72:	9204      	strlt	r2, [sp, #16]
 800bf74:	7823      	ldrb	r3, [r4, #0]
 800bf76:	2b2e      	cmp	r3, #46	; 0x2e
 800bf78:	d10c      	bne.n	800bf94 <_svfiprintf_r+0x130>
 800bf7a:	7863      	ldrb	r3, [r4, #1]
 800bf7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7e:	d135      	bne.n	800bfec <_svfiprintf_r+0x188>
 800bf80:	9b03      	ldr	r3, [sp, #12]
 800bf82:	3402      	adds	r4, #2
 800bf84:	1d1a      	adds	r2, r3, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	9203      	str	r2, [sp, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfb8      	it	lt
 800bf8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c054 <_svfiprintf_r+0x1f0>
 800bf98:	2203      	movs	r2, #3
 800bf9a:	4650      	mov	r0, sl
 800bf9c:	7821      	ldrb	r1, [r4, #0]
 800bf9e:	f7ff f941 	bl	800b224 <memchr>
 800bfa2:	b140      	cbz	r0, 800bfb6 <_svfiprintf_r+0x152>
 800bfa4:	2340      	movs	r3, #64	; 0x40
 800bfa6:	eba0 000a 	sub.w	r0, r0, sl
 800bfaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	3401      	adds	r4, #1
 800bfb2:	4303      	orrs	r3, r0
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfba:	2206      	movs	r2, #6
 800bfbc:	4826      	ldr	r0, [pc, #152]	; (800c058 <_svfiprintf_r+0x1f4>)
 800bfbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfc2:	f7ff f92f 	bl	800b224 <memchr>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d038      	beq.n	800c03c <_svfiprintf_r+0x1d8>
 800bfca:	4b24      	ldr	r3, [pc, #144]	; (800c05c <_svfiprintf_r+0x1f8>)
 800bfcc:	bb1b      	cbnz	r3, 800c016 <_svfiprintf_r+0x1b2>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	f023 0307 	bic.w	r3, r3, #7
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	9303      	str	r3, [sp, #12]
 800bfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfdc:	4433      	add	r3, r6
 800bfde:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe0:	e767      	b.n	800beb2 <_svfiprintf_r+0x4e>
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfea:	e7a5      	b.n	800bf38 <_svfiprintf_r+0xd4>
 800bfec:	2300      	movs	r3, #0
 800bfee:	f04f 0c0a 	mov.w	ip, #10
 800bff2:	4619      	mov	r1, r3
 800bff4:	3401      	adds	r4, #1
 800bff6:	9305      	str	r3, [sp, #20]
 800bff8:	4620      	mov	r0, r4
 800bffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bffe:	3a30      	subs	r2, #48	; 0x30
 800c000:	2a09      	cmp	r2, #9
 800c002:	d903      	bls.n	800c00c <_svfiprintf_r+0x1a8>
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0c5      	beq.n	800bf94 <_svfiprintf_r+0x130>
 800c008:	9105      	str	r1, [sp, #20]
 800c00a:	e7c3      	b.n	800bf94 <_svfiprintf_r+0x130>
 800c00c:	4604      	mov	r4, r0
 800c00e:	2301      	movs	r3, #1
 800c010:	fb0c 2101 	mla	r1, ip, r1, r2
 800c014:	e7f0      	b.n	800bff8 <_svfiprintf_r+0x194>
 800c016:	ab03      	add	r3, sp, #12
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	462a      	mov	r2, r5
 800c01c:	4638      	mov	r0, r7
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <_svfiprintf_r+0x1fc>)
 800c020:	a904      	add	r1, sp, #16
 800c022:	f7fc fa7d 	bl	8008520 <_printf_float>
 800c026:	1c42      	adds	r2, r0, #1
 800c028:	4606      	mov	r6, r0
 800c02a:	d1d6      	bne.n	800bfda <_svfiprintf_r+0x176>
 800c02c:	89ab      	ldrh	r3, [r5, #12]
 800c02e:	065b      	lsls	r3, r3, #25
 800c030:	f53f af2c 	bmi.w	800be8c <_svfiprintf_r+0x28>
 800c034:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c036:	b01d      	add	sp, #116	; 0x74
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	ab03      	add	r3, sp, #12
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	462a      	mov	r2, r5
 800c042:	4638      	mov	r0, r7
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <_svfiprintf_r+0x1fc>)
 800c046:	a904      	add	r1, sp, #16
 800c048:	f7fc fd06 	bl	8008a58 <_printf_i>
 800c04c:	e7eb      	b.n	800c026 <_svfiprintf_r+0x1c2>
 800c04e:	bf00      	nop
 800c050:	0801db84 	.word	0x0801db84
 800c054:	0801db8a 	.word	0x0801db8a
 800c058:	0801db8e 	.word	0x0801db8e
 800c05c:	08008521 	.word	0x08008521
 800c060:	0800bdad 	.word	0x0800bdad

0800c064 <nan>:
 800c064:	2000      	movs	r0, #0
 800c066:	4901      	ldr	r1, [pc, #4]	; (800c06c <nan+0x8>)
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	7ff80000 	.word	0x7ff80000

0800c070 <_sbrk_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	2300      	movs	r3, #0
 800c074:	4d05      	ldr	r5, [pc, #20]	; (800c08c <_sbrk_r+0x1c>)
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	f7f9 fb28 	bl	80056d0 <_sbrk>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_sbrk_r+0x1a>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_sbrk_r+0x1a>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	200006d0 	.word	0x200006d0

0800c090 <strncmp>:
 800c090:	4603      	mov	r3, r0
 800c092:	b510      	push	{r4, lr}
 800c094:	b172      	cbz	r2, 800c0b4 <strncmp+0x24>
 800c096:	3901      	subs	r1, #1
 800c098:	1884      	adds	r4, r0, r2
 800c09a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c09e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0a2:	4290      	cmp	r0, r2
 800c0a4:	d101      	bne.n	800c0aa <strncmp+0x1a>
 800c0a6:	42a3      	cmp	r3, r4
 800c0a8:	d101      	bne.n	800c0ae <strncmp+0x1e>
 800c0aa:	1a80      	subs	r0, r0, r2
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d1f3      	bne.n	800c09a <strncmp+0xa>
 800c0b2:	e7fa      	b.n	800c0aa <strncmp+0x1a>
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	e7f9      	b.n	800c0ac <strncmp+0x1c>

0800c0b8 <__ascii_wctomb>:
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4608      	mov	r0, r1
 800c0bc:	b141      	cbz	r1, 800c0d0 <__ascii_wctomb+0x18>
 800c0be:	2aff      	cmp	r2, #255	; 0xff
 800c0c0:	d904      	bls.n	800c0cc <__ascii_wctomb+0x14>
 800c0c2:	228a      	movs	r2, #138	; 0x8a
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	4770      	bx	lr
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	700a      	strb	r2, [r1, #0]
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <__assert_func>:
 800c0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0d6:	4614      	mov	r4, r2
 800c0d8:	461a      	mov	r2, r3
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <__assert_func+0x2c>)
 800c0dc:	4605      	mov	r5, r0
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68d8      	ldr	r0, [r3, #12]
 800c0e2:	b14c      	cbz	r4, 800c0f8 <__assert_func+0x24>
 800c0e4:	4b07      	ldr	r3, [pc, #28]	; (800c104 <__assert_func+0x30>)
 800c0e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0ea:	9100      	str	r1, [sp, #0]
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	4906      	ldr	r1, [pc, #24]	; (800c108 <__assert_func+0x34>)
 800c0f0:	f000 f80e 	bl	800c110 <fiprintf>
 800c0f4:	f000 fa8a 	bl	800c60c <abort>
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <__assert_func+0x38>)
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	e7f3      	b.n	800c0e6 <__assert_func+0x12>
 800c0fe:	bf00      	nop
 800c100:	2000000c 	.word	0x2000000c
 800c104:	0801db95 	.word	0x0801db95
 800c108:	0801dba2 	.word	0x0801dba2
 800c10c:	0801dbd0 	.word	0x0801dbd0

0800c110 <fiprintf>:
 800c110:	b40e      	push	{r1, r2, r3}
 800c112:	b503      	push	{r0, r1, lr}
 800c114:	4601      	mov	r1, r0
 800c116:	ab03      	add	r3, sp, #12
 800c118:	4805      	ldr	r0, [pc, #20]	; (800c130 <fiprintf+0x20>)
 800c11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11e:	6800      	ldr	r0, [r0, #0]
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	f000 f883 	bl	800c22c <_vfiprintf_r>
 800c126:	b002      	add	sp, #8
 800c128:	f85d eb04 	ldr.w	lr, [sp], #4
 800c12c:	b003      	add	sp, #12
 800c12e:	4770      	bx	lr
 800c130:	2000000c 	.word	0x2000000c

0800c134 <memmove>:
 800c134:	4288      	cmp	r0, r1
 800c136:	b510      	push	{r4, lr}
 800c138:	eb01 0402 	add.w	r4, r1, r2
 800c13c:	d902      	bls.n	800c144 <memmove+0x10>
 800c13e:	4284      	cmp	r4, r0
 800c140:	4623      	mov	r3, r4
 800c142:	d807      	bhi.n	800c154 <memmove+0x20>
 800c144:	1e43      	subs	r3, r0, #1
 800c146:	42a1      	cmp	r1, r4
 800c148:	d008      	beq.n	800c15c <memmove+0x28>
 800c14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c152:	e7f8      	b.n	800c146 <memmove+0x12>
 800c154:	4601      	mov	r1, r0
 800c156:	4402      	add	r2, r0
 800c158:	428a      	cmp	r2, r1
 800c15a:	d100      	bne.n	800c15e <memmove+0x2a>
 800c15c:	bd10      	pop	{r4, pc}
 800c15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c166:	e7f7      	b.n	800c158 <memmove+0x24>

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__malloc_lock+0x8>)
 800c16a:	f000 bc0b 	b.w	800c984 <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	200006d4 	.word	0x200006d4

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__malloc_unlock+0x8>)
 800c176:	f000 bc06 	b.w	800c986 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	200006d4 	.word	0x200006d4

0800c180 <_realloc_r>:
 800c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	4680      	mov	r8, r0
 800c186:	4614      	mov	r4, r2
 800c188:	460e      	mov	r6, r1
 800c18a:	b921      	cbnz	r1, 800c196 <_realloc_r+0x16>
 800c18c:	4611      	mov	r1, r2
 800c18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c192:	f7ff bd97 	b.w	800bcc4 <_malloc_r>
 800c196:	b92a      	cbnz	r2, 800c1a4 <_realloc_r+0x24>
 800c198:	f7ff fd2c 	bl	800bbf4 <_free_r>
 800c19c:	4625      	mov	r5, r4
 800c19e:	4628      	mov	r0, r5
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	f000 fc56 	bl	800ca54 <_malloc_usable_size_r>
 800c1a8:	4284      	cmp	r4, r0
 800c1aa:	4607      	mov	r7, r0
 800c1ac:	d802      	bhi.n	800c1b4 <_realloc_r+0x34>
 800c1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1b2:	d812      	bhi.n	800c1da <_realloc_r+0x5a>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	f7ff fd84 	bl	800bcc4 <_malloc_r>
 800c1bc:	4605      	mov	r5, r0
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d0ed      	beq.n	800c19e <_realloc_r+0x1e>
 800c1c2:	42bc      	cmp	r4, r7
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	bf28      	it	cs
 800c1ca:	463a      	movcs	r2, r7
 800c1cc:	f7ff f838 	bl	800b240 <memcpy>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	f7ff fd0e 	bl	800bbf4 <_free_r>
 800c1d8:	e7e1      	b.n	800c19e <_realloc_r+0x1e>
 800c1da:	4635      	mov	r5, r6
 800c1dc:	e7df      	b.n	800c19e <_realloc_r+0x1e>

0800c1de <__sfputc_r>:
 800c1de:	6893      	ldr	r3, [r2, #8]
 800c1e0:	b410      	push	{r4}
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	6093      	str	r3, [r2, #8]
 800c1e8:	da07      	bge.n	800c1fa <__sfputc_r+0x1c>
 800c1ea:	6994      	ldr	r4, [r2, #24]
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	db01      	blt.n	800c1f4 <__sfputc_r+0x16>
 800c1f0:	290a      	cmp	r1, #10
 800c1f2:	d102      	bne.n	800c1fa <__sfputc_r+0x1c>
 800c1f4:	bc10      	pop	{r4}
 800c1f6:	f000 b949 	b.w	800c48c <__swbuf_r>
 800c1fa:	6813      	ldr	r3, [r2, #0]
 800c1fc:	1c58      	adds	r0, r3, #1
 800c1fe:	6010      	str	r0, [r2, #0]
 800c200:	7019      	strb	r1, [r3, #0]
 800c202:	4608      	mov	r0, r1
 800c204:	bc10      	pop	{r4}
 800c206:	4770      	bx	lr

0800c208 <__sfputs_r>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	4606      	mov	r6, r0
 800c20c:	460f      	mov	r7, r1
 800c20e:	4614      	mov	r4, r2
 800c210:	18d5      	adds	r5, r2, r3
 800c212:	42ac      	cmp	r4, r5
 800c214:	d101      	bne.n	800c21a <__sfputs_r+0x12>
 800c216:	2000      	movs	r0, #0
 800c218:	e007      	b.n	800c22a <__sfputs_r+0x22>
 800c21a:	463a      	mov	r2, r7
 800c21c:	4630      	mov	r0, r6
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	f7ff ffdc 	bl	800c1de <__sfputc_r>
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	d1f3      	bne.n	800c212 <__sfputs_r+0xa>
 800c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c22c <_vfiprintf_r>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	460d      	mov	r5, r1
 800c232:	4614      	mov	r4, r2
 800c234:	4698      	mov	r8, r3
 800c236:	4606      	mov	r6, r0
 800c238:	b09d      	sub	sp, #116	; 0x74
 800c23a:	b118      	cbz	r0, 800c244 <_vfiprintf_r+0x18>
 800c23c:	6983      	ldr	r3, [r0, #24]
 800c23e:	b90b      	cbnz	r3, 800c244 <_vfiprintf_r+0x18>
 800c240:	f000 fb02 	bl	800c848 <__sinit>
 800c244:	4b89      	ldr	r3, [pc, #548]	; (800c46c <_vfiprintf_r+0x240>)
 800c246:	429d      	cmp	r5, r3
 800c248:	d11b      	bne.n	800c282 <_vfiprintf_r+0x56>
 800c24a:	6875      	ldr	r5, [r6, #4]
 800c24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c24e:	07d9      	lsls	r1, r3, #31
 800c250:	d405      	bmi.n	800c25e <_vfiprintf_r+0x32>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	059a      	lsls	r2, r3, #22
 800c256:	d402      	bmi.n	800c25e <_vfiprintf_r+0x32>
 800c258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c25a:	f000 fb93 	bl	800c984 <__retarget_lock_acquire_recursive>
 800c25e:	89ab      	ldrh	r3, [r5, #12]
 800c260:	071b      	lsls	r3, r3, #28
 800c262:	d501      	bpl.n	800c268 <_vfiprintf_r+0x3c>
 800c264:	692b      	ldr	r3, [r5, #16]
 800c266:	b9eb      	cbnz	r3, 800c2a4 <_vfiprintf_r+0x78>
 800c268:	4629      	mov	r1, r5
 800c26a:	4630      	mov	r0, r6
 800c26c:	f000 f960 	bl	800c530 <__swsetup_r>
 800c270:	b1c0      	cbz	r0, 800c2a4 <_vfiprintf_r+0x78>
 800c272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c274:	07dc      	lsls	r4, r3, #31
 800c276:	d50e      	bpl.n	800c296 <_vfiprintf_r+0x6a>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	b01d      	add	sp, #116	; 0x74
 800c27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c282:	4b7b      	ldr	r3, [pc, #492]	; (800c470 <_vfiprintf_r+0x244>)
 800c284:	429d      	cmp	r5, r3
 800c286:	d101      	bne.n	800c28c <_vfiprintf_r+0x60>
 800c288:	68b5      	ldr	r5, [r6, #8]
 800c28a:	e7df      	b.n	800c24c <_vfiprintf_r+0x20>
 800c28c:	4b79      	ldr	r3, [pc, #484]	; (800c474 <_vfiprintf_r+0x248>)
 800c28e:	429d      	cmp	r5, r3
 800c290:	bf08      	it	eq
 800c292:	68f5      	ldreq	r5, [r6, #12]
 800c294:	e7da      	b.n	800c24c <_vfiprintf_r+0x20>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	0598      	lsls	r0, r3, #22
 800c29a:	d4ed      	bmi.n	800c278 <_vfiprintf_r+0x4c>
 800c29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c29e:	f000 fb72 	bl	800c986 <__retarget_lock_release_recursive>
 800c2a2:	e7e9      	b.n	800c278 <_vfiprintf_r+0x4c>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ae:	2330      	movs	r3, #48	; 0x30
 800c2b0:	f04f 0901 	mov.w	r9, #1
 800c2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c478 <_vfiprintf_r+0x24c>
 800c2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2c0:	4623      	mov	r3, r4
 800c2c2:	469a      	mov	sl, r3
 800c2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c8:	b10a      	cbz	r2, 800c2ce <_vfiprintf_r+0xa2>
 800c2ca:	2a25      	cmp	r2, #37	; 0x25
 800c2cc:	d1f9      	bne.n	800c2c2 <_vfiprintf_r+0x96>
 800c2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c2d2:	d00b      	beq.n	800c2ec <_vfiprintf_r+0xc0>
 800c2d4:	465b      	mov	r3, fp
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ff94 	bl	800c208 <__sfputs_r>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	f000 80aa 	beq.w	800c43a <_vfiprintf_r+0x20e>
 800c2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e8:	445a      	add	r2, fp
 800c2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80a2 	beq.w	800c43a <_vfiprintf_r+0x20e>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c300:	f10a 0a01 	add.w	sl, sl, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	9307      	str	r3, [sp, #28]
 800c308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c30c:	931a      	str	r3, [sp, #104]	; 0x68
 800c30e:	4654      	mov	r4, sl
 800c310:	2205      	movs	r2, #5
 800c312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c316:	4858      	ldr	r0, [pc, #352]	; (800c478 <_vfiprintf_r+0x24c>)
 800c318:	f7fe ff84 	bl	800b224 <memchr>
 800c31c:	9a04      	ldr	r2, [sp, #16]
 800c31e:	b9d8      	cbnz	r0, 800c358 <_vfiprintf_r+0x12c>
 800c320:	06d1      	lsls	r1, r2, #27
 800c322:	bf44      	itt	mi
 800c324:	2320      	movmi	r3, #32
 800c326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32a:	0713      	lsls	r3, r2, #28
 800c32c:	bf44      	itt	mi
 800c32e:	232b      	movmi	r3, #43	; 0x2b
 800c330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	2b2a      	cmp	r3, #42	; 0x2a
 800c33a:	d015      	beq.n	800c368 <_vfiprintf_r+0x13c>
 800c33c:	4654      	mov	r4, sl
 800c33e:	2000      	movs	r0, #0
 800c340:	f04f 0c0a 	mov.w	ip, #10
 800c344:	9a07      	ldr	r2, [sp, #28]
 800c346:	4621      	mov	r1, r4
 800c348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c34c:	3b30      	subs	r3, #48	; 0x30
 800c34e:	2b09      	cmp	r3, #9
 800c350:	d94e      	bls.n	800c3f0 <_vfiprintf_r+0x1c4>
 800c352:	b1b0      	cbz	r0, 800c382 <_vfiprintf_r+0x156>
 800c354:	9207      	str	r2, [sp, #28]
 800c356:	e014      	b.n	800c382 <_vfiprintf_r+0x156>
 800c358:	eba0 0308 	sub.w	r3, r0, r8
 800c35c:	fa09 f303 	lsl.w	r3, r9, r3
 800c360:	4313      	orrs	r3, r2
 800c362:	46a2      	mov	sl, r4
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	e7d2      	b.n	800c30e <_vfiprintf_r+0xe2>
 800c368:	9b03      	ldr	r3, [sp, #12]
 800c36a:	1d19      	adds	r1, r3, #4
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	9103      	str	r1, [sp, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	bfbb      	ittet	lt
 800c374:	425b      	neglt	r3, r3
 800c376:	f042 0202 	orrlt.w	r2, r2, #2
 800c37a:	9307      	strge	r3, [sp, #28]
 800c37c:	9307      	strlt	r3, [sp, #28]
 800c37e:	bfb8      	it	lt
 800c380:	9204      	strlt	r2, [sp, #16]
 800c382:	7823      	ldrb	r3, [r4, #0]
 800c384:	2b2e      	cmp	r3, #46	; 0x2e
 800c386:	d10c      	bne.n	800c3a2 <_vfiprintf_r+0x176>
 800c388:	7863      	ldrb	r3, [r4, #1]
 800c38a:	2b2a      	cmp	r3, #42	; 0x2a
 800c38c:	d135      	bne.n	800c3fa <_vfiprintf_r+0x1ce>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	3402      	adds	r4, #2
 800c392:	1d1a      	adds	r2, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	9203      	str	r2, [sp, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfb8      	it	lt
 800c39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c47c <_vfiprintf_r+0x250>
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	7821      	ldrb	r1, [r4, #0]
 800c3ac:	f7fe ff3a 	bl	800b224 <memchr>
 800c3b0:	b140      	cbz	r0, 800c3c4 <_vfiprintf_r+0x198>
 800c3b2:	2340      	movs	r3, #64	; 0x40
 800c3b4:	eba0 000a 	sub.w	r0, r0, sl
 800c3b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	3401      	adds	r4, #1
 800c3c0:	4303      	orrs	r3, r0
 800c3c2:	9304      	str	r3, [sp, #16]
 800c3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	482d      	ldr	r0, [pc, #180]	; (800c480 <_vfiprintf_r+0x254>)
 800c3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3d0:	f7fe ff28 	bl	800b224 <memchr>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d03f      	beq.n	800c458 <_vfiprintf_r+0x22c>
 800c3d8:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <_vfiprintf_r+0x258>)
 800c3da:	bb1b      	cbnz	r3, 800c424 <_vfiprintf_r+0x1f8>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	3307      	adds	r3, #7
 800c3e0:	f023 0307 	bic.w	r3, r3, #7
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	9303      	str	r3, [sp, #12]
 800c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ea:	443b      	add	r3, r7
 800c3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ee:	e767      	b.n	800c2c0 <_vfiprintf_r+0x94>
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f8:	e7a5      	b.n	800c346 <_vfiprintf_r+0x11a>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4619      	mov	r1, r3
 800c402:	3401      	adds	r4, #1
 800c404:	9305      	str	r3, [sp, #20]
 800c406:	4620      	mov	r0, r4
 800c408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c40c:	3a30      	subs	r2, #48	; 0x30
 800c40e:	2a09      	cmp	r2, #9
 800c410:	d903      	bls.n	800c41a <_vfiprintf_r+0x1ee>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0c5      	beq.n	800c3a2 <_vfiprintf_r+0x176>
 800c416:	9105      	str	r1, [sp, #20]
 800c418:	e7c3      	b.n	800c3a2 <_vfiprintf_r+0x176>
 800c41a:	4604      	mov	r4, r0
 800c41c:	2301      	movs	r3, #1
 800c41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c422:	e7f0      	b.n	800c406 <_vfiprintf_r+0x1da>
 800c424:	ab03      	add	r3, sp, #12
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	462a      	mov	r2, r5
 800c42a:	4630      	mov	r0, r6
 800c42c:	4b16      	ldr	r3, [pc, #88]	; (800c488 <_vfiprintf_r+0x25c>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	f7fc f876 	bl	8008520 <_printf_float>
 800c434:	4607      	mov	r7, r0
 800c436:	1c78      	adds	r0, r7, #1
 800c438:	d1d6      	bne.n	800c3e8 <_vfiprintf_r+0x1bc>
 800c43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c43c:	07d9      	lsls	r1, r3, #31
 800c43e:	d405      	bmi.n	800c44c <_vfiprintf_r+0x220>
 800c440:	89ab      	ldrh	r3, [r5, #12]
 800c442:	059a      	lsls	r2, r3, #22
 800c444:	d402      	bmi.n	800c44c <_vfiprintf_r+0x220>
 800c446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c448:	f000 fa9d 	bl	800c986 <__retarget_lock_release_recursive>
 800c44c:	89ab      	ldrh	r3, [r5, #12]
 800c44e:	065b      	lsls	r3, r3, #25
 800c450:	f53f af12 	bmi.w	800c278 <_vfiprintf_r+0x4c>
 800c454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c456:	e711      	b.n	800c27c <_vfiprintf_r+0x50>
 800c458:	ab03      	add	r3, sp, #12
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	462a      	mov	r2, r5
 800c45e:	4630      	mov	r0, r6
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <_vfiprintf_r+0x25c>)
 800c462:	a904      	add	r1, sp, #16
 800c464:	f7fc faf8 	bl	8008a58 <_printf_i>
 800c468:	e7e4      	b.n	800c434 <_vfiprintf_r+0x208>
 800c46a:	bf00      	nop
 800c46c:	0801dbf4 	.word	0x0801dbf4
 800c470:	0801dc14 	.word	0x0801dc14
 800c474:	0801dbd4 	.word	0x0801dbd4
 800c478:	0801db84 	.word	0x0801db84
 800c47c:	0801db8a 	.word	0x0801db8a
 800c480:	0801db8e 	.word	0x0801db8e
 800c484:	08008521 	.word	0x08008521
 800c488:	0800c209 	.word	0x0800c209

0800c48c <__swbuf_r>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	460e      	mov	r6, r1
 800c490:	4614      	mov	r4, r2
 800c492:	4605      	mov	r5, r0
 800c494:	b118      	cbz	r0, 800c49e <__swbuf_r+0x12>
 800c496:	6983      	ldr	r3, [r0, #24]
 800c498:	b90b      	cbnz	r3, 800c49e <__swbuf_r+0x12>
 800c49a:	f000 f9d5 	bl	800c848 <__sinit>
 800c49e:	4b21      	ldr	r3, [pc, #132]	; (800c524 <__swbuf_r+0x98>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d12b      	bne.n	800c4fc <__swbuf_r+0x70>
 800c4a4:	686c      	ldr	r4, [r5, #4]
 800c4a6:	69a3      	ldr	r3, [r4, #24]
 800c4a8:	60a3      	str	r3, [r4, #8]
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	071a      	lsls	r2, r3, #28
 800c4ae:	d52f      	bpl.n	800c510 <__swbuf_r+0x84>
 800c4b0:	6923      	ldr	r3, [r4, #16]
 800c4b2:	b36b      	cbz	r3, 800c510 <__swbuf_r+0x84>
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	6820      	ldr	r0, [r4, #0]
 800c4b8:	b2f6      	uxtb	r6, r6
 800c4ba:	1ac0      	subs	r0, r0, r3
 800c4bc:	6963      	ldr	r3, [r4, #20]
 800c4be:	4637      	mov	r7, r6
 800c4c0:	4283      	cmp	r3, r0
 800c4c2:	dc04      	bgt.n	800c4ce <__swbuf_r+0x42>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f000 f92a 	bl	800c720 <_fflush_r>
 800c4cc:	bb30      	cbnz	r0, 800c51c <__swbuf_r+0x90>
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	60a3      	str	r3, [r4, #8]
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	701e      	strb	r6, [r3, #0]
 800c4de:	6963      	ldr	r3, [r4, #20]
 800c4e0:	4283      	cmp	r3, r0
 800c4e2:	d004      	beq.n	800c4ee <__swbuf_r+0x62>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	07db      	lsls	r3, r3, #31
 800c4e8:	d506      	bpl.n	800c4f8 <__swbuf_r+0x6c>
 800c4ea:	2e0a      	cmp	r6, #10
 800c4ec:	d104      	bne.n	800c4f8 <__swbuf_r+0x6c>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f000 f915 	bl	800c720 <_fflush_r>
 800c4f6:	b988      	cbnz	r0, 800c51c <__swbuf_r+0x90>
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <__swbuf_r+0x9c>)
 800c4fe:	429c      	cmp	r4, r3
 800c500:	d101      	bne.n	800c506 <__swbuf_r+0x7a>
 800c502:	68ac      	ldr	r4, [r5, #8]
 800c504:	e7cf      	b.n	800c4a6 <__swbuf_r+0x1a>
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <__swbuf_r+0xa0>)
 800c508:	429c      	cmp	r4, r3
 800c50a:	bf08      	it	eq
 800c50c:	68ec      	ldreq	r4, [r5, #12]
 800c50e:	e7ca      	b.n	800c4a6 <__swbuf_r+0x1a>
 800c510:	4621      	mov	r1, r4
 800c512:	4628      	mov	r0, r5
 800c514:	f000 f80c 	bl	800c530 <__swsetup_r>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d0cb      	beq.n	800c4b4 <__swbuf_r+0x28>
 800c51c:	f04f 37ff 	mov.w	r7, #4294967295
 800c520:	e7ea      	b.n	800c4f8 <__swbuf_r+0x6c>
 800c522:	bf00      	nop
 800c524:	0801dbf4 	.word	0x0801dbf4
 800c528:	0801dc14 	.word	0x0801dc14
 800c52c:	0801dbd4 	.word	0x0801dbd4

0800c530 <__swsetup_r>:
 800c530:	4b32      	ldr	r3, [pc, #200]	; (800c5fc <__swsetup_r+0xcc>)
 800c532:	b570      	push	{r4, r5, r6, lr}
 800c534:	681d      	ldr	r5, [r3, #0]
 800c536:	4606      	mov	r6, r0
 800c538:	460c      	mov	r4, r1
 800c53a:	b125      	cbz	r5, 800c546 <__swsetup_r+0x16>
 800c53c:	69ab      	ldr	r3, [r5, #24]
 800c53e:	b913      	cbnz	r3, 800c546 <__swsetup_r+0x16>
 800c540:	4628      	mov	r0, r5
 800c542:	f000 f981 	bl	800c848 <__sinit>
 800c546:	4b2e      	ldr	r3, [pc, #184]	; (800c600 <__swsetup_r+0xd0>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	d10f      	bne.n	800c56c <__swsetup_r+0x3c>
 800c54c:	686c      	ldr	r4, [r5, #4]
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c554:	0719      	lsls	r1, r3, #28
 800c556:	d42c      	bmi.n	800c5b2 <__swsetup_r+0x82>
 800c558:	06dd      	lsls	r5, r3, #27
 800c55a:	d411      	bmi.n	800c580 <__swsetup_r+0x50>
 800c55c:	2309      	movs	r3, #9
 800c55e:	6033      	str	r3, [r6, #0]
 800c560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	e03e      	b.n	800c5ea <__swsetup_r+0xba>
 800c56c:	4b25      	ldr	r3, [pc, #148]	; (800c604 <__swsetup_r+0xd4>)
 800c56e:	429c      	cmp	r4, r3
 800c570:	d101      	bne.n	800c576 <__swsetup_r+0x46>
 800c572:	68ac      	ldr	r4, [r5, #8]
 800c574:	e7eb      	b.n	800c54e <__swsetup_r+0x1e>
 800c576:	4b24      	ldr	r3, [pc, #144]	; (800c608 <__swsetup_r+0xd8>)
 800c578:	429c      	cmp	r4, r3
 800c57a:	bf08      	it	eq
 800c57c:	68ec      	ldreq	r4, [r5, #12]
 800c57e:	e7e6      	b.n	800c54e <__swsetup_r+0x1e>
 800c580:	0758      	lsls	r0, r3, #29
 800c582:	d512      	bpl.n	800c5aa <__swsetup_r+0x7a>
 800c584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c586:	b141      	cbz	r1, 800c59a <__swsetup_r+0x6a>
 800c588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c58c:	4299      	cmp	r1, r3
 800c58e:	d002      	beq.n	800c596 <__swsetup_r+0x66>
 800c590:	4630      	mov	r0, r6
 800c592:	f7ff fb2f 	bl	800bbf4 <_free_r>
 800c596:	2300      	movs	r3, #0
 800c598:	6363      	str	r3, [r4, #52]	; 0x34
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5a0:	81a3      	strh	r3, [r4, #12]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	f043 0308 	orr.w	r3, r3, #8
 800c5b0:	81a3      	strh	r3, [r4, #12]
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	b94b      	cbnz	r3, 800c5ca <__swsetup_r+0x9a>
 800c5b6:	89a3      	ldrh	r3, [r4, #12]
 800c5b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5c0:	d003      	beq.n	800c5ca <__swsetup_r+0x9a>
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f000 fa05 	bl	800c9d4 <__smakebuf_r>
 800c5ca:	89a0      	ldrh	r0, [r4, #12]
 800c5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5d0:	f010 0301 	ands.w	r3, r0, #1
 800c5d4:	d00a      	beq.n	800c5ec <__swsetup_r+0xbc>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60a3      	str	r3, [r4, #8]
 800c5da:	6963      	ldr	r3, [r4, #20]
 800c5dc:	425b      	negs	r3, r3
 800c5de:	61a3      	str	r3, [r4, #24]
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	b943      	cbnz	r3, 800c5f6 <__swsetup_r+0xc6>
 800c5e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5e8:	d1ba      	bne.n	800c560 <__swsetup_r+0x30>
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}
 800c5ec:	0781      	lsls	r1, r0, #30
 800c5ee:	bf58      	it	pl
 800c5f0:	6963      	ldrpl	r3, [r4, #20]
 800c5f2:	60a3      	str	r3, [r4, #8]
 800c5f4:	e7f4      	b.n	800c5e0 <__swsetup_r+0xb0>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e7f7      	b.n	800c5ea <__swsetup_r+0xba>
 800c5fa:	bf00      	nop
 800c5fc:	2000000c 	.word	0x2000000c
 800c600:	0801dbf4 	.word	0x0801dbf4
 800c604:	0801dc14 	.word	0x0801dc14
 800c608:	0801dbd4 	.word	0x0801dbd4

0800c60c <abort>:
 800c60c:	2006      	movs	r0, #6
 800c60e:	b508      	push	{r3, lr}
 800c610:	f000 fa50 	bl	800cab4 <raise>
 800c614:	2001      	movs	r0, #1
 800c616:	f7f9 f82b 	bl	8005670 <_exit>
	...

0800c61c <__sflush_r>:
 800c61c:	898a      	ldrh	r2, [r1, #12]
 800c61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c620:	4605      	mov	r5, r0
 800c622:	0710      	lsls	r0, r2, #28
 800c624:	460c      	mov	r4, r1
 800c626:	d457      	bmi.n	800c6d8 <__sflush_r+0xbc>
 800c628:	684b      	ldr	r3, [r1, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dc04      	bgt.n	800c638 <__sflush_r+0x1c>
 800c62e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	dc01      	bgt.n	800c638 <__sflush_r+0x1c>
 800c634:	2000      	movs	r0, #0
 800c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	d0fa      	beq.n	800c634 <__sflush_r+0x18>
 800c63e:	2300      	movs	r3, #0
 800c640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c644:	682f      	ldr	r7, [r5, #0]
 800c646:	602b      	str	r3, [r5, #0]
 800c648:	d032      	beq.n	800c6b0 <__sflush_r+0x94>
 800c64a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	075a      	lsls	r2, r3, #29
 800c650:	d505      	bpl.n	800c65e <__sflush_r+0x42>
 800c652:	6863      	ldr	r3, [r4, #4]
 800c654:	1ac0      	subs	r0, r0, r3
 800c656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c658:	b10b      	cbz	r3, 800c65e <__sflush_r+0x42>
 800c65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c65c:	1ac0      	subs	r0, r0, r3
 800c65e:	2300      	movs	r3, #0
 800c660:	4602      	mov	r2, r0
 800c662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c664:	4628      	mov	r0, r5
 800c666:	6a21      	ldr	r1, [r4, #32]
 800c668:	47b0      	blx	r6
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	d106      	bne.n	800c67e <__sflush_r+0x62>
 800c670:	6829      	ldr	r1, [r5, #0]
 800c672:	291d      	cmp	r1, #29
 800c674:	d82c      	bhi.n	800c6d0 <__sflush_r+0xb4>
 800c676:	4a29      	ldr	r2, [pc, #164]	; (800c71c <__sflush_r+0x100>)
 800c678:	40ca      	lsrs	r2, r1
 800c67a:	07d6      	lsls	r6, r2, #31
 800c67c:	d528      	bpl.n	800c6d0 <__sflush_r+0xb4>
 800c67e:	2200      	movs	r2, #0
 800c680:	6062      	str	r2, [r4, #4]
 800c682:	6922      	ldr	r2, [r4, #16]
 800c684:	04d9      	lsls	r1, r3, #19
 800c686:	6022      	str	r2, [r4, #0]
 800c688:	d504      	bpl.n	800c694 <__sflush_r+0x78>
 800c68a:	1c42      	adds	r2, r0, #1
 800c68c:	d101      	bne.n	800c692 <__sflush_r+0x76>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	b903      	cbnz	r3, 800c694 <__sflush_r+0x78>
 800c692:	6560      	str	r0, [r4, #84]	; 0x54
 800c694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c696:	602f      	str	r7, [r5, #0]
 800c698:	2900      	cmp	r1, #0
 800c69a:	d0cb      	beq.n	800c634 <__sflush_r+0x18>
 800c69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6a0:	4299      	cmp	r1, r3
 800c6a2:	d002      	beq.n	800c6aa <__sflush_r+0x8e>
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f7ff faa5 	bl	800bbf4 <_free_r>
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c6ae:	e7c2      	b.n	800c636 <__sflush_r+0x1a>
 800c6b0:	6a21      	ldr	r1, [r4, #32]
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b0      	blx	r6
 800c6b8:	1c41      	adds	r1, r0, #1
 800c6ba:	d1c7      	bne.n	800c64c <__sflush_r+0x30>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0c4      	beq.n	800c64c <__sflush_r+0x30>
 800c6c2:	2b1d      	cmp	r3, #29
 800c6c4:	d001      	beq.n	800c6ca <__sflush_r+0xae>
 800c6c6:	2b16      	cmp	r3, #22
 800c6c8:	d101      	bne.n	800c6ce <__sflush_r+0xb2>
 800c6ca:	602f      	str	r7, [r5, #0]
 800c6cc:	e7b2      	b.n	800c634 <__sflush_r+0x18>
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	e7ae      	b.n	800c636 <__sflush_r+0x1a>
 800c6d8:	690f      	ldr	r7, [r1, #16]
 800c6da:	2f00      	cmp	r7, #0
 800c6dc:	d0aa      	beq.n	800c634 <__sflush_r+0x18>
 800c6de:	0793      	lsls	r3, r2, #30
 800c6e0:	bf18      	it	ne
 800c6e2:	2300      	movne	r3, #0
 800c6e4:	680e      	ldr	r6, [r1, #0]
 800c6e6:	bf08      	it	eq
 800c6e8:	694b      	ldreq	r3, [r1, #20]
 800c6ea:	1bf6      	subs	r6, r6, r7
 800c6ec:	600f      	str	r7, [r1, #0]
 800c6ee:	608b      	str	r3, [r1, #8]
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	dd9f      	ble.n	800c634 <__sflush_r+0x18>
 800c6f4:	4633      	mov	r3, r6
 800c6f6:	463a      	mov	r2, r7
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	6a21      	ldr	r1, [r4, #32]
 800c6fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c700:	47e0      	blx	ip
 800c702:	2800      	cmp	r0, #0
 800c704:	dc06      	bgt.n	800c714 <__sflush_r+0xf8>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	e790      	b.n	800c636 <__sflush_r+0x1a>
 800c714:	4407      	add	r7, r0
 800c716:	1a36      	subs	r6, r6, r0
 800c718:	e7ea      	b.n	800c6f0 <__sflush_r+0xd4>
 800c71a:	bf00      	nop
 800c71c:	20400001 	.word	0x20400001

0800c720 <_fflush_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	690b      	ldr	r3, [r1, #16]
 800c724:	4605      	mov	r5, r0
 800c726:	460c      	mov	r4, r1
 800c728:	b913      	cbnz	r3, 800c730 <_fflush_r+0x10>
 800c72a:	2500      	movs	r5, #0
 800c72c:	4628      	mov	r0, r5
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	b118      	cbz	r0, 800c73a <_fflush_r+0x1a>
 800c732:	6983      	ldr	r3, [r0, #24]
 800c734:	b90b      	cbnz	r3, 800c73a <_fflush_r+0x1a>
 800c736:	f000 f887 	bl	800c848 <__sinit>
 800c73a:	4b14      	ldr	r3, [pc, #80]	; (800c78c <_fflush_r+0x6c>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	d11b      	bne.n	800c778 <_fflush_r+0x58>
 800c740:	686c      	ldr	r4, [r5, #4]
 800c742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0ef      	beq.n	800c72a <_fflush_r+0xa>
 800c74a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c74c:	07d0      	lsls	r0, r2, #31
 800c74e:	d404      	bmi.n	800c75a <_fflush_r+0x3a>
 800c750:	0599      	lsls	r1, r3, #22
 800c752:	d402      	bmi.n	800c75a <_fflush_r+0x3a>
 800c754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c756:	f000 f915 	bl	800c984 <__retarget_lock_acquire_recursive>
 800c75a:	4628      	mov	r0, r5
 800c75c:	4621      	mov	r1, r4
 800c75e:	f7ff ff5d 	bl	800c61c <__sflush_r>
 800c762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c764:	4605      	mov	r5, r0
 800c766:	07da      	lsls	r2, r3, #31
 800c768:	d4e0      	bmi.n	800c72c <_fflush_r+0xc>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	059b      	lsls	r3, r3, #22
 800c76e:	d4dd      	bmi.n	800c72c <_fflush_r+0xc>
 800c770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c772:	f000 f908 	bl	800c986 <__retarget_lock_release_recursive>
 800c776:	e7d9      	b.n	800c72c <_fflush_r+0xc>
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <_fflush_r+0x70>)
 800c77a:	429c      	cmp	r4, r3
 800c77c:	d101      	bne.n	800c782 <_fflush_r+0x62>
 800c77e:	68ac      	ldr	r4, [r5, #8]
 800c780:	e7df      	b.n	800c742 <_fflush_r+0x22>
 800c782:	4b04      	ldr	r3, [pc, #16]	; (800c794 <_fflush_r+0x74>)
 800c784:	429c      	cmp	r4, r3
 800c786:	bf08      	it	eq
 800c788:	68ec      	ldreq	r4, [r5, #12]
 800c78a:	e7da      	b.n	800c742 <_fflush_r+0x22>
 800c78c:	0801dbf4 	.word	0x0801dbf4
 800c790:	0801dc14 	.word	0x0801dc14
 800c794:	0801dbd4 	.word	0x0801dbd4

0800c798 <std>:
 800c798:	2300      	movs	r3, #0
 800c79a:	b510      	push	{r4, lr}
 800c79c:	4604      	mov	r4, r0
 800c79e:	e9c0 3300 	strd	r3, r3, [r0]
 800c7a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7a6:	6083      	str	r3, [r0, #8]
 800c7a8:	8181      	strh	r1, [r0, #12]
 800c7aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c7ac:	81c2      	strh	r2, [r0, #14]
 800c7ae:	6183      	str	r3, [r0, #24]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	2208      	movs	r2, #8
 800c7b4:	305c      	adds	r0, #92	; 0x5c
 800c7b6:	f7fb fe0d 	bl	80083d4 <memset>
 800c7ba:	4b05      	ldr	r3, [pc, #20]	; (800c7d0 <std+0x38>)
 800c7bc:	6224      	str	r4, [r4, #32]
 800c7be:	6263      	str	r3, [r4, #36]	; 0x24
 800c7c0:	4b04      	ldr	r3, [pc, #16]	; (800c7d4 <std+0x3c>)
 800c7c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7c4:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <std+0x40>)
 800c7c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7c8:	4b04      	ldr	r3, [pc, #16]	; (800c7dc <std+0x44>)
 800c7ca:	6323      	str	r3, [r4, #48]	; 0x30
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800caed 	.word	0x0800caed
 800c7d4:	0800cb0f 	.word	0x0800cb0f
 800c7d8:	0800cb47 	.word	0x0800cb47
 800c7dc:	0800cb6b 	.word	0x0800cb6b

0800c7e0 <_cleanup_r>:
 800c7e0:	4901      	ldr	r1, [pc, #4]	; (800c7e8 <_cleanup_r+0x8>)
 800c7e2:	f000 b8af 	b.w	800c944 <_fwalk_reent>
 800c7e6:	bf00      	nop
 800c7e8:	0800c721 	.word	0x0800c721

0800c7ec <__sfmoreglue>:
 800c7ec:	2268      	movs	r2, #104	; 0x68
 800c7ee:	b570      	push	{r4, r5, r6, lr}
 800c7f0:	1e4d      	subs	r5, r1, #1
 800c7f2:	4355      	muls	r5, r2
 800c7f4:	460e      	mov	r6, r1
 800c7f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7fa:	f7ff fa63 	bl	800bcc4 <_malloc_r>
 800c7fe:	4604      	mov	r4, r0
 800c800:	b140      	cbz	r0, 800c814 <__sfmoreglue+0x28>
 800c802:	2100      	movs	r1, #0
 800c804:	e9c0 1600 	strd	r1, r6, [r0]
 800c808:	300c      	adds	r0, #12
 800c80a:	60a0      	str	r0, [r4, #8]
 800c80c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c810:	f7fb fde0 	bl	80083d4 <memset>
 800c814:	4620      	mov	r0, r4
 800c816:	bd70      	pop	{r4, r5, r6, pc}

0800c818 <__sfp_lock_acquire>:
 800c818:	4801      	ldr	r0, [pc, #4]	; (800c820 <__sfp_lock_acquire+0x8>)
 800c81a:	f000 b8b3 	b.w	800c984 <__retarget_lock_acquire_recursive>
 800c81e:	bf00      	nop
 800c820:	200006d5 	.word	0x200006d5

0800c824 <__sfp_lock_release>:
 800c824:	4801      	ldr	r0, [pc, #4]	; (800c82c <__sfp_lock_release+0x8>)
 800c826:	f000 b8ae 	b.w	800c986 <__retarget_lock_release_recursive>
 800c82a:	bf00      	nop
 800c82c:	200006d5 	.word	0x200006d5

0800c830 <__sinit_lock_acquire>:
 800c830:	4801      	ldr	r0, [pc, #4]	; (800c838 <__sinit_lock_acquire+0x8>)
 800c832:	f000 b8a7 	b.w	800c984 <__retarget_lock_acquire_recursive>
 800c836:	bf00      	nop
 800c838:	200006d6 	.word	0x200006d6

0800c83c <__sinit_lock_release>:
 800c83c:	4801      	ldr	r0, [pc, #4]	; (800c844 <__sinit_lock_release+0x8>)
 800c83e:	f000 b8a2 	b.w	800c986 <__retarget_lock_release_recursive>
 800c842:	bf00      	nop
 800c844:	200006d6 	.word	0x200006d6

0800c848 <__sinit>:
 800c848:	b510      	push	{r4, lr}
 800c84a:	4604      	mov	r4, r0
 800c84c:	f7ff fff0 	bl	800c830 <__sinit_lock_acquire>
 800c850:	69a3      	ldr	r3, [r4, #24]
 800c852:	b11b      	cbz	r3, 800c85c <__sinit+0x14>
 800c854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c858:	f7ff bff0 	b.w	800c83c <__sinit_lock_release>
 800c85c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c860:	6523      	str	r3, [r4, #80]	; 0x50
 800c862:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <__sinit+0x68>)
 800c864:	4a13      	ldr	r2, [pc, #76]	; (800c8b4 <__sinit+0x6c>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	62a2      	str	r2, [r4, #40]	; 0x28
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	bf08      	it	eq
 800c86e:	2301      	moveq	r3, #1
 800c870:	4620      	mov	r0, r4
 800c872:	bf08      	it	eq
 800c874:	61a3      	streq	r3, [r4, #24]
 800c876:	f000 f81f 	bl	800c8b8 <__sfp>
 800c87a:	6060      	str	r0, [r4, #4]
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 f81b 	bl	800c8b8 <__sfp>
 800c882:	60a0      	str	r0, [r4, #8]
 800c884:	4620      	mov	r0, r4
 800c886:	f000 f817 	bl	800c8b8 <__sfp>
 800c88a:	2200      	movs	r2, #0
 800c88c:	2104      	movs	r1, #4
 800c88e:	60e0      	str	r0, [r4, #12]
 800c890:	6860      	ldr	r0, [r4, #4]
 800c892:	f7ff ff81 	bl	800c798 <std>
 800c896:	2201      	movs	r2, #1
 800c898:	2109      	movs	r1, #9
 800c89a:	68a0      	ldr	r0, [r4, #8]
 800c89c:	f7ff ff7c 	bl	800c798 <std>
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	2112      	movs	r1, #18
 800c8a4:	68e0      	ldr	r0, [r4, #12]
 800c8a6:	f7ff ff77 	bl	800c798 <std>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	61a3      	str	r3, [r4, #24]
 800c8ae:	e7d1      	b.n	800c854 <__sinit+0xc>
 800c8b0:	0801d728 	.word	0x0801d728
 800c8b4:	0800c7e1 	.word	0x0800c7e1

0800c8b8 <__sfp>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	f7ff ffac 	bl	800c818 <__sfp_lock_acquire>
 800c8c0:	4b1e      	ldr	r3, [pc, #120]	; (800c93c <__sfp+0x84>)
 800c8c2:	681e      	ldr	r6, [r3, #0]
 800c8c4:	69b3      	ldr	r3, [r6, #24]
 800c8c6:	b913      	cbnz	r3, 800c8ce <__sfp+0x16>
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f7ff ffbd 	bl	800c848 <__sinit>
 800c8ce:	3648      	adds	r6, #72	; 0x48
 800c8d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	d503      	bpl.n	800c8e0 <__sfp+0x28>
 800c8d8:	6833      	ldr	r3, [r6, #0]
 800c8da:	b30b      	cbz	r3, 800c920 <__sfp+0x68>
 800c8dc:	6836      	ldr	r6, [r6, #0]
 800c8de:	e7f7      	b.n	800c8d0 <__sfp+0x18>
 800c8e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8e4:	b9d5      	cbnz	r5, 800c91c <__sfp+0x64>
 800c8e6:	4b16      	ldr	r3, [pc, #88]	; (800c940 <__sfp+0x88>)
 800c8e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8ec:	60e3      	str	r3, [r4, #12]
 800c8ee:	6665      	str	r5, [r4, #100]	; 0x64
 800c8f0:	f000 f847 	bl	800c982 <__retarget_lock_init_recursive>
 800c8f4:	f7ff ff96 	bl	800c824 <__sfp_lock_release>
 800c8f8:	2208      	movs	r2, #8
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c904:	6025      	str	r5, [r4, #0]
 800c906:	61a5      	str	r5, [r4, #24]
 800c908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c90c:	f7fb fd62 	bl	80083d4 <memset>
 800c910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c918:	4620      	mov	r0, r4
 800c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c91c:	3468      	adds	r4, #104	; 0x68
 800c91e:	e7d9      	b.n	800c8d4 <__sfp+0x1c>
 800c920:	2104      	movs	r1, #4
 800c922:	4638      	mov	r0, r7
 800c924:	f7ff ff62 	bl	800c7ec <__sfmoreglue>
 800c928:	4604      	mov	r4, r0
 800c92a:	6030      	str	r0, [r6, #0]
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d1d5      	bne.n	800c8dc <__sfp+0x24>
 800c930:	f7ff ff78 	bl	800c824 <__sfp_lock_release>
 800c934:	230c      	movs	r3, #12
 800c936:	603b      	str	r3, [r7, #0]
 800c938:	e7ee      	b.n	800c918 <__sfp+0x60>
 800c93a:	bf00      	nop
 800c93c:	0801d728 	.word	0x0801d728
 800c940:	ffff0001 	.word	0xffff0001

0800c944 <_fwalk_reent>:
 800c944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c948:	4606      	mov	r6, r0
 800c94a:	4688      	mov	r8, r1
 800c94c:	2700      	movs	r7, #0
 800c94e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c956:	f1b9 0901 	subs.w	r9, r9, #1
 800c95a:	d505      	bpl.n	800c968 <_fwalk_reent+0x24>
 800c95c:	6824      	ldr	r4, [r4, #0]
 800c95e:	2c00      	cmp	r4, #0
 800c960:	d1f7      	bne.n	800c952 <_fwalk_reent+0xe>
 800c962:	4638      	mov	r0, r7
 800c964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c968:	89ab      	ldrh	r3, [r5, #12]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d907      	bls.n	800c97e <_fwalk_reent+0x3a>
 800c96e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c972:	3301      	adds	r3, #1
 800c974:	d003      	beq.n	800c97e <_fwalk_reent+0x3a>
 800c976:	4629      	mov	r1, r5
 800c978:	4630      	mov	r0, r6
 800c97a:	47c0      	blx	r8
 800c97c:	4307      	orrs	r7, r0
 800c97e:	3568      	adds	r5, #104	; 0x68
 800c980:	e7e9      	b.n	800c956 <_fwalk_reent+0x12>

0800c982 <__retarget_lock_init_recursive>:
 800c982:	4770      	bx	lr

0800c984 <__retarget_lock_acquire_recursive>:
 800c984:	4770      	bx	lr

0800c986 <__retarget_lock_release_recursive>:
 800c986:	4770      	bx	lr

0800c988 <__swhatbuf_r>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	460e      	mov	r6, r1
 800c98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c990:	4614      	mov	r4, r2
 800c992:	2900      	cmp	r1, #0
 800c994:	461d      	mov	r5, r3
 800c996:	b096      	sub	sp, #88	; 0x58
 800c998:	da08      	bge.n	800c9ac <__swhatbuf_r+0x24>
 800c99a:	2200      	movs	r2, #0
 800c99c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	061a      	lsls	r2, r3, #24
 800c9a4:	d410      	bmi.n	800c9c8 <__swhatbuf_r+0x40>
 800c9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9aa:	e00e      	b.n	800c9ca <__swhatbuf_r+0x42>
 800c9ac:	466a      	mov	r2, sp
 800c9ae:	f000 f903 	bl	800cbb8 <_fstat_r>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	dbf1      	blt.n	800c99a <__swhatbuf_r+0x12>
 800c9b6:	9a01      	ldr	r2, [sp, #4]
 800c9b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9c0:	425a      	negs	r2, r3
 800c9c2:	415a      	adcs	r2, r3
 800c9c4:	602a      	str	r2, [r5, #0]
 800c9c6:	e7ee      	b.n	800c9a6 <__swhatbuf_r+0x1e>
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	b016      	add	sp, #88	; 0x58
 800c9d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9d4 <__smakebuf_r>:
 800c9d4:	898b      	ldrh	r3, [r1, #12]
 800c9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9d8:	079d      	lsls	r5, r3, #30
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460c      	mov	r4, r1
 800c9de:	d507      	bpl.n	800c9f0 <__smakebuf_r+0x1c>
 800c9e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	6123      	str	r3, [r4, #16]
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	6163      	str	r3, [r4, #20]
 800c9ec:	b002      	add	sp, #8
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}
 800c9f0:	466a      	mov	r2, sp
 800c9f2:	ab01      	add	r3, sp, #4
 800c9f4:	f7ff ffc8 	bl	800c988 <__swhatbuf_r>
 800c9f8:	9900      	ldr	r1, [sp, #0]
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff f961 	bl	800bcc4 <_malloc_r>
 800ca02:	b948      	cbnz	r0, 800ca18 <__smakebuf_r+0x44>
 800ca04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca08:	059a      	lsls	r2, r3, #22
 800ca0a:	d4ef      	bmi.n	800c9ec <__smakebuf_r+0x18>
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	f043 0302 	orr.w	r3, r3, #2
 800ca14:	81a3      	strh	r3, [r4, #12]
 800ca16:	e7e3      	b.n	800c9e0 <__smakebuf_r+0xc>
 800ca18:	4b0d      	ldr	r3, [pc, #52]	; (800ca50 <__smakebuf_r+0x7c>)
 800ca1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	6020      	str	r0, [r4, #0]
 800ca20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	9b00      	ldr	r3, [sp, #0]
 800ca28:	6120      	str	r0, [r4, #16]
 800ca2a:	6163      	str	r3, [r4, #20]
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	b15b      	cbz	r3, 800ca48 <__smakebuf_r+0x74>
 800ca30:	4630      	mov	r0, r6
 800ca32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca36:	f000 f8d1 	bl	800cbdc <_isatty_r>
 800ca3a:	b128      	cbz	r0, 800ca48 <__smakebuf_r+0x74>
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	f023 0303 	bic.w	r3, r3, #3
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	81a3      	strh	r3, [r4, #12]
 800ca48:	89a0      	ldrh	r0, [r4, #12]
 800ca4a:	4305      	orrs	r5, r0
 800ca4c:	81a5      	strh	r5, [r4, #12]
 800ca4e:	e7cd      	b.n	800c9ec <__smakebuf_r+0x18>
 800ca50:	0800c7e1 	.word	0x0800c7e1

0800ca54 <_malloc_usable_size_r>:
 800ca54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca58:	1f18      	subs	r0, r3, #4
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	bfbc      	itt	lt
 800ca5e:	580b      	ldrlt	r3, [r1, r0]
 800ca60:	18c0      	addlt	r0, r0, r3
 800ca62:	4770      	bx	lr

0800ca64 <_raise_r>:
 800ca64:	291f      	cmp	r1, #31
 800ca66:	b538      	push	{r3, r4, r5, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	d904      	bls.n	800ca78 <_raise_r+0x14>
 800ca6e:	2316      	movs	r3, #22
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	f04f 30ff 	mov.w	r0, #4294967295
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca7a:	b112      	cbz	r2, 800ca82 <_raise_r+0x1e>
 800ca7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca80:	b94b      	cbnz	r3, 800ca96 <_raise_r+0x32>
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 f830 	bl	800cae8 <_getpid_r>
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca92:	f000 b817 	b.w	800cac4 <_kill_r>
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d00a      	beq.n	800cab0 <_raise_r+0x4c>
 800ca9a:	1c59      	adds	r1, r3, #1
 800ca9c:	d103      	bne.n	800caa6 <_raise_r+0x42>
 800ca9e:	2316      	movs	r3, #22
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	2001      	movs	r0, #1
 800caa4:	e7e7      	b.n	800ca76 <_raise_r+0x12>
 800caa6:	2400      	movs	r4, #0
 800caa8:	4628      	mov	r0, r5
 800caaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caae:	4798      	blx	r3
 800cab0:	2000      	movs	r0, #0
 800cab2:	e7e0      	b.n	800ca76 <_raise_r+0x12>

0800cab4 <raise>:
 800cab4:	4b02      	ldr	r3, [pc, #8]	; (800cac0 <raise+0xc>)
 800cab6:	4601      	mov	r1, r0
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	f7ff bfd3 	b.w	800ca64 <_raise_r>
 800cabe:	bf00      	nop
 800cac0:	2000000c 	.word	0x2000000c

0800cac4 <_kill_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	2300      	movs	r3, #0
 800cac8:	4d06      	ldr	r5, [pc, #24]	; (800cae4 <_kill_r+0x20>)
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	4611      	mov	r1, r2
 800cad0:	602b      	str	r3, [r5, #0]
 800cad2:	f7f8 fdc3 	bl	800565c <_kill>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d102      	bne.n	800cae0 <_kill_r+0x1c>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	b103      	cbz	r3, 800cae0 <_kill_r+0x1c>
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	bd38      	pop	{r3, r4, r5, pc}
 800cae2:	bf00      	nop
 800cae4:	200006d0 	.word	0x200006d0

0800cae8 <_getpid_r>:
 800cae8:	f7f8 bdb6 	b.w	8005658 <_getpid>

0800caec <__sread>:
 800caec:	b510      	push	{r4, lr}
 800caee:	460c      	mov	r4, r1
 800caf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf4:	f000 f894 	bl	800cc20 <_read_r>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	bfab      	itete	ge
 800cafc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cafe:	89a3      	ldrhlt	r3, [r4, #12]
 800cb00:	181b      	addge	r3, r3, r0
 800cb02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb06:	bfac      	ite	ge
 800cb08:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb0a:	81a3      	strhlt	r3, [r4, #12]
 800cb0c:	bd10      	pop	{r4, pc}

0800cb0e <__swrite>:
 800cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	461f      	mov	r7, r3
 800cb14:	898b      	ldrh	r3, [r1, #12]
 800cb16:	4605      	mov	r5, r0
 800cb18:	05db      	lsls	r3, r3, #23
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	4616      	mov	r6, r2
 800cb1e:	d505      	bpl.n	800cb2c <__swrite+0x1e>
 800cb20:	2302      	movs	r3, #2
 800cb22:	2200      	movs	r2, #0
 800cb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb28:	f000 f868 	bl	800cbfc <_lseek_r>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	4632      	mov	r2, r6
 800cb30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	4628      	mov	r0, r5
 800cb38:	463b      	mov	r3, r7
 800cb3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb42:	f000 b817 	b.w	800cb74 <_write_r>

0800cb46 <__sseek>:
 800cb46:	b510      	push	{r4, lr}
 800cb48:	460c      	mov	r4, r1
 800cb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb4e:	f000 f855 	bl	800cbfc <_lseek_r>
 800cb52:	1c43      	adds	r3, r0, #1
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	bf15      	itete	ne
 800cb58:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb62:	81a3      	strheq	r3, [r4, #12]
 800cb64:	bf18      	it	ne
 800cb66:	81a3      	strhne	r3, [r4, #12]
 800cb68:	bd10      	pop	{r4, pc}

0800cb6a <__sclose>:
 800cb6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6e:	f000 b813 	b.w	800cb98 <_close_r>
	...

0800cb74 <_write_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	4608      	mov	r0, r1
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4d05      	ldr	r5, [pc, #20]	; (800cb94 <_write_r+0x20>)
 800cb80:	602a      	str	r2, [r5, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	f7f8 fd88 	bl	8005698 <_write>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_write_r+0x1e>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_write_r+0x1e>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	200006d0 	.word	0x200006d0

0800cb98 <_close_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4d05      	ldr	r5, [pc, #20]	; (800cbb4 <_close_r+0x1c>)
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	602b      	str	r3, [r5, #0]
 800cba4:	f7f8 fd86 	bl	80056b4 <_close>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d102      	bne.n	800cbb2 <_close_r+0x1a>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b103      	cbz	r3, 800cbb2 <_close_r+0x1a>
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	200006d0 	.word	0x200006d0

0800cbb8 <_fstat_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	2300      	movs	r3, #0
 800cbbc:	4d06      	ldr	r5, [pc, #24]	; (800cbd8 <_fstat_r+0x20>)
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	f7f8 fd79 	bl	80056bc <_fstat>
 800cbca:	1c43      	adds	r3, r0, #1
 800cbcc:	d102      	bne.n	800cbd4 <_fstat_r+0x1c>
 800cbce:	682b      	ldr	r3, [r5, #0]
 800cbd0:	b103      	cbz	r3, 800cbd4 <_fstat_r+0x1c>
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	bf00      	nop
 800cbd8:	200006d0 	.word	0x200006d0

0800cbdc <_isatty_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	2300      	movs	r3, #0
 800cbe0:	4d05      	ldr	r5, [pc, #20]	; (800cbf8 <_isatty_r+0x1c>)
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	602b      	str	r3, [r5, #0]
 800cbe8:	f7f8 fd6e 	bl	80056c8 <_isatty>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	d102      	bne.n	800cbf6 <_isatty_r+0x1a>
 800cbf0:	682b      	ldr	r3, [r5, #0]
 800cbf2:	b103      	cbz	r3, 800cbf6 <_isatty_r+0x1a>
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	bd38      	pop	{r3, r4, r5, pc}
 800cbf8:	200006d0 	.word	0x200006d0

0800cbfc <_lseek_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	4611      	mov	r1, r2
 800cc04:	2200      	movs	r2, #0
 800cc06:	4d05      	ldr	r5, [pc, #20]	; (800cc1c <_lseek_r+0x20>)
 800cc08:	602a      	str	r2, [r5, #0]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f7f8 fd5e 	bl	80056cc <_lseek>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d102      	bne.n	800cc1a <_lseek_r+0x1e>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	b103      	cbz	r3, 800cc1a <_lseek_r+0x1e>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	200006d0 	.word	0x200006d0

0800cc20 <_read_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	4611      	mov	r1, r2
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4d05      	ldr	r5, [pc, #20]	; (800cc40 <_read_r+0x20>)
 800cc2c:	602a      	str	r2, [r5, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f7f8 fd24 	bl	800567c <_read>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d102      	bne.n	800cc3e <_read_r+0x1e>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	b103      	cbz	r3, 800cc3e <_read_r+0x1e>
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	200006d0 	.word	0x200006d0
 800cc44:	00000000 	.word	0x00000000

0800cc48 <floor>:
 800cc48:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800cc52:	2d13      	cmp	r5, #19
 800cc54:	460b      	mov	r3, r1
 800cc56:	4684      	mov	ip, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	dc30      	bgt.n	800ccc0 <floor+0x78>
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	db1e      	blt.n	800cca0 <floor+0x58>
 800cc62:	4f35      	ldr	r7, [pc, #212]	; (800cd38 <floor+0xf0>)
 800cc64:	412f      	asrs	r7, r5
 800cc66:	ea01 0207 	and.w	r2, r1, r7
 800cc6a:	4302      	orrs	r2, r0
 800cc6c:	d015      	beq.n	800cc9a <floor+0x52>
 800cc6e:	a330      	add	r3, pc, #192	; (adr r3, 800cd30 <floor+0xe8>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f8 fd62 	bl	800573c <__adddf3>
 800cc78:	2200      	movs	r2, #0
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f7f9 f9a4 	bl	8005fc8 <__aeabi_dcmpgt>
 800cc80:	b148      	cbz	r0, 800cc96 <floor+0x4e>
 800cc82:	2c00      	cmp	r4, #0
 800cc84:	da04      	bge.n	800cc90 <floor+0x48>
 800cc86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cc8a:	fa43 f505 	asr.w	r5, r3, r5
 800cc8e:	442c      	add	r4, r5
 800cc90:	2600      	movs	r6, #0
 800cc92:	ea24 0407 	bic.w	r4, r4, r7
 800cc96:	4623      	mov	r3, r4
 800cc98:	46b4      	mov	ip, r6
 800cc9a:	4660      	mov	r0, ip
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca0:	a323      	add	r3, pc, #140	; (adr r3, 800cd30 <floor+0xe8>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f8 fd49 	bl	800573c <__adddf3>
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2300      	movs	r3, #0
 800ccae:	f7f9 f98b 	bl	8005fc8 <__aeabi_dcmpgt>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d0ef      	beq.n	800cc96 <floor+0x4e>
 800ccb6:	2c00      	cmp	r4, #0
 800ccb8:	db24      	blt.n	800cd04 <floor+0xbc>
 800ccba:	2600      	movs	r6, #0
 800ccbc:	4634      	mov	r4, r6
 800ccbe:	e7ea      	b.n	800cc96 <floor+0x4e>
 800ccc0:	2d33      	cmp	r5, #51	; 0x33
 800ccc2:	dd08      	ble.n	800ccd6 <floor+0x8e>
 800ccc4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ccc8:	d1e7      	bne.n	800cc9a <floor+0x52>
 800ccca:	4602      	mov	r2, r0
 800cccc:	f7f8 fd36 	bl	800573c <__adddf3>
 800ccd0:	4684      	mov	ip, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	e7e1      	b.n	800cc9a <floor+0x52>
 800ccd6:	f04f 37ff 	mov.w	r7, #4294967295
 800ccda:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ccde:	40d7      	lsrs	r7, r2
 800cce0:	4207      	tst	r7, r0
 800cce2:	d0da      	beq.n	800cc9a <floor+0x52>
 800cce4:	a312      	add	r3, pc, #72	; (adr r3, 800cd30 <floor+0xe8>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f8 fd27 	bl	800573c <__adddf3>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f7f9 f969 	bl	8005fc8 <__aeabi_dcmpgt>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d0cd      	beq.n	800cc96 <floor+0x4e>
 800ccfa:	2c00      	cmp	r4, #0
 800ccfc:	db0b      	blt.n	800cd16 <floor+0xce>
 800ccfe:	ea26 0607 	bic.w	r6, r6, r7
 800cd02:	e7c8      	b.n	800cc96 <floor+0x4e>
 800cd04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cd08:	4a0c      	ldr	r2, [pc, #48]	; (800cd3c <floor+0xf4>)
 800cd0a:	431e      	orrs	r6, r3
 800cd0c:	2e00      	cmp	r6, #0
 800cd0e:	bf18      	it	ne
 800cd10:	4614      	movne	r4, r2
 800cd12:	2600      	movs	r6, #0
 800cd14:	e7bf      	b.n	800cc96 <floor+0x4e>
 800cd16:	2d14      	cmp	r5, #20
 800cd18:	d008      	beq.n	800cd2c <floor+0xe4>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800cd20:	fa03 f505 	lsl.w	r5, r3, r5
 800cd24:	19ae      	adds	r6, r5, r6
 800cd26:	bf28      	it	cs
 800cd28:	18e4      	addcs	r4, r4, r3
 800cd2a:	e7e8      	b.n	800ccfe <floor+0xb6>
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	e7e6      	b.n	800ccfe <floor+0xb6>
 800cd30:	8800759c 	.word	0x8800759c
 800cd34:	7e37e43c 	.word	0x7e37e43c
 800cd38:	000fffff 	.word	0x000fffff
 800cd3c:	bff00000 	.word	0xbff00000

0800cd40 <_init>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	bf00      	nop
 800cd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd46:	bc08      	pop	{r3}
 800cd48:	469e      	mov	lr, r3
 800cd4a:	4770      	bx	lr

0800cd4c <_fini>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	bf00      	nop
 800cd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd52:	bc08      	pop	{r3}
 800cd54:	469e      	mov	lr, r3
 800cd56:	4770      	bx	lr
