
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011de4  08008c98  08008c98  00018c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa7c  0801aa7c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801aa7c  0801aa7c  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801aa7c  0801aa7c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa7c  0801aa7c  0002aa7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa80  0801aa80  0002aa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801aa84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  200001e0  0801ac64  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  0801ac64  000308f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c4  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  000403cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004a0e  00000000  00000000  000420cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00046ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  00046b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae3e  00000000  00000000  00047d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f92  00000000  00000000  00052b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000dbae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d08  00000000  00000000  000dbb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018e9b  00000000  00000000  000dd83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c80 	.word	0x08008c80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008c80 	.word	0x08008c80

08000150 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000150:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000152:	bf14      	ite	ne
 8000154:	2302      	movne	r3, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000156:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800015a:	4a30      	ldr	r2, [pc, #192]	; (800021c <LCD_Bus+0xcc>)
 800015c:	6113      	str	r3, [r2, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800015e:	0443      	lsls	r3, r0, #17
    GPIOx->BSRR = GPIO_Pin;
 8000160:	bf4c      	ite	mi
 8000162:	2301      	movmi	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000164:	f44f 3380 	movpl.w	r3, #65536	; 0x10000
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000168:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    GPIOx->BSRR = GPIO_Pin;
 800016c:	bf14      	ite	ne
 800016e:	2108      	movne	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000170:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8000174:	6113      	str	r3, [r2, #16]
 8000176:	4b2a      	ldr	r3, [pc, #168]	; (8000220 <LCD_Bus+0xd0>)
 8000178:	6119      	str	r1, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800017a:	04c1      	lsls	r1, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800017c:	bf4c      	ite	mi
 800017e:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000180:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 8000184:	6119      	str	r1, [r3, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000186:	0501      	lsls	r1, r0, #20
    GPIOx->BSRR = GPIO_Pin;
 8000188:	bf4c      	ite	mi
 800018a:	2102      	movmi	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800018c:	f44f 3100 	movpl.w	r1, #131072	; 0x20000
 8000190:	6119      	str	r1, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000192:	0541      	lsls	r1, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000194:	bf4c      	ite	mi
 8000196:	2101      	movmi	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000198:	f44f 3180 	movpl.w	r1, #65536	; 0x10000
 800019c:	6119      	str	r1, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800019e:	0581      	lsls	r1, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001a0:	bf4c      	ite	mi
 80001a2:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a6:	f04f 4100 	movpl.w	r1, #2147483648	; 0x80000000
 80001aa:	6119      	str	r1, [r3, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001ac:	05c1      	lsls	r1, r0, #23
    GPIOx->BSRR = GPIO_Pin;
 80001ae:	bf4c      	ite	mi
 80001b0:	f44f 4180 	movmi.w	r1, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b4:	f04f 4180 	movpl.w	r1, #1073741824	; 0x40000000
 80001b8:	6119      	str	r1, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001ba:	0601      	lsls	r1, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001bc:	bf4c      	ite	mi
 80001be:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 80001c4:	6111      	str	r1, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001c6:	0641      	lsls	r1, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 80001d0:	6111      	str	r1, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001d2:	0681      	lsls	r1, r0, #26
    GPIOx->BSRR = GPIO_Pin;
 80001d4:	bf4c      	ite	mi
 80001d6:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 80001dc:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001de:	06c1      	lsls	r1, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80001e0:	bf4c      	ite	mi
 80001e2:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 80001e8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001ea:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001ec:	bf4c      	ite	mi
 80001ee:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 80001f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001f6:	0741      	lsls	r1, r0, #29
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000200:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000202:	0781      	lsls	r1, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800020c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800020e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000210:	bf4c      	ite	mi
 8000212:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000214:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000218:	611a      	str	r2, [r3, #16]
}
 800021a:	4770      	bx	lr
 800021c:	40010800 	.word	0x40010800
 8000220:	40011000 	.word	0x40011000

08000224 <LCD_Send_Cmd>:
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	4c08      	ldr	r4, [pc, #32]	; (800024c <LCD_Send_Cmd+0x28>)
 800022c:	6123      	str	r3, [r4, #16]
 800022e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000232:	6123      	str	r3, [r4, #16]
	LCD_RS_R
	LCD_CS_R
	LCD_Bus(cmd);
 8000234:	f7ff ff8c 	bl	8000150 <LCD_Bus>
 8000238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800023c:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800023e:	2302      	movs	r3, #2
 8000240:	6123      	str	r3, [r4, #16]
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	6123      	str	r3, [r4, #16]
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <LCD_Send_Dat>:
 8000250:	2301      	movs	r3, #1

inline static void LCD_Send_Dat(uint16_t dat)
{
 8000252:	b510      	push	{r4, lr}
 8000254:	4c07      	ldr	r4, [pc, #28]	; (8000274 <LCD_Send_Dat+0x24>)
 8000256:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800025c:	6123      	str	r3, [r4, #16]
	LCD_RS_S
	LCD_CS_R	
	LCD_Bus(dat);
 800025e:	f7ff ff77 	bl	8000150 <LCD_Bus>
 8000262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000266:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000268:	2302      	movs	r3, #2
 800026a:	6123      	str	r3, [r4, #16]
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	6123      	str	r3, [r4, #16]
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000272:	bd10      	pop	{r4, pc}
 8000274:	40010c00 	.word	0x40010c00

08000278 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000278:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	4680      	mov	r8, r0
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800027e:	f108 35ff 	add.w	r5, r8, #4294967295
 8000282:	1e48      	subs	r0, r1, #1
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000284:	fb03 f702 	mul.w	r7, r3, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000288:	442a      	add	r2, r5
 800028a:	4403      	add	r3, r0
 800028c:	b295      	uxth	r5, r2
	data[0] = x1 >> 8;
 800028e:	0a0a      	lsrs	r2, r1, #8
 8000290:	f88d 2004 	strb.w	r2, [sp, #4]
	LCD_Send_Cmd(HX8357_CASET);
 8000294:	202a      	movs	r0, #42	; 0x2a
  data[2] = x2 >> 8;
 8000296:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800029a:	f10d 0904 	add.w	r9, sp, #4
{
 800029e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  data[1] = x1 & 0xFF;
 80002a0:	f88d 1005 	strb.w	r1, [sp, #5]
  data[2] = x2 >> 8;
 80002a4:	f88d 2006 	strb.w	r2, [sp, #6]
  data[3] = x2 & 0xFF;
 80002a8:	f88d 3007 	strb.w	r3, [sp, #7]
	LCD_Send_Cmd(HX8357_CASET);
 80002ac:	46ca      	mov	sl, r9
 80002ae:	f7ff ffb9 	bl	8000224 <LCD_Send_Cmd>
 80002b2:	2404      	movs	r4, #4
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002b4:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80002b8:	3c01      	subs	r4, #1
 80002ba:	f7ff ffc9 	bl	8000250 <LCD_Send_Dat>
 80002be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002c2:	d1f7      	bne.n	80002b4 <LCD_Rect_Fill+0x3c>
	data[0] = y1 >> 8;
 80002c4:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80002c8:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_Send_Cmd(HX8357_PASET);
 80002cc:	202b      	movs	r0, #43	; 0x2b
  data[2] = y2 >> 8;
 80002ce:	0a2b      	lsrs	r3, r5, #8
  data[1] = y1;
 80002d0:	f88d 8005 	strb.w	r8, [sp, #5]
  data[2] = y2 >> 8;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = y2;
 80002d8:	f88d 5007 	strb.w	r5, [sp, #7]
	LCD_Send_Cmd(HX8357_PASET);
 80002dc:	f7ff ffa2 	bl	8000224 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002e0:	3401      	adds	r4, #1
 80002e2:	f819 0b01 	ldrb.w	r0, [r9], #1
 80002e6:	b2e4      	uxtb	r4, r4
 80002e8:	f7ff ffb2 	bl	8000250 <LCD_Send_Dat>
 80002ec:	2c04      	cmp	r4, #4
 80002ee:	d1f7      	bne.n	80002e0 <LCD_Rect_Fill+0x68>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80002f0:	2400      	movs	r4, #0
  LCD_Send_Cmd(HX83h7_RAMWR);
 80002f2:	202c      	movs	r0, #44	; 0x2c
 80002f4:	f7ff ff96 	bl	8000224 <LCD_Send_Cmd>
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80002f8:	f3c6 2085 	ubfx	r0, r6, #10, #6
 80002fc:	f3c6 43c4 	ubfx	r3, r6, #19, #5
 8000300:	0140      	lsls	r0, r0, #5
 8000302:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000306:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800030a:	4330      	orrs	r0, r6
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800030c:	42bc      	cmp	r4, r7
 800030e:	d102      	bne.n	8000316 <LCD_Rect_Fill+0x9e>
}
 8000310:	b002      	add	sp, #8
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000316:	f7ff ff9b 	bl	8000250 <LCD_Send_Dat>
 800031a:	3401      	adds	r4, #1
 800031c:	e7f6      	b.n	800030c <LCD_Rect_Fill+0x94>

0800031e <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_Delay+0x12>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000320:	3001      	adds	r0, #1
  return uwTick;
 8000322:	6811      	ldr	r1, [r2, #0]
 8000324:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000326:	1a5b      	subs	r3, r3, r1
 8000328:	4283      	cmp	r3, r0
 800032a:	d3fb      	bcc.n	8000324 <HAL_Delay+0x6>
  {
  }
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000200 	.word	0x20000200

08000334 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000334:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000336:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000338:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800033a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800033c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800033e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000340:	4095      	lsls	r5, r2
 8000342:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000344:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000346:	d032      	beq.n	80003ae <HAL_DMA_IRQHandler+0x7a>
 8000348:	074d      	lsls	r5, r1, #29
 800034a:	d530      	bpl.n	80003ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000350:	bf5e      	ittt	pl
 8000352:	681a      	ldrpl	r2, [r3, #0]
 8000354:	f022 0204 	bicpl.w	r2, r2, #4
 8000358:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800035a:	4a3d      	ldr	r2, [pc, #244]	; (8000450 <HAL_DMA_IRQHandler+0x11c>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d019      	beq.n	8000394 <HAL_DMA_IRQHandler+0x60>
 8000360:	3214      	adds	r2, #20
 8000362:	4293      	cmp	r3, r2
 8000364:	d018      	beq.n	8000398 <HAL_DMA_IRQHandler+0x64>
 8000366:	3214      	adds	r2, #20
 8000368:	4293      	cmp	r3, r2
 800036a:	d017      	beq.n	800039c <HAL_DMA_IRQHandler+0x68>
 800036c:	3214      	adds	r2, #20
 800036e:	4293      	cmp	r3, r2
 8000370:	d017      	beq.n	80003a2 <HAL_DMA_IRQHandler+0x6e>
 8000372:	3214      	adds	r2, #20
 8000374:	4293      	cmp	r3, r2
 8000376:	d017      	beq.n	80003a8 <HAL_DMA_IRQHandler+0x74>
 8000378:	3214      	adds	r2, #20
 800037a:	4293      	cmp	r3, r2
 800037c:	bf0c      	ite	eq
 800037e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000382:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000386:	4a33      	ldr	r2, [pc, #204]	; (8000454 <HAL_DMA_IRQHandler+0x120>)
 8000388:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800038a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 800038c:	2b00      	cmp	r3, #0
 800038e:	d05c      	beq.n	800044a <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000390:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000392:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000394:	2304      	movs	r3, #4
 8000396:	e7f6      	b.n	8000386 <HAL_DMA_IRQHandler+0x52>
 8000398:	2340      	movs	r3, #64	; 0x40
 800039a:	e7f4      	b.n	8000386 <HAL_DMA_IRQHandler+0x52>
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	e7f1      	b.n	8000386 <HAL_DMA_IRQHandler+0x52>
 80003a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003a6:	e7ee      	b.n	8000386 <HAL_DMA_IRQHandler+0x52>
 80003a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80003ac:	e7eb      	b.n	8000386 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80003ae:	2502      	movs	r5, #2
 80003b0:	4095      	lsls	r5, r2
 80003b2:	4225      	tst	r5, r4
 80003b4:	d035      	beq.n	8000422 <HAL_DMA_IRQHandler+0xee>
 80003b6:	078d      	lsls	r5, r1, #30
 80003b8:	d533      	bpl.n	8000422 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	0694      	lsls	r4, r2, #26
 80003be:	d406      	bmi.n	80003ce <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	f022 020a 	bic.w	r2, r2, #10
 80003c6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80003c8:	2201      	movs	r2, #1
 80003ca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80003ce:	4a20      	ldr	r2, [pc, #128]	; (8000450 <HAL_DMA_IRQHandler+0x11c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d019      	beq.n	8000408 <HAL_DMA_IRQHandler+0xd4>
 80003d4:	3214      	adds	r2, #20
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d018      	beq.n	800040c <HAL_DMA_IRQHandler+0xd8>
 80003da:	3214      	adds	r2, #20
 80003dc:	4293      	cmp	r3, r2
 80003de:	d017      	beq.n	8000410 <HAL_DMA_IRQHandler+0xdc>
 80003e0:	3214      	adds	r2, #20
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d017      	beq.n	8000416 <HAL_DMA_IRQHandler+0xe2>
 80003e6:	3214      	adds	r2, #20
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d017      	beq.n	800041c <HAL_DMA_IRQHandler+0xe8>
 80003ec:	3214      	adds	r2, #20
 80003ee:	4293      	cmp	r3, r2
 80003f0:	bf0c      	ite	eq
 80003f2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80003f6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80003fa:	4a16      	ldr	r2, [pc, #88]	; (8000454 <HAL_DMA_IRQHandler+0x120>)
 80003fc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80003fe:	2300      	movs	r3, #0
 8000400:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000404:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000406:	e7c1      	b.n	800038c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000408:	2302      	movs	r3, #2
 800040a:	e7f6      	b.n	80003fa <HAL_DMA_IRQHandler+0xc6>
 800040c:	2320      	movs	r3, #32
 800040e:	e7f4      	b.n	80003fa <HAL_DMA_IRQHandler+0xc6>
 8000410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000414:	e7f1      	b.n	80003fa <HAL_DMA_IRQHandler+0xc6>
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	e7ee      	b.n	80003fa <HAL_DMA_IRQHandler+0xc6>
 800041c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000420:	e7eb      	b.n	80003fa <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000422:	2508      	movs	r5, #8
 8000424:	4095      	lsls	r5, r2
 8000426:	4225      	tst	r5, r4
 8000428:	d00f      	beq.n	800044a <HAL_DMA_IRQHandler+0x116>
 800042a:	0709      	lsls	r1, r1, #28
 800042c:	d50d      	bpl.n	800044a <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800042e:	6819      	ldr	r1, [r3, #0]
 8000430:	f021 010e 	bic.w	r1, r1, #14
 8000434:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000436:	2301      	movs	r3, #1
 8000438:	fa03 f202 	lsl.w	r2, r3, r2
 800043c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800043e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000444:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000446:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000448:	e7a0      	b.n	800038c <HAL_DMA_IRQHandler+0x58>
}
 800044a:	bc70      	pop	{r4, r5, r6}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40020008 	.word	0x40020008
 8000454:	40020000 	.word	0x40020000

08000458 <HAL_GPIO_Init>:
{
 8000458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 800045c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800045e:	4616      	mov	r6, r2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000460:	4f64      	ldr	r7, [pc, #400]	; (80005f4 <HAL_GPIO_Init+0x19c>)
 8000462:	4b65      	ldr	r3, [pc, #404]	; (80005f8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000464:	f8df c194 	ldr.w	ip, [pc, #404]	; 80005fc <HAL_GPIO_Init+0x1a4>
 8000468:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000600 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800046c:	680d      	ldr	r5, [r1, #0]
 800046e:	fa35 f406 	lsrs.w	r4, r5, r6
 8000472:	d102      	bne.n	800047a <HAL_GPIO_Init+0x22>
}
 8000474:	b003      	add	sp, #12
 8000476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800047a:	f04f 0801 	mov.w	r8, #1
 800047e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000482:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000486:	ea38 0505 	bics.w	r5, r8, r5
 800048a:	d17b      	bne.n	8000584 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800048c:	684d      	ldr	r5, [r1, #4]
 800048e:	2d03      	cmp	r5, #3
 8000490:	d807      	bhi.n	80004a2 <HAL_GPIO_Init+0x4a>
 8000492:	3d01      	subs	r5, #1
 8000494:	2d02      	cmp	r5, #2
 8000496:	f200 8088 	bhi.w	80005aa <HAL_GPIO_Init+0x152>
 800049a:	e8df f005 	tbb	[pc, r5]
 800049e:	9b96      	.short	0x9b96
 80004a0:	a1          	.byte	0xa1
 80004a1:	00          	.byte	0x00
 80004a2:	2d12      	cmp	r5, #18
 80004a4:	f000 8099 	beq.w	80005da <HAL_GPIO_Init+0x182>
 80004a8:	d86e      	bhi.n	8000588 <HAL_GPIO_Init+0x130>
 80004aa:	2d11      	cmp	r5, #17
 80004ac:	f000 808f 	beq.w	80005ce <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	bf98      	it	ls
 80004b4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004b6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004ba:	bf88      	it	hi
 80004bc:	f100 0a04 	addhi.w	sl, r0, #4
 80004c0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004c4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004c8:	bf88      	it	hi
 80004ca:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004cc:	fa09 fb05 	lsl.w	fp, r9, r5
 80004d0:	ea28 080b 	bic.w	r8, r8, fp
 80004d4:	fa02 f505 	lsl.w	r5, r2, r5
 80004d8:	ea48 0505 	orr.w	r5, r8, r5
 80004dc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80004e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80004e8:	d04c      	beq.n	8000584 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	69bd      	ldr	r5, [r7, #24]
 80004ec:	f026 0803 	bic.w	r8, r6, #3
 80004f0:	f045 0501 	orr.w	r5, r5, #1
 80004f4:	61bd      	str	r5, [r7, #24]
 80004f6:	69bd      	ldr	r5, [r7, #24]
 80004f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80004fc:	f005 0501 	and.w	r5, r5, #1
 8000500:	9501      	str	r5, [sp, #4]
 8000502:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000506:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800050c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000510:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000514:	fa09 f90b 	lsl.w	r9, r9, fp
 8000518:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800051c:	4d39      	ldr	r5, [pc, #228]	; (8000604 <HAL_GPIO_Init+0x1ac>)
 800051e:	42a8      	cmp	r0, r5
 8000520:	d062      	beq.n	80005e8 <HAL_GPIO_Init+0x190>
 8000522:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000526:	42a8      	cmp	r0, r5
 8000528:	d060      	beq.n	80005ec <HAL_GPIO_Init+0x194>
 800052a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800052e:	42a8      	cmp	r0, r5
 8000530:	d05e      	beq.n	80005f0 <HAL_GPIO_Init+0x198>
 8000532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000536:	42a8      	cmp	r0, r5
 8000538:	bf0c      	ite	eq
 800053a:	2503      	moveq	r5, #3
 800053c:	2504      	movne	r5, #4
 800053e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000542:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000546:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800054a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800054c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000550:	bf14      	ite	ne
 8000552:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000554:	43a5      	biceq	r5, r4
 8000556:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000558:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800055a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800055e:	bf14      	ite	ne
 8000560:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000562:	43a5      	biceq	r5, r4
 8000564:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000566:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000568:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800056c:	bf14      	ite	ne
 800056e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000570:	43a5      	biceq	r5, r4
 8000572:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000574:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000576:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800057a:	bf14      	ite	ne
 800057c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800057e:	ea25 0404 	biceq.w	r4, r5, r4
 8000582:	60dc      	str	r4, [r3, #12]
	position++;
 8000584:	3601      	adds	r6, #1
 8000586:	e771      	b.n	800046c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000588:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000608 <HAL_GPIO_Init+0x1b0>
 800058c:	454d      	cmp	r5, r9
 800058e:	d00c      	beq.n	80005aa <HAL_GPIO_Init+0x152>
 8000590:	d817      	bhi.n	80005c2 <HAL_GPIO_Init+0x16a>
 8000592:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000596:	454d      	cmp	r5, r9
 8000598:	d007      	beq.n	80005aa <HAL_GPIO_Init+0x152>
 800059a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800059e:	454d      	cmp	r5, r9
 80005a0:	d003      	beq.n	80005aa <HAL_GPIO_Init+0x152>
 80005a2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80005a6:	454d      	cmp	r5, r9
 80005a8:	d182      	bne.n	80004b0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005aa:	688a      	ldr	r2, [r1, #8]
 80005ac:	b1d2      	cbz	r2, 80005e4 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005ae:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80005b0:	bf08      	it	eq
 80005b2:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005b6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80005ba:	bf18      	it	ne
 80005bc:	f8c0 8014 	strne.w	r8, [r0, #20]
 80005c0:	e776      	b.n	80004b0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80005c2:	4565      	cmp	r5, ip
 80005c4:	d0f1      	beq.n	80005aa <HAL_GPIO_Init+0x152>
 80005c6:	4575      	cmp	r5, lr
 80005c8:	e7ee      	b.n	80005a8 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005ca:	68ca      	ldr	r2, [r1, #12]
          break;
 80005cc:	e770      	b.n	80004b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005ce:	68ca      	ldr	r2, [r1, #12]
 80005d0:	3204      	adds	r2, #4
          break;
 80005d2:	e76d      	b.n	80004b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005d4:	68ca      	ldr	r2, [r1, #12]
 80005d6:	3208      	adds	r2, #8
          break;
 80005d8:	e76a      	b.n	80004b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005da:	68ca      	ldr	r2, [r1, #12]
 80005dc:	320c      	adds	r2, #12
          break;
 80005de:	e767      	b.n	80004b0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80005e0:	2200      	movs	r2, #0
 80005e2:	e765      	b.n	80004b0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005e4:	2204      	movs	r2, #4
 80005e6:	e763      	b.n	80004b0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005e8:	2500      	movs	r5, #0
 80005ea:	e7a8      	b.n	800053e <HAL_GPIO_Init+0xe6>
 80005ec:	2501      	movs	r5, #1
 80005ee:	e7a6      	b.n	800053e <HAL_GPIO_Init+0xe6>
 80005f0:	2502      	movs	r5, #2
 80005f2:	e7a4      	b.n	800053e <HAL_GPIO_Init+0xe6>
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010400 	.word	0x40010400
 80005fc:	10310000 	.word	0x10310000
 8000600:	10320000 	.word	0x10320000
 8000604:	40010800 	.word	0x40010800
 8000608:	10220000 	.word	0x10220000

0800060c <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800060c:	4770      	bx	lr

0800060e <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800060e:	6803      	ldr	r3, [r0, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f013 0320 	ands.w	r3, r3, #32
 8000616:	d10a      	bne.n	800062e <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000618:	6a42      	ldr	r2, [r0, #36]	; 0x24
    huart->TxXferCount = 0x00U;
 800061a:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000624:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	4770      	bx	lr

08000630 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000630:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000636:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 800063a:	2821      	cmp	r0, #33	; 0x21
 800063c:	d10a      	bne.n	8000654 <UART_DMAError+0x24>
 800063e:	0608      	lsls	r0, r1, #24
 8000640:	d508      	bpl.n	8000654 <UART_DMAError+0x24>
  {
    huart->TxXferCount = 0x00U;
 8000642:	2100      	movs	r1, #0
 8000644:	84d9      	strh	r1, [r3, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000646:	68d1      	ldr	r1, [r2, #12]
 8000648:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800064c:	60d1      	str	r1, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800064e:	2120      	movs	r1, #32
 8000650:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000654:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000656:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 800065a:	2822      	cmp	r0, #34	; 0x22
 800065c:	d117      	bne.n	800068e <UART_DMAError+0x5e>
 800065e:	0649      	lsls	r1, r1, #25
 8000660:	d515      	bpl.n	800068e <UART_DMAError+0x5e>
    huart->RxXferCount = 0x00U;
 8000662:	2100      	movs	r1, #0
 8000664:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000666:	68d1      	ldr	r1, [r2, #12]
 8000668:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800066c:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800066e:	6951      	ldr	r1, [r2, #20]
 8000670:	f021 0101 	bic.w	r1, r1, #1
 8000674:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000678:	2901      	cmp	r1, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800067a:	bf02      	ittt	eq
 800067c:	68d1      	ldreq	r1, [r2, #12]
 800067e:	f021 0110 	biceq.w	r1, r1, #16
 8000682:	60d1      	streq	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000684:	2220      	movs	r2, #32
 8000686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800068a:	2200      	movs	r2, #0
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800068e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000690:	f042 0210 	orr.w	r2, r2, #16
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000696:	4770      	bx	lr

08000698 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000698:	b510      	push	{r4, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x40>)
 800069c:	6853      	ldr	r3, [r2, #4]
 800069e:	681c      	ldr	r4, [r3, #0]
 80006a0:	ea30 0404 	bics.w	r4, r0, r4
 80006a4:	d101      	bne.n	80006aa <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 80006a6:	2000      	movs	r0, #0
 80006a8:	e014      	b.n	80006d4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x3c>
  return uwTick;
 80006aa:	6814      	ldr	r4, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006ac:	1a64      	subs	r4, r4, r1
 80006ae:	2c64      	cmp	r4, #100	; 0x64
 80006b0:	d9f5      	bls.n	800069e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80006b2:	68d9      	ldr	r1, [r3, #12]
        __HAL_UNLOCK(huart);
 80006b4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80006b6:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80006ba:	60d9      	str	r1, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80006bc:	6959      	ldr	r1, [r3, #20]
 80006be:	f021 0101 	bic.w	r1, r1, #1
 80006c2:	6159      	str	r1, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80006c4:	2320      	movs	r3, #32
 80006c6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80006ca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        __HAL_UNLOCK(huart);
 80006ce:	2300      	movs	r3, #0
 80006d0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	20000200 	.word	0x20000200

080006dc <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 80006de:	b510      	push	{r4, lr}
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	2c04      	cmp	r4, #4
 80006ee:	bf28      	it	cs
 80006f0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	2a06      	cmp	r2, #6
 80006f4:	bf88      	it	hi
 80006f6:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fc:	bf98      	it	ls
 80006fe:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	40a3      	lsls	r3, r4
 8000702:	ea21 0303 	bic.w	r3, r1, r3
 8000706:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000708:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	bf14      	ite	ne
 800070c:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	4a05      	ldreq	r2, [pc, #20]	; (8000728 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	bf1a      	itte	ne
 800071a:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 800071e:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000726:	bd10      	pop	{r4, pc}
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 800072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000730:	461e      	mov	r6, r3
 8000732:	b089      	sub	sp, #36	; 0x24
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8000734:	f1c1 0301 	rsb	r3, r1, #1
 8000738:	9303      	str	r3, [sp, #12]
 800073a:	2300      	movs	r3, #0
	b_ = radius;
 800073c:	468b      	mov	fp, r1
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 800073e:	9004      	str	r0, [sp, #16]
 8000740:	9207      	str	r2, [sp, #28]
	P = 1 - radius;
 8000742:	9302      	str	r3, [sp, #8]
 8000744:	9b04      	ldr	r3, [sp, #16]
 8000746:	f8bd 5008 	ldrh.w	r5, [sp, #8]
	while (a_ <= b_)
	{
		if (fill == 1)
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800074a:	fa1f f48b 	uxth.w	r4, fp
 800074e:	eba3 0805 	sub.w	r8, r3, r5
 8000752:	eba3 0a04 	sub.w	sl, r3, r4
		if (fill == 1)
 8000756:	9b07      	ldr	r3, [sp, #28]
 8000758:	f1c5 09ac 	rsb	r9, r5, #172	; 0xac
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800075c:	f1c4 07ac 	rsb	r7, r4, #172	; 0xac
		if (fill == 1)
 8000760:	2b01      	cmp	r3, #1
 8000762:	fa1f f989 	uxth.w	r9, r9
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000766:	b2bf      	uxth	r7, r7
 8000768:	fa1f f888 	uxth.w	r8, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800076c:	fa1f fa8a 	uxth.w	sl, sl
		if (fill == 1)
 8000770:	d123      	bne.n	80007ba <LCD_Circle.constprop.0+0x8e>
 8000772:	006d      	lsls	r5, r5, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000774:	0064      	lsls	r4, r4, #1
 8000776:	3501      	adds	r5, #1
 8000778:	3401      	adds	r4, #1
 800077a:	b2ad      	uxth	r5, r5
 800077c:	b2a4      	uxth	r4, r4
 800077e:	4623      	mov	r3, r4
 8000780:	462a      	mov	r2, r5
 8000782:	4651      	mov	r1, sl
 8000784:	4648      	mov	r0, r9
 8000786:	9600      	str	r6, [sp, #0]
 8000788:	f7ff fd76 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800078c:	462b      	mov	r3, r5
 800078e:	4622      	mov	r2, r4
 8000790:	9600      	str	r6, [sp, #0]
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000792:	4641      	mov	r1, r8
 8000794:	4638      	mov	r0, r7
 8000796:	f7ff fd6f 	bl	8000278 <LCD_Rect_Fill>
		}
		if (P < 0)
 800079a:	9b03      	ldr	r3, [sp, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	da4e      	bge.n	800083e <LCD_Circle.constprop.0+0x112>
		{
			P = (P + 3) + (2 * a_);
 80007a0:	9a02      	ldr	r2, [sp, #8]
 80007a2:	3303      	adds	r3, #3
 80007a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80007a8:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 80007aa:	9b02      	ldr	r3, [sp, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	455b      	cmp	r3, fp
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	ddc7      	ble.n	8000744 <LCD_Circle.constprop.0+0x18>
			P = (P + 5) + (2 * (a_ - b_));
			a_++;
			b_--;
		}
	}
}
 80007b4:	b009      	add	sp, #36	; 0x24
 80007b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ba:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 80007be:	b29b      	uxth	r3, r3
 80007c0:	9305      	str	r3, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80007c2:	9b04      	ldr	r3, [sp, #16]
 80007c4:	9600      	str	r6, [sp, #0]
 80007c6:	4423      	add	r3, r4
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	9306      	str	r3, [sp, #24]
 80007cc:	2301      	movs	r3, #1
 80007ce:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80007d2:	461a      	mov	r2, r3
 80007d4:	f7ff fd50 	bl	8000278 <LCD_Rect_Fill>
 80007d8:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80007da:	34ac      	adds	r4, #172	; 0xac
 80007dc:	441d      	add	r5, r3
 80007de:	2301      	movs	r3, #1
 80007e0:	b2a4      	uxth	r4, r4
 80007e2:	b2ad      	uxth	r5, r5
 80007e4:	461a      	mov	r2, r3
 80007e6:	4629      	mov	r1, r5
 80007e8:	4620      	mov	r0, r4
 80007ea:	9600      	str	r6, [sp, #0]
 80007ec:	f7ff fd44 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80007f0:	2301      	movs	r3, #1
 80007f2:	4648      	mov	r0, r9
 80007f4:	461a      	mov	r2, r3
 80007f6:	9906      	ldr	r1, [sp, #24]
 80007f8:	9600      	str	r6, [sp, #0]
 80007fa:	f7ff fd3d 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 80007fe:	2301      	movs	r3, #1
 8000800:	4629      	mov	r1, r5
 8000802:	461a      	mov	r2, r3
 8000804:	4638      	mov	r0, r7
 8000806:	9600      	str	r6, [sp, #0]
 8000808:	f7ff fd36 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800080c:	2301      	movs	r3, #1
 800080e:	4641      	mov	r1, r8
 8000810:	461a      	mov	r2, r3
 8000812:	4620      	mov	r0, r4
 8000814:	9600      	str	r6, [sp, #0]
 8000816:	f7ff fd2f 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800081a:	2301      	movs	r3, #1
 800081c:	4651      	mov	r1, sl
 800081e:	461a      	mov	r2, r3
 8000820:	9805      	ldr	r0, [sp, #20]
 8000822:	9600      	str	r6, [sp, #0]
 8000824:	f7ff fd28 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8000828:	2301      	movs	r3, #1
 800082a:	4651      	mov	r1, sl
 800082c:	461a      	mov	r2, r3
 800082e:	4648      	mov	r0, r9
 8000830:	9600      	str	r6, [sp, #0]
 8000832:	f7ff fd21 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000836:	2301      	movs	r3, #1
 8000838:	9600      	str	r6, [sp, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	e7a9      	b.n	8000792 <LCD_Circle.constprop.0+0x66>
			P = (P + 5) + (2 * (a_ - b_));
 800083e:	9b03      	ldr	r3, [sp, #12]
 8000840:	9a02      	ldr	r2, [sp, #8]
 8000842:	3305      	adds	r3, #5
 8000844:	eba2 020b 	sub.w	r2, r2, fp
 8000848:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800084c:	9303      	str	r3, [sp, #12]
			b_--;
 800084e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8000852:	e7aa      	b.n	80007aa <LCD_Circle.constprop.0+0x7e>

08000854 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int deltaX = abs(x2 - x1);
 8000858:	1a15      	subs	r5, r2, r0
	int deltaY = abs(y2 - y1);
 800085a:	1a5e      	subs	r6, r3, r1
	int deltaX = abs(x2 - x1);
 800085c:	2d00      	cmp	r5, #0
 800085e:	bfb8      	it	lt
 8000860:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 8000862:	2e00      	cmp	r6, #0
 8000864:	bfb8      	it	lt
 8000866:	4276      	neglt	r6, r6
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000868:	4617      	mov	r7, r2
 800086a:	4698      	mov	r8, r3
	int signX = x1 < x2 ? 1 : -1;
 800086c:	4282      	cmp	r2, r0
 800086e:	bf8c      	ite	hi
 8000870:	f04f 0a01 	movhi.w	sl, #1
 8000874:	f04f 3aff 	movls.w	sl, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8000878:	428b      	cmp	r3, r1
 800087a:	bf8c      	ite	hi
 800087c:	f04f 0901 	movhi.w	r9, #1
 8000880:	f04f 39ff 	movls.w	r9, #4294967295
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000884:	b085      	sub	sp, #20
	int error = deltaX - deltaY;
 8000886:	1bac      	subs	r4, r5, r6
		if (error2 > -deltaY)
 8000888:	f1c6 0b00 	rsb	fp, r6, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800088c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800088e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	461a      	mov	r2, r3
 8000898:	f7ff fcee 	bl	8000278 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800089c:	9802      	ldr	r0, [sp, #8]
 800089e:	9903      	ldr	r1, [sp, #12]
 80008a0:	4287      	cmp	r7, r0
 80008a2:	d101      	bne.n	80008a8 <LCD_Line.constprop.0+0x54>
 80008a4:	4588      	cmp	r8, r1
 80008a6:	d00d      	beq.n	80008c4 <LCD_Line.constprop.0+0x70>
		if (error2 > -deltaY)
 80008a8:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
		error2 = error * 2;
 80008ac:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
 80008b0:	bfbe      	ittt	lt
 80008b2:	4450      	addlt	r0, sl
			error -= deltaY;
 80008b4:	1ba4      	sublt	r4, r4, r6
			x1 += signX;
 80008b6:	b280      	uxthlt	r0, r0
		if (error2 < deltaX)
 80008b8:	429d      	cmp	r5, r3
 80008ba:	dde7      	ble.n	800088c <LCD_Line.constprop.0+0x38>
			y1 += signY;
 80008bc:	4449      	add	r1, r9
			error += deltaX;
 80008be:	442c      	add	r4, r5
			y1 += signY;
 80008c0:	b289      	uxth	r1, r1
 80008c2:	e7e3      	b.n	800088c <LCD_Line.constprop.0+0x38>
}
 80008c4:	b005      	add	sp, #20
 80008c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008ca <LCD_Rect.constprop.0>:
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80008ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 80008cc:	23be      	movs	r3, #190	; 0xbe
 80008ce:	26ff      	movs	r6, #255	; 0xff
 80008d0:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 80008d4:	b2a4      	uxth	r4, r4
 80008d6:	4622      	mov	r2, r4
 80008d8:	4619      	mov	r1, r3
 80008da:	9600      	str	r6, [sp, #0]
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80008dc:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 80008de:	f7ff ffb9 	bl	8000854 <LCD_Line.constprop.0>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80008e2:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80008e6:	4622      	mov	r2, r4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4628      	mov	r0, r5
 80008ec:	9600      	str	r6, [sp, #0]
 80008ee:	f7ff ffb1 	bl	8000854 <LCD_Line.constprop.0>
	LCD_Line(x, y, x, y + h, size, color24);
 80008f2:	462a      	mov	r2, r5
 80008f4:	4628      	mov	r0, r5
 80008f6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80008fa:	21be      	movs	r1, #190	; 0xbe
 80008fc:	9600      	str	r6, [sp, #0]
 80008fe:	f7ff ffa9 	bl	8000854 <LCD_Line.constprop.0>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8000902:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000906:	4622      	mov	r2, r4
 8000908:	21be      	movs	r1, #190	; 0xbe
 800090a:	4620      	mov	r0, r4
 800090c:	9600      	str	r6, [sp, #0]
 800090e:	f7ff ffa1 	bl	8000854 <LCD_Line.constprop.0>
}
 8000912:	b002      	add	sp, #8
 8000914:	bd70      	pop	{r4, r5, r6, pc}

08000916 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x62>)
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000918:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800091a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800091c:	6962      	ldr	r2, [r4, #20]
 800091e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000922:	d001      	beq.n	8000928 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x12>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e013      	b.n	8000950 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000928:	6961      	ldr	r1, [r4, #20]
 800092a:	f011 0110 	ands.w	r1, r1, #16
 800092e:	d010      	beq.n	8000952 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000930:	f06f 0110 	mvn.w	r1, #16
 8000934:	6161      	str	r1, [r4, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000936:	2120      	movs	r1, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000938:	679a      	str	r2, [r3, #120]	; 0x78
      hi2c->State               = HAL_I2C_STATE_READY;
 800093a:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800093e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000942:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
      __HAL_UNLOCK(hi2c);
 8000946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800094a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
      return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
}
 8000950:	bd10      	pop	{r4, pc}
 8000952:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000954:	1a12      	subs	r2, r2, r0
 8000956:	2a64      	cmp	r2, #100	; 0x64
 8000958:	d9e0      	bls.n	800091c <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x6>
      hi2c->State               = HAL_I2C_STATE_READY;
 800095a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800095c:	6799      	str	r1, [r3, #120]	; 0x78
      hi2c->State               = HAL_I2C_STATE_READY;
 800095e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000962:	f883 1086 	strb.w	r1, [r3, #134]	; 0x86
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
      __HAL_UNLOCK(hi2c);
 800096a:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800096e:	f042 0220 	orr.w	r2, r2, #32
 8000972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000976:	e7ea      	b.n	800094e <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x38>
 8000978:	20000200 	.word	0x20000200

0800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800097e:	4d13      	ldr	r5, [pc, #76]	; (80009cc <I2C_WaitOnFlagUntilTimeout.constprop.0+0x50>)
 8000980:	0c07      	lsrs	r7, r0, #16
 8000982:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8000984:	2f01      	cmp	r7, #1
 8000986:	bf0c      	ite	eq
 8000988:	6974      	ldreq	r4, [r6, #20]
 800098a:	69b4      	ldrne	r4, [r6, #24]
 800098c:	ea20 0404 	bic.w	r4, r0, r4
 8000990:	b2a4      	uxth	r4, r4
 8000992:	fab4 f484 	clz	r4, r4
 8000996:	0964      	lsrs	r4, r4, #5
 8000998:	42a1      	cmp	r1, r4
 800099a:	d001      	beq.n	80009a0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
  return HAL_OK;
 800099c:	2000      	movs	r0, #0
 800099e:	e013      	b.n	80009c8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4c>
 80009a0:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009a2:	1ae4      	subs	r4, r4, r3
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d2ed      	bcs.n	8000984 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80009a8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80009aa:	2220      	movs	r2, #32
        return HAL_ERROR;
 80009ac:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80009ae:	67ab      	str	r3, [r5, #120]	; 0x78
        hi2c->State             = HAL_I2C_STATE_READY;
 80009b0:	f885 2085 	strb.w	r2, [r5, #133]	; 0x85
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80009b4:	f885 3086 	strb.w	r3, [r5, #134]	; 0x86
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80009b8:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 80009bc:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80009c0:	f042 0220 	orr.w	r2, r2, #32
 80009c4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
}
 80009c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000200 	.word	0x20000200

080009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80009d0:	b530      	push	{r4, r5, lr}
 80009d2:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x68>)
 80009d6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80009d8:	6960      	ldr	r0, [r4, #20]
 80009da:	ea25 0000 	bic.w	r0, r5, r0
 80009de:	b280      	uxth	r0, r0
 80009e0:	b1d0      	cbz	r0, 8000a18 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009e2:	6962      	ldr	r2, [r4, #20]
 80009e4:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80009e8:	d017      	beq.n	8000a1a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009ea:	6822      	ldr	r2, [r4, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80009ec:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009f2:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80009f8:	6162      	str	r2, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009fa:	2200      	movs	r2, #0
 80009fc:	679a      	str	r2, [r3, #120]	; 0x78
      hi2c->State               = HAL_I2C_STATE_READY;
 80009fe:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a02:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a06:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8000a0a:	f041 0104 	orr.w	r1, r1, #4
        return HAL_ERROR;
 8000a0e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a10:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 8000a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8000a18:	bd30      	pop	{r4, r5, pc}
 8000a1a:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a1c:	1a40      	subs	r0, r0, r1
 8000a1e:	2864      	cmp	r0, #100	; 0x64
 8000a20:	d9da      	bls.n	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000a22:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000a24:	679a      	str	r2, [r3, #120]	; 0x78
        hi2c->State               = HAL_I2C_STATE_READY;
 8000a26:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a2a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a2e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8000a32:	f041 0120 	orr.w	r1, r1, #32
 8000a36:	e7ea      	b.n	8000a0e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x3e>
 8000a38:	20000200 	.word	0x20000200

08000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x68>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000a3e:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a40:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000a42:	6962      	ldr	r2, [r4, #20]
 8000a44:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8000a48:	d001      	beq.n	8000a4e <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	e028      	b.n	8000aa0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x64>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a4e:	6961      	ldr	r1, [r4, #20]
 8000a50:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000a54:	d112      	bne.n	8000a7c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x40>
 8000a56:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a58:	1a12      	subs	r2, r2, r0
 8000a5a:	2a64      	cmp	r2, #100	; 0x64
 8000a5c:	d9f1      	bls.n	8000a42 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000a5e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000a60:	6799      	str	r1, [r3, #120]	; 0x78
        hi2c->State               = HAL_I2C_STATE_READY;
 8000a62:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a66:	f883 1086 	strb.w	r1, [r3, #134]	; 0x86
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 8000a6e:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a72:	f042 0220 	orr.w	r2, r2, #32
 8000a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000a7a:	e010      	b.n	8000a9e <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x62>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a7c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000a80:	6161      	str	r1, [r4, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000a82:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000a84:	679a      	str	r2, [r3, #120]	; 0x78
    hi2c->State               = HAL_I2C_STATE_READY;
 8000a86:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a8a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a8e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a96:	f041 0104 	orr.w	r1, r1, #4
 8000a9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 8000a9e:	2001      	movs	r0, #1
}
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000200 	.word	0x20000200

08000aa8 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 8000aa8:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aac:	4c93      	ldr	r4, [pc, #588]	; (8000cfc <AT24XX_Read+0x254>)
 8000aae:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	6825      	ldr	r5, [r4, #0]
    uint16_t dt[1] = {0};
 8000ab4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ab8:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
uint8_t AT24XX_Read(uint16_t address) {
 8000abc:	4606      	mov	r6, r0
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d15f      	bne.n	8000b82 <AT24XX_Read+0xda>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	2219      	movs	r2, #25
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	488d      	ldr	r0, [pc, #564]	; (8000d00 <AT24XX_Read+0x258>)
 8000aca:	f7ff ff57 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d157      	bne.n	8000b82 <AT24XX_Read+0xda>
    __HAL_LOCK(hi2c);
 8000ad2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d053      	beq.n	8000b82 <AT24XX_Read+0xda>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ada:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    __HAL_LOCK(hi2c);
 8000adc:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ae0:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ae2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ae6:	07d7      	lsls	r7, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000ae8:	bf5e      	ittt	pl
 8000aea:	681a      	ldrpl	r2, [r3, #0]
 8000aec:	430a      	orrpl	r2, r1
 8000aee:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000af0:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000af2:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000af8:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000afa:	2222      	movs	r2, #34	; 0x22
 8000afc:	f884 2085 	strb.w	r2, [r4, #133]	; 0x85
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	f884 2086 	strb.w	r2, [r4, #134]	; 0x86
    hi2c->pBuffPtr    = pData;
 8000b06:	aa01      	add	r2, sp, #4
 8000b08:	66e2      	str	r2, [r4, #108]	; 0x6c
    hi2c->XferCount   = Size;
 8000b0a:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    hi2c->XferCount   = Size;
 8000b10:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
    hi2c->XferSize    = hi2c->XferCount;
 8000b14:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 8000b18:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b1c:	4a79      	ldr	r2, [pc, #484]	; (8000d04 <AT24XX_Read+0x25c>)
 8000b1e:	6762      	str	r2, [r4, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b26:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b2e:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b30:	462b      	mov	r3, r5
 8000b32:	2264      	movs	r2, #100	; 0x64
 8000b34:	f7ff ff22 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000b38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b3a:	b138      	cbz	r0, 8000b4c <AT24XX_Read+0xa4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	05dd      	lsls	r5, r3, #23
 8000b40:	d51f      	bpl.n	8000b82 <AT24XX_Read+0xda>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8000b4a:	e01a      	b.n	8000b82 <AT24XX_Read+0xda>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b4c:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b4e:	4629      	mov	r1, r5
 8000b50:	486d      	ldr	r0, [pc, #436]	; (8000d08 <AT24XX_Read+0x260>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b52:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b54:	f7ff ff3c 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000b58:	b998      	cbnz	r0, 8000b82 <AT24XX_Read+0xda>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b5c:	9007      	str	r0, [sp, #28]
 8000b5e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b60:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b62:	9207      	str	r2, [sp, #28]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	9307      	str	r3, [sp, #28]
 8000b68:	9b07      	ldr	r3, [sp, #28]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b6a:	f7ff ff67 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000b6e:	b160      	cbz	r0, 8000b8a <AT24XX_Read+0xe2>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b70:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d104      	bne.n	8000b82 <AT24XX_Read+0xda>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b80:	6013      	str	r3, [r2, #0]
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000b82:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000b86:	b009      	add	sp, #36	; 0x24
 8000b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b8c:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b8e:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b90:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b92:	f7ff ff53 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d1ea      	bne.n	8000b70 <AT24XX_Read+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b9c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b9e:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ba0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ba2:	f7ff ff4b 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1e1      	bne.n	8000b70 <AT24XX_Read+0xc8>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bae:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bba:	462b      	mov	r3, r5
 8000bbc:	2264      	movs	r2, #100	; 0x64
 8000bbe:	f7ff fedd 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000bc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d1b9      	bne.n	8000b3c <AT24XX_Read+0x94>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bc8:	22af      	movs	r2, #175	; 0xaf
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bca:	4629      	mov	r1, r5
 8000bcc:	484e      	ldr	r0, [pc, #312]	; (8000d08 <AT24XX_Read+0x260>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bce:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bd0:	f7ff fefe 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d1d4      	bne.n	8000b82 <AT24XX_Read+0xda>
    if (hi2c->XferSize == 0U)
 8000bd8:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (hi2c->XferSize == 0U)
 8000bde:	b9ba      	cbnz	r2, 8000c10 <AT24XX_Read+0x168>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000be0:	9206      	str	r2, [sp, #24]
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	9206      	str	r2, [sp, #24]
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	9206      	str	r2, [sp, #24]
 8000bea:	9a06      	ldr	r2, [sp, #24]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bf2:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bf4:	4e45      	ldr	r6, [pc, #276]	; (8000d0c <AT24XX_Read+0x264>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000bf6:	4f46      	ldr	r7, [pc, #280]	; (8000d10 <AT24XX_Read+0x268>)
    while (hi2c->XferSize > 0U)
 8000bf8:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d139      	bne.n	8000c74 <AT24XX_Read+0x1cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8000c00:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000c02:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    hi2c->State = HAL_I2C_STATE_READY;
 8000c06:	f884 2085 	strb.w	r2, [r4, #133]	; 0x85
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0a:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
 8000c0e:	e7b8      	b.n	8000b82 <AT24XX_Read+0xda>
    else if (hi2c->XferSize == 1U)
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d111      	bne.n	8000c38 <AT24XX_Read+0x190>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c1a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c20:	9005      	str	r0, [sp, #20]
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	9205      	str	r2, [sp, #20]
 8000c26:	699a      	ldr	r2, [r3, #24]
 8000c28:	9205      	str	r2, [sp, #20]
 8000c2a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c34:	b662      	cpsie	i
}
 8000c36:	e7dd      	b.n	8000bf4 <AT24XX_Read+0x14c>
    else if (hi2c->XferSize == 2U)
 8000c38:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c3a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000c3c:	d10f      	bne.n	8000c5e <AT24XX_Read+0x1b6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c46:	2300      	movs	r3, #0
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	9204      	str	r2, [sp, #16]
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	9204      	str	r2, [sp, #16]
 8000c54:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c5c:	e7e9      	b.n	8000c32 <AT24XX_Read+0x18a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c62:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c64:	2200      	movs	r2, #0
 8000c66:	9203      	str	r2, [sp, #12]
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	9203      	str	r2, [sp, #12]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	9b03      	ldr	r3, [sp, #12]
 8000c72:	e7bf      	b.n	8000bf4 <AT24XX_Read+0x14c>
      if (hi2c->XferSize <= 3U)
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	f200 8092 	bhi.w	8000d9e <AT24XX_Read+0x2f6>
        if (hi2c->XferSize == 1U)
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d118      	bne.n	8000cb0 <AT24XX_Read+0x208>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f7ff fe49 	bl	8000916 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	f47f af7c 	bne.w	8000b82 <AT24XX_Read+0xda>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000c8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000c90:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000c92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000c94:	3301      	adds	r3, #1
 8000c96:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 8000c98:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 8000ca2:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8000cae:	e7a3      	b.n	8000bf8 <AT24XX_Read+0x150>
        else if (hi2c->XferSize == 2U)
 8000cb0:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cb2:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	f04f 0100 	mov.w	r1, #0
 8000cbc:	4630      	mov	r0, r6
        else if (hi2c->XferSize == 2U)
 8000cbe:	d129      	bne.n	8000d14 <AT24XX_Read+0x26c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cc0:	f7ff fe5c 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	f47f af5c 	bne.w	8000b82 <AT24XX_Read+0xda>
 8000cca:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ccc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000cda:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000cdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000cde:	3301      	adds	r3, #1
 8000ce0:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 8000ce2:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 8000cec:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf8:	b662      	cpsie	i
 8000cfa:	e7c6      	b.n	8000c8a <AT24XX_Read+0x1e2>
 8000cfc:	20000200 	.word	0x20000200
 8000d00:	00100002 	.word	0x00100002
 8000d04:	ffff0000 	.word	0xffff0000
 8000d08:	00010002 	.word	0x00010002
 8000d0c:	00010004 	.word	0x00010004
 8000d10:	20000000 	.word	0x20000000
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d14:	f7ff fe32 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	f47f af32 	bne.w	8000b82 <AT24XX_Read+0xda>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000d30:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000d32:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8000d36:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8000d38:	1c4b      	adds	r3, r1, #1
 8000d3a:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 8000d3c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8000d40:	3b01      	subs	r3, #1
 8000d42:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 8000d46:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d58:	2223      	movs	r2, #35	; 0x23
 8000d5a:	4353      	muls	r3, r2
 8000d5c:	9302      	str	r3, [sp, #8]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8000d5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            count--;
 8000d60:	9a02      	ldr	r2, [sp, #8]
 8000d62:	3a01      	subs	r2, #1
 8000d64:	9202      	str	r2, [sp, #8]
            if (count == 0U)
 8000d66:	9a02      	ldr	r2, [sp, #8]
 8000d68:	b97a      	cbnz	r2, 8000d8a <AT24XX_Read+0x2e2>
              hi2c->State               = HAL_I2C_STATE_READY;
 8000d6a:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8000d6c:	67a2      	str	r2, [r4, #120]	; 0x78
              hi2c->State               = HAL_I2C_STATE_READY;
 8000d6e:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d72:	f884 2086 	strb.w	r2, [r4, #134]	; 0x86
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d76:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __ASM volatile ("cpsie i" : : : "memory");
 8000d82:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8000d84:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
 8000d88:	e6fb      	b.n	8000b82 <AT24XX_Read+0xda>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	0750      	lsls	r0, r2, #29
 8000d8e:	d5e7      	bpl.n	8000d60 <AT24XX_Read+0x2b8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d96:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	704b      	strb	r3, [r1, #1]
 8000d9c:	e79e      	b.n	8000cdc <AT24XX_Read+0x234>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f7ff fdb9 	bl	8000916 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	f47f aeec 	bne.w	8000b82 <AT24XX_Read+0xda>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000daa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000db0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8000db2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8000db4:	1c53      	adds	r3, r2, #1
 8000db6:	66e3      	str	r3, [r4, #108]	; 0x6c
        hi2c->XferSize--;
 8000db8:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        hi2c->XferCount--;
 8000dc2:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000dce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dd0:	6959      	ldr	r1, [r3, #20]
 8000dd2:	0749      	lsls	r1, r1, #29
 8000dd4:	f57f af10 	bpl.w	8000bf8 <AT24XX_Read+0x150>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	7053      	strb	r3, [r2, #1]
 8000ddc:	e759      	b.n	8000c92 <AT24XX_Read+0x1ea>

08000dde <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x66>)
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000de0:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000de2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000de4:	6962      	ldr	r2, [r4, #20]
 8000de6:	f012 0204 	ands.w	r2, r2, #4
 8000dea:	d001      	beq.n	8000df0 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8000dec:	2000      	movs	r0, #0
 8000dee:	e028      	b.n	8000e42 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000df0:	6961      	ldr	r1, [r4, #20]
 8000df2:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000df6:	d112      	bne.n	8000e1e <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x40>
 8000df8:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	2a64      	cmp	r2, #100	; 0x64
 8000dfe:	d9f1      	bls.n	8000de4 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e00:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e02:	6799      	str	r1, [r3, #120]	; 0x78
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e04:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e08:	f883 1086 	strb.w	r1, [r3, #134]	; 0x86
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 8000e10:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e14:	f042 0220 	orr.w	r2, r2, #32
 8000e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000e1c:	e010      	b.n	8000e40 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e1e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000e22:	6161      	str	r1, [r4, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e24:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e26:	679a      	str	r2, [r3, #120]	; 0x78
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e28:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e2c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e30:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    __HAL_UNLOCK(hi2c);
 8000e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e38:	f041 0104 	orr.w	r1, r1, #4
 8000e3c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        __HAL_UNLOCK(hi2c);
 8000e40:	2001      	movs	r0, #1
}
 8000e42:	bd10      	pop	{r4, pc}
 8000e44:	20000200 	.word	0x20000200

08000e48 <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 8000e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4606      	mov	r6, r0
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8000e4e:	f7ff fe2b 	bl	8000aa8 <AT24XX_Read>
 8000e52:	42a0      	cmp	r0, r4
 8000e54:	d048      	beq.n	8000ee8 <AT24XX_Update+0xa0>
    uint8_t save[] = {val};
 8000e56:	f88d 4000 	strb.w	r4, [sp]
 8000e5a:	4c59      	ldr	r4, [pc, #356]	; (8000fc0 <AT24XX_Update+0x178>)
 8000e5c:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d140      	bne.n	8000ee8 <AT24XX_Update+0xa0>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e66:	462b      	mov	r3, r5
 8000e68:	2219      	movs	r2, #25
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4855      	ldr	r0, [pc, #340]	; (8000fc4 <AT24XX_Update+0x17c>)
 8000e6e:	f7ff fd85 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d138      	bne.n	8000ee8 <AT24XX_Update+0xa0>
    __HAL_LOCK(hi2c);
 8000e76:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d034      	beq.n	8000ee8 <AT24XX_Update+0xa0>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    __HAL_LOCK(hi2c);
 8000e80:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e88:	bf58      	it	pl
 8000e8a:	681a      	ldrpl	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      __HAL_I2C_ENABLE(hi2c);
 8000e90:	bf5c      	itt	pl
 8000e92:	430a      	orrpl	r2, r1
 8000e94:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e96:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e98:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e9e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ea0:	2221      	movs	r2, #33	; 0x21
 8000ea2:	f884 2085 	strb.w	r2, [r4, #133]	; 0x85
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ea6:	2240      	movs	r2, #64	; 0x40
 8000ea8:	f884 2086 	strb.w	r2, [r4, #134]	; 0x86
    hi2c->XferCount   = Size;
 8000eac:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eae:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    hi2c->XferCount   = Size;
 8000eb2:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
    hi2c->XferSize    = hi2c->XferCount;
 8000eb6:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
    hi2c->pBuffPtr    = pData;
 8000eba:	f8c4 d06c 	str.w	sp, [r4, #108]	; 0x6c
    hi2c->XferSize    = hi2c->XferCount;
 8000ebe:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ec2:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <AT24XX_Update+0x180>)
 8000ec4:	6762      	str	r2, [r4, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ecc:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ece:	462b      	mov	r3, r5
 8000ed0:	2264      	movs	r2, #100	; 0x64
 8000ed2:	f7ff fd53 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ed6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ed8:	b140      	cbz	r0, 8000eec <AT24XX_Update+0xa4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	05d9      	lsls	r1, r3, #23
 8000ede:	d503      	bpl.n	8000ee8 <AT24XX_Update+0xa0>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000eec:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000eee:	4629      	mov	r1, r5
 8000ef0:	4836      	ldr	r0, [pc, #216]	; (8000fcc <AT24XX_Update+0x184>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ef2:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ef4:	f7ff fd6c 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1f5      	bne.n	8000ee8 <AT24XX_Update+0xa0>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000efc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000efe:	9001      	str	r0, [sp, #4]
 8000f00:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f02:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f04:	9201      	str	r2, [sp, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f0c:	f7ff fd96 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f10:	b148      	cbz	r0, 8000f26 <AT24XX_Update+0xde>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f12:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d1e6      	bne.n	8000ee8 <AT24XX_Update+0xa0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f1c:	6813      	ldr	r3, [r2, #0]
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e7e0      	b.n	8000ee8 <AT24XX_Update+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f28:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f2a:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f2c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f2e:	f7ff fd85 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1ed      	bne.n	8000f12 <AT24XX_Update+0xca>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f38:	b2f6      	uxtb	r6, r6
 8000f3a:	611e      	str	r6, [r3, #16]
    while (hi2c->XferSize > 0U)
 8000f3c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f40:	4628      	mov	r0, r5
    while (hi2c->XferSize > 0U)
 8000f42:	b99b      	cbnz	r3, 8000f6c <AT24XX_Update+0x124>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f44:	f7ff ff4b 	bl	8000dde <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d1e2      	bne.n	8000f12 <AT24XX_Update+0xca>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f4c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f54:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f56:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8000f58:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    hi2c->State = HAL_I2C_STATE_READY;
 8000f5c:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f60:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
        HAL_Delay(5);
 8000f64:	2005      	movs	r0, #5
 8000f66:	f7ff f9da 	bl	800031e <HAL_Delay>
}
 8000f6a:	e7bd      	b.n	8000ee8 <AT24XX_Update+0xa0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f6c:	f7ff fd66 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d1ce      	bne.n	8000f12 <AT24XX_Update+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000f76:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000f7e:	6131      	str	r1, [r6, #16]
      hi2c->pBuffPtr++;
 8000f80:	66e2      	str	r2, [r4, #108]	; 0x6c
      hi2c->XferCount--;
 8000f82:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
      hi2c->XferSize--;
 8000f86:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
      hi2c->XferCount--;
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f92:	6972      	ldr	r2, [r6, #20]
      hi2c->XferSize--;
 8000f94:	1e48      	subs	r0, r1, #1
 8000f96:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f98:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8000f9a:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f9e:	d5cd      	bpl.n	8000f3c <AT24XX_Update+0xf4>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d0cb      	beq.n	8000f3c <AT24XX_Update+0xf4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fa4:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8000fa6:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fa8:	6132      	str	r2, [r6, #16]
        hi2c->pBuffPtr++;
 8000faa:	66e3      	str	r3, [r4, #108]	; 0x6c
        hi2c->XferCount--;
 8000fac:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
        hi2c->XferSize--;
 8000fb0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000fb6:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
        hi2c->XferCount--;
 8000fba:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8000fbe:	e7bd      	b.n	8000f3c <AT24XX_Update+0xf4>
 8000fc0:	20000200 	.word	0x20000200
 8000fc4:	00100002 	.word	0x00100002
 8000fc8:	ffff0000 	.word	0xffff0000
 8000fcc:	00010002 	.word	0x00010002

08000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 8000fd0:	2300      	movs	r3, #0
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8000fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd6:	4c92      	ldr	r4, [pc, #584]	; (8001220 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x250>)
 8000fd8:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fde:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8000fe2:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe4:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fea:	d14f      	bne.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fec:	4633      	mov	r3, r6
 8000fee:	2219      	movs	r2, #25
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	488c      	ldr	r0, [pc, #560]	; (8001224 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x254>)
 8000ff4:	f7ff fcc2 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d147      	bne.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    __HAL_LOCK(hi2c);
 8000ffc:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8001000:	428b      	cmp	r3, r1
 8001002:	d043      	beq.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001004:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    __HAL_LOCK(hi2c);
 8001006:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800100e:	bf5e      	ittt	pl
 8001010:	682b      	ldrpl	r3, [r5, #0]
 8001012:	430b      	orrpl	r3, r1
 8001014:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800101c:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800101e:	2322      	movs	r3, #34	; 0x22
 8001020:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001024:	2310      	movs	r3, #16
 8001026:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    hi2c->XferCount   = Size;
 8001030:	f8a4 8072 	strh.w	r8, [r4, #114]	; 0x72
    hi2c->XferSize    = hi2c->XferCount;
 8001034:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    hi2c->pBuffPtr    = pData;
 8001038:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
    hi2c->XferSize    = hi2c->XferCount;
 800103c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001040:	4b79      	ldr	r3, [pc, #484]	; (8001228 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x258>)
 8001042:	6763      	str	r3, [r4, #116]	; 0x74
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001044:	6f63      	ldr	r3, [r4, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001046:	682a      	ldr	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001048:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800104a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800104e:	602a      	str	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001050:	d004      	beq.n	800105c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8c>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8c>
 8001056:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800105a:	d104      	bne.n	8001066 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	602b      	str	r3, [r5, #0]
 8001064:	e002      	b.n	800106c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x9c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001066:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001068:	2b11      	cmp	r3, #17
 800106a:	d0f7      	beq.n	800105c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800106c:	4633      	mov	r3, r6
 800106e:	2264      	movs	r2, #100	; 0x64
 8001070:	2100      	movs	r1, #0
 8001072:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 8001076:	f7ff fc81 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800107a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800107c:	b148      	cbz	r0, 8001092 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc2>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	05dd      	lsls	r5, r3, #23
 8001082:	d503      	bpl.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800108c:	b007      	add	sp, #28
 800108e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001092:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001094:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001098:	d126      	bne.n	80010e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x118>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800109a:	f047 0701 	orr.w	r7, r7, #1
 800109e:	b2ff      	uxtb	r7, r7
 80010a0:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010a2:	4631      	mov	r1, r6
 80010a4:	4861      	ldr	r0, [pc, #388]	; (800122c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x25c>)
 80010a6:	f7ff fc93 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d1ee      	bne.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    if (hi2c->XferSize == 0U)
 80010ae:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    if (hi2c->XferSize == 0U)
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d13f      	bne.n	8001138 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x168>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b8:	9304      	str	r3, [sp, #16]
 80010ba:	6953      	ldr	r3, [r2, #20]
 80010bc:	9304      	str	r3, [sp, #16]
 80010be:	6993      	ldr	r3, [r2, #24]
 80010c0:	9304      	str	r3, [sp, #16]
 80010c2:	9b04      	ldr	r3, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010cc:	4d58      	ldr	r5, [pc, #352]	; (8001230 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x260>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80010ce:	4f59      	ldr	r7, [pc, #356]	; (8001234 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x264>)
    while (hi2c->XferSize > 0U)
 80010d0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d15f      	bne.n	8001198 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80010d8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80010da:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    hi2c->State = HAL_I2C_STATE_READY;
 80010de:	f884 2085 	strb.w	r2, [r4, #133]	; 0x85
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e2:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    return HAL_OK;
 80010e6:	e7d1      	b.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010e8:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010ea:	4631      	mov	r1, r6
 80010ec:	4852      	ldr	r0, [pc, #328]	; (8001238 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x268>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010ee:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010f0:	f7ff fc6e 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1c9      	bne.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010fa:	4631      	mov	r1, r6
 80010fc:	484b      	ldr	r0, [pc, #300]	; (800122c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x25c>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010fe:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001100:	f7ff fc66 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001104:	4601      	mov	r1, r0
 8001106:	2800      	cmp	r0, #0
 8001108:	d1c0      	bne.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800110a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800110c:	9005      	str	r0, [sp, #20]
 800110e:	695a      	ldr	r2, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001110:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001114:	9205      	str	r2, [sp, #20]
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	9205      	str	r2, [sp, #20]
 800111a:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001124:	4633      	mov	r3, r6
 8001126:	2264      	movs	r2, #100	; 0x64
 8001128:	f7ff fc28 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800112c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800112e:	2800      	cmp	r0, #0
 8001130:	d1a5      	bne.n	800107e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xae>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001132:	22f1      	movs	r2, #241	; 0xf1
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	e7b4      	b.n	80010a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xd2>
    else if (hi2c->XferSize == 1U)
 8001138:	2b01      	cmp	r3, #1
 800113a:	d111      	bne.n	8001160 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x190>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001146:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001148:	9003      	str	r0, [sp, #12]
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	9203      	str	r2, [sp, #12]
 800114e:	699a      	ldr	r2, [r3, #24]
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800115a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800115c:	b662      	cpsie	i
}
 800115e:	e7b5      	b.n	80010cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xfc>
    else if (hi2c->XferSize == 2U)
 8001160:	2b02      	cmp	r3, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001162:	6813      	ldr	r3, [r2, #0]
    else if (hi2c->XferSize == 2U)
 8001164:	d10e      	bne.n	8001184 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1b4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800116e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001170:	9002      	str	r0, [sp, #8]
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	9202      	str	r2, [sp, #8]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	9202      	str	r2, [sp, #8]
 800117a:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001182:	e7ea      	b.n	800115a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001188:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800118a:	9001      	str	r0, [sp, #4]
 800118c:	6953      	ldr	r3, [r2, #20]
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	6993      	ldr	r3, [r2, #24]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	9b01      	ldr	r3, [sp, #4]
 8001196:	e799      	b.n	80010cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xfc>
      if (hi2c->XferSize <= 3U)
 8001198:	2b03      	cmp	r3, #3
 800119a:	f200 8094 	bhi.w	80012c6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f6>
        if (hi2c->XferSize == 1U)
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d118      	bne.n	80011d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x204>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fbb7 	bl	8000916 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	f47f af6f 	bne.w	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80011b4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80011b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80011b8:	3301      	adds	r3, #1
 80011ba:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 80011bc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 80011c0:	3b01      	subs	r3, #1
 80011c2:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 80011c6:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80011d2:	e77d      	b.n	80010d0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x100>
        else if (hi2c->XferSize == 2U)
 80011d4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011d6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80011da:	4633      	mov	r3, r6
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	4628      	mov	r0, r5
        else if (hi2c->XferSize == 2U)
 80011e2:	d12b      	bne.n	800123c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011e4:	f7ff fbca 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	f47f af4f 	bne.w	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
 80011ee:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011f8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80011fe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001200:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001202:	3301      	adds	r3, #1
 8001204:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 8001206:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 800120a:	3b01      	subs	r3, #1
 800120c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 8001210:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8001214:	3b01      	subs	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  __ASM volatile ("cpsie i" : : : "memory");
 800121c:	b662      	cpsie	i
 800121e:	e7c6      	b.n	80011ae <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1de>
 8001220:	20000200 	.word	0x20000200
 8001224:	00100002 	.word	0x00100002
 8001228:	ffff0000 	.word	0xffff0000
 800122c:	00010002 	.word	0x00010002
 8001230:	00010004 	.word	0x00010004
 8001234:	20000000 	.word	0x20000000
 8001238:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800123c:	f7ff fb9e 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001240:	2800      	cmp	r0, #0
 8001242:	f47f af23 	bne.w	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001246:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001248:	6813      	ldr	r3, [r2, #0]
 800124a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001252:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001258:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800125a:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 800125e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001260:	1c4b      	adds	r3, r1, #1
 8001262:	66e3      	str	r3, [r4, #108]	; 0x6c
          hi2c->XferSize--;
 8001264:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8001268:	3b01      	subs	r3, #1
 800126a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          hi2c->XferCount--;
 800126e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8001272:	3b01      	subs	r3, #1
 8001274:	b29b      	uxth	r3, r3
 8001276:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001280:	2223      	movs	r2, #35	; 0x23
 8001282:	4353      	muls	r3, r2
 8001284:	9300      	str	r3, [sp, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001286:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            count--;
 8001288:	9a00      	ldr	r2, [sp, #0]
 800128a:	3a01      	subs	r2, #1
 800128c:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 800128e:	9a00      	ldr	r2, [sp, #0]
 8001290:	b97a      	cbnz	r2, 80012b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2e2>
              hi2c->State               = HAL_I2C_STATE_READY;
 8001292:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001294:	67a2      	str	r2, [r4, #120]	; 0x78
              hi2c->State               = HAL_I2C_STATE_READY;
 8001296:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800129a:	f884 2086 	strb.w	r2, [r4, #134]	; 0x86
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800129e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __ASM volatile ("cpsie i" : : : "memory");
 80012aa:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80012ac:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
              return HAL_ERROR;
 80012b0:	e6ec      	b.n	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	0750      	lsls	r0, r2, #29
 80012b6:	d5e7      	bpl.n	8001288 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012be:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	704b      	strb	r3, [r1, #1]
 80012c4:	e79c      	b.n	8001200 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x230>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c6:	4630      	mov	r0, r6
 80012c8:	f7ff fb25 	bl	8000916 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	f47f aedd 	bne.w	800108c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xbc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80012d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80012da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80012dc:	1c53      	adds	r3, r2, #1
 80012de:	66e3      	str	r3, [r4, #108]	; 0x6c
        hi2c->XferSize--;
 80012e0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 80012e4:	3b01      	subs	r3, #1
 80012e6:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        hi2c->XferCount--;
 80012ea:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012f8:	6959      	ldr	r1, [r3, #20]
 80012fa:	0749      	lsls	r1, r1, #29
 80012fc:	f57f aee8 	bpl.w	80010d0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x100>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	7053      	strb	r3, [r2, #1]
 8001304:	e757      	b.n	80011b6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1e6>

08001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001306:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800130a:	4c5e      	ldr	r4, [pc, #376]	; (8001484 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x17e>)
 800130c:	4607      	mov	r7, r0
 800130e:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001310:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001314:	4689      	mov	r9, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001316:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001318:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800131a:	d14b      	bne.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800131c:	4633      	mov	r3, r6
 800131e:	2219      	movs	r2, #25
 8001320:	2101      	movs	r1, #1
 8001322:	4859      	ldr	r0, [pc, #356]	; (8001488 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x182>)
 8001324:	f7ff fb2a 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001328:	2800      	cmp	r0, #0
 800132a:	d143      	bne.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    __HAL_LOCK(hi2c);
 800132c:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8001330:	428b      	cmp	r3, r1
 8001332:	d03f      	beq.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001334:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    __HAL_LOCK(hi2c);
 8001336:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800133a:	682b      	ldr	r3, [r5, #0]
 800133c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800133e:	bf5e      	ittt	pl
 8001340:	682b      	ldrpl	r3, [r5, #0]
 8001342:	430b      	orrpl	r3, r1
 8001344:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800134c:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800134e:	2321      	movs	r3, #33	; 0x21
 8001350:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001354:	2310      	movs	r3, #16
 8001356:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    hi2c->XferCount   = Size;
 8001360:	f8a4 8072 	strh.w	r8, [r4, #114]	; 0x72
    hi2c->XferSize    = hi2c->XferCount;
 8001364:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    hi2c->pBuffPtr    = pData;
 8001368:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
    hi2c->XferSize    = hi2c->XferCount;
 800136c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001370:	4b46      	ldr	r3, [pc, #280]	; (800148c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x186>)
 8001372:	6763      	str	r3, [r4, #116]	; 0x74
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001374:	6f63      	ldr	r3, [r4, #116]	; 0x74
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001376:	2b08      	cmp	r3, #8
 8001378:	d004      	beq.n	8001384 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x7e>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d002      	beq.n	8001384 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x7e>
 800137e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001382:	d104      	bne.n	800138e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x88>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	602b      	str	r3, [r5, #0]
 800138c:	e002      	b.n	8001394 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800138e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001390:	2b12      	cmp	r3, #18
 8001392:	d0f7      	beq.n	8001384 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x7e>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001394:	4633      	mov	r3, r6
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	2100      	movs	r1, #0
 800139a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 800139e:	f7ff faed 	bl	800097c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013a4:	b148      	cbz	r0, 80013ba <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	05de      	lsls	r6, r3, #23
 80013aa:	d503      	bpl.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80013b4:	b003      	add	sp, #12
 80013b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013bc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80013c0:	d11d      	bne.n	80013fe <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf8>
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013c2:	4631      	mov	r1, r6
 80013c4:	4832      	ldr	r0, [pc, #200]	; (8001490 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18a>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013c6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013c8:	f7ff fb02 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f1      	bne.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013d2:	9001      	str	r0, [sp, #4]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80013de:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 80013e2:	b9b3      	cbnz	r3, 8001412 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80013e6:	680a      	ldr	r2, [r1, #0]
 80013e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ec:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013ee:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80013f0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    hi2c->State = HAL_I2C_STATE_READY;
 80013f4:	f884 2085 	strb.w	r2, [r4, #133]	; 0x85
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    return HAL_OK;
 80013fc:	e7da      	b.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013fe:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001400:	4631      	mov	r1, r6
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001404:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001406:	f7ff fae3 	bl	80009d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800140a:	2800      	cmp	r0, #0
 800140c:	d1d2      	bne.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800140e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001410:	e7d7      	b.n	80013c2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001412:	4630      	mov	r0, r6
 8001414:	f7ff fb12 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001418:	b148      	cbz	r0, 800142e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x128>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800141e:	2b04      	cmp	r3, #4
 8001420:	d1c8      	bne.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001422:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001424:	6813      	ldr	r3, [r2, #0]
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e7c2      	b.n	80013b4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800142e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001430:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001432:	461a      	mov	r2, r3
 8001434:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001438:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800143a:	66e2      	str	r2, [r4, #108]	; 0x6c
      hi2c->XferCount--;
 800143c:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 8001440:	3a01      	subs	r2, #1
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
      hi2c->XferSize--;
 8001448:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800144c:	6945      	ldr	r5, [r0, #20]
      hi2c->XferSize--;
 800144e:	1e51      	subs	r1, r2, #1
 8001450:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001452:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 8001454:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001458:	d50d      	bpl.n	8001476 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x170>
 800145a:	b161      	cbz	r1, 8001476 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x170>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800145c:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800145e:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001460:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001462:	66e3      	str	r3, [r4, #108]	; 0x6c
        hi2c->XferCount--;
 8001464:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
        hi2c->XferSize--;
 8001468:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800146a:	3b01      	subs	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        hi2c->XferSize--;
 8001472:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001476:	4630      	mov	r0, r6
 8001478:	f7ff fcb1 	bl	8000dde <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 800147c:	2800      	cmp	r0, #0
 800147e:	d0ae      	beq.n	80013de <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd8>
 8001480:	e7cb      	b.n	800141a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x114>
 8001482:	bf00      	nop
 8001484:	20000200 	.word	0x20000200
 8001488:	00100002 	.word	0x00100002
 800148c:	ffff0000 	.word	0xffff0000
 8001490:	00010002 	.word	0x00010002
 8001494:	00010008 	.word	0x00010008

08001498 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8001498:	2300      	movs	r3, #0
void DS3231_Update(void) {
 800149a:	b513      	push	{r0, r1, r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800149c:	4c28      	ldr	r4, [pc, #160]	; (8001540 <DS3231_Update+0xa8>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800149e:	f10d 0107 	add.w	r1, sp, #7
 80014a2:	2201      	movs	r2, #1
 80014a4:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 80014a6:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 80014aa:	f7ff ff2c 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80014ae:	2213      	movs	r2, #19
 80014b0:	20d0      	movs	r0, #208	; 0xd0
 80014b2:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 80014b6:	f7ff fd8b 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 80014ba:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 80014be:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    rtcBufferSet[2] = rtcBuffer[1];
 80014c2:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80014c6:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    rtcBufferSet[3] = rtcBuffer[2];
 80014ca:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80014ce:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    rtcBufferSet[4] = rtcBuffer[3];
 80014d2:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80014d6:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
    rtcBufferSet[5] = rtcBuffer[4];
 80014da:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80014de:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
    rtcBufferSet[6] = rtcBuffer[5];
 80014e2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 80014e6:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
    rtcBufferSet[7] = rtcBuffer[6];
 80014ea:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80014ee:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
    rtcBufferSet[8] = rtcBuffer[7];
 80014f2:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80014f6:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
    rtcBufferSet[9] = rtcBuffer[8];
 80014fa:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80014fe:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    rtcBufferSet[10] = rtcBuffer[9];
 8001502:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8001506:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    rtcBufferSet[11] = rtcBuffer[10];
 800150a:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800150e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    rtcBufferSet[12] = rtcBuffer[11];
 8001512:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8001516:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    rtcBufferSet[13] = rtcBuffer[12];
 800151a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800151e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
    rtcBufferSet[14] = rtcBuffer[13];
 8001522:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8001526:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    rtcBufferSet[15] = rtcBuffer[14];
 800152a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800152e:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    rtcBufferSet[16] = rtcBuffer[15];
 8001532:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 8001536:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
}
 800153a:	b002      	add	sp, #8
 800153c:	bd10      	pop	{r4, pc}
 800153e:	bf00      	nop
 8001540:	20000200 	.word	0x20000200

08001544 <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001546:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001548:	2500      	movs	r5, #0
 800154a:	4c19      	ldr	r4, [pc, #100]	; (80015b0 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x6c>)
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800154c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800154e:	68e3      	ldr	r3, [r4, #12]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001550:	6465      	str	r5, [r4, #68]	; 0x44
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001556:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800155a:	6827      	ldr	r7, [r4, #0]
    huart->TxXferSize = Size;
 800155c:	8521      	strh	r1, [r4, #40]	; 0x28
    huart->TxXferCount = Size;
 800155e:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001560:	d103      	bne.n	800156a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
 8001562:	6963      	ldr	r3, [r4, #20]
 8001564:	b90b      	cbnz	r3, 800156a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 8001566:	4605      	mov	r5, r0
      pdata8bits  = NULL;
 8001568:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800156a:	2300      	movs	r3, #0
 800156c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    while (huart->TxXferCount > 0U)
 8001570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001572:	4639      	mov	r1, r7
    while (huart->TxXferCount > 0U)
 8001574:	b29b      	uxth	r3, r3
 8001576:	b93b      	cbnz	r3, 8001588 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x44>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001578:	2040      	movs	r0, #64	; 0x40
 800157a:	f7ff f88d 	bl	8000698 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800157e:	b910      	cbnz	r0, 8001586 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x42>
    huart->gState = HAL_UART_STATE_READY;
 8001580:	2320      	movs	r3, #32
 8001582:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001588:	2080      	movs	r0, #128	; 0x80
 800158a:	f7ff f885 	bl	8000698 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800158e:	2800      	cmp	r0, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x42>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001592:	6862      	ldr	r2, [r4, #4]
      if (pdata8bits == NULL)
 8001594:	b94e      	cbnz	r6, 80015aa <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x66>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001596:	f835 3b02 	ldrh.w	r3, [r5], #2
 800159a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800159e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80015a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80015a8:	e7e2      	b.n	8001570 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x2c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015aa:	f816 3b01 	ldrb.w	r3, [r6], #1
 80015ae:	e7f6      	b.n	800159e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x5a>
 80015b0:	20000200 	.word	0x20000200

080015b4 <HAL_InitTick.isra.0>:
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80015b8:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ba:	4c0f      	ldr	r4, [pc, #60]	; (80015f8 <HAL_InitTick.isra.0+0x44>)
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80015bc:	4601      	mov	r1, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	3b01      	subs	r3, #1
 80015c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ca:	d213      	bcs.n	80015f4 <HAL_InitTick.isra.0+0x40>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015cc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	20f0      	movs	r0, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_InitTick.isra.0+0x48>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	290f      	cmp	r1, #15
 80015d8:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	f04f 0307 	mov.w	r3, #7
 80015e6:	6113      	str	r3, [r2, #16]
 80015e8:	d804      	bhi.n	80015f4 <HAL_InitTick.isra.0+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	f7ff f875 	bl	80006dc <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 80015f2:	6061      	str	r1, [r4, #4]
}
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <LCD_Font.constprop.0>:
			set_pixels = 0;
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001604:	f04f 0a00 	mov.w	sl, #0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001608:	b08f      	sub	sp, #60	; 0x3c
 800160a:	4693      	mov	fp, r2
	int16_t cursor_x = x;
 800160c:	b202      	sxth	r2, r0
 800160e:	9203      	str	r2, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001610:	681a      	ldr	r2, [r3, #0]
	int16_t cursor_x = x;
 8001612:	9f03      	ldr	r7, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001614:	9207      	str	r2, [sp, #28]
 8001616:	685a      	ldr	r2, [r3, #4]
	int16_t cursor_y = y;
 8001618:	b20c      	sxth	r4, r1
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800161a:	9205      	str	r2, [sp, #20]
 800161c:	7a1a      	ldrb	r2, [r3, #8]
 800161e:	9206      	str	r2, [sp, #24]
 8001620:	7a5a      	ldrb	r2, [r3, #9]
 8001622:	7a9b      	ldrb	r3, [r3, #10]
 8001624:	9209      	str	r2, [sp, #36]	; 0x24
 8001626:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001628:	4658      	mov	r0, fp
 800162a:	f000 f921 	bl	8001870 <strlen>
 800162e:	fa1f f58a 	uxth.w	r5, sl
 8001632:	42a8      	cmp	r0, r5
 8001634:	d802      	bhi.n	800163c <LCD_Font.constprop.0+0x3c>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
		}
	}
}
 8001636:	b00f      	add	sp, #60	; 0x3c
 8001638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		char c = text[text_pos];
 800163c:	f81b 3005 	ldrb.w	r3, [fp, r5]
		if(c == '\n')
 8001640:	2b0a      	cmp	r3, #10
 8001642:	d106      	bne.n	8001652 <LCD_Font.constprop.0+0x52>
			cursor_y += font.yAdvance * size;
 8001644:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 8001646:	9f03      	ldr	r7, [sp, #12]
			cursor_y += font.yAdvance * size;
 8001648:	441c      	add	r4, r3
 800164a:	b224      	sxth	r4, r4
 800164c:	f10a 0a01 	add.w	sl, sl, #1
 8001650:	e7ea      	b.n	8001628 <LCD_Font.constprop.0+0x28>
		else if(c >= font.first && c <= font.last && c != '\r')
 8001652:	9a06      	ldr	r2, [sp, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3f9      	bcc.n	800164c <LCD_Font.constprop.0+0x4c>
 8001658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800165a:	4293      	cmp	r3, r2
 800165c:	d8f6      	bhi.n	800164c <LCD_Font.constprop.0+0x4c>
 800165e:	2b0d      	cmp	r3, #13
 8001660:	d0f4      	beq.n	800164c <LCD_Font.constprop.0+0x4c>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001662:	2500      	movs	r5, #0
	uint8_t bits = 0, bit = 0;
 8001664:	462e      	mov	r6, r5
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001666:	9a06      	ldr	r2, [sp, #24]
 8001668:	9805      	ldr	r0, [sp, #20]
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	9a05      	ldr	r2, [sp, #20]
 800166e:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8001672:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001676:	6849      	ldr	r1, [r1, #4]
 8001678:	aa0c      	add	r2, sp, #48	; 0x30
 800167a:	c203      	stmia	r2!, {r0, r1}
	uint16_t bo = glyph -> bitmapOffset;
 800167c:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	uint8_t bits = 0, bit = 0;
 8001680:	9504      	str	r5, [sp, #16]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001682:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001686:	b2ea      	uxtb	r2, r5
 8001688:	4293      	cmp	r3, r2
 800168a:	920b      	str	r2, [sp, #44]	; 0x2c
 800168c:	d848      	bhi.n	8001720 <LCD_Font.constprop.0+0x120>
			cursor_x += glyph.xAdvance * size;
 800168e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001692:	441f      	add	r7, r3
 8001694:	b23f      	sxth	r7, r7
 8001696:	e7d9      	b.n	800164c <LCD_Font.constprop.0+0x4c>
			if(bit == 0)
 8001698:	b946      	cbnz	r6, 80016ac <LCD_Font.constprop.0+0xac>
				bit  = 0x80;
 800169a:	2680      	movs	r6, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800169c:	9907      	ldr	r1, [sp, #28]
 800169e:	f109 0301 	add.w	r3, r9, #1
 80016a2:	f811 1009 	ldrb.w	r1, [r1, r9]
 80016a6:	fa1f f983 	uxth.w	r9, r3
 80016aa:	9104      	str	r1, [sp, #16]
			if(bits & bit)
 80016ac:	9b04      	ldr	r3, [sp, #16]
 80016ae:	4033      	ands	r3, r6
 80016b0:	930a      	str	r3, [sp, #40]	; 0x28
 80016b2:	d01e      	beq.n	80016f2 <LCD_Font.constprop.0+0xf2>
				set_pixels++;
 80016b4:	3201      	adds	r2, #1
 80016b6:	b292      	uxth	r2, r2
			bit >>= 1;
 80016b8:	0876      	lsrs	r6, r6, #1
 80016ba:	f108 0801 	add.w	r8, r8, #1
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80016be:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80016c2:	fa5f f388 	uxtb.w	r3, r8
 80016c6:	4299      	cmp	r1, r3
 80016c8:	d8e6      	bhi.n	8001698 <LCD_Font.constprop.0+0x98>
		if (set_pixels > 0)
 80016ca:	b182      	cbz	r2, 80016ee <LCD_Font.constprop.0+0xee>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80016cc:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 80016d0:	b2e8      	uxtb	r0, r5
 80016d2:	4401      	add	r1, r0
 80016d4:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 80016d8:	4421      	add	r1, r4
 80016da:	4418      	add	r0, r3
 80016dc:	1a80      	subs	r0, r0, r2
 80016de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80016e0:	4438      	add	r0, r7
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	b289      	uxth	r1, r1
 80016e6:	2301      	movs	r3, #1
 80016e8:	b280      	uxth	r0, r0
 80016ea:	f7fe fdc5 	bl	8000278 <LCD_Rect_Fill>
 80016ee:	3501      	adds	r5, #1
 80016f0:	e7c7      	b.n	8001682 <LCD_Font.constprop.0+0x82>
			else if (set_pixels > 0)
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d0e0      	beq.n	80016b8 <LCD_Font.constprop.0+0xb8>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80016f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f8:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 80016fc:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001700:	4419      	add	r1, r3
 8001702:	fa5f f388 	uxtb.w	r3, r8
 8001706:	4418      	add	r0, r3
 8001708:	1a80      	subs	r0, r0, r2
 800170a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800170c:	4421      	add	r1, r4
 800170e:	4438      	add	r0, r7
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	b289      	uxth	r1, r1
 8001714:	2301      	movs	r3, #1
 8001716:	b280      	uxth	r0, r0
 8001718:	f7fe fdae 	bl	8000278 <LCD_Rect_Fill>
				set_pixels = 0;
 800171c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800171e:	e7cb      	b.n	80016b8 <LCD_Font.constprop.0+0xb8>
 8001720:	f04f 0800 	mov.w	r8, #0
 8001724:	4642      	mov	r2, r8
 8001726:	e7ca      	b.n	80016be <LCD_Font.constprop.0+0xbe>

08001728 <round_nth.constprop.0>:
float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
}                                                                                        // round_eps(1.235, 0.01) = 1.24

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
 8001728:	b508      	push	{r3, lr}
{                                                                                        // round_nth(1.235, 0) = 1.
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800172a:	f000 fa0d 	bl	8001b48 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 800172e:	a30a      	add	r3, pc, #40	; (adr r3, 8001758 <round_nth.constprop.0+0x30>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f000 fb8a 	bl	8001e4c <__aeabi_ddiv>
 8001738:	2200      	movs	r2, #0
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <round_nth.constprop.0+0x38>)
 800173c:	f000 f8a6 	bl	800188c <__adddf3>
 8001740:	f007 fa22 	bl	8008b88 <floor>
 8001744:	a304      	add	r3, pc, #16	; (adr r3, 8001758 <round_nth.constprop.0+0x30>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f000 fa55 	bl	8001bf8 <__aeabi_dmul>
 800174e:	f000 fd4b 	bl	80021e8 <__aeabi_d2f>
}                                                                                        // round_nth(1.235, -2) = 1.24
 8001752:	bd08      	pop	{r3, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	9999999a 	.word	0x9999999a
 800175c:	3fb99999 	.word	0x3fb99999
 8001760:	3fe00000 	.word	0x3fe00000

08001764 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler>

08001766 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler>

08001768 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler>

0800176a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler>

0800176c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler>

0800176e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8001774:	4a02      	ldr	r2, [pc, #8]	; (8001780 <SysTick_Handler+0xc>)
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000200 	.word	0x20000200

08001784 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001784:	4801      	ldr	r0, [pc, #4]	; (800178c <DMA1_Channel4_IRQHandler+0x8>)
 8001786:	f7fe bdd5 	b.w	8000334 <HAL_DMA_IRQHandler>
 800178a:	bf00      	nop
 800178c:	20000348 	.word	0x20000348

08001790 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001790:	4801      	ldr	r0, [pc, #4]	; (8001798 <DMA1_Channel5_IRQHandler+0x8>)
 8001792:	f7fe bdcf 	b.w	8000334 <HAL_DMA_IRQHandler>
 8001796:	bf00      	nop
 8001798:	2000038c 	.word	0x2000038c

0800179c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800179c:	4801      	ldr	r0, [pc, #4]	; (80017a4 <DMA1_Channel6_IRQHandler+0x8>)
 800179e:	f7fe bdc9 	b.w	8000334 <HAL_DMA_IRQHandler>
 80017a2:	bf00      	nop
 80017a4:	200002c0 	.word	0x200002c0

080017a8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017a8:	4801      	ldr	r0, [pc, #4]	; (80017b0 <DMA1_Channel7_IRQHandler+0x8>)
 80017aa:	f7fe bdc3 	b.w	8000334 <HAL_DMA_IRQHandler>
 80017ae:	bf00      	nop
 80017b0:	20000304 	.word	0x20000304

080017b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80017b4:	2001      	movs	r0, #1
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80017ba:	f002 fd65 	bl	8004288 <__errno>
 80017be:	2316      	movs	r3, #22
 80017c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
 80017c6:	bd08      	pop	{r3, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80017ca:	f002 fd5d 	bl	8004288 <__errno>
 80017ce:	2316      	movs	r3, #22
 80017d0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0xa>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	460d      	mov	r5, r1
 80017d8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	460e      	mov	r6, r1
 80017dc:	1b73      	subs	r3, r6, r5
 80017de:	429c      	cmp	r4, r3
 80017e0:	dc01      	bgt.n	80017e6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017e2:	4620      	mov	r0, r4
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	e7f5      	b.n	80017dc <_read+0x8>

080017f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	460d      	mov	r5, r1
 80017f4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	460e      	mov	r6, r1
 80017f8:	1b73      	subs	r3, r6, r5
 80017fa:	429c      	cmp	r4, r3
 80017fc:	dc01      	bgt.n	8001802 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80017fe:	4620      	mov	r0, r4
 8001800:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001802:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	e7f5      	b.n	80017f8 <_write+0x8>

0800180c <_close>:

int _close(int file)
{
	return -1;
}
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001816:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001818:	604b      	str	r3, [r1, #4]
}
 800181a:	4770      	bx	lr

0800181c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800181c:	2001      	movs	r0, #1
 800181e:	4770      	bx	lr

08001820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001820:	2000      	movs	r0, #0
 8001822:	4770      	bx	lr

08001824 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <_sbrk+0x38>)
{
 8001826:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001828:	f8d2 16e4 	ldr.w	r1, [r2, #1764]	; 0x6e4
{
 800182c:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800182e:	b911      	cbnz	r1, 8001836 <_sbrk+0x12>
  {
    __sbrk_heap_end = &_end;
 8001830:	490b      	ldr	r1, [pc, #44]	; (8001860 <_sbrk+0x3c>)
 8001832:	f8c2 16e4 	str.w	r1, [r2, #1764]	; 0x6e4
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	f8d2 06e4 	ldr.w	r0, [r2, #1764]	; 0x6e4
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <_sbrk+0x40>)
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <_sbrk+0x44>)
 800183e:	4403      	add	r3, r0
 8001840:	1b09      	subs	r1, r1, r4
 8001842:	428b      	cmp	r3, r1
 8001844:	d906      	bls.n	8001854 <_sbrk+0x30>
  {
    errno = ENOMEM;
 8001846:	f002 fd1f 	bl	8004288 <__errno>
 800184a:	230c      	movs	r3, #12
 800184c:	6003      	str	r3, [r0, #0]
 800184e:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001852:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001854:	f8c2 36e4 	str.w	r3, [r2, #1764]	; 0x6e4
  return (void *)prev_heap_end;
 8001858:	e7fb      	b.n	8001852 <_sbrk+0x2e>
 800185a:	bf00      	nop
 800185c:	20000200 	.word	0x20000200
 8001860:	200008f8 	.word	0x200008f8
 8001864:	20005000 	.word	0x20005000
 8001868:	00000400 	.word	0x00000400

0800186c <SystemInit>:
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <strlen>:
 8001870:	4603      	mov	r3, r0
 8001872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001876:	2a00      	cmp	r2, #0
 8001878:	d1fb      	bne.n	8001872 <strlen+0x2>
 800187a:	1a18      	subs	r0, r3, r0
 800187c:	3801      	subs	r0, #1
 800187e:	4770      	bx	lr

08001880 <__aeabi_drsub>:
 8001880:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001884:	e002      	b.n	800188c <__adddf3>
 8001886:	bf00      	nop

08001888 <__aeabi_dsub>:
 8001888:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800188c <__adddf3>:
 800188c:	b530      	push	{r4, r5, lr}
 800188e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001892:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001896:	ea94 0f05 	teq	r4, r5
 800189a:	bf08      	it	eq
 800189c:	ea90 0f02 	teqeq	r0, r2
 80018a0:	bf1f      	itttt	ne
 80018a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80018a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80018aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80018ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80018b2:	f000 80e2 	beq.w	8001a7a <__adddf3+0x1ee>
 80018b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80018ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80018be:	bfb8      	it	lt
 80018c0:	426d      	neglt	r5, r5
 80018c2:	dd0c      	ble.n	80018de <__adddf3+0x52>
 80018c4:	442c      	add	r4, r5
 80018c6:	ea80 0202 	eor.w	r2, r0, r2
 80018ca:	ea81 0303 	eor.w	r3, r1, r3
 80018ce:	ea82 0000 	eor.w	r0, r2, r0
 80018d2:	ea83 0101 	eor.w	r1, r3, r1
 80018d6:	ea80 0202 	eor.w	r2, r0, r2
 80018da:	ea81 0303 	eor.w	r3, r1, r3
 80018de:	2d36      	cmp	r5, #54	; 0x36
 80018e0:	bf88      	it	hi
 80018e2:	bd30      	pophi	{r4, r5, pc}
 80018e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80018e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80018ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80018f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80018f4:	d002      	beq.n	80018fc <__adddf3+0x70>
 80018f6:	4240      	negs	r0, r0
 80018f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80018fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001904:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001908:	d002      	beq.n	8001910 <__adddf3+0x84>
 800190a:	4252      	negs	r2, r2
 800190c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001910:	ea94 0f05 	teq	r4, r5
 8001914:	f000 80a7 	beq.w	8001a66 <__adddf3+0x1da>
 8001918:	f1a4 0401 	sub.w	r4, r4, #1
 800191c:	f1d5 0e20 	rsbs	lr, r5, #32
 8001920:	db0d      	blt.n	800193e <__adddf3+0xb2>
 8001922:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001926:	fa22 f205 	lsr.w	r2, r2, r5
 800192a:	1880      	adds	r0, r0, r2
 800192c:	f141 0100 	adc.w	r1, r1, #0
 8001930:	fa03 f20e 	lsl.w	r2, r3, lr
 8001934:	1880      	adds	r0, r0, r2
 8001936:	fa43 f305 	asr.w	r3, r3, r5
 800193a:	4159      	adcs	r1, r3
 800193c:	e00e      	b.n	800195c <__adddf3+0xd0>
 800193e:	f1a5 0520 	sub.w	r5, r5, #32
 8001942:	f10e 0e20 	add.w	lr, lr, #32
 8001946:	2a01      	cmp	r2, #1
 8001948:	fa03 fc0e 	lsl.w	ip, r3, lr
 800194c:	bf28      	it	cs
 800194e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001952:	fa43 f305 	asr.w	r3, r3, r5
 8001956:	18c0      	adds	r0, r0, r3
 8001958:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800195c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001960:	d507      	bpl.n	8001972 <__adddf3+0xe6>
 8001962:	f04f 0e00 	mov.w	lr, #0
 8001966:	f1dc 0c00 	rsbs	ip, ip, #0
 800196a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800196e:	eb6e 0101 	sbc.w	r1, lr, r1
 8001972:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001976:	d31b      	bcc.n	80019b0 <__adddf3+0x124>
 8001978:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800197c:	d30c      	bcc.n	8001998 <__adddf3+0x10c>
 800197e:	0849      	lsrs	r1, r1, #1
 8001980:	ea5f 0030 	movs.w	r0, r0, rrx
 8001984:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001988:	f104 0401 	add.w	r4, r4, #1
 800198c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001990:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001994:	f080 809a 	bcs.w	8001acc <__adddf3+0x240>
 8001998:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800199c:	bf08      	it	eq
 800199e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80019a2:	f150 0000 	adcs.w	r0, r0, #0
 80019a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80019aa:	ea41 0105 	orr.w	r1, r1, r5
 80019ae:	bd30      	pop	{r4, r5, pc}
 80019b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80019b4:	4140      	adcs	r0, r0
 80019b6:	eb41 0101 	adc.w	r1, r1, r1
 80019ba:	3c01      	subs	r4, #1
 80019bc:	bf28      	it	cs
 80019be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80019c2:	d2e9      	bcs.n	8001998 <__adddf3+0x10c>
 80019c4:	f091 0f00 	teq	r1, #0
 80019c8:	bf04      	itt	eq
 80019ca:	4601      	moveq	r1, r0
 80019cc:	2000      	moveq	r0, #0
 80019ce:	fab1 f381 	clz	r3, r1
 80019d2:	bf08      	it	eq
 80019d4:	3320      	addeq	r3, #32
 80019d6:	f1a3 030b 	sub.w	r3, r3, #11
 80019da:	f1b3 0220 	subs.w	r2, r3, #32
 80019de:	da0c      	bge.n	80019fa <__adddf3+0x16e>
 80019e0:	320c      	adds	r2, #12
 80019e2:	dd08      	ble.n	80019f6 <__adddf3+0x16a>
 80019e4:	f102 0c14 	add.w	ip, r2, #20
 80019e8:	f1c2 020c 	rsb	r2, r2, #12
 80019ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80019f0:	fa21 f102 	lsr.w	r1, r1, r2
 80019f4:	e00c      	b.n	8001a10 <__adddf3+0x184>
 80019f6:	f102 0214 	add.w	r2, r2, #20
 80019fa:	bfd8      	it	le
 80019fc:	f1c2 0c20 	rsble	ip, r2, #32
 8001a00:	fa01 f102 	lsl.w	r1, r1, r2
 8001a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001a08:	bfdc      	itt	le
 8001a0a:	ea41 010c 	orrle.w	r1, r1, ip
 8001a0e:	4090      	lslle	r0, r2
 8001a10:	1ae4      	subs	r4, r4, r3
 8001a12:	bfa2      	ittt	ge
 8001a14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001a18:	4329      	orrge	r1, r5
 8001a1a:	bd30      	popge	{r4, r5, pc}
 8001a1c:	ea6f 0404 	mvn.w	r4, r4
 8001a20:	3c1f      	subs	r4, #31
 8001a22:	da1c      	bge.n	8001a5e <__adddf3+0x1d2>
 8001a24:	340c      	adds	r4, #12
 8001a26:	dc0e      	bgt.n	8001a46 <__adddf3+0x1ba>
 8001a28:	f104 0414 	add.w	r4, r4, #20
 8001a2c:	f1c4 0220 	rsb	r2, r4, #32
 8001a30:	fa20 f004 	lsr.w	r0, r0, r4
 8001a34:	fa01 f302 	lsl.w	r3, r1, r2
 8001a38:	ea40 0003 	orr.w	r0, r0, r3
 8001a3c:	fa21 f304 	lsr.w	r3, r1, r4
 8001a40:	ea45 0103 	orr.w	r1, r5, r3
 8001a44:	bd30      	pop	{r4, r5, pc}
 8001a46:	f1c4 040c 	rsb	r4, r4, #12
 8001a4a:	f1c4 0220 	rsb	r2, r4, #32
 8001a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8001a52:	fa01 f304 	lsl.w	r3, r1, r4
 8001a56:	ea40 0003 	orr.w	r0, r0, r3
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	bd30      	pop	{r4, r5, pc}
 8001a5e:	fa21 f004 	lsr.w	r0, r1, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	bd30      	pop	{r4, r5, pc}
 8001a66:	f094 0f00 	teq	r4, #0
 8001a6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8001a6e:	bf06      	itte	eq
 8001a70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8001a74:	3401      	addeq	r4, #1
 8001a76:	3d01      	subne	r5, #1
 8001a78:	e74e      	b.n	8001918 <__adddf3+0x8c>
 8001a7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001a7e:	bf18      	it	ne
 8001a80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001a84:	d029      	beq.n	8001ada <__adddf3+0x24e>
 8001a86:	ea94 0f05 	teq	r4, r5
 8001a8a:	bf08      	it	eq
 8001a8c:	ea90 0f02 	teqeq	r0, r2
 8001a90:	d005      	beq.n	8001a9e <__adddf3+0x212>
 8001a92:	ea54 0c00 	orrs.w	ip, r4, r0
 8001a96:	bf04      	itt	eq
 8001a98:	4619      	moveq	r1, r3
 8001a9a:	4610      	moveq	r0, r2
 8001a9c:	bd30      	pop	{r4, r5, pc}
 8001a9e:	ea91 0f03 	teq	r1, r3
 8001aa2:	bf1e      	ittt	ne
 8001aa4:	2100      	movne	r1, #0
 8001aa6:	2000      	movne	r0, #0
 8001aa8:	bd30      	popne	{r4, r5, pc}
 8001aaa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001aae:	d105      	bne.n	8001abc <__adddf3+0x230>
 8001ab0:	0040      	lsls	r0, r0, #1
 8001ab2:	4149      	adcs	r1, r1
 8001ab4:	bf28      	it	cs
 8001ab6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001aba:	bd30      	pop	{r4, r5, pc}
 8001abc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001ac0:	bf3c      	itt	cc
 8001ac2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001ac6:	bd30      	popcc	{r4, r5, pc}
 8001ac8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001acc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001ad0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	bd30      	pop	{r4, r5, pc}
 8001ada:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001ade:	bf1a      	itte	ne
 8001ae0:	4619      	movne	r1, r3
 8001ae2:	4610      	movne	r0, r2
 8001ae4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001ae8:	bf1c      	itt	ne
 8001aea:	460b      	movne	r3, r1
 8001aec:	4602      	movne	r2, r0
 8001aee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001af2:	bf06      	itte	eq
 8001af4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001af8:	ea91 0f03 	teqeq	r1, r3
 8001afc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001b00:	bd30      	pop	{r4, r5, pc}
 8001b02:	bf00      	nop

08001b04 <__aeabi_ui2d>:
 8001b04:	f090 0f00 	teq	r0, #0
 8001b08:	bf04      	itt	eq
 8001b0a:	2100      	moveq	r1, #0
 8001b0c:	4770      	bxeq	lr
 8001b0e:	b530      	push	{r4, r5, lr}
 8001b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001b18:	f04f 0500 	mov.w	r5, #0
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	e750      	b.n	80019c4 <__adddf3+0x138>
 8001b22:	bf00      	nop

08001b24 <__aeabi_i2d>:
 8001b24:	f090 0f00 	teq	r0, #0
 8001b28:	bf04      	itt	eq
 8001b2a:	2100      	moveq	r1, #0
 8001b2c:	4770      	bxeq	lr
 8001b2e:	b530      	push	{r4, r5, lr}
 8001b30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001b34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001b38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001b3c:	bf48      	it	mi
 8001b3e:	4240      	negmi	r0, r0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	e73e      	b.n	80019c4 <__adddf3+0x138>
 8001b46:	bf00      	nop

08001b48 <__aeabi_f2d>:
 8001b48:	0042      	lsls	r2, r0, #1
 8001b4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8001b52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8001b56:	bf1f      	itttt	ne
 8001b58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001b5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001b60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001b64:	4770      	bxne	lr
 8001b66:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8001b6a:	bf08      	it	eq
 8001b6c:	4770      	bxeq	lr
 8001b6e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8001b72:	bf04      	itt	eq
 8001b74:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001b78:	4770      	bxeq	lr
 8001b7a:	b530      	push	{r4, r5, lr}
 8001b7c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001b80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001b84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001b88:	e71c      	b.n	80019c4 <__adddf3+0x138>
 8001b8a:	bf00      	nop

08001b8c <__aeabi_ul2d>:
 8001b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8001b90:	bf08      	it	eq
 8001b92:	4770      	bxeq	lr
 8001b94:	b530      	push	{r4, r5, lr}
 8001b96:	f04f 0500 	mov.w	r5, #0
 8001b9a:	e00a      	b.n	8001bb2 <__aeabi_l2d+0x16>

08001b9c <__aeabi_l2d>:
 8001b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8001ba0:	bf08      	it	eq
 8001ba2:	4770      	bxeq	lr
 8001ba4:	b530      	push	{r4, r5, lr}
 8001ba6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001baa:	d502      	bpl.n	8001bb2 <__aeabi_l2d+0x16>
 8001bac:	4240      	negs	r0, r0
 8001bae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001bb2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001bb6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001bba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001bbe:	f43f aed8 	beq.w	8001972 <__adddf3+0xe6>
 8001bc2:	f04f 0203 	mov.w	r2, #3
 8001bc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001bca:	bf18      	it	ne
 8001bcc:	3203      	addne	r2, #3
 8001bce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001bd2:	bf18      	it	ne
 8001bd4:	3203      	addne	r2, #3
 8001bd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001bda:	f1c2 0320 	rsb	r3, r2, #32
 8001bde:	fa00 fc03 	lsl.w	ip, r0, r3
 8001be2:	fa20 f002 	lsr.w	r0, r0, r2
 8001be6:	fa01 fe03 	lsl.w	lr, r1, r3
 8001bea:	ea40 000e 	orr.w	r0, r0, lr
 8001bee:	fa21 f102 	lsr.w	r1, r1, r2
 8001bf2:	4414      	add	r4, r2
 8001bf4:	e6bd      	b.n	8001972 <__adddf3+0xe6>
 8001bf6:	bf00      	nop

08001bf8 <__aeabi_dmul>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001bfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001c02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001c06:	bf1d      	ittte	ne
 8001c08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001c0c:	ea94 0f0c 	teqne	r4, ip
 8001c10:	ea95 0f0c 	teqne	r5, ip
 8001c14:	f000 f8de 	bleq	8001dd4 <__aeabi_dmul+0x1dc>
 8001c18:	442c      	add	r4, r5
 8001c1a:	ea81 0603 	eor.w	r6, r1, r3
 8001c1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001c22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001c26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001c2a:	bf18      	it	ne
 8001c2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001c30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c38:	d038      	beq.n	8001cac <__aeabi_dmul+0xb4>
 8001c3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8001c3e:	f04f 0500 	mov.w	r5, #0
 8001c42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001c46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001c4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001c4e:	f04f 0600 	mov.w	r6, #0
 8001c52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001c56:	f09c 0f00 	teq	ip, #0
 8001c5a:	bf18      	it	ne
 8001c5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8001c60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001c64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001c68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001c6c:	d204      	bcs.n	8001c78 <__aeabi_dmul+0x80>
 8001c6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001c72:	416d      	adcs	r5, r5
 8001c74:	eb46 0606 	adc.w	r6, r6, r6
 8001c78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001c7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001c80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001c84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001c88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001c8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001c90:	bf88      	it	hi
 8001c92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001c96:	d81e      	bhi.n	8001cd6 <__aeabi_dmul+0xde>
 8001c98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001c9c:	bf08      	it	eq
 8001c9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001ca2:	f150 0000 	adcs.w	r0, r0, #0
 8001ca6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001cb0:	ea46 0101 	orr.w	r1, r6, r1
 8001cb4:	ea40 0002 	orr.w	r0, r0, r2
 8001cb8:	ea81 0103 	eor.w	r1, r1, r3
 8001cbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001cc0:	bfc2      	ittt	gt
 8001cc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001cc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001cca:	bd70      	popgt	{r4, r5, r6, pc}
 8001ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001cd0:	f04f 0e00 	mov.w	lr, #0
 8001cd4:	3c01      	subs	r4, #1
 8001cd6:	f300 80ab 	bgt.w	8001e30 <__aeabi_dmul+0x238>
 8001cda:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001cde:	bfde      	ittt	le
 8001ce0:	2000      	movle	r0, #0
 8001ce2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001ce6:	bd70      	pople	{r4, r5, r6, pc}
 8001ce8:	f1c4 0400 	rsb	r4, r4, #0
 8001cec:	3c20      	subs	r4, #32
 8001cee:	da35      	bge.n	8001d5c <__aeabi_dmul+0x164>
 8001cf0:	340c      	adds	r4, #12
 8001cf2:	dc1b      	bgt.n	8001d2c <__aeabi_dmul+0x134>
 8001cf4:	f104 0414 	add.w	r4, r4, #20
 8001cf8:	f1c4 0520 	rsb	r5, r4, #32
 8001cfc:	fa00 f305 	lsl.w	r3, r0, r5
 8001d00:	fa20 f004 	lsr.w	r0, r0, r4
 8001d04:	fa01 f205 	lsl.w	r2, r1, r5
 8001d08:	ea40 0002 	orr.w	r0, r0, r2
 8001d0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001d10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001d14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001d18:	fa21 f604 	lsr.w	r6, r1, r4
 8001d1c:	eb42 0106 	adc.w	r1, r2, r6
 8001d20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001d24:	bf08      	it	eq
 8001d26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	f1c4 040c 	rsb	r4, r4, #12
 8001d30:	f1c4 0520 	rsb	r5, r4, #32
 8001d34:	fa00 f304 	lsl.w	r3, r0, r4
 8001d38:	fa20 f005 	lsr.w	r0, r0, r5
 8001d3c:	fa01 f204 	lsl.w	r2, r1, r4
 8001d40:	ea40 0002 	orr.w	r0, r0, r2
 8001d44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001d48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001d4c:	f141 0100 	adc.w	r1, r1, #0
 8001d50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001d54:	bf08      	it	eq
 8001d56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f1c4 0520 	rsb	r5, r4, #32
 8001d60:	fa00 f205 	lsl.w	r2, r0, r5
 8001d64:	ea4e 0e02 	orr.w	lr, lr, r2
 8001d68:	fa20 f304 	lsr.w	r3, r0, r4
 8001d6c:	fa01 f205 	lsl.w	r2, r1, r5
 8001d70:	ea43 0302 	orr.w	r3, r3, r2
 8001d74:	fa21 f004 	lsr.w	r0, r1, r4
 8001d78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001d7c:	fa21 f204 	lsr.w	r2, r1, r4
 8001d80:	ea20 0002 	bic.w	r0, r0, r2
 8001d84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001d8c:	bf08      	it	eq
 8001d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	f094 0f00 	teq	r4, #0
 8001d98:	d10f      	bne.n	8001dba <__aeabi_dmul+0x1c2>
 8001d9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001d9e:	0040      	lsls	r0, r0, #1
 8001da0:	eb41 0101 	adc.w	r1, r1, r1
 8001da4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001da8:	bf08      	it	eq
 8001daa:	3c01      	subeq	r4, #1
 8001dac:	d0f7      	beq.n	8001d9e <__aeabi_dmul+0x1a6>
 8001dae:	ea41 0106 	orr.w	r1, r1, r6
 8001db2:	f095 0f00 	teq	r5, #0
 8001db6:	bf18      	it	ne
 8001db8:	4770      	bxne	lr
 8001dba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	eb43 0303 	adc.w	r3, r3, r3
 8001dc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001dc8:	bf08      	it	eq
 8001dca:	3d01      	subeq	r5, #1
 8001dcc:	d0f7      	beq.n	8001dbe <__aeabi_dmul+0x1c6>
 8001dce:	ea43 0306 	orr.w	r3, r3, r6
 8001dd2:	4770      	bx	lr
 8001dd4:	ea94 0f0c 	teq	r4, ip
 8001dd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001ddc:	bf18      	it	ne
 8001dde:	ea95 0f0c 	teqne	r5, ip
 8001de2:	d00c      	beq.n	8001dfe <__aeabi_dmul+0x206>
 8001de4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001de8:	bf18      	it	ne
 8001dea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001dee:	d1d1      	bne.n	8001d94 <__aeabi_dmul+0x19c>
 8001df0:	ea81 0103 	eor.w	r1, r1, r3
 8001df4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001e02:	bf06      	itte	eq
 8001e04:	4610      	moveq	r0, r2
 8001e06:	4619      	moveq	r1, r3
 8001e08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001e0c:	d019      	beq.n	8001e42 <__aeabi_dmul+0x24a>
 8001e0e:	ea94 0f0c 	teq	r4, ip
 8001e12:	d102      	bne.n	8001e1a <__aeabi_dmul+0x222>
 8001e14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001e18:	d113      	bne.n	8001e42 <__aeabi_dmul+0x24a>
 8001e1a:	ea95 0f0c 	teq	r5, ip
 8001e1e:	d105      	bne.n	8001e2c <__aeabi_dmul+0x234>
 8001e20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001e24:	bf1c      	itt	ne
 8001e26:	4610      	movne	r0, r2
 8001e28:	4619      	movne	r1, r3
 8001e2a:	d10a      	bne.n	8001e42 <__aeabi_dmul+0x24a>
 8001e2c:	ea81 0103 	eor.w	r1, r1, r3
 8001e30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001e34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001e38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
 8001e42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001e46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}

08001e4c <__aeabi_ddiv>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001e52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001e56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001e5a:	bf1d      	ittte	ne
 8001e5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001e60:	ea94 0f0c 	teqne	r4, ip
 8001e64:	ea95 0f0c 	teqne	r5, ip
 8001e68:	f000 f8a7 	bleq	8001fba <__aeabi_ddiv+0x16e>
 8001e6c:	eba4 0405 	sub.w	r4, r4, r5
 8001e70:	ea81 0e03 	eor.w	lr, r1, r3
 8001e74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001e78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001e7c:	f000 8088 	beq.w	8001f90 <__aeabi_ddiv+0x144>
 8001e80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001e84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001e88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001e8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001e90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001e94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001e98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001e9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001ea0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001ea4:	429d      	cmp	r5, r3
 8001ea6:	bf08      	it	eq
 8001ea8:	4296      	cmpeq	r6, r2
 8001eaa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001eae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001eb2:	d202      	bcs.n	8001eba <__aeabi_ddiv+0x6e>
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8001eba:	1ab6      	subs	r6, r6, r2
 8001ebc:	eb65 0503 	sbc.w	r5, r5, r3
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	ea4f 0232 	mov.w	r2, r2, rrx
 8001ec6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001eca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001ece:	ebb6 0e02 	subs.w	lr, r6, r2
 8001ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001ed6:	bf22      	ittt	cs
 8001ed8:	1ab6      	subcs	r6, r6, r2
 8001eda:	4675      	movcs	r5, lr
 8001edc:	ea40 000c 	orrcs.w	r0, r0, ip
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	ea4f 0232 	mov.w	r2, r2, rrx
 8001ee6:	ebb6 0e02 	subs.w	lr, r6, r2
 8001eea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001eee:	bf22      	ittt	cs
 8001ef0:	1ab6      	subcs	r6, r6, r2
 8001ef2:	4675      	movcs	r5, lr
 8001ef4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	ea4f 0232 	mov.w	r2, r2, rrx
 8001efe:	ebb6 0e02 	subs.w	lr, r6, r2
 8001f02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001f06:	bf22      	ittt	cs
 8001f08:	1ab6      	subcs	r6, r6, r2
 8001f0a:	4675      	movcs	r5, lr
 8001f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	ea4f 0232 	mov.w	r2, r2, rrx
 8001f16:	ebb6 0e02 	subs.w	lr, r6, r2
 8001f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001f1e:	bf22      	ittt	cs
 8001f20:	1ab6      	subcs	r6, r6, r2
 8001f22:	4675      	movcs	r5, lr
 8001f24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001f28:	ea55 0e06 	orrs.w	lr, r5, r6
 8001f2c:	d018      	beq.n	8001f60 <__aeabi_ddiv+0x114>
 8001f2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001f32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001f36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001f3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001f3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001f42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001f46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001f4a:	d1c0      	bne.n	8001ece <__aeabi_ddiv+0x82>
 8001f4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001f50:	d10b      	bne.n	8001f6a <__aeabi_ddiv+0x11e>
 8001f52:	ea41 0100 	orr.w	r1, r1, r0
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8001f5e:	e7b6      	b.n	8001ece <__aeabi_ddiv+0x82>
 8001f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001f64:	bf04      	itt	eq
 8001f66:	4301      	orreq	r1, r0
 8001f68:	2000      	moveq	r0, #0
 8001f6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001f6e:	bf88      	it	hi
 8001f70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001f74:	f63f aeaf 	bhi.w	8001cd6 <__aeabi_dmul+0xde>
 8001f78:	ebb5 0c03 	subs.w	ip, r5, r3
 8001f7c:	bf04      	itt	eq
 8001f7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001f82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001f86:	f150 0000 	adcs.w	r0, r0, #0
 8001f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
 8001f90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001f94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001f98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001f9c:	bfc2      	ittt	gt
 8001f9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001fa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001fa6:	bd70      	popgt	{r4, r5, r6, pc}
 8001fa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001fac:	f04f 0e00 	mov.w	lr, #0
 8001fb0:	3c01      	subs	r4, #1
 8001fb2:	e690      	b.n	8001cd6 <__aeabi_dmul+0xde>
 8001fb4:	ea45 0e06 	orr.w	lr, r5, r6
 8001fb8:	e68d      	b.n	8001cd6 <__aeabi_dmul+0xde>
 8001fba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001fbe:	ea94 0f0c 	teq	r4, ip
 8001fc2:	bf08      	it	eq
 8001fc4:	ea95 0f0c 	teqeq	r5, ip
 8001fc8:	f43f af3b 	beq.w	8001e42 <__aeabi_dmul+0x24a>
 8001fcc:	ea94 0f0c 	teq	r4, ip
 8001fd0:	d10a      	bne.n	8001fe8 <__aeabi_ddiv+0x19c>
 8001fd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001fd6:	f47f af34 	bne.w	8001e42 <__aeabi_dmul+0x24a>
 8001fda:	ea95 0f0c 	teq	r5, ip
 8001fde:	f47f af25 	bne.w	8001e2c <__aeabi_dmul+0x234>
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	e72c      	b.n	8001e42 <__aeabi_dmul+0x24a>
 8001fe8:	ea95 0f0c 	teq	r5, ip
 8001fec:	d106      	bne.n	8001ffc <__aeabi_ddiv+0x1b0>
 8001fee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001ff2:	f43f aefd 	beq.w	8001df0 <__aeabi_dmul+0x1f8>
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	e722      	b.n	8001e42 <__aeabi_dmul+0x24a>
 8001ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002000:	bf18      	it	ne
 8002002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002006:	f47f aec5 	bne.w	8001d94 <__aeabi_dmul+0x19c>
 800200a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800200e:	f47f af0d 	bne.w	8001e2c <__aeabi_dmul+0x234>
 8002012:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002016:	f47f aeeb 	bne.w	8001df0 <__aeabi_dmul+0x1f8>
 800201a:	e712      	b.n	8001e42 <__aeabi_dmul+0x24a>

0800201c <__gedf2>:
 800201c:	f04f 3cff 	mov.w	ip, #4294967295
 8002020:	e006      	b.n	8002030 <__cmpdf2+0x4>
 8002022:	bf00      	nop

08002024 <__ledf2>:
 8002024:	f04f 0c01 	mov.w	ip, #1
 8002028:	e002      	b.n	8002030 <__cmpdf2+0x4>
 800202a:	bf00      	nop

0800202c <__cmpdf2>:
 800202c:	f04f 0c01 	mov.w	ip, #1
 8002030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800203c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002040:	bf18      	it	ne
 8002042:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002046:	d01b      	beq.n	8002080 <__cmpdf2+0x54>
 8002048:	b001      	add	sp, #4
 800204a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800204e:	bf0c      	ite	eq
 8002050:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002054:	ea91 0f03 	teqne	r1, r3
 8002058:	bf02      	ittt	eq
 800205a:	ea90 0f02 	teqeq	r0, r2
 800205e:	2000      	moveq	r0, #0
 8002060:	4770      	bxeq	lr
 8002062:	f110 0f00 	cmn.w	r0, #0
 8002066:	ea91 0f03 	teq	r1, r3
 800206a:	bf58      	it	pl
 800206c:	4299      	cmppl	r1, r3
 800206e:	bf08      	it	eq
 8002070:	4290      	cmpeq	r0, r2
 8002072:	bf2c      	ite	cs
 8002074:	17d8      	asrcs	r0, r3, #31
 8002076:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800207a:	f040 0001 	orr.w	r0, r0, #1
 800207e:	4770      	bx	lr
 8002080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002088:	d102      	bne.n	8002090 <__cmpdf2+0x64>
 800208a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800208e:	d107      	bne.n	80020a0 <__cmpdf2+0x74>
 8002090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002098:	d1d6      	bne.n	8002048 <__cmpdf2+0x1c>
 800209a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800209e:	d0d3      	beq.n	8002048 <__cmpdf2+0x1c>
 80020a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <__aeabi_cdrcmple>:
 80020a8:	4684      	mov	ip, r0
 80020aa:	4610      	mov	r0, r2
 80020ac:	4662      	mov	r2, ip
 80020ae:	468c      	mov	ip, r1
 80020b0:	4619      	mov	r1, r3
 80020b2:	4663      	mov	r3, ip
 80020b4:	e000      	b.n	80020b8 <__aeabi_cdcmpeq>
 80020b6:	bf00      	nop

080020b8 <__aeabi_cdcmpeq>:
 80020b8:	b501      	push	{r0, lr}
 80020ba:	f7ff ffb7 	bl	800202c <__cmpdf2>
 80020be:	2800      	cmp	r0, #0
 80020c0:	bf48      	it	mi
 80020c2:	f110 0f00 	cmnmi.w	r0, #0
 80020c6:	bd01      	pop	{r0, pc}

080020c8 <__aeabi_dcmpeq>:
 80020c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80020cc:	f7ff fff4 	bl	80020b8 <__aeabi_cdcmpeq>
 80020d0:	bf0c      	ite	eq
 80020d2:	2001      	moveq	r0, #1
 80020d4:	2000      	movne	r0, #0
 80020d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80020da:	bf00      	nop

080020dc <__aeabi_dcmplt>:
 80020dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80020e0:	f7ff ffea 	bl	80020b8 <__aeabi_cdcmpeq>
 80020e4:	bf34      	ite	cc
 80020e6:	2001      	movcc	r0, #1
 80020e8:	2000      	movcs	r0, #0
 80020ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80020ee:	bf00      	nop

080020f0 <__aeabi_dcmple>:
 80020f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80020f4:	f7ff ffe0 	bl	80020b8 <__aeabi_cdcmpeq>
 80020f8:	bf94      	ite	ls
 80020fa:	2001      	movls	r0, #1
 80020fc:	2000      	movhi	r0, #0
 80020fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8002102:	bf00      	nop

08002104 <__aeabi_dcmpge>:
 8002104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002108:	f7ff ffce 	bl	80020a8 <__aeabi_cdrcmple>
 800210c:	bf94      	ite	ls
 800210e:	2001      	movls	r0, #1
 8002110:	2000      	movhi	r0, #0
 8002112:	f85d fb08 	ldr.w	pc, [sp], #8
 8002116:	bf00      	nop

08002118 <__aeabi_dcmpgt>:
 8002118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800211c:	f7ff ffc4 	bl	80020a8 <__aeabi_cdrcmple>
 8002120:	bf34      	ite	cc
 8002122:	2001      	movcc	r0, #1
 8002124:	2000      	movcs	r0, #0
 8002126:	f85d fb08 	ldr.w	pc, [sp], #8
 800212a:	bf00      	nop

0800212c <__aeabi_dcmpun>:
 800212c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002134:	d102      	bne.n	800213c <__aeabi_dcmpun+0x10>
 8002136:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800213a:	d10a      	bne.n	8002152 <__aeabi_dcmpun+0x26>
 800213c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002144:	d102      	bne.n	800214c <__aeabi_dcmpun+0x20>
 8002146:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800214a:	d102      	bne.n	8002152 <__aeabi_dcmpun+0x26>
 800214c:	f04f 0000 	mov.w	r0, #0
 8002150:	4770      	bx	lr
 8002152:	f04f 0001 	mov.w	r0, #1
 8002156:	4770      	bx	lr

08002158 <__aeabi_d2iz>:
 8002158:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800215c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002160:	d215      	bcs.n	800218e <__aeabi_d2iz+0x36>
 8002162:	d511      	bpl.n	8002188 <__aeabi_d2iz+0x30>
 8002164:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800216c:	d912      	bls.n	8002194 <__aeabi_d2iz+0x3c>
 800216e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800217a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800217e:	fa23 f002 	lsr.w	r0, r3, r2
 8002182:	bf18      	it	ne
 8002184:	4240      	negne	r0, r0
 8002186:	4770      	bx	lr
 8002188:	f04f 0000 	mov.w	r0, #0
 800218c:	4770      	bx	lr
 800218e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002192:	d105      	bne.n	80021a0 <__aeabi_d2iz+0x48>
 8002194:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002198:	bf08      	it	eq
 800219a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800219e:	4770      	bx	lr
 80021a0:	f04f 0000 	mov.w	r0, #0
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <__aeabi_d2uiz>:
 80021a8:	004a      	lsls	r2, r1, #1
 80021aa:	d211      	bcs.n	80021d0 <__aeabi_d2uiz+0x28>
 80021ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80021b0:	d211      	bcs.n	80021d6 <__aeabi_d2uiz+0x2e>
 80021b2:	d50d      	bpl.n	80021d0 <__aeabi_d2uiz+0x28>
 80021b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80021b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80021bc:	d40e      	bmi.n	80021dc <__aeabi_d2uiz+0x34>
 80021be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80021c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80021ca:	fa23 f002 	lsr.w	r0, r3, r2
 80021ce:	4770      	bx	lr
 80021d0:	f04f 0000 	mov.w	r0, #0
 80021d4:	4770      	bx	lr
 80021d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80021da:	d102      	bne.n	80021e2 <__aeabi_d2uiz+0x3a>
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	4770      	bx	lr
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <__aeabi_d2f>:
 80021e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80021ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80021f0:	bf24      	itt	cs
 80021f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80021f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80021fa:	d90d      	bls.n	8002218 <__aeabi_d2f+0x30>
 80021fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002200:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002204:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002208:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800220c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002210:	bf08      	it	eq
 8002212:	f020 0001 	biceq.w	r0, r0, #1
 8002216:	4770      	bx	lr
 8002218:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800221c:	d121      	bne.n	8002262 <__aeabi_d2f+0x7a>
 800221e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8002222:	bfbc      	itt	lt
 8002224:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002228:	4770      	bxlt	lr
 800222a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800222e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002232:	f1c2 0218 	rsb	r2, r2, #24
 8002236:	f1c2 0c20 	rsb	ip, r2, #32
 800223a:	fa10 f30c 	lsls.w	r3, r0, ip
 800223e:	fa20 f002 	lsr.w	r0, r0, r2
 8002242:	bf18      	it	ne
 8002244:	f040 0001 	orrne.w	r0, r0, #1
 8002248:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800224c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002250:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002254:	ea40 000c 	orr.w	r0, r0, ip
 8002258:	fa23 f302 	lsr.w	r3, r3, r2
 800225c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002260:	e7cc      	b.n	80021fc <__aeabi_d2f+0x14>
 8002262:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8002266:	d107      	bne.n	8002278 <__aeabi_d2f+0x90>
 8002268:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800226c:	bf1e      	ittt	ne
 800226e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8002272:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8002276:	4770      	bxne	lr
 8002278:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800227c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <__gesf2>:
 8002288:	f04f 3cff 	mov.w	ip, #4294967295
 800228c:	e006      	b.n	800229c <__cmpsf2+0x4>
 800228e:	bf00      	nop

08002290 <__lesf2>:
 8002290:	f04f 0c01 	mov.w	ip, #1
 8002294:	e002      	b.n	800229c <__cmpsf2+0x4>
 8002296:	bf00      	nop

08002298 <__cmpsf2>:
 8002298:	f04f 0c01 	mov.w	ip, #1
 800229c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80022a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80022a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80022a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80022ac:	bf18      	it	ne
 80022ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80022b2:	d011      	beq.n	80022d8 <__cmpsf2+0x40>
 80022b4:	b001      	add	sp, #4
 80022b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80022ba:	bf18      	it	ne
 80022bc:	ea90 0f01 	teqne	r0, r1
 80022c0:	bf58      	it	pl
 80022c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80022c6:	bf88      	it	hi
 80022c8:	17c8      	asrhi	r0, r1, #31
 80022ca:	bf38      	it	cc
 80022cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80022d0:	bf18      	it	ne
 80022d2:	f040 0001 	orrne.w	r0, r0, #1
 80022d6:	4770      	bx	lr
 80022d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80022dc:	d102      	bne.n	80022e4 <__cmpsf2+0x4c>
 80022de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80022e2:	d105      	bne.n	80022f0 <__cmpsf2+0x58>
 80022e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80022e8:	d1e4      	bne.n	80022b4 <__cmpsf2+0x1c>
 80022ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80022ee:	d0e1      	beq.n	80022b4 <__cmpsf2+0x1c>
 80022f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <__aeabi_cfrcmple>:
 80022f8:	4684      	mov	ip, r0
 80022fa:	4608      	mov	r0, r1
 80022fc:	4661      	mov	r1, ip
 80022fe:	e7ff      	b.n	8002300 <__aeabi_cfcmpeq>

08002300 <__aeabi_cfcmpeq>:
 8002300:	b50f      	push	{r0, r1, r2, r3, lr}
 8002302:	f7ff ffc9 	bl	8002298 <__cmpsf2>
 8002306:	2800      	cmp	r0, #0
 8002308:	bf48      	it	mi
 800230a:	f110 0f00 	cmnmi.w	r0, #0
 800230e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002310 <__aeabi_fcmpeq>:
 8002310:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002314:	f7ff fff4 	bl	8002300 <__aeabi_cfcmpeq>
 8002318:	bf0c      	ite	eq
 800231a:	2001      	moveq	r0, #1
 800231c:	2000      	movne	r0, #0
 800231e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002322:	bf00      	nop

08002324 <__aeabi_fcmplt>:
 8002324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002328:	f7ff ffea 	bl	8002300 <__aeabi_cfcmpeq>
 800232c:	bf34      	ite	cc
 800232e:	2001      	movcc	r0, #1
 8002330:	2000      	movcs	r0, #0
 8002332:	f85d fb08 	ldr.w	pc, [sp], #8
 8002336:	bf00      	nop

08002338 <__aeabi_fcmple>:
 8002338:	f84d ed08 	str.w	lr, [sp, #-8]!
 800233c:	f7ff ffe0 	bl	8002300 <__aeabi_cfcmpeq>
 8002340:	bf94      	ite	ls
 8002342:	2001      	movls	r0, #1
 8002344:	2000      	movhi	r0, #0
 8002346:	f85d fb08 	ldr.w	pc, [sp], #8
 800234a:	bf00      	nop

0800234c <__aeabi_fcmpge>:
 800234c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002350:	f7ff ffd2 	bl	80022f8 <__aeabi_cfrcmple>
 8002354:	bf94      	ite	ls
 8002356:	2001      	movls	r0, #1
 8002358:	2000      	movhi	r0, #0
 800235a:	f85d fb08 	ldr.w	pc, [sp], #8
 800235e:	bf00      	nop

08002360 <__aeabi_fcmpgt>:
 8002360:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002364:	f7ff ffc8 	bl	80022f8 <__aeabi_cfrcmple>
 8002368:	bf34      	ite	cc
 800236a:	2001      	movcc	r0, #1
 800236c:	2000      	movcs	r0, #0
 800236e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002372:	bf00      	nop

08002374 <__aeabi_d2lz>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4605      	mov	r5, r0
 8002378:	460c      	mov	r4, r1
 800237a:	2200      	movs	r2, #0
 800237c:	2300      	movs	r3, #0
 800237e:	4628      	mov	r0, r5
 8002380:	4621      	mov	r1, r4
 8002382:	f7ff feab 	bl	80020dc <__aeabi_dcmplt>
 8002386:	b928      	cbnz	r0, 8002394 <__aeabi_d2lz+0x20>
 8002388:	4628      	mov	r0, r5
 800238a:	4621      	mov	r1, r4
 800238c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002390:	f000 b80a 	b.w	80023a8 <__aeabi_d2ulz>
 8002394:	4628      	mov	r0, r5
 8002396:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800239a:	f000 f805 	bl	80023a8 <__aeabi_d2ulz>
 800239e:	4240      	negs	r0, r0
 80023a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80023a4:	bd38      	pop	{r3, r4, r5, pc}
 80023a6:	bf00      	nop

080023a8 <__aeabi_d2ulz>:
 80023a8:	b5d0      	push	{r4, r6, r7, lr}
 80023aa:	2200      	movs	r2, #0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <__aeabi_d2ulz+0x34>)
 80023ae:	4606      	mov	r6, r0
 80023b0:	460f      	mov	r7, r1
 80023b2:	f7ff fc21 	bl	8001bf8 <__aeabi_dmul>
 80023b6:	f7ff fef7 	bl	80021a8 <__aeabi_d2uiz>
 80023ba:	4604      	mov	r4, r0
 80023bc:	f7ff fba2 	bl	8001b04 <__aeabi_ui2d>
 80023c0:	2200      	movs	r2, #0
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <__aeabi_d2ulz+0x38>)
 80023c4:	f7ff fc18 	bl	8001bf8 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4630      	mov	r0, r6
 80023ce:	4639      	mov	r1, r7
 80023d0:	f7ff fa5a 	bl	8001888 <__aeabi_dsub>
 80023d4:	f7ff fee8 	bl	80021a8 <__aeabi_d2uiz>
 80023d8:	4621      	mov	r1, r4
 80023da:	bdd0      	pop	{r4, r6, r7, pc}
 80023dc:	3df00000 	.word	0x3df00000
 80023e0:	41f00000 	.word	0x41f00000

080023e4 <__aeabi_frsub>:
 80023e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80023e8:	e002      	b.n	80023f0 <__addsf3>
 80023ea:	bf00      	nop

080023ec <__aeabi_fsub>:
 80023ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080023f0 <__addsf3>:
 80023f0:	0042      	lsls	r2, r0, #1
 80023f2:	bf1f      	itttt	ne
 80023f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80023f8:	ea92 0f03 	teqne	r2, r3
 80023fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8002400:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002404:	d06a      	beq.n	80024dc <__addsf3+0xec>
 8002406:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800240a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800240e:	bfc1      	itttt	gt
 8002410:	18d2      	addgt	r2, r2, r3
 8002412:	4041      	eorgt	r1, r0
 8002414:	4048      	eorgt	r0, r1
 8002416:	4041      	eorgt	r1, r0
 8002418:	bfb8      	it	lt
 800241a:	425b      	neglt	r3, r3
 800241c:	2b19      	cmp	r3, #25
 800241e:	bf88      	it	hi
 8002420:	4770      	bxhi	lr
 8002422:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8002426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800242a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800242e:	bf18      	it	ne
 8002430:	4240      	negne	r0, r0
 8002432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002436:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800243a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800243e:	bf18      	it	ne
 8002440:	4249      	negne	r1, r1
 8002442:	ea92 0f03 	teq	r2, r3
 8002446:	d03f      	beq.n	80024c8 <__addsf3+0xd8>
 8002448:	f1a2 0201 	sub.w	r2, r2, #1
 800244c:	fa41 fc03 	asr.w	ip, r1, r3
 8002450:	eb10 000c 	adds.w	r0, r0, ip
 8002454:	f1c3 0320 	rsb	r3, r3, #32
 8002458:	fa01 f103 	lsl.w	r1, r1, r3
 800245c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002460:	d502      	bpl.n	8002468 <__addsf3+0x78>
 8002462:	4249      	negs	r1, r1
 8002464:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8002468:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800246c:	d313      	bcc.n	8002496 <__addsf3+0xa6>
 800246e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002472:	d306      	bcc.n	8002482 <__addsf3+0x92>
 8002474:	0840      	lsrs	r0, r0, #1
 8002476:	ea4f 0131 	mov.w	r1, r1, rrx
 800247a:	f102 0201 	add.w	r2, r2, #1
 800247e:	2afe      	cmp	r2, #254	; 0xfe
 8002480:	d251      	bcs.n	8002526 <__addsf3+0x136>
 8002482:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8002486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800248a:	bf08      	it	eq
 800248c:	f020 0001 	biceq.w	r0, r0, #1
 8002490:	ea40 0003 	orr.w	r0, r0, r3
 8002494:	4770      	bx	lr
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	eb40 0000 	adc.w	r0, r0, r0
 800249c:	3a01      	subs	r2, #1
 800249e:	bf28      	it	cs
 80024a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80024a4:	d2ed      	bcs.n	8002482 <__addsf3+0x92>
 80024a6:	fab0 fc80 	clz	ip, r0
 80024aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80024ae:	ebb2 020c 	subs.w	r2, r2, ip
 80024b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80024b6:	bfaa      	itet	ge
 80024b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80024bc:	4252      	neglt	r2, r2
 80024be:	4318      	orrge	r0, r3
 80024c0:	bfbc      	itt	lt
 80024c2:	40d0      	lsrlt	r0, r2
 80024c4:	4318      	orrlt	r0, r3
 80024c6:	4770      	bx	lr
 80024c8:	f092 0f00 	teq	r2, #0
 80024cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80024d0:	bf06      	itte	eq
 80024d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80024d6:	3201      	addeq	r2, #1
 80024d8:	3b01      	subne	r3, #1
 80024da:	e7b5      	b.n	8002448 <__addsf3+0x58>
 80024dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80024e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80024e4:	bf18      	it	ne
 80024e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80024ea:	d021      	beq.n	8002530 <__addsf3+0x140>
 80024ec:	ea92 0f03 	teq	r2, r3
 80024f0:	d004      	beq.n	80024fc <__addsf3+0x10c>
 80024f2:	f092 0f00 	teq	r2, #0
 80024f6:	bf08      	it	eq
 80024f8:	4608      	moveq	r0, r1
 80024fa:	4770      	bx	lr
 80024fc:	ea90 0f01 	teq	r0, r1
 8002500:	bf1c      	itt	ne
 8002502:	2000      	movne	r0, #0
 8002504:	4770      	bxne	lr
 8002506:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800250a:	d104      	bne.n	8002516 <__addsf3+0x126>
 800250c:	0040      	lsls	r0, r0, #1
 800250e:	bf28      	it	cs
 8002510:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8002514:	4770      	bx	lr
 8002516:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800251a:	bf3c      	itt	cc
 800251c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8002520:	4770      	bxcc	lr
 8002522:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002526:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800252a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800252e:	4770      	bx	lr
 8002530:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8002534:	bf16      	itet	ne
 8002536:	4608      	movne	r0, r1
 8002538:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800253c:	4601      	movne	r1, r0
 800253e:	0242      	lsls	r2, r0, #9
 8002540:	bf06      	itte	eq
 8002542:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8002546:	ea90 0f01 	teqeq	r0, r1
 800254a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800254e:	4770      	bx	lr

08002550 <__aeabi_ui2f>:
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e004      	b.n	8002560 <__aeabi_i2f+0x8>
 8002556:	bf00      	nop

08002558 <__aeabi_i2f>:
 8002558:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800255c:	bf48      	it	mi
 800255e:	4240      	negmi	r0, r0
 8002560:	ea5f 0c00 	movs.w	ip, r0
 8002564:	bf08      	it	eq
 8002566:	4770      	bxeq	lr
 8002568:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800256c:	4601      	mov	r1, r0
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	e01c      	b.n	80025ae <__aeabi_l2f+0x2a>

08002574 <__aeabi_ul2f>:
 8002574:	ea50 0201 	orrs.w	r2, r0, r1
 8002578:	bf08      	it	eq
 800257a:	4770      	bxeq	lr
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e00a      	b.n	8002598 <__aeabi_l2f+0x14>
 8002582:	bf00      	nop

08002584 <__aeabi_l2f>:
 8002584:	ea50 0201 	orrs.w	r2, r0, r1
 8002588:	bf08      	it	eq
 800258a:	4770      	bxeq	lr
 800258c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8002590:	d502      	bpl.n	8002598 <__aeabi_l2f+0x14>
 8002592:	4240      	negs	r0, r0
 8002594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002598:	ea5f 0c01 	movs.w	ip, r1
 800259c:	bf02      	ittt	eq
 800259e:	4684      	moveq	ip, r0
 80025a0:	4601      	moveq	r1, r0
 80025a2:	2000      	moveq	r0, #0
 80025a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80025a8:	bf08      	it	eq
 80025aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80025ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80025b2:	fabc f28c 	clz	r2, ip
 80025b6:	3a08      	subs	r2, #8
 80025b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80025bc:	db10      	blt.n	80025e0 <__aeabi_l2f+0x5c>
 80025be:	fa01 fc02 	lsl.w	ip, r1, r2
 80025c2:	4463      	add	r3, ip
 80025c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80025c8:	f1c2 0220 	rsb	r2, r2, #32
 80025cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80025d0:	fa20 f202 	lsr.w	r2, r0, r2
 80025d4:	eb43 0002 	adc.w	r0, r3, r2
 80025d8:	bf08      	it	eq
 80025da:	f020 0001 	biceq.w	r0, r0, #1
 80025de:	4770      	bx	lr
 80025e0:	f102 0220 	add.w	r2, r2, #32
 80025e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80025e8:	f1c2 0220 	rsb	r2, r2, #32
 80025ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80025f0:	fa21 f202 	lsr.w	r2, r1, r2
 80025f4:	eb43 0002 	adc.w	r0, r3, r2
 80025f8:	bf08      	it	eq
 80025fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80025fe:	4770      	bx	lr

08002600 <__aeabi_fmul>:
 8002600:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002604:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002608:	bf1e      	ittt	ne
 800260a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800260e:	ea92 0f0c 	teqne	r2, ip
 8002612:	ea93 0f0c 	teqne	r3, ip
 8002616:	d06f      	beq.n	80026f8 <__aeabi_fmul+0xf8>
 8002618:	441a      	add	r2, r3
 800261a:	ea80 0c01 	eor.w	ip, r0, r1
 800261e:	0240      	lsls	r0, r0, #9
 8002620:	bf18      	it	ne
 8002622:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8002626:	d01e      	beq.n	8002666 <__aeabi_fmul+0x66>
 8002628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800262c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8002630:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8002634:	fba0 3101 	umull	r3, r1, r0, r1
 8002638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800263c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002640:	bf3e      	ittt	cc
 8002642:	0049      	lslcc	r1, r1, #1
 8002644:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8002648:	005b      	lslcc	r3, r3, #1
 800264a:	ea40 0001 	orr.w	r0, r0, r1
 800264e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8002652:	2afd      	cmp	r2, #253	; 0xfd
 8002654:	d81d      	bhi.n	8002692 <__aeabi_fmul+0x92>
 8002656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800265a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800265e:	bf08      	it	eq
 8002660:	f020 0001 	biceq.w	r0, r0, #1
 8002664:	4770      	bx	lr
 8002666:	f090 0f00 	teq	r0, #0
 800266a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800266e:	bf08      	it	eq
 8002670:	0249      	lsleq	r1, r1, #9
 8002672:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002676:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800267a:	3a7f      	subs	r2, #127	; 0x7f
 800267c:	bfc2      	ittt	gt
 800267e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002682:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002686:	4770      	bxgt	lr
 8002688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	3a01      	subs	r2, #1
 8002692:	dc5d      	bgt.n	8002750 <__aeabi_fmul+0x150>
 8002694:	f112 0f19 	cmn.w	r2, #25
 8002698:	bfdc      	itt	le
 800269a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800269e:	4770      	bxle	lr
 80026a0:	f1c2 0200 	rsb	r2, r2, #0
 80026a4:	0041      	lsls	r1, r0, #1
 80026a6:	fa21 f102 	lsr.w	r1, r1, r2
 80026aa:	f1c2 0220 	rsb	r2, r2, #32
 80026ae:	fa00 fc02 	lsl.w	ip, r0, r2
 80026b2:	ea5f 0031 	movs.w	r0, r1, rrx
 80026b6:	f140 0000 	adc.w	r0, r0, #0
 80026ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80026be:	bf08      	it	eq
 80026c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80026c4:	4770      	bx	lr
 80026c6:	f092 0f00 	teq	r2, #0
 80026ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80026ce:	bf02      	ittt	eq
 80026d0:	0040      	lsleq	r0, r0, #1
 80026d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80026d6:	3a01      	subeq	r2, #1
 80026d8:	d0f9      	beq.n	80026ce <__aeabi_fmul+0xce>
 80026da:	ea40 000c 	orr.w	r0, r0, ip
 80026de:	f093 0f00 	teq	r3, #0
 80026e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80026e6:	bf02      	ittt	eq
 80026e8:	0049      	lsleq	r1, r1, #1
 80026ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80026ee:	3b01      	subeq	r3, #1
 80026f0:	d0f9      	beq.n	80026e6 <__aeabi_fmul+0xe6>
 80026f2:	ea41 010c 	orr.w	r1, r1, ip
 80026f6:	e78f      	b.n	8002618 <__aeabi_fmul+0x18>
 80026f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80026fc:	ea92 0f0c 	teq	r2, ip
 8002700:	bf18      	it	ne
 8002702:	ea93 0f0c 	teqne	r3, ip
 8002706:	d00a      	beq.n	800271e <__aeabi_fmul+0x11e>
 8002708:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800270c:	bf18      	it	ne
 800270e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8002712:	d1d8      	bne.n	80026c6 <__aeabi_fmul+0xc6>
 8002714:	ea80 0001 	eor.w	r0, r0, r1
 8002718:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800271c:	4770      	bx	lr
 800271e:	f090 0f00 	teq	r0, #0
 8002722:	bf17      	itett	ne
 8002724:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8002728:	4608      	moveq	r0, r1
 800272a:	f091 0f00 	teqne	r1, #0
 800272e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8002732:	d014      	beq.n	800275e <__aeabi_fmul+0x15e>
 8002734:	ea92 0f0c 	teq	r2, ip
 8002738:	d101      	bne.n	800273e <__aeabi_fmul+0x13e>
 800273a:	0242      	lsls	r2, r0, #9
 800273c:	d10f      	bne.n	800275e <__aeabi_fmul+0x15e>
 800273e:	ea93 0f0c 	teq	r3, ip
 8002742:	d103      	bne.n	800274c <__aeabi_fmul+0x14c>
 8002744:	024b      	lsls	r3, r1, #9
 8002746:	bf18      	it	ne
 8002748:	4608      	movne	r0, r1
 800274a:	d108      	bne.n	800275e <__aeabi_fmul+0x15e>
 800274c:	ea80 0001 	eor.w	r0, r0, r1
 8002750:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002754:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800275c:	4770      	bx	lr
 800275e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002762:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8002766:	4770      	bx	lr

08002768 <__aeabi_fdiv>:
 8002768:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800276c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002770:	bf1e      	ittt	ne
 8002772:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8002776:	ea92 0f0c 	teqne	r2, ip
 800277a:	ea93 0f0c 	teqne	r3, ip
 800277e:	d069      	beq.n	8002854 <__aeabi_fdiv+0xec>
 8002780:	eba2 0203 	sub.w	r2, r2, r3
 8002784:	ea80 0c01 	eor.w	ip, r0, r1
 8002788:	0249      	lsls	r1, r1, #9
 800278a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800278e:	d037      	beq.n	8002800 <__aeabi_fdiv+0x98>
 8002790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002794:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8002798:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800279c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf38      	it	cc
 80027a4:	005b      	lslcc	r3, r3, #1
 80027a6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80027aa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80027ae:	428b      	cmp	r3, r1
 80027b0:	bf24      	itt	cs
 80027b2:	1a5b      	subcs	r3, r3, r1
 80027b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80027b8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80027bc:	bf24      	itt	cs
 80027be:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80027c2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80027c6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80027ca:	bf24      	itt	cs
 80027cc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80027d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80027d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80027d8:	bf24      	itt	cs
 80027da:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80027de:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	bf18      	it	ne
 80027e6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80027ea:	d1e0      	bne.n	80027ae <__aeabi_fdiv+0x46>
 80027ec:	2afd      	cmp	r2, #253	; 0xfd
 80027ee:	f63f af50 	bhi.w	8002692 <__aeabi_fmul+0x92>
 80027f2:	428b      	cmp	r3, r1
 80027f4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80027f8:	bf08      	it	eq
 80027fa:	f020 0001 	biceq.w	r0, r0, #1
 80027fe:	4770      	bx	lr
 8002800:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002804:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002808:	327f      	adds	r2, #127	; 0x7f
 800280a:	bfc2      	ittt	gt
 800280c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002810:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002814:	4770      	bxgt	lr
 8002816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	3a01      	subs	r2, #1
 8002820:	e737      	b.n	8002692 <__aeabi_fmul+0x92>
 8002822:	f092 0f00 	teq	r2, #0
 8002826:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800282a:	bf02      	ittt	eq
 800282c:	0040      	lsleq	r0, r0, #1
 800282e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002832:	3a01      	subeq	r2, #1
 8002834:	d0f9      	beq.n	800282a <__aeabi_fdiv+0xc2>
 8002836:	ea40 000c 	orr.w	r0, r0, ip
 800283a:	f093 0f00 	teq	r3, #0
 800283e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002842:	bf02      	ittt	eq
 8002844:	0049      	lsleq	r1, r1, #1
 8002846:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800284a:	3b01      	subeq	r3, #1
 800284c:	d0f9      	beq.n	8002842 <__aeabi_fdiv+0xda>
 800284e:	ea41 010c 	orr.w	r1, r1, ip
 8002852:	e795      	b.n	8002780 <__aeabi_fdiv+0x18>
 8002854:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002858:	ea92 0f0c 	teq	r2, ip
 800285c:	d108      	bne.n	8002870 <__aeabi_fdiv+0x108>
 800285e:	0242      	lsls	r2, r0, #9
 8002860:	f47f af7d 	bne.w	800275e <__aeabi_fmul+0x15e>
 8002864:	ea93 0f0c 	teq	r3, ip
 8002868:	f47f af70 	bne.w	800274c <__aeabi_fmul+0x14c>
 800286c:	4608      	mov	r0, r1
 800286e:	e776      	b.n	800275e <__aeabi_fmul+0x15e>
 8002870:	ea93 0f0c 	teq	r3, ip
 8002874:	d104      	bne.n	8002880 <__aeabi_fdiv+0x118>
 8002876:	024b      	lsls	r3, r1, #9
 8002878:	f43f af4c 	beq.w	8002714 <__aeabi_fmul+0x114>
 800287c:	4608      	mov	r0, r1
 800287e:	e76e      	b.n	800275e <__aeabi_fmul+0x15e>
 8002880:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002884:	bf18      	it	ne
 8002886:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800288a:	d1ca      	bne.n	8002822 <__aeabi_fdiv+0xba>
 800288c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8002890:	f47f af5c 	bne.w	800274c <__aeabi_fmul+0x14c>
 8002894:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8002898:	f47f af3c 	bne.w	8002714 <__aeabi_fmul+0x114>
 800289c:	e75f      	b.n	800275e <__aeabi_fmul+0x15e>
 800289e:	bf00      	nop

080028a0 <__aeabi_f2uiz>:
 80028a0:	0042      	lsls	r2, r0, #1
 80028a2:	d20e      	bcs.n	80028c2 <__aeabi_f2uiz+0x22>
 80028a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80028a8:	d30b      	bcc.n	80028c2 <__aeabi_f2uiz+0x22>
 80028aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80028ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80028b2:	d409      	bmi.n	80028c8 <__aeabi_f2uiz+0x28>
 80028b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80028b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028bc:	fa23 f002 	lsr.w	r0, r3, r2
 80028c0:	4770      	bx	lr
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	4770      	bx	lr
 80028c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80028cc:	d101      	bne.n	80028d2 <__aeabi_f2uiz+0x32>
 80028ce:	0242      	lsls	r2, r0, #9
 80028d0:	d102      	bne.n	80028d8 <__aeabi_f2uiz+0x38>
 80028d2:	f04f 30ff 	mov.w	r0, #4294967295
 80028d6:	4770      	bx	lr
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <main>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e0:	4a4e      	ldr	r2, [pc, #312]	; (8002a1c <main+0x13c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e2:	494f      	ldr	r1, [pc, #316]	; (8002a20 <main+0x140>)
 80028e4:	6813      	ldr	r3, [r2, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 80028f2:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <main+0x144>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f8:	0412      	lsls	r2, r2, #16
 80028fa:	0c12      	lsrs	r2, r2, #16
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028fc:	4d4a      	ldr	r5, [pc, #296]	; (8002a28 <main+0x148>)
  reg_value  =  (reg_value                                   |
 80028fe:	4313      	orrs	r3, r2
 8002900:	b09d      	sub	sp, #116	; 0x74
  SCB->AIRCR =  reg_value;
 8002902:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002904:	200f      	movs	r0, #15
 8002906:	f7fe fe55 	bl	80015b4 <HAL_InitTick.isra.0>
 800290a:	69ab      	ldr	r3, [r5, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800290c:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <main+0x14c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	61ab      	str	r3, [r5, #24]
 8002914:	69ab      	ldr	r3, [r5, #24]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	9308      	str	r3, [sp, #32]
 800291c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	69eb      	ldr	r3, [r5, #28]
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	61eb      	str	r3, [r5, #28]
 8002926:	69eb      	ldr	r3, [r5, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	9307      	str	r3, [sp, #28]
 800292e:	9b07      	ldr	r3, [sp, #28]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002930:	6853      	ldr	r3, [r2, #4]
 8002932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293a:	6053      	str	r3, [r2, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	686b      	ldr	r3, [r5, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d007      	beq.n	8002956 <main+0x76>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002946:	686b      	ldr	r3, [r5, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d137      	bne.n	80029c0 <main+0xe0>
 8002950:	686b      	ldr	r3, [r5, #4]
 8002952:	03df      	lsls	r7, r3, #15
 8002954:	d534      	bpl.n	80029c0 <main+0xe0>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	682b      	ldr	r3, [r5, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002958:	686b      	ldr	r3, [r5, #4]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d047      	beq.n	80029f2 <main+0x112>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	2200      	movs	r2, #0
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <main+0x150>)
 8002966:	661a      	str	r2, [r3, #96]	; 0x60
  return uwTick;
 8002968:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <main+0x154>)
 800296a:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	019c      	lsls	r4, r3, #6
 8002970:	d435      	bmi.n	80029de <main+0xfe>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002972:	2101      	movs	r1, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002974:	686b      	ldr	r3, [r5, #4]
 8002976:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800297a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	686b      	ldr	r3, [r5, #4]
 800297e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002982:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002986:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <main+0x150>)
 800298a:	6619      	str	r1, [r3, #96]	; 0x60
 800298c:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800298e:	682b      	ldr	r3, [r5, #0]
 8002990:	0198      	lsls	r0, r3, #6
 8002992:	d529      	bpl.n	80029e8 <main+0x108>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <main+0x13c>)
 8002996:	6813      	ldr	r3, [r2, #0]
 8002998:	f013 0f06 	tst.w	r3, #6
 800299c:	d032      	beq.n	8002a04 <main+0x124>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299e:	686b      	ldr	r3, [r5, #4]
 80029a0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029a4:	606b      	str	r3, [r5, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a6:	686b      	ldr	r3, [r5, #4]
 80029a8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ac:	606b      	str	r3, [r5, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ae:	686b      	ldr	r3, [r5, #4]
 80029b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b4:	606b      	str	r3, [r5, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	682b      	ldr	r3, [r5, #0]
 80029b8:	019a      	lsls	r2, r3, #6
 80029ba:	d43d      	bmi.n	8002a38 <main+0x158>
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029be:	e7fe      	b.n	80029be <main+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <main+0x154>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	602b      	str	r3, [r5, #0]
 80029ca:	6811      	ldr	r1, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	039e      	lsls	r6, r3, #14
 80029d0:	d4c2      	bmi.n	8002958 <main+0x78>
 80029d2:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	1a5b      	subs	r3, r3, r1
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d9f8      	bls.n	80029cc <main+0xec>
 80029da:	b672      	cpsid	i
 80029dc:	e7fe      	b.n	80029dc <main+0xfc>
 80029de:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	1a5b      	subs	r3, r3, r1
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d9c2      	bls.n	800296c <main+0x8c>
 80029e6:	e7f8      	b.n	80029da <main+0xfa>
 80029e8:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	1a5b      	subs	r3, r3, r1
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d9ce      	bls.n	800298e <main+0xae>
 80029f0:	e7f3      	b.n	80029da <main+0xfa>
        pll_config = RCC->CFGR;
 80029f2:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f4:	03d9      	lsls	r1, r3, #15
 80029f6:	d5f0      	bpl.n	80029da <main+0xfa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a00:	d1eb      	bne.n	80029da <main+0xfa>
 8002a02:	e7c7      	b.n	8002994 <main+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f023 0307 	bic.w	r3, r3, #7
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	6813      	ldr	r3, [r2, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1d0      	bne.n	80029bc <main+0xdc>
 8002a1a:	e7c0      	b.n	800299e <main+0xbe>
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	e000ed00 	.word	0xe000ed00
 8002a24:	05fa0300 	.word	0x05fa0300
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	42420000 	.word	0x42420000
 8002a34:	20000200 	.word	0x20000200
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f241 3188 	movw	r1, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3c:	686b      	ldr	r3, [r5, #4]
 8002a3e:	4cb6      	ldr	r4, [pc, #728]	; (8002d18 <main+0x438>)
 8002a40:	f023 0303 	bic.w	r3, r3, #3
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	606b      	str	r3, [r5, #4]
 8002a4a:	6822      	ldr	r2, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4c:	686b      	ldr	r3, [r5, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	f040 8136 	bne.w	8002cc4 <main+0x3e4>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4ab0      	ldr	r2, [pc, #704]	; (8002d1c <main+0x43c>)
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f200 8135 	bhi.w	8002cd0 <main+0x3f0>
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a66:	aa17      	add	r2, sp, #92	; 0x5c
 8002a68:	4690      	mov	r8, r2
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6a:	686b      	ldr	r3, [r5, #4]
 8002a6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a74:	606b      	str	r3, [r5, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a76:	686b      	ldr	r3, [r5, #4]
 8002a78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a7c:	606b      	str	r3, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a7e:	4ba8      	ldr	r3, [pc, #672]	; (8002d20 <main+0x440>)
 8002a80:	f103 0710 	add.w	r7, r3, #16
 8002a84:	4616      	mov	r6, r2
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	c603      	stmia	r6!, {r0, r1}
 8002a8e:	42bb      	cmp	r3, r7
 8002a90:	4632      	mov	r2, r6
 8002a92:	d1f7      	bne.n	8002a84 <main+0x1a4>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a94:	f240 2301 	movw	r3, #513	; 0x201
 8002a98:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9c:	686b      	ldr	r3, [r5, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	2a08      	cmp	r2, #8
 8002aa4:	f000 8121 	beq.w	8002cea <main+0x40a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa8:	4f9e      	ldr	r7, [pc, #632]	; (8002d24 <main+0x444>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aac:	686b      	ldr	r3, [r5, #4]
 8002aae:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8002d28 <main+0x448>
 8002ab2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ab6:	f819 3003 	ldrb.w	r3, [r9, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	f04f 0b01 	mov.w	fp, #1
 8002abe:	40df      	lsrs	r7, r3
 8002ac0:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <main+0x44c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac2:	f04f 0a03 	mov.w	sl, #3
  HAL_InitTick(uwTickPrio);
 8002ac6:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac8:	601f      	str	r7, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002aca:	f7fe fd73 	bl	80015b4 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ace:	9619      	str	r6, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad0:	69ab      	ldr	r3, [r5, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad2:	4a97      	ldr	r2, [pc, #604]	; (8002d30 <main+0x450>)
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	61ab      	str	r3, [r5, #24]
 8002ada:	69ab      	ldr	r3, [r5, #24]
 8002adc:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	9306      	str	r3, [sp, #24]
 8002ae6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae8:	69ab      	ldr	r3, [r5, #24]
 8002aea:	4992      	ldr	r1, [pc, #584]	; (8002d34 <main+0x454>)
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	61ab      	str	r3, [r5, #24]
 8002af2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002af4:	488e      	ldr	r0, [pc, #568]	; (8002d30 <main+0x450>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	9305      	str	r3, [sp, #20]
 8002afc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	69ab      	ldr	r3, [r5, #24]
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	61ab      	str	r3, [r5, #24]
 8002b06:	69ab      	ldr	r3, [r5, #24]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	9304      	str	r3, [sp, #16]
 8002b0e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	69ab      	ldr	r3, [r5, #24]
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	61ab      	str	r3, [r5, #24]
 8002b18:	69ab      	ldr	r3, [r5, #24]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	9b03      	ldr	r3, [sp, #12]
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <main+0x458>)
 8002b24:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
 8002b28:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002b2c:	6113      	str	r3, [r2, #16]
 8002b2e:	4b83      	ldr	r3, [pc, #524]	; (8002d3c <main+0x45c>)
 8002b30:	6119      	str	r1, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b36:	e9cd 1b17 	strd	r1, fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	911a      	str	r1, [sp, #104]	; 0x68
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	4641      	mov	r1, r8
 8002b40:	f7fd fc8a 	bl	8000458 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002b44:	f24c 0c3f 	movw	ip, #49215	; 0xc03f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	e9cd cb17 	strd	ip, fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b52:	f7fd fc81 	bl	8000458 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002b56:	20ff      	movs	r0, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	4a79      	ldr	r2, [pc, #484]	; (8002d40 <main+0x460>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	e9cd 0b17 	strd	r0, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	4610      	mov	r0, r2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b60:	e9cd 6a19 	strd	r6, sl, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f7fd fc78 	bl	8000458 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002b68:	f640 4203 	movw	r2, #3075	; 0xc03
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	4b73      	ldr	r3, [pc, #460]	; (8002d3c <main+0x45c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	e9cd 2b17 	strd	r2, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b74:	e9cd 6a19 	strd	r6, sl, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b78:	f7fd fc6e 	bl	8000458 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002b7c:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b80:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
  hi2c1.Init.ClockSpeed = 400000;
 8002b84:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8002d44 <main+0x464>
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f7fd fc66 	bl	8000458 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 400000;
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <main+0x468>)
  hi2c1.Init.OwnAddress1 = 0;
 8002b8e:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
  hi2c1.Init.ClockSpeed = 400000;
 8002b92:	e9c4 b312 	strd	fp, r3, [r4, #72]	; 0x48
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b9a:	e9c4 3616 	strd	r3, r6, [r4, #88]	; 0x58
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba2:	e9c4 6618 	strd	r6, r6, [r4, #96]	; 0x60
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ba6:	66a6      	str	r6, [r4, #104]	; 0x68
 8002ba8:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d162      	bne.n	8002c76 <main+0x396>
    hi2c->Lock = HAL_UNLOCKED;
 8002bb0:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	9619      	str	r6, [sp, #100]	; 0x64
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	69ab      	ldr	r3, [r5, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb8:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	61ab      	str	r3, [r5, #24]
 8002bc2:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc4:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8002bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd0:	2312      	movs	r3, #18
 8002bd2:	e9cd c317 	strd	ip, r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f7fd fc3f 	bl	8000458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bda:	69eb      	ldr	r3, [r5, #28]
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bdc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be2:	61eb      	str	r3, [r5, #28]
 8002be4:	69eb      	ldr	r3, [r5, #28]
  hdma->DmaBaseAddress = DMA1;
 8002be6:	f04f 0a14 	mov.w	sl, #20
 8002bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bee:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	f8df e154 	ldr.w	lr, [pc, #340]	; 8002d4c <main+0x46c>
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf8:	e9c4 1633 	strd	r1, r6, [r4, #204]	; 0xcc
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bfc:	e9c4 e330 	strd	lr, r3, [r4, #192]	; 0xc0
 8002c00:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <main+0x470>)
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c02:	e9c4 6635 	strd	r6, r6, [r4, #212]	; 0xd4
 8002c06:	e9c4 3a3f 	strd	r3, sl, [r4, #252]	; 0xfc
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0a:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c0e:	f8c4 60dc 	str.w	r6, [r4, #220]	; 0xdc
  tmp = hdma->Instance->CCR;
 8002c12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c14:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8002d54 <main+0x474>
  hdma->Lock = HAL_UNLOCKED;
 8002c18:	f44f 7c80 	mov.w	ip, #256	; 0x100
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c1c:	ea02 020e 	and.w	r2, r2, lr
  tmp |=  hdma->Init.Direction        |
 8002c20:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->Instance->CCR = tmp;
 8002c24:	66da      	str	r2, [r3, #108]	; 0x6c

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c26:	e9c4 6143 	strd	r6, r1, [r4, #268]	; 0x10c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2a:	2118      	movs	r1, #24
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002c2c:	f8df a128 	ldr.w	sl, [pc, #296]	; 8002d58 <main+0x478>
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c30:	e9c4 6645 	strd	r6, r6, [r4, #276]	; 0x114
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	e9c4 a641 	strd	sl, r6, [r4, #260]	; 0x104
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c38:	e9c4 6647 	strd	r6, r6, [r4, #284]	; 0x11c
  hdma->DmaBaseAddress = DMA1;
 8002c3c:	e9c4 3150 	strd	r3, r1, [r4, #320]	; 0x140
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c40:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
  hdma->Lock = HAL_UNLOCKED;
 8002c44:	f8a4 c0e0 	strh.w	ip, [r4, #224]	; 0xe0
  tmp = hdma->Instance->CCR;
 8002c48:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002c4c:	4a43      	ldr	r2, [pc, #268]	; (8002d5c <main+0x47c>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c4e:	ea01 010e 	and.w	r1, r1, lr
 8002c52:	f1a2 0078 	sub.w	r0, r2, #120	; 0x78
 8002c56:	67e2      	str	r2, [r4, #124]	; 0x7c
  tmp |=  hdma->Init.Direction        |
 8002c58:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002c5c:	3244      	adds	r2, #68	; 0x44
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002c5e:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
  hdma->Instance->CCR = tmp;
 8002c62:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
  hdma->Lock = HAL_UNLOCKED;
 8002c6a:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002c6e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8002c72:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c76:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7a:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
  __HAL_I2C_DISABLE(hi2c);
 8002c7e:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c80:	4937      	ldr	r1, [pc, #220]	; (8002d60 <main+0x480>)
  __HAL_I2C_DISABLE(hi2c);
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c88:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8a:	f8d4 c04c 	ldr.w	ip, [r4, #76]	; 0x4c
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c94:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c96:	458c      	cmp	ip, r1
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c9c:	6013      	str	r3, [r2, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c9e:	686b      	ldr	r3, [r5, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca0:	bf98      	it	ls
 8002ca2:	4930      	ldrls	r1, [pc, #192]	; (8002d64 <main+0x484>)
 8002ca4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ca8:	444b      	add	r3, r9
 8002caa:	7c1b      	ldrb	r3, [r3, #16]
 8002cac:	bf88      	it	hi
 8002cae:	492e      	ldrhi	r1, [pc, #184]	; (8002d68 <main+0x488>)
 8002cb0:	fa27 f303 	lsr.w	r3, r7, r3
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	bf8c      	ite	hi
 8002cb8:	2100      	movhi	r1, #0
 8002cba:	2101      	movls	r1, #1
 8002cbc:	2900      	cmp	r1, #0
 8002cbe:	d057      	beq.n	8002d70 <main+0x490>
 8002cc0:	b672      	cpsid	i
	while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <main+0x3e2>
 8002cc4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	f67f aebf 	bls.w	8002a4c <main+0x16c>
 8002cce:	e675      	b.n	80029bc <main+0xdc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd0:	6813      	ldr	r3, [r2, #0]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	f47f ae6a 	bne.w	80029bc <main+0xdc>
 8002ce8:	e6bd      	b.n	8002a66 <main+0x186>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cea:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002cee:	3270      	adds	r2, #112	; 0x70
 8002cf0:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cf4:	f812 7c14 	ldrb.w	r7, [r2, #-20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf8:	d50b      	bpl.n	8002d12 <main+0x432>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	686b      	ldr	r3, [r5, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <main+0x444>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfe:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d02:	4357      	muls	r7, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d04:	3370      	adds	r3, #112	; 0x70
 8002d06:	446b      	add	r3, sp
 8002d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0c:	fbb7 f7f3 	udiv	r7, r7, r3
 8002d10:	e6cb      	b.n	8002aaa <main+0x1ca>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <main+0x48c>)
 8002d14:	435f      	muls	r7, r3
 8002d16:	e6c8      	b.n	8002aaa <main+0x1ca>
 8002d18:	20000200 	.word	0x20000200
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	0801a4e2 	.word	0x0801a4e2
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	08008c98 	.word	0x08008c98
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	40011000 	.word	0x40011000
 8002d34:	0c030000 	.word	0x0c030000
 8002d38:	e03f0000 	.word	0xe03f0000
 8002d3c:	40010c00 	.word	0x40010c00
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40005400 	.word	0x40005400
 8002d48:	00061a80 	.word	0x00061a80
 8002d4c:	4002006c 	.word	0x4002006c
 8002d50:	40020000 	.word	0x40020000
 8002d54:	ffffc00f 	.word	0xffffc00f
 8002d58:	40020080 	.word	0x40020080
 8002d5c:	200002c0 	.word	0x200002c0
 8002d60:	000186a0 	.word	0x000186a0
 8002d64:	001e847f 	.word	0x001e847f
 8002d68:	003d08ff 	.word	0x003d08ff
 8002d6c:	003d0900 	.word	0x003d0900
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d70:	4ecc      	ldr	r6, [pc, #816]	; (80030a4 <main+0x7c4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002d72:	49cd      	ldr	r1, [pc, #820]	; (80030a8 <main+0x7c8>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d74:	45b4      	cmp	ip, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	fbb3 f1f1 	udiv	r1, r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7a:	bf88      	it	hi
 8002d7c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d80:	6850      	ldr	r0, [r2, #4]
 8002d82:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002d86:	ea40 0001 	orr.w	r0, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d8a:	bf82      	ittt	hi
 8002d8c:	4371      	mulhi	r1, r6
 8002d8e:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002d92:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d98:	6a10      	ldr	r0, [r2, #32]
 8002d9a:	3101      	adds	r1, #1
 8002d9c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002da0:	4301      	orrs	r1, r0
 8002da2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da4:	69d1      	ldr	r1, [r2, #28]
 8002da6:	1e5e      	subs	r6, r3, #1
 8002da8:	4bbe      	ldr	r3, [pc, #760]	; (80030a4 <main+0x7c4>)
 8002daa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002dae:	459c      	cmp	ip, r3
 8002db0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002db4:	f200 862c 	bhi.w	8003a10 <main+0x1130>
 8002db8:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8002dbc:	fbb6 f3f3 	udiv	r3, r6, r3
 8002dc0:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4203      	tst	r3, r0
 8002dc8:	f000 864b 	beq.w	8003a62 <main+0x1182>
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	e9d4 3019 	ldrd	r3, r0, [r4, #100]	; 0x64
 8002dda:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002dde:	4303      	orrs	r3, r0
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de4:	6891      	ldr	r1, [r2, #8]
 8002de6:	e9d4 0315 	ldrd	r0, r3, [r4, #84]	; 0x54
 8002dea:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002dee:	4303      	orrs	r3, r0
 8002df0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df8:	68d1      	ldr	r1, [r2, #12]
 8002dfa:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
 8002dfe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e02:	4303      	orrs	r3, r0
 8002e04:	430b      	orrs	r3, r1
 8002e06:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002e08:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1c:	67a1      	str	r1, [r4, #120]	; 0x78
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e22:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002e24:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	616b      	str	r3, [r5, #20]
 8002e2c:	696b      	ldr	r3, [r5, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2e:	4e9f      	ldr	r6, [pc, #636]	; (80030ac <main+0x7cc>)
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002e38:	f7fd fc50 	bl	80006dc <HAL_NVIC_SetPriority.constprop.0>
 8002e3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002e40:	200f      	movs	r0, #15
 8002e42:	6033      	str	r3, [r6, #0]
 8002e44:	f7fd fc4a 	bl	80006dc <HAL_NVIC_SetPriority.constprop.0>
 8002e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e4c:	2010      	movs	r0, #16
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	f7fd fc44 	bl	80006dc <HAL_NVIC_SetPriority.constprop.0>
 8002e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002e58:	2011      	movs	r0, #17
 8002e5a:	6033      	str	r3, [r6, #0]
 8002e5c:	f7fd fc3e 	bl	80006dc <HAL_NVIC_SetPriority.constprop.0>
 8002e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e64:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 8002e66:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e6a:	f04f 0b0c 	mov.w	fp, #12
  huart1.Init.BaudRate = 115200;
 8002e6e:	4890      	ldr	r0, [pc, #576]	; (80030b0 <main+0x7d0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e70:	e9c4 1103 	strd	r1, r1, [r4, #12]
  huart1.Init.BaudRate = 115200;
 8002e74:	e9c4 0301 	strd	r0, r3, [r4, #4]
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7c:	e9c4 b106 	strd	fp, r1, [r4, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e80:	6161      	str	r1, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e82:	6221      	str	r1, [r4, #32]
 8002e84:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d16a      	bne.n	8002f62 <main+0x682>
    huart->Lock = HAL_UNLOCKED;
 8002e8c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	9619      	str	r6, [sp, #100]	; 0x64
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e92:	69ab      	ldr	r3, [r5, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	61ab      	str	r3, [r5, #24]
 8002e9e:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	4884      	ldr	r0, [pc, #528]	; (80030b4 <main+0x7d4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8002ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	69ab      	ldr	r3, [r5, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eac:	f04f 0a80 	mov.w	sl, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	61ab      	str	r3, [r5, #24]
 8002eb6:	69ab      	ldr	r3, [r5, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	4641      	mov	r1, r8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eca:	931a      	str	r3, [sp, #104]	; 0x68
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f7fd fac4 	bl	8000458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	9619      	str	r6, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed6:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f7fd fabd 	bl	8000458 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ede:	f04f 0e10 	mov.w	lr, #16
 8002ee2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ee6:	4b74      	ldr	r3, [pc, #464]	; (80030b8 <main+0x7d8>)
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee8:	e9c4 a655 	strd	sl, r6, [r4, #340]	; 0x154
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eec:	e9c4 3e52 	strd	r3, lr, [r4, #328]	; 0x148
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ef0:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
  hdma->DmaBaseAddress = DMA1;
 8002ef4:	3b44      	subs	r3, #68	; 0x44
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ef6:	f8c4 b188 	str.w	fp, [r4, #392]	; 0x188
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efa:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002efe:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  tmp = hdma->Instance->CCR;
 8002f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f04:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 80030bc <main+0x7dc>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f08:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80030c0 <main+0x7e0>
 8002f0c:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 8002f10:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 8002f14:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
  hdma->Instance->CCR = tmp;
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1a:	e9c4 b663 	strd	fp, r6, [r4, #396]	; 0x18c
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	e9c4 6a65 	strd	r6, sl, [r4, #404]	; 0x194
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f22:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f26:	e9c4 6669 	strd	r6, r6, [r4, #420]	; 0x1a4
  hdma->DmaBaseAddress = DMA1;
 8002f2a:	e9c4 3e72 	strd	r3, lr, [r4, #456]	; 0x1c8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2e:	f8c4 6180 	str.w	r6, [r4, #384]	; 0x180
  hdma->Lock = HAL_UNLOCKED;
 8002f32:	f8a4 0168 	strh.w	r0, [r4, #360]	; 0x168
  tmp = hdma->Instance->CCR;
 8002f36:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f3a:	4a62      	ldr	r2, [pc, #392]	; (80030c4 <main+0x7e4>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f3c:	ea0e 0c0c 	and.w	ip, lr, ip
 8002f40:	f5a2 71a2 	sub.w	r1, r2, #324	; 0x144
 8002f44:	63a2      	str	r2, [r4, #56]	; 0x38
  tmp |=  hdma->Init.Direction        |
 8002f46:	ea4c 0c0a 	orr.w	ip, ip, sl
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f4a:	3244      	adds	r2, #68	; 0x44
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f4c:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
  hdma->Instance->CCR = tmp;
 8002f50:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f54:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
  hdma->Lock = HAL_UNLOCKED;
 8002f58:	f8a4 01ac 	strh.w	r0, [r4, #428]	; 0x1ac
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f5c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8002f5e:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
  huart->gState = HAL_UART_STATE_BUSY;
 8002f62:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002f64:	6862      	ldr	r2, [r4, #4]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002f6a:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	6921      	ldr	r1, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f72:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f74:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f76:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f80:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f82:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f84:	4303      	orrs	r3, r0
 8002f86:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR1,
 8002f88:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f8c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002f8e:	f021 010c 	bic.w	r1, r1, #12
 8002f92:	430b      	orrs	r3, r1
 8002f94:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f96:	6953      	ldr	r3, [r2, #20]
 8002f98:	69e1      	ldr	r1, [r4, #28]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <main+0x7d0>)
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa4:	2164      	movs	r1, #100	; 0x64
  if(huart->Instance == USART1)
 8002fa6:	429a      	cmp	r2, r3
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	686b      	ldr	r3, [r5, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	f04f 0500 	mov.w	r5, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	f3c3 23c2 	ubfxeq	r3, r3, #11, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f3c3 2302 	ubfxne	r3, r3, #8, #3
 8002fb8:	4499      	add	r9, r3
 8002fba:	f899 3010 	ldrb.w	r3, [r9, #16]
 8002fbe:	4e42      	ldr	r6, [pc, #264]	; (80030c8 <main+0x7e8>)
 8002fc0:	40df      	lsrs	r7, r3
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc2:	2319      	movs	r3, #25
 8002fc4:	435f      	muls	r7, r3
 8002fc6:	68a3      	ldr	r3, [r4, #8]
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002fc8:	f240 5922 	movw	r9, #1314	; 0x522
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	fbb7 f7f3 	udiv	r7, r7, r3
 8002fd2:	fbb7 f0f1 	udiv	r0, r7, r1
 8002fd6:	fb01 7310 	mls	r3, r1, r0, r7
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002fe6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe8:	6913      	ldr	r3, [r2, #16]

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 8002fea:	20c8      	movs	r0, #200	; 0xc8
 8002fec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ff0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	6953      	ldr	r3, [r2, #20]
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8002ff4:	4f35      	ldr	r7, [pc, #212]	; (80030cc <main+0x7ec>)
 8002ff6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ffa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ffc:	68d3      	ldr	r3, [r2, #12]
 8002ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003002:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003004:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003008:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003014:	6133      	str	r3, [r6, #16]
 8003016:	f7fd f982 	bl	800031e <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 800301a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 800301e:	2011      	movs	r0, #17
 8003020:	6133      	str	r3, [r6, #16]
 8003022:	f7fd f8ff 	bl	8000224 <LCD_Send_Cmd>
  HAL_Delay(120);
 8003026:	2078      	movs	r0, #120	; 0x78
 8003028:	f7fd f979 	bl	800031e <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 800302c:	203a      	movs	r0, #58	; 0x3a
 800302e:	f7fd f8f9 	bl	8000224 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8003032:	2055      	movs	r0, #85	; 0x55
 8003034:	f7fd f90c 	bl	8000250 <LCD_Send_Dat>
  HAL_Delay(5);
 8003038:	2005      	movs	r0, #5
 800303a:	f7fd f970 	bl	800031e <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 800303e:	2029      	movs	r0, #41	; 0x29
 8003040:	f7fd f8f0 	bl	8000224 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8003044:	2036      	movs	r0, #54	; 0x36
 8003046:	f7fd f8ed 	bl	8000224 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 800304a:	2008      	movs	r0, #8
 800304c:	f7fd f900 	bl	8000250 <LCD_Send_Dat>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8003050:	23ff      	movs	r3, #255	; 0xff
 8003052:	4629      	mov	r1, r5
 8003054:	4628      	mov	r0, r5
 8003056:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003060:	f7fd f90a 	bl	8000278 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8003064:	2101      	movs	r1, #1
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 8003066:	f44f 067f 	mov.w	r6, #16711680	; 0xff0000
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 800306a:	4608      	mov	r0, r1
 800306c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8003070:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8003074:	9500      	str	r5, [sp, #0]
 8003076:	f7fd f8ff 	bl	8000278 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 800307a:	217f      	movs	r1, #127	; 0x7f
 800307c:	2014      	movs	r0, #20
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <main+0x7f0>)
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <main+0x7f4>)
 8003082:	9600      	str	r6, [sp, #0]
 8003084:	f7fe fabc 	bl	8001600 <LCD_Font.constprop.0>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 8003088:	217f      	movs	r1, #127	; 0x7f
 800308a:	2014      	movs	r0, #20
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <main+0x7f0>)
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <main+0x7f4>)
 8003090:	9500      	str	r5, [sp, #0]
 8003092:	f7fe fab5 	bl	8001600 <LCD_Font.constprop.0>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8003096:	217f      	movs	r1, #127	; 0x7f
 8003098:	2014      	movs	r0, #20
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <main+0x7f0>)
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <main+0x7f8>)
 800309e:	9600      	str	r6, [sp, #0]
 80030a0:	e01c      	b.n	80030dc <main+0x7fc>
 80030a2:	bf00      	nop
 80030a4:	000186a0 	.word	0x000186a0
 80030a8:	000f4240 	.word	0x000f4240
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40010800 	.word	0x40010800
 80030b8:	40020044 	.word	0x40020044
 80030bc:	ffffc00f 	.word	0xffffc00f
 80030c0:	40020058 	.word	0x40020058
 80030c4:	20000348 	.word	0x20000348
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	200003d0 	.word	0x200003d0
 80030d0:	08008cb0 	.word	0x08008cb0
 80030d4:	0801a493 	.word	0x0801a493
 80030d8:	0801a4a3 	.word	0x0801a4a3
 80030dc:	f7fe fa90 	bl	8001600 <LCD_Font.constprop.0>
 80030e0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80030e4:	4628      	mov	r0, r5
 80030e6:	f7fd fcdf 	bl	8000aa8 <AT24XX_Read>
 80030ea:	4606      	mov	r6, r0
 80030ec:	1c68      	adds	r0, r5, #1
 80030ee:	b280      	uxth	r0, r0
 80030f0:	f7fd fcda 	bl	8000aa8 <AT24XX_Read>
 80030f4:	3502      	adds	r5, #2
 80030f6:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 80030f8:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80030fc:	454d      	cmp	r5, r9
 80030fe:	f827 6b02 	strh.w	r6, [r7], #2
 8003102:	d1ef      	bne.n	80030e4 <main+0x804>
 8003104:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003108:	f640 190a 	movw	r9, #2314	; 0x90a
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800310c:	4fd4      	ldr	r7, [pc, #848]	; (8003460 <main+0xb80>)
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800310e:	4628      	mov	r0, r5
 8003110:	f7fd fcca 	bl	8000aa8 <AT24XX_Read>
 8003114:	4606      	mov	r6, r0
 8003116:	1c68      	adds	r0, r5, #1
 8003118:	b280      	uxth	r0, r0
 800311a:	f7fd fcc5 	bl	8000aa8 <AT24XX_Read>
 800311e:	3502      	adds	r5, #2
 8003120:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8003122:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003126:	454d      	cmp	r5, r9
 8003128:	f827 6b02 	strh.w	r6, [r7], #2
 800312c:	d1ef      	bne.n	800310e <main+0x82e>
 800312e:	f640 35b8 	movw	r5, #3000	; 0xbb8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003132:	f640 49f2 	movw	r9, #3314	; 0xcf2
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003136:	4fcb      	ldr	r7, [pc, #812]	; (8003464 <main+0xb84>)
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003138:	4628      	mov	r0, r5
 800313a:	f7fd fcb5 	bl	8000aa8 <AT24XX_Read>
 800313e:	4606      	mov	r6, r0
 8003140:	1c68      	adds	r0, r5, #1
 8003142:	b280      	uxth	r0, r0
 8003144:	f7fd fcb0 	bl	8000aa8 <AT24XX_Read>
 8003148:	3502      	adds	r5, #2
 800314a:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 800314c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003150:	454d      	cmp	r5, r9
 8003152:	f827 6b02 	strh.w	r6, [r7], #2
 8003156:	d1ef      	bne.n	8003138 <main+0x858>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8003158:	2500      	movs	r5, #0
 800315a:	217f      	movs	r1, #127	; 0x7f
 800315c:	2014      	movs	r0, #20
 800315e:	4bc2      	ldr	r3, [pc, #776]	; (8003468 <main+0xb88>)
 8003160:	4ac2      	ldr	r2, [pc, #776]	; (800346c <main+0xb8c>)
 8003162:	9500      	str	r5, [sp, #0]
 8003164:	f7fe fa4c 	bl	8001600 <LCD_Font.constprop.0>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8003168:	23f2      	movs	r3, #242	; 0xf2
 800316a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    cmd[1] = 0x05; // Humidity oversampling x16
 800316e:	2305      	movs	r3, #5
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8003170:	2202      	movs	r2, #2
 8003172:	4641      	mov	r1, r8
 8003174:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0x05; // Humidity oversampling x16
 8003176:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800317a:	f7fe f8c4 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 800317e:	23f4      	movs	r3, #244	; 0xf4
 8003180:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8003184:	23b7      	movs	r3, #183	; 0xb7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8003186:	2202      	movs	r2, #2
 8003188:	4641      	mov	r1, r8
 800318a:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 800318c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8003190:	f7fe f8b9 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8003194:	23f5      	movs	r3, #245	; 0xf5
 8003196:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 800319a:	23a0      	movs	r3, #160	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800319c:	2202      	movs	r2, #2
 800319e:	4641      	mov	r1, r8
 80031a0:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 80031a2:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80031a6:	f7fe f8ae 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 80031aa:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031ac:	2201      	movs	r2, #1
 80031ae:	4641      	mov	r1, r8
 80031b0:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 80031b2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031b6:	f7fe f8a6 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80031ba:	2206      	movs	r2, #6
 80031bc:	4641      	mov	r1, r8
 80031be:	20ec      	movs	r0, #236	; 0xec
 80031c0:	f7fd ff06 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 80031c4:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031c8:	2201      	movs	r2, #1
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80031ca:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
    dig_T2 = (cmd[3] << 8) | cmd[2];
 80031ce:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031d2:	4641      	mov	r1, r8
    dig_T2 = (cmd[3] << 8) | cmd[2];
 80031d4:	f8a4 3580 	strh.w	r3, [r4, #1408]	; 0x580
    dig_T3 = (cmd[5] << 8) | cmd[4];
 80031d8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031dc:	20ec      	movs	r0, #236	; 0xec
    dig_T3 = (cmd[5] << 8) | cmd[4];
 80031de:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
    cmd[0] = 0x8E; // read dig_P regs
 80031e2:	238e      	movs	r3, #142	; 0x8e
 80031e4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031e8:	f7fe f88d 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 80031ec:	2212      	movs	r2, #18
 80031ee:	4641      	mov	r1, r8
 80031f0:	20ec      	movs	r0, #236	; 0xec
 80031f2:	f7fd feed 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80031f6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80031fa:	2201      	movs	r2, #1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 80031fc:	f8a4 3584 	strh.w	r3, [r4, #1412]	; 0x584
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8003200:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003204:	4641      	mov	r1, r8
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8003206:	f8a4 3586 	strh.w	r3, [r4, #1414]	; 0x586
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800320a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800320e:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8003210:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8003214:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8003218:	f8a4 358a 	strh.w	r3, [r4, #1418]	; 0x58a
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800321c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8003220:	f8a4 358c 	strh.w	r3, [r4, #1420]	; 0x58c
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8003224:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8003228:	f8a4 358e 	strh.w	r3, [r4, #1422]	; 0x58e
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800322c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8003230:	f8a4 3590 	strh.w	r3, [r4, #1424]	; 0x590
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8003234:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8003238:	f8a4 3592 	strh.w	r3, [r4, #1426]	; 0x592
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800323c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8003240:	f8a4 3594 	strh.w	r3, [r4, #1428]	; 0x594
    cmd[0] = 0xA1; // read dig_H regs
 8003244:	23a1      	movs	r3, #161	; 0xa1
 8003246:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800324a:	f7fe f85c 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800324e:	2201      	movs	r2, #1
 8003250:	4641      	mov	r1, r8
 8003252:	20ec      	movs	r0, #236	; 0xec
 8003254:	f7fd febc 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8003258:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 800325a:	2201      	movs	r2, #1
 800325c:	20ec      	movs	r0, #236	; 0xec
 800325e:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
    cmd[1] = 0xE1; // read dig_H regs
 8003262:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8003266:	f7fe f84e 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 800326a:	2207      	movs	r2, #7
 800326c:	20ec      	movs	r0, #236	; 0xec
 800326e:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
 8003272:	f7fd fead 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8003276:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 800327a:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    dig_H1 = cmd[0];
 800327e:	f8a4 3596 	strh.w	r3, [r4, #1430]	; 0x596
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8003282:	f8bd 305d 	ldrh.w	r3, [sp, #93]	; 0x5d
 8003286:	f8a4 3598 	strh.w	r3, [r4, #1432]	; 0x598
    dig_H3 = cmd[3];
 800328a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800328e:	f8a4 359a 	strh.w	r3, [r4, #1434]	; 0x59a
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8003292:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800329e:	f8a4 259c 	strh.w	r2, [r4, #1436]	; 0x59c
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80032a2:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80032ac:	f8a4 359e 	strh.w	r3, [r4, #1438]	; 0x59e
    dig_H6 = cmd[7];
 80032b0:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80032b4:	f8a4 35a0 	strh.w	r3, [r4, #1440]	; 0x5a0
	DS3231_Update();
 80032b8:	f7fe f8ee 	bl	8001498 <DS3231_Update>
  if (huart->RxState == HAL_UART_STATE_READY)
 80032bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d11c      	bne.n	80032fe <main+0xa1e>
    __HAL_LOCK(huart);
 80032c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d018      	beq.n	80032fe <main+0xa1e>
  huart->pRxBuffPtr = pData;
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <main+0xb90>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	6365      	str	r5, [r4, #52]	; 0x34
  huart->pRxBuffPtr = pData;
 80032d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  huart->RxXferSize = Size;
 80032d2:	2301      	movs	r3, #1
  huart->RxXferCount = Size;
 80032d4:	8663      	strh	r3, [r4, #50]	; 0x32
  huart->RxXferSize = Size;
 80032d6:	8623      	strh	r3, [r4, #48]	; 0x30
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d8:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	6465      	str	r5, [r4, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032e0:	6863      	ldr	r3, [r4, #4]
  __HAL_UNLOCK(huart);
 80032e2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ec:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	f042 0220 	orr.w	r2, r2, #32
 80032fc:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 80032fe:	4a5d      	ldr	r2, [pc, #372]	; (8003474 <main+0xb94>)
 8003300:	ab0d      	add	r3, sp, #52	; 0x34
 8003302:	6810      	ldr	r0, [r2, #0]
 8003304:	6851      	ldr	r1, [r2, #4]
 8003306:	8912      	ldrh	r2, [r2, #8]
 8003308:	c303      	stmia	r3!, {r0, r1}
 800330a:	801a      	strh	r2, [r3, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800330c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003310:	2b20      	cmp	r3, #32
 8003312:	d107      	bne.n	8003324 <main+0xa44>
    __HAL_LOCK(huart);
 8003314:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003318:	2b01      	cmp	r3, #1
 800331a:	d003      	beq.n	8003324 <main+0xa44>
 800331c:	210a      	movs	r1, #10
 800331e:	a80d      	add	r0, sp, #52	; 0x34
 8003320:	f7fe f910 	bl	8001544 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8003324:	aa13      	add	r2, sp, #76	; 0x4c
 8003326:	4615      	mov	r5, r2
 8003328:	4b53      	ldr	r3, [pc, #332]	; (8003478 <main+0xb98>)
 800332a:	f103 0708 	add.w	r7, r3, #8
 800332e:	4616      	mov	r6, r2
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	3308      	adds	r3, #8
 8003336:	c603      	stmia	r6!, {r0, r1}
 8003338:	42bb      	cmp	r3, r7
 800333a:	4632      	mov	r2, r6
 800333c:	d1f7      	bne.n	800332e <main+0xa4e>
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	889b      	ldrh	r3, [r3, #4]
 8003342:	6030      	str	r0, [r6, #0]
 8003344:	80b3      	strh	r3, [r6, #4]
  if (huart->gState == HAL_UART_STATE_READY)
 8003346:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800334a:	2b20      	cmp	r3, #32
 800334c:	d153      	bne.n	80033f6 <main+0xb16>
    __HAL_LOCK(huart);
 800334e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003352:	2b01      	cmp	r3, #1
 8003354:	d04f      	beq.n	80033f6 <main+0xb16>
    huart->TxXferSize = Size;
 8003356:	f04f 0c0e 	mov.w	ip, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800335e:	2101      	movs	r1, #1
    huart->TxXferCount = Size;
 8003360:	f8a4 c02a 	strh.w	ip, [r4, #42]	; 0x2a
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003364:	4845      	ldr	r0, [pc, #276]	; (800347c <main+0xb9c>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	6462      	str	r2, [r4, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003368:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800336c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    __HAL_LOCK(huart);
 800336e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003372:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003374:	4842      	ldr	r0, [pc, #264]	; (8003480 <main+0xba0>)
    huart->pTxBuffPtr = pData;
 8003376:	6265      	str	r5, [r4, #36]	; 0x24
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003378:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800337a:	4842      	ldr	r0, [pc, #264]	; (8003484 <main+0xba4>)
    huart->TxXferSize = Size;
 800337c:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    huart->hdmatx->XferAbortCallback = NULL;
 8003380:	e9c3 020c 	strd	r0, r2, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 8003384:	f893 0020 	ldrb.w	r0, [r3, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003388:	6866      	ldr	r6, [r4, #4]
 800338a:	4288      	cmp	r0, r1
 800338c:	d029      	beq.n	80033e2 <main+0xb02>
  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	f893 7021 	ldrb.w	r7, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003392:	f883 1020 	strb.w	r1, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	428f      	cmp	r7, r1
 8003398:	f040 8369 	bne.w	8003a6e <main+0x118e>
    hdma->State = HAL_DMA_STATE_BUSY;
 800339c:	2102      	movs	r1, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80033a0:	681a      	ldr	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80033a6:	6811      	ldr	r1, [r2, #0]
 80033a8:	f106 0e04 	add.w	lr, r6, #4
 80033ac:	f021 0101 	bic.w	r1, r1, #1
 80033b0:	6011      	str	r1, [r2, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033b2:	e9d3 100f 	ldrd	r1, r0, [r3, #60]	; 0x3c

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033b6:	685b      	ldr	r3, [r3, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033b8:	fa07 f000 	lsl.w	r0, r7, r0
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033bc:	2b10      	cmp	r3, #16
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033be:	6048      	str	r0, [r1, #4]
  hdma->Instance->CNDTR = DataLength;
 80033c0:	f8c2 c004 	str.w	ip, [r2, #4]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033c4:	bf0b      	itete	eq
 80033c6:	f8c2 e008 	streq.w	lr, [r2, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80033ca:	6095      	strne	r5, [r2, #8]
    hdma->Instance->CMAR = SrcAddress;
 80033cc:	60d5      	streq	r5, [r2, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80033ce:	f8c2 e00c 	strne.w	lr, [r2, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f043 030e 	orr.w	r3, r3, #14
 80033d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6013      	str	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80033e2:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80033e6:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(huart);
 80033e8:	2300      	movs	r3, #0
 80033ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033ee:	6973      	ldr	r3, [r6, #20]
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	6173      	str	r3, [r6, #20]
		if (rx_index != 0) {
 80033f6:	4c24      	ldr	r4, [pc, #144]	; (8003488 <main+0xba8>)
 80033f8:	f894 35a3 	ldrb.w	r3, [r4, #1443]	; 0x5a3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 834d 	bne.w	8003a9c <main+0x11bc>
		DS3231_Update();
 8003402:	f7fe f849 	bl	8001498 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8003406:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
		if (rtcSecLast != rtcSec) {
 800340a:	4f20      	ldr	r7, [pc, #128]	; (800348c <main+0xbac>)
    return ((val / 16 * 10) + (val % 16));
 800340c:	0915      	lsrs	r5, r2, #4
 800340e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003412:	f002 050f 	and.w	r5, r2, #15
 8003416:	eb05 0543 	add.w	r5, r5, r3, lsl #1
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 800341a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    return ((val / 16 * 10) + (val % 16));
 800341e:	b2ed      	uxtb	r5, r5
 8003420:	091e      	lsrs	r6, r3, #4
 8003422:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003426:	f003 060f 	and.w	r6, r3, #15
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 800342a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    return ((val / 16 * 10) + (val % 16));
 800342e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8003432:	091a      	lsrs	r2, r3, #4
 8003434:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcHrs = DS3231_getHrs();
 8003440:	f884 35a6 	strb.w	r3, [r4, #1446]	; 0x5a6
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8003444:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    return ((val / 16 * 10) + (val % 16));
 8003448:	b2f6      	uxtb	r6, r6
 800344a:	091a      	lsrs	r2, r3, #4
 800344c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcDay = DS3231_getDay();
 8003458:	f884 35a7 	strb.w	r3, [r4, #1447]	; 0x5a7
 800345c:	e018      	b.n	8003490 <main+0xbb0>
 800345e:	bf00      	nop
 8003460:	2000050a 	.word	0x2000050a
 8003464:	20000644 	.word	0x20000644
 8003468:	08008cb0 	.word	0x08008cb0
 800346c:	0801a4a3 	.word	0x0801a4a3
 8003470:	200007a2 	.word	0x200007a2
 8003474:	0801a4f3 	.word	0x0801a4f3
 8003478:	0801a4fd 	.word	0x0801a4fd
 800347c:	0800060f 	.word	0x0800060f
 8003480:	0800060d 	.word	0x0800060d
 8003484:	08000631 	.word	0x08000631
 8003488:	20000200 	.word	0x20000200
 800348c:	20000000 	.word	0x20000000
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8003490:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
		rtcSec = DS3231_getSec();
 8003494:	f884 55a4 	strb.w	r5, [r4, #1444]	; 0x5a4
    return ((val / 16 * 10) + (val % 16));
 8003498:	091a      	lsrs	r2, r3, #4
 800349a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcDate = DS3231_getDate();
 80034a6:	f884 35a8 	strb.w	r3, [r4, #1448]	; 0x5a8
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 80034aa:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		rtcMin = DS3231_getMin();
 80034ae:	f884 65a5 	strb.w	r6, [r4, #1445]	; 0x5a5
    return ((val / 16 * 10) + (val % 16));
 80034b2:	091a      	lsrs	r2, r3, #4
 80034b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcMonth = DS3231_getMonth();
 80034c0:	f884 35a9 	strb.w	r3, [r4, #1449]	; 0x5a9
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 80034c4:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    return ((val / 16 * 10) + (val % 16));
 80034c8:	091a      	lsrs	r2, r3, #4
 80034ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 80034d6:	f884 35aa 	strb.w	r3, [r4, #1450]	; 0x5aa
		if (rtcSecLast != rtcSec) {
 80034da:	7a3b      	ldrb	r3, [r7, #8]
 80034dc:	42ab      	cmp	r3, r5
 80034de:	d08a      	beq.n	80033f6 <main+0xb16>
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2108      	movs	r1, #8
 80034e4:	2023      	movs	r0, #35	; 0x23
 80034e6:	4bdc      	ldr	r3, [pc, #880]	; (8003858 <main+0xf78>)
 80034e8:	f7fd f920 	bl	800072c <LCD_Circle.constprop.0>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2108      	movs	r1, #8
 80034f0:	204b      	movs	r0, #75	; 0x4b
 80034f2:	4bd9      	ldr	r3, [pc, #868]	; (8003858 <main+0xf78>)
 80034f4:	f7fd f91a 	bl	800072c <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 80034f8:	f015 0501 	ands.w	r5, r5, #1
 80034fc:	f000 83c8 	beq.w	8003c90 <main+0x13b0>
				LCD_Circle(172, 35, 7, 1, 1, ORANGE);
 8003500:	2201      	movs	r2, #1
 8003502:	2107      	movs	r1, #7
 8003504:	2023      	movs	r0, #35	; 0x23
 8003506:	4bd4      	ldr	r3, [pc, #848]	; (8003858 <main+0xf78>)
 8003508:	f7fd f910 	bl	800072c <LCD_Circle.constprop.0>
				LCD_Circle(172, 75, 7, 1, 1, ORANGE);
 800350c:	4bd2      	ldr	r3, [pc, #840]	; (8003858 <main+0xf78>)
 800350e:	2201      	movs	r2, #1
 8003510:	2107      	movs	r1, #7
 8003512:	204b      	movs	r0, #75	; 0x4b
 8003514:	f7fd f90a 	bl	800072c <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003518:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    GPIOx->BSRR = GPIO_Pin;
 800351c:	4acf      	ldr	r2, [pc, #828]	; (800385c <main+0xf7c>)
 800351e:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 8003520:	7a7a      	ldrb	r2, [r7, #9]
 8003522:	42b2      	cmp	r2, r6
 8003524:	f000 80ff 	beq.w	8003726 <main+0xe46>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003528:	2600      	movs	r6, #0
				sprintf(clockPrint, "%02d", rtcMinLast);
 800352a:	49cd      	ldr	r1, [pc, #820]	; (8003860 <main+0xf80>)
 800352c:	a817      	add	r0, sp, #92	; 0x5c
 800352e:	f001 fd4f 	bl	8004fd0 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003532:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8003858 <main+0xf78>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003536:	4bcb      	ldr	r3, [pc, #812]	; (8003864 <main+0xf84>)
 8003538:	2164      	movs	r1, #100	; 0x64
 800353a:	20b4      	movs	r0, #180	; 0xb4
 800353c:	aa17      	add	r2, sp, #92	; 0x5c
 800353e:	9600      	str	r6, [sp, #0]
 8003540:	f7fe f85e 	bl	8001600 <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcMin);
 8003544:	f894 25a5 	ldrb.w	r2, [r4, #1445]	; 0x5a5
 8003548:	49c5      	ldr	r1, [pc, #788]	; (8003860 <main+0xf80>)
 800354a:	a817      	add	r0, sp, #92	; 0x5c
 800354c:	f001 fd40 	bl	8004fd0 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003550:	4bc4      	ldr	r3, [pc, #784]	; (8003864 <main+0xf84>)
 8003552:	aa17      	add	r2, sp, #92	; 0x5c
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	20b4      	movs	r0, #180	; 0xb4
 8003558:	f8cd 8000 	str.w	r8, [sp]
 800355c:	f7fe f850 	bl	8001600 <LCD_Font.constprop.0>
				if (rtcHrsLast != rtcHrs) {
 8003560:	7aba      	ldrb	r2, [r7, #10]
 8003562:	f894 35a6 	ldrb.w	r3, [r4, #1446]	; 0x5a6
 8003566:	4dc0      	ldr	r5, [pc, #768]	; (8003868 <main+0xf88>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f000 80d9 	beq.w	8003720 <main+0xe40>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 800356e:	49bc      	ldr	r1, [pc, #752]	; (8003860 <main+0xf80>)
 8003570:	a817      	add	r0, sp, #92	; 0x5c
 8003572:	f001 fd2d 	bl	8004fd0 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003576:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	4630      	mov	r0, r6
 800357e:	aa17      	add	r2, sp, #92	; 0x5c
 8003580:	9600      	str	r6, [sp, #0]
 8003582:	f7fe f83d 	bl	8001600 <LCD_Font.constprop.0>
					sprintf(clockPrint, "%02d", rtcHrs);
 8003586:	f894 25a6 	ldrb.w	r2, [r4, #1446]	; 0x5a6
 800358a:	49b5      	ldr	r1, [pc, #724]	; (8003860 <main+0xf80>)
 800358c:	a817      	add	r0, sp, #92	; 0x5c
 800358e:	f001 fd1f 	bl	8004fd0 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003592:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003596:	aa17      	add	r2, sp, #92	; 0x5c
 8003598:	2164      	movs	r1, #100	; 0x64
 800359a:	4630      	mov	r0, r6
 800359c:	f8cd 8000 	str.w	r8, [sp]
 80035a0:	f7fe f82e 	bl	8001600 <LCD_Font.constprop.0>
					if (rtcDayLast != rtcDay) {
 80035a4:	f894 26ab 	ldrb.w	r2, [r4, #1707]	; 0x6ab
 80035a8:	f894 35a7 	ldrb.w	r3, [r4, #1447]	; 0x5a7
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f000 80a8 	beq.w	8003702 <main+0xe22>
						sprintf(clockPrint, "%02d", rtcDate);
 80035b2:	f894 25a8 	ldrb.w	r2, [r4, #1448]	; 0x5a8
 80035b6:	49aa      	ldr	r1, [pc, #680]	; (8003860 <main+0xf80>)
 80035b8:	a817      	add	r0, sp, #92	; 0x5c
 80035ba:	f001 fd09 	bl	8004fd0 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80035be:	f105 0318 	add.w	r3, r5, #24
 80035c2:	2128      	movs	r1, #40	; 0x28
 80035c4:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80035c8:	aa17      	add	r2, sp, #92	; 0x5c
 80035ca:	9600      	str	r6, [sp, #0]
 80035cc:	f7fe f818 	bl	8001600 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d", rtcDate);
 80035d0:	f894 25a8 	ldrb.w	r2, [r4, #1448]	; 0x5a8
 80035d4:	49a2      	ldr	r1, [pc, #648]	; (8003860 <main+0xf80>)
 80035d6:	a817      	add	r0, sp, #92	; 0x5c
 80035d8:	f001 fcfa 	bl	8004fd0 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80035dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035e0:	2128      	movs	r1, #40	; 0x28
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80035e8:	f105 0318 	add.w	r3, r5, #24
 80035ec:	aa17      	add	r2, sp, #92	; 0x5c
 80035ee:	f7fe f807 	bl	8001600 <LCD_Font.constprop.0>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 80035f2:	f894 35a8 	ldrb.w	r3, [r4, #1448]	; 0x5a8
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d808      	bhi.n	800360c <main+0xd2c>
 80035fa:	2128      	movs	r1, #40	; 0x28
 80035fc:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003600:	4a9a      	ldr	r2, [pc, #616]	; (800386c <main+0xf8c>)
 8003602:	9600      	str	r6, [sp, #0]
 8003604:	f105 0318 	add.w	r3, r5, #24
 8003608:	f7fd fffa 	bl	8001600 <LCD_Font.constprop.0>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800360c:	f04f 080c 	mov.w	r8, #12
 8003610:	f894 65a9 	ldrb.w	r6, [r4, #1449]	; 0x5a9
 8003614:	f04f 0900 	mov.w	r9, #0
 8003618:	f106 030a 	add.w	r3, r6, #10
 800361c:	fbb3 f2f8 	udiv	r2, r3, r8
 8003620:	fb08 3312 	mls	r3, r8, r2, r3
 8003624:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003628:	215a      	movs	r1, #90	; 0x5a
 800362a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800362e:	4b90      	ldr	r3, [pc, #576]	; (8003870 <main+0xf90>)
 8003630:	6b12      	ldr	r2, [r2, #48]	; 0x30
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8003632:	360b      	adds	r6, #11
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8003634:	f8cd 9000 	str.w	r9, [sp]
 8003638:	f7fd ffe2 	bl	8001600 <LCD_Font.constprop.0>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800363c:	fbb6 f3f8 	udiv	r3, r6, r8
 8003640:	fb08 6613 	mls	r6, r8, r3, r6
 8003644:	f64f 73ff 	movw	r3, #65535	; 0xffff
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 8003648:	f04f 0aff 	mov.w	sl, #255	; 0xff
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800364c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8003650:	6b32      	ldr	r2, [r6, #48]	; 0x30
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8003652:	2607      	movs	r6, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8003654:	215a      	movs	r1, #90	; 0x5a
 8003656:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <main+0xf90>)
 800365e:	f7fd ffcf 	bl	8001600 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 8003662:	f894 36ae 	ldrb.w	r3, [r4, #1710]	; 0x6ae
 8003666:	f894 26ad 	ldrb.w	r2, [r4, #1709]	; 0x6ad
 800366a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800366e:	4981      	ldr	r1, [pc, #516]	; (8003874 <main+0xf94>)
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	a817      	add	r0, sp, #92	; 0x5c
 8003674:	f894 36ac 	ldrb.w	r3, [r4, #1708]	; 0x6ac
 8003678:	f001 fcaa 	bl	8004fd0 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800367c:	2191      	movs	r1, #145	; 0x91
 800367e:	20b4      	movs	r0, #180	; 0xb4
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <main+0xf90>)
 8003682:	aa17      	add	r2, sp, #92	; 0x5c
 8003684:	f8cd 9000 	str.w	r9, [sp]
 8003688:	f7fd ffba 	bl	8001600 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 800368c:	f894 35aa 	ldrb.w	r3, [r4, #1450]	; 0x5aa
 8003690:	f894 25a8 	ldrb.w	r2, [r4, #1448]	; 0x5a8
 8003694:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003698:	4976      	ldr	r1, [pc, #472]	; (8003874 <main+0xf94>)
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	a817      	add	r0, sp, #92	; 0x5c
 800369e:	f894 35a9 	ldrb.w	r3, [r4, #1449]	; 0x5a9
 80036a2:	f001 fc95 	bl	8004fd0 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 80036a6:	2191      	movs	r1, #145	; 0x91
 80036a8:	20b4      	movs	r0, #180	; 0xb4
 80036aa:	4b71      	ldr	r3, [pc, #452]	; (8003870 <main+0xf90>)
 80036ac:	aa17      	add	r2, sp, #92	; 0x5c
 80036ae:	f8cd a000 	str.w	sl, [sp]
 80036b2:	f7fd ffa5 	bl	8001600 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80036b6:	f894 85a7 	ldrb.w	r8, [r4, #1447]	; 0x5a7
 80036ba:	2191      	movs	r1, #145	; 0x91
 80036bc:	f108 0305 	add.w	r3, r8, #5
 80036c0:	fbb3 f2f6 	udiv	r2, r3, r6
 80036c4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80036ce:	2014      	movs	r0, #20
 80036d0:	4b67      	ldr	r3, [pc, #412]	; (8003870 <main+0xf90>)
 80036d2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80036d4:	f8cd 9000 	str.w	r9, [sp]
 80036d8:	f7fd ff92 	bl	8001600 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80036dc:	f108 0306 	add.w	r3, r8, #6
 80036e0:	fbb3 f6f6 	udiv	r6, r3, r6
 80036e4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80036e8:	1b9e      	subs	r6, r3, r6
 80036ea:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80036ee:	2191      	movs	r1, #145	; 0x91
 80036f0:	2014      	movs	r0, #20
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <main+0xf90>)
 80036f4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80036f6:	f8cd a000 	str.w	sl, [sp]
 80036fa:	f7fd ff81 	bl	8001600 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 80036fe:	f884 86ab 	strb.w	r8, [r4, #1707]	; 0x6ab
					rtcDateLast = rtcDate;
 8003702:	f894 35a8 	ldrb.w	r3, [r4, #1448]	; 0x5a8
 8003706:	f884 36ad 	strb.w	r3, [r4, #1709]	; 0x6ad
					rtcMonthLast = rtcMonth;
 800370a:	f894 35a9 	ldrb.w	r3, [r4, #1449]	; 0x5a9
 800370e:	f884 36ac 	strb.w	r3, [r4, #1708]	; 0x6ac
					rtcYearLast = rtcYear;
 8003712:	f894 35aa 	ldrb.w	r3, [r4, #1450]	; 0x5aa
 8003716:	f884 36ae 	strb.w	r3, [r4, #1710]	; 0x6ae
					rtcHrsLast = rtcHrs;
 800371a:	f894 35a6 	ldrb.w	r3, [r4, #1446]	; 0x5a6
 800371e:	72bb      	strb	r3, [r7, #10]
				rtcMinLast = rtcMin;
 8003720:	f894 35a5 	ldrb.w	r3, [r4, #1445]	; 0x5a5
 8003724:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0xFA; // temp_msb
 8003726:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003728:	2201      	movs	r2, #1
 800372a:	20ec      	movs	r0, #236	; 0xec
 800372c:	a910      	add	r1, sp, #64	; 0x40
    cmd[0] = 0xFA; // temp_msb
 800372e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003732:	f7fd fde8 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8003736:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 800373a:	2203      	movs	r2, #3
 800373c:	20ec      	movs	r0, #236	; 0xec
 800373e:	f7fd fc47 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8003742:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8003746:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800374a:	011b      	lsls	r3, r3, #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800374c:	4c4a      	ldr	r4, [pc, #296]	; (8003878 <main+0xf98>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800374e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003752:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
	temperature = BME280_getTemperature(-1);
 8003756:	f504 68d8 	add.w	r8, r4, #1728	; 0x6c0
 800375a:	ea43 1512 	orr.w	r5, r3, r2, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800375e:	f8b4 257e 	ldrh.w	r2, [r4, #1406]	; 0x57e
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8003762:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8003766:	0052      	lsls	r2, r2, #1
 8003768:	ebc2 02d5 	rsb	r2, r2, r5, lsr #3
 800376c:	f9b4 5580 	ldrsh.w	r5, [r4, #1408]	; 0x580
 8003770:	436a      	muls	r2, r5
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8003772:	fb03 f503 	mul.w	r5, r3, r3
 8003776:	f9b4 3582 	ldrsh.w	r3, [r4, #1410]	; 0x582
 800377a:	0b2d      	lsrs	r5, r5, #12
 800377c:	435d      	muls	r5, r3
 800377e:	0bad      	lsrs	r5, r5, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8003780:	eb05 25d2 	add.w	r5, r5, r2, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8003784:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8003788:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 800378a:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 800378c:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
    tempf = (float) temp;
 8003790:	f7fe fee2 	bl	8002558 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8003794:	4939      	ldr	r1, [pc, #228]	; (800387c <main+0xf9c>)
 8003796:	f7fe ffe7 	bl	8002768 <__aeabi_fdiv>
 800379a:	f7fd ffc5 	bl	8001728 <round_nth.constprop.0>
 800379e:	4607      	mov	r7, r0
 80037a0:	f7fe f9d2 	bl	8001b48 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 80037a4:	23fd      	movs	r3, #253	; 0xfd
 80037a6:	4682      	mov	sl, r0
 80037a8:	468b      	mov	fp, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80037aa:	2201      	movs	r2, #1
 80037ac:	20ec      	movs	r0, #236	; 0xec
 80037ae:	a910      	add	r1, sp, #64	; 0x40
    cmd[0] = 0xFD; // hum_msb
 80037b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80037b4:	e948 ab02 	strd	sl, fp, [r8, #-8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80037b8:	f7fd fda5 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80037bc:	2202      	movs	r2, #2
 80037be:	20ec      	movs	r0, #236	; 0xec
 80037c0:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 80037c4:	f7fd fc04 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80037c8:	f8b4 059a 	ldrh.w	r0, [r4, #1434]	; 0x59a
    v_x1 = t_fine - 76800;
 80037cc:	f5a5 3296 	sub.w	r2, r5, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80037d0:	f9b4 35a0 	ldrsh.w	r3, [r4, #1440]	; 0x5a0
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80037d4:	4350      	muls	r0, r2
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80037d6:	4353      	muls	r3, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80037d8:	12c0      	asrs	r0, r0, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80037da:	129b      	asrs	r3, r3, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80037dc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80037e0:	4358      	muls	r0, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 80037e2:	f9b4 3598 	ldrsh.w	r3, [r4, #1432]	; 0x598
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80037e6:	1280      	asrs	r0, r0, #10
 80037e8:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
 80037ec:	4358      	muls	r0, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 80037ee:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 80037f2:	1383      	asrs	r3, r0, #14
    hum_raw = (cmd[1] << 8) | cmd[2];
 80037f4:	f8bd 0041 	ldrh.w	r0, [sp, #65]	; 0x41
    var1 = (t_fine >> 1) - 64000;
 80037f8:	106d      	asrs	r5, r5, #1
    hum_raw = (cmd[1] << 8) | cmd[2];
 80037fa:	ba40      	rev16	r0, r0
 80037fc:	b281      	uxth	r1, r0
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80037fe:	f9b4 059c 	ldrsh.w	r0, [r4, #1436]	; 0x59c
    var1 = (t_fine >> 1) - 64000;
 8003802:	f5a5 457a 	sub.w	r5, r5, #64000	; 0xfa00
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8003806:	0500      	lsls	r0, r0, #20
 8003808:	ebc0 3081 	rsb	r0, r0, r1, lsl #14
 800380c:	f9b4 159e 	ldrsh.w	r1, [r4, #1438]	; 0x59e
 8003810:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8003814:	fb02 0011 	mls	r0, r2, r1, r0
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003818:	0bc0      	lsrs	r0, r0, #15
 800381a:	4358      	muls	r0, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800381c:	13c3      	asrs	r3, r0, #15
 800381e:	435b      	muls	r3, r3
 8003820:	f8b4 2596 	ldrh.w	r2, [r4, #1430]	; 0x596
 8003824:	11db      	asrs	r3, r3, #7
 8003826:	4353      	muls	r3, r2
 8003828:	eba0 1023 	sub.w	r0, r0, r3, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 800382c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8003830:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8003834:	bfa8      	it	ge
 8003836:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 800383a:	1300      	asrs	r0, r0, #12
 800383c:	f7fe fe8c 	bl	8002558 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8003840:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8003844:	f7fe fedc 	bl	8002600 <__aeabi_fmul>
 8003848:	f7fd ff6e 	bl	8001728 <round_nth.constprop.0>
 800384c:	4606      	mov	r6, r0
	humidity = BME280_getHumidity(-1);
 800384e:	f7fe f97b 	bl	8001b48 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8003852:	23f7      	movs	r3, #247	; 0xf7
 8003854:	e014      	b.n	8003880 <main+0xfa0>
 8003856:	bf00      	nop
 8003858:	00ffa500 	.word	0x00ffa500
 800385c:	40011000 	.word	0x40011000
 8003860:	0801a4dd 	.word	0x0801a4dd
 8003864:	08008cbc 	.word	0x08008cbc
 8003868:	08008c98 	.word	0x08008c98
 800386c:	0801a580 	.word	0x0801a580
 8003870:	08008cb0 	.word	0x08008cb0
 8003874:	0801a4b9 	.word	0x0801a4b9
 8003878:	20000200 	.word	0x20000200
 800387c:	42c80000 	.word	0x42c80000
 8003880:	e9c8 0100 	strd	r0, r1, [r8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003884:	2201      	movs	r2, #1
 8003886:	20ec      	movs	r0, #236	; 0xec
 8003888:	a910      	add	r1, sp, #64	; 0x40
    cmd[0] = 0xF7; // press_msb
 800388a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800388e:	f7fd fd3a 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8003892:	2203      	movs	r2, #3
 8003894:	20ec      	movs	r0, #236	; 0xec
 8003896:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 800389a:	f7fd fb99 	bl	8000fd0 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800389e:	10ab      	asrs	r3, r5, #2
 80038a0:	435b      	muls	r3, r3
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80038a2:	f9b4 0588 	ldrsh.w	r0, [r4, #1416]	; 0x588
 80038a6:	135a      	asrs	r2, r3, #13
 80038a8:	4342      	muls	r2, r0
 80038aa:	f9b4 0586 	ldrsh.w	r0, [r4, #1414]	; 0x586
 80038ae:	4368      	muls	r0, r5
 80038b0:	1040      	asrs	r0, r0, #1
 80038b2:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 80038b6:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80038b8:	f8b4 2584 	ldrh.w	r2, [r4, #1412]	; 0x584
 80038bc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80038c0:	4350      	muls	r0, r2
    if (var1 == 0) {
 80038c2:	13c2      	asrs	r2, r0, #15
 80038c4:	f000 81f3 	beq.w	8003cae <main+0x13ce>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80038c8:	f9b4 158c 	ldrsh.w	r1, [r4, #1420]	; 0x58c
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80038cc:	f9b4 058e 	ldrsh.w	r0, [r4, #1422]	; 0x58e
    var2 = var2 + ((var1 * dig_P5) << 1);
 80038d0:	434d      	muls	r5, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80038d2:	12db      	asrs	r3, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80038d4:	006d      	lsls	r5, r5, #1
 80038d6:	fb00 5503 	mla	r5, r0, r3, r5
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80038da:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80038de:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80038e8:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80038ec:	f9b4 1592 	ldrsh.w	r1, [r4, #1426]	; 0x592
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80038f0:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80038f4:	f9b4 058a 	ldrsh.w	r0, [r4, #1418]	; 0x58a
 80038f8:	0400      	lsls	r0, r0, #16
 80038fa:	eb00 05a5 	add.w	r5, r0, r5, asr #2
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80038fe:	485d      	ldr	r0, [pc, #372]	; (8003a74 <main+0x1194>)
 8003900:	eb03 3325 	add.w	r3, r3, r5, asr #12
 8003904:	4343      	muls	r3, r0
 8003906:	f103 4043 	add.w	r0, r3, #3271557120	; 0xc3000000
 800390a:	f500 00a0 	add.w	r0, r0, #5242880	; 0x500000
    if (press < 0x80000000) {
 800390e:	2800      	cmp	r0, #0
        press = (press / var1) * 2;
 8003910:	bfb3      	iteet	lt
 8003912:	fbb0 f0f2 	udivlt	r0, r0, r2
        press = (press << 1) / var1;
 8003916:	0040      	lslge	r0, r0, #1
 8003918:	fbb0 f0f2 	udivge	r0, r0, r2
        press = (press / var1) * 2;
 800391c:	0040      	lsllt	r0, r0, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800391e:	08c3      	lsrs	r3, r0, #3
 8003920:	435b      	muls	r3, r3
 8003922:	f9b4 2594 	ldrsh.w	r2, [r4, #1428]	; 0x594
 8003926:	0b5b      	lsrs	r3, r3, #13
 8003928:	435a      	muls	r2, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800392a:	0883      	lsrs	r3, r0, #2
 800392c:	434b      	muls	r3, r1
 800392e:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8003930:	eb03 3322 	add.w	r3, r3, r2, asr #12
 8003934:	f9b4 2590 	ldrsh.w	r2, [r4, #1424]	; 0x590
 8003938:	4413      	add	r3, r2
    pressf = (float) press;
 800393a:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800393e:	f7fe fe07 	bl	8002550 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8003942:	494d      	ldr	r1, [pc, #308]	; (8003a78 <main+0x1198>)
 8003944:	f7fe ff10 	bl	8002768 <__aeabi_fdiv>
	pressure = (uint16_t)BME280_getPressure();
 8003948:	f7fe ffaa 	bl	80028a0 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800394c:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8003950:	f240 331e 	movw	r3, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8003954:	b280      	uxth	r0, r0
 8003956:	f8a4 06c8 	strh.w	r0, [r4, #1736]	; 0x6c8
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800395a:	4410      	add	r0, r2
 800395c:	b280      	uxth	r0, r0
 800395e:	4298      	cmp	r0, r3
 8003960:	f200 8455 	bhi.w	800420e <main+0x192e>
 8003964:	4638      	mov	r0, r7
 8003966:	4945      	ldr	r1, [pc, #276]	; (8003a7c <main+0x119c>)
 8003968:	f7fe fcdc 	bl	8002324 <__aeabi_fcmplt>
 800396c:	2800      	cmp	r0, #0
 800396e:	f000 844e 	beq.w	800420e <main+0x192e>
 8003972:	4638      	mov	r0, r7
 8003974:	4942      	ldr	r1, [pc, #264]	; (8003a80 <main+0x11a0>)
 8003976:	f7fe fcf3 	bl	8002360 <__aeabi_fcmpgt>
 800397a:	2800      	cmp	r0, #0
 800397c:	f000 8447 	beq.w	800420e <main+0x192e>
 8003980:	2100      	movs	r1, #0
 8003982:	4630      	mov	r0, r6
 8003984:	f7fe fcec 	bl	8002360 <__aeabi_fcmpgt>
 8003988:	2800      	cmp	r0, #0
 800398a:	f000 8440 	beq.w	800420e <main+0x192e>
 800398e:	4630      	mov	r0, r6
 8003990:	4939      	ldr	r1, [pc, #228]	; (8003a78 <main+0x1198>)
 8003992:	f7fe fcc7 	bl	8002324 <__aeabi_fcmplt>
 8003996:	2800      	cmp	r0, #0
 8003998:	f000 8439 	beq.w	800420e <main+0x192e>
		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 800399c:	4d39      	ldr	r5, [pc, #228]	; (8003a84 <main+0x11a4>)
 800399e:	4650      	mov	r0, sl
 80039a0:	462e      	mov	r6, r5
 80039a2:	4659      	mov	r1, fp
 80039a4:	e876 8904 	ldrd	r8, r9, [r6], #-16
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	f7fe fb8c 	bl	80020c8 <__aeabi_dcmpeq>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	f040 820f 	bne.w	8003dd4 <main+0x14f4>
 80039b6:	4638      	mov	r0, r7
 80039b8:	4933      	ldr	r1, [pc, #204]	; (8003a88 <main+0x11a8>)
 80039ba:	f7fe fcbd 	bl	8002338 <__aeabi_fcmple>
 80039be:	2800      	cmp	r0, #0
 80039c0:	f000 8208 	beq.w	8003dd4 <main+0x14f4>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80039c4:	2200      	movs	r2, #0
 80039c6:	4640      	mov	r0, r8
 80039c8:	4649      	mov	r1, r9
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <main+0x11ac>)
 80039cc:	f7fe fb9a 	bl	8002104 <__aeabi_dcmpge>
 80039d0:	b988      	cbnz	r0, 80039f6 <main+0x1116>
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	4640      	mov	r0, r8
 80039d8:	4649      	mov	r1, r9
 80039da:	f7fe fb7f 	bl	80020dc <__aeabi_dcmplt>
 80039de:	2800      	cmp	r0, #0
 80039e0:	f000 8167 	beq.w	8003cb2 <main+0x13d2>
 80039e4:	2200      	movs	r2, #0
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <main+0x11b0>)
 80039ec:	f7fe fb94 	bl	8002118 <__aeabi_dcmpgt>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	f000 815e 	beq.w	8003cb2 <main+0x13d2>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	4926      	ldr	r1, [pc, #152]	; (8003a94 <main+0x11b4>)
 80039fc:	a810      	add	r0, sp, #64	; 0x40
 80039fe:	f001 fae7 	bl	8004fd0 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003a02:	2300      	movs	r3, #0
 8003a04:	21bb      	movs	r1, #187	; 0xbb
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2001      	movs	r0, #1
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <main+0x11b8>)
 8003a0c:	aa10      	add	r2, sp, #64	; 0x40
 8003a0e:	e16c      	b.n	8003cea <main+0x140a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a12:	b9b3      	cbnz	r3, 8003a42 <main+0x1162>
 8003a14:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
 8003a18:	fbb6 f0f0 	udiv	r0, r6, r0
 8003a1c:	0500      	lsls	r0, r0, #20
 8003a1e:	f510 1f80 	cmn.w	r0, #1048576	; 0x100000
 8003a22:	bf14      	ite	ne
 8003a24:	2000      	movne	r0, #0
 8003a26:	2001      	moveq	r0, #1
 8003a28:	b9f0      	cbnz	r0, 8003a68 <main+0x1188>
 8003a2a:	b973      	cbnz	r3, 8003a4a <main+0x116a>
 8003a2c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8003a30:	fbb6 f3f3 	udiv	r3, r6, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	f7ff b9c7 	b.w	8002dd0 <main+0x4f0>
 8003a42:	2019      	movs	r0, #25
 8003a44:	fb00 f00c 	mul.w	r0, r0, ip
 8003a48:	e7e6      	b.n	8003a18 <main+0x1138>
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	fb03 f30c 	mul.w	r3, r3, ip
 8003a50:	fbb6 f3f3 	udiv	r3, r6, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5e:	f7ff b9b7 	b.w	8002dd0 <main+0x4f0>
 8003a62:	2304      	movs	r3, #4
 8003a64:	f7ff b9b4 	b.w	8002dd0 <main+0x4f0>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f7ff b9b1 	b.w	8002dd0 <main+0x4f0>
    __HAL_UNLOCK(hdma); 
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]
 8003a72:	e4b6      	b.n	80033e2 <main+0xb02>
 8003a74:	fffff3cb 	.word	0xfffff3cb
 8003a78:	42c80000 	.word	0x42c80000
 8003a7c:	42aa0000 	.word	0x42aa0000
 8003a80:	c2200000 	.word	0xc2200000
 8003a84:	200008d0 	.word	0x200008d0
 8003a88:	42200000 	.word	0x42200000
 8003a8c:	40240000 	.word	0x40240000
 8003a90:	c0240000 	.word	0xc0240000
 8003a94:	0801a4c8 	.word	0x0801a4c8
 8003a98:	08008cb0 	.word	0x08008cb0
			HAL_Delay(200);
 8003a9c:	20c8      	movs	r0, #200	; 0xc8
 8003a9e:	f7fc fc3e 	bl	800031e <HAL_Delay>
			rx_index = 0;
 8003aa2:	2300      	movs	r3, #0
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	49ae      	ldr	r1, [pc, #696]	; (8003d60 <main+0x1480>)
 8003aa8:	f204 50ab 	addw	r0, r4, #1451	; 0x5ab
			rx_index = 0;
 8003aac:	f884 35a3 	strb.w	r3, [r4, #1443]	; 0x5a3
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003ab0:	f005 f858 	bl	8008b64 <memcmp>
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	bb10      	cbnz	r0, 8003afe <main+0x121e>
			for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003ab8:	b2a8      	uxth	r0, r5
 8003aba:	2100      	movs	r1, #0
 8003abc:	3501      	adds	r5, #1
 8003abe:	f7fd f9c3 	bl	8000e48 <AT24XX_Update>
 8003ac2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003ac6:	d1f7      	bne.n	8003ab8 <main+0x11d8>
			uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8003ac8:	aa17      	add	r2, sp, #92	; 0x5c
 8003aca:	4616      	mov	r6, r2
 8003acc:	4ba5      	ldr	r3, [pc, #660]	; (8003d64 <main+0x1484>)
 8003ace:	f103 0710 	add.w	r7, r3, #16
 8003ad2:	4615      	mov	r5, r2
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	c503      	stmia	r5!, {r0, r1}
 8003adc:	42bb      	cmp	r3, r7
 8003ade:	462a      	mov	r2, r5
 8003ae0:	d1f7      	bne.n	8003ad2 <main+0x11f2>
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	6028      	str	r0, [r5, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d107      	bne.n	8003afe <main+0x121e>
    __HAL_LOCK(huart);
 8003aee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d003      	beq.n	8003afe <main+0x121e>
 8003af6:	2114      	movs	r1, #20
 8003af8:	4630      	mov	r0, r6
 8003afa:	f7fd fd23 	bl	8001544 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
		if (memcmp(rx_buffer, "RT", 2) == 0) {
 8003afe:	2202      	movs	r2, #2
 8003b00:	4999      	ldr	r1, [pc, #612]	; (8003d68 <main+0x1488>)
 8003b02:	489a      	ldr	r0, [pc, #616]	; (8003d6c <main+0x148c>)
 8003b04:	f005 f82e 	bl	8008b64 <memcmp>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f040 80ba 	bne.w	8003c82 <main+0x13a2>
			val[0] = rx_buffer[2];
 8003b0e:	f894 35ad 	ldrb.w	r3, [r4, #1453]	; 0x5ad
			DS3231_setHrs(atoi(val));
 8003b12:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[2];
 8003b14:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[3];
 8003b18:	f894 35ae 	ldrb.w	r3, [r4, #1454]	; 0x5ae
    return ((val / 10 * 16) + (val % 10));
 8003b1c:	250a      	movs	r5, #10
 8003b1e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setHrs(atoi(val));
 8003b22:	f000 fbac 	bl	800427e <atoi>
 8003b26:	b2c6      	uxtb	r6, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 8003b28:	f7fd fcb6 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003b2c:	fbb6 f0f5 	udiv	r0, r6, r5
 8003b30:	fb05 6610 	mls	r6, r5, r0, r6
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b34:	2211      	movs	r2, #17
 8003b36:	498e      	ldr	r1, [pc, #568]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003b38:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b3c:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 8003b3e:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b42:	f7fd fbe0 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[4];
 8003b46:	f894 35af 	ldrb.w	r3, [r4, #1455]	; 0x5af
			DS3231_setMin(atoi(val));
 8003b4a:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[4];
 8003b4c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[5];
 8003b50:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
 8003b54:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setMin(atoi(val));
 8003b58:	f000 fb91 	bl	800427e <atoi>
 8003b5c:	b2c6      	uxtb	r6, r0
    DS3231_Update();
 8003b5e:	f7fd fc9b 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003b62:	fbb6 f0f5 	udiv	r0, r6, r5
 8003b66:	fb05 6610 	mls	r6, r5, r0, r6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b6a:	2211      	movs	r2, #17
 8003b6c:	4980      	ldr	r1, [pc, #512]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003b6e:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b72:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 8003b74:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003b78:	f7fd fbc5 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[6];
 8003b7c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
			DS3231_setSec(atoi(val));
 8003b80:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[6];
 8003b82:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[7];
 8003b86:	f894 35b2 	ldrb.w	r3, [r4, #1458]	; 0x5b2
 8003b8a:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setSec(atoi(val));
 8003b8e:	f000 fb76 	bl	800427e <atoi>
 8003b92:	b2c6      	uxtb	r6, r0
    DS3231_Update();
 8003b94:	f7fd fc80 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003b98:	fbb6 f0f5 	udiv	r0, r6, r5
 8003b9c:	fb05 6610 	mls	r6, r5, r0, r6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003ba0:	2211      	movs	r2, #17
 8003ba2:	4973      	ldr	r1, [pc, #460]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003ba4:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003ba8:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 8003baa:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003bae:	f7fd fbaa 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[8];
 8003bb2:	f894 35b3 	ldrb.w	r3, [r4, #1459]	; 0x5b3
			DS3231_setDate(atoi(val));
 8003bb6:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[8];
 8003bb8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[9];
 8003bbc:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
 8003bc0:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setDate(atoi(val));
 8003bc4:	f000 fb5b 	bl	800427e <atoi>
 8003bc8:	b2c6      	uxtb	r6, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8003bca:	f7fd fc65 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003bce:	fbb6 f0f5 	udiv	r0, r6, r5
 8003bd2:	fb05 6610 	mls	r6, r5, r0, r6
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003bd6:	2211      	movs	r2, #17
 8003bd8:	4965      	ldr	r1, [pc, #404]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003bda:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003bde:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8003be0:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003be4:	f7fd fb8f 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[10];
 8003be8:	f894 35b5 	ldrb.w	r3, [r4, #1461]	; 0x5b5
			DS3231_setMonth(atoi(val));
 8003bec:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[10];
 8003bee:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[11];
 8003bf2:	f894 35b6 	ldrb.w	r3, [r4, #1462]	; 0x5b6
 8003bf6:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setMonth(atoi(val));
 8003bfa:	f000 fb40 	bl	800427e <atoi>
 8003bfe:	b2c6      	uxtb	r6, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 8003c00:	f7fd fc4a 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003c04:	fbb6 f0f5 	udiv	r0, r6, r5
 8003c08:	fb05 6610 	mls	r6, r5, r0, r6
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c0c:	2211      	movs	r2, #17
 8003c0e:	4958      	ldr	r1, [pc, #352]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003c10:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c14:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8003c16:	f884 60b5 	strb.w	r6, [r4, #181]	; 0xb5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c1a:	f7fd fb74 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[12];
 8003c1e:	f894 35b7 	ldrb.w	r3, [r4, #1463]	; 0x5b7
			DS3231_setYear(atoi(val));
 8003c22:	a817      	add	r0, sp, #92	; 0x5c
			val[0] = rx_buffer[12];
 8003c24:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			val[1] = rx_buffer[13];
 8003c28:	f894 35b8 	ldrb.w	r3, [r4, #1464]	; 0x5b8
 8003c2c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setYear(atoi(val));
 8003c30:	f000 fb25 	bl	800427e <atoi>
 8003c34:	b2c6      	uxtb	r6, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 8003c36:	f7fd fc2f 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003c3a:	fbb6 f0f5 	udiv	r0, r6, r5
 8003c3e:	fb05 6610 	mls	r6, r5, r0, r6
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c42:	2211      	movs	r2, #17
 8003c44:	494a      	ldr	r1, [pc, #296]	; (8003d70 <main+0x1490>)
    return ((val / 10 * 16) + (val % 10));
 8003c46:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c4a:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 8003c4c:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c50:	f7fd fb59 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[1] = rx_buffer[14];
 8003c54:	f894 35b9 	ldrb.w	r3, [r4, #1465]	; 0x5b9
			DS3231_setDay(atoi(val));
 8003c58:	a817      	add	r0, sp, #92	; 0x5c
			val[1] = rx_buffer[14];
 8003c5a:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
			DS3231_setDay(atoi(val));
 8003c5e:	f000 fb0e 	bl	800427e <atoi>
 8003c62:	b2c6      	uxtb	r6, r0
    DS3231_Update();
 8003c64:	f7fd fc18 	bl	8001498 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8003c68:	fbb6 f0f5 	udiv	r0, r6, r5
 8003c6c:	fb05 6610 	mls	r6, r5, r0, r6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c70:	2211      	movs	r2, #17
    return ((val / 10 * 16) + (val % 10));
 8003c72:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c76:	493e      	ldr	r1, [pc, #248]	; (8003d70 <main+0x1490>)
 8003c78:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[4] = decToBcd(value);
 8003c7a:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8003c7e:	f7fd fb42 	bl	8001306 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	2100      	movs	r1, #0
 8003c86:	4839      	ldr	r0, [pc, #228]	; (8003d6c <main+0x148c>)
 8003c88:	f000 fb28 	bl	80042dc <memset>
 8003c8c:	f7ff bbb9 	b.w	8003402 <main+0xb22>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 8003c90:	462b      	mov	r3, r5
 8003c92:	2201      	movs	r2, #1
 8003c94:	2107      	movs	r1, #7
 8003c96:	2023      	movs	r0, #35	; 0x23
 8003c98:	f7fc fd48 	bl	800072c <LCD_Circle.constprop.0>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2107      	movs	r1, #7
 8003ca2:	204b      	movs	r0, #75	; 0x4b
 8003ca4:	f7fc fd42 	bl	800072c <LCD_Circle.constprop.0>
 8003ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cac:	e436      	b.n	800351c <main+0xc3c>
        return 0;
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e64a      	b.n	8003948 <main+0x1068>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <main+0x1494>)
 8003cba:	f7fe fa0f 	bl	80020dc <__aeabi_dcmplt>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d03b      	beq.n	8003d3a <main+0x145a>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	4649      	mov	r1, r9
 8003cca:	f7fe fa25 	bl	8002118 <__aeabi_dcmpgt>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d033      	beq.n	8003d3a <main+0x145a>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	4928      	ldr	r1, [pc, #160]	; (8003d78 <main+0x1498>)
 8003cd8:	a810      	add	r0, sp, #64	; 0x40
 8003cda:	f001 f979 	bl	8004fd0 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	21bb      	movs	r1, #187	; 0xbb
 8003ce2:	201b      	movs	r0, #27
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <main+0x149c>)
 8003ce8:	aa10      	add	r2, sp, #64	; 0x40
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8003cea:	f7fd fc89 	bl	8001600 <LCD_Font.constprop.0>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8003cee:	e956 8902 	ldrd	r8, r9, [r6, #-8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4640      	mov	r0, r8
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <main+0x1494>)
 8003cfa:	f7fe fa03 	bl	8002104 <__aeabi_dcmpge>
 8003cfe:	b978      	cbnz	r0, 8003d20 <main+0x1440>
 8003d00:	2200      	movs	r2, #0
 8003d02:	2300      	movs	r3, #0
 8003d04:	4640      	mov	r0, r8
 8003d06:	4649      	mov	r1, r9
 8003d08:	f7fe f9e8 	bl	80020dc <__aeabi_dcmplt>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d03d      	beq.n	8003d8c <main+0x14ac>
 8003d10:	2200      	movs	r2, #0
 8003d12:	4640      	mov	r0, r8
 8003d14:	4649      	mov	r1, r9
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <main+0x14a0>)
 8003d18:	f7fe f9fe 	bl	8002118 <__aeabi_dcmpgt>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d035      	beq.n	8003d8c <main+0x14ac>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	4914      	ldr	r1, [pc, #80]	; (8003d78 <main+0x1498>)
 8003d26:	a810      	add	r0, sp, #64	; 0x40
 8003d28:	f001 f952 	bl	8004fd0 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003d2c:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <main+0x14a4>)
 8003d2e:	21bb      	movs	r1, #187	; 0xbb
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2001      	movs	r0, #1
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <main+0x149c>)
 8003d36:	aa10      	add	r2, sp, #64	; 0x40
 8003d38:	e046      	b.n	8003dc8 <main+0x14e8>
			else if (temperatureLast <= -10) {
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <main+0x14a0>)
 8003d42:	f7fe f9d5 	bl	80020f0 <__aeabi_dcmple>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0d1      	beq.n	8003cee <main+0x140e>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	f7fe fa03 	bl	8002158 <__aeabi_d2iz>
 8003d52:	490d      	ldr	r1, [pc, #52]	; (8003d88 <main+0x14a8>)
 8003d54:	b242      	sxtb	r2, r0
 8003d56:	a810      	add	r0, sp, #64	; 0x40
 8003d58:	f001 f93a 	bl	8004fd0 <siprintf>
 8003d5c:	e651      	b.n	8003a02 <main+0x1122>
 8003d5e:	bf00      	nop
 8003d60:	0801a4b3 	.word	0x0801a4b3
 8003d64:	0801a50b 	.word	0x0801a50b
 8003d68:	0801a4b6 	.word	0x0801a4b6
 8003d6c:	200007ab 	.word	0x200007ab
 8003d70:	200002af 	.word	0x200002af
 8003d74:	40240000 	.word	0x40240000
 8003d78:	0801a4c8 	.word	0x0801a4c8
 8003d7c:	08008cb0 	.word	0x08008cb0
 8003d80:	c0240000 	.word	0xc0240000
 8003d84:	00ffa500 	.word	0x00ffa500
 8003d88:	0801a4cf 	.word	0x0801a4cf
			else if (temperature < 10 && temperature > 0) {
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4640      	mov	r0, r8
 8003d90:	4649      	mov	r1, r9
 8003d92:	4bae      	ldr	r3, [pc, #696]	; (800404c <main+0x176c>)
 8003d94:	f7fe f9a2 	bl	80020dc <__aeabi_dcmplt>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	f000 8218 	beq.w	80041ce <main+0x18ee>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2300      	movs	r3, #0
 8003da2:	4640      	mov	r0, r8
 8003da4:	4649      	mov	r1, r9
 8003da6:	f7fe f9b7 	bl	8002118 <__aeabi_dcmpgt>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	f000 820f 	beq.w	80041ce <main+0x18ee>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	49a6      	ldr	r1, [pc, #664]	; (8004050 <main+0x1770>)
 8003db6:	a810      	add	r0, sp, #64	; 0x40
 8003db8:	f001 f90a 	bl	8004fd0 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003dbc:	21bb      	movs	r1, #187	; 0xbb
 8003dbe:	201b      	movs	r0, #27
 8003dc0:	4ba4      	ldr	r3, [pc, #656]	; (8004054 <main+0x1774>)
 8003dc2:	aa10      	add	r2, sp, #64	; 0x40
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4ba4      	ldr	r3, [pc, #656]	; (8004058 <main+0x1778>)
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8003dc8:	f7fd fc1a 	bl	8001600 <LCD_Font.constprop.0>
			temperatureLast = temperature;
 8003dcc:	e956 2302 	ldrd	r2, r3, [r6, #-8]
 8003dd0:	e9c5 2300 	strd	r2, r3, [r5]
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8003dd4:	e955 8904 	ldrd	r8, r9, [r5, #-16]
 8003dd8:	4fa0      	ldr	r7, [pc, #640]	; (800405c <main+0x177c>)
 8003dda:	4640      	mov	r0, r8
 8003ddc:	e957 ab02 	ldrd	sl, fp, [r7, #-8]
 8003de0:	4649      	mov	r1, r9
 8003de2:	4652      	mov	r2, sl
 8003de4:	465b      	mov	r3, fp
 8003de6:	f7fe f96f 	bl	80020c8 <__aeabi_dcmpeq>
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d142      	bne.n	8003e74 <main+0x1594>
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fe f985 	bl	8002104 <__aeabi_dcmpge>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d03a      	beq.n	8003e74 <main+0x1594>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	4b96      	ldr	r3, [pc, #600]	; (8004060 <main+0x1780>)
 8003e06:	f7fe f969 	bl	80020dc <__aeabi_dcmplt>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d032      	beq.n	8003e74 <main+0x1594>
			sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8003e0e:	4652      	mov	r2, sl
 8003e10:	465b      	mov	r3, fp
 8003e12:	4994      	ldr	r1, [pc, #592]	; (8004064 <main+0x1784>)
 8003e14:	a810      	add	r0, sp, #64	; 0x40
 8003e16:	f001 f8db 	bl	8004fd0 <siprintf>
			if (humidityLast >= 10)
 8003e1a:	e957 0102 	ldrd	r0, r1, [r7, #-8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4b8a      	ldr	r3, [pc, #552]	; (800404c <main+0x176c>)
 8003e22:	f7fe f96f 	bl	8002104 <__aeabi_dcmpge>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	f000 81e4 	beq.w	80041f4 <main+0x1914>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	21bb      	movs	r1, #187	; 0xbb
 8003e30:	20a0      	movs	r0, #160	; 0xa0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <main+0x1778>)
 8003e36:	aa10      	add	r2, sp, #64	; 0x40
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8003e38:	f7fd fbe2 	bl	8001600 <LCD_Font.constprop.0>
			sprintf(weatherPrintH, "%.1f'H", humidity);
 8003e3c:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8003e40:	4988      	ldr	r1, [pc, #544]	; (8004064 <main+0x1784>)
 8003e42:	a810      	add	r0, sp, #64	; 0x40
 8003e44:	f001 f8c4 	bl	8004fd0 <siprintf>
			if (humidity >= 10)
 8003e48:	e955 8904 	ldrd	r8, r9, [r5, #-16]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4649      	mov	r1, r9
 8003e50:	4b7e      	ldr	r3, [pc, #504]	; (800404c <main+0x176c>)
 8003e52:	4640      	mov	r0, r8
 8003e54:	f7fe f956 	bl	8002104 <__aeabi_dcmpge>
 8003e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003e5c:	21bb      	movs	r1, #187	; 0xbb
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	aa10      	add	r2, sp, #64	; 0x40
 8003e62:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <main+0x1778>)
			if (humidity >= 10)
 8003e64:	2800      	cmp	r0, #0
 8003e66:	f000 81cb 	beq.w	8004200 <main+0x1920>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003e6a:	20a0      	movs	r0, #160	; 0xa0
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8003e6c:	f7fd fbc8 	bl	8001600 <LCD_Font.constprop.0>
			humidityLast = humidity;
 8003e70:	e947 8902 	strd	r8, r9, [r7, #-8]
		if (pressureLast != pressure) {
 8003e74:	f8b4 26e0 	ldrh.w	r2, [r4, #1760]	; 0x6e0
 8003e78:	f8b4 36c8 	ldrh.w	r3, [r4, #1736]	; 0x6c8
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d027      	beq.n	8003ed0 <main+0x15f0>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8003e80:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003e84:	bf2c      	ite	cs
 8003e86:	4978      	ldrcs	r1, [pc, #480]	; (8004068 <main+0x1788>)
			else sprintf(weatherPrintP, " %02d", pressureLast);
 8003e88:	4978      	ldrcc	r1, [pc, #480]	; (800406c <main+0x178c>)
 8003e8a:	a810      	add	r0, sp, #64	; 0x40
 8003e8c:	f001 f8a0 	bl	8004fd0 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8003e90:	2300      	movs	r3, #0
 8003e92:	21bb      	movs	r1, #187	; 0xbb
 8003e94:	f240 1041 	movw	r0, #321	; 0x141
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	aa10      	add	r2, sp, #64	; 0x40
 8003e9c:	4b6e      	ldr	r3, [pc, #440]	; (8004058 <main+0x1778>)
 8003e9e:	f7fd fbaf 	bl	8001600 <LCD_Font.constprop.0>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8003ea2:	f8b4 26c8 	ldrh.w	r2, [r4, #1736]	; 0x6c8
			else sprintf(weatherPrintP, " %02d", pressure);
 8003ea6:	a810      	add	r0, sp, #64	; 0x40
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8003ea8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003eac:	bf2c      	ite	cs
 8003eae:	496e      	ldrcs	r1, [pc, #440]	; (8004068 <main+0x1788>)
			else sprintf(weatherPrintP, " %02d", pressure);
 8003eb0:	496e      	ldrcc	r1, [pc, #440]	; (800406c <main+0x178c>)
 8003eb2:	f001 f88d 	bl	8004fd0 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GRAY);
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	; (8004070 <main+0x1790>)
 8003eb8:	21bb      	movs	r1, #187	; 0xbb
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	f240 1041 	movw	r0, #321	; 0x141
 8003ec0:	4b65      	ldr	r3, [pc, #404]	; (8004058 <main+0x1778>)
 8003ec2:	aa10      	add	r2, sp, #64	; 0x40
 8003ec4:	f7fd fb9c 	bl	8001600 <LCD_Font.constprop.0>
			pressureLast = pressure;
 8003ec8:	f8b4 36c8 	ldrh.w	r3, [r4, #1736]	; 0x6c8
 8003ecc:	f8a4 36e0 	strh.w	r3, [r4, #1760]	; 0x6e0
		if (AT24XX_Read(0) != rtcHrs) {
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7fc fde9 	bl	8000aa8 <AT24XX_Read>
 8003ed6:	f894 15a6 	ldrb.w	r1, [r4, #1446]	; 0x5a6
 8003eda:	4288      	cmp	r0, r1
 8003edc:	f000 8192 	beq.w	8004204 <main+0x1924>
			AT24XX_Update(0, rtcHrs);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fc ffb1 	bl	8000e48 <AT24XX_Update>
 8003ee6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003eea:	f240 5a22 	movw	sl, #1314	; 0x522
			AT24XX_Update(0, rtcHrs);
 8003eee:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8004074 <main+0x1794>
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7fc fdd8 	bl	8000aa8 <AT24XX_Read>
 8003ef8:	4680      	mov	r8, r0
 8003efa:	1c78      	adds	r0, r7, #1
 8003efc:	b280      	uxth	r0, r0
 8003efe:	f7fc fdd3 	bl	8000aa8 <AT24XX_Read>
 8003f02:	3702      	adds	r7, #2
 8003f04:	b2bf      	uxth	r7, r7
	return (byteH << 8) | byteL;
 8003f06:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003f0a:	4557      	cmp	r7, sl
 8003f0c:	f829 8b02 	strh.w	r8, [r9], #2
 8003f10:	d1ef      	bne.n	8003ef2 <main+0x1612>
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 8003f12:	4959      	ldr	r1, [pc, #356]	; (8004078 <main+0x1798>)
 8003f14:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003f18:	1e88      	subs	r0, r1, #2
 8003f1a:	f004 f89b 	bl	8008054 <memmove>
			hT[155] = (uint16_t) (temperature * 10);
 8003f1e:	e956 0102 	ldrd	r0, r1, [r6, #-8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	4b49      	ldr	r3, [pc, #292]	; (800404c <main+0x176c>)
 8003f26:	f7fd fe67 	bl	8001bf8 <__aeabi_dmul>
 8003f2a:	f7fe f93d 	bl	80021a8 <__aeabi_d2uiz>
 8003f2e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			for (uint16_t i = 0; i < 157; i++) {
 8003f32:	f240 5922 	movw	r9, #1314	; 0x522
			hT[155] = (uint16_t) (temperature * 10);
 8003f36:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8004074 <main+0x1794>
 8003f3a:	f8a4 0306 	strh.w	r0, [r4, #774]	; 0x306
				AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8003f3e:	f838 7b02 	ldrh.w	r7, [r8], #2
 8003f42:	4630      	mov	r0, r6
 8003f44:	b2f9      	uxtb	r1, r7
 8003f46:	f7fc ff7f 	bl	8000e48 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003f4a:	1c70      	adds	r0, r6, #1
			for (uint16_t i = 0; i < 157; i++) {
 8003f4c:	3602      	adds	r6, #2
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003f4e:	0a39      	lsrs	r1, r7, #8
 8003f50:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 8003f52:	b2b6      	uxth	r6, r6
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8003f54:	f7fc ff78 	bl	8000e48 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8003f58:	454e      	cmp	r6, r9
 8003f5a:	d1f0      	bne.n	8003f3e <main+0x165e>
 8003f5c:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003f60:	f640 190a 	movw	r9, #2314	; 0x90a
 8003f64:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800407c <main+0x179c>
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7fc fd9d 	bl	8000aa8 <AT24XX_Read>
 8003f6e:	4607      	mov	r7, r0
 8003f70:	1c70      	adds	r0, r6, #1
 8003f72:	b280      	uxth	r0, r0
 8003f74:	f7fc fd98 	bl	8000aa8 <AT24XX_Read>
 8003f78:	3602      	adds	r6, #2
 8003f7a:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 8003f7c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003f80:	454e      	cmp	r6, r9
 8003f82:	f828 7b02 	strh.w	r7, [r8], #2
 8003f86:	d1ef      	bne.n	8003f68 <main+0x1688>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8003f88:	493d      	ldr	r1, [pc, #244]	; (8004080 <main+0x17a0>)
 8003f8a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003f8e:	1e88      	subs	r0, r1, #2
 8003f90:	f004 f860 	bl	8008054 <memmove>
			hH[155] = (uint16_t) (humidity * 10);
 8003f94:	e955 0104 	ldrd	r0, r1, [r5, #-16]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <main+0x176c>)
 8003f9c:	f7fd fe2c 	bl	8001bf8 <__aeabi_dmul>
 8003fa0:	f7fe f902 	bl	80021a8 <__aeabi_d2uiz>
 8003fa4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
			for (uint16_t i = 0; i < 157; i++) {
 8003fa8:	f640 180a 	movw	r8, #2314	; 0x90a
			hH[155] = (uint16_t) (humidity * 10);
 8003fac:	4f33      	ldr	r7, [pc, #204]	; (800407c <main+0x179c>)
 8003fae:	f8a4 0440 	strh.w	r0, [r4, #1088]	; 0x440
				AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8003fb2:	f837 6b02 	ldrh.w	r6, [r7], #2
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	b2f1      	uxtb	r1, r6
 8003fba:	f7fc ff45 	bl	8000e48 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003fbe:	1c68      	adds	r0, r5, #1
			for (uint16_t i = 0; i < 157; i++) {
 8003fc0:	3502      	adds	r5, #2
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003fc2:	0a31      	lsrs	r1, r6, #8
 8003fc4:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 8003fc6:	b2ad      	uxth	r5, r5
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8003fc8:	f7fc ff3e 	bl	8000e48 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8003fcc:	4545      	cmp	r5, r8
 8003fce:	d1f0      	bne.n	8003fb2 <main+0x16d2>
 8003fd0:	f640 35b8 	movw	r5, #3000	; 0xbb8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003fd4:	f640 48f2 	movw	r8, #3314	; 0xcf2
 8003fd8:	4f2a      	ldr	r7, [pc, #168]	; (8004084 <main+0x17a4>)
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fc fd64 	bl	8000aa8 <AT24XX_Read>
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	1c68      	adds	r0, r5, #1
 8003fe4:	b280      	uxth	r0, r0
 8003fe6:	f7fc fd5f 	bl	8000aa8 <AT24XX_Read>
 8003fea:	3502      	adds	r5, #2
 8003fec:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8003fee:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003ff2:	4545      	cmp	r5, r8
 8003ff4:	f827 6b02 	strh.w	r6, [r7], #2
 8003ff8:	d1ef      	bne.n	8003fda <main+0x16fa>
			hP[155] = (uint16_t)pressure;
 8003ffa:	f640 35b8 	movw	r5, #3000	; 0xbb8
			for (uint16_t i = 0; i < 157; i++) {
 8003ffe:	f640 48f2 	movw	r8, #3314	; 0xcf2
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 8004002:	4921      	ldr	r1, [pc, #132]	; (8004088 <main+0x17a8>)
 8004004:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004008:	1e88      	subs	r0, r1, #2
 800400a:	f004 f823 	bl	8008054 <memmove>
			hP[155] = (uint16_t)pressure;
 800400e:	f8b4 36c8 	ldrh.w	r3, [r4, #1736]	; 0x6c8
 8004012:	4f1c      	ldr	r7, [pc, #112]	; (8004084 <main+0x17a4>)
 8004014:	f8a4 357a 	strh.w	r3, [r4, #1402]	; 0x57a
				AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8004018:	f837 6b02 	ldrh.w	r6, [r7], #2
 800401c:	4628      	mov	r0, r5
 800401e:	b2f1      	uxtb	r1, r6
 8004020:	f7fc ff12 	bl	8000e48 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8004024:	1c68      	adds	r0, r5, #1
			for (uint16_t i = 0; i < 157; i++) {
 8004026:	3502      	adds	r5, #2
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8004028:	0a31      	lsrs	r1, r6, #8
 800402a:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 800402c:	b2ad      	uxth	r5, r5
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 800402e:	f7fc ff0b 	bl	8000e48 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8004032:	4545      	cmp	r5, r8
 8004034:	d1f0      	bne.n	8004018 <main+0x1738>
			LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8004036:	2002      	movs	r0, #2
 8004038:	f7fc fc47 	bl	80008ca <LCD_Rect.constprop.0>
 800403c:	f04f 0903 	mov.w	r9, #3
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8004040:	260a      	movs	r6, #10
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8004042:	f04f 0800 	mov.w	r8, #0
			LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8004046:	4f0b      	ldr	r7, [pc, #44]	; (8004074 <main+0x1794>)
 8004048:	e020      	b.n	800408c <main+0x17ac>
 800404a:	bf00      	nop
 800404c:	40240000 	.word	0x40240000
 8004050:	0801a4c8 	.word	0x0801a4c8
 8004054:	00ffa500 	.word	0x00ffa500
 8004058:	08008cb0 	.word	0x08008cb0
 800405c:	200008e0 	.word	0x200008e0
 8004060:	40590000 	.word	0x40590000
 8004064:	0801a4d5 	.word	0x0801a4d5
 8004068:	0801a4dd 	.word	0x0801a4dd
 800406c:	0801a4dc 	.word	0x0801a4dc
 8004070:	007f7f7f 	.word	0x007f7f7f
 8004074:	200003d0 	.word	0x200003d0
 8004078:	200003d4 	.word	0x200003d4
 800407c:	2000050a 	.word	0x2000050a
 8004080:	2000050e 	.word	0x2000050e
 8004084:	20000644 	.word	0x20000644
 8004088:	20000648 	.word	0x20000648
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 800408c:	f937 5b02 	ldrsh.w	r5, [r7], #2
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8004090:	464a      	mov	r2, r9
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8004092:	fb95 f5f6 	sdiv	r5, r5, r6
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004096:	b2ad      	uxth	r5, r5
 8004098:	3d14      	subs	r5, #20
 800409a:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
 800409e:	fb95 f5f6 	sdiv	r5, r5, r6
 80040a2:	b22d      	sxth	r5, r5
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 80040a4:	4648      	mov	r0, r9
 80040a6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80040aa:	21bf      	movs	r1, #191	; 0xbf
 80040ac:	f385 0507 	usat	r5, #7, r5
 80040b0:	f8cd 8000 	str.w	r8, [sp]
 80040b4:	f7fc fbce 	bl	8000854 <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80040b8:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80040c0:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80040c4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80040c8:	4648      	mov	r0, r9
 80040ca:	464a      	mov	r2, r9
 80040cc:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 80040d0:	f109 0901 	add.w	r9, r9, #1
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	b289      	uxth	r1, r1
 80040d8:	f44f 739f 	mov.w	r3, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 80040dc:	fa1f f989 	uxth.w	r9, r9
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80040e0:	f7fc fbb8 	bl	8000854 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 80040e4:	f1b9 0f9f 	cmp.w	r9, #159	; 0x9f
 80040e8:	d1d0      	bne.n	800408c <main+0x17ac>
			LCD_Rect(161, 190, 157, 128, 1, BLUE);
 80040ea:	20a1      	movs	r0, #161	; 0xa1
 80040ec:	f7fc fbed 	bl	80008ca <LCD_Rect.constprop.0>
 80040f0:	f04f 0aa2 	mov.w	sl, #162	; 0xa2
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 80040f4:	f04f 090a 	mov.w	r9, #10
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80040f8:	f04f 0850 	mov.w	r8, #80	; 0x50
			LCD_Rect(161, 190, 157, 128, 1, BLUE);
 80040fc:	4f47      	ldr	r7, [pc, #284]	; (800421c <main+0x193c>)
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 80040fe:	f937 5b02 	ldrsh.w	r5, [r7], #2
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8004102:	2600      	movs	r6, #0
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8004104:	fb95 f5f9 	sdiv	r5, r5, r9
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004108:	b2ad      	uxth	r5, r5
 800410a:	3d0a      	subs	r5, #10
 800410c:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
 8004110:	fb95 f5f8 	sdiv	r5, r5, r8
 8004114:	b22d      	sxth	r5, r5
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8004116:	4652      	mov	r2, sl
 8004118:	4650      	mov	r0, sl
 800411a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800411e:	21bf      	movs	r1, #191	; 0xbf
 8004120:	f385 0507 	usat	r5, #7, r5
 8004124:	9600      	str	r6, [sp, #0]
 8004126:	f7fc fb95 	bl	8000854 <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800412a:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004136:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800413a:	4650      	mov	r0, sl
 800413c:	4652      	mov	r2, sl
 800413e:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 8004142:	f10a 0a01 	add.w	sl, sl, #1
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	b289      	uxth	r1, r1
 800414a:	f44f 739f 	mov.w	r3, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 800414e:	fa1f fa8a 	uxth.w	sl, sl
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8004152:	f7fc fb7f 	bl	8000854 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8004156:	f5ba 7f9f 	cmp.w	sl, #318	; 0x13e
 800415a:	d1d0      	bne.n	80040fe <main+0x181e>
			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 800415c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004160:	f7fc fbb3 	bl	80008ca <LCD_Rect.constprop.0>
 8004164:	f44f 78a1 	mov.w	r8, #322	; 0x142
 8004168:	4f2d      	ldr	r7, [pc, #180]	; (8004220 <main+0x1940>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800416a:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
				int16_t val = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 127);
 800416e:	f837 5b02 	ldrh.w	r5, [r7], #2
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8004172:	4642      	mov	r2, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004174:	441d      	add	r5, r3
 8004176:	ebd5 15c5 	rsbs	r5, r5, r5, lsl #7
 800417a:	bf48      	it	mi
 800417c:	357f      	addmi	r5, #127	; 0x7f
 800417e:	f345 15cf 	sbfx	r5, r5, #7, #16
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8004182:	4640      	mov	r0, r8
 8004184:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004188:	21bf      	movs	r1, #191	; 0xbf
 800418a:	f385 0507 	usat	r5, #7, r5
 800418e:	9600      	str	r6, [sp, #0]
 8004190:	f7fc fb60 	bl	8000854 <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8004194:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80041a0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80041a4:	4640      	mov	r0, r8
 80041a6:	4642      	mov	r2, r8
 80041a8:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 80041ac:	f108 0801 	add.w	r8, r8, #1
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	b289      	uxth	r1, r1
 80041b4:	f44f 739f 	mov.w	r3, #318	; 0x13e
			for (uint16_t i = 0; i < 156 ; i++) {
 80041b8:	fa1f f888 	uxth.w	r8, r8
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80041bc:	f7fc fb4a 	bl	8000854 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 80041c0:	f5b8 7fef 	cmp.w	r8, #478	; 0x1de
 80041c4:	d1d1      	bne.n	800416a <main+0x188a>
			viewGraphs = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f884 36e2 	strb.w	r3, [r4, #1762]	; 0x6e2
 80041cc:	e01f      	b.n	800420e <main+0x192e>
			else if (temperature <= -10) {
 80041ce:	2200      	movs	r2, #0
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <main+0x1944>)
 80041d6:	f7fd ff8b 	bl	80020f0 <__aeabi_dcmple>
 80041da:	2800      	cmp	r0, #0
 80041dc:	f43f adf6 	beq.w	8003dcc <main+0x14ec>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80041e0:	4649      	mov	r1, r9
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7fd ffb8 	bl	8002158 <__aeabi_d2iz>
 80041e8:	490f      	ldr	r1, [pc, #60]	; (8004228 <main+0x1948>)
 80041ea:	b242      	sxtb	r2, r0
 80041ec:	a810      	add	r0, sp, #64	; 0x40
 80041ee:	f000 feef 	bl	8004fd0 <siprintf>
 80041f2:	e59b      	b.n	8003d2c <main+0x144c>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80041f4:	9000      	str	r0, [sp, #0]
 80041f6:	21bb      	movs	r1, #187	; 0xbb
 80041f8:	20ba      	movs	r0, #186	; 0xba
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <main+0x194c>)
 80041fc:	aa10      	add	r2, sp, #64	; 0x40
 80041fe:	e61b      	b.n	8003e38 <main+0x1558>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004200:	20ba      	movs	r0, #186	; 0xba
 8004202:	e633      	b.n	8003e6c <main+0x158c>
		if (!viewGraphs) {
 8004204:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 8004208:	2b00      	cmp	r3, #0
 800420a:	f43f af14 	beq.w	8004036 <main+0x1756>
			rtcSecLast = rtcSec;
 800420e:	f894 25a4 	ldrb.w	r2, [r4, #1444]	; 0x5a4
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <main+0x1950>)
 8004214:	721a      	strb	r2, [r3, #8]
	{
 8004216:	f7ff b8ee 	b.w	80033f6 <main+0xb16>
 800421a:	bf00      	nop
 800421c:	2000050a 	.word	0x2000050a
 8004220:	20000644 	.word	0x20000644
 8004224:	c0240000 	.word	0xc0240000
 8004228:	0801a4cf 	.word	0x0801a4cf
 800422c:	08008cb0 	.word	0x08008cb0
 8004230:	20000000 	.word	0x20000000

08004234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004234:	480c      	ldr	r0, [pc, #48]	; (8004268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004236:	490d      	ldr	r1, [pc, #52]	; (800426c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800423a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800423c:	e002      	b.n	8004244 <LoopCopyDataInit>

0800423e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800423e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004242:	3304      	adds	r3, #4

08004244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004248:	d3f9      	bcc.n	800423e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800424c:	4c0a      	ldr	r4, [pc, #40]	; (8004278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800424e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004250:	e001      	b.n	8004256 <LoopFillZerobss>

08004252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004254:	3204      	adds	r2, #4

08004256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004258:	d3fb      	bcc.n	8004252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800425a:	f7fd fb07 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800425e:	f000 f819 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004262:	f7fe fb3d 	bl	80028e0 <main>
  bx lr
 8004266:	4770      	bx	lr
  ldr r0, =_sdata
 8004268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800426c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004270:	0801aa84 	.word	0x0801aa84
  ldr r2, =_sbss
 8004274:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004278:	200008f8 	.word	0x200008f8

0800427c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800427c:	e7fe      	b.n	800427c <ADC1_2_IRQHandler>

0800427e <atoi>:
 800427e:	220a      	movs	r2, #10
 8004280:	2100      	movs	r1, #0
 8004282:	f001 bd55 	b.w	8005d30 <strtol>
	...

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2000000c 	.word	0x2000000c

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	2600      	movs	r6, #0
 8004298:	4d0c      	ldr	r5, [pc, #48]	; (80042cc <__libc_init_array+0x38>)
 800429a:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429c:	1b64      	subs	r4, r4, r5
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	f004 fcec 	bl	8008c80 <_init>
 80042a8:	2600      	movs	r6, #0
 80042aa:	4d0a      	ldr	r5, [pc, #40]	; (80042d4 <__libc_init_array+0x40>)
 80042ac:	4c0a      	ldr	r4, [pc, #40]	; (80042d8 <__libc_init_array+0x44>)
 80042ae:	1b64      	subs	r4, r4, r5
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	0801aa7c 	.word	0x0801aa7c
 80042d0:	0801aa7c 	.word	0x0801aa7c
 80042d4:	0801aa7c 	.word	0x0801aa7c
 80042d8:	0801aa80 	.word	0x0801aa80

080042dc <memset>:
 80042dc:	4603      	mov	r3, r0
 80042de:	4402      	add	r2, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d100      	bne.n	80042e6 <memset+0xa>
 80042e4:	4770      	bx	lr
 80042e6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ea:	e7f9      	b.n	80042e0 <memset+0x4>

080042ec <__cvt>:
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f2:	461f      	mov	r7, r3
 80042f4:	bfbb      	ittet	lt
 80042f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80042fa:	461f      	movlt	r7, r3
 80042fc:	2300      	movge	r3, #0
 80042fe:	232d      	movlt	r3, #45	; 0x2d
 8004300:	b088      	sub	sp, #32
 8004302:	4614      	mov	r4, r2
 8004304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004306:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004308:	7013      	strb	r3, [r2, #0]
 800430a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800430c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004310:	f023 0820 	bic.w	r8, r3, #32
 8004314:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004318:	d005      	beq.n	8004326 <__cvt+0x3a>
 800431a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800431e:	d100      	bne.n	8004322 <__cvt+0x36>
 8004320:	3501      	adds	r5, #1
 8004322:	2302      	movs	r3, #2
 8004324:	e000      	b.n	8004328 <__cvt+0x3c>
 8004326:	2303      	movs	r3, #3
 8004328:	aa07      	add	r2, sp, #28
 800432a:	9204      	str	r2, [sp, #16]
 800432c:	aa06      	add	r2, sp, #24
 800432e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004332:	e9cd 3500 	strd	r3, r5, [sp]
 8004336:	4622      	mov	r2, r4
 8004338:	463b      	mov	r3, r7
 800433a:	f001 fd91 	bl	8005e60 <_dtoa_r>
 800433e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004342:	4606      	mov	r6, r0
 8004344:	d102      	bne.n	800434c <__cvt+0x60>
 8004346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004348:	07db      	lsls	r3, r3, #31
 800434a:	d522      	bpl.n	8004392 <__cvt+0xa6>
 800434c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004350:	eb06 0905 	add.w	r9, r6, r5
 8004354:	d110      	bne.n	8004378 <__cvt+0x8c>
 8004356:	7833      	ldrb	r3, [r6, #0]
 8004358:	2b30      	cmp	r3, #48	; 0x30
 800435a:	d10a      	bne.n	8004372 <__cvt+0x86>
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	4620      	mov	r0, r4
 8004362:	4639      	mov	r1, r7
 8004364:	f7fd feb0 	bl	80020c8 <__aeabi_dcmpeq>
 8004368:	b918      	cbnz	r0, 8004372 <__cvt+0x86>
 800436a:	f1c5 0501 	rsb	r5, r5, #1
 800436e:	f8ca 5000 	str.w	r5, [sl]
 8004372:	f8da 3000 	ldr.w	r3, [sl]
 8004376:	4499      	add	r9, r3
 8004378:	2200      	movs	r2, #0
 800437a:	2300      	movs	r3, #0
 800437c:	4620      	mov	r0, r4
 800437e:	4639      	mov	r1, r7
 8004380:	f7fd fea2 	bl	80020c8 <__aeabi_dcmpeq>
 8004384:	b108      	cbz	r0, 800438a <__cvt+0x9e>
 8004386:	f8cd 901c 	str.w	r9, [sp, #28]
 800438a:	2230      	movs	r2, #48	; 0x30
 800438c:	9b07      	ldr	r3, [sp, #28]
 800438e:	454b      	cmp	r3, r9
 8004390:	d307      	bcc.n	80043a2 <__cvt+0xb6>
 8004392:	4630      	mov	r0, r6
 8004394:	9b07      	ldr	r3, [sp, #28]
 8004396:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	b008      	add	sp, #32
 800439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	9107      	str	r1, [sp, #28]
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e7f0      	b.n	800438c <__cvt+0xa0>

080043aa <__exponent>:
 80043aa:	4603      	mov	r3, r0
 80043ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ae:	2900      	cmp	r1, #0
 80043b0:	f803 2b02 	strb.w	r2, [r3], #2
 80043b4:	bfb6      	itet	lt
 80043b6:	222d      	movlt	r2, #45	; 0x2d
 80043b8:	222b      	movge	r2, #43	; 0x2b
 80043ba:	4249      	neglt	r1, r1
 80043bc:	2909      	cmp	r1, #9
 80043be:	7042      	strb	r2, [r0, #1]
 80043c0:	dd2b      	ble.n	800441a <__exponent+0x70>
 80043c2:	f10d 0407 	add.w	r4, sp, #7
 80043c6:	46a4      	mov	ip, r4
 80043c8:	270a      	movs	r7, #10
 80043ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80043ce:	460a      	mov	r2, r1
 80043d0:	46a6      	mov	lr, r4
 80043d2:	fb07 1516 	mls	r5, r7, r6, r1
 80043d6:	2a63      	cmp	r2, #99	; 0x63
 80043d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043dc:	4631      	mov	r1, r6
 80043de:	f104 34ff 	add.w	r4, r4, #4294967295
 80043e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043e6:	dcf0      	bgt.n	80043ca <__exponent+0x20>
 80043e8:	3130      	adds	r1, #48	; 0x30
 80043ea:	f1ae 0502 	sub.w	r5, lr, #2
 80043ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043f2:	4629      	mov	r1, r5
 80043f4:	1c44      	adds	r4, r0, #1
 80043f6:	4561      	cmp	r1, ip
 80043f8:	d30a      	bcc.n	8004410 <__exponent+0x66>
 80043fa:	f10d 0209 	add.w	r2, sp, #9
 80043fe:	eba2 020e 	sub.w	r2, r2, lr
 8004402:	4565      	cmp	r5, ip
 8004404:	bf88      	it	hi
 8004406:	2200      	movhi	r2, #0
 8004408:	4413      	add	r3, r2
 800440a:	1a18      	subs	r0, r3, r0
 800440c:	b003      	add	sp, #12
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004410:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004414:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004418:	e7ed      	b.n	80043f6 <__exponent+0x4c>
 800441a:	2330      	movs	r3, #48	; 0x30
 800441c:	3130      	adds	r1, #48	; 0x30
 800441e:	7083      	strb	r3, [r0, #2]
 8004420:	70c1      	strb	r1, [r0, #3]
 8004422:	1d03      	adds	r3, r0, #4
 8004424:	e7f1      	b.n	800440a <__exponent+0x60>
	...

08004428 <_printf_float>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	b091      	sub	sp, #68	; 0x44
 800442e:	460c      	mov	r4, r1
 8004430:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004434:	4616      	mov	r6, r2
 8004436:	461f      	mov	r7, r3
 8004438:	4605      	mov	r5, r0
 800443a:	f002 fe65 	bl	8007108 <_localeconv_r>
 800443e:	6803      	ldr	r3, [r0, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	9309      	str	r3, [sp, #36]	; 0x24
 8004444:	f7fd fa14 	bl	8001870 <strlen>
 8004448:	2300      	movs	r3, #0
 800444a:	930e      	str	r3, [sp, #56]	; 0x38
 800444c:	f8d8 3000 	ldr.w	r3, [r8]
 8004450:	900a      	str	r0, [sp, #40]	; 0x28
 8004452:	3307      	adds	r3, #7
 8004454:	f023 0307 	bic.w	r3, r3, #7
 8004458:	f103 0208 	add.w	r2, r3, #8
 800445c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004460:	f8d4 b000 	ldr.w	fp, [r4]
 8004464:	f8c8 2000 	str.w	r2, [r8]
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004470:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004474:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004478:	930b      	str	r3, [sp, #44]	; 0x2c
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	4640      	mov	r0, r8
 8004480:	4b9c      	ldr	r3, [pc, #624]	; (80046f4 <_printf_float+0x2cc>)
 8004482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004484:	f7fd fe52 	bl	800212c <__aeabi_dcmpun>
 8004488:	bb70      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	4640      	mov	r0, r8
 8004490:	4b98      	ldr	r3, [pc, #608]	; (80046f4 <_printf_float+0x2cc>)
 8004492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004494:	f7fd fe2c 	bl	80020f0 <__aeabi_dcmple>
 8004498:	bb30      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800449a:	2200      	movs	r2, #0
 800449c:	2300      	movs	r3, #0
 800449e:	4640      	mov	r0, r8
 80044a0:	4651      	mov	r1, sl
 80044a2:	f7fd fe1b 	bl	80020dc <__aeabi_dcmplt>
 80044a6:	b110      	cbz	r0, 80044ae <_printf_float+0x86>
 80044a8:	232d      	movs	r3, #45	; 0x2d
 80044aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ae:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <_printf_float+0x2d0>)
 80044b0:	4892      	ldr	r0, [pc, #584]	; (80046fc <_printf_float+0x2d4>)
 80044b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044b6:	bf94      	ite	ls
 80044b8:	4698      	movls	r8, r3
 80044ba:	4680      	movhi	r8, r0
 80044bc:	2303      	movs	r3, #3
 80044be:	f04f 0a00 	mov.w	sl, #0
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	f02b 0304 	bic.w	r3, fp, #4
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	4633      	mov	r3, r6
 80044cc:	4621      	mov	r1, r4
 80044ce:	4628      	mov	r0, r5
 80044d0:	9700      	str	r7, [sp, #0]
 80044d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80044d4:	f000 f9d4 	bl	8004880 <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	f040 8090 	bne.w	80045fe <_printf_float+0x1d6>
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	b011      	add	sp, #68	; 0x44
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	4642      	mov	r2, r8
 80044ea:	4653      	mov	r3, sl
 80044ec:	4640      	mov	r0, r8
 80044ee:	4651      	mov	r1, sl
 80044f0:	f7fd fe1c 	bl	800212c <__aeabi_dcmpun>
 80044f4:	b148      	cbz	r0, 800450a <_printf_float+0xe2>
 80044f6:	f1ba 0f00 	cmp.w	sl, #0
 80044fa:	bfb8      	it	lt
 80044fc:	232d      	movlt	r3, #45	; 0x2d
 80044fe:	4880      	ldr	r0, [pc, #512]	; (8004700 <_printf_float+0x2d8>)
 8004500:	bfb8      	it	lt
 8004502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <_printf_float+0x2dc>)
 8004508:	e7d3      	b.n	80044b2 <_printf_float+0x8a>
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	d142      	bne.n	800459a <_printf_float+0x172>
 8004514:	2306      	movs	r3, #6
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	9206      	str	r2, [sp, #24]
 800451c:	aa0e      	add	r2, sp, #56	; 0x38
 800451e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004522:	aa0d      	add	r2, sp, #52	; 0x34
 8004524:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800452e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	4642      	mov	r2, r8
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4628      	mov	r0, r5
 800453c:	4653      	mov	r3, sl
 800453e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004540:	f7ff fed4 	bl	80042ec <__cvt>
 8004544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004546:	4680      	mov	r8, r0
 8004548:	2947      	cmp	r1, #71	; 0x47
 800454a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800454c:	d108      	bne.n	8004560 <_printf_float+0x138>
 800454e:	1cc8      	adds	r0, r1, #3
 8004550:	db02      	blt.n	8004558 <_printf_float+0x130>
 8004552:	6863      	ldr	r3, [r4, #4]
 8004554:	4299      	cmp	r1, r3
 8004556:	dd40      	ble.n	80045da <_printf_float+0x1b2>
 8004558:	f1a9 0902 	sub.w	r9, r9, #2
 800455c:	fa5f f989 	uxtb.w	r9, r9
 8004560:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004564:	d81f      	bhi.n	80045a6 <_printf_float+0x17e>
 8004566:	464a      	mov	r2, r9
 8004568:	3901      	subs	r1, #1
 800456a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800456e:	910d      	str	r1, [sp, #52]	; 0x34
 8004570:	f7ff ff1b 	bl	80043aa <__exponent>
 8004574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004576:	4682      	mov	sl, r0
 8004578:	1813      	adds	r3, r2, r0
 800457a:	2a01      	cmp	r2, #1
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	dc02      	bgt.n	8004586 <_printf_float+0x15e>
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	07d2      	lsls	r2, r2, #31
 8004584:	d501      	bpl.n	800458a <_printf_float+0x162>
 8004586:	3301      	adds	r3, #1
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800458e:	2b00      	cmp	r3, #0
 8004590:	d09b      	beq.n	80044ca <_printf_float+0xa2>
 8004592:	232d      	movs	r3, #45	; 0x2d
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	e797      	b.n	80044ca <_printf_float+0xa2>
 800459a:	2947      	cmp	r1, #71	; 0x47
 800459c:	d1bc      	bne.n	8004518 <_printf_float+0xf0>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ba      	bne.n	8004518 <_printf_float+0xf0>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7b7      	b.n	8004516 <_printf_float+0xee>
 80045a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045aa:	d118      	bne.n	80045de <_printf_float+0x1b6>
 80045ac:	2900      	cmp	r1, #0
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	dd0b      	ble.n	80045ca <_printf_float+0x1a2>
 80045b2:	6121      	str	r1, [r4, #16]
 80045b4:	b913      	cbnz	r3, 80045bc <_printf_float+0x194>
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	07d0      	lsls	r0, r2, #31
 80045ba:	d502      	bpl.n	80045c2 <_printf_float+0x19a>
 80045bc:	3301      	adds	r3, #1
 80045be:	440b      	add	r3, r1
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	f04f 0a00 	mov.w	sl, #0
 80045c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80045c8:	e7df      	b.n	800458a <_printf_float+0x162>
 80045ca:	b913      	cbnz	r3, 80045d2 <_printf_float+0x1aa>
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	07d2      	lsls	r2, r2, #31
 80045d0:	d501      	bpl.n	80045d6 <_printf_float+0x1ae>
 80045d2:	3302      	adds	r3, #2
 80045d4:	e7f4      	b.n	80045c0 <_printf_float+0x198>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e7f2      	b.n	80045c0 <_printf_float+0x198>
 80045da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e0:	4299      	cmp	r1, r3
 80045e2:	db05      	blt.n	80045f0 <_printf_float+0x1c8>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	6121      	str	r1, [r4, #16]
 80045e8:	07d8      	lsls	r0, r3, #31
 80045ea:	d5ea      	bpl.n	80045c2 <_printf_float+0x19a>
 80045ec:	1c4b      	adds	r3, r1, #1
 80045ee:	e7e7      	b.n	80045c0 <_printf_float+0x198>
 80045f0:	2900      	cmp	r1, #0
 80045f2:	bfcc      	ite	gt
 80045f4:	2201      	movgt	r2, #1
 80045f6:	f1c1 0202 	rsble	r2, r1, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	e7e0      	b.n	80045c0 <_printf_float+0x198>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	055a      	lsls	r2, r3, #21
 8004602:	d407      	bmi.n	8004614 <_printf_float+0x1ec>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	4642      	mov	r2, r8
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d12b      	bne.n	800466a <_printf_float+0x242>
 8004612:	e764      	b.n	80044de <_printf_float+0xb6>
 8004614:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004618:	f240 80dd 	bls.w	80047d6 <_printf_float+0x3ae>
 800461c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004620:	2200      	movs	r2, #0
 8004622:	2300      	movs	r3, #0
 8004624:	f7fd fd50 	bl	80020c8 <__aeabi_dcmpeq>
 8004628:	2800      	cmp	r0, #0
 800462a:	d033      	beq.n	8004694 <_printf_float+0x26c>
 800462c:	2301      	movs	r3, #1
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	4a35      	ldr	r2, [pc, #212]	; (8004708 <_printf_float+0x2e0>)
 8004634:	47b8      	blx	r7
 8004636:	3001      	adds	r0, #1
 8004638:	f43f af51 	beq.w	80044de <_printf_float+0xb6>
 800463c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004640:	429a      	cmp	r2, r3
 8004642:	db02      	blt.n	800464a <_printf_float+0x222>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	07d8      	lsls	r0, r3, #31
 8004648:	d50f      	bpl.n	800466a <_printf_float+0x242>
 800464a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800464e:	4631      	mov	r1, r6
 8004650:	4628      	mov	r0, r5
 8004652:	47b8      	blx	r7
 8004654:	3001      	adds	r0, #1
 8004656:	f43f af42 	beq.w	80044de <_printf_float+0xb6>
 800465a:	f04f 0800 	mov.w	r8, #0
 800465e:	f104 091a 	add.w	r9, r4, #26
 8004662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004664:	3b01      	subs	r3, #1
 8004666:	4543      	cmp	r3, r8
 8004668:	dc09      	bgt.n	800467e <_printf_float+0x256>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	079b      	lsls	r3, r3, #30
 800466e:	f100 8102 	bmi.w	8004876 <_printf_float+0x44e>
 8004672:	68e0      	ldr	r0, [r4, #12]
 8004674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004676:	4298      	cmp	r0, r3
 8004678:	bfb8      	it	lt
 800467a:	4618      	movlt	r0, r3
 800467c:	e731      	b.n	80044e2 <_printf_float+0xba>
 800467e:	2301      	movs	r3, #1
 8004680:	464a      	mov	r2, r9
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f af28 	beq.w	80044de <_printf_float+0xb6>
 800468e:	f108 0801 	add.w	r8, r8, #1
 8004692:	e7e6      	b.n	8004662 <_printf_float+0x23a>
 8004694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004696:	2b00      	cmp	r3, #0
 8004698:	dc38      	bgt.n	800470c <_printf_float+0x2e4>
 800469a:	2301      	movs	r3, #1
 800469c:	4631      	mov	r1, r6
 800469e:	4628      	mov	r0, r5
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <_printf_float+0x2e0>)
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f af1a 	beq.w	80044de <_printf_float+0xb6>
 80046aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d102      	bne.n	80046b8 <_printf_float+0x290>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	07d9      	lsls	r1, r3, #31
 80046b6:	d5d8      	bpl.n	800466a <_printf_float+0x242>
 80046b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	f43f af0b 	beq.w	80044de <_printf_float+0xb6>
 80046c8:	f04f 0900 	mov.w	r9, #0
 80046cc:	f104 0a1a 	add.w	sl, r4, #26
 80046d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d2:	425b      	negs	r3, r3
 80046d4:	454b      	cmp	r3, r9
 80046d6:	dc01      	bgt.n	80046dc <_printf_float+0x2b4>
 80046d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046da:	e794      	b.n	8004606 <_printf_float+0x1de>
 80046dc:	2301      	movs	r3, #1
 80046de:	4652      	mov	r2, sl
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f aef9 	beq.w	80044de <_printf_float+0xb6>
 80046ec:	f109 0901 	add.w	r9, r9, #1
 80046f0:	e7ee      	b.n	80046d0 <_printf_float+0x2a8>
 80046f2:	bf00      	nop
 80046f4:	7fefffff 	.word	0x7fefffff
 80046f8:	0801a570 	.word	0x0801a570
 80046fc:	0801a574 	.word	0x0801a574
 8004700:	0801a57c 	.word	0x0801a57c
 8004704:	0801a578 	.word	0x0801a578
 8004708:	0801a580 	.word	0x0801a580
 800470c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800470e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004710:	429a      	cmp	r2, r3
 8004712:	bfa8      	it	ge
 8004714:	461a      	movge	r2, r3
 8004716:	2a00      	cmp	r2, #0
 8004718:	4691      	mov	r9, r2
 800471a:	dc37      	bgt.n	800478c <_printf_float+0x364>
 800471c:	f04f 0b00 	mov.w	fp, #0
 8004720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004724:	f104 021a 	add.w	r2, r4, #26
 8004728:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800472c:	ebaa 0309 	sub.w	r3, sl, r9
 8004730:	455b      	cmp	r3, fp
 8004732:	dc33      	bgt.n	800479c <_printf_float+0x374>
 8004734:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004738:	429a      	cmp	r2, r3
 800473a:	db3b      	blt.n	80047b4 <_printf_float+0x38c>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	07da      	lsls	r2, r3, #31
 8004740:	d438      	bmi.n	80047b4 <_printf_float+0x38c>
 8004742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004744:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004746:	eba3 020a 	sub.w	r2, r3, sl
 800474a:	eba3 0901 	sub.w	r9, r3, r1
 800474e:	4591      	cmp	r9, r2
 8004750:	bfa8      	it	ge
 8004752:	4691      	movge	r9, r2
 8004754:	f1b9 0f00 	cmp.w	r9, #0
 8004758:	dc34      	bgt.n	80047c4 <_printf_float+0x39c>
 800475a:	f04f 0800 	mov.w	r8, #0
 800475e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004762:	f104 0a1a 	add.w	sl, r4, #26
 8004766:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	eba3 0309 	sub.w	r3, r3, r9
 8004770:	4543      	cmp	r3, r8
 8004772:	f77f af7a 	ble.w	800466a <_printf_float+0x242>
 8004776:	2301      	movs	r3, #1
 8004778:	4652      	mov	r2, sl
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f aeac 	beq.w	80044de <_printf_float+0xb6>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	e7ec      	b.n	8004766 <_printf_float+0x33e>
 800478c:	4613      	mov	r3, r2
 800478e:	4631      	mov	r1, r6
 8004790:	4642      	mov	r2, r8
 8004792:	4628      	mov	r0, r5
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	d1c0      	bne.n	800471c <_printf_float+0x2f4>
 800479a:	e6a0      	b.n	80044de <_printf_float+0xb6>
 800479c:	2301      	movs	r3, #1
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f43f ae99 	beq.w	80044de <_printf_float+0xb6>
 80047ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047ae:	f10b 0b01 	add.w	fp, fp, #1
 80047b2:	e7b9      	b.n	8004728 <_printf_float+0x300>
 80047b4:	4631      	mov	r1, r6
 80047b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	d1bf      	bne.n	8004742 <_printf_float+0x31a>
 80047c2:	e68c      	b.n	80044de <_printf_float+0xb6>
 80047c4:	464b      	mov	r3, r9
 80047c6:	4631      	mov	r1, r6
 80047c8:	4628      	mov	r0, r5
 80047ca:	eb08 020a 	add.w	r2, r8, sl
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	d1c2      	bne.n	800475a <_printf_float+0x332>
 80047d4:	e683      	b.n	80044de <_printf_float+0xb6>
 80047d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047d8:	2a01      	cmp	r2, #1
 80047da:	dc01      	bgt.n	80047e0 <_printf_float+0x3b8>
 80047dc:	07db      	lsls	r3, r3, #31
 80047de:	d537      	bpl.n	8004850 <_printf_float+0x428>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4642      	mov	r2, r8
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f ae77 	beq.w	80044de <_printf_float+0xb6>
 80047f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f ae6f 	beq.w	80044de <_printf_float+0xb6>
 8004800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004804:	2200      	movs	r2, #0
 8004806:	2300      	movs	r3, #0
 8004808:	f7fd fc5e 	bl	80020c8 <__aeabi_dcmpeq>
 800480c:	b9d8      	cbnz	r0, 8004846 <_printf_float+0x41e>
 800480e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004810:	f108 0201 	add.w	r2, r8, #1
 8004814:	3b01      	subs	r3, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	47b8      	blx	r7
 800481c:	3001      	adds	r0, #1
 800481e:	d10e      	bne.n	800483e <_printf_float+0x416>
 8004820:	e65d      	b.n	80044de <_printf_float+0xb6>
 8004822:	2301      	movs	r3, #1
 8004824:	464a      	mov	r2, r9
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f ae56 	beq.w	80044de <_printf_float+0xb6>
 8004832:	f108 0801 	add.w	r8, r8, #1
 8004836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004838:	3b01      	subs	r3, #1
 800483a:	4543      	cmp	r3, r8
 800483c:	dcf1      	bgt.n	8004822 <_printf_float+0x3fa>
 800483e:	4653      	mov	r3, sl
 8004840:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004844:	e6e0      	b.n	8004608 <_printf_float+0x1e0>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	f104 091a 	add.w	r9, r4, #26
 800484e:	e7f2      	b.n	8004836 <_printf_float+0x40e>
 8004850:	2301      	movs	r3, #1
 8004852:	4642      	mov	r2, r8
 8004854:	e7df      	b.n	8004816 <_printf_float+0x3ee>
 8004856:	2301      	movs	r3, #1
 8004858:	464a      	mov	r2, r9
 800485a:	4631      	mov	r1, r6
 800485c:	4628      	mov	r0, r5
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	f43f ae3c 	beq.w	80044de <_printf_float+0xb6>
 8004866:	f108 0801 	add.w	r8, r8, #1
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	4543      	cmp	r3, r8
 8004872:	dcf0      	bgt.n	8004856 <_printf_float+0x42e>
 8004874:	e6fd      	b.n	8004672 <_printf_float+0x24a>
 8004876:	f04f 0800 	mov.w	r8, #0
 800487a:	f104 0919 	add.w	r9, r4, #25
 800487e:	e7f4      	b.n	800486a <_printf_float+0x442>

08004880 <_printf_common>:
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	4616      	mov	r6, r2
 8004886:	4699      	mov	r9, r3
 8004888:	688a      	ldr	r2, [r1, #8]
 800488a:	690b      	ldr	r3, [r1, #16]
 800488c:	4607      	mov	r7, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	bfb8      	it	lt
 8004892:	4613      	movlt	r3, r2
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489a:	460c      	mov	r4, r1
 800489c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a0:	b10a      	cbz	r2, 80048a6 <_printf_common+0x26>
 80048a2:	3301      	adds	r3, #1
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0699      	lsls	r1, r3, #26
 80048aa:	bf42      	ittt	mi
 80048ac:	6833      	ldrmi	r3, [r6, #0]
 80048ae:	3302      	addmi	r3, #2
 80048b0:	6033      	strmi	r3, [r6, #0]
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	f015 0506 	ands.w	r5, r5, #6
 80048b8:	d106      	bne.n	80048c8 <_printf_common+0x48>
 80048ba:	f104 0a19 	add.w	sl, r4, #25
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	6832      	ldr	r2, [r6, #0]
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	42ab      	cmp	r3, r5
 80048c6:	dc28      	bgt.n	800491a <_printf_common+0x9a>
 80048c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048cc:	1e13      	subs	r3, r2, #0
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	bf18      	it	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	0692      	lsls	r2, r2, #26
 80048d6:	d42d      	bmi.n	8004934 <_printf_common+0xb4>
 80048d8:	4649      	mov	r1, r9
 80048da:	4638      	mov	r0, r7
 80048dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d020      	beq.n	8004928 <_printf_common+0xa8>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	68e5      	ldr	r5, [r4, #12]
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf18      	it	ne
 80048f2:	2500      	movne	r5, #0
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	f04f 0600 	mov.w	r6, #0
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	bf08      	it	eq
 80048fe:	1aad      	subeq	r5, r5, r2
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	bf08      	it	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	4293      	cmp	r3, r2
 800490a:	bfc4      	itt	gt
 800490c:	1a9b      	subgt	r3, r3, r2
 800490e:	18ed      	addgt	r5, r5, r3
 8004910:	341a      	adds	r4, #26
 8004912:	42b5      	cmp	r5, r6
 8004914:	d11a      	bne.n	800494c <_printf_common+0xcc>
 8004916:	2000      	movs	r0, #0
 8004918:	e008      	b.n	800492c <_printf_common+0xac>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4649      	mov	r1, r9
 8004920:	4638      	mov	r0, r7
 8004922:	47c0      	blx	r8
 8004924:	3001      	adds	r0, #1
 8004926:	d103      	bne.n	8004930 <_printf_common+0xb0>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	3501      	adds	r5, #1
 8004932:	e7c4      	b.n	80048be <_printf_common+0x3e>
 8004934:	2030      	movs	r0, #48	; 0x30
 8004936:	18e1      	adds	r1, r4, r3
 8004938:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004942:	4422      	add	r2, r4
 8004944:	3302      	adds	r3, #2
 8004946:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494a:	e7c5      	b.n	80048d8 <_printf_common+0x58>
 800494c:	2301      	movs	r3, #1
 800494e:	4622      	mov	r2, r4
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d0e6      	beq.n	8004928 <_printf_common+0xa8>
 800495a:	3601      	adds	r6, #1
 800495c:	e7d9      	b.n	8004912 <_printf_common+0x92>
	...

08004960 <_printf_i>:
 8004960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	7e0f      	ldrb	r7, [r1, #24]
 8004966:	4691      	mov	r9, r2
 8004968:	2f78      	cmp	r7, #120	; 0x78
 800496a:	4680      	mov	r8, r0
 800496c:	460c      	mov	r4, r1
 800496e:	469a      	mov	sl, r3
 8004970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004976:	d807      	bhi.n	8004988 <_printf_i+0x28>
 8004978:	2f62      	cmp	r7, #98	; 0x62
 800497a:	d80a      	bhi.n	8004992 <_printf_i+0x32>
 800497c:	2f00      	cmp	r7, #0
 800497e:	f000 80d9 	beq.w	8004b34 <_printf_i+0x1d4>
 8004982:	2f58      	cmp	r7, #88	; 0x58
 8004984:	f000 80a4 	beq.w	8004ad0 <_printf_i+0x170>
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004990:	e03a      	b.n	8004a08 <_printf_i+0xa8>
 8004992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004996:	2b15      	cmp	r3, #21
 8004998:	d8f6      	bhi.n	8004988 <_printf_i+0x28>
 800499a:	a101      	add	r1, pc, #4	; (adr r1, 80049a0 <_printf_i+0x40>)
 800499c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004989 	.word	0x08004989
 80049ac:	08004989 	.word	0x08004989
 80049b0:	08004989 	.word	0x08004989
 80049b4:	08004989 	.word	0x08004989
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004989 	.word	0x08004989
 80049c0:	08004989 	.word	0x08004989
 80049c4:	08004989 	.word	0x08004989
 80049c8:	08004989 	.word	0x08004989
 80049cc:	08004b1b 	.word	0x08004b1b
 80049d0:	08004a3d 	.word	0x08004a3d
 80049d4:	08004afd 	.word	0x08004afd
 80049d8:	08004989 	.word	0x08004989
 80049dc:	08004989 	.word	0x08004989
 80049e0:	08004b3d 	.word	0x08004b3d
 80049e4:	08004989 	.word	0x08004989
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004989 	.word	0x08004989
 80049f0:	08004989 	.word	0x08004989
 80049f4:	08004b05 	.word	0x08004b05
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	602a      	str	r2, [r5, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0a4      	b.n	8004b56 <_printf_i+0x1f6>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	6829      	ldr	r1, [r5, #0]
 8004a10:	0606      	lsls	r6, r0, #24
 8004a12:	f101 0304 	add.w	r3, r1, #4
 8004a16:	d50a      	bpl.n	8004a2e <_printf_i+0xce>
 8004a18:	680e      	ldr	r6, [r1, #0]
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xc8>
 8004a20:	232d      	movs	r3, #45	; 0x2d
 8004a22:	4276      	negs	r6, r6
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	230a      	movs	r3, #10
 8004a2a:	485e      	ldr	r0, [pc, #376]	; (8004ba4 <_printf_i+0x244>)
 8004a2c:	e019      	b.n	8004a62 <_printf_i+0x102>
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a34:	602b      	str	r3, [r5, #0]
 8004a36:	bf18      	it	ne
 8004a38:	b236      	sxthne	r6, r6
 8004a3a:	e7ef      	b.n	8004a1c <_printf_i+0xbc>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6029      	str	r1, [r5, #0]
 8004a44:	0601      	lsls	r1, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xec>
 8004a48:	681e      	ldr	r6, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0xf2>
 8004a4c:	0646      	lsls	r6, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xe8>
 8004a50:	881e      	ldrh	r6, [r3, #0]
 8004a52:	2f6f      	cmp	r7, #111	; 0x6f
 8004a54:	bf0c      	ite	eq
 8004a56:	2308      	moveq	r3, #8
 8004a58:	230a      	movne	r3, #10
 8004a5a:	4852      	ldr	r0, [pc, #328]	; (8004ba4 <_printf_i+0x244>)
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a62:	6865      	ldr	r5, [r4, #4]
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	bfa8      	it	ge
 8004a68:	6821      	ldrge	r1, [r4, #0]
 8004a6a:	60a5      	str	r5, [r4, #8]
 8004a6c:	bfa4      	itt	ge
 8004a6e:	f021 0104 	bicge.w	r1, r1, #4
 8004a72:	6021      	strge	r1, [r4, #0]
 8004a74:	b90e      	cbnz	r6, 8004a7a <_printf_i+0x11a>
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	d04d      	beq.n	8004b16 <_printf_i+0x1b6>
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a80:	fb03 6711 	mls	r7, r3, r1, r6
 8004a84:	5dc7      	ldrb	r7, [r0, r7]
 8004a86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a8a:	4637      	mov	r7, r6
 8004a8c:	42bb      	cmp	r3, r7
 8004a8e:	460e      	mov	r6, r1
 8004a90:	d9f4      	bls.n	8004a7c <_printf_i+0x11c>
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d10b      	bne.n	8004aae <_printf_i+0x14e>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	07de      	lsls	r6, r3, #31
 8004a9a:	d508      	bpl.n	8004aae <_printf_i+0x14e>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	6861      	ldr	r1, [r4, #4]
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	bfde      	ittt	le
 8004aa4:	2330      	movle	r3, #48	; 0x30
 8004aa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aae:	1b52      	subs	r2, r2, r5
 8004ab0:	6122      	str	r2, [r4, #16]
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	f8cd a000 	str.w	sl, [sp]
 8004abc:	aa03      	add	r2, sp, #12
 8004abe:	f7ff fedf 	bl	8004880 <_printf_common>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d14c      	bne.n	8004b60 <_printf_i+0x200>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	b004      	add	sp, #16
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	4834      	ldr	r0, [pc, #208]	; (8004ba4 <_printf_i+0x244>)
 8004ad2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ade:	6029      	str	r1, [r5, #0]
 8004ae0:	061d      	lsls	r5, r3, #24
 8004ae2:	d514      	bpl.n	8004b0e <_printf_i+0x1ae>
 8004ae4:	07df      	lsls	r7, r3, #31
 8004ae6:	bf44      	itt	mi
 8004ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aec:	6023      	strmi	r3, [r4, #0]
 8004aee:	b91e      	cbnz	r6, 8004af8 <_printf_i+0x198>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	2310      	movs	r3, #16
 8004afa:	e7af      	b.n	8004a5c <_printf_i+0xfc>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	2378      	movs	r3, #120	; 0x78
 8004b06:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <_printf_i+0x248>)
 8004b08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b0c:	e7e3      	b.n	8004ad6 <_printf_i+0x176>
 8004b0e:	0659      	lsls	r1, r3, #25
 8004b10:	bf48      	it	mi
 8004b12:	b2b6      	uxthmi	r6, r6
 8004b14:	e7e6      	b.n	8004ae4 <_printf_i+0x184>
 8004b16:	4615      	mov	r5, r2
 8004b18:	e7bb      	b.n	8004a92 <_printf_i+0x132>
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	6826      	ldr	r6, [r4, #0]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6961      	ldr	r1, [r4, #20]
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	0635      	lsls	r5, r6, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0x1ce>
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0x1d4>
 8004b2e:	0670      	lsls	r0, r6, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0x1ca>
 8004b32:	8019      	strh	r1, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	4615      	mov	r5, r2
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e7ba      	b.n	8004ab2 <_printf_i+0x152>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	602a      	str	r2, [r5, #0]
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f002 fafb 	bl	8007144 <memchr>
 8004b4e:	b108      	cbz	r0, 8004b54 <_printf_i+0x1f4>
 8004b50:	1b40      	subs	r0, r0, r5
 8004b52:	6060      	str	r0, [r4, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	e7a8      	b.n	8004ab2 <_printf_i+0x152>
 8004b60:	462a      	mov	r2, r5
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	47d0      	blx	sl
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0ab      	beq.n	8004ac6 <_printf_i+0x166>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	079b      	lsls	r3, r3, #30
 8004b72:	d413      	bmi.n	8004b9c <_printf_i+0x23c>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e7a4      	b.n	8004aca <_printf_i+0x16a>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4632      	mov	r2, r6
 8004b84:	4649      	mov	r1, r9
 8004b86:	4640      	mov	r0, r8
 8004b88:	47d0      	blx	sl
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d09b      	beq.n	8004ac6 <_printf_i+0x166>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	9903      	ldr	r1, [sp, #12]
 8004b94:	1a5b      	subs	r3, r3, r1
 8004b96:	42ab      	cmp	r3, r5
 8004b98:	dcf2      	bgt.n	8004b80 <_printf_i+0x220>
 8004b9a:	e7eb      	b.n	8004b74 <_printf_i+0x214>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f104 0619 	add.w	r6, r4, #25
 8004ba2:	e7f5      	b.n	8004b90 <_printf_i+0x230>
 8004ba4:	0801a582 	.word	0x0801a582
 8004ba8:	0801a593 	.word	0x0801a593

08004bac <_scanf_float>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	9303      	str	r3, [sp, #12]
 8004bb4:	688b      	ldr	r3, [r1, #8]
 8004bb6:	4617      	mov	r7, r2
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bbe:	bf85      	ittet	hi
 8004bc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bc4:	195b      	addhi	r3, r3, r5
 8004bc6:	2300      	movls	r3, #0
 8004bc8:	9302      	strhi	r3, [sp, #8]
 8004bca:	bf88      	it	hi
 8004bcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bd0:	468b      	mov	fp, r1
 8004bd2:	f04f 0500 	mov.w	r5, #0
 8004bd6:	bf8c      	ite	hi
 8004bd8:	608b      	strhi	r3, [r1, #8]
 8004bda:	9302      	strls	r3, [sp, #8]
 8004bdc:	680b      	ldr	r3, [r1, #0]
 8004bde:	4680      	mov	r8, r0
 8004be0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004be4:	f84b 3b1c 	str.w	r3, [fp], #28
 8004be8:	460c      	mov	r4, r1
 8004bea:	465e      	mov	r6, fp
 8004bec:	46aa      	mov	sl, r5
 8004bee:	46a9      	mov	r9, r5
 8004bf0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004bf4:	9501      	str	r5, [sp, #4]
 8004bf6:	68a2      	ldr	r2, [r4, #8]
 8004bf8:	b152      	cbz	r2, 8004c10 <_scanf_float+0x64>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b4e      	cmp	r3, #78	; 0x4e
 8004c00:	d864      	bhi.n	8004ccc <_scanf_float+0x120>
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d83c      	bhi.n	8004c80 <_scanf_float+0xd4>
 8004c06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c0a:	b2c8      	uxtb	r0, r1
 8004c0c:	280e      	cmp	r0, #14
 8004c0e:	d93a      	bls.n	8004c86 <_scanf_float+0xda>
 8004c10:	f1b9 0f00 	cmp.w	r9, #0
 8004c14:	d003      	beq.n	8004c1e <_scanf_float+0x72>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c22:	f1ba 0f01 	cmp.w	sl, #1
 8004c26:	f200 8113 	bhi.w	8004e50 <_scanf_float+0x2a4>
 8004c2a:	455e      	cmp	r6, fp
 8004c2c:	f200 8105 	bhi.w	8004e3a <_scanf_float+0x28e>
 8004c30:	2501      	movs	r5, #1
 8004c32:	4628      	mov	r0, r5
 8004c34:	b007      	add	sp, #28
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c3e:	2a0d      	cmp	r2, #13
 8004c40:	d8e6      	bhi.n	8004c10 <_scanf_float+0x64>
 8004c42:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <_scanf_float+0x9c>)
 8004c44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c48:	08004d87 	.word	0x08004d87
 8004c4c:	08004c11 	.word	0x08004c11
 8004c50:	08004c11 	.word	0x08004c11
 8004c54:	08004c11 	.word	0x08004c11
 8004c58:	08004de7 	.word	0x08004de7
 8004c5c:	08004dbf 	.word	0x08004dbf
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004c11 	.word	0x08004c11
 8004c68:	08004d95 	.word	0x08004d95
 8004c6c:	08004c11 	.word	0x08004c11
 8004c70:	08004c11 	.word	0x08004c11
 8004c74:	08004c11 	.word	0x08004c11
 8004c78:	08004c11 	.word	0x08004c11
 8004c7c:	08004d4d 	.word	0x08004d4d
 8004c80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c84:	e7db      	b.n	8004c3e <_scanf_float+0x92>
 8004c86:	290e      	cmp	r1, #14
 8004c88:	d8c2      	bhi.n	8004c10 <_scanf_float+0x64>
 8004c8a:	a001      	add	r0, pc, #4	; (adr r0, 8004c90 <_scanf_float+0xe4>)
 8004c8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c90:	08004d3f 	.word	0x08004d3f
 8004c94:	08004c11 	.word	0x08004c11
 8004c98:	08004d3f 	.word	0x08004d3f
 8004c9c:	08004dd3 	.word	0x08004dd3
 8004ca0:	08004c11 	.word	0x08004c11
 8004ca4:	08004ced 	.word	0x08004ced
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d29 	.word	0x08004d29
 8004cb0:	08004d29 	.word	0x08004d29
 8004cb4:	08004d29 	.word	0x08004d29
 8004cb8:	08004d29 	.word	0x08004d29
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	2b6e      	cmp	r3, #110	; 0x6e
 8004cce:	d809      	bhi.n	8004ce4 <_scanf_float+0x138>
 8004cd0:	2b60      	cmp	r3, #96	; 0x60
 8004cd2:	d8b2      	bhi.n	8004c3a <_scanf_float+0x8e>
 8004cd4:	2b54      	cmp	r3, #84	; 0x54
 8004cd6:	d077      	beq.n	8004dc8 <_scanf_float+0x21c>
 8004cd8:	2b59      	cmp	r3, #89	; 0x59
 8004cda:	d199      	bne.n	8004c10 <_scanf_float+0x64>
 8004cdc:	2d07      	cmp	r5, #7
 8004cde:	d197      	bne.n	8004c10 <_scanf_float+0x64>
 8004ce0:	2508      	movs	r5, #8
 8004ce2:	e029      	b.n	8004d38 <_scanf_float+0x18c>
 8004ce4:	2b74      	cmp	r3, #116	; 0x74
 8004ce6:	d06f      	beq.n	8004dc8 <_scanf_float+0x21c>
 8004ce8:	2b79      	cmp	r3, #121	; 0x79
 8004cea:	e7f6      	b.n	8004cda <_scanf_float+0x12e>
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	05c8      	lsls	r0, r1, #23
 8004cf0:	d51a      	bpl.n	8004d28 <_scanf_float+0x17c>
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cf8:	6021      	str	r1, [r4, #0]
 8004cfa:	f109 0901 	add.w	r9, r9, #1
 8004cfe:	b11b      	cbz	r3, 8004d08 <_scanf_float+0x15c>
 8004d00:	3b01      	subs	r3, #1
 8004d02:	3201      	adds	r2, #1
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	60a2      	str	r2, [r4, #8]
 8004d08:	68a3      	ldr	r3, [r4, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	3301      	adds	r3, #1
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	f340 8084 	ble.w	8004e28 <_scanf_float+0x27c>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	e766      	b.n	8004bf6 <_scanf_float+0x4a>
 8004d28:	eb1a 0f05 	cmn.w	sl, r5
 8004d2c:	f47f af70 	bne.w	8004c10 <_scanf_float+0x64>
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d36:	6022      	str	r2, [r4, #0]
 8004d38:	f806 3b01 	strb.w	r3, [r6], #1
 8004d3c:	e7e4      	b.n	8004d08 <_scanf_float+0x15c>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	0610      	lsls	r0, r2, #24
 8004d42:	f57f af65 	bpl.w	8004c10 <_scanf_float+0x64>
 8004d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4a:	e7f4      	b.n	8004d36 <_scanf_float+0x18a>
 8004d4c:	f1ba 0f00 	cmp.w	sl, #0
 8004d50:	d10e      	bne.n	8004d70 <_scanf_float+0x1c4>
 8004d52:	f1b9 0f00 	cmp.w	r9, #0
 8004d56:	d10e      	bne.n	8004d76 <_scanf_float+0x1ca>
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d62:	d108      	bne.n	8004d76 <_scanf_float+0x1ca>
 8004d64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d68:	f04f 0a01 	mov.w	sl, #1
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	e7e3      	b.n	8004d38 <_scanf_float+0x18c>
 8004d70:	f1ba 0f02 	cmp.w	sl, #2
 8004d74:	d055      	beq.n	8004e22 <_scanf_float+0x276>
 8004d76:	2d01      	cmp	r5, #1
 8004d78:	d002      	beq.n	8004d80 <_scanf_float+0x1d4>
 8004d7a:	2d04      	cmp	r5, #4
 8004d7c:	f47f af48 	bne.w	8004c10 <_scanf_float+0x64>
 8004d80:	3501      	adds	r5, #1
 8004d82:	b2ed      	uxtb	r5, r5
 8004d84:	e7d8      	b.n	8004d38 <_scanf_float+0x18c>
 8004d86:	f1ba 0f01 	cmp.w	sl, #1
 8004d8a:	f47f af41 	bne.w	8004c10 <_scanf_float+0x64>
 8004d8e:	f04f 0a02 	mov.w	sl, #2
 8004d92:	e7d1      	b.n	8004d38 <_scanf_float+0x18c>
 8004d94:	b97d      	cbnz	r5, 8004db6 <_scanf_float+0x20a>
 8004d96:	f1b9 0f00 	cmp.w	r9, #0
 8004d9a:	f47f af3c 	bne.w	8004c16 <_scanf_float+0x6a>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004da4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004da8:	f47f af39 	bne.w	8004c1e <_scanf_float+0x72>
 8004dac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004db0:	2501      	movs	r5, #1
 8004db2:	6022      	str	r2, [r4, #0]
 8004db4:	e7c0      	b.n	8004d38 <_scanf_float+0x18c>
 8004db6:	2d03      	cmp	r5, #3
 8004db8:	d0e2      	beq.n	8004d80 <_scanf_float+0x1d4>
 8004dba:	2d05      	cmp	r5, #5
 8004dbc:	e7de      	b.n	8004d7c <_scanf_float+0x1d0>
 8004dbe:	2d02      	cmp	r5, #2
 8004dc0:	f47f af26 	bne.w	8004c10 <_scanf_float+0x64>
 8004dc4:	2503      	movs	r5, #3
 8004dc6:	e7b7      	b.n	8004d38 <_scanf_float+0x18c>
 8004dc8:	2d06      	cmp	r5, #6
 8004dca:	f47f af21 	bne.w	8004c10 <_scanf_float+0x64>
 8004dce:	2507      	movs	r5, #7
 8004dd0:	e7b2      	b.n	8004d38 <_scanf_float+0x18c>
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	0591      	lsls	r1, r2, #22
 8004dd6:	f57f af1b 	bpl.w	8004c10 <_scanf_float+0x64>
 8004dda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004dde:	6022      	str	r2, [r4, #0]
 8004de0:	f8cd 9004 	str.w	r9, [sp, #4]
 8004de4:	e7a8      	b.n	8004d38 <_scanf_float+0x18c>
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004dec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004df0:	d006      	beq.n	8004e00 <_scanf_float+0x254>
 8004df2:	0550      	lsls	r0, r2, #21
 8004df4:	f57f af0c 	bpl.w	8004c10 <_scanf_float+0x64>
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	f43f af0f 	beq.w	8004c1e <_scanf_float+0x72>
 8004e00:	0591      	lsls	r1, r2, #22
 8004e02:	bf58      	it	pl
 8004e04:	9901      	ldrpl	r1, [sp, #4]
 8004e06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e0a:	bf58      	it	pl
 8004e0c:	eba9 0101 	subpl.w	r1, r9, r1
 8004e10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e14:	f04f 0900 	mov.w	r9, #0
 8004e18:	bf58      	it	pl
 8004e1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	e78a      	b.n	8004d38 <_scanf_float+0x18c>
 8004e22:	f04f 0a03 	mov.w	sl, #3
 8004e26:	e787      	b.n	8004d38 <_scanf_float+0x18c>
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e30:	4798      	blx	r3
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f43f aedf 	beq.w	8004bf6 <_scanf_float+0x4a>
 8004e38:	e6ea      	b.n	8004c10 <_scanf_float+0x64>
 8004e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4640      	mov	r0, r8
 8004e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e46:	4798      	blx	r3
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	e6ec      	b.n	8004c2a <_scanf_float+0x7e>
 8004e50:	1e6b      	subs	r3, r5, #1
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d825      	bhi.n	8004ea2 <_scanf_float+0x2f6>
 8004e56:	2d02      	cmp	r5, #2
 8004e58:	d836      	bhi.n	8004ec8 <_scanf_float+0x31c>
 8004e5a:	455e      	cmp	r6, fp
 8004e5c:	f67f aee8 	bls.w	8004c30 <_scanf_float+0x84>
 8004e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e64:	463a      	mov	r2, r7
 8004e66:	4640      	mov	r0, r8
 8004e68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e6c:	4798      	blx	r3
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	e7f1      	b.n	8004e5a <_scanf_float+0x2ae>
 8004e76:	9802      	ldr	r0, [sp, #8]
 8004e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e80:	463a      	mov	r2, r7
 8004e82:	9002      	str	r0, [sp, #8]
 8004e84:	4640      	mov	r0, r8
 8004e86:	4798      	blx	r3
 8004e88:	6923      	ldr	r3, [r4, #16]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e92:	fa5f fa8a 	uxtb.w	sl, sl
 8004e96:	f1ba 0f02 	cmp.w	sl, #2
 8004e9a:	d1ec      	bne.n	8004e76 <_scanf_float+0x2ca>
 8004e9c:	3d03      	subs	r5, #3
 8004e9e:	b2ed      	uxtb	r5, r5
 8004ea0:	1b76      	subs	r6, r6, r5
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	05da      	lsls	r2, r3, #23
 8004ea6:	d52f      	bpl.n	8004f08 <_scanf_float+0x35c>
 8004ea8:	055b      	lsls	r3, r3, #21
 8004eaa:	d510      	bpl.n	8004ece <_scanf_float+0x322>
 8004eac:	455e      	cmp	r6, fp
 8004eae:	f67f aebf 	bls.w	8004c30 <_scanf_float+0x84>
 8004eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eb6:	463a      	mov	r2, r7
 8004eb8:	4640      	mov	r0, r8
 8004eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ebe:	4798      	blx	r3
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	e7f1      	b.n	8004eac <_scanf_float+0x300>
 8004ec8:	46aa      	mov	sl, r5
 8004eca:	9602      	str	r6, [sp, #8]
 8004ecc:	e7df      	b.n	8004e8e <_scanf_float+0x2e2>
 8004ece:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	2965      	cmp	r1, #101	; 0x65
 8004ed6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004eda:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ede:	6123      	str	r3, [r4, #16]
 8004ee0:	d00c      	beq.n	8004efc <_scanf_float+0x350>
 8004ee2:	2945      	cmp	r1, #69	; 0x45
 8004ee4:	d00a      	beq.n	8004efc <_scanf_float+0x350>
 8004ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eea:	463a      	mov	r2, r7
 8004eec:	4640      	mov	r0, r8
 8004eee:	4798      	blx	r3
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	1eb5      	subs	r5, r6, #2
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	463a      	mov	r2, r7
 8004efe:	4640      	mov	r0, r8
 8004f00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f04:	4798      	blx	r3
 8004f06:	462e      	mov	r6, r5
 8004f08:	6825      	ldr	r5, [r4, #0]
 8004f0a:	f015 0510 	ands.w	r5, r5, #16
 8004f0e:	d155      	bne.n	8004fbc <_scanf_float+0x410>
 8004f10:	7035      	strb	r5, [r6, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1c:	d11b      	bne.n	8004f56 <_scanf_float+0x3aa>
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	454b      	cmp	r3, r9
 8004f22:	eba3 0209 	sub.w	r2, r3, r9
 8004f26:	d123      	bne.n	8004f70 <_scanf_float+0x3c4>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	f000 fe7b 	bl	8005c28 <_strtod_r>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	f012 0f02 	tst.w	r2, #2
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460f      	mov	r7, r1
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	d021      	beq.n	8004f86 <_scanf_float+0x3da>
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	9903      	ldr	r1, [sp, #12]
 8004f46:	600a      	str	r2, [r1, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	e9c3 6700 	strd	r6, r7, [r3]
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60e3      	str	r3, [r4, #12]
 8004f54:	e66d      	b.n	8004c32 <_scanf_float+0x86>
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0e5      	beq.n	8004f28 <_scanf_float+0x37c>
 8004f5c:	9905      	ldr	r1, [sp, #20]
 8004f5e:	230a      	movs	r3, #10
 8004f60:	462a      	mov	r2, r5
 8004f62:	4640      	mov	r0, r8
 8004f64:	3101      	adds	r1, #1
 8004f66:	f000 fee1 	bl	8005d2c <_strtol_r>
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	9e05      	ldr	r6, [sp, #20]
 8004f6e:	1ac2      	subs	r2, r0, r3
 8004f70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f74:	429e      	cmp	r6, r3
 8004f76:	bf28      	it	cs
 8004f78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4910      	ldr	r1, [pc, #64]	; (8004fc0 <_scanf_float+0x414>)
 8004f80:	f000 f826 	bl	8004fd0 <siprintf>
 8004f84:	e7d0      	b.n	8004f28 <_scanf_float+0x37c>
 8004f86:	f012 0f04 	tst.w	r2, #4
 8004f8a:	f103 0204 	add.w	r2, r3, #4
 8004f8e:	d1d9      	bne.n	8004f44 <_scanf_float+0x398>
 8004f90:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004f94:	f8cc 2000 	str.w	r2, [ip]
 8004f98:	f8d3 8000 	ldr.w	r8, [r3]
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	f7fd f8c4 	bl	800212c <__aeabi_dcmpun>
 8004fa4:	b128      	cbz	r0, 8004fb2 <_scanf_float+0x406>
 8004fa6:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <_scanf_float+0x418>)
 8004fa8:	f000 f80e 	bl	8004fc8 <nanf>
 8004fac:	f8c8 0000 	str.w	r0, [r8]
 8004fb0:	e7cd      	b.n	8004f4e <_scanf_float+0x3a2>
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fd f917 	bl	80021e8 <__aeabi_d2f>
 8004fba:	e7f7      	b.n	8004fac <_scanf_float+0x400>
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	e638      	b.n	8004c32 <_scanf_float+0x86>
 8004fc0:	0801a5a4 	.word	0x0801a5a4
 8004fc4:	0801a51e 	.word	0x0801a51e

08004fc8 <nanf>:
 8004fc8:	4800      	ldr	r0, [pc, #0]	; (8004fcc <nanf+0x4>)
 8004fca:	4770      	bx	lr
 8004fcc:	7fc00000 	.word	0x7fc00000

08004fd0 <siprintf>:
 8004fd0:	b40e      	push	{r1, r2, r3}
 8004fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd6:	b500      	push	{lr}
 8004fd8:	b09c      	sub	sp, #112	; 0x70
 8004fda:	ab1d      	add	r3, sp, #116	; 0x74
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	9006      	str	r0, [sp, #24]
 8004fe0:	9107      	str	r1, [sp, #28]
 8004fe2:	9104      	str	r1, [sp, #16]
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <siprintf+0x38>)
 8004fe6:	4909      	ldr	r1, [pc, #36]	; (800500c <siprintf+0x3c>)
 8004fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fec:	9105      	str	r1, [sp, #20]
 8004fee:	6800      	ldr	r0, [r0, #0]
 8004ff0:	a902      	add	r1, sp, #8
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	f002 fec6 	bl	8007d84 <_svfiprintf_r>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	9b02      	ldr	r3, [sp, #8]
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	b01c      	add	sp, #112	; 0x70
 8005000:	f85d eb04 	ldr.w	lr, [sp], #4
 8005004:	b003      	add	sp, #12
 8005006:	4770      	bx	lr
 8005008:	2000000c 	.word	0x2000000c
 800500c:	ffff0208 	.word	0xffff0208

08005010 <sulp>:
 8005010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	460f      	mov	r7, r1
 8005016:	4690      	mov	r8, r2
 8005018:	f002 fc20 	bl	800785c <__ulp>
 800501c:	4604      	mov	r4, r0
 800501e:	460d      	mov	r5, r1
 8005020:	f1b8 0f00 	cmp.w	r8, #0
 8005024:	d011      	beq.n	800504a <sulp+0x3a>
 8005026:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800502a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd0b      	ble.n	800504a <sulp+0x3a>
 8005032:	2400      	movs	r4, #0
 8005034:	051b      	lsls	r3, r3, #20
 8005036:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800503a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f7fc fdd9 	bl	8001bf8 <__aeabi_dmul>
 8005046:	4604      	mov	r4, r0
 8005048:	460d      	mov	r5, r1
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005052:	0000      	movs	r0, r0
 8005054:	0000      	movs	r0, r0
	...

08005058 <_strtod_l>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	469b      	mov	fp, r3
 800505e:	2300      	movs	r3, #0
 8005060:	b09f      	sub	sp, #124	; 0x7c
 8005062:	931a      	str	r3, [sp, #104]	; 0x68
 8005064:	4b9e      	ldr	r3, [pc, #632]	; (80052e0 <_strtod_l+0x288>)
 8005066:	4682      	mov	sl, r0
 8005068:	681f      	ldr	r7, [r3, #0]
 800506a:	460e      	mov	r6, r1
 800506c:	4638      	mov	r0, r7
 800506e:	9215      	str	r2, [sp, #84]	; 0x54
 8005070:	f7fc fbfe 	bl	8001870 <strlen>
 8005074:	f04f 0800 	mov.w	r8, #0
 8005078:	4604      	mov	r4, r0
 800507a:	f04f 0900 	mov.w	r9, #0
 800507e:	9619      	str	r6, [sp, #100]	; 0x64
 8005080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	2a2b      	cmp	r2, #43	; 0x2b
 8005086:	d04c      	beq.n	8005122 <_strtod_l+0xca>
 8005088:	d83a      	bhi.n	8005100 <_strtod_l+0xa8>
 800508a:	2a0d      	cmp	r2, #13
 800508c:	d833      	bhi.n	80050f6 <_strtod_l+0x9e>
 800508e:	2a08      	cmp	r2, #8
 8005090:	d833      	bhi.n	80050fa <_strtod_l+0xa2>
 8005092:	2a00      	cmp	r2, #0
 8005094:	d03d      	beq.n	8005112 <_strtod_l+0xba>
 8005096:	2300      	movs	r3, #0
 8005098:	930a      	str	r3, [sp, #40]	; 0x28
 800509a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800509c:	782b      	ldrb	r3, [r5, #0]
 800509e:	2b30      	cmp	r3, #48	; 0x30
 80050a0:	f040 80aa 	bne.w	80051f8 <_strtod_l+0x1a0>
 80050a4:	786b      	ldrb	r3, [r5, #1]
 80050a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80050aa:	2b58      	cmp	r3, #88	; 0x58
 80050ac:	d166      	bne.n	800517c <_strtod_l+0x124>
 80050ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b0:	4650      	mov	r0, sl
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	ab1a      	add	r3, sp, #104	; 0x68
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4a8a      	ldr	r2, [pc, #552]	; (80052e4 <_strtod_l+0x28c>)
 80050ba:	f8cd b008 	str.w	fp, [sp, #8]
 80050be:	ab1b      	add	r3, sp, #108	; 0x6c
 80050c0:	a919      	add	r1, sp, #100	; 0x64
 80050c2:	f001 fd23 	bl	8006b0c <__gethex>
 80050c6:	f010 0607 	ands.w	r6, r0, #7
 80050ca:	4604      	mov	r4, r0
 80050cc:	d005      	beq.n	80050da <_strtod_l+0x82>
 80050ce:	2e06      	cmp	r6, #6
 80050d0:	d129      	bne.n	8005126 <_strtod_l+0xce>
 80050d2:	2300      	movs	r3, #0
 80050d4:	3501      	adds	r5, #1
 80050d6:	9519      	str	r5, [sp, #100]	; 0x64
 80050d8:	930a      	str	r3, [sp, #40]	; 0x28
 80050da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 858a 	bne.w	8005bf6 <_strtod_l+0xb9e>
 80050e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e4:	b1d3      	cbz	r3, 800511c <_strtod_l+0xc4>
 80050e6:	4642      	mov	r2, r8
 80050e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	b01f      	add	sp, #124	; 0x7c
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	2a20      	cmp	r2, #32
 80050f8:	d1cd      	bne.n	8005096 <_strtod_l+0x3e>
 80050fa:	3301      	adds	r3, #1
 80050fc:	9319      	str	r3, [sp, #100]	; 0x64
 80050fe:	e7bf      	b.n	8005080 <_strtod_l+0x28>
 8005100:	2a2d      	cmp	r2, #45	; 0x2d
 8005102:	d1c8      	bne.n	8005096 <_strtod_l+0x3e>
 8005104:	2201      	movs	r2, #1
 8005106:	920a      	str	r2, [sp, #40]	; 0x28
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	9219      	str	r2, [sp, #100]	; 0x64
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1c3      	bne.n	800509a <_strtod_l+0x42>
 8005112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005114:	9619      	str	r6, [sp, #100]	; 0x64
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 856b 	bne.w	8005bf2 <_strtod_l+0xb9a>
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	e7e4      	b.n	80050ec <_strtod_l+0x94>
 8005122:	2200      	movs	r2, #0
 8005124:	e7ef      	b.n	8005106 <_strtod_l+0xae>
 8005126:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005128:	b13a      	cbz	r2, 800513a <_strtod_l+0xe2>
 800512a:	2135      	movs	r1, #53	; 0x35
 800512c:	a81c      	add	r0, sp, #112	; 0x70
 800512e:	f002 fc99 	bl	8007a64 <__copybits>
 8005132:	4650      	mov	r0, sl
 8005134:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005136:	f002 f861 	bl	80071fc <_Bfree>
 800513a:	3e01      	subs	r6, #1
 800513c:	2e04      	cmp	r6, #4
 800513e:	d806      	bhi.n	800514e <_strtod_l+0xf6>
 8005140:	e8df f006 	tbb	[pc, r6]
 8005144:	1714030a 	.word	0x1714030a
 8005148:	0a          	.byte	0x0a
 8005149:	00          	.byte	0x00
 800514a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800514e:	0721      	lsls	r1, r4, #28
 8005150:	d5c3      	bpl.n	80050da <_strtod_l+0x82>
 8005152:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005156:	e7c0      	b.n	80050da <_strtod_l+0x82>
 8005158:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800515a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800515e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005166:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800516a:	e7f0      	b.n	800514e <_strtod_l+0xf6>
 800516c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80052e8 <_strtod_l+0x290>
 8005170:	e7ed      	b.n	800514e <_strtod_l+0xf6>
 8005172:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005176:	f04f 38ff 	mov.w	r8, #4294967295
 800517a:	e7e8      	b.n	800514e <_strtod_l+0xf6>
 800517c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	9219      	str	r2, [sp, #100]	; 0x64
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d0f9      	beq.n	800517c <_strtod_l+0x124>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0a6      	beq.n	80050da <_strtod_l+0x82>
 800518c:	2301      	movs	r3, #1
 800518e:	9307      	str	r3, [sp, #28]
 8005190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005192:	220a      	movs	r2, #10
 8005194:	9308      	str	r3, [sp, #32]
 8005196:	2300      	movs	r3, #0
 8005198:	469b      	mov	fp, r3
 800519a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800519e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80051a0:	7805      	ldrb	r5, [r0, #0]
 80051a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80051a6:	b2d9      	uxtb	r1, r3
 80051a8:	2909      	cmp	r1, #9
 80051aa:	d927      	bls.n	80051fc <_strtod_l+0x1a4>
 80051ac:	4622      	mov	r2, r4
 80051ae:	4639      	mov	r1, r7
 80051b0:	f002 fefe 	bl	8007fb0 <strncmp>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d033      	beq.n	8005220 <_strtod_l+0x1c8>
 80051b8:	2000      	movs	r0, #0
 80051ba:	462a      	mov	r2, r5
 80051bc:	465c      	mov	r4, fp
 80051be:	4603      	mov	r3, r0
 80051c0:	9004      	str	r0, [sp, #16]
 80051c2:	2a65      	cmp	r2, #101	; 0x65
 80051c4:	d001      	beq.n	80051ca <_strtod_l+0x172>
 80051c6:	2a45      	cmp	r2, #69	; 0x45
 80051c8:	d114      	bne.n	80051f4 <_strtod_l+0x19c>
 80051ca:	b91c      	cbnz	r4, 80051d4 <_strtod_l+0x17c>
 80051cc:	9a07      	ldr	r2, [sp, #28]
 80051ce:	4302      	orrs	r2, r0
 80051d0:	d09f      	beq.n	8005112 <_strtod_l+0xba>
 80051d2:	2400      	movs	r4, #0
 80051d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80051d6:	1c72      	adds	r2, r6, #1
 80051d8:	9219      	str	r2, [sp, #100]	; 0x64
 80051da:	7872      	ldrb	r2, [r6, #1]
 80051dc:	2a2b      	cmp	r2, #43	; 0x2b
 80051de:	d079      	beq.n	80052d4 <_strtod_l+0x27c>
 80051e0:	2a2d      	cmp	r2, #45	; 0x2d
 80051e2:	f000 8083 	beq.w	80052ec <_strtod_l+0x294>
 80051e6:	2700      	movs	r7, #0
 80051e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051ec:	2909      	cmp	r1, #9
 80051ee:	f240 8083 	bls.w	80052f8 <_strtod_l+0x2a0>
 80051f2:	9619      	str	r6, [sp, #100]	; 0x64
 80051f4:	2500      	movs	r5, #0
 80051f6:	e09f      	b.n	8005338 <_strtod_l+0x2e0>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e7c8      	b.n	800518e <_strtod_l+0x136>
 80051fc:	f1bb 0f08 	cmp.w	fp, #8
 8005200:	bfd5      	itete	le
 8005202:	9906      	ldrle	r1, [sp, #24]
 8005204:	9905      	ldrgt	r1, [sp, #20]
 8005206:	fb02 3301 	mlale	r3, r2, r1, r3
 800520a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800520e:	f100 0001 	add.w	r0, r0, #1
 8005212:	bfd4      	ite	le
 8005214:	9306      	strle	r3, [sp, #24]
 8005216:	9305      	strgt	r3, [sp, #20]
 8005218:	f10b 0b01 	add.w	fp, fp, #1
 800521c:	9019      	str	r0, [sp, #100]	; 0x64
 800521e:	e7be      	b.n	800519e <_strtod_l+0x146>
 8005220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005222:	191a      	adds	r2, r3, r4
 8005224:	9219      	str	r2, [sp, #100]	; 0x64
 8005226:	5d1a      	ldrb	r2, [r3, r4]
 8005228:	f1bb 0f00 	cmp.w	fp, #0
 800522c:	d036      	beq.n	800529c <_strtod_l+0x244>
 800522e:	465c      	mov	r4, fp
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005236:	2b09      	cmp	r3, #9
 8005238:	d912      	bls.n	8005260 <_strtod_l+0x208>
 800523a:	2301      	movs	r3, #1
 800523c:	e7c1      	b.n	80051c2 <_strtod_l+0x16a>
 800523e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005240:	3001      	adds	r0, #1
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	9219      	str	r2, [sp, #100]	; 0x64
 8005246:	785a      	ldrb	r2, [r3, #1]
 8005248:	2a30      	cmp	r2, #48	; 0x30
 800524a:	d0f8      	beq.n	800523e <_strtod_l+0x1e6>
 800524c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005250:	2b08      	cmp	r3, #8
 8005252:	f200 84d5 	bhi.w	8005c00 <_strtod_l+0xba8>
 8005256:	9004      	str	r0, [sp, #16]
 8005258:	2000      	movs	r0, #0
 800525a:	4604      	mov	r4, r0
 800525c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800525e:	9308      	str	r3, [sp, #32]
 8005260:	3a30      	subs	r2, #48	; 0x30
 8005262:	f100 0301 	add.w	r3, r0, #1
 8005266:	d013      	beq.n	8005290 <_strtod_l+0x238>
 8005268:	9904      	ldr	r1, [sp, #16]
 800526a:	1905      	adds	r5, r0, r4
 800526c:	4419      	add	r1, r3
 800526e:	9104      	str	r1, [sp, #16]
 8005270:	4623      	mov	r3, r4
 8005272:	210a      	movs	r1, #10
 8005274:	42ab      	cmp	r3, r5
 8005276:	d113      	bne.n	80052a0 <_strtod_l+0x248>
 8005278:	1823      	adds	r3, r4, r0
 800527a:	2b08      	cmp	r3, #8
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	4404      	add	r4, r0
 8005282:	dc1b      	bgt.n	80052bc <_strtod_l+0x264>
 8005284:	230a      	movs	r3, #10
 8005286:	9906      	ldr	r1, [sp, #24]
 8005288:	fb03 2301 	mla	r3, r3, r1, r2
 800528c:	9306      	str	r3, [sp, #24]
 800528e:	2300      	movs	r3, #0
 8005290:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005292:	4618      	mov	r0, r3
 8005294:	1c51      	adds	r1, r2, #1
 8005296:	9119      	str	r1, [sp, #100]	; 0x64
 8005298:	7852      	ldrb	r2, [r2, #1]
 800529a:	e7ca      	b.n	8005232 <_strtod_l+0x1da>
 800529c:	4658      	mov	r0, fp
 800529e:	e7d3      	b.n	8005248 <_strtod_l+0x1f0>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	dc04      	bgt.n	80052ae <_strtod_l+0x256>
 80052a4:	9f06      	ldr	r7, [sp, #24]
 80052a6:	434f      	muls	r7, r1
 80052a8:	9706      	str	r7, [sp, #24]
 80052aa:	3301      	adds	r3, #1
 80052ac:	e7e2      	b.n	8005274 <_strtod_l+0x21c>
 80052ae:	1c5f      	adds	r7, r3, #1
 80052b0:	2f10      	cmp	r7, #16
 80052b2:	bfde      	ittt	le
 80052b4:	9f05      	ldrle	r7, [sp, #20]
 80052b6:	434f      	mulle	r7, r1
 80052b8:	9705      	strle	r7, [sp, #20]
 80052ba:	e7f6      	b.n	80052aa <_strtod_l+0x252>
 80052bc:	2c10      	cmp	r4, #16
 80052be:	bfdf      	itttt	le
 80052c0:	230a      	movle	r3, #10
 80052c2:	9905      	ldrle	r1, [sp, #20]
 80052c4:	fb03 2301 	mlale	r3, r3, r1, r2
 80052c8:	9305      	strle	r3, [sp, #20]
 80052ca:	e7e0      	b.n	800528e <_strtod_l+0x236>
 80052cc:	2300      	movs	r3, #0
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	2301      	movs	r3, #1
 80052d2:	e77b      	b.n	80051cc <_strtod_l+0x174>
 80052d4:	2700      	movs	r7, #0
 80052d6:	1cb2      	adds	r2, r6, #2
 80052d8:	9219      	str	r2, [sp, #100]	; 0x64
 80052da:	78b2      	ldrb	r2, [r6, #2]
 80052dc:	e784      	b.n	80051e8 <_strtod_l+0x190>
 80052de:	bf00      	nop
 80052e0:	0801a83c 	.word	0x0801a83c
 80052e4:	0801a5ac 	.word	0x0801a5ac
 80052e8:	7ff00000 	.word	0x7ff00000
 80052ec:	2701      	movs	r7, #1
 80052ee:	e7f2      	b.n	80052d6 <_strtod_l+0x27e>
 80052f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80052f2:	1c51      	adds	r1, r2, #1
 80052f4:	9119      	str	r1, [sp, #100]	; 0x64
 80052f6:	7852      	ldrb	r2, [r2, #1]
 80052f8:	2a30      	cmp	r2, #48	; 0x30
 80052fa:	d0f9      	beq.n	80052f0 <_strtod_l+0x298>
 80052fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005300:	2908      	cmp	r1, #8
 8005302:	f63f af77 	bhi.w	80051f4 <_strtod_l+0x19c>
 8005306:	f04f 0e0a 	mov.w	lr, #10
 800530a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800530e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005310:	9209      	str	r2, [sp, #36]	; 0x24
 8005312:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005314:	1c51      	adds	r1, r2, #1
 8005316:	9119      	str	r1, [sp, #100]	; 0x64
 8005318:	7852      	ldrb	r2, [r2, #1]
 800531a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800531e:	2d09      	cmp	r5, #9
 8005320:	d935      	bls.n	800538e <_strtod_l+0x336>
 8005322:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005324:	1b49      	subs	r1, r1, r5
 8005326:	2908      	cmp	r1, #8
 8005328:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800532c:	dc02      	bgt.n	8005334 <_strtod_l+0x2dc>
 800532e:	4565      	cmp	r5, ip
 8005330:	bfa8      	it	ge
 8005332:	4665      	movge	r5, ip
 8005334:	b107      	cbz	r7, 8005338 <_strtod_l+0x2e0>
 8005336:	426d      	negs	r5, r5
 8005338:	2c00      	cmp	r4, #0
 800533a:	d14c      	bne.n	80053d6 <_strtod_l+0x37e>
 800533c:	9907      	ldr	r1, [sp, #28]
 800533e:	4301      	orrs	r1, r0
 8005340:	f47f aecb 	bne.w	80050da <_strtod_l+0x82>
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f aee4 	bne.w	8005112 <_strtod_l+0xba>
 800534a:	2a69      	cmp	r2, #105	; 0x69
 800534c:	d026      	beq.n	800539c <_strtod_l+0x344>
 800534e:	dc23      	bgt.n	8005398 <_strtod_l+0x340>
 8005350:	2a49      	cmp	r2, #73	; 0x49
 8005352:	d023      	beq.n	800539c <_strtod_l+0x344>
 8005354:	2a4e      	cmp	r2, #78	; 0x4e
 8005356:	f47f aedc 	bne.w	8005112 <_strtod_l+0xba>
 800535a:	499d      	ldr	r1, [pc, #628]	; (80055d0 <_strtod_l+0x578>)
 800535c:	a819      	add	r0, sp, #100	; 0x64
 800535e:	f001 fe23 	bl	8006fa8 <__match>
 8005362:	2800      	cmp	r0, #0
 8005364:	f43f aed5 	beq.w	8005112 <_strtod_l+0xba>
 8005368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b28      	cmp	r3, #40	; 0x28
 800536e:	d12c      	bne.n	80053ca <_strtod_l+0x372>
 8005370:	4998      	ldr	r1, [pc, #608]	; (80055d4 <_strtod_l+0x57c>)
 8005372:	aa1c      	add	r2, sp, #112	; 0x70
 8005374:	a819      	add	r0, sp, #100	; 0x64
 8005376:	f001 fe2b 	bl	8006fd0 <__hexnan>
 800537a:	2805      	cmp	r0, #5
 800537c:	d125      	bne.n	80053ca <_strtod_l+0x372>
 800537e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005380:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005384:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005388:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800538c:	e6a5      	b.n	80050da <_strtod_l+0x82>
 800538e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005392:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005396:	e7bc      	b.n	8005312 <_strtod_l+0x2ba>
 8005398:	2a6e      	cmp	r2, #110	; 0x6e
 800539a:	e7dc      	b.n	8005356 <_strtod_l+0x2fe>
 800539c:	498e      	ldr	r1, [pc, #568]	; (80055d8 <_strtod_l+0x580>)
 800539e:	a819      	add	r0, sp, #100	; 0x64
 80053a0:	f001 fe02 	bl	8006fa8 <__match>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f43f aeb4 	beq.w	8005112 <_strtod_l+0xba>
 80053aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053ac:	498b      	ldr	r1, [pc, #556]	; (80055dc <_strtod_l+0x584>)
 80053ae:	3b01      	subs	r3, #1
 80053b0:	a819      	add	r0, sp, #100	; 0x64
 80053b2:	9319      	str	r3, [sp, #100]	; 0x64
 80053b4:	f001 fdf8 	bl	8006fa8 <__match>
 80053b8:	b910      	cbnz	r0, 80053c0 <_strtod_l+0x368>
 80053ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053bc:	3301      	adds	r3, #1
 80053be:	9319      	str	r3, [sp, #100]	; 0x64
 80053c0:	f04f 0800 	mov.w	r8, #0
 80053c4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80055e0 <_strtod_l+0x588>
 80053c8:	e687      	b.n	80050da <_strtod_l+0x82>
 80053ca:	4886      	ldr	r0, [pc, #536]	; (80055e4 <_strtod_l+0x58c>)
 80053cc:	f002 fdda 	bl	8007f84 <nan>
 80053d0:	4680      	mov	r8, r0
 80053d2:	4689      	mov	r9, r1
 80053d4:	e681      	b.n	80050da <_strtod_l+0x82>
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	f1bb 0f00 	cmp.w	fp, #0
 80053dc:	bf08      	it	eq
 80053de:	46a3      	moveq	fp, r4
 80053e0:	1aeb      	subs	r3, r5, r3
 80053e2:	2c10      	cmp	r4, #16
 80053e4:	9806      	ldr	r0, [sp, #24]
 80053e6:	4626      	mov	r6, r4
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	bfa8      	it	ge
 80053ec:	2610      	movge	r6, #16
 80053ee:	f7fc fb89 	bl	8001b04 <__aeabi_ui2d>
 80053f2:	2c09      	cmp	r4, #9
 80053f4:	4680      	mov	r8, r0
 80053f6:	4689      	mov	r9, r1
 80053f8:	dd13      	ble.n	8005422 <_strtod_l+0x3ca>
 80053fa:	4b7b      	ldr	r3, [pc, #492]	; (80055e8 <_strtod_l+0x590>)
 80053fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005400:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005404:	f7fc fbf8 	bl	8001bf8 <__aeabi_dmul>
 8005408:	4680      	mov	r8, r0
 800540a:	9805      	ldr	r0, [sp, #20]
 800540c:	4689      	mov	r9, r1
 800540e:	f7fc fb79 	bl	8001b04 <__aeabi_ui2d>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fc fa37 	bl	800188c <__adddf3>
 800541e:	4680      	mov	r8, r0
 8005420:	4689      	mov	r9, r1
 8005422:	2c0f      	cmp	r4, #15
 8005424:	dc36      	bgt.n	8005494 <_strtod_l+0x43c>
 8005426:	9b07      	ldr	r3, [sp, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f43f ae56 	beq.w	80050da <_strtod_l+0x82>
 800542e:	dd22      	ble.n	8005476 <_strtod_l+0x41e>
 8005430:	2b16      	cmp	r3, #22
 8005432:	dc09      	bgt.n	8005448 <_strtod_l+0x3f0>
 8005434:	496c      	ldr	r1, [pc, #432]	; (80055e8 <_strtod_l+0x590>)
 8005436:	4642      	mov	r2, r8
 8005438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800543c:	464b      	mov	r3, r9
 800543e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005442:	f7fc fbd9 	bl	8001bf8 <__aeabi_dmul>
 8005446:	e7c3      	b.n	80053d0 <_strtod_l+0x378>
 8005448:	9a07      	ldr	r2, [sp, #28]
 800544a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800544e:	4293      	cmp	r3, r2
 8005450:	db20      	blt.n	8005494 <_strtod_l+0x43c>
 8005452:	4d65      	ldr	r5, [pc, #404]	; (80055e8 <_strtod_l+0x590>)
 8005454:	f1c4 040f 	rsb	r4, r4, #15
 8005458:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800545c:	4642      	mov	r2, r8
 800545e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005462:	464b      	mov	r3, r9
 8005464:	f7fc fbc8 	bl	8001bf8 <__aeabi_dmul>
 8005468:	9b07      	ldr	r3, [sp, #28]
 800546a:	1b1c      	subs	r4, r3, r4
 800546c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005474:	e7e5      	b.n	8005442 <_strtod_l+0x3ea>
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	3316      	adds	r3, #22
 800547a:	db0b      	blt.n	8005494 <_strtod_l+0x43c>
 800547c:	9b04      	ldr	r3, [sp, #16]
 800547e:	4640      	mov	r0, r8
 8005480:	1b5d      	subs	r5, r3, r5
 8005482:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <_strtod_l+0x590>)
 8005484:	4649      	mov	r1, r9
 8005486:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800548a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800548e:	f7fc fcdd 	bl	8001e4c <__aeabi_ddiv>
 8005492:	e79d      	b.n	80053d0 <_strtod_l+0x378>
 8005494:	9b07      	ldr	r3, [sp, #28]
 8005496:	1ba6      	subs	r6, r4, r6
 8005498:	441e      	add	r6, r3
 800549a:	2e00      	cmp	r6, #0
 800549c:	dd74      	ble.n	8005588 <_strtod_l+0x530>
 800549e:	f016 030f 	ands.w	r3, r6, #15
 80054a2:	d00a      	beq.n	80054ba <_strtod_l+0x462>
 80054a4:	4950      	ldr	r1, [pc, #320]	; (80055e8 <_strtod_l+0x590>)
 80054a6:	4642      	mov	r2, r8
 80054a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b0:	464b      	mov	r3, r9
 80054b2:	f7fc fba1 	bl	8001bf8 <__aeabi_dmul>
 80054b6:	4680      	mov	r8, r0
 80054b8:	4689      	mov	r9, r1
 80054ba:	f036 060f 	bics.w	r6, r6, #15
 80054be:	d052      	beq.n	8005566 <_strtod_l+0x50e>
 80054c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80054c4:	dd27      	ble.n	8005516 <_strtod_l+0x4be>
 80054c6:	f04f 0b00 	mov.w	fp, #0
 80054ca:	f8cd b010 	str.w	fp, [sp, #16]
 80054ce:	f8cd b020 	str.w	fp, [sp, #32]
 80054d2:	f8cd b018 	str.w	fp, [sp, #24]
 80054d6:	2322      	movs	r3, #34	; 0x22
 80054d8:	f04f 0800 	mov.w	r8, #0
 80054dc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80055e0 <_strtod_l+0x588>
 80054e0:	f8ca 3000 	str.w	r3, [sl]
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f43f adf7 	beq.w	80050da <_strtod_l+0x82>
 80054ec:	4650      	mov	r0, sl
 80054ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054f0:	f001 fe84 	bl	80071fc <_Bfree>
 80054f4:	4650      	mov	r0, sl
 80054f6:	9906      	ldr	r1, [sp, #24]
 80054f8:	f001 fe80 	bl	80071fc <_Bfree>
 80054fc:	4650      	mov	r0, sl
 80054fe:	9904      	ldr	r1, [sp, #16]
 8005500:	f001 fe7c 	bl	80071fc <_Bfree>
 8005504:	4650      	mov	r0, sl
 8005506:	9908      	ldr	r1, [sp, #32]
 8005508:	f001 fe78 	bl	80071fc <_Bfree>
 800550c:	4659      	mov	r1, fp
 800550e:	4650      	mov	r0, sl
 8005510:	f001 fe74 	bl	80071fc <_Bfree>
 8005514:	e5e1      	b.n	80050da <_strtod_l+0x82>
 8005516:	4b35      	ldr	r3, [pc, #212]	; (80055ec <_strtod_l+0x594>)
 8005518:	4640      	mov	r0, r8
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	2300      	movs	r3, #0
 800551e:	4649      	mov	r1, r9
 8005520:	461f      	mov	r7, r3
 8005522:	1136      	asrs	r6, r6, #4
 8005524:	2e01      	cmp	r6, #1
 8005526:	dc21      	bgt.n	800556c <_strtod_l+0x514>
 8005528:	b10b      	cbz	r3, 800552e <_strtod_l+0x4d6>
 800552a:	4680      	mov	r8, r0
 800552c:	4689      	mov	r9, r1
 800552e:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <_strtod_l+0x594>)
 8005530:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005534:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005538:	4642      	mov	r2, r8
 800553a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553e:	464b      	mov	r3, r9
 8005540:	f7fc fb5a 	bl	8001bf8 <__aeabi_dmul>
 8005544:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <_strtod_l+0x588>)
 8005546:	460a      	mov	r2, r1
 8005548:	400b      	ands	r3, r1
 800554a:	4929      	ldr	r1, [pc, #164]	; (80055f0 <_strtod_l+0x598>)
 800554c:	4680      	mov	r8, r0
 800554e:	428b      	cmp	r3, r1
 8005550:	d8b9      	bhi.n	80054c6 <_strtod_l+0x46e>
 8005552:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005556:	428b      	cmp	r3, r1
 8005558:	bf86      	itte	hi
 800555a:	f04f 38ff 	movhi.w	r8, #4294967295
 800555e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80055f4 <_strtod_l+0x59c>
 8005562:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005566:	2300      	movs	r3, #0
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	e07f      	b.n	800566c <_strtod_l+0x614>
 800556c:	07f2      	lsls	r2, r6, #31
 800556e:	d505      	bpl.n	800557c <_strtod_l+0x524>
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	f7fc fb3f 	bl	8001bf8 <__aeabi_dmul>
 800557a:	2301      	movs	r3, #1
 800557c:	9a05      	ldr	r2, [sp, #20]
 800557e:	3701      	adds	r7, #1
 8005580:	3208      	adds	r2, #8
 8005582:	1076      	asrs	r6, r6, #1
 8005584:	9205      	str	r2, [sp, #20]
 8005586:	e7cd      	b.n	8005524 <_strtod_l+0x4cc>
 8005588:	d0ed      	beq.n	8005566 <_strtod_l+0x50e>
 800558a:	4276      	negs	r6, r6
 800558c:	f016 020f 	ands.w	r2, r6, #15
 8005590:	d00a      	beq.n	80055a8 <_strtod_l+0x550>
 8005592:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <_strtod_l+0x590>)
 8005594:	4640      	mov	r0, r8
 8005596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800559a:	4649      	mov	r1, r9
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fc fc54 	bl	8001e4c <__aeabi_ddiv>
 80055a4:	4680      	mov	r8, r0
 80055a6:	4689      	mov	r9, r1
 80055a8:	1136      	asrs	r6, r6, #4
 80055aa:	d0dc      	beq.n	8005566 <_strtod_l+0x50e>
 80055ac:	2e1f      	cmp	r6, #31
 80055ae:	dd23      	ble.n	80055f8 <_strtod_l+0x5a0>
 80055b0:	f04f 0b00 	mov.w	fp, #0
 80055b4:	f8cd b010 	str.w	fp, [sp, #16]
 80055b8:	f8cd b020 	str.w	fp, [sp, #32]
 80055bc:	f8cd b018 	str.w	fp, [sp, #24]
 80055c0:	2322      	movs	r3, #34	; 0x22
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	f04f 0900 	mov.w	r9, #0
 80055ca:	f8ca 3000 	str.w	r3, [sl]
 80055ce:	e789      	b.n	80054e4 <_strtod_l+0x48c>
 80055d0:	0801a57d 	.word	0x0801a57d
 80055d4:	0801a5c0 	.word	0x0801a5c0
 80055d8:	0801a575 	.word	0x0801a575
 80055dc:	0801a704 	.word	0x0801a704
 80055e0:	7ff00000 	.word	0x7ff00000
 80055e4:	0801a51e 	.word	0x0801a51e
 80055e8:	0801a8f8 	.word	0x0801a8f8
 80055ec:	0801a8d0 	.word	0x0801a8d0
 80055f0:	7ca00000 	.word	0x7ca00000
 80055f4:	7fefffff 	.word	0x7fefffff
 80055f8:	f016 0310 	ands.w	r3, r6, #16
 80055fc:	bf18      	it	ne
 80055fe:	236a      	movne	r3, #106	; 0x6a
 8005600:	4640      	mov	r0, r8
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	4649      	mov	r1, r9
 8005606:	2300      	movs	r3, #0
 8005608:	4fb0      	ldr	r7, [pc, #704]	; (80058cc <_strtod_l+0x874>)
 800560a:	07f2      	lsls	r2, r6, #31
 800560c:	d504      	bpl.n	8005618 <_strtod_l+0x5c0>
 800560e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005612:	f7fc faf1 	bl	8001bf8 <__aeabi_dmul>
 8005616:	2301      	movs	r3, #1
 8005618:	1076      	asrs	r6, r6, #1
 800561a:	f107 0708 	add.w	r7, r7, #8
 800561e:	d1f4      	bne.n	800560a <_strtod_l+0x5b2>
 8005620:	b10b      	cbz	r3, 8005626 <_strtod_l+0x5ce>
 8005622:	4680      	mov	r8, r0
 8005624:	4689      	mov	r9, r1
 8005626:	9b05      	ldr	r3, [sp, #20]
 8005628:	b1c3      	cbz	r3, 800565c <_strtod_l+0x604>
 800562a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800562e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005632:	2b00      	cmp	r3, #0
 8005634:	4649      	mov	r1, r9
 8005636:	dd11      	ble.n	800565c <_strtod_l+0x604>
 8005638:	2b1f      	cmp	r3, #31
 800563a:	f340 8127 	ble.w	800588c <_strtod_l+0x834>
 800563e:	2b34      	cmp	r3, #52	; 0x34
 8005640:	bfd8      	it	le
 8005642:	f04f 33ff 	movle.w	r3, #4294967295
 8005646:	f04f 0800 	mov.w	r8, #0
 800564a:	bfcf      	iteee	gt
 800564c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005650:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005654:	fa03 f202 	lslle.w	r2, r3, r2
 8005658:	ea02 0901 	andle.w	r9, r2, r1
 800565c:	2200      	movs	r2, #0
 800565e:	2300      	movs	r3, #0
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	f7fc fd30 	bl	80020c8 <__aeabi_dcmpeq>
 8005668:	2800      	cmp	r0, #0
 800566a:	d1a1      	bne.n	80055b0 <_strtod_l+0x558>
 800566c:	9b06      	ldr	r3, [sp, #24]
 800566e:	465a      	mov	r2, fp
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	4650      	mov	r0, sl
 8005674:	4623      	mov	r3, r4
 8005676:	9908      	ldr	r1, [sp, #32]
 8005678:	f001 fe28 	bl	80072cc <__s2b>
 800567c:	9008      	str	r0, [sp, #32]
 800567e:	2800      	cmp	r0, #0
 8005680:	f43f af21 	beq.w	80054c6 <_strtod_l+0x46e>
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	f04f 0b00 	mov.w	fp, #0
 800568a:	1b5d      	subs	r5, r3, r5
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	f8cd b010 	str.w	fp, [sp, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfb4      	ite	lt
 8005696:	462b      	movlt	r3, r5
 8005698:	2300      	movge	r3, #0
 800569a:	930e      	str	r3, [sp, #56]	; 0x38
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80056a2:	9314      	str	r3, [sp, #80]	; 0x50
 80056a4:	9b08      	ldr	r3, [sp, #32]
 80056a6:	4650      	mov	r0, sl
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	f001 fd67 	bl	800717c <_Balloc>
 80056ae:	9006      	str	r0, [sp, #24]
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f43f af10 	beq.w	80054d6 <_strtod_l+0x47e>
 80056b6:	9b08      	ldr	r3, [sp, #32]
 80056b8:	300c      	adds	r0, #12
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	f103 010c 	add.w	r1, r3, #12
 80056c0:	3202      	adds	r2, #2
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	f001 fd4c 	bl	8007160 <memcpy>
 80056c8:	ab1c      	add	r3, sp, #112	; 0x70
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	ab1b      	add	r3, sp, #108	; 0x6c
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	4650      	mov	r0, sl
 80056d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80056da:	f002 f939 	bl	8007950 <__d2b>
 80056de:	901a      	str	r0, [sp, #104]	; 0x68
 80056e0:	2800      	cmp	r0, #0
 80056e2:	f43f aef8 	beq.w	80054d6 <_strtod_l+0x47e>
 80056e6:	2101      	movs	r1, #1
 80056e8:	4650      	mov	r0, sl
 80056ea:	f001 fe87 	bl	80073fc <__i2b>
 80056ee:	4603      	mov	r3, r0
 80056f0:	9004      	str	r0, [sp, #16]
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f43f aeef 	beq.w	80054d6 <_strtod_l+0x47e>
 80056f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80056fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	bfab      	itete	ge
 8005700:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005702:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005704:	18ee      	addge	r6, r5, r3
 8005706:	1b5c      	sublt	r4, r3, r5
 8005708:	9b05      	ldr	r3, [sp, #20]
 800570a:	bfa8      	it	ge
 800570c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800570e:	eba5 0503 	sub.w	r5, r5, r3
 8005712:	4415      	add	r5, r2
 8005714:	4b6e      	ldr	r3, [pc, #440]	; (80058d0 <_strtod_l+0x878>)
 8005716:	f105 35ff 	add.w	r5, r5, #4294967295
 800571a:	bfb8      	it	lt
 800571c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800571e:	429d      	cmp	r5, r3
 8005720:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005724:	f280 80c4 	bge.w	80058b0 <_strtod_l+0x858>
 8005728:	1b5b      	subs	r3, r3, r5
 800572a:	2b1f      	cmp	r3, #31
 800572c:	f04f 0701 	mov.w	r7, #1
 8005730:	eba2 0203 	sub.w	r2, r2, r3
 8005734:	f300 80b1 	bgt.w	800589a <_strtod_l+0x842>
 8005738:	2500      	movs	r5, #0
 800573a:	fa07 f303 	lsl.w	r3, r7, r3
 800573e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005740:	18b7      	adds	r7, r6, r2
 8005742:	9b05      	ldr	r3, [sp, #20]
 8005744:	42be      	cmp	r6, r7
 8005746:	4414      	add	r4, r2
 8005748:	441c      	add	r4, r3
 800574a:	4633      	mov	r3, r6
 800574c:	bfa8      	it	ge
 800574e:	463b      	movge	r3, r7
 8005750:	42a3      	cmp	r3, r4
 8005752:	bfa8      	it	ge
 8005754:	4623      	movge	r3, r4
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfc2      	ittt	gt
 800575a:	1aff      	subgt	r7, r7, r3
 800575c:	1ae4      	subgt	r4, r4, r3
 800575e:	1af6      	subgt	r6, r6, r3
 8005760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	dd17      	ble.n	8005796 <_strtod_l+0x73e>
 8005766:	461a      	mov	r2, r3
 8005768:	4650      	mov	r0, sl
 800576a:	9904      	ldr	r1, [sp, #16]
 800576c:	f001 ff04 	bl	8007578 <__pow5mult>
 8005770:	9004      	str	r0, [sp, #16]
 8005772:	2800      	cmp	r0, #0
 8005774:	f43f aeaf 	beq.w	80054d6 <_strtod_l+0x47e>
 8005778:	4601      	mov	r1, r0
 800577a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800577c:	4650      	mov	r0, sl
 800577e:	f001 fe53 	bl	8007428 <__multiply>
 8005782:	9009      	str	r0, [sp, #36]	; 0x24
 8005784:	2800      	cmp	r0, #0
 8005786:	f43f aea6 	beq.w	80054d6 <_strtod_l+0x47e>
 800578a:	4650      	mov	r0, sl
 800578c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800578e:	f001 fd35 	bl	80071fc <_Bfree>
 8005792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005794:	931a      	str	r3, [sp, #104]	; 0x68
 8005796:	2f00      	cmp	r7, #0
 8005798:	f300 808e 	bgt.w	80058b8 <_strtod_l+0x860>
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dd08      	ble.n	80057b4 <_strtod_l+0x75c>
 80057a2:	4650      	mov	r0, sl
 80057a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80057a6:	9906      	ldr	r1, [sp, #24]
 80057a8:	f001 fee6 	bl	8007578 <__pow5mult>
 80057ac:	9006      	str	r0, [sp, #24]
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f43f ae91 	beq.w	80054d6 <_strtod_l+0x47e>
 80057b4:	2c00      	cmp	r4, #0
 80057b6:	dd08      	ble.n	80057ca <_strtod_l+0x772>
 80057b8:	4622      	mov	r2, r4
 80057ba:	4650      	mov	r0, sl
 80057bc:	9906      	ldr	r1, [sp, #24]
 80057be:	f001 ff35 	bl	800762c <__lshift>
 80057c2:	9006      	str	r0, [sp, #24]
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f43f ae86 	beq.w	80054d6 <_strtod_l+0x47e>
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	dd08      	ble.n	80057e0 <_strtod_l+0x788>
 80057ce:	4632      	mov	r2, r6
 80057d0:	4650      	mov	r0, sl
 80057d2:	9904      	ldr	r1, [sp, #16]
 80057d4:	f001 ff2a 	bl	800762c <__lshift>
 80057d8:	9004      	str	r0, [sp, #16]
 80057da:	2800      	cmp	r0, #0
 80057dc:	f43f ae7b 	beq.w	80054d6 <_strtod_l+0x47e>
 80057e0:	4650      	mov	r0, sl
 80057e2:	9a06      	ldr	r2, [sp, #24]
 80057e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057e6:	f001 ffad 	bl	8007744 <__mdiff>
 80057ea:	4683      	mov	fp, r0
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f43f ae72 	beq.w	80054d6 <_strtod_l+0x47e>
 80057f2:	2400      	movs	r4, #0
 80057f4:	68c3      	ldr	r3, [r0, #12]
 80057f6:	9904      	ldr	r1, [sp, #16]
 80057f8:	60c4      	str	r4, [r0, #12]
 80057fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fc:	f001 ff86 	bl	800770c <__mcmp>
 8005800:	42a0      	cmp	r0, r4
 8005802:	da6b      	bge.n	80058dc <_strtod_l+0x884>
 8005804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005806:	ea53 0308 	orrs.w	r3, r3, r8
 800580a:	f040 8091 	bne.w	8005930 <_strtod_l+0x8d8>
 800580e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 808c 	bne.w	8005930 <_strtod_l+0x8d8>
 8005818:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800581c:	0d1b      	lsrs	r3, r3, #20
 800581e:	051b      	lsls	r3, r3, #20
 8005820:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005824:	f240 8084 	bls.w	8005930 <_strtod_l+0x8d8>
 8005828:	f8db 3014 	ldr.w	r3, [fp, #20]
 800582c:	b91b      	cbnz	r3, 8005836 <_strtod_l+0x7de>
 800582e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	dd7c      	ble.n	8005930 <_strtod_l+0x8d8>
 8005836:	4659      	mov	r1, fp
 8005838:	2201      	movs	r2, #1
 800583a:	4650      	mov	r0, sl
 800583c:	f001 fef6 	bl	800762c <__lshift>
 8005840:	9904      	ldr	r1, [sp, #16]
 8005842:	4683      	mov	fp, r0
 8005844:	f001 ff62 	bl	800770c <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	dd71      	ble.n	8005930 <_strtod_l+0x8d8>
 800584c:	9905      	ldr	r1, [sp, #20]
 800584e:	464b      	mov	r3, r9
 8005850:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <_strtod_l+0x87c>)
 8005852:	2900      	cmp	r1, #0
 8005854:	f000 808c 	beq.w	8005970 <_strtod_l+0x918>
 8005858:	ea02 0109 	and.w	r1, r2, r9
 800585c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005860:	f300 8086 	bgt.w	8005970 <_strtod_l+0x918>
 8005864:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005868:	f77f aeaa 	ble.w	80055c0 <_strtod_l+0x568>
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <_strtod_l+0x880>)
 8005872:	2200      	movs	r2, #0
 8005874:	f7fc f9c0 	bl	8001bf8 <__aeabi_dmul>
 8005878:	460b      	mov	r3, r1
 800587a:	4303      	orrs	r3, r0
 800587c:	bf08      	it	eq
 800587e:	2322      	moveq	r3, #34	; 0x22
 8005880:	4680      	mov	r8, r0
 8005882:	4689      	mov	r9, r1
 8005884:	bf08      	it	eq
 8005886:	f8ca 3000 	streq.w	r3, [sl]
 800588a:	e62f      	b.n	80054ec <_strtod_l+0x494>
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	ea03 0808 	and.w	r8, r3, r8
 8005898:	e6e0      	b.n	800565c <_strtod_l+0x604>
 800589a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800589e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80058a2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80058a6:	35e2      	adds	r5, #226	; 0xe2
 80058a8:	fa07 f505 	lsl.w	r5, r7, r5
 80058ac:	970f      	str	r7, [sp, #60]	; 0x3c
 80058ae:	e747      	b.n	8005740 <_strtod_l+0x6e8>
 80058b0:	2301      	movs	r3, #1
 80058b2:	2500      	movs	r5, #0
 80058b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b6:	e743      	b.n	8005740 <_strtod_l+0x6e8>
 80058b8:	463a      	mov	r2, r7
 80058ba:	4650      	mov	r0, sl
 80058bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058be:	f001 feb5 	bl	800762c <__lshift>
 80058c2:	901a      	str	r0, [sp, #104]	; 0x68
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f af69 	bne.w	800579c <_strtod_l+0x744>
 80058ca:	e604      	b.n	80054d6 <_strtod_l+0x47e>
 80058cc:	0801a5d8 	.word	0x0801a5d8
 80058d0:	fffffc02 	.word	0xfffffc02
 80058d4:	7ff00000 	.word	0x7ff00000
 80058d8:	39500000 	.word	0x39500000
 80058dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80058e0:	d165      	bne.n	80059ae <_strtod_l+0x956>
 80058e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058e8:	b35a      	cbz	r2, 8005942 <_strtod_l+0x8ea>
 80058ea:	4a99      	ldr	r2, [pc, #612]	; (8005b50 <_strtod_l+0xaf8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d12b      	bne.n	8005948 <_strtod_l+0x8f0>
 80058f0:	9b05      	ldr	r3, [sp, #20]
 80058f2:	4641      	mov	r1, r8
 80058f4:	b303      	cbz	r3, 8005938 <_strtod_l+0x8e0>
 80058f6:	464a      	mov	r2, r9
 80058f8:	4b96      	ldr	r3, [pc, #600]	; (8005b54 <_strtod_l+0xafc>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	d81b      	bhi.n	800593e <_strtod_l+0x8e6>
 8005906:	0d1b      	lsrs	r3, r3, #20
 8005908:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	4299      	cmp	r1, r3
 8005912:	d119      	bne.n	8005948 <_strtod_l+0x8f0>
 8005914:	4b90      	ldr	r3, [pc, #576]	; (8005b58 <_strtod_l+0xb00>)
 8005916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005918:	429a      	cmp	r2, r3
 800591a:	d102      	bne.n	8005922 <_strtod_l+0x8ca>
 800591c:	3101      	adds	r1, #1
 800591e:	f43f adda 	beq.w	80054d6 <_strtod_l+0x47e>
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	4b8b      	ldr	r3, [pc, #556]	; (8005b54 <_strtod_l+0xafc>)
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	401a      	ands	r2, r3
 800592c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005930:	9b05      	ldr	r3, [sp, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d19a      	bne.n	800586c <_strtod_l+0x814>
 8005936:	e5d9      	b.n	80054ec <_strtod_l+0x494>
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	e7e8      	b.n	8005910 <_strtod_l+0x8b8>
 800593e:	4613      	mov	r3, r2
 8005940:	e7e6      	b.n	8005910 <_strtod_l+0x8b8>
 8005942:	ea53 0308 	orrs.w	r3, r3, r8
 8005946:	d081      	beq.n	800584c <_strtod_l+0x7f4>
 8005948:	b1e5      	cbz	r5, 8005984 <_strtod_l+0x92c>
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	421d      	tst	r5, r3
 800594e:	d0ef      	beq.n	8005930 <_strtod_l+0x8d8>
 8005950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005952:	4640      	mov	r0, r8
 8005954:	4649      	mov	r1, r9
 8005956:	9a05      	ldr	r2, [sp, #20]
 8005958:	b1c3      	cbz	r3, 800598c <_strtod_l+0x934>
 800595a:	f7ff fb59 	bl	8005010 <sulp>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005966:	f7fb ff91 	bl	800188c <__adddf3>
 800596a:	4680      	mov	r8, r0
 800596c:	4689      	mov	r9, r1
 800596e:	e7df      	b.n	8005930 <_strtod_l+0x8d8>
 8005970:	4013      	ands	r3, r2
 8005972:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005976:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800597a:	f04f 38ff 	mov.w	r8, #4294967295
 800597e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005982:	e7d5      	b.n	8005930 <_strtod_l+0x8d8>
 8005984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005986:	ea13 0f08 	tst.w	r3, r8
 800598a:	e7e0      	b.n	800594e <_strtod_l+0x8f6>
 800598c:	f7ff fb40 	bl	8005010 <sulp>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005998:	f7fb ff76 	bl	8001888 <__aeabi_dsub>
 800599c:	2200      	movs	r2, #0
 800599e:	2300      	movs	r3, #0
 80059a0:	4680      	mov	r8, r0
 80059a2:	4689      	mov	r9, r1
 80059a4:	f7fc fb90 	bl	80020c8 <__aeabi_dcmpeq>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0c1      	beq.n	8005930 <_strtod_l+0x8d8>
 80059ac:	e608      	b.n	80055c0 <_strtod_l+0x568>
 80059ae:	4658      	mov	r0, fp
 80059b0:	9904      	ldr	r1, [sp, #16]
 80059b2:	f002 f829 	bl	8007a08 <__ratio>
 80059b6:	2200      	movs	r2, #0
 80059b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	f7fc fb96 	bl	80020f0 <__aeabi_dcmple>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d070      	beq.n	8005aaa <_strtod_l+0xa52>
 80059c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d042      	beq.n	8005a54 <_strtod_l+0x9fc>
 80059ce:	2600      	movs	r6, #0
 80059d0:	4f62      	ldr	r7, [pc, #392]	; (8005b5c <_strtod_l+0xb04>)
 80059d2:	4d62      	ldr	r5, [pc, #392]	; (8005b5c <_strtod_l+0xb04>)
 80059d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059da:	0d1b      	lsrs	r3, r3, #20
 80059dc:	051b      	lsls	r3, r3, #20
 80059de:	930f      	str	r3, [sp, #60]	; 0x3c
 80059e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059e2:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <_strtod_l+0xb08>)
 80059e4:	429a      	cmp	r2, r3
 80059e6:	f040 80c3 	bne.w	8005b70 <_strtod_l+0xb18>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	4640      	mov	r0, r8
 80059ee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80059f2:	4649      	mov	r1, r9
 80059f4:	f001 ff32 	bl	800785c <__ulp>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fc f8fa 	bl	8001bf8 <__aeabi_dmul>
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	f7fb ff40 	bl	800188c <__adddf3>
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4951      	ldr	r1, [pc, #324]	; (8005b54 <_strtod_l+0xafc>)
 8005a10:	4a54      	ldr	r2, [pc, #336]	; (8005b64 <_strtod_l+0xb0c>)
 8005a12:	4019      	ands	r1, r3
 8005a14:	4291      	cmp	r1, r2
 8005a16:	4680      	mov	r8, r0
 8005a18:	d95d      	bls.n	8005ad6 <_strtod_l+0xa7e>
 8005a1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	; (8005b58 <_strtod_l+0xb00>)
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d103      	bne.n	8005a2a <_strtod_l+0x9d2>
 8005a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a24:	3301      	adds	r3, #1
 8005a26:	f43f ad56 	beq.w	80054d6 <_strtod_l+0x47e>
 8005a2a:	f04f 38ff 	mov.w	r8, #4294967295
 8005a2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005b58 <_strtod_l+0xb00>
 8005a32:	4650      	mov	r0, sl
 8005a34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a36:	f001 fbe1 	bl	80071fc <_Bfree>
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	9906      	ldr	r1, [sp, #24]
 8005a3e:	f001 fbdd 	bl	80071fc <_Bfree>
 8005a42:	4650      	mov	r0, sl
 8005a44:	9904      	ldr	r1, [sp, #16]
 8005a46:	f001 fbd9 	bl	80071fc <_Bfree>
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	4650      	mov	r0, sl
 8005a4e:	f001 fbd5 	bl	80071fc <_Bfree>
 8005a52:	e627      	b.n	80056a4 <_strtod_l+0x64c>
 8005a54:	f1b8 0f00 	cmp.w	r8, #0
 8005a58:	d119      	bne.n	8005a8e <_strtod_l+0xa36>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a60:	b9e3      	cbnz	r3, 8005a9c <_strtod_l+0xa44>
 8005a62:	2200      	movs	r2, #0
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <_strtod_l+0xb04>)
 8005a6a:	f7fc fb37 	bl	80020dc <__aeabi_dcmplt>
 8005a6e:	b9c8      	cbnz	r0, 8005aa4 <_strtod_l+0xa4c>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <_strtod_l+0xb10>)
 8005a78:	f7fc f8be 	bl	8001bf8 <__aeabi_dmul>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	460d      	mov	r5, r1
 8005a80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a84:	9416      	str	r4, [sp, #88]	; 0x58
 8005a86:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a88:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005a8c:	e7a2      	b.n	80059d4 <_strtod_l+0x97c>
 8005a8e:	f1b8 0f01 	cmp.w	r8, #1
 8005a92:	d103      	bne.n	8005a9c <_strtod_l+0xa44>
 8005a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f43f ad92 	beq.w	80055c0 <_strtod_l+0x568>
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	4f32      	ldr	r7, [pc, #200]	; (8005b6c <_strtod_l+0xb14>)
 8005aa2:	e796      	b.n	80059d2 <_strtod_l+0x97a>
 8005aa4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005aa6:	4d30      	ldr	r5, [pc, #192]	; (8005b68 <_strtod_l+0xb10>)
 8005aa8:	e7ea      	b.n	8005a80 <_strtod_l+0xa28>
 8005aaa:	4b2f      	ldr	r3, [pc, #188]	; (8005b68 <_strtod_l+0xb10>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	4630      	mov	r0, r6
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	f7fc f8a1 	bl	8001bf8 <__aeabi_dmul>
 8005ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab8:	4604      	mov	r4, r0
 8005aba:	460d      	mov	r5, r1
 8005abc:	b933      	cbnz	r3, 8005acc <_strtod_l+0xa74>
 8005abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ac2:	9010      	str	r0, [sp, #64]	; 0x40
 8005ac4:	9311      	str	r3, [sp, #68]	; 0x44
 8005ac6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005aca:	e783      	b.n	80059d4 <_strtod_l+0x97c>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ad4:	e7f7      	b.n	8005ac6 <_strtod_l+0xa6e>
 8005ad6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005ada:	9b05      	ldr	r3, [sp, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1a8      	bne.n	8005a32 <_strtod_l+0x9da>
 8005ae0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ae6:	0d1b      	lsrs	r3, r3, #20
 8005ae8:	051b      	lsls	r3, r3, #20
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d1a1      	bne.n	8005a32 <_strtod_l+0x9da>
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fc fc3f 	bl	8002374 <__aeabi_d2lz>
 8005af6:	f7fc f851 	bl	8001b9c <__aeabi_l2d>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fb fec1 	bl	8001888 <__aeabi_dsub>
 8005b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b0c:	ea43 0308 	orr.w	r3, r3, r8
 8005b10:	4313      	orrs	r3, r2
 8005b12:	4604      	mov	r4, r0
 8005b14:	460d      	mov	r5, r1
 8005b16:	d066      	beq.n	8005be6 <_strtod_l+0xb8e>
 8005b18:	a309      	add	r3, pc, #36	; (adr r3, 8005b40 <_strtod_l+0xae8>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fc fadd 	bl	80020dc <__aeabi_dcmplt>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f47f ace2 	bne.w	80054ec <_strtod_l+0x494>
 8005b28:	a307      	add	r3, pc, #28	; (adr r3, 8005b48 <_strtod_l+0xaf0>)
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fc faf1 	bl	8002118 <__aeabi_dcmpgt>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f43f af7b 	beq.w	8005a32 <_strtod_l+0x9da>
 8005b3c:	e4d6      	b.n	80054ec <_strtod_l+0x494>
 8005b3e:	bf00      	nop
 8005b40:	94a03595 	.word	0x94a03595
 8005b44:	3fdfffff 	.word	0x3fdfffff
 8005b48:	35afe535 	.word	0x35afe535
 8005b4c:	3fe00000 	.word	0x3fe00000
 8005b50:	000fffff 	.word	0x000fffff
 8005b54:	7ff00000 	.word	0x7ff00000
 8005b58:	7fefffff 	.word	0x7fefffff
 8005b5c:	3ff00000 	.word	0x3ff00000
 8005b60:	7fe00000 	.word	0x7fe00000
 8005b64:	7c9fffff 	.word	0x7c9fffff
 8005b68:	3fe00000 	.word	0x3fe00000
 8005b6c:	bff00000 	.word	0xbff00000
 8005b70:	9b05      	ldr	r3, [sp, #20]
 8005b72:	b313      	cbz	r3, 8005bba <_strtod_l+0xb62>
 8005b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b7a:	d81e      	bhi.n	8005bba <_strtod_l+0xb62>
 8005b7c:	a326      	add	r3, pc, #152	; (adr r3, 8005c18 <_strtod_l+0xbc0>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	4620      	mov	r0, r4
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fc fab3 	bl	80020f0 <__aeabi_dcmple>
 8005b8a:	b190      	cbz	r0, 8005bb2 <_strtod_l+0xb5a>
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f7fc fb0a 	bl	80021a8 <__aeabi_d2uiz>
 8005b94:	2801      	cmp	r0, #1
 8005b96:	bf38      	it	cc
 8005b98:	2001      	movcc	r0, #1
 8005b9a:	f7fb ffb3 	bl	8001b04 <__aeabi_ui2d>
 8005b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	b9d3      	cbnz	r3, 8005bdc <_strtod_l+0xb84>
 8005ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005baa:	9012      	str	r0, [sp, #72]	; 0x48
 8005bac:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bb4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005bb8:	1a9f      	subs	r7, r3, r2
 8005bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bbe:	f001 fe4d 	bl	800785c <__ulp>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fc f815 	bl	8001bf8 <__aeabi_dmul>
 8005bce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bd2:	f7fb fe5b 	bl	800188c <__adddf3>
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	4689      	mov	r9, r1
 8005bda:	e77e      	b.n	8005ada <_strtod_l+0xa82>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005be4:	e7e3      	b.n	8005bae <_strtod_l+0xb56>
 8005be6:	a30e      	add	r3, pc, #56	; (adr r3, 8005c20 <_strtod_l+0xbc8>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fc fa76 	bl	80020dc <__aeabi_dcmplt>
 8005bf0:	e7a1      	b.n	8005b36 <_strtod_l+0xade>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bf8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	f7ff ba71 	b.w	80050e2 <_strtod_l+0x8a>
 8005c00:	2a65      	cmp	r2, #101	; 0x65
 8005c02:	f43f ab63 	beq.w	80052cc <_strtod_l+0x274>
 8005c06:	2a45      	cmp	r2, #69	; 0x45
 8005c08:	f43f ab60 	beq.w	80052cc <_strtod_l+0x274>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f7ff bb95 	b.w	800533c <_strtod_l+0x2e4>
 8005c12:	bf00      	nop
 8005c14:	f3af 8000 	nop.w
 8005c18:	ffc00000 	.word	0xffc00000
 8005c1c:	41dfffff 	.word	0x41dfffff
 8005c20:	94a03595 	.word	0x94a03595
 8005c24:	3fcfffff 	.word	0x3fcfffff

08005c28 <_strtod_r>:
 8005c28:	4b01      	ldr	r3, [pc, #4]	; (8005c30 <_strtod_r+0x8>)
 8005c2a:	f7ff ba15 	b.w	8005058 <_strtod_l>
 8005c2e:	bf00      	nop
 8005c30:	20000074 	.word	0x20000074

08005c34 <_strtol_l.constprop.0>:
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	d001      	beq.n	8005c42 <_strtol_l.constprop.0+0xe>
 8005c3e:	2b24      	cmp	r3, #36	; 0x24
 8005c40:	d906      	bls.n	8005c50 <_strtol_l.constprop.0+0x1c>
 8005c42:	f7fe fb21 	bl	8004288 <__errno>
 8005c46:	2316      	movs	r3, #22
 8005c48:	6003      	str	r3, [r0, #0]
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c50:	460d      	mov	r5, r1
 8005c52:	4f35      	ldr	r7, [pc, #212]	; (8005d28 <_strtol_l.constprop.0+0xf4>)
 8005c54:	4628      	mov	r0, r5
 8005c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5a:	5de6      	ldrb	r6, [r4, r7]
 8005c5c:	f016 0608 	ands.w	r6, r6, #8
 8005c60:	d1f8      	bne.n	8005c54 <_strtol_l.constprop.0+0x20>
 8005c62:	2c2d      	cmp	r4, #45	; 0x2d
 8005c64:	d12f      	bne.n	8005cc6 <_strtol_l.constprop.0+0x92>
 8005c66:	2601      	movs	r6, #1
 8005c68:	782c      	ldrb	r4, [r5, #0]
 8005c6a:	1c85      	adds	r5, r0, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d057      	beq.n	8005d20 <_strtol_l.constprop.0+0xec>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d109      	bne.n	8005c88 <_strtol_l.constprop.0+0x54>
 8005c74:	2c30      	cmp	r4, #48	; 0x30
 8005c76:	d107      	bne.n	8005c88 <_strtol_l.constprop.0+0x54>
 8005c78:	7828      	ldrb	r0, [r5, #0]
 8005c7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005c7e:	2858      	cmp	r0, #88	; 0x58
 8005c80:	d149      	bne.n	8005d16 <_strtol_l.constprop.0+0xe2>
 8005c82:	2310      	movs	r3, #16
 8005c84:	786c      	ldrb	r4, [r5, #1]
 8005c86:	3502      	adds	r5, #2
 8005c88:	2700      	movs	r7, #0
 8005c8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005c8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005c92:	fbbe f9f3 	udiv	r9, lr, r3
 8005c96:	4638      	mov	r0, r7
 8005c98:	fb03 ea19 	mls	sl, r3, r9, lr
 8005c9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ca0:	f1bc 0f09 	cmp.w	ip, #9
 8005ca4:	d814      	bhi.n	8005cd0 <_strtol_l.constprop.0+0x9c>
 8005ca6:	4664      	mov	r4, ip
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	dd22      	ble.n	8005cf2 <_strtol_l.constprop.0+0xbe>
 8005cac:	2f00      	cmp	r7, #0
 8005cae:	db1d      	blt.n	8005cec <_strtol_l.constprop.0+0xb8>
 8005cb0:	4581      	cmp	r9, r0
 8005cb2:	d31b      	bcc.n	8005cec <_strtol_l.constprop.0+0xb8>
 8005cb4:	d101      	bne.n	8005cba <_strtol_l.constprop.0+0x86>
 8005cb6:	45a2      	cmp	sl, r4
 8005cb8:	db18      	blt.n	8005cec <_strtol_l.constprop.0+0xb8>
 8005cba:	2701      	movs	r7, #1
 8005cbc:	fb00 4003 	mla	r0, r0, r3, r4
 8005cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cc4:	e7ea      	b.n	8005c9c <_strtol_l.constprop.0+0x68>
 8005cc6:	2c2b      	cmp	r4, #43	; 0x2b
 8005cc8:	bf04      	itt	eq
 8005cca:	782c      	ldrbeq	r4, [r5, #0]
 8005ccc:	1c85      	addeq	r5, r0, #2
 8005cce:	e7cd      	b.n	8005c6c <_strtol_l.constprop.0+0x38>
 8005cd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005cd4:	f1bc 0f19 	cmp.w	ip, #25
 8005cd8:	d801      	bhi.n	8005cde <_strtol_l.constprop.0+0xaa>
 8005cda:	3c37      	subs	r4, #55	; 0x37
 8005cdc:	e7e4      	b.n	8005ca8 <_strtol_l.constprop.0+0x74>
 8005cde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ce2:	f1bc 0f19 	cmp.w	ip, #25
 8005ce6:	d804      	bhi.n	8005cf2 <_strtol_l.constprop.0+0xbe>
 8005ce8:	3c57      	subs	r4, #87	; 0x57
 8005cea:	e7dd      	b.n	8005ca8 <_strtol_l.constprop.0+0x74>
 8005cec:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf0:	e7e6      	b.n	8005cc0 <_strtol_l.constprop.0+0x8c>
 8005cf2:	2f00      	cmp	r7, #0
 8005cf4:	da07      	bge.n	8005d06 <_strtol_l.constprop.0+0xd2>
 8005cf6:	2322      	movs	r3, #34	; 0x22
 8005cf8:	4670      	mov	r0, lr
 8005cfa:	f8c8 3000 	str.w	r3, [r8]
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d0a4      	beq.n	8005c4c <_strtol_l.constprop.0+0x18>
 8005d02:	1e69      	subs	r1, r5, #1
 8005d04:	e005      	b.n	8005d12 <_strtol_l.constprop.0+0xde>
 8005d06:	b106      	cbz	r6, 8005d0a <_strtol_l.constprop.0+0xd6>
 8005d08:	4240      	negs	r0, r0
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d09e      	beq.n	8005c4c <_strtol_l.constprop.0+0x18>
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	d1f7      	bne.n	8005d02 <_strtol_l.constprop.0+0xce>
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	e79a      	b.n	8005c4c <_strtol_l.constprop.0+0x18>
 8005d16:	2430      	movs	r4, #48	; 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1b5      	bne.n	8005c88 <_strtol_l.constprop.0+0x54>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	e7b3      	b.n	8005c88 <_strtol_l.constprop.0+0x54>
 8005d20:	2c30      	cmp	r4, #48	; 0x30
 8005d22:	d0a9      	beq.n	8005c78 <_strtol_l.constprop.0+0x44>
 8005d24:	230a      	movs	r3, #10
 8005d26:	e7af      	b.n	8005c88 <_strtol_l.constprop.0+0x54>
 8005d28:	0801a601 	.word	0x0801a601

08005d2c <_strtol_r>:
 8005d2c:	f7ff bf82 	b.w	8005c34 <_strtol_l.constprop.0>

08005d30 <strtol>:
 8005d30:	4613      	mov	r3, r2
 8005d32:	460a      	mov	r2, r1
 8005d34:	4601      	mov	r1, r0
 8005d36:	4802      	ldr	r0, [pc, #8]	; (8005d40 <strtol+0x10>)
 8005d38:	6800      	ldr	r0, [r0, #0]
 8005d3a:	f7ff bf7b 	b.w	8005c34 <_strtol_l.constprop.0>
 8005d3e:	bf00      	nop
 8005d40:	2000000c 	.word	0x2000000c

08005d44 <quorem>:
 8005d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	6903      	ldr	r3, [r0, #16]
 8005d4a:	690c      	ldr	r4, [r1, #16]
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	f2c0 8082 	blt.w	8005e58 <quorem+0x114>
 8005d54:	3c01      	subs	r4, #1
 8005d56:	f100 0514 	add.w	r5, r0, #20
 8005d5a:	f101 0814 	add.w	r8, r1, #20
 8005d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d7c:	d331      	bcc.n	8005de2 <quorem+0x9e>
 8005d7e:	f04f 0e00 	mov.w	lr, #0
 8005d82:	4640      	mov	r0, r8
 8005d84:	46ac      	mov	ip, r5
 8005d86:	46f2      	mov	sl, lr
 8005d88:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d8c:	b293      	uxth	r3, r2
 8005d8e:	fb06 e303 	mla	r3, r6, r3, lr
 8005d92:	0c12      	lsrs	r2, r2, #16
 8005d94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	fb06 e202 	mla	r2, r6, r2, lr
 8005d9e:	ebaa 0303 	sub.w	r3, sl, r3
 8005da2:	f8dc a000 	ldr.w	sl, [ip]
 8005da6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005daa:	fa1f fa8a 	uxth.w	sl, sl
 8005dae:	4453      	add	r3, sl
 8005db0:	f8dc a000 	ldr.w	sl, [ip]
 8005db4:	b292      	uxth	r2, r2
 8005db6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dc4:	4581      	cmp	r9, r0
 8005dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dca:	f84c 3b04 	str.w	r3, [ip], #4
 8005dce:	d2db      	bcs.n	8005d88 <quorem+0x44>
 8005dd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005dd4:	b92b      	cbnz	r3, 8005de2 <quorem+0x9e>
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	429d      	cmp	r5, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	d32f      	bcc.n	8005e40 <quorem+0xfc>
 8005de0:	613c      	str	r4, [r7, #16]
 8005de2:	4638      	mov	r0, r7
 8005de4:	f001 fc92 	bl	800770c <__mcmp>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	db25      	blt.n	8005e38 <quorem+0xf4>
 8005dec:	4628      	mov	r0, r5
 8005dee:	f04f 0c00 	mov.w	ip, #0
 8005df2:	3601      	adds	r6, #1
 8005df4:	f858 1b04 	ldr.w	r1, [r8], #4
 8005df8:	f8d0 e000 	ldr.w	lr, [r0]
 8005dfc:	b28b      	uxth	r3, r1
 8005dfe:	ebac 0303 	sub.w	r3, ip, r3
 8005e02:	fa1f f28e 	uxth.w	r2, lr
 8005e06:	4413      	add	r3, r2
 8005e08:	0c0a      	lsrs	r2, r1, #16
 8005e0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e18:	45c1      	cmp	r9, r8
 8005e1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e1e:	f840 3b04 	str.w	r3, [r0], #4
 8005e22:	d2e7      	bcs.n	8005df4 <quorem+0xb0>
 8005e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e2c:	b922      	cbnz	r2, 8005e38 <quorem+0xf4>
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	429d      	cmp	r5, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	d30a      	bcc.n	8005e4c <quorem+0x108>
 8005e36:	613c      	str	r4, [r7, #16]
 8005e38:	4630      	mov	r0, r6
 8005e3a:	b003      	add	sp, #12
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	3b04      	subs	r3, #4
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	d1cb      	bne.n	8005de0 <quorem+0x9c>
 8005e48:	3c01      	subs	r4, #1
 8005e4a:	e7c6      	b.n	8005dda <quorem+0x96>
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	d1f0      	bne.n	8005e36 <quorem+0xf2>
 8005e54:	3c01      	subs	r4, #1
 8005e56:	e7eb      	b.n	8005e30 <quorem+0xec>
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7ee      	b.n	8005e3a <quorem+0xf6>
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_dtoa_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	461f      	mov	r7, r3
 8005e68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e6a:	b099      	sub	sp, #100	; 0x64
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005e76:	b974      	cbnz	r4, 8005e96 <_dtoa_r+0x36>
 8005e78:	2010      	movs	r0, #16
 8005e7a:	f001 f949 	bl	8007110 <malloc>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6268      	str	r0, [r5, #36]	; 0x24
 8005e82:	b920      	cbnz	r0, 8005e8e <_dtoa_r+0x2e>
 8005e84:	21ea      	movs	r1, #234	; 0xea
 8005e86:	4ba8      	ldr	r3, [pc, #672]	; (8006128 <_dtoa_r+0x2c8>)
 8005e88:	48a8      	ldr	r0, [pc, #672]	; (800612c <_dtoa_r+0x2cc>)
 8005e8a:	f002 f8b3 	bl	8007ff4 <__assert_func>
 8005e8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e92:	6004      	str	r4, [r0, #0]
 8005e94:	60c4      	str	r4, [r0, #12]
 8005e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e98:	6819      	ldr	r1, [r3, #0]
 8005e9a:	b151      	cbz	r1, 8005eb2 <_dtoa_r+0x52>
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4093      	lsls	r3, r2
 8005ea2:	604a      	str	r2, [r1, #4]
 8005ea4:	608b      	str	r3, [r1, #8]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f001 f9a8 	bl	80071fc <_Bfree>
 8005eac:	2200      	movs	r2, #0
 8005eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	1e3b      	subs	r3, r7, #0
 8005eb4:	bfaf      	iteee	ge
 8005eb6:	2300      	movge	r3, #0
 8005eb8:	2201      	movlt	r2, #1
 8005eba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	9305      	strlt	r3, [sp, #20]
 8005ec0:	bfa8      	it	ge
 8005ec2:	f8c8 3000 	strge.w	r3, [r8]
 8005ec6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005eca:	4b99      	ldr	r3, [pc, #612]	; (8006130 <_dtoa_r+0x2d0>)
 8005ecc:	bfb8      	it	lt
 8005ece:	f8c8 2000 	strlt.w	r2, [r8]
 8005ed2:	ea33 0309 	bics.w	r3, r3, r9
 8005ed6:	d119      	bne.n	8005f0c <_dtoa_r+0xac>
 8005ed8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005edc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	4333      	orrs	r3, r6
 8005ee6:	f000 857f 	beq.w	80069e8 <_dtoa_r+0xb88>
 8005eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eec:	b953      	cbnz	r3, 8005f04 <_dtoa_r+0xa4>
 8005eee:	4b91      	ldr	r3, [pc, #580]	; (8006134 <_dtoa_r+0x2d4>)
 8005ef0:	e022      	b.n	8005f38 <_dtoa_r+0xd8>
 8005ef2:	4b91      	ldr	r3, [pc, #580]	; (8006138 <_dtoa_r+0x2d8>)
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	9803      	ldr	r0, [sp, #12]
 8005efe:	b019      	add	sp, #100	; 0x64
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	4b8b      	ldr	r3, [pc, #556]	; (8006134 <_dtoa_r+0x2d4>)
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	3303      	adds	r3, #3
 8005f0a:	e7f5      	b.n	8005ef8 <_dtoa_r+0x98>
 8005f0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f7fc f8d4 	bl	80020c8 <__aeabi_dcmpeq>
 8005f20:	4680      	mov	r8, r0
 8005f22:	b158      	cbz	r0, 8005f3c <_dtoa_r+0xdc>
 8005f24:	2301      	movs	r3, #1
 8005f26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8558 	beq.w	80069e2 <_dtoa_r+0xb82>
 8005f32:	4882      	ldr	r0, [pc, #520]	; (800613c <_dtoa_r+0x2dc>)
 8005f34:	6018      	str	r0, [r3, #0]
 8005f36:	1e43      	subs	r3, r0, #1
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	e7df      	b.n	8005efc <_dtoa_r+0x9c>
 8005f3c:	ab16      	add	r3, sp, #88	; 0x58
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	ab17      	add	r3, sp, #92	; 0x5c
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4628      	mov	r0, r5
 8005f46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f4a:	f001 fd01 	bl	8007950 <__d2b>
 8005f4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f52:	4683      	mov	fp, r0
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	d07f      	beq.n	8006058 <_dtoa_r+0x1f8>
 8005f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005f6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005f6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005f72:	2200      	movs	r2, #0
 8005f74:	4b72      	ldr	r3, [pc, #456]	; (8006140 <_dtoa_r+0x2e0>)
 8005f76:	f7fb fc87 	bl	8001888 <__aeabi_dsub>
 8005f7a:	a365      	add	r3, pc, #404	; (adr r3, 8006110 <_dtoa_r+0x2b0>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fb fe3a 	bl	8001bf8 <__aeabi_dmul>
 8005f84:	a364      	add	r3, pc, #400	; (adr r3, 8006118 <_dtoa_r+0x2b8>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fb fc7f 	bl	800188c <__adddf3>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	4620      	mov	r0, r4
 8005f92:	460f      	mov	r7, r1
 8005f94:	f7fb fdc6 	bl	8001b24 <__aeabi_i2d>
 8005f98:	a361      	add	r3, pc, #388	; (adr r3, 8006120 <_dtoa_r+0x2c0>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fb fe2b 	bl	8001bf8 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	4639      	mov	r1, r7
 8005faa:	f7fb fc6f 	bl	800188c <__adddf3>
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	f7fc f8d1 	bl	8002158 <__aeabi_d2iz>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4682      	mov	sl, r0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fc f88c 	bl	80020dc <__aeabi_dcmplt>
 8005fc4:	b148      	cbz	r0, 8005fda <_dtoa_r+0x17a>
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fb fdac 	bl	8001b24 <__aeabi_i2d>
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	f7fc f87a 	bl	80020c8 <__aeabi_dcmpeq>
 8005fd4:	b908      	cbnz	r0, 8005fda <_dtoa_r+0x17a>
 8005fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fda:	f1ba 0f16 	cmp.w	sl, #22
 8005fde:	d858      	bhi.n	8006092 <_dtoa_r+0x232>
 8005fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fe4:	4b57      	ldr	r3, [pc, #348]	; (8006144 <_dtoa_r+0x2e4>)
 8005fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fc f875 	bl	80020dc <__aeabi_dcmplt>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d04f      	beq.n	8006096 <_dtoa_r+0x236>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ffe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006000:	1b1c      	subs	r4, r3, r4
 8006002:	1e63      	subs	r3, r4, #1
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
 8006006:	bf49      	itett	mi
 8006008:	f1c4 0301 	rsbmi	r3, r4, #1
 800600c:	2300      	movpl	r3, #0
 800600e:	9306      	strmi	r3, [sp, #24]
 8006010:	2300      	movmi	r3, #0
 8006012:	bf54      	ite	pl
 8006014:	9306      	strpl	r3, [sp, #24]
 8006016:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006018:	f1ba 0f00 	cmp.w	sl, #0
 800601c:	db3d      	blt.n	800609a <_dtoa_r+0x23a>
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006024:	4453      	add	r3, sl
 8006026:	9309      	str	r3, [sp, #36]	; 0x24
 8006028:	2300      	movs	r3, #0
 800602a:	930a      	str	r3, [sp, #40]	; 0x28
 800602c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800602e:	2b09      	cmp	r3, #9
 8006030:	f200 808c 	bhi.w	800614c <_dtoa_r+0x2ec>
 8006034:	2b05      	cmp	r3, #5
 8006036:	bfc4      	itt	gt
 8006038:	3b04      	subgt	r3, #4
 800603a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800603c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603e:	bfc8      	it	gt
 8006040:	2400      	movgt	r4, #0
 8006042:	f1a3 0302 	sub.w	r3, r3, #2
 8006046:	bfd8      	it	le
 8006048:	2401      	movle	r4, #1
 800604a:	2b03      	cmp	r3, #3
 800604c:	f200 808a 	bhi.w	8006164 <_dtoa_r+0x304>
 8006050:	e8df f003 	tbb	[pc, r3]
 8006054:	5b4d4f2d 	.word	0x5b4d4f2d
 8006058:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800605c:	441c      	add	r4, r3
 800605e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006062:	2b20      	cmp	r3, #32
 8006064:	bfc3      	ittte	gt
 8006066:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800606a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800606e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006072:	f1c3 0320 	rsble	r3, r3, #32
 8006076:	bfc6      	itte	gt
 8006078:	fa26 f000 	lsrgt.w	r0, r6, r0
 800607c:	4318      	orrgt	r0, r3
 800607e:	fa06 f003 	lslle.w	r0, r6, r3
 8006082:	f7fb fd3f 	bl	8001b04 <__aeabi_ui2d>
 8006086:	2301      	movs	r3, #1
 8006088:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800608c:	3c01      	subs	r4, #1
 800608e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006090:	e76f      	b.n	8005f72 <_dtoa_r+0x112>
 8006092:	2301      	movs	r3, #1
 8006094:	e7b2      	b.n	8005ffc <_dtoa_r+0x19c>
 8006096:	900f      	str	r0, [sp, #60]	; 0x3c
 8006098:	e7b1      	b.n	8005ffe <_dtoa_r+0x19e>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	eba3 030a 	sub.w	r3, r3, sl
 80060a0:	9306      	str	r3, [sp, #24]
 80060a2:	f1ca 0300 	rsb	r3, sl, #0
 80060a6:	930a      	str	r3, [sp, #40]	; 0x28
 80060a8:	2300      	movs	r3, #0
 80060aa:	930e      	str	r3, [sp, #56]	; 0x38
 80060ac:	e7be      	b.n	800602c <_dtoa_r+0x1cc>
 80060ae:	2300      	movs	r3, #0
 80060b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dc58      	bgt.n	800616a <_dtoa_r+0x30a>
 80060b8:	f04f 0901 	mov.w	r9, #1
 80060bc:	464b      	mov	r3, r9
 80060be:	f8cd 9020 	str.w	r9, [sp, #32]
 80060c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80060c6:	2200      	movs	r2, #0
 80060c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80060ca:	6042      	str	r2, [r0, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	f102 0614 	add.w	r6, r2, #20
 80060d2:	429e      	cmp	r6, r3
 80060d4:	6841      	ldr	r1, [r0, #4]
 80060d6:	d94e      	bls.n	8006176 <_dtoa_r+0x316>
 80060d8:	4628      	mov	r0, r5
 80060da:	f001 f84f 	bl	800717c <_Balloc>
 80060de:	9003      	str	r0, [sp, #12]
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d14c      	bne.n	800617e <_dtoa_r+0x31e>
 80060e4:	4602      	mov	r2, r0
 80060e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <_dtoa_r+0x2e8>)
 80060ec:	e6cc      	b.n	8005e88 <_dtoa_r+0x28>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7de      	b.n	80060b0 <_dtoa_r+0x250>
 80060f2:	2300      	movs	r3, #0
 80060f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060f8:	eb0a 0903 	add.w	r9, sl, r3
 80060fc:	f109 0301 	add.w	r3, r9, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	9308      	str	r3, [sp, #32]
 8006104:	bfb8      	it	lt
 8006106:	2301      	movlt	r3, #1
 8006108:	e7dd      	b.n	80060c6 <_dtoa_r+0x266>
 800610a:	2301      	movs	r3, #1
 800610c:	e7f2      	b.n	80060f4 <_dtoa_r+0x294>
 800610e:	bf00      	nop
 8006110:	636f4361 	.word	0x636f4361
 8006114:	3fd287a7 	.word	0x3fd287a7
 8006118:	8b60c8b3 	.word	0x8b60c8b3
 800611c:	3fc68a28 	.word	0x3fc68a28
 8006120:	509f79fb 	.word	0x509f79fb
 8006124:	3fd34413 	.word	0x3fd34413
 8006128:	0801a70e 	.word	0x0801a70e
 800612c:	0801a725 	.word	0x0801a725
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	0801a70a 	.word	0x0801a70a
 8006138:	0801a701 	.word	0x0801a701
 800613c:	0801a581 	.word	0x0801a581
 8006140:	3ff80000 	.word	0x3ff80000
 8006144:	0801a8f8 	.word	0x0801a8f8
 8006148:	0801a7a3 	.word	0x0801a7a3
 800614c:	2401      	movs	r4, #1
 800614e:	2300      	movs	r3, #0
 8006150:	940b      	str	r4, [sp, #44]	; 0x2c
 8006152:	9322      	str	r3, [sp, #136]	; 0x88
 8006154:	f04f 39ff 	mov.w	r9, #4294967295
 8006158:	2200      	movs	r2, #0
 800615a:	2312      	movs	r3, #18
 800615c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006160:	9223      	str	r2, [sp, #140]	; 0x8c
 8006162:	e7b0      	b.n	80060c6 <_dtoa_r+0x266>
 8006164:	2301      	movs	r3, #1
 8006166:	930b      	str	r3, [sp, #44]	; 0x2c
 8006168:	e7f4      	b.n	8006154 <_dtoa_r+0x2f4>
 800616a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800616e:	464b      	mov	r3, r9
 8006170:	f8cd 9020 	str.w	r9, [sp, #32]
 8006174:	e7a7      	b.n	80060c6 <_dtoa_r+0x266>
 8006176:	3101      	adds	r1, #1
 8006178:	6041      	str	r1, [r0, #4]
 800617a:	0052      	lsls	r2, r2, #1
 800617c:	e7a7      	b.n	80060ce <_dtoa_r+0x26e>
 800617e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006180:	9a03      	ldr	r2, [sp, #12]
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	2b0e      	cmp	r3, #14
 8006188:	f200 80a8 	bhi.w	80062dc <_dtoa_r+0x47c>
 800618c:	2c00      	cmp	r4, #0
 800618e:	f000 80a5 	beq.w	80062dc <_dtoa_r+0x47c>
 8006192:	f1ba 0f00 	cmp.w	sl, #0
 8006196:	dd34      	ble.n	8006202 <_dtoa_r+0x3a2>
 8006198:	4a9a      	ldr	r2, [pc, #616]	; (8006404 <_dtoa_r+0x5a4>)
 800619a:	f00a 030f 	and.w	r3, sl, #15
 800619e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80061a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80061ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80061b2:	d016      	beq.n	80061e2 <_dtoa_r+0x382>
 80061b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061b8:	4b93      	ldr	r3, [pc, #588]	; (8006408 <_dtoa_r+0x5a8>)
 80061ba:	2703      	movs	r7, #3
 80061bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061c0:	f7fb fe44 	bl	8001e4c <__aeabi_ddiv>
 80061c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c8:	f004 040f 	and.w	r4, r4, #15
 80061cc:	4e8e      	ldr	r6, [pc, #568]	; (8006408 <_dtoa_r+0x5a8>)
 80061ce:	b954      	cbnz	r4, 80061e6 <_dtoa_r+0x386>
 80061d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d8:	f7fb fe38 	bl	8001e4c <__aeabi_ddiv>
 80061dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e0:	e029      	b.n	8006236 <_dtoa_r+0x3d6>
 80061e2:	2702      	movs	r7, #2
 80061e4:	e7f2      	b.n	80061cc <_dtoa_r+0x36c>
 80061e6:	07e1      	lsls	r1, r4, #31
 80061e8:	d508      	bpl.n	80061fc <_dtoa_r+0x39c>
 80061ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061f2:	f7fb fd01 	bl	8001bf8 <__aeabi_dmul>
 80061f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061fa:	3701      	adds	r7, #1
 80061fc:	1064      	asrs	r4, r4, #1
 80061fe:	3608      	adds	r6, #8
 8006200:	e7e5      	b.n	80061ce <_dtoa_r+0x36e>
 8006202:	f000 80a5 	beq.w	8006350 <_dtoa_r+0x4f0>
 8006206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800620a:	f1ca 0400 	rsb	r4, sl, #0
 800620e:	4b7d      	ldr	r3, [pc, #500]	; (8006404 <_dtoa_r+0x5a4>)
 8006210:	f004 020f 	and.w	r2, r4, #15
 8006214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7fb fcec 	bl	8001bf8 <__aeabi_dmul>
 8006220:	2702      	movs	r7, #2
 8006222:	2300      	movs	r3, #0
 8006224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006228:	4e77      	ldr	r6, [pc, #476]	; (8006408 <_dtoa_r+0x5a8>)
 800622a:	1124      	asrs	r4, r4, #4
 800622c:	2c00      	cmp	r4, #0
 800622e:	f040 8084 	bne.w	800633a <_dtoa_r+0x4da>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1d2      	bne.n	80061dc <_dtoa_r+0x37c>
 8006236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 808b 	beq.w	8006354 <_dtoa_r+0x4f4>
 800623e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006242:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800624a:	2200      	movs	r2, #0
 800624c:	4b6f      	ldr	r3, [pc, #444]	; (800640c <_dtoa_r+0x5ac>)
 800624e:	f7fb ff45 	bl	80020dc <__aeabi_dcmplt>
 8006252:	2800      	cmp	r0, #0
 8006254:	d07e      	beq.n	8006354 <_dtoa_r+0x4f4>
 8006256:	9b08      	ldr	r3, [sp, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d07b      	beq.n	8006354 <_dtoa_r+0x4f4>
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	dd38      	ble.n	80062d4 <_dtoa_r+0x474>
 8006262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006266:	2200      	movs	r2, #0
 8006268:	4b69      	ldr	r3, [pc, #420]	; (8006410 <_dtoa_r+0x5b0>)
 800626a:	f7fb fcc5 	bl	8001bf8 <__aeabi_dmul>
 800626e:	464c      	mov	r4, r9
 8006270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006274:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006278:	3701      	adds	r7, #1
 800627a:	4638      	mov	r0, r7
 800627c:	f7fb fc52 	bl	8001b24 <__aeabi_i2d>
 8006280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006284:	f7fb fcb8 	bl	8001bf8 <__aeabi_dmul>
 8006288:	2200      	movs	r2, #0
 800628a:	4b62      	ldr	r3, [pc, #392]	; (8006414 <_dtoa_r+0x5b4>)
 800628c:	f7fb fafe 	bl	800188c <__adddf3>
 8006290:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006294:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006298:	9611      	str	r6, [sp, #68]	; 0x44
 800629a:	2c00      	cmp	r4, #0
 800629c:	d15d      	bne.n	800635a <_dtoa_r+0x4fa>
 800629e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b5c      	ldr	r3, [pc, #368]	; (8006418 <_dtoa_r+0x5b8>)
 80062a6:	f7fb faef 	bl	8001888 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062b2:	4633      	mov	r3, r6
 80062b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062b6:	f7fb ff2f 	bl	8002118 <__aeabi_dcmpgt>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f040 829c 	bne.w	80067f8 <_dtoa_r+0x998>
 80062c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80062ca:	f7fb ff07 	bl	80020dc <__aeabi_dcmplt>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f040 8290 	bne.w	80067f4 <_dtoa_r+0x994>
 80062d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80062d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f2c0 8152 	blt.w	8006588 <_dtoa_r+0x728>
 80062e4:	f1ba 0f0e 	cmp.w	sl, #14
 80062e8:	f300 814e 	bgt.w	8006588 <_dtoa_r+0x728>
 80062ec:	4b45      	ldr	r3, [pc, #276]	; (8006404 <_dtoa_r+0x5a4>)
 80062ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80062fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f280 80db 	bge.w	80064b8 <_dtoa_r+0x658>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f300 80d7 	bgt.w	80064b8 <_dtoa_r+0x658>
 800630a:	f040 8272 	bne.w	80067f2 <_dtoa_r+0x992>
 800630e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006312:	2200      	movs	r2, #0
 8006314:	4b40      	ldr	r3, [pc, #256]	; (8006418 <_dtoa_r+0x5b8>)
 8006316:	f7fb fc6f 	bl	8001bf8 <__aeabi_dmul>
 800631a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800631e:	f7fb fef1 	bl	8002104 <__aeabi_dcmpge>
 8006322:	9c08      	ldr	r4, [sp, #32]
 8006324:	4626      	mov	r6, r4
 8006326:	2800      	cmp	r0, #0
 8006328:	f040 8248 	bne.w	80067bc <_dtoa_r+0x95c>
 800632c:	2331      	movs	r3, #49	; 0x31
 800632e:	9f03      	ldr	r7, [sp, #12]
 8006330:	f10a 0a01 	add.w	sl, sl, #1
 8006334:	f807 3b01 	strb.w	r3, [r7], #1
 8006338:	e244      	b.n	80067c4 <_dtoa_r+0x964>
 800633a:	07e2      	lsls	r2, r4, #31
 800633c:	d505      	bpl.n	800634a <_dtoa_r+0x4ea>
 800633e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006342:	f7fb fc59 	bl	8001bf8 <__aeabi_dmul>
 8006346:	2301      	movs	r3, #1
 8006348:	3701      	adds	r7, #1
 800634a:	1064      	asrs	r4, r4, #1
 800634c:	3608      	adds	r6, #8
 800634e:	e76d      	b.n	800622c <_dtoa_r+0x3cc>
 8006350:	2702      	movs	r7, #2
 8006352:	e770      	b.n	8006236 <_dtoa_r+0x3d6>
 8006354:	46d0      	mov	r8, sl
 8006356:	9c08      	ldr	r4, [sp, #32]
 8006358:	e78f      	b.n	800627a <_dtoa_r+0x41a>
 800635a:	9903      	ldr	r1, [sp, #12]
 800635c:	4b29      	ldr	r3, [pc, #164]	; (8006404 <_dtoa_r+0x5a4>)
 800635e:	4421      	add	r1, r4
 8006360:	9112      	str	r1, [sp, #72]	; 0x48
 8006362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006364:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006368:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800636c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006370:	2900      	cmp	r1, #0
 8006372:	d055      	beq.n	8006420 <_dtoa_r+0x5c0>
 8006374:	2000      	movs	r0, #0
 8006376:	4929      	ldr	r1, [pc, #164]	; (800641c <_dtoa_r+0x5bc>)
 8006378:	f7fb fd68 	bl	8001e4c <__aeabi_ddiv>
 800637c:	463b      	mov	r3, r7
 800637e:	4632      	mov	r2, r6
 8006380:	f7fb fa82 	bl	8001888 <__aeabi_dsub>
 8006384:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006388:	9f03      	ldr	r7, [sp, #12]
 800638a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800638e:	f7fb fee3 	bl	8002158 <__aeabi_d2iz>
 8006392:	4604      	mov	r4, r0
 8006394:	f7fb fbc6 	bl	8001b24 <__aeabi_i2d>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a0:	f7fb fa72 	bl	8001888 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	3430      	adds	r4, #48	; 0x30
 80063aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063b2:	f807 4b01 	strb.w	r4, [r7], #1
 80063b6:	f7fb fe91 	bl	80020dc <__aeabi_dcmplt>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d174      	bne.n	80064a8 <_dtoa_r+0x648>
 80063be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c2:	2000      	movs	r0, #0
 80063c4:	4911      	ldr	r1, [pc, #68]	; (800640c <_dtoa_r+0x5ac>)
 80063c6:	f7fb fa5f 	bl	8001888 <__aeabi_dsub>
 80063ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ce:	f7fb fe85 	bl	80020dc <__aeabi_dcmplt>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	f040 80b7 	bne.w	8006546 <_dtoa_r+0x6e6>
 80063d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063da:	429f      	cmp	r7, r3
 80063dc:	f43f af7a 	beq.w	80062d4 <_dtoa_r+0x474>
 80063e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063e4:	2200      	movs	r2, #0
 80063e6:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <_dtoa_r+0x5b0>)
 80063e8:	f7fb fc06 	bl	8001bf8 <__aeabi_dmul>
 80063ec:	2200      	movs	r2, #0
 80063ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <_dtoa_r+0x5b0>)
 80063f8:	f7fb fbfe 	bl	8001bf8 <__aeabi_dmul>
 80063fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006400:	e7c3      	b.n	800638a <_dtoa_r+0x52a>
 8006402:	bf00      	nop
 8006404:	0801a8f8 	.word	0x0801a8f8
 8006408:	0801a8d0 	.word	0x0801a8d0
 800640c:	3ff00000 	.word	0x3ff00000
 8006410:	40240000 	.word	0x40240000
 8006414:	401c0000 	.word	0x401c0000
 8006418:	40140000 	.word	0x40140000
 800641c:	3fe00000 	.word	0x3fe00000
 8006420:	4630      	mov	r0, r6
 8006422:	4639      	mov	r1, r7
 8006424:	f7fb fbe8 	bl	8001bf8 <__aeabi_dmul>
 8006428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800642a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800642e:	9c03      	ldr	r4, [sp, #12]
 8006430:	9314      	str	r3, [sp, #80]	; 0x50
 8006432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006436:	f7fb fe8f 	bl	8002158 <__aeabi_d2iz>
 800643a:	9015      	str	r0, [sp, #84]	; 0x54
 800643c:	f7fb fb72 	bl	8001b24 <__aeabi_i2d>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006448:	f7fb fa1e 	bl	8001888 <__aeabi_dsub>
 800644c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800644e:	4606      	mov	r6, r0
 8006450:	3330      	adds	r3, #48	; 0x30
 8006452:	f804 3b01 	strb.w	r3, [r4], #1
 8006456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006458:	460f      	mov	r7, r1
 800645a:	429c      	cmp	r4, r3
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	d124      	bne.n	80064ac <_dtoa_r+0x64c>
 8006462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006466:	4bb0      	ldr	r3, [pc, #704]	; (8006728 <_dtoa_r+0x8c8>)
 8006468:	f7fb fa10 	bl	800188c <__adddf3>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7fb fe50 	bl	8002118 <__aeabi_dcmpgt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d163      	bne.n	8006544 <_dtoa_r+0x6e4>
 800647c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006480:	2000      	movs	r0, #0
 8006482:	49a9      	ldr	r1, [pc, #676]	; (8006728 <_dtoa_r+0x8c8>)
 8006484:	f7fb fa00 	bl	8001888 <__aeabi_dsub>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7fb fe24 	bl	80020dc <__aeabi_dcmplt>
 8006494:	2800      	cmp	r0, #0
 8006496:	f43f af1d 	beq.w	80062d4 <_dtoa_r+0x474>
 800649a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800649c:	1e7b      	subs	r3, r7, #1
 800649e:	9314      	str	r3, [sp, #80]	; 0x50
 80064a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80064a4:	2b30      	cmp	r3, #48	; 0x30
 80064a6:	d0f8      	beq.n	800649a <_dtoa_r+0x63a>
 80064a8:	46c2      	mov	sl, r8
 80064aa:	e03b      	b.n	8006524 <_dtoa_r+0x6c4>
 80064ac:	4b9f      	ldr	r3, [pc, #636]	; (800672c <_dtoa_r+0x8cc>)
 80064ae:	f7fb fba3 	bl	8001bf8 <__aeabi_dmul>
 80064b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b6:	e7bc      	b.n	8006432 <_dtoa_r+0x5d2>
 80064b8:	9f03      	ldr	r7, [sp, #12]
 80064ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80064be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fb fcc1 	bl	8001e4c <__aeabi_ddiv>
 80064ca:	f7fb fe45 	bl	8002158 <__aeabi_d2iz>
 80064ce:	4604      	mov	r4, r0
 80064d0:	f7fb fb28 	bl	8001b24 <__aeabi_i2d>
 80064d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064d8:	f7fb fb8e 	bl	8001bf8 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fb f9d0 	bl	8001888 <__aeabi_dsub>
 80064e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80064ec:	f807 6b01 	strb.w	r6, [r7], #1
 80064f0:	9e03      	ldr	r6, [sp, #12]
 80064f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80064f6:	1bbe      	subs	r6, r7, r6
 80064f8:	45b4      	cmp	ip, r6
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	d136      	bne.n	800656e <_dtoa_r+0x70e>
 8006500:	f7fb f9c4 	bl	800188c <__adddf3>
 8006504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006508:	4680      	mov	r8, r0
 800650a:	4689      	mov	r9, r1
 800650c:	f7fb fe04 	bl	8002118 <__aeabi_dcmpgt>
 8006510:	bb58      	cbnz	r0, 800656a <_dtoa_r+0x70a>
 8006512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fb fdd5 	bl	80020c8 <__aeabi_dcmpeq>
 800651e:	b108      	cbz	r0, 8006524 <_dtoa_r+0x6c4>
 8006520:	07e1      	lsls	r1, r4, #31
 8006522:	d422      	bmi.n	800656a <_dtoa_r+0x70a>
 8006524:	4628      	mov	r0, r5
 8006526:	4659      	mov	r1, fp
 8006528:	f000 fe68 	bl	80071fc <_Bfree>
 800652c:	2300      	movs	r3, #0
 800652e:	703b      	strb	r3, [r7, #0]
 8006530:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006532:	f10a 0001 	add.w	r0, sl, #1
 8006536:	6018      	str	r0, [r3, #0]
 8006538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800653a:	2b00      	cmp	r3, #0
 800653c:	f43f acde 	beq.w	8005efc <_dtoa_r+0x9c>
 8006540:	601f      	str	r7, [r3, #0]
 8006542:	e4db      	b.n	8005efc <_dtoa_r+0x9c>
 8006544:	4627      	mov	r7, r4
 8006546:	463b      	mov	r3, r7
 8006548:	461f      	mov	r7, r3
 800654a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800654e:	2a39      	cmp	r2, #57	; 0x39
 8006550:	d107      	bne.n	8006562 <_dtoa_r+0x702>
 8006552:	9a03      	ldr	r2, [sp, #12]
 8006554:	429a      	cmp	r2, r3
 8006556:	d1f7      	bne.n	8006548 <_dtoa_r+0x6e8>
 8006558:	2230      	movs	r2, #48	; 0x30
 800655a:	9903      	ldr	r1, [sp, #12]
 800655c:	f108 0801 	add.w	r8, r8, #1
 8006560:	700a      	strb	r2, [r1, #0]
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	3201      	adds	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e79e      	b.n	80064a8 <_dtoa_r+0x648>
 800656a:	46d0      	mov	r8, sl
 800656c:	e7eb      	b.n	8006546 <_dtoa_r+0x6e6>
 800656e:	2200      	movs	r2, #0
 8006570:	4b6e      	ldr	r3, [pc, #440]	; (800672c <_dtoa_r+0x8cc>)
 8006572:	f7fb fb41 	bl	8001bf8 <__aeabi_dmul>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4680      	mov	r8, r0
 800657c:	4689      	mov	r9, r1
 800657e:	f7fb fda3 	bl	80020c8 <__aeabi_dcmpeq>
 8006582:	2800      	cmp	r0, #0
 8006584:	d09b      	beq.n	80064be <_dtoa_r+0x65e>
 8006586:	e7cd      	b.n	8006524 <_dtoa_r+0x6c4>
 8006588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800658a:	2a00      	cmp	r2, #0
 800658c:	f000 80d0 	beq.w	8006730 <_dtoa_r+0x8d0>
 8006590:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006592:	2a01      	cmp	r2, #1
 8006594:	f300 80ae 	bgt.w	80066f4 <_dtoa_r+0x894>
 8006598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800659a:	2a00      	cmp	r2, #0
 800659c:	f000 80a6 	beq.w	80066ec <_dtoa_r+0x88c>
 80065a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065a6:	9f06      	ldr	r7, [sp, #24]
 80065a8:	9a06      	ldr	r2, [sp, #24]
 80065aa:	2101      	movs	r1, #1
 80065ac:	441a      	add	r2, r3
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b2:	4628      	mov	r0, r5
 80065b4:	441a      	add	r2, r3
 80065b6:	9209      	str	r2, [sp, #36]	; 0x24
 80065b8:	f000 ff20 	bl	80073fc <__i2b>
 80065bc:	4606      	mov	r6, r0
 80065be:	2f00      	cmp	r7, #0
 80065c0:	dd0c      	ble.n	80065dc <_dtoa_r+0x77c>
 80065c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dd09      	ble.n	80065dc <_dtoa_r+0x77c>
 80065c8:	42bb      	cmp	r3, r7
 80065ca:	bfa8      	it	ge
 80065cc:	463b      	movge	r3, r7
 80065ce:	9a06      	ldr	r2, [sp, #24]
 80065d0:	1aff      	subs	r7, r7, r3
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	9206      	str	r2, [sp, #24]
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065de:	b1f3      	cbz	r3, 800661e <_dtoa_r+0x7be>
 80065e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80a8 	beq.w	8006738 <_dtoa_r+0x8d8>
 80065e8:	2c00      	cmp	r4, #0
 80065ea:	dd10      	ble.n	800660e <_dtoa_r+0x7ae>
 80065ec:	4631      	mov	r1, r6
 80065ee:	4622      	mov	r2, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 ffc1 	bl	8007578 <__pow5mult>
 80065f6:	465a      	mov	r2, fp
 80065f8:	4601      	mov	r1, r0
 80065fa:	4606      	mov	r6, r0
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 ff13 	bl	8007428 <__multiply>
 8006602:	4680      	mov	r8, r0
 8006604:	4659      	mov	r1, fp
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fdf8 	bl	80071fc <_Bfree>
 800660c:	46c3      	mov	fp, r8
 800660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006610:	1b1a      	subs	r2, r3, r4
 8006612:	d004      	beq.n	800661e <_dtoa_r+0x7be>
 8006614:	4659      	mov	r1, fp
 8006616:	4628      	mov	r0, r5
 8006618:	f000 ffae 	bl	8007578 <__pow5mult>
 800661c:	4683      	mov	fp, r0
 800661e:	2101      	movs	r1, #1
 8006620:	4628      	mov	r0, r5
 8006622:	f000 feeb 	bl	80073fc <__i2b>
 8006626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006628:	4604      	mov	r4, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f340 8086 	ble.w	800673c <_dtoa_r+0x8dc>
 8006630:	461a      	mov	r2, r3
 8006632:	4601      	mov	r1, r0
 8006634:	4628      	mov	r0, r5
 8006636:	f000 ff9f 	bl	8007578 <__pow5mult>
 800663a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663c:	4604      	mov	r4, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	dd7f      	ble.n	8006742 <_dtoa_r+0x8e2>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800664c:	6918      	ldr	r0, [r3, #16]
 800664e:	f000 fe87 	bl	8007360 <__hi0bits>
 8006652:	f1c0 0020 	rsb	r0, r0, #32
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	4418      	add	r0, r3
 800665a:	f010 001f 	ands.w	r0, r0, #31
 800665e:	f000 8092 	beq.w	8006786 <_dtoa_r+0x926>
 8006662:	f1c0 0320 	rsb	r3, r0, #32
 8006666:	2b04      	cmp	r3, #4
 8006668:	f340 808a 	ble.w	8006780 <_dtoa_r+0x920>
 800666c:	f1c0 001c 	rsb	r0, r0, #28
 8006670:	9b06      	ldr	r3, [sp, #24]
 8006672:	4407      	add	r7, r0
 8006674:	4403      	add	r3, r0
 8006676:	9306      	str	r3, [sp, #24]
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	4403      	add	r3, r0
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dd05      	ble.n	8006690 <_dtoa_r+0x830>
 8006684:	4659      	mov	r1, fp
 8006686:	461a      	mov	r2, r3
 8006688:	4628      	mov	r0, r5
 800668a:	f000 ffcf 	bl	800762c <__lshift>
 800668e:	4683      	mov	fp, r0
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	dd05      	ble.n	80066a2 <_dtoa_r+0x842>
 8006696:	4621      	mov	r1, r4
 8006698:	461a      	mov	r2, r3
 800669a:	4628      	mov	r0, r5
 800669c:	f000 ffc6 	bl	800762c <__lshift>
 80066a0:	4604      	mov	r4, r0
 80066a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d070      	beq.n	800678a <_dtoa_r+0x92a>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4658      	mov	r0, fp
 80066ac:	f001 f82e 	bl	800770c <__mcmp>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	da6a      	bge.n	800678a <_dtoa_r+0x92a>
 80066b4:	2300      	movs	r3, #0
 80066b6:	4659      	mov	r1, fp
 80066b8:	220a      	movs	r2, #10
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 fdc0 	bl	8007240 <__multadd>
 80066c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c2:	4683      	mov	fp, r0
 80066c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8194 	beq.w	80069f6 <_dtoa_r+0xb96>
 80066ce:	4631      	mov	r1, r6
 80066d0:	2300      	movs	r3, #0
 80066d2:	220a      	movs	r2, #10
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 fdb3 	bl	8007240 <__multadd>
 80066da:	f1b9 0f00 	cmp.w	r9, #0
 80066de:	4606      	mov	r6, r0
 80066e0:	f300 8093 	bgt.w	800680a <_dtoa_r+0x9aa>
 80066e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	dc57      	bgt.n	800679a <_dtoa_r+0x93a>
 80066ea:	e08e      	b.n	800680a <_dtoa_r+0x9aa>
 80066ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066f2:	e757      	b.n	80065a4 <_dtoa_r+0x744>
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	1e5c      	subs	r4, r3, #1
 80066f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	bfb7      	itett	lt
 80066fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006700:	1b1c      	subge	r4, r3, r4
 8006702:	1ae2      	sublt	r2, r4, r3
 8006704:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006706:	bfbe      	ittt	lt
 8006708:	940a      	strlt	r4, [sp, #40]	; 0x28
 800670a:	189b      	addlt	r3, r3, r2
 800670c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800670e:	9b08      	ldr	r3, [sp, #32]
 8006710:	bfb8      	it	lt
 8006712:	2400      	movlt	r4, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bfbb      	ittet	lt
 8006718:	9b06      	ldrlt	r3, [sp, #24]
 800671a:	9a08      	ldrlt	r2, [sp, #32]
 800671c:	9f06      	ldrge	r7, [sp, #24]
 800671e:	1a9f      	sublt	r7, r3, r2
 8006720:	bfac      	ite	ge
 8006722:	9b08      	ldrge	r3, [sp, #32]
 8006724:	2300      	movlt	r3, #0
 8006726:	e73f      	b.n	80065a8 <_dtoa_r+0x748>
 8006728:	3fe00000 	.word	0x3fe00000
 800672c:	40240000 	.word	0x40240000
 8006730:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006732:	9f06      	ldr	r7, [sp, #24]
 8006734:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006736:	e742      	b.n	80065be <_dtoa_r+0x75e>
 8006738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673a:	e76b      	b.n	8006614 <_dtoa_r+0x7b4>
 800673c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800673e:	2b01      	cmp	r3, #1
 8006740:	dc19      	bgt.n	8006776 <_dtoa_r+0x916>
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	b9bb      	cbnz	r3, 8006776 <_dtoa_r+0x916>
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800674c:	b99b      	cbnz	r3, 8006776 <_dtoa_r+0x916>
 800674e:	9b05      	ldr	r3, [sp, #20]
 8006750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006754:	0d1b      	lsrs	r3, r3, #20
 8006756:	051b      	lsls	r3, r3, #20
 8006758:	b183      	cbz	r3, 800677c <_dtoa_r+0x91c>
 800675a:	f04f 0801 	mov.w	r8, #1
 800675e:	9b06      	ldr	r3, [sp, #24]
 8006760:	3301      	adds	r3, #1
 8006762:	9306      	str	r3, [sp, #24]
 8006764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006766:	3301      	adds	r3, #1
 8006768:	9309      	str	r3, [sp, #36]	; 0x24
 800676a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	f47f af6a 	bne.w	8006646 <_dtoa_r+0x7e6>
 8006772:	2001      	movs	r0, #1
 8006774:	e76f      	b.n	8006656 <_dtoa_r+0x7f6>
 8006776:	f04f 0800 	mov.w	r8, #0
 800677a:	e7f6      	b.n	800676a <_dtoa_r+0x90a>
 800677c:	4698      	mov	r8, r3
 800677e:	e7f4      	b.n	800676a <_dtoa_r+0x90a>
 8006780:	f43f af7d 	beq.w	800667e <_dtoa_r+0x81e>
 8006784:	4618      	mov	r0, r3
 8006786:	301c      	adds	r0, #28
 8006788:	e772      	b.n	8006670 <_dtoa_r+0x810>
 800678a:	9b08      	ldr	r3, [sp, #32]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dc36      	bgt.n	80067fe <_dtoa_r+0x99e>
 8006790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006792:	2b02      	cmp	r3, #2
 8006794:	dd33      	ble.n	80067fe <_dtoa_r+0x99e>
 8006796:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	d10d      	bne.n	80067bc <_dtoa_r+0x95c>
 80067a0:	4621      	mov	r1, r4
 80067a2:	464b      	mov	r3, r9
 80067a4:	2205      	movs	r2, #5
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 fd4a 	bl	8007240 <__multadd>
 80067ac:	4601      	mov	r1, r0
 80067ae:	4604      	mov	r4, r0
 80067b0:	4658      	mov	r0, fp
 80067b2:	f000 ffab 	bl	800770c <__mcmp>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f73f adb8 	bgt.w	800632c <_dtoa_r+0x4cc>
 80067bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067be:	9f03      	ldr	r7, [sp, #12]
 80067c0:	ea6f 0a03 	mvn.w	sl, r3
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	4621      	mov	r1, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 fd16 	bl	80071fc <_Bfree>
 80067d0:	2e00      	cmp	r6, #0
 80067d2:	f43f aea7 	beq.w	8006524 <_dtoa_r+0x6c4>
 80067d6:	f1b8 0f00 	cmp.w	r8, #0
 80067da:	d005      	beq.n	80067e8 <_dtoa_r+0x988>
 80067dc:	45b0      	cmp	r8, r6
 80067de:	d003      	beq.n	80067e8 <_dtoa_r+0x988>
 80067e0:	4641      	mov	r1, r8
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fd0a 	bl	80071fc <_Bfree>
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 fd06 	bl	80071fc <_Bfree>
 80067f0:	e698      	b.n	8006524 <_dtoa_r+0x6c4>
 80067f2:	2400      	movs	r4, #0
 80067f4:	4626      	mov	r6, r4
 80067f6:	e7e1      	b.n	80067bc <_dtoa_r+0x95c>
 80067f8:	46c2      	mov	sl, r8
 80067fa:	4626      	mov	r6, r4
 80067fc:	e596      	b.n	800632c <_dtoa_r+0x4cc>
 80067fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80fd 	beq.w	8006a04 <_dtoa_r+0xba4>
 800680a:	2f00      	cmp	r7, #0
 800680c:	dd05      	ble.n	800681a <_dtoa_r+0x9ba>
 800680e:	4631      	mov	r1, r6
 8006810:	463a      	mov	r2, r7
 8006812:	4628      	mov	r0, r5
 8006814:	f000 ff0a 	bl	800762c <__lshift>
 8006818:	4606      	mov	r6, r0
 800681a:	f1b8 0f00 	cmp.w	r8, #0
 800681e:	d05c      	beq.n	80068da <_dtoa_r+0xa7a>
 8006820:	4628      	mov	r0, r5
 8006822:	6871      	ldr	r1, [r6, #4]
 8006824:	f000 fcaa 	bl	800717c <_Balloc>
 8006828:	4607      	mov	r7, r0
 800682a:	b928      	cbnz	r0, 8006838 <_dtoa_r+0x9d8>
 800682c:	4602      	mov	r2, r0
 800682e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006832:	4b7f      	ldr	r3, [pc, #508]	; (8006a30 <_dtoa_r+0xbd0>)
 8006834:	f7ff bb28 	b.w	8005e88 <_dtoa_r+0x28>
 8006838:	6932      	ldr	r2, [r6, #16]
 800683a:	f106 010c 	add.w	r1, r6, #12
 800683e:	3202      	adds	r2, #2
 8006840:	0092      	lsls	r2, r2, #2
 8006842:	300c      	adds	r0, #12
 8006844:	f000 fc8c 	bl	8007160 <memcpy>
 8006848:	2201      	movs	r2, #1
 800684a:	4639      	mov	r1, r7
 800684c:	4628      	mov	r0, r5
 800684e:	f000 feed 	bl	800762c <__lshift>
 8006852:	46b0      	mov	r8, r6
 8006854:	4606      	mov	r6, r0
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	444b      	add	r3, r9
 8006860:	930a      	str	r3, [sp, #40]	; 0x28
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	9309      	str	r3, [sp, #36]	; 0x24
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	4621      	mov	r1, r4
 800686e:	3b01      	subs	r3, #1
 8006870:	4658      	mov	r0, fp
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	f7ff fa66 	bl	8005d44 <quorem>
 8006878:	4603      	mov	r3, r0
 800687a:	4641      	mov	r1, r8
 800687c:	3330      	adds	r3, #48	; 0x30
 800687e:	9006      	str	r0, [sp, #24]
 8006880:	4658      	mov	r0, fp
 8006882:	930b      	str	r3, [sp, #44]	; 0x2c
 8006884:	f000 ff42 	bl	800770c <__mcmp>
 8006888:	4632      	mov	r2, r6
 800688a:	4681      	mov	r9, r0
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 ff58 	bl	8007744 <__mdiff>
 8006894:	68c2      	ldr	r2, [r0, #12]
 8006896:	4607      	mov	r7, r0
 8006898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689a:	bb02      	cbnz	r2, 80068de <_dtoa_r+0xa7e>
 800689c:	4601      	mov	r1, r0
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 ff34 	bl	800770c <__mcmp>
 80068a4:	4602      	mov	r2, r0
 80068a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a8:	4639      	mov	r1, r7
 80068aa:	4628      	mov	r0, r5
 80068ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80068b0:	f000 fca4 	bl	80071fc <_Bfree>
 80068b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068b8:	9f08      	ldr	r7, [sp, #32]
 80068ba:	ea43 0102 	orr.w	r1, r3, r2
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	430b      	orrs	r3, r1
 80068c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c4:	d10d      	bne.n	80068e2 <_dtoa_r+0xa82>
 80068c6:	2b39      	cmp	r3, #57	; 0x39
 80068c8:	d029      	beq.n	800691e <_dtoa_r+0xabe>
 80068ca:	f1b9 0f00 	cmp.w	r9, #0
 80068ce:	dd01      	ble.n	80068d4 <_dtoa_r+0xa74>
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	3331      	adds	r3, #49	; 0x31
 80068d4:	9a04      	ldr	r2, [sp, #16]
 80068d6:	7013      	strb	r3, [r2, #0]
 80068d8:	e776      	b.n	80067c8 <_dtoa_r+0x968>
 80068da:	4630      	mov	r0, r6
 80068dc:	e7b9      	b.n	8006852 <_dtoa_r+0x9f2>
 80068de:	2201      	movs	r2, #1
 80068e0:	e7e2      	b.n	80068a8 <_dtoa_r+0xa48>
 80068e2:	f1b9 0f00 	cmp.w	r9, #0
 80068e6:	db06      	blt.n	80068f6 <_dtoa_r+0xa96>
 80068e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80068ea:	ea41 0909 	orr.w	r9, r1, r9
 80068ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f0:	ea59 0101 	orrs.w	r1, r9, r1
 80068f4:	d120      	bne.n	8006938 <_dtoa_r+0xad8>
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	ddec      	ble.n	80068d4 <_dtoa_r+0xa74>
 80068fa:	4659      	mov	r1, fp
 80068fc:	2201      	movs	r2, #1
 80068fe:	4628      	mov	r0, r5
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	f000 fe93 	bl	800762c <__lshift>
 8006906:	4621      	mov	r1, r4
 8006908:	4683      	mov	fp, r0
 800690a:	f000 feff 	bl	800770c <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	9b08      	ldr	r3, [sp, #32]
 8006912:	dc02      	bgt.n	800691a <_dtoa_r+0xaba>
 8006914:	d1de      	bne.n	80068d4 <_dtoa_r+0xa74>
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	d5dc      	bpl.n	80068d4 <_dtoa_r+0xa74>
 800691a:	2b39      	cmp	r3, #57	; 0x39
 800691c:	d1d8      	bne.n	80068d0 <_dtoa_r+0xa70>
 800691e:	2339      	movs	r3, #57	; 0x39
 8006920:	9a04      	ldr	r2, [sp, #16]
 8006922:	7013      	strb	r3, [r2, #0]
 8006924:	463b      	mov	r3, r7
 8006926:	461f      	mov	r7, r3
 8006928:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800692c:	3b01      	subs	r3, #1
 800692e:	2a39      	cmp	r2, #57	; 0x39
 8006930:	d050      	beq.n	80069d4 <_dtoa_r+0xb74>
 8006932:	3201      	adds	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e747      	b.n	80067c8 <_dtoa_r+0x968>
 8006938:	2a00      	cmp	r2, #0
 800693a:	dd03      	ble.n	8006944 <_dtoa_r+0xae4>
 800693c:	2b39      	cmp	r3, #57	; 0x39
 800693e:	d0ee      	beq.n	800691e <_dtoa_r+0xabe>
 8006940:	3301      	adds	r3, #1
 8006942:	e7c7      	b.n	80068d4 <_dtoa_r+0xa74>
 8006944:	9a08      	ldr	r2, [sp, #32]
 8006946:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006948:	f802 3c01 	strb.w	r3, [r2, #-1]
 800694c:	428a      	cmp	r2, r1
 800694e:	d02a      	beq.n	80069a6 <_dtoa_r+0xb46>
 8006950:	4659      	mov	r1, fp
 8006952:	2300      	movs	r3, #0
 8006954:	220a      	movs	r2, #10
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fc72 	bl	8007240 <__multadd>
 800695c:	45b0      	cmp	r8, r6
 800695e:	4683      	mov	fp, r0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	f04f 020a 	mov.w	r2, #10
 8006968:	4641      	mov	r1, r8
 800696a:	4628      	mov	r0, r5
 800696c:	d107      	bne.n	800697e <_dtoa_r+0xb1e>
 800696e:	f000 fc67 	bl	8007240 <__multadd>
 8006972:	4680      	mov	r8, r0
 8006974:	4606      	mov	r6, r0
 8006976:	9b08      	ldr	r3, [sp, #32]
 8006978:	3301      	adds	r3, #1
 800697a:	9308      	str	r3, [sp, #32]
 800697c:	e775      	b.n	800686a <_dtoa_r+0xa0a>
 800697e:	f000 fc5f 	bl	8007240 <__multadd>
 8006982:	4631      	mov	r1, r6
 8006984:	4680      	mov	r8, r0
 8006986:	2300      	movs	r3, #0
 8006988:	220a      	movs	r2, #10
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fc58 	bl	8007240 <__multadd>
 8006990:	4606      	mov	r6, r0
 8006992:	e7f0      	b.n	8006976 <_dtoa_r+0xb16>
 8006994:	f1b9 0f00 	cmp.w	r9, #0
 8006998:	bfcc      	ite	gt
 800699a:	464f      	movgt	r7, r9
 800699c:	2701      	movle	r7, #1
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	9a03      	ldr	r2, [sp, #12]
 80069a4:	4417      	add	r7, r2
 80069a6:	4659      	mov	r1, fp
 80069a8:	2201      	movs	r2, #1
 80069aa:	4628      	mov	r0, r5
 80069ac:	9308      	str	r3, [sp, #32]
 80069ae:	f000 fe3d 	bl	800762c <__lshift>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4683      	mov	fp, r0
 80069b6:	f000 fea9 	bl	800770c <__mcmp>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	dcb2      	bgt.n	8006924 <_dtoa_r+0xac4>
 80069be:	d102      	bne.n	80069c6 <_dtoa_r+0xb66>
 80069c0:	9b08      	ldr	r3, [sp, #32]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d4ae      	bmi.n	8006924 <_dtoa_r+0xac4>
 80069c6:	463b      	mov	r3, r7
 80069c8:	461f      	mov	r7, r3
 80069ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ce:	2a30      	cmp	r2, #48	; 0x30
 80069d0:	d0fa      	beq.n	80069c8 <_dtoa_r+0xb68>
 80069d2:	e6f9      	b.n	80067c8 <_dtoa_r+0x968>
 80069d4:	9a03      	ldr	r2, [sp, #12]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d1a5      	bne.n	8006926 <_dtoa_r+0xac6>
 80069da:	2331      	movs	r3, #49	; 0x31
 80069dc:	f10a 0a01 	add.w	sl, sl, #1
 80069e0:	e779      	b.n	80068d6 <_dtoa_r+0xa76>
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <_dtoa_r+0xbd4>)
 80069e4:	f7ff baa8 	b.w	8005f38 <_dtoa_r+0xd8>
 80069e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f47f aa81 	bne.w	8005ef2 <_dtoa_r+0x92>
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <_dtoa_r+0xbd8>)
 80069f2:	f7ff baa1 	b.w	8005f38 <_dtoa_r+0xd8>
 80069f6:	f1b9 0f00 	cmp.w	r9, #0
 80069fa:	dc03      	bgt.n	8006a04 <_dtoa_r+0xba4>
 80069fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	f73f aecb 	bgt.w	800679a <_dtoa_r+0x93a>
 8006a04:	9f03      	ldr	r7, [sp, #12]
 8006a06:	4621      	mov	r1, r4
 8006a08:	4658      	mov	r0, fp
 8006a0a:	f7ff f99b 	bl	8005d44 <quorem>
 8006a0e:	9a03      	ldr	r2, [sp, #12]
 8006a10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006a14:	f807 3b01 	strb.w	r3, [r7], #1
 8006a18:	1aba      	subs	r2, r7, r2
 8006a1a:	4591      	cmp	r9, r2
 8006a1c:	ddba      	ble.n	8006994 <_dtoa_r+0xb34>
 8006a1e:	4659      	mov	r1, fp
 8006a20:	2300      	movs	r3, #0
 8006a22:	220a      	movs	r2, #10
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fc0b 	bl	8007240 <__multadd>
 8006a2a:	4683      	mov	fp, r0
 8006a2c:	e7eb      	b.n	8006a06 <_dtoa_r+0xba6>
 8006a2e:	bf00      	nop
 8006a30:	0801a7a3 	.word	0x0801a7a3
 8006a34:	0801a580 	.word	0x0801a580
 8006a38:	0801a701 	.word	0x0801a701

08006a3c <rshift>:
 8006a3c:	6903      	ldr	r3, [r0, #16]
 8006a3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a46:	f100 0414 	add.w	r4, r0, #20
 8006a4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a4e:	dd46      	ble.n	8006ade <rshift+0xa2>
 8006a50:	f011 011f 	ands.w	r1, r1, #31
 8006a54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006a58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006a5c:	d10c      	bne.n	8006a78 <rshift+0x3c>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f100 0710 	add.w	r7, r0, #16
 8006a64:	42b1      	cmp	r1, r6
 8006a66:	d335      	bcc.n	8006ad4 <rshift+0x98>
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	1eea      	subs	r2, r5, #3
 8006a6e:	4296      	cmp	r6, r2
 8006a70:	bf38      	it	cc
 8006a72:	2300      	movcc	r3, #0
 8006a74:	4423      	add	r3, r4
 8006a76:	e015      	b.n	8006aa4 <rshift+0x68>
 8006a78:	46a1      	mov	r9, r4
 8006a7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006a7e:	f1c1 0820 	rsb	r8, r1, #32
 8006a82:	40cf      	lsrs	r7, r1
 8006a84:	f105 0e04 	add.w	lr, r5, #4
 8006a88:	4576      	cmp	r6, lr
 8006a8a:	46f4      	mov	ip, lr
 8006a8c:	d816      	bhi.n	8006abc <rshift+0x80>
 8006a8e:	1a9a      	subs	r2, r3, r2
 8006a90:	0092      	lsls	r2, r2, #2
 8006a92:	3a04      	subs	r2, #4
 8006a94:	3501      	adds	r5, #1
 8006a96:	42ae      	cmp	r6, r5
 8006a98:	bf38      	it	cc
 8006a9a:	2200      	movcc	r2, #0
 8006a9c:	18a3      	adds	r3, r4, r2
 8006a9e:	50a7      	str	r7, [r4, r2]
 8006aa0:	b107      	cbz	r7, 8006aa4 <rshift+0x68>
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	eba3 0204 	sub.w	r2, r3, r4
 8006aaa:	bf08      	it	eq
 8006aac:	2300      	moveq	r3, #0
 8006aae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ab2:	6102      	str	r2, [r0, #16]
 8006ab4:	bf08      	it	eq
 8006ab6:	6143      	streq	r3, [r0, #20]
 8006ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006abc:	f8dc c000 	ldr.w	ip, [ip]
 8006ac0:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ac4:	ea4c 0707 	orr.w	r7, ip, r7
 8006ac8:	f849 7b04 	str.w	r7, [r9], #4
 8006acc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ad0:	40cf      	lsrs	r7, r1
 8006ad2:	e7d9      	b.n	8006a88 <rshift+0x4c>
 8006ad4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ad8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006adc:	e7c2      	b.n	8006a64 <rshift+0x28>
 8006ade:	4623      	mov	r3, r4
 8006ae0:	e7e0      	b.n	8006aa4 <rshift+0x68>

08006ae2 <__hexdig_fun>:
 8006ae2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	d802      	bhi.n	8006af0 <__hexdig_fun+0xe>
 8006aea:	3820      	subs	r0, #32
 8006aec:	b2c0      	uxtb	r0, r0
 8006aee:	4770      	bx	lr
 8006af0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	d801      	bhi.n	8006afc <__hexdig_fun+0x1a>
 8006af8:	3847      	subs	r0, #71	; 0x47
 8006afa:	e7f7      	b.n	8006aec <__hexdig_fun+0xa>
 8006afc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d801      	bhi.n	8006b08 <__hexdig_fun+0x26>
 8006b04:	3827      	subs	r0, #39	; 0x27
 8006b06:	e7f1      	b.n	8006aec <__hexdig_fun+0xa>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4770      	bx	lr

08006b0c <__gethex>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	b08b      	sub	sp, #44	; 0x2c
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	4bb2      	ldr	r3, [pc, #712]	; (8006de0 <__gethex+0x2d4>)
 8006b16:	9002      	str	r0, [sp, #8]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	468b      	mov	fp, r1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	4690      	mov	r8, r2
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	f7fa fea5 	bl	8001870 <strlen>
 8006b26:	4682      	mov	sl, r0
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	f8db 2000 	ldr.w	r2, [fp]
 8006b2e:	4403      	add	r3, r0
 8006b30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b34:	9306      	str	r3, [sp, #24]
 8006b36:	1c93      	adds	r3, r2, #2
 8006b38:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006b3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006b40:	32fe      	adds	r2, #254	; 0xfe
 8006b42:	18d1      	adds	r1, r2, r3
 8006b44:	461f      	mov	r7, r3
 8006b46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b4a:	9101      	str	r1, [sp, #4]
 8006b4c:	2830      	cmp	r0, #48	; 0x30
 8006b4e:	d0f8      	beq.n	8006b42 <__gethex+0x36>
 8006b50:	f7ff ffc7 	bl	8006ae2 <__hexdig_fun>
 8006b54:	4604      	mov	r4, r0
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d13a      	bne.n	8006bd0 <__gethex+0xc4>
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	9903      	ldr	r1, [sp, #12]
 8006b60:	f001 fa26 	bl	8007fb0 <strncmp>
 8006b64:	4605      	mov	r5, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d166      	bne.n	8006c38 <__gethex+0x12c>
 8006b6a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006b6e:	eb07 060a 	add.w	r6, r7, sl
 8006b72:	f7ff ffb6 	bl	8006ae2 <__hexdig_fun>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d060      	beq.n	8006c3c <__gethex+0x130>
 8006b7a:	4633      	mov	r3, r6
 8006b7c:	7818      	ldrb	r0, [r3, #0]
 8006b7e:	461f      	mov	r7, r3
 8006b80:	2830      	cmp	r0, #48	; 0x30
 8006b82:	f103 0301 	add.w	r3, r3, #1
 8006b86:	d0f9      	beq.n	8006b7c <__gethex+0x70>
 8006b88:	f7ff ffab 	bl	8006ae2 <__hexdig_fun>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	fab0 f480 	clz	r4, r0
 8006b92:	4635      	mov	r5, r6
 8006b94:	0964      	lsrs	r4, r4, #5
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4616      	mov	r6, r2
 8006b9c:	7830      	ldrb	r0, [r6, #0]
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	f7ff ff9f 	bl	8006ae2 <__hexdig_fun>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1f8      	bne.n	8006b9a <__gethex+0x8e>
 8006ba8:	4652      	mov	r2, sl
 8006baa:	4630      	mov	r0, r6
 8006bac:	9903      	ldr	r1, [sp, #12]
 8006bae:	f001 f9ff 	bl	8007fb0 <strncmp>
 8006bb2:	b980      	cbnz	r0, 8006bd6 <__gethex+0xca>
 8006bb4:	b94d      	cbnz	r5, 8006bca <__gethex+0xbe>
 8006bb6:	eb06 050a 	add.w	r5, r6, sl
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	7830      	ldrb	r0, [r6, #0]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	f7ff ff8e 	bl	8006ae2 <__hexdig_fun>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1f8      	bne.n	8006bbc <__gethex+0xb0>
 8006bca:	1bad      	subs	r5, r5, r6
 8006bcc:	00ad      	lsls	r5, r5, #2
 8006bce:	e004      	b.n	8006bda <__gethex+0xce>
 8006bd0:	2400      	movs	r4, #0
 8006bd2:	4625      	mov	r5, r4
 8006bd4:	e7e0      	b.n	8006b98 <__gethex+0x8c>
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	d1f7      	bne.n	8006bca <__gethex+0xbe>
 8006bda:	7833      	ldrb	r3, [r6, #0]
 8006bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006be0:	2b50      	cmp	r3, #80	; 0x50
 8006be2:	d139      	bne.n	8006c58 <__gethex+0x14c>
 8006be4:	7873      	ldrb	r3, [r6, #1]
 8006be6:	2b2b      	cmp	r3, #43	; 0x2b
 8006be8:	d02a      	beq.n	8006c40 <__gethex+0x134>
 8006bea:	2b2d      	cmp	r3, #45	; 0x2d
 8006bec:	d02c      	beq.n	8006c48 <__gethex+0x13c>
 8006bee:	f04f 0900 	mov.w	r9, #0
 8006bf2:	1c71      	adds	r1, r6, #1
 8006bf4:	7808      	ldrb	r0, [r1, #0]
 8006bf6:	f7ff ff74 	bl	8006ae2 <__hexdig_fun>
 8006bfa:	1e43      	subs	r3, r0, #1
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b18      	cmp	r3, #24
 8006c00:	d82a      	bhi.n	8006c58 <__gethex+0x14c>
 8006c02:	f1a0 0210 	sub.w	r2, r0, #16
 8006c06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c0a:	f7ff ff6a 	bl	8006ae2 <__hexdig_fun>
 8006c0e:	1e43      	subs	r3, r0, #1
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b18      	cmp	r3, #24
 8006c14:	d91b      	bls.n	8006c4e <__gethex+0x142>
 8006c16:	f1b9 0f00 	cmp.w	r9, #0
 8006c1a:	d000      	beq.n	8006c1e <__gethex+0x112>
 8006c1c:	4252      	negs	r2, r2
 8006c1e:	4415      	add	r5, r2
 8006c20:	f8cb 1000 	str.w	r1, [fp]
 8006c24:	b1d4      	cbz	r4, 8006c5c <__gethex+0x150>
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf14      	ite	ne
 8006c2c:	2700      	movne	r7, #0
 8006c2e:	2706      	moveq	r7, #6
 8006c30:	4638      	mov	r0, r7
 8006c32:	b00b      	add	sp, #44	; 0x2c
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	463e      	mov	r6, r7
 8006c3a:	4625      	mov	r5, r4
 8006c3c:	2401      	movs	r4, #1
 8006c3e:	e7cc      	b.n	8006bda <__gethex+0xce>
 8006c40:	f04f 0900 	mov.w	r9, #0
 8006c44:	1cb1      	adds	r1, r6, #2
 8006c46:	e7d5      	b.n	8006bf4 <__gethex+0xe8>
 8006c48:	f04f 0901 	mov.w	r9, #1
 8006c4c:	e7fa      	b.n	8006c44 <__gethex+0x138>
 8006c4e:	230a      	movs	r3, #10
 8006c50:	fb03 0202 	mla	r2, r3, r2, r0
 8006c54:	3a10      	subs	r2, #16
 8006c56:	e7d6      	b.n	8006c06 <__gethex+0xfa>
 8006c58:	4631      	mov	r1, r6
 8006c5a:	e7e1      	b.n	8006c20 <__gethex+0x114>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	1bf3      	subs	r3, r6, r7
 8006c60:	3b01      	subs	r3, #1
 8006c62:	2b07      	cmp	r3, #7
 8006c64:	dc0a      	bgt.n	8006c7c <__gethex+0x170>
 8006c66:	9802      	ldr	r0, [sp, #8]
 8006c68:	f000 fa88 	bl	800717c <_Balloc>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	b940      	cbnz	r0, 8006c82 <__gethex+0x176>
 8006c70:	4602      	mov	r2, r0
 8006c72:	21de      	movs	r1, #222	; 0xde
 8006c74:	4b5b      	ldr	r3, [pc, #364]	; (8006de4 <__gethex+0x2d8>)
 8006c76:	485c      	ldr	r0, [pc, #368]	; (8006de8 <__gethex+0x2dc>)
 8006c78:	f001 f9bc 	bl	8007ff4 <__assert_func>
 8006c7c:	3101      	adds	r1, #1
 8006c7e:	105b      	asrs	r3, r3, #1
 8006c80:	e7ef      	b.n	8006c62 <__gethex+0x156>
 8006c82:	f04f 0b00 	mov.w	fp, #0
 8006c86:	f100 0914 	add.w	r9, r0, #20
 8006c8a:	f1ca 0301 	rsb	r3, sl, #1
 8006c8e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c92:	f8cd b004 	str.w	fp, [sp, #4]
 8006c96:	9308      	str	r3, [sp, #32]
 8006c98:	42b7      	cmp	r7, r6
 8006c9a:	d33f      	bcc.n	8006d1c <__gethex+0x210>
 8006c9c:	9f04      	ldr	r7, [sp, #16]
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	f847 3b04 	str.w	r3, [r7], #4
 8006ca4:	eba7 0709 	sub.w	r7, r7, r9
 8006ca8:	10bf      	asrs	r7, r7, #2
 8006caa:	6127      	str	r7, [r4, #16]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fb57 	bl	8007360 <__hi0bits>
 8006cb2:	017f      	lsls	r7, r7, #5
 8006cb4:	f8d8 6000 	ldr.w	r6, [r8]
 8006cb8:	1a3f      	subs	r7, r7, r0
 8006cba:	42b7      	cmp	r7, r6
 8006cbc:	dd62      	ble.n	8006d84 <__gethex+0x278>
 8006cbe:	1bbf      	subs	r7, r7, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fef1 	bl	8007aaa <__any_on>
 8006cc8:	4682      	mov	sl, r0
 8006cca:	b1a8      	cbz	r0, 8006cf8 <__gethex+0x1ec>
 8006ccc:	f04f 0a01 	mov.w	sl, #1
 8006cd0:	1e7b      	subs	r3, r7, #1
 8006cd2:	1159      	asrs	r1, r3, #5
 8006cd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006cd8:	f003 021f 	and.w	r2, r3, #31
 8006cdc:	fa0a f202 	lsl.w	r2, sl, r2
 8006ce0:	420a      	tst	r2, r1
 8006ce2:	d009      	beq.n	8006cf8 <__gethex+0x1ec>
 8006ce4:	4553      	cmp	r3, sl
 8006ce6:	dd05      	ble.n	8006cf4 <__gethex+0x1e8>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	1eb9      	subs	r1, r7, #2
 8006cec:	f000 fedd 	bl	8007aaa <__any_on>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d144      	bne.n	8006d7e <__gethex+0x272>
 8006cf4:	f04f 0a02 	mov.w	sl, #2
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff fe9e 	bl	8006a3c <rshift>
 8006d00:	443d      	add	r5, r7
 8006d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d06:	42ab      	cmp	r3, r5
 8006d08:	da4a      	bge.n	8006da0 <__gethex+0x294>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	9802      	ldr	r0, [sp, #8]
 8006d0e:	f000 fa75 	bl	80071fc <_Bfree>
 8006d12:	2300      	movs	r3, #0
 8006d14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d16:	27a3      	movs	r7, #163	; 0xa3
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e789      	b.n	8006c30 <__gethex+0x124>
 8006d1c:	1e73      	subs	r3, r6, #1
 8006d1e:	9a06      	ldr	r2, [sp, #24]
 8006d20:	9307      	str	r3, [sp, #28]
 8006d22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d019      	beq.n	8006d5e <__gethex+0x252>
 8006d2a:	f1bb 0f20 	cmp.w	fp, #32
 8006d2e:	d107      	bne.n	8006d40 <__gethex+0x234>
 8006d30:	9b04      	ldr	r3, [sp, #16]
 8006d32:	9a01      	ldr	r2, [sp, #4]
 8006d34:	f843 2b04 	str.w	r2, [r3], #4
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	469b      	mov	fp, r3
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d44:	f7ff fecd 	bl	8006ae2 <__hexdig_fun>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	f000 000f 	and.w	r0, r0, #15
 8006d4e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d52:	4303      	orrs	r3, r0
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	f10b 0b04 	add.w	fp, fp, #4
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	e00d      	b.n	8006d7a <__gethex+0x26e>
 8006d5e:	9a08      	ldr	r2, [sp, #32]
 8006d60:	1e73      	subs	r3, r6, #1
 8006d62:	4413      	add	r3, r2
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	d3e0      	bcc.n	8006d2a <__gethex+0x21e>
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	9903      	ldr	r1, [sp, #12]
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	f001 f91e 	bl	8007fb0 <strncmp>
 8006d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1d7      	bne.n	8006d2a <__gethex+0x21e>
 8006d7a:	461e      	mov	r6, r3
 8006d7c:	e78c      	b.n	8006c98 <__gethex+0x18c>
 8006d7e:	f04f 0a03 	mov.w	sl, #3
 8006d82:	e7b9      	b.n	8006cf8 <__gethex+0x1ec>
 8006d84:	da09      	bge.n	8006d9a <__gethex+0x28e>
 8006d86:	1bf7      	subs	r7, r6, r7
 8006d88:	4621      	mov	r1, r4
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	9802      	ldr	r0, [sp, #8]
 8006d8e:	f000 fc4d 	bl	800762c <__lshift>
 8006d92:	4604      	mov	r4, r0
 8006d94:	1bed      	subs	r5, r5, r7
 8006d96:	f100 0914 	add.w	r9, r0, #20
 8006d9a:	f04f 0a00 	mov.w	sl, #0
 8006d9e:	e7b0      	b.n	8006d02 <__gethex+0x1f6>
 8006da0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006da4:	42a8      	cmp	r0, r5
 8006da6:	dd72      	ble.n	8006e8e <__gethex+0x382>
 8006da8:	1b45      	subs	r5, r0, r5
 8006daa:	42ae      	cmp	r6, r5
 8006dac:	dc35      	bgt.n	8006e1a <__gethex+0x30e>
 8006dae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d029      	beq.n	8006e0a <__gethex+0x2fe>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d02b      	beq.n	8006e12 <__gethex+0x306>
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d11c      	bne.n	8006df8 <__gethex+0x2ec>
 8006dbe:	42ae      	cmp	r6, r5
 8006dc0:	d11a      	bne.n	8006df8 <__gethex+0x2ec>
 8006dc2:	2e01      	cmp	r6, #1
 8006dc4:	d112      	bne.n	8006dec <__gethex+0x2e0>
 8006dc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006dca:	9a05      	ldr	r2, [sp, #20]
 8006dcc:	2762      	movs	r7, #98	; 0x62
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	f8c9 3000 	str.w	r3, [r9]
 8006dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dda:	601c      	str	r4, [r3, #0]
 8006ddc:	e728      	b.n	8006c30 <__gethex+0x124>
 8006dde:	bf00      	nop
 8006de0:	0801a83c 	.word	0x0801a83c
 8006de4:	0801a7a3 	.word	0x0801a7a3
 8006de8:	0801a7b4 	.word	0x0801a7b4
 8006dec:	4620      	mov	r0, r4
 8006dee:	1e71      	subs	r1, r6, #1
 8006df0:	f000 fe5b 	bl	8007aaa <__any_on>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d1e6      	bne.n	8006dc6 <__gethex+0x2ba>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	9802      	ldr	r0, [sp, #8]
 8006dfc:	f000 f9fe 	bl	80071fc <_Bfree>
 8006e00:	2300      	movs	r3, #0
 8006e02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e04:	2750      	movs	r7, #80	; 0x50
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e712      	b.n	8006c30 <__gethex+0x124>
 8006e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f3      	bne.n	8006df8 <__gethex+0x2ec>
 8006e10:	e7d9      	b.n	8006dc6 <__gethex+0x2ba>
 8006e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1d6      	bne.n	8006dc6 <__gethex+0x2ba>
 8006e18:	e7ee      	b.n	8006df8 <__gethex+0x2ec>
 8006e1a:	1e6f      	subs	r7, r5, #1
 8006e1c:	f1ba 0f00 	cmp.w	sl, #0
 8006e20:	d132      	bne.n	8006e88 <__gethex+0x37c>
 8006e22:	b127      	cbz	r7, 8006e2e <__gethex+0x322>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fe3f 	bl	8007aaa <__any_on>
 8006e2c:	4682      	mov	sl, r0
 8006e2e:	2101      	movs	r1, #1
 8006e30:	117b      	asrs	r3, r7, #5
 8006e32:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006e36:	f007 071f 	and.w	r7, r7, #31
 8006e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8006e3e:	421f      	tst	r7, r3
 8006e40:	f04f 0702 	mov.w	r7, #2
 8006e44:	4629      	mov	r1, r5
 8006e46:	4620      	mov	r0, r4
 8006e48:	bf18      	it	ne
 8006e4a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e4e:	1b76      	subs	r6, r6, r5
 8006e50:	f7ff fdf4 	bl	8006a3c <rshift>
 8006e54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d048      	beq.n	8006ef0 <__gethex+0x3e4>
 8006e5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d015      	beq.n	8006e92 <__gethex+0x386>
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d017      	beq.n	8006e9a <__gethex+0x38e>
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d109      	bne.n	8006e82 <__gethex+0x376>
 8006e6e:	f01a 0f02 	tst.w	sl, #2
 8006e72:	d006      	beq.n	8006e82 <__gethex+0x376>
 8006e74:	f8d9 0000 	ldr.w	r0, [r9]
 8006e78:	ea4a 0a00 	orr.w	sl, sl, r0
 8006e7c:	f01a 0f01 	tst.w	sl, #1
 8006e80:	d10e      	bne.n	8006ea0 <__gethex+0x394>
 8006e82:	f047 0710 	orr.w	r7, r7, #16
 8006e86:	e033      	b.n	8006ef0 <__gethex+0x3e4>
 8006e88:	f04f 0a01 	mov.w	sl, #1
 8006e8c:	e7cf      	b.n	8006e2e <__gethex+0x322>
 8006e8e:	2701      	movs	r7, #1
 8006e90:	e7e2      	b.n	8006e58 <__gethex+0x34c>
 8006e92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e94:	f1c3 0301 	rsb	r3, r3, #1
 8006e98:	9315      	str	r3, [sp, #84]	; 0x54
 8006e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <__gethex+0x376>
 8006ea0:	f04f 0c00 	mov.w	ip, #0
 8006ea4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ea8:	f104 0314 	add.w	r3, r4, #20
 8006eac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006eb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006ebe:	d01c      	beq.n	8006efa <__gethex+0x3ee>
 8006ec0:	3201      	adds	r2, #1
 8006ec2:	6002      	str	r2, [r0, #0]
 8006ec4:	2f02      	cmp	r7, #2
 8006ec6:	f104 0314 	add.w	r3, r4, #20
 8006eca:	d13d      	bne.n	8006f48 <__gethex+0x43c>
 8006ecc:	f8d8 2000 	ldr.w	r2, [r8]
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	42b2      	cmp	r2, r6
 8006ed4:	d10a      	bne.n	8006eec <__gethex+0x3e0>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	1171      	asrs	r1, r6, #5
 8006eda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ede:	f006 061f 	and.w	r6, r6, #31
 8006ee2:	fa02 f606 	lsl.w	r6, r2, r6
 8006ee6:	421e      	tst	r6, r3
 8006ee8:	bf18      	it	ne
 8006eea:	4617      	movne	r7, r2
 8006eec:	f047 0720 	orr.w	r7, r7, #32
 8006ef0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ef2:	601c      	str	r4, [r3, #0]
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	601d      	str	r5, [r3, #0]
 8006ef8:	e69a      	b.n	8006c30 <__gethex+0x124>
 8006efa:	4299      	cmp	r1, r3
 8006efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f00:	d8d8      	bhi.n	8006eb4 <__gethex+0x3a8>
 8006f02:	68a3      	ldr	r3, [r4, #8]
 8006f04:	459b      	cmp	fp, r3
 8006f06:	db17      	blt.n	8006f38 <__gethex+0x42c>
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	9802      	ldr	r0, [sp, #8]
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	f000 f935 	bl	800717c <_Balloc>
 8006f12:	4681      	mov	r9, r0
 8006f14:	b918      	cbnz	r0, 8006f1e <__gethex+0x412>
 8006f16:	4602      	mov	r2, r0
 8006f18:	2184      	movs	r1, #132	; 0x84
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <__gethex+0x474>)
 8006f1c:	e6ab      	b.n	8006c76 <__gethex+0x16a>
 8006f1e:	6922      	ldr	r2, [r4, #16]
 8006f20:	f104 010c 	add.w	r1, r4, #12
 8006f24:	3202      	adds	r2, #2
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	300c      	adds	r0, #12
 8006f2a:	f000 f919 	bl	8007160 <memcpy>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	9802      	ldr	r0, [sp, #8]
 8006f32:	f000 f963 	bl	80071fc <_Bfree>
 8006f36:	464c      	mov	r4, r9
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	6122      	str	r2, [r4, #16]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f44:	615a      	str	r2, [r3, #20]
 8006f46:	e7bd      	b.n	8006ec4 <__gethex+0x3b8>
 8006f48:	6922      	ldr	r2, [r4, #16]
 8006f4a:	455a      	cmp	r2, fp
 8006f4c:	dd0b      	ble.n	8006f66 <__gethex+0x45a>
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7ff fd73 	bl	8006a3c <rshift>
 8006f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f5a:	3501      	adds	r5, #1
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	f6ff aed4 	blt.w	8006d0a <__gethex+0x1fe>
 8006f62:	2701      	movs	r7, #1
 8006f64:	e7c2      	b.n	8006eec <__gethex+0x3e0>
 8006f66:	f016 061f 	ands.w	r6, r6, #31
 8006f6a:	d0fa      	beq.n	8006f62 <__gethex+0x456>
 8006f6c:	4453      	add	r3, sl
 8006f6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006f72:	f000 f9f5 	bl	8007360 <__hi0bits>
 8006f76:	f1c6 0620 	rsb	r6, r6, #32
 8006f7a:	42b0      	cmp	r0, r6
 8006f7c:	dbe7      	blt.n	8006f4e <__gethex+0x442>
 8006f7e:	e7f0      	b.n	8006f62 <__gethex+0x456>
 8006f80:	0801a7a3 	.word	0x0801a7a3

08006f84 <L_shift>:
 8006f84:	f1c2 0208 	rsb	r2, r2, #8
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	b570      	push	{r4, r5, r6, lr}
 8006f8c:	f1c2 0620 	rsb	r6, r2, #32
 8006f90:	6843      	ldr	r3, [r0, #4]
 8006f92:	6804      	ldr	r4, [r0, #0]
 8006f94:	fa03 f506 	lsl.w	r5, r3, r6
 8006f98:	432c      	orrs	r4, r5
 8006f9a:	40d3      	lsrs	r3, r2
 8006f9c:	6004      	str	r4, [r0, #0]
 8006f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fa2:	4288      	cmp	r0, r1
 8006fa4:	d3f4      	bcc.n	8006f90 <L_shift+0xc>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}

08006fa8 <__match>:
 8006fa8:	b530      	push	{r4, r5, lr}
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb2:	b914      	cbnz	r4, 8006fba <__match+0x12>
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	bd30      	pop	{r4, r5, pc}
 8006fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006fc2:	2d19      	cmp	r5, #25
 8006fc4:	bf98      	it	ls
 8006fc6:	3220      	addls	r2, #32
 8006fc8:	42a2      	cmp	r2, r4
 8006fca:	d0f0      	beq.n	8006fae <__match+0x6>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e7f3      	b.n	8006fb8 <__match+0x10>

08006fd0 <__hexnan>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	680b      	ldr	r3, [r1, #0]
 8006fd8:	4682      	mov	sl, r0
 8006fda:	115e      	asrs	r6, r3, #5
 8006fdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006fe0:	f013 031f 	ands.w	r3, r3, #31
 8006fe4:	bf18      	it	ne
 8006fe6:	3604      	addne	r6, #4
 8006fe8:	1f37      	subs	r7, r6, #4
 8006fea:	46b9      	mov	r9, r7
 8006fec:	463c      	mov	r4, r7
 8006fee:	46ab      	mov	fp, r5
 8006ff0:	b087      	sub	sp, #28
 8006ff2:	4690      	mov	r8, r2
 8006ff4:	6802      	ldr	r2, [r0, #0]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ffc:	9502      	str	r5, [sp, #8]
 8006ffe:	7851      	ldrb	r1, [r2, #1]
 8007000:	1c53      	adds	r3, r2, #1
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	b341      	cbz	r1, 8007058 <__hexnan+0x88>
 8007006:	4608      	mov	r0, r1
 8007008:	9205      	str	r2, [sp, #20]
 800700a:	9104      	str	r1, [sp, #16]
 800700c:	f7ff fd69 	bl	8006ae2 <__hexdig_fun>
 8007010:	2800      	cmp	r0, #0
 8007012:	d14f      	bne.n	80070b4 <__hexnan+0xe4>
 8007014:	9904      	ldr	r1, [sp, #16]
 8007016:	9a05      	ldr	r2, [sp, #20]
 8007018:	2920      	cmp	r1, #32
 800701a:	d818      	bhi.n	800704e <__hexnan+0x7e>
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	459b      	cmp	fp, r3
 8007020:	dd13      	ble.n	800704a <__hexnan+0x7a>
 8007022:	454c      	cmp	r4, r9
 8007024:	d206      	bcs.n	8007034 <__hexnan+0x64>
 8007026:	2d07      	cmp	r5, #7
 8007028:	dc04      	bgt.n	8007034 <__hexnan+0x64>
 800702a:	462a      	mov	r2, r5
 800702c:	4649      	mov	r1, r9
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff ffa8 	bl	8006f84 <L_shift>
 8007034:	4544      	cmp	r4, r8
 8007036:	d950      	bls.n	80070da <__hexnan+0x10a>
 8007038:	2300      	movs	r3, #0
 800703a:	f1a4 0904 	sub.w	r9, r4, #4
 800703e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007042:	461d      	mov	r5, r3
 8007044:	464c      	mov	r4, r9
 8007046:	f8cd b008 	str.w	fp, [sp, #8]
 800704a:	9a03      	ldr	r2, [sp, #12]
 800704c:	e7d7      	b.n	8006ffe <__hexnan+0x2e>
 800704e:	2929      	cmp	r1, #41	; 0x29
 8007050:	d156      	bne.n	8007100 <__hexnan+0x130>
 8007052:	3202      	adds	r2, #2
 8007054:	f8ca 2000 	str.w	r2, [sl]
 8007058:	f1bb 0f00 	cmp.w	fp, #0
 800705c:	d050      	beq.n	8007100 <__hexnan+0x130>
 800705e:	454c      	cmp	r4, r9
 8007060:	d206      	bcs.n	8007070 <__hexnan+0xa0>
 8007062:	2d07      	cmp	r5, #7
 8007064:	dc04      	bgt.n	8007070 <__hexnan+0xa0>
 8007066:	462a      	mov	r2, r5
 8007068:	4649      	mov	r1, r9
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff ff8a 	bl	8006f84 <L_shift>
 8007070:	4544      	cmp	r4, r8
 8007072:	d934      	bls.n	80070de <__hexnan+0x10e>
 8007074:	4623      	mov	r3, r4
 8007076:	f1a8 0204 	sub.w	r2, r8, #4
 800707a:	f853 1b04 	ldr.w	r1, [r3], #4
 800707e:	429f      	cmp	r7, r3
 8007080:	f842 1f04 	str.w	r1, [r2, #4]!
 8007084:	d2f9      	bcs.n	800707a <__hexnan+0xaa>
 8007086:	1b3b      	subs	r3, r7, r4
 8007088:	f023 0303 	bic.w	r3, r3, #3
 800708c:	3304      	adds	r3, #4
 800708e:	3401      	adds	r4, #1
 8007090:	3e03      	subs	r6, #3
 8007092:	42b4      	cmp	r4, r6
 8007094:	bf88      	it	hi
 8007096:	2304      	movhi	r3, #4
 8007098:	2200      	movs	r2, #0
 800709a:	4443      	add	r3, r8
 800709c:	f843 2b04 	str.w	r2, [r3], #4
 80070a0:	429f      	cmp	r7, r3
 80070a2:	d2fb      	bcs.n	800709c <__hexnan+0xcc>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	b91b      	cbnz	r3, 80070b0 <__hexnan+0xe0>
 80070a8:	4547      	cmp	r7, r8
 80070aa:	d127      	bne.n	80070fc <__hexnan+0x12c>
 80070ac:	2301      	movs	r3, #1
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	2005      	movs	r0, #5
 80070b2:	e026      	b.n	8007102 <__hexnan+0x132>
 80070b4:	3501      	adds	r5, #1
 80070b6:	2d08      	cmp	r5, #8
 80070b8:	f10b 0b01 	add.w	fp, fp, #1
 80070bc:	dd06      	ble.n	80070cc <__hexnan+0xfc>
 80070be:	4544      	cmp	r4, r8
 80070c0:	d9c3      	bls.n	800704a <__hexnan+0x7a>
 80070c2:	2300      	movs	r3, #0
 80070c4:	2501      	movs	r5, #1
 80070c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80070ca:	3c04      	subs	r4, #4
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	f000 000f 	and.w	r0, r0, #15
 80070d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	e7b7      	b.n	800704a <__hexnan+0x7a>
 80070da:	2508      	movs	r5, #8
 80070dc:	e7b5      	b.n	800704a <__hexnan+0x7a>
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0df      	beq.n	80070a4 <__hexnan+0xd4>
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	f1c3 0320 	rsb	r3, r3, #32
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
 80070f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80070f4:	401a      	ands	r2, r3
 80070f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80070fa:	e7d3      	b.n	80070a4 <__hexnan+0xd4>
 80070fc:	3f04      	subs	r7, #4
 80070fe:	e7d1      	b.n	80070a4 <__hexnan+0xd4>
 8007100:	2004      	movs	r0, #4
 8007102:	b007      	add	sp, #28
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007108 <_localeconv_r>:
 8007108:	4800      	ldr	r0, [pc, #0]	; (800710c <_localeconv_r+0x4>)
 800710a:	4770      	bx	lr
 800710c:	20000164 	.word	0x20000164

08007110 <malloc>:
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <malloc+0xc>)
 8007112:	4601      	mov	r1, r0
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	f000 bd65 	b.w	8007be4 <_malloc_r>
 800711a:	bf00      	nop
 800711c:	2000000c 	.word	0x2000000c

08007120 <__ascii_mbtowc>:
 8007120:	b082      	sub	sp, #8
 8007122:	b901      	cbnz	r1, 8007126 <__ascii_mbtowc+0x6>
 8007124:	a901      	add	r1, sp, #4
 8007126:	b142      	cbz	r2, 800713a <__ascii_mbtowc+0x1a>
 8007128:	b14b      	cbz	r3, 800713e <__ascii_mbtowc+0x1e>
 800712a:	7813      	ldrb	r3, [r2, #0]
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	1e10      	subs	r0, r2, #0
 8007132:	bf18      	it	ne
 8007134:	2001      	movne	r0, #1
 8007136:	b002      	add	sp, #8
 8007138:	4770      	bx	lr
 800713a:	4610      	mov	r0, r2
 800713c:	e7fb      	b.n	8007136 <__ascii_mbtowc+0x16>
 800713e:	f06f 0001 	mvn.w	r0, #1
 8007142:	e7f8      	b.n	8007136 <__ascii_mbtowc+0x16>

08007144 <memchr>:
 8007144:	4603      	mov	r3, r0
 8007146:	b510      	push	{r4, lr}
 8007148:	b2c9      	uxtb	r1, r1
 800714a:	4402      	add	r2, r0
 800714c:	4293      	cmp	r3, r2
 800714e:	4618      	mov	r0, r3
 8007150:	d101      	bne.n	8007156 <memchr+0x12>
 8007152:	2000      	movs	r0, #0
 8007154:	e003      	b.n	800715e <memchr+0x1a>
 8007156:	7804      	ldrb	r4, [r0, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	428c      	cmp	r4, r1
 800715c:	d1f6      	bne.n	800714c <memchr+0x8>
 800715e:	bd10      	pop	{r4, pc}

08007160 <memcpy>:
 8007160:	440a      	add	r2, r1
 8007162:	4291      	cmp	r1, r2
 8007164:	f100 33ff 	add.w	r3, r0, #4294967295
 8007168:	d100      	bne.n	800716c <memcpy+0xc>
 800716a:	4770      	bx	lr
 800716c:	b510      	push	{r4, lr}
 800716e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007172:	4291      	cmp	r1, r2
 8007174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007178:	d1f9      	bne.n	800716e <memcpy+0xe>
 800717a:	bd10      	pop	{r4, pc}

0800717c <_Balloc>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007180:	4604      	mov	r4, r0
 8007182:	460d      	mov	r5, r1
 8007184:	b976      	cbnz	r6, 80071a4 <_Balloc+0x28>
 8007186:	2010      	movs	r0, #16
 8007188:	f7ff ffc2 	bl	8007110 <malloc>
 800718c:	4602      	mov	r2, r0
 800718e:	6260      	str	r0, [r4, #36]	; 0x24
 8007190:	b920      	cbnz	r0, 800719c <_Balloc+0x20>
 8007192:	2166      	movs	r1, #102	; 0x66
 8007194:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <_Balloc+0x78>)
 8007196:	4818      	ldr	r0, [pc, #96]	; (80071f8 <_Balloc+0x7c>)
 8007198:	f000 ff2c 	bl	8007ff4 <__assert_func>
 800719c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a0:	6006      	str	r6, [r0, #0]
 80071a2:	60c6      	str	r6, [r0, #12]
 80071a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071a6:	68f3      	ldr	r3, [r6, #12]
 80071a8:	b183      	cbz	r3, 80071cc <_Balloc+0x50>
 80071aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071b2:	b9b8      	cbnz	r0, 80071e4 <_Balloc+0x68>
 80071b4:	2101      	movs	r1, #1
 80071b6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ba:	1d72      	adds	r2, r6, #5
 80071bc:	4620      	mov	r0, r4
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	f000 fc94 	bl	8007aec <_calloc_r>
 80071c4:	b160      	cbz	r0, 80071e0 <_Balloc+0x64>
 80071c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ca:	e00e      	b.n	80071ea <_Balloc+0x6e>
 80071cc:	2221      	movs	r2, #33	; 0x21
 80071ce:	2104      	movs	r1, #4
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fc8b 	bl	8007aec <_calloc_r>
 80071d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d8:	60f0      	str	r0, [r6, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e4      	bne.n	80071aa <_Balloc+0x2e>
 80071e0:	2000      	movs	r0, #0
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	6802      	ldr	r2, [r0, #0]
 80071e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ea:	2300      	movs	r3, #0
 80071ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071f0:	e7f7      	b.n	80071e2 <_Balloc+0x66>
 80071f2:	bf00      	nop
 80071f4:	0801a70e 	.word	0x0801a70e
 80071f8:	0801a84e 	.word	0x0801a84e

080071fc <_Bfree>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007200:	4605      	mov	r5, r0
 8007202:	460c      	mov	r4, r1
 8007204:	b976      	cbnz	r6, 8007224 <_Bfree+0x28>
 8007206:	2010      	movs	r0, #16
 8007208:	f7ff ff82 	bl	8007110 <malloc>
 800720c:	4602      	mov	r2, r0
 800720e:	6268      	str	r0, [r5, #36]	; 0x24
 8007210:	b920      	cbnz	r0, 800721c <_Bfree+0x20>
 8007212:	218a      	movs	r1, #138	; 0x8a
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <_Bfree+0x3c>)
 8007216:	4809      	ldr	r0, [pc, #36]	; (800723c <_Bfree+0x40>)
 8007218:	f000 feec 	bl	8007ff4 <__assert_func>
 800721c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007220:	6006      	str	r6, [r0, #0]
 8007222:	60c6      	str	r6, [r0, #12]
 8007224:	b13c      	cbz	r4, 8007236 <_Bfree+0x3a>
 8007226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007228:	6862      	ldr	r2, [r4, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007230:	6021      	str	r1, [r4, #0]
 8007232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	0801a70e 	.word	0x0801a70e
 800723c:	0801a84e 	.word	0x0801a84e

08007240 <__multadd>:
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4607      	mov	r7, r0
 8007246:	460c      	mov	r4, r1
 8007248:	461e      	mov	r6, r3
 800724a:	2000      	movs	r0, #0
 800724c:	690d      	ldr	r5, [r1, #16]
 800724e:	f101 0c14 	add.w	ip, r1, #20
 8007252:	f8dc 3000 	ldr.w	r3, [ip]
 8007256:	3001      	adds	r0, #1
 8007258:	b299      	uxth	r1, r3
 800725a:	fb02 6101 	mla	r1, r2, r1, r6
 800725e:	0c1e      	lsrs	r6, r3, #16
 8007260:	0c0b      	lsrs	r3, r1, #16
 8007262:	fb02 3306 	mla	r3, r2, r6, r3
 8007266:	b289      	uxth	r1, r1
 8007268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800726c:	4285      	cmp	r5, r0
 800726e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007272:	f84c 1b04 	str.w	r1, [ip], #4
 8007276:	dcec      	bgt.n	8007252 <__multadd+0x12>
 8007278:	b30e      	cbz	r6, 80072be <__multadd+0x7e>
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	42ab      	cmp	r3, r5
 800727e:	dc19      	bgt.n	80072b4 <__multadd+0x74>
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4638      	mov	r0, r7
 8007284:	3101      	adds	r1, #1
 8007286:	f7ff ff79 	bl	800717c <_Balloc>
 800728a:	4680      	mov	r8, r0
 800728c:	b928      	cbnz	r0, 800729a <__multadd+0x5a>
 800728e:	4602      	mov	r2, r0
 8007290:	21b5      	movs	r1, #181	; 0xb5
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <__multadd+0x84>)
 8007294:	480c      	ldr	r0, [pc, #48]	; (80072c8 <__multadd+0x88>)
 8007296:	f000 fead 	bl	8007ff4 <__assert_func>
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	f104 010c 	add.w	r1, r4, #12
 80072a0:	3202      	adds	r2, #2
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	300c      	adds	r0, #12
 80072a6:	f7ff ff5b 	bl	8007160 <memcpy>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff ffa5 	bl	80071fc <_Bfree>
 80072b2:	4644      	mov	r4, r8
 80072b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072b8:	3501      	adds	r5, #1
 80072ba:	615e      	str	r6, [r3, #20]
 80072bc:	6125      	str	r5, [r4, #16]
 80072be:	4620      	mov	r0, r4
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c4:	0801a7a3 	.word	0x0801a7a3
 80072c8:	0801a84e 	.word	0x0801a84e

080072cc <__s2b>:
 80072cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d0:	4615      	mov	r5, r2
 80072d2:	2209      	movs	r2, #9
 80072d4:	461f      	mov	r7, r3
 80072d6:	3308      	adds	r3, #8
 80072d8:	460c      	mov	r4, r1
 80072da:	fb93 f3f2 	sdiv	r3, r3, r2
 80072de:	4606      	mov	r6, r0
 80072e0:	2201      	movs	r2, #1
 80072e2:	2100      	movs	r1, #0
 80072e4:	429a      	cmp	r2, r3
 80072e6:	db09      	blt.n	80072fc <__s2b+0x30>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ff47 	bl	800717c <_Balloc>
 80072ee:	b940      	cbnz	r0, 8007302 <__s2b+0x36>
 80072f0:	4602      	mov	r2, r0
 80072f2:	21ce      	movs	r1, #206	; 0xce
 80072f4:	4b18      	ldr	r3, [pc, #96]	; (8007358 <__s2b+0x8c>)
 80072f6:	4819      	ldr	r0, [pc, #100]	; (800735c <__s2b+0x90>)
 80072f8:	f000 fe7c 	bl	8007ff4 <__assert_func>
 80072fc:	0052      	lsls	r2, r2, #1
 80072fe:	3101      	adds	r1, #1
 8007300:	e7f0      	b.n	80072e4 <__s2b+0x18>
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	2d09      	cmp	r5, #9
 8007306:	6143      	str	r3, [r0, #20]
 8007308:	f04f 0301 	mov.w	r3, #1
 800730c:	6103      	str	r3, [r0, #16]
 800730e:	dd16      	ble.n	800733e <__s2b+0x72>
 8007310:	f104 0909 	add.w	r9, r4, #9
 8007314:	46c8      	mov	r8, r9
 8007316:	442c      	add	r4, r5
 8007318:	f818 3b01 	ldrb.w	r3, [r8], #1
 800731c:	4601      	mov	r1, r0
 800731e:	220a      	movs	r2, #10
 8007320:	4630      	mov	r0, r6
 8007322:	3b30      	subs	r3, #48	; 0x30
 8007324:	f7ff ff8c 	bl	8007240 <__multadd>
 8007328:	45a0      	cmp	r8, r4
 800732a:	d1f5      	bne.n	8007318 <__s2b+0x4c>
 800732c:	f1a5 0408 	sub.w	r4, r5, #8
 8007330:	444c      	add	r4, r9
 8007332:	1b2d      	subs	r5, r5, r4
 8007334:	1963      	adds	r3, r4, r5
 8007336:	42bb      	cmp	r3, r7
 8007338:	db04      	blt.n	8007344 <__s2b+0x78>
 800733a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733e:	2509      	movs	r5, #9
 8007340:	340a      	adds	r4, #10
 8007342:	e7f6      	b.n	8007332 <__s2b+0x66>
 8007344:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007348:	4601      	mov	r1, r0
 800734a:	220a      	movs	r2, #10
 800734c:	4630      	mov	r0, r6
 800734e:	3b30      	subs	r3, #48	; 0x30
 8007350:	f7ff ff76 	bl	8007240 <__multadd>
 8007354:	e7ee      	b.n	8007334 <__s2b+0x68>
 8007356:	bf00      	nop
 8007358:	0801a7a3 	.word	0x0801a7a3
 800735c:	0801a84e 	.word	0x0801a84e

08007360 <__hi0bits>:
 8007360:	0c02      	lsrs	r2, r0, #16
 8007362:	0412      	lsls	r2, r2, #16
 8007364:	4603      	mov	r3, r0
 8007366:	b9ca      	cbnz	r2, 800739c <__hi0bits+0x3c>
 8007368:	0403      	lsls	r3, r0, #16
 800736a:	2010      	movs	r0, #16
 800736c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007370:	bf04      	itt	eq
 8007372:	021b      	lsleq	r3, r3, #8
 8007374:	3008      	addeq	r0, #8
 8007376:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800737a:	bf04      	itt	eq
 800737c:	011b      	lsleq	r3, r3, #4
 800737e:	3004      	addeq	r0, #4
 8007380:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007384:	bf04      	itt	eq
 8007386:	009b      	lsleq	r3, r3, #2
 8007388:	3002      	addeq	r0, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	db05      	blt.n	800739a <__hi0bits+0x3a>
 800738e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007392:	f100 0001 	add.w	r0, r0, #1
 8007396:	bf08      	it	eq
 8007398:	2020      	moveq	r0, #32
 800739a:	4770      	bx	lr
 800739c:	2000      	movs	r0, #0
 800739e:	e7e5      	b.n	800736c <__hi0bits+0xc>

080073a0 <__lo0bits>:
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	4602      	mov	r2, r0
 80073a4:	f013 0007 	ands.w	r0, r3, #7
 80073a8:	d00b      	beq.n	80073c2 <__lo0bits+0x22>
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d421      	bmi.n	80073f2 <__lo0bits+0x52>
 80073ae:	0798      	lsls	r0, r3, #30
 80073b0:	bf49      	itett	mi
 80073b2:	085b      	lsrmi	r3, r3, #1
 80073b4:	089b      	lsrpl	r3, r3, #2
 80073b6:	2001      	movmi	r0, #1
 80073b8:	6013      	strmi	r3, [r2, #0]
 80073ba:	bf5c      	itt	pl
 80073bc:	2002      	movpl	r0, #2
 80073be:	6013      	strpl	r3, [r2, #0]
 80073c0:	4770      	bx	lr
 80073c2:	b299      	uxth	r1, r3
 80073c4:	b909      	cbnz	r1, 80073ca <__lo0bits+0x2a>
 80073c6:	2010      	movs	r0, #16
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2d9      	uxtb	r1, r3
 80073cc:	b909      	cbnz	r1, 80073d2 <__lo0bits+0x32>
 80073ce:	3008      	adds	r0, #8
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	0719      	lsls	r1, r3, #28
 80073d4:	bf04      	itt	eq
 80073d6:	091b      	lsreq	r3, r3, #4
 80073d8:	3004      	addeq	r0, #4
 80073da:	0799      	lsls	r1, r3, #30
 80073dc:	bf04      	itt	eq
 80073de:	089b      	lsreq	r3, r3, #2
 80073e0:	3002      	addeq	r0, #2
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d403      	bmi.n	80073ee <__lo0bits+0x4e>
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f100 0001 	add.w	r0, r0, #1
 80073ec:	d003      	beq.n	80073f6 <__lo0bits+0x56>
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4770      	bx	lr
 80073f2:	2000      	movs	r0, #0
 80073f4:	4770      	bx	lr
 80073f6:	2020      	movs	r0, #32
 80073f8:	4770      	bx	lr
	...

080073fc <__i2b>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	2101      	movs	r1, #1
 8007402:	f7ff febb 	bl	800717c <_Balloc>
 8007406:	4602      	mov	r2, r0
 8007408:	b928      	cbnz	r0, 8007416 <__i2b+0x1a>
 800740a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__i2b+0x24>)
 8007410:	4804      	ldr	r0, [pc, #16]	; (8007424 <__i2b+0x28>)
 8007412:	f000 fdef 	bl	8007ff4 <__assert_func>
 8007416:	2301      	movs	r3, #1
 8007418:	6144      	str	r4, [r0, #20]
 800741a:	6103      	str	r3, [r0, #16]
 800741c:	bd10      	pop	{r4, pc}
 800741e:	bf00      	nop
 8007420:	0801a7a3 	.word	0x0801a7a3
 8007424:	0801a84e 	.word	0x0801a84e

08007428 <__multiply>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4691      	mov	r9, r2
 800742e:	690a      	ldr	r2, [r1, #16]
 8007430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007434:	460c      	mov	r4, r1
 8007436:	429a      	cmp	r2, r3
 8007438:	bfbe      	ittt	lt
 800743a:	460b      	movlt	r3, r1
 800743c:	464c      	movlt	r4, r9
 800743e:	4699      	movlt	r9, r3
 8007440:	6927      	ldr	r7, [r4, #16]
 8007442:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	eb07 060a 	add.w	r6, r7, sl
 800744e:	42b3      	cmp	r3, r6
 8007450:	b085      	sub	sp, #20
 8007452:	bfb8      	it	lt
 8007454:	3101      	addlt	r1, #1
 8007456:	f7ff fe91 	bl	800717c <_Balloc>
 800745a:	b930      	cbnz	r0, 800746a <__multiply+0x42>
 800745c:	4602      	mov	r2, r0
 800745e:	f240 115d 	movw	r1, #349	; 0x15d
 8007462:	4b43      	ldr	r3, [pc, #268]	; (8007570 <__multiply+0x148>)
 8007464:	4843      	ldr	r0, [pc, #268]	; (8007574 <__multiply+0x14c>)
 8007466:	f000 fdc5 	bl	8007ff4 <__assert_func>
 800746a:	f100 0514 	add.w	r5, r0, #20
 800746e:	462b      	mov	r3, r5
 8007470:	2200      	movs	r2, #0
 8007472:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007476:	4543      	cmp	r3, r8
 8007478:	d321      	bcc.n	80074be <__multiply+0x96>
 800747a:	f104 0314 	add.w	r3, r4, #20
 800747e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007482:	f109 0314 	add.w	r3, r9, #20
 8007486:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800748a:	9202      	str	r2, [sp, #8]
 800748c:	1b3a      	subs	r2, r7, r4
 800748e:	3a15      	subs	r2, #21
 8007490:	f022 0203 	bic.w	r2, r2, #3
 8007494:	3204      	adds	r2, #4
 8007496:	f104 0115 	add.w	r1, r4, #21
 800749a:	428f      	cmp	r7, r1
 800749c:	bf38      	it	cc
 800749e:	2204      	movcc	r2, #4
 80074a0:	9201      	str	r2, [sp, #4]
 80074a2:	9a02      	ldr	r2, [sp, #8]
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d80c      	bhi.n	80074c4 <__multiply+0x9c>
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	dd03      	ble.n	80074b6 <__multiply+0x8e>
 80074ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d059      	beq.n	800756a <__multiply+0x142>
 80074b6:	6106      	str	r6, [r0, #16]
 80074b8:	b005      	add	sp, #20
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074be:	f843 2b04 	str.w	r2, [r3], #4
 80074c2:	e7d8      	b.n	8007476 <__multiply+0x4e>
 80074c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80074c8:	f1ba 0f00 	cmp.w	sl, #0
 80074cc:	d023      	beq.n	8007516 <__multiply+0xee>
 80074ce:	46a9      	mov	r9, r5
 80074d0:	f04f 0c00 	mov.w	ip, #0
 80074d4:	f104 0e14 	add.w	lr, r4, #20
 80074d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074dc:	f8d9 1000 	ldr.w	r1, [r9]
 80074e0:	fa1f fb82 	uxth.w	fp, r2
 80074e4:	b289      	uxth	r1, r1
 80074e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80074ea:	4461      	add	r1, ip
 80074ec:	f8d9 c000 	ldr.w	ip, [r9]
 80074f0:	0c12      	lsrs	r2, r2, #16
 80074f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074f6:	fb0a c202 	mla	r2, sl, r2, ip
 80074fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074fe:	b289      	uxth	r1, r1
 8007500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007504:	4577      	cmp	r7, lr
 8007506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800750a:	f849 1b04 	str.w	r1, [r9], #4
 800750e:	d8e3      	bhi.n	80074d8 <__multiply+0xb0>
 8007510:	9a01      	ldr	r2, [sp, #4]
 8007512:	f845 c002 	str.w	ip, [r5, r2]
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	d020      	beq.n	8007566 <__multiply+0x13e>
 8007524:	46ae      	mov	lr, r5
 8007526:	f04f 0a00 	mov.w	sl, #0
 800752a:	6829      	ldr	r1, [r5, #0]
 800752c:	f104 0c14 	add.w	ip, r4, #20
 8007530:	f8bc b000 	ldrh.w	fp, [ip]
 8007534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007538:	b289      	uxth	r1, r1
 800753a:	fb09 220b 	mla	r2, r9, fp, r2
 800753e:	4492      	add	sl, r2
 8007540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007544:	f84e 1b04 	str.w	r1, [lr], #4
 8007548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800754c:	f8be 1000 	ldrh.w	r1, [lr]
 8007550:	0c12      	lsrs	r2, r2, #16
 8007552:	fb09 1102 	mla	r1, r9, r2, r1
 8007556:	4567      	cmp	r7, ip
 8007558:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800755c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007560:	d8e6      	bhi.n	8007530 <__multiply+0x108>
 8007562:	9a01      	ldr	r2, [sp, #4]
 8007564:	50a9      	str	r1, [r5, r2]
 8007566:	3504      	adds	r5, #4
 8007568:	e79b      	b.n	80074a2 <__multiply+0x7a>
 800756a:	3e01      	subs	r6, #1
 800756c:	e79d      	b.n	80074aa <__multiply+0x82>
 800756e:	bf00      	nop
 8007570:	0801a7a3 	.word	0x0801a7a3
 8007574:	0801a84e 	.word	0x0801a84e

08007578 <__pow5mult>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4615      	mov	r5, r2
 800757e:	f012 0203 	ands.w	r2, r2, #3
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	d007      	beq.n	8007598 <__pow5mult+0x20>
 8007588:	4c25      	ldr	r4, [pc, #148]	; (8007620 <__pow5mult+0xa8>)
 800758a:	3a01      	subs	r2, #1
 800758c:	2300      	movs	r3, #0
 800758e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007592:	f7ff fe55 	bl	8007240 <__multadd>
 8007596:	4607      	mov	r7, r0
 8007598:	10ad      	asrs	r5, r5, #2
 800759a:	d03d      	beq.n	8007618 <__pow5mult+0xa0>
 800759c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800759e:	b97c      	cbnz	r4, 80075c0 <__pow5mult+0x48>
 80075a0:	2010      	movs	r0, #16
 80075a2:	f7ff fdb5 	bl	8007110 <malloc>
 80075a6:	4602      	mov	r2, r0
 80075a8:	6270      	str	r0, [r6, #36]	; 0x24
 80075aa:	b928      	cbnz	r0, 80075b8 <__pow5mult+0x40>
 80075ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <__pow5mult+0xac>)
 80075b2:	481d      	ldr	r0, [pc, #116]	; (8007628 <__pow5mult+0xb0>)
 80075b4:	f000 fd1e 	bl	8007ff4 <__assert_func>
 80075b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075bc:	6004      	str	r4, [r0, #0]
 80075be:	60c4      	str	r4, [r0, #12]
 80075c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c8:	b94c      	cbnz	r4, 80075de <__pow5mult+0x66>
 80075ca:	f240 2171 	movw	r1, #625	; 0x271
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff14 	bl	80073fc <__i2b>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	07eb      	lsls	r3, r5, #31
 80075e4:	d50a      	bpl.n	80075fc <__pow5mult+0x84>
 80075e6:	4639      	mov	r1, r7
 80075e8:	4622      	mov	r2, r4
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff1c 	bl	8007428 <__multiply>
 80075f0:	4680      	mov	r8, r0
 80075f2:	4639      	mov	r1, r7
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fe01 	bl	80071fc <_Bfree>
 80075fa:	4647      	mov	r7, r8
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	d00b      	beq.n	8007618 <__pow5mult+0xa0>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	b938      	cbnz	r0, 8007614 <__pow5mult+0x9c>
 8007604:	4622      	mov	r2, r4
 8007606:	4621      	mov	r1, r4
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff0d 	bl	8007428 <__multiply>
 800760e:	6020      	str	r0, [r4, #0]
 8007610:	f8c0 9000 	str.w	r9, [r0]
 8007614:	4604      	mov	r4, r0
 8007616:	e7e4      	b.n	80075e2 <__pow5mult+0x6a>
 8007618:	4638      	mov	r0, r7
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	bf00      	nop
 8007620:	0801a9c0 	.word	0x0801a9c0
 8007624:	0801a70e 	.word	0x0801a70e
 8007628:	0801a84e 	.word	0x0801a84e

0800762c <__lshift>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	4607      	mov	r7, r0
 8007634:	4691      	mov	r9, r2
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6849      	ldr	r1, [r1, #4]
 800763a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007644:	f108 0601 	add.w	r6, r8, #1
 8007648:	42b3      	cmp	r3, r6
 800764a:	db0b      	blt.n	8007664 <__lshift+0x38>
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff fd95 	bl	800717c <_Balloc>
 8007652:	4605      	mov	r5, r0
 8007654:	b948      	cbnz	r0, 800766a <__lshift+0x3e>
 8007656:	4602      	mov	r2, r0
 8007658:	f240 11d9 	movw	r1, #473	; 0x1d9
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <__lshift+0xd8>)
 800765e:	482a      	ldr	r0, [pc, #168]	; (8007708 <__lshift+0xdc>)
 8007660:	f000 fcc8 	bl	8007ff4 <__assert_func>
 8007664:	3101      	adds	r1, #1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	e7ee      	b.n	8007648 <__lshift+0x1c>
 800766a:	2300      	movs	r3, #0
 800766c:	f100 0114 	add.w	r1, r0, #20
 8007670:	f100 0210 	add.w	r2, r0, #16
 8007674:	4618      	mov	r0, r3
 8007676:	4553      	cmp	r3, sl
 8007678:	db37      	blt.n	80076ea <__lshift+0xbe>
 800767a:	6920      	ldr	r0, [r4, #16]
 800767c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	f019 091f 	ands.w	r9, r9, #31
 8007688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800768c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007690:	d02f      	beq.n	80076f2 <__lshift+0xc6>
 8007692:	468a      	mov	sl, r1
 8007694:	f04f 0c00 	mov.w	ip, #0
 8007698:	f1c9 0e20 	rsb	lr, r9, #32
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	fa02 f209 	lsl.w	r2, r2, r9
 80076a2:	ea42 020c 	orr.w	r2, r2, ip
 80076a6:	f84a 2b04 	str.w	r2, [sl], #4
 80076aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ae:	4298      	cmp	r0, r3
 80076b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076b4:	d8f2      	bhi.n	800769c <__lshift+0x70>
 80076b6:	1b03      	subs	r3, r0, r4
 80076b8:	3b15      	subs	r3, #21
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	3304      	adds	r3, #4
 80076c0:	f104 0215 	add.w	r2, r4, #21
 80076c4:	4290      	cmp	r0, r2
 80076c6:	bf38      	it	cc
 80076c8:	2304      	movcc	r3, #4
 80076ca:	f841 c003 	str.w	ip, [r1, r3]
 80076ce:	f1bc 0f00 	cmp.w	ip, #0
 80076d2:	d001      	beq.n	80076d8 <__lshift+0xac>
 80076d4:	f108 0602 	add.w	r6, r8, #2
 80076d8:	3e01      	subs	r6, #1
 80076da:	4638      	mov	r0, r7
 80076dc:	4621      	mov	r1, r4
 80076de:	612e      	str	r6, [r5, #16]
 80076e0:	f7ff fd8c 	bl	80071fc <_Bfree>
 80076e4:	4628      	mov	r0, r5
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ee:	3301      	adds	r3, #1
 80076f0:	e7c1      	b.n	8007676 <__lshift+0x4a>
 80076f2:	3904      	subs	r1, #4
 80076f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f8:	4298      	cmp	r0, r3
 80076fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80076fe:	d8f9      	bhi.n	80076f4 <__lshift+0xc8>
 8007700:	e7ea      	b.n	80076d8 <__lshift+0xac>
 8007702:	bf00      	nop
 8007704:	0801a7a3 	.word	0x0801a7a3
 8007708:	0801a84e 	.word	0x0801a84e

0800770c <__mcmp>:
 800770c:	4603      	mov	r3, r0
 800770e:	690a      	ldr	r2, [r1, #16]
 8007710:	6900      	ldr	r0, [r0, #16]
 8007712:	b530      	push	{r4, r5, lr}
 8007714:	1a80      	subs	r0, r0, r2
 8007716:	d10d      	bne.n	8007734 <__mcmp+0x28>
 8007718:	3314      	adds	r3, #20
 800771a:	3114      	adds	r1, #20
 800771c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007720:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800772c:	4295      	cmp	r5, r2
 800772e:	d002      	beq.n	8007736 <__mcmp+0x2a>
 8007730:	d304      	bcc.n	800773c <__mcmp+0x30>
 8007732:	2001      	movs	r0, #1
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	42a3      	cmp	r3, r4
 8007738:	d3f4      	bcc.n	8007724 <__mcmp+0x18>
 800773a:	e7fb      	b.n	8007734 <__mcmp+0x28>
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	e7f8      	b.n	8007734 <__mcmp+0x28>
	...

08007744 <__mdiff>:
 8007744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	460d      	mov	r5, r1
 800774a:	4607      	mov	r7, r0
 800774c:	4611      	mov	r1, r2
 800774e:	4628      	mov	r0, r5
 8007750:	4614      	mov	r4, r2
 8007752:	f7ff ffdb 	bl	800770c <__mcmp>
 8007756:	1e06      	subs	r6, r0, #0
 8007758:	d111      	bne.n	800777e <__mdiff+0x3a>
 800775a:	4631      	mov	r1, r6
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff fd0d 	bl	800717c <_Balloc>
 8007762:	4602      	mov	r2, r0
 8007764:	b928      	cbnz	r0, 8007772 <__mdiff+0x2e>
 8007766:	f240 2132 	movw	r1, #562	; 0x232
 800776a:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <__mdiff+0x110>)
 800776c:	483a      	ldr	r0, [pc, #232]	; (8007858 <__mdiff+0x114>)
 800776e:	f000 fc41 	bl	8007ff4 <__assert_func>
 8007772:	2301      	movs	r3, #1
 8007774:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007778:	4610      	mov	r0, r2
 800777a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	bfa4      	itt	ge
 8007780:	4623      	movge	r3, r4
 8007782:	462c      	movge	r4, r5
 8007784:	4638      	mov	r0, r7
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	bfa6      	itte	ge
 800778a:	461d      	movge	r5, r3
 800778c:	2600      	movge	r6, #0
 800778e:	2601      	movlt	r6, #1
 8007790:	f7ff fcf4 	bl	800717c <_Balloc>
 8007794:	4602      	mov	r2, r0
 8007796:	b918      	cbnz	r0, 80077a0 <__mdiff+0x5c>
 8007798:	f44f 7110 	mov.w	r1, #576	; 0x240
 800779c:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <__mdiff+0x110>)
 800779e:	e7e5      	b.n	800776c <__mdiff+0x28>
 80077a0:	f102 0814 	add.w	r8, r2, #20
 80077a4:	46c2      	mov	sl, r8
 80077a6:	f04f 0c00 	mov.w	ip, #0
 80077aa:	6927      	ldr	r7, [r4, #16]
 80077ac:	60c6      	str	r6, [r0, #12]
 80077ae:	692e      	ldr	r6, [r5, #16]
 80077b0:	f104 0014 	add.w	r0, r4, #20
 80077b4:	f105 0914 	add.w	r9, r5, #20
 80077b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077c0:	3410      	adds	r4, #16
 80077c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80077ca:	fa1f f18b 	uxth.w	r1, fp
 80077ce:	448c      	add	ip, r1
 80077d0:	b299      	uxth	r1, r3
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	ebac 0101 	sub.w	r1, ip, r1
 80077d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077e0:	b289      	uxth	r1, r1
 80077e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077e6:	454e      	cmp	r6, r9
 80077e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80077ec:	f84a 3b04 	str.w	r3, [sl], #4
 80077f0:	d8e7      	bhi.n	80077c2 <__mdiff+0x7e>
 80077f2:	1b73      	subs	r3, r6, r5
 80077f4:	3b15      	subs	r3, #21
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	3515      	adds	r5, #21
 80077fc:	3304      	adds	r3, #4
 80077fe:	42ae      	cmp	r6, r5
 8007800:	bf38      	it	cc
 8007802:	2304      	movcc	r3, #4
 8007804:	4418      	add	r0, r3
 8007806:	4443      	add	r3, r8
 8007808:	461e      	mov	r6, r3
 800780a:	4605      	mov	r5, r0
 800780c:	4575      	cmp	r5, lr
 800780e:	d30e      	bcc.n	800782e <__mdiff+0xea>
 8007810:	f10e 0103 	add.w	r1, lr, #3
 8007814:	1a09      	subs	r1, r1, r0
 8007816:	f021 0103 	bic.w	r1, r1, #3
 800781a:	3803      	subs	r0, #3
 800781c:	4586      	cmp	lr, r0
 800781e:	bf38      	it	cc
 8007820:	2100      	movcc	r1, #0
 8007822:	4419      	add	r1, r3
 8007824:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007828:	b18b      	cbz	r3, 800784e <__mdiff+0x10a>
 800782a:	6117      	str	r7, [r2, #16]
 800782c:	e7a4      	b.n	8007778 <__mdiff+0x34>
 800782e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007832:	fa1f f188 	uxth.w	r1, r8
 8007836:	4461      	add	r1, ip
 8007838:	140c      	asrs	r4, r1, #16
 800783a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800783e:	b289      	uxth	r1, r1
 8007840:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007844:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007848:	f846 1b04 	str.w	r1, [r6], #4
 800784c:	e7de      	b.n	800780c <__mdiff+0xc8>
 800784e:	3f01      	subs	r7, #1
 8007850:	e7e8      	b.n	8007824 <__mdiff+0xe0>
 8007852:	bf00      	nop
 8007854:	0801a7a3 	.word	0x0801a7a3
 8007858:	0801a84e 	.word	0x0801a84e

0800785c <__ulp>:
 800785c:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <__ulp+0x48>)
 800785e:	400b      	ands	r3, r1
 8007860:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd02      	ble.n	800786e <__ulp+0x12>
 8007868:	2000      	movs	r0, #0
 800786a:	4619      	mov	r1, r3
 800786c:	4770      	bx	lr
 800786e:	425b      	negs	r3, r3
 8007870:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007880:	da04      	bge.n	800788c <__ulp+0x30>
 8007882:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007886:	fa43 f102 	asr.w	r1, r3, r2
 800788a:	4770      	bx	lr
 800788c:	f1a2 0314 	sub.w	r3, r2, #20
 8007890:	2b1e      	cmp	r3, #30
 8007892:	bfd6      	itet	le
 8007894:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007898:	2301      	movgt	r3, #1
 800789a:	fa22 f303 	lsrle.w	r3, r2, r3
 800789e:	4618      	mov	r0, r3
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	7ff00000 	.word	0x7ff00000

080078a8 <__b2d>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	6907      	ldr	r7, [r0, #16]
 80078ae:	f100 0914 	add.w	r9, r0, #20
 80078b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078ba:	f1a7 0804 	sub.w	r8, r7, #4
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fd4e 	bl	8007360 <__hi0bits>
 80078c4:	f1c0 0320 	rsb	r3, r0, #32
 80078c8:	280a      	cmp	r0, #10
 80078ca:	600b      	str	r3, [r1, #0]
 80078cc:	491f      	ldr	r1, [pc, #124]	; (800794c <__b2d+0xa4>)
 80078ce:	dc17      	bgt.n	8007900 <__b2d+0x58>
 80078d0:	45c1      	cmp	r9, r8
 80078d2:	bf28      	it	cs
 80078d4:	2200      	movcs	r2, #0
 80078d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80078da:	fa26 f30c 	lsr.w	r3, r6, ip
 80078de:	bf38      	it	cc
 80078e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078e4:	ea43 0501 	orr.w	r5, r3, r1
 80078e8:	f100 0315 	add.w	r3, r0, #21
 80078ec:	fa06 f303 	lsl.w	r3, r6, r3
 80078f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80078f4:	ea43 0402 	orr.w	r4, r3, r2
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007900:	45c1      	cmp	r9, r8
 8007902:	bf2e      	itee	cs
 8007904:	2200      	movcs	r2, #0
 8007906:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800790a:	f1a7 0808 	subcc.w	r8, r7, #8
 800790e:	f1b0 030b 	subs.w	r3, r0, #11
 8007912:	d016      	beq.n	8007942 <__b2d+0x9a>
 8007914:	f1c3 0720 	rsb	r7, r3, #32
 8007918:	fa22 f107 	lsr.w	r1, r2, r7
 800791c:	45c8      	cmp	r8, r9
 800791e:	fa06 f603 	lsl.w	r6, r6, r3
 8007922:	ea46 0601 	orr.w	r6, r6, r1
 8007926:	bf94      	ite	ls
 8007928:	2100      	movls	r1, #0
 800792a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800792e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007932:	fa02 f003 	lsl.w	r0, r2, r3
 8007936:	40f9      	lsrs	r1, r7
 8007938:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800793c:	ea40 0401 	orr.w	r4, r0, r1
 8007940:	e7da      	b.n	80078f8 <__b2d+0x50>
 8007942:	4614      	mov	r4, r2
 8007944:	ea46 0501 	orr.w	r5, r6, r1
 8007948:	e7d6      	b.n	80078f8 <__b2d+0x50>
 800794a:	bf00      	nop
 800794c:	3ff00000 	.word	0x3ff00000

08007950 <__d2b>:
 8007950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007954:	2101      	movs	r1, #1
 8007956:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800795a:	4690      	mov	r8, r2
 800795c:	461d      	mov	r5, r3
 800795e:	f7ff fc0d 	bl	800717c <_Balloc>
 8007962:	4604      	mov	r4, r0
 8007964:	b930      	cbnz	r0, 8007974 <__d2b+0x24>
 8007966:	4602      	mov	r2, r0
 8007968:	f240 310a 	movw	r1, #778	; 0x30a
 800796c:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <__d2b+0xb0>)
 800796e:	4825      	ldr	r0, [pc, #148]	; (8007a04 <__d2b+0xb4>)
 8007970:	f000 fb40 	bl	8007ff4 <__assert_func>
 8007974:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007978:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800797c:	bb2d      	cbnz	r5, 80079ca <__d2b+0x7a>
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	f1b8 0300 	subs.w	r3, r8, #0
 8007984:	d026      	beq.n	80079d4 <__d2b+0x84>
 8007986:	4668      	mov	r0, sp
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	f7ff fd09 	bl	80073a0 <__lo0bits>
 800798e:	9900      	ldr	r1, [sp, #0]
 8007990:	b1f0      	cbz	r0, 80079d0 <__d2b+0x80>
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	f1c0 0320 	rsb	r3, r0, #32
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	430b      	orrs	r3, r1
 800799e:	40c2      	lsrs	r2, r0
 80079a0:	6163      	str	r3, [r4, #20]
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bf14      	ite	ne
 80079aa:	2102      	movne	r1, #2
 80079ac:	2101      	moveq	r1, #1
 80079ae:	61a3      	str	r3, [r4, #24]
 80079b0:	6121      	str	r1, [r4, #16]
 80079b2:	b1c5      	cbz	r5, 80079e6 <__d2b+0x96>
 80079b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079b8:	4405      	add	r5, r0
 80079ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079be:	603d      	str	r5, [r7, #0]
 80079c0:	6030      	str	r0, [r6, #0]
 80079c2:	4620      	mov	r0, r4
 80079c4:	b002      	add	sp, #8
 80079c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ce:	e7d6      	b.n	800797e <__d2b+0x2e>
 80079d0:	6161      	str	r1, [r4, #20]
 80079d2:	e7e7      	b.n	80079a4 <__d2b+0x54>
 80079d4:	a801      	add	r0, sp, #4
 80079d6:	f7ff fce3 	bl	80073a0 <__lo0bits>
 80079da:	2101      	movs	r1, #1
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	6121      	str	r1, [r4, #16]
 80079e0:	6163      	str	r3, [r4, #20]
 80079e2:	3020      	adds	r0, #32
 80079e4:	e7e5      	b.n	80079b2 <__d2b+0x62>
 80079e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80079ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079ee:	6038      	str	r0, [r7, #0]
 80079f0:	6918      	ldr	r0, [r3, #16]
 80079f2:	f7ff fcb5 	bl	8007360 <__hi0bits>
 80079f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80079fa:	6031      	str	r1, [r6, #0]
 80079fc:	e7e1      	b.n	80079c2 <__d2b+0x72>
 80079fe:	bf00      	nop
 8007a00:	0801a7a3 	.word	0x0801a7a3
 8007a04:	0801a84e 	.word	0x0801a84e

08007a08 <__ratio>:
 8007a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4688      	mov	r8, r1
 8007a0e:	4669      	mov	r1, sp
 8007a10:	4681      	mov	r9, r0
 8007a12:	f7ff ff49 	bl	80078a8 <__b2d>
 8007a16:	460f      	mov	r7, r1
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	a901      	add	r1, sp, #4
 8007a20:	f7ff ff42 	bl	80078a8 <__b2d>
 8007a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a2c:	468b      	mov	fp, r1
 8007a2e:	eba3 0c02 	sub.w	ip, r3, r2
 8007a32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfd5      	itete	le
 8007a40:	460a      	movle	r2, r1
 8007a42:	462a      	movgt	r2, r5
 8007a44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a4c:	bfd8      	it	le
 8007a4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007a52:	465b      	mov	r3, fp
 8007a54:	4602      	mov	r2, r0
 8007a56:	4639      	mov	r1, r7
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7fa f9f7 	bl	8001e4c <__aeabi_ddiv>
 8007a5e:	b003      	add	sp, #12
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a64 <__copybits>:
 8007a64:	3901      	subs	r1, #1
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	1149      	asrs	r1, r1, #5
 8007a6a:	6914      	ldr	r4, [r2, #16]
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	f102 0314 	add.w	r3, r2, #20
 8007a72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a7a:	1f05      	subs	r5, r0, #4
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d30c      	bcc.n	8007a9a <__copybits+0x36>
 8007a80:	1aa3      	subs	r3, r4, r2
 8007a82:	3b11      	subs	r3, #17
 8007a84:	f023 0303 	bic.w	r3, r3, #3
 8007a88:	3211      	adds	r2, #17
 8007a8a:	42a2      	cmp	r2, r4
 8007a8c:	bf88      	it	hi
 8007a8e:	2300      	movhi	r3, #0
 8007a90:	4418      	add	r0, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	4288      	cmp	r0, r1
 8007a96:	d305      	bcc.n	8007aa4 <__copybits+0x40>
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007aa2:	e7eb      	b.n	8007a7c <__copybits+0x18>
 8007aa4:	f840 3b04 	str.w	r3, [r0], #4
 8007aa8:	e7f4      	b.n	8007a94 <__copybits+0x30>

08007aaa <__any_on>:
 8007aaa:	f100 0214 	add.w	r2, r0, #20
 8007aae:	6900      	ldr	r0, [r0, #16]
 8007ab0:	114b      	asrs	r3, r1, #5
 8007ab2:	4298      	cmp	r0, r3
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	db11      	blt.n	8007adc <__any_on+0x32>
 8007ab8:	dd0a      	ble.n	8007ad0 <__any_on+0x26>
 8007aba:	f011 011f 	ands.w	r1, r1, #31
 8007abe:	d007      	beq.n	8007ad0 <__any_on+0x26>
 8007ac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ac4:	fa24 f001 	lsr.w	r0, r4, r1
 8007ac8:	fa00 f101 	lsl.w	r1, r0, r1
 8007acc:	428c      	cmp	r4, r1
 8007ace:	d10b      	bne.n	8007ae8 <__any_on+0x3e>
 8007ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d803      	bhi.n	8007ae0 <__any_on+0x36>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	4603      	mov	r3, r0
 8007ade:	e7f7      	b.n	8007ad0 <__any_on+0x26>
 8007ae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d0f5      	beq.n	8007ad4 <__any_on+0x2a>
 8007ae8:	2001      	movs	r0, #1
 8007aea:	e7f6      	b.n	8007ada <__any_on+0x30>

08007aec <_calloc_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	fba1 5402 	umull	r5, r4, r1, r2
 8007af2:	b934      	cbnz	r4, 8007b02 <_calloc_r+0x16>
 8007af4:	4629      	mov	r1, r5
 8007af6:	f000 f875 	bl	8007be4 <_malloc_r>
 8007afa:	4606      	mov	r6, r0
 8007afc:	b928      	cbnz	r0, 8007b0a <_calloc_r+0x1e>
 8007afe:	4630      	mov	r0, r6
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	220c      	movs	r2, #12
 8007b04:	2600      	movs	r6, #0
 8007b06:	6002      	str	r2, [r0, #0]
 8007b08:	e7f9      	b.n	8007afe <_calloc_r+0x12>
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f7fc fbe5 	bl	80042dc <memset>
 8007b12:	e7f4      	b.n	8007afe <_calloc_r+0x12>

08007b14 <_free_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4605      	mov	r5, r0
 8007b18:	2900      	cmp	r1, #0
 8007b1a:	d040      	beq.n	8007b9e <_free_r+0x8a>
 8007b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b20:	1f0c      	subs	r4, r1, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfb8      	it	lt
 8007b26:	18e4      	addlt	r4, r4, r3
 8007b28:	f000 faae 	bl	8008088 <__malloc_lock>
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <_free_r+0x8c>)
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	b933      	cbnz	r3, 8007b40 <_free_r+0x2c>
 8007b32:	6063      	str	r3, [r4, #4]
 8007b34:	6014      	str	r4, [r2, #0]
 8007b36:	4628      	mov	r0, r5
 8007b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3c:	f000 baaa 	b.w	8008094 <__malloc_unlock>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d908      	bls.n	8007b56 <_free_r+0x42>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	1821      	adds	r1, r4, r0
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf01      	itttt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	1809      	addeq	r1, r1, r0
 8007b52:	6021      	streq	r1, [r4, #0]
 8007b54:	e7ed      	b.n	8007b32 <_free_r+0x1e>
 8007b56:	461a      	mov	r2, r3
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	b10b      	cbz	r3, 8007b60 <_free_r+0x4c>
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	d9fa      	bls.n	8007b56 <_free_r+0x42>
 8007b60:	6811      	ldr	r1, [r2, #0]
 8007b62:	1850      	adds	r0, r2, r1
 8007b64:	42a0      	cmp	r0, r4
 8007b66:	d10b      	bne.n	8007b80 <_free_r+0x6c>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	1850      	adds	r0, r2, r1
 8007b6e:	4283      	cmp	r3, r0
 8007b70:	6011      	str	r1, [r2, #0]
 8007b72:	d1e0      	bne.n	8007b36 <_free_r+0x22>
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4401      	add	r1, r0
 8007b7a:	6011      	str	r1, [r2, #0]
 8007b7c:	6053      	str	r3, [r2, #4]
 8007b7e:	e7da      	b.n	8007b36 <_free_r+0x22>
 8007b80:	d902      	bls.n	8007b88 <_free_r+0x74>
 8007b82:	230c      	movs	r3, #12
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	e7d6      	b.n	8007b36 <_free_r+0x22>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	1821      	adds	r1, r4, r0
 8007b8c:	428b      	cmp	r3, r1
 8007b8e:	bf01      	itttt	eq
 8007b90:	6819      	ldreq	r1, [r3, #0]
 8007b92:	685b      	ldreq	r3, [r3, #4]
 8007b94:	1809      	addeq	r1, r1, r0
 8007b96:	6021      	streq	r1, [r4, #0]
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	6054      	str	r4, [r2, #4]
 8007b9c:	e7cb      	b.n	8007b36 <_free_r+0x22>
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200008e8 	.word	0x200008e8

08007ba4 <sbrk_aligned>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4e0e      	ldr	r6, [pc, #56]	; (8007be0 <sbrk_aligned+0x3c>)
 8007ba8:	460c      	mov	r4, r1
 8007baa:	6831      	ldr	r1, [r6, #0]
 8007bac:	4605      	mov	r5, r0
 8007bae:	b911      	cbnz	r1, 8007bb6 <sbrk_aligned+0x12>
 8007bb0:	f000 f9ee 	bl	8007f90 <_sbrk_r>
 8007bb4:	6030      	str	r0, [r6, #0]
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 f9e9 	bl	8007f90 <_sbrk_r>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d00a      	beq.n	8007bd8 <sbrk_aligned+0x34>
 8007bc2:	1cc4      	adds	r4, r0, #3
 8007bc4:	f024 0403 	bic.w	r4, r4, #3
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	d007      	beq.n	8007bdc <sbrk_aligned+0x38>
 8007bcc:	1a21      	subs	r1, r4, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f9de 	bl	8007f90 <_sbrk_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d101      	bne.n	8007bdc <sbrk_aligned+0x38>
 8007bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	200008ec 	.word	0x200008ec

08007be4 <_malloc_r>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	1ccd      	adds	r5, r1, #3
 8007bea:	f025 0503 	bic.w	r5, r5, #3
 8007bee:	3508      	adds	r5, #8
 8007bf0:	2d0c      	cmp	r5, #12
 8007bf2:	bf38      	it	cc
 8007bf4:	250c      	movcc	r5, #12
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	db01      	blt.n	8007c00 <_malloc_r+0x1c>
 8007bfc:	42a9      	cmp	r1, r5
 8007bfe:	d905      	bls.n	8007c0c <_malloc_r+0x28>
 8007c00:	230c      	movs	r3, #12
 8007c02:	2600      	movs	r6, #0
 8007c04:	603b      	str	r3, [r7, #0]
 8007c06:	4630      	mov	r0, r6
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0c:	4e2e      	ldr	r6, [pc, #184]	; (8007cc8 <_malloc_r+0xe4>)
 8007c0e:	f000 fa3b 	bl	8008088 <__malloc_lock>
 8007c12:	6833      	ldr	r3, [r6, #0]
 8007c14:	461c      	mov	r4, r3
 8007c16:	bb34      	cbnz	r4, 8007c66 <_malloc_r+0x82>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f7ff ffc2 	bl	8007ba4 <sbrk_aligned>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	4604      	mov	r4, r0
 8007c24:	d14d      	bne.n	8007cc2 <_malloc_r+0xde>
 8007c26:	6834      	ldr	r4, [r6, #0]
 8007c28:	4626      	mov	r6, r4
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d140      	bne.n	8007cb0 <_malloc_r+0xcc>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	4631      	mov	r1, r6
 8007c32:	4638      	mov	r0, r7
 8007c34:	eb04 0803 	add.w	r8, r4, r3
 8007c38:	f000 f9aa 	bl	8007f90 <_sbrk_r>
 8007c3c:	4580      	cmp	r8, r0
 8007c3e:	d13a      	bne.n	8007cb6 <_malloc_r+0xd2>
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	3503      	adds	r5, #3
 8007c44:	1a6d      	subs	r5, r5, r1
 8007c46:	f025 0503 	bic.w	r5, r5, #3
 8007c4a:	3508      	adds	r5, #8
 8007c4c:	2d0c      	cmp	r5, #12
 8007c4e:	bf38      	it	cc
 8007c50:	250c      	movcc	r5, #12
 8007c52:	4638      	mov	r0, r7
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7ff ffa5 	bl	8007ba4 <sbrk_aligned>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d02b      	beq.n	8007cb6 <_malloc_r+0xd2>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	442b      	add	r3, r5
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	e00e      	b.n	8007c84 <_malloc_r+0xa0>
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	1b52      	subs	r2, r2, r5
 8007c6a:	d41e      	bmi.n	8007caa <_malloc_r+0xc6>
 8007c6c:	2a0b      	cmp	r2, #11
 8007c6e:	d916      	bls.n	8007c9e <_malloc_r+0xba>
 8007c70:	1961      	adds	r1, r4, r5
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	6025      	str	r5, [r4, #0]
 8007c76:	bf18      	it	ne
 8007c78:	6059      	strne	r1, [r3, #4]
 8007c7a:	6863      	ldr	r3, [r4, #4]
 8007c7c:	bf08      	it	eq
 8007c7e:	6031      	streq	r1, [r6, #0]
 8007c80:	5162      	str	r2, [r4, r5]
 8007c82:	604b      	str	r3, [r1, #4]
 8007c84:	4638      	mov	r0, r7
 8007c86:	f104 060b 	add.w	r6, r4, #11
 8007c8a:	f000 fa03 	bl	8008094 <__malloc_unlock>
 8007c8e:	f026 0607 	bic.w	r6, r6, #7
 8007c92:	1d23      	adds	r3, r4, #4
 8007c94:	1af2      	subs	r2, r6, r3
 8007c96:	d0b6      	beq.n	8007c06 <_malloc_r+0x22>
 8007c98:	1b9b      	subs	r3, r3, r6
 8007c9a:	50a3      	str	r3, [r4, r2]
 8007c9c:	e7b3      	b.n	8007c06 <_malloc_r+0x22>
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	bf0c      	ite	eq
 8007ca4:	6032      	streq	r2, [r6, #0]
 8007ca6:	605a      	strne	r2, [r3, #4]
 8007ca8:	e7ec      	b.n	8007c84 <_malloc_r+0xa0>
 8007caa:	4623      	mov	r3, r4
 8007cac:	6864      	ldr	r4, [r4, #4]
 8007cae:	e7b2      	b.n	8007c16 <_malloc_r+0x32>
 8007cb0:	4634      	mov	r4, r6
 8007cb2:	6876      	ldr	r6, [r6, #4]
 8007cb4:	e7b9      	b.n	8007c2a <_malloc_r+0x46>
 8007cb6:	230c      	movs	r3, #12
 8007cb8:	4638      	mov	r0, r7
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	f000 f9ea 	bl	8008094 <__malloc_unlock>
 8007cc0:	e7a1      	b.n	8007c06 <_malloc_r+0x22>
 8007cc2:	6025      	str	r5, [r4, #0]
 8007cc4:	e7de      	b.n	8007c84 <_malloc_r+0xa0>
 8007cc6:	bf00      	nop
 8007cc8:	200008e8 	.word	0x200008e8

08007ccc <__ssputs_r>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	688e      	ldr	r6, [r1, #8]
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	429e      	cmp	r6, r3
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	4690      	mov	r8, r2
 8007cda:	461f      	mov	r7, r3
 8007cdc:	d838      	bhi.n	8007d50 <__ssputs_r+0x84>
 8007cde:	898a      	ldrh	r2, [r1, #12]
 8007ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ce4:	d032      	beq.n	8007d4c <__ssputs_r+0x80>
 8007ce6:	6825      	ldr	r5, [r4, #0]
 8007ce8:	6909      	ldr	r1, [r1, #16]
 8007cea:	3301      	adds	r3, #1
 8007cec:	eba5 0901 	sub.w	r9, r5, r1
 8007cf0:	6965      	ldr	r5, [r4, #20]
 8007cf2:	444b      	add	r3, r9
 8007cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cfc:	106d      	asrs	r5, r5, #1
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	bf38      	it	cc
 8007d02:	461d      	movcc	r5, r3
 8007d04:	0553      	lsls	r3, r2, #21
 8007d06:	d531      	bpl.n	8007d6c <__ssputs_r+0xa0>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7ff ff6b 	bl	8007be4 <_malloc_r>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	b950      	cbnz	r0, 8007d28 <__ssputs_r+0x5c>
 8007d12:	230c      	movs	r3, #12
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	f8ca 3000 	str.w	r3, [sl]
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	464a      	mov	r2, r9
 8007d2a:	6921      	ldr	r1, [r4, #16]
 8007d2c:	f7ff fa18 	bl	8007160 <memcpy>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	6126      	str	r6, [r4, #16]
 8007d3e:	444e      	add	r6, r9
 8007d40:	6026      	str	r6, [r4, #0]
 8007d42:	463e      	mov	r6, r7
 8007d44:	6165      	str	r5, [r4, #20]
 8007d46:	eba5 0509 	sub.w	r5, r5, r9
 8007d4a:	60a5      	str	r5, [r4, #8]
 8007d4c:	42be      	cmp	r6, r7
 8007d4e:	d900      	bls.n	8007d52 <__ssputs_r+0x86>
 8007d50:	463e      	mov	r6, r7
 8007d52:	4632      	mov	r2, r6
 8007d54:	4641      	mov	r1, r8
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	f000 f97c 	bl	8008054 <memmove>
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	2000      	movs	r0, #0
 8007d60:	1b9b      	subs	r3, r3, r6
 8007d62:	60a3      	str	r3, [r4, #8]
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	4433      	add	r3, r6
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	e7db      	b.n	8007d24 <__ssputs_r+0x58>
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	f000 f997 	bl	80080a0 <_realloc_r>
 8007d72:	4606      	mov	r6, r0
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d1e1      	bne.n	8007d3c <__ssputs_r+0x70>
 8007d78:	4650      	mov	r0, sl
 8007d7a:	6921      	ldr	r1, [r4, #16]
 8007d7c:	f7ff feca 	bl	8007b14 <_free_r>
 8007d80:	e7c7      	b.n	8007d12 <__ssputs_r+0x46>
	...

08007d84 <_svfiprintf_r>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	4698      	mov	r8, r3
 8007d8a:	898b      	ldrh	r3, [r1, #12]
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	460d      	mov	r5, r1
 8007d92:	4614      	mov	r4, r2
 8007d94:	b09d      	sub	sp, #116	; 0x74
 8007d96:	d50e      	bpl.n	8007db6 <_svfiprintf_r+0x32>
 8007d98:	690b      	ldr	r3, [r1, #16]
 8007d9a:	b963      	cbnz	r3, 8007db6 <_svfiprintf_r+0x32>
 8007d9c:	2140      	movs	r1, #64	; 0x40
 8007d9e:	f7ff ff21 	bl	8007be4 <_malloc_r>
 8007da2:	6028      	str	r0, [r5, #0]
 8007da4:	6128      	str	r0, [r5, #16]
 8007da6:	b920      	cbnz	r0, 8007db2 <_svfiprintf_r+0x2e>
 8007da8:	230c      	movs	r3, #12
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	f04f 30ff 	mov.w	r0, #4294967295
 8007db0:	e0d1      	b.n	8007f56 <_svfiprintf_r+0x1d2>
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	616b      	str	r3, [r5, #20]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dba:	2320      	movs	r3, #32
 8007dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc0:	2330      	movs	r3, #48	; 0x30
 8007dc2:	f04f 0901 	mov.w	r9, #1
 8007dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f70 <_svfiprintf_r+0x1ec>
 8007dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dda:	b10a      	cbz	r2, 8007de0 <_svfiprintf_r+0x5c>
 8007ddc:	2a25      	cmp	r2, #37	; 0x25
 8007dde:	d1f9      	bne.n	8007dd4 <_svfiprintf_r+0x50>
 8007de0:	ebba 0b04 	subs.w	fp, sl, r4
 8007de4:	d00b      	beq.n	8007dfe <_svfiprintf_r+0x7a>
 8007de6:	465b      	mov	r3, fp
 8007de8:	4622      	mov	r2, r4
 8007dea:	4629      	mov	r1, r5
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7ff ff6d 	bl	8007ccc <__ssputs_r>
 8007df2:	3001      	adds	r0, #1
 8007df4:	f000 80aa 	beq.w	8007f4c <_svfiprintf_r+0x1c8>
 8007df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dfa:	445a      	add	r2, fp
 8007dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a2 	beq.w	8007f4c <_svfiprintf_r+0x1c8>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e12:	f10a 0a01 	add.w	sl, sl, #1
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	9307      	str	r3, [sp, #28]
 8007e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e20:	4654      	mov	r4, sl
 8007e22:	2205      	movs	r2, #5
 8007e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e28:	4851      	ldr	r0, [pc, #324]	; (8007f70 <_svfiprintf_r+0x1ec>)
 8007e2a:	f7ff f98b 	bl	8007144 <memchr>
 8007e2e:	9a04      	ldr	r2, [sp, #16]
 8007e30:	b9d8      	cbnz	r0, 8007e6a <_svfiprintf_r+0xe6>
 8007e32:	06d0      	lsls	r0, r2, #27
 8007e34:	bf44      	itt	mi
 8007e36:	2320      	movmi	r3, #32
 8007e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3c:	0711      	lsls	r1, r2, #28
 8007e3e:	bf44      	itt	mi
 8007e40:	232b      	movmi	r3, #43	; 0x2b
 8007e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e46:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4c:	d015      	beq.n	8007e7a <_svfiprintf_r+0xf6>
 8007e4e:	4654      	mov	r4, sl
 8007e50:	2000      	movs	r0, #0
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	9a07      	ldr	r2, [sp, #28]
 8007e58:	4621      	mov	r1, r4
 8007e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e5e:	3b30      	subs	r3, #48	; 0x30
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d94e      	bls.n	8007f02 <_svfiprintf_r+0x17e>
 8007e64:	b1b0      	cbz	r0, 8007e94 <_svfiprintf_r+0x110>
 8007e66:	9207      	str	r2, [sp, #28]
 8007e68:	e014      	b.n	8007e94 <_svfiprintf_r+0x110>
 8007e6a:	eba0 0308 	sub.w	r3, r0, r8
 8007e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	46a2      	mov	sl, r4
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	e7d2      	b.n	8007e20 <_svfiprintf_r+0x9c>
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	1d19      	adds	r1, r3, #4
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	9103      	str	r1, [sp, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bfbb      	ittet	lt
 8007e86:	425b      	neglt	r3, r3
 8007e88:	f042 0202 	orrlt.w	r2, r2, #2
 8007e8c:	9307      	strge	r3, [sp, #28]
 8007e8e:	9307      	strlt	r3, [sp, #28]
 8007e90:	bfb8      	it	lt
 8007e92:	9204      	strlt	r2, [sp, #16]
 8007e94:	7823      	ldrb	r3, [r4, #0]
 8007e96:	2b2e      	cmp	r3, #46	; 0x2e
 8007e98:	d10c      	bne.n	8007eb4 <_svfiprintf_r+0x130>
 8007e9a:	7863      	ldrb	r3, [r4, #1]
 8007e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9e:	d135      	bne.n	8007f0c <_svfiprintf_r+0x188>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	3402      	adds	r4, #2
 8007ea4:	1d1a      	adds	r2, r3, #4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	9203      	str	r2, [sp, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eb2:	9305      	str	r3, [sp, #20]
 8007eb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007f74 <_svfiprintf_r+0x1f0>
 8007eb8:	2203      	movs	r2, #3
 8007eba:	4650      	mov	r0, sl
 8007ebc:	7821      	ldrb	r1, [r4, #0]
 8007ebe:	f7ff f941 	bl	8007144 <memchr>
 8007ec2:	b140      	cbz	r0, 8007ed6 <_svfiprintf_r+0x152>
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	eba0 000a 	sub.w	r0, r0, sl
 8007eca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	4303      	orrs	r3, r0
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eda:	2206      	movs	r2, #6
 8007edc:	4826      	ldr	r0, [pc, #152]	; (8007f78 <_svfiprintf_r+0x1f4>)
 8007ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ee2:	f7ff f92f 	bl	8007144 <memchr>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d038      	beq.n	8007f5c <_svfiprintf_r+0x1d8>
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <_svfiprintf_r+0x1f8>)
 8007eec:	bb1b      	cbnz	r3, 8007f36 <_svfiprintf_r+0x1b2>
 8007eee:	9b03      	ldr	r3, [sp, #12]
 8007ef0:	3307      	adds	r3, #7
 8007ef2:	f023 0307 	bic.w	r3, r3, #7
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	4433      	add	r3, r6
 8007efe:	9309      	str	r3, [sp, #36]	; 0x24
 8007f00:	e767      	b.n	8007dd2 <_svfiprintf_r+0x4e>
 8007f02:	460c      	mov	r4, r1
 8007f04:	2001      	movs	r0, #1
 8007f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f0a:	e7a5      	b.n	8007e58 <_svfiprintf_r+0xd4>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	4619      	mov	r1, r3
 8007f14:	3401      	adds	r4, #1
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f1e:	3a30      	subs	r2, #48	; 0x30
 8007f20:	2a09      	cmp	r2, #9
 8007f22:	d903      	bls.n	8007f2c <_svfiprintf_r+0x1a8>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0c5      	beq.n	8007eb4 <_svfiprintf_r+0x130>
 8007f28:	9105      	str	r1, [sp, #20]
 8007f2a:	e7c3      	b.n	8007eb4 <_svfiprintf_r+0x130>
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	2301      	movs	r3, #1
 8007f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f34:	e7f0      	b.n	8007f18 <_svfiprintf_r+0x194>
 8007f36:	ab03      	add	r3, sp, #12
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <_svfiprintf_r+0x1fc>)
 8007f40:	a904      	add	r1, sp, #16
 8007f42:	f7fc fa71 	bl	8004428 <_printf_float>
 8007f46:	1c42      	adds	r2, r0, #1
 8007f48:	4606      	mov	r6, r0
 8007f4a:	d1d6      	bne.n	8007efa <_svfiprintf_r+0x176>
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	065b      	lsls	r3, r3, #25
 8007f50:	f53f af2c 	bmi.w	8007dac <_svfiprintf_r+0x28>
 8007f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f56:	b01d      	add	sp, #116	; 0x74
 8007f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4638      	mov	r0, r7
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <_svfiprintf_r+0x1fc>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	f7fc fcfa 	bl	8004960 <_printf_i>
 8007f6c:	e7eb      	b.n	8007f46 <_svfiprintf_r+0x1c2>
 8007f6e:	bf00      	nop
 8007f70:	0801a9cc 	.word	0x0801a9cc
 8007f74:	0801a9d2 	.word	0x0801a9d2
 8007f78:	0801a9d6 	.word	0x0801a9d6
 8007f7c:	08004429 	.word	0x08004429
 8007f80:	08007ccd 	.word	0x08007ccd

08007f84 <nan>:
 8007f84:	2000      	movs	r0, #0
 8007f86:	4901      	ldr	r1, [pc, #4]	; (8007f8c <nan+0x8>)
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	7ff80000 	.word	0x7ff80000

08007f90 <_sbrk_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	2300      	movs	r3, #0
 8007f94:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_sbrk_r+0x1c>)
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f9 fc42 	bl	8001824 <_sbrk>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_sbrk_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_sbrk_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200008f0 	.word	0x200008f0

08007fb0 <strncmp>:
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	b172      	cbz	r2, 8007fd4 <strncmp+0x24>
 8007fb6:	3901      	subs	r1, #1
 8007fb8:	1884      	adds	r4, r0, r2
 8007fba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fc2:	4290      	cmp	r0, r2
 8007fc4:	d101      	bne.n	8007fca <strncmp+0x1a>
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	d101      	bne.n	8007fce <strncmp+0x1e>
 8007fca:	1a80      	subs	r0, r0, r2
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d1f3      	bne.n	8007fba <strncmp+0xa>
 8007fd2:	e7fa      	b.n	8007fca <strncmp+0x1a>
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	e7f9      	b.n	8007fcc <strncmp+0x1c>

08007fd8 <__ascii_wctomb>:
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	b141      	cbz	r1, 8007ff0 <__ascii_wctomb+0x18>
 8007fde:	2aff      	cmp	r2, #255	; 0xff
 8007fe0:	d904      	bls.n	8007fec <__ascii_wctomb+0x14>
 8007fe2:	228a      	movs	r2, #138	; 0x8a
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	4770      	bx	lr
 8007fec:	2001      	movs	r0, #1
 8007fee:	700a      	strb	r2, [r1, #0]
 8007ff0:	4770      	bx	lr
	...

08007ff4 <__assert_func>:
 8007ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <__assert_func+0x2c>)
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68d8      	ldr	r0, [r3, #12]
 8008002:	b14c      	cbz	r4, 8008018 <__assert_func+0x24>
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <__assert_func+0x30>)
 8008006:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800800a:	9100      	str	r1, [sp, #0]
 800800c:	462b      	mov	r3, r5
 800800e:	4906      	ldr	r1, [pc, #24]	; (8008028 <__assert_func+0x34>)
 8008010:	f000 f80e 	bl	8008030 <fiprintf>
 8008014:	f000 fa8a 	bl	800852c <abort>
 8008018:	4b04      	ldr	r3, [pc, #16]	; (800802c <__assert_func+0x38>)
 800801a:	461c      	mov	r4, r3
 800801c:	e7f3      	b.n	8008006 <__assert_func+0x12>
 800801e:	bf00      	nop
 8008020:	2000000c 	.word	0x2000000c
 8008024:	0801a9dd 	.word	0x0801a9dd
 8008028:	0801a9ea 	.word	0x0801a9ea
 800802c:	0801a51e 	.word	0x0801a51e

08008030 <fiprintf>:
 8008030:	b40e      	push	{r1, r2, r3}
 8008032:	b503      	push	{r0, r1, lr}
 8008034:	4601      	mov	r1, r0
 8008036:	ab03      	add	r3, sp, #12
 8008038:	4805      	ldr	r0, [pc, #20]	; (8008050 <fiprintf+0x20>)
 800803a:	f853 2b04 	ldr.w	r2, [r3], #4
 800803e:	6800      	ldr	r0, [r0, #0]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	f000 f883 	bl	800814c <_vfiprintf_r>
 8008046:	b002      	add	sp, #8
 8008048:	f85d eb04 	ldr.w	lr, [sp], #4
 800804c:	b003      	add	sp, #12
 800804e:	4770      	bx	lr
 8008050:	2000000c 	.word	0x2000000c

08008054 <memmove>:
 8008054:	4288      	cmp	r0, r1
 8008056:	b510      	push	{r4, lr}
 8008058:	eb01 0402 	add.w	r4, r1, r2
 800805c:	d902      	bls.n	8008064 <memmove+0x10>
 800805e:	4284      	cmp	r4, r0
 8008060:	4623      	mov	r3, r4
 8008062:	d807      	bhi.n	8008074 <memmove+0x20>
 8008064:	1e43      	subs	r3, r0, #1
 8008066:	42a1      	cmp	r1, r4
 8008068:	d008      	beq.n	800807c <memmove+0x28>
 800806a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008072:	e7f8      	b.n	8008066 <memmove+0x12>
 8008074:	4601      	mov	r1, r0
 8008076:	4402      	add	r2, r0
 8008078:	428a      	cmp	r2, r1
 800807a:	d100      	bne.n	800807e <memmove+0x2a>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008086:	e7f7      	b.n	8008078 <memmove+0x24>

08008088 <__malloc_lock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_lock+0x8>)
 800808a:	f000 bc0b 	b.w	80088a4 <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	200008f4 	.word	0x200008f4

08008094 <__malloc_unlock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_unlock+0x8>)
 8008096:	f000 bc06 	b.w	80088a6 <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	200008f4 	.word	0x200008f4

080080a0 <_realloc_r>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4680      	mov	r8, r0
 80080a6:	4614      	mov	r4, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	b921      	cbnz	r1, 80080b6 <_realloc_r+0x16>
 80080ac:	4611      	mov	r1, r2
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f7ff bd97 	b.w	8007be4 <_malloc_r>
 80080b6:	b92a      	cbnz	r2, 80080c4 <_realloc_r+0x24>
 80080b8:	f7ff fd2c 	bl	8007b14 <_free_r>
 80080bc:	4625      	mov	r5, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	f000 fc56 	bl	8008974 <_malloc_usable_size_r>
 80080c8:	4284      	cmp	r4, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	d802      	bhi.n	80080d4 <_realloc_r+0x34>
 80080ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080d2:	d812      	bhi.n	80080fa <_realloc_r+0x5a>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff fd84 	bl	8007be4 <_malloc_r>
 80080dc:	4605      	mov	r5, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0ed      	beq.n	80080be <_realloc_r+0x1e>
 80080e2:	42bc      	cmp	r4, r7
 80080e4:	4622      	mov	r2, r4
 80080e6:	4631      	mov	r1, r6
 80080e8:	bf28      	it	cs
 80080ea:	463a      	movcs	r2, r7
 80080ec:	f7ff f838 	bl	8007160 <memcpy>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7ff fd0e 	bl	8007b14 <_free_r>
 80080f8:	e7e1      	b.n	80080be <_realloc_r+0x1e>
 80080fa:	4635      	mov	r5, r6
 80080fc:	e7df      	b.n	80080be <_realloc_r+0x1e>

080080fe <__sfputc_r>:
 80080fe:	6893      	ldr	r3, [r2, #8]
 8008100:	b410      	push	{r4}
 8008102:	3b01      	subs	r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	6093      	str	r3, [r2, #8]
 8008108:	da07      	bge.n	800811a <__sfputc_r+0x1c>
 800810a:	6994      	ldr	r4, [r2, #24]
 800810c:	42a3      	cmp	r3, r4
 800810e:	db01      	blt.n	8008114 <__sfputc_r+0x16>
 8008110:	290a      	cmp	r1, #10
 8008112:	d102      	bne.n	800811a <__sfputc_r+0x1c>
 8008114:	bc10      	pop	{r4}
 8008116:	f000 b949 	b.w	80083ac <__swbuf_r>
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	1c58      	adds	r0, r3, #1
 800811e:	6010      	str	r0, [r2, #0]
 8008120:	7019      	strb	r1, [r3, #0]
 8008122:	4608      	mov	r0, r1
 8008124:	bc10      	pop	{r4}
 8008126:	4770      	bx	lr

08008128 <__sfputs_r>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	4614      	mov	r4, r2
 8008130:	18d5      	adds	r5, r2, r3
 8008132:	42ac      	cmp	r4, r5
 8008134:	d101      	bne.n	800813a <__sfputs_r+0x12>
 8008136:	2000      	movs	r0, #0
 8008138:	e007      	b.n	800814a <__sfputs_r+0x22>
 800813a:	463a      	mov	r2, r7
 800813c:	4630      	mov	r0, r6
 800813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008142:	f7ff ffdc 	bl	80080fe <__sfputc_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d1f3      	bne.n	8008132 <__sfputs_r+0xa>
 800814a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800814c <_vfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	460d      	mov	r5, r1
 8008152:	4614      	mov	r4, r2
 8008154:	4698      	mov	r8, r3
 8008156:	4606      	mov	r6, r0
 8008158:	b09d      	sub	sp, #116	; 0x74
 800815a:	b118      	cbz	r0, 8008164 <_vfiprintf_r+0x18>
 800815c:	6983      	ldr	r3, [r0, #24]
 800815e:	b90b      	cbnz	r3, 8008164 <_vfiprintf_r+0x18>
 8008160:	f000 fb02 	bl	8008768 <__sinit>
 8008164:	4b89      	ldr	r3, [pc, #548]	; (800838c <_vfiprintf_r+0x240>)
 8008166:	429d      	cmp	r5, r3
 8008168:	d11b      	bne.n	80081a2 <_vfiprintf_r+0x56>
 800816a:	6875      	ldr	r5, [r6, #4]
 800816c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800816e:	07d9      	lsls	r1, r3, #31
 8008170:	d405      	bmi.n	800817e <_vfiprintf_r+0x32>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	059a      	lsls	r2, r3, #22
 8008176:	d402      	bmi.n	800817e <_vfiprintf_r+0x32>
 8008178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800817a:	f000 fb93 	bl	80088a4 <__retarget_lock_acquire_recursive>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	071b      	lsls	r3, r3, #28
 8008182:	d501      	bpl.n	8008188 <_vfiprintf_r+0x3c>
 8008184:	692b      	ldr	r3, [r5, #16]
 8008186:	b9eb      	cbnz	r3, 80081c4 <_vfiprintf_r+0x78>
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f000 f960 	bl	8008450 <__swsetup_r>
 8008190:	b1c0      	cbz	r0, 80081c4 <_vfiprintf_r+0x78>
 8008192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008194:	07dc      	lsls	r4, r3, #31
 8008196:	d50e      	bpl.n	80081b6 <_vfiprintf_r+0x6a>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b01d      	add	sp, #116	; 0x74
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	4b7b      	ldr	r3, [pc, #492]	; (8008390 <_vfiprintf_r+0x244>)
 80081a4:	429d      	cmp	r5, r3
 80081a6:	d101      	bne.n	80081ac <_vfiprintf_r+0x60>
 80081a8:	68b5      	ldr	r5, [r6, #8]
 80081aa:	e7df      	b.n	800816c <_vfiprintf_r+0x20>
 80081ac:	4b79      	ldr	r3, [pc, #484]	; (8008394 <_vfiprintf_r+0x248>)
 80081ae:	429d      	cmp	r5, r3
 80081b0:	bf08      	it	eq
 80081b2:	68f5      	ldreq	r5, [r6, #12]
 80081b4:	e7da      	b.n	800816c <_vfiprintf_r+0x20>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	0598      	lsls	r0, r3, #22
 80081ba:	d4ed      	bmi.n	8008198 <_vfiprintf_r+0x4c>
 80081bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081be:	f000 fb72 	bl	80088a6 <__retarget_lock_release_recursive>
 80081c2:	e7e9      	b.n	8008198 <_vfiprintf_r+0x4c>
 80081c4:	2300      	movs	r3, #0
 80081c6:	9309      	str	r3, [sp, #36]	; 0x24
 80081c8:	2320      	movs	r3, #32
 80081ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ce:	2330      	movs	r3, #48	; 0x30
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008398 <_vfiprintf_r+0x24c>
 80081dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081e0:	4623      	mov	r3, r4
 80081e2:	469a      	mov	sl, r3
 80081e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e8:	b10a      	cbz	r2, 80081ee <_vfiprintf_r+0xa2>
 80081ea:	2a25      	cmp	r2, #37	; 0x25
 80081ec:	d1f9      	bne.n	80081e2 <_vfiprintf_r+0x96>
 80081ee:	ebba 0b04 	subs.w	fp, sl, r4
 80081f2:	d00b      	beq.n	800820c <_vfiprintf_r+0xc0>
 80081f4:	465b      	mov	r3, fp
 80081f6:	4622      	mov	r2, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ff94 	bl	8008128 <__sfputs_r>
 8008200:	3001      	adds	r0, #1
 8008202:	f000 80aa 	beq.w	800835a <_vfiprintf_r+0x20e>
 8008206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008208:	445a      	add	r2, fp
 800820a:	9209      	str	r2, [sp, #36]	; 0x24
 800820c:	f89a 3000 	ldrb.w	r3, [sl]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80a2 	beq.w	800835a <_vfiprintf_r+0x20e>
 8008216:	2300      	movs	r3, #0
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800822c:	931a      	str	r3, [sp, #104]	; 0x68
 800822e:	4654      	mov	r4, sl
 8008230:	2205      	movs	r2, #5
 8008232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008236:	4858      	ldr	r0, [pc, #352]	; (8008398 <_vfiprintf_r+0x24c>)
 8008238:	f7fe ff84 	bl	8007144 <memchr>
 800823c:	9a04      	ldr	r2, [sp, #16]
 800823e:	b9d8      	cbnz	r0, 8008278 <_vfiprintf_r+0x12c>
 8008240:	06d1      	lsls	r1, r2, #27
 8008242:	bf44      	itt	mi
 8008244:	2320      	movmi	r3, #32
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824a:	0713      	lsls	r3, r2, #28
 800824c:	bf44      	itt	mi
 800824e:	232b      	movmi	r3, #43	; 0x2b
 8008250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008254:	f89a 3000 	ldrb.w	r3, [sl]
 8008258:	2b2a      	cmp	r3, #42	; 0x2a
 800825a:	d015      	beq.n	8008288 <_vfiprintf_r+0x13c>
 800825c:	4654      	mov	r4, sl
 800825e:	2000      	movs	r0, #0
 8008260:	f04f 0c0a 	mov.w	ip, #10
 8008264:	9a07      	ldr	r2, [sp, #28]
 8008266:	4621      	mov	r1, r4
 8008268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826c:	3b30      	subs	r3, #48	; 0x30
 800826e:	2b09      	cmp	r3, #9
 8008270:	d94e      	bls.n	8008310 <_vfiprintf_r+0x1c4>
 8008272:	b1b0      	cbz	r0, 80082a2 <_vfiprintf_r+0x156>
 8008274:	9207      	str	r2, [sp, #28]
 8008276:	e014      	b.n	80082a2 <_vfiprintf_r+0x156>
 8008278:	eba0 0308 	sub.w	r3, r0, r8
 800827c:	fa09 f303 	lsl.w	r3, r9, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	46a2      	mov	sl, r4
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	e7d2      	b.n	800822e <_vfiprintf_r+0xe2>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbb      	ittet	lt
 8008294:	425b      	neglt	r3, r3
 8008296:	f042 0202 	orrlt.w	r2, r2, #2
 800829a:	9307      	strge	r3, [sp, #28]
 800829c:	9307      	strlt	r3, [sp, #28]
 800829e:	bfb8      	it	lt
 80082a0:	9204      	strlt	r2, [sp, #16]
 80082a2:	7823      	ldrb	r3, [r4, #0]
 80082a4:	2b2e      	cmp	r3, #46	; 0x2e
 80082a6:	d10c      	bne.n	80082c2 <_vfiprintf_r+0x176>
 80082a8:	7863      	ldrb	r3, [r4, #1]
 80082aa:	2b2a      	cmp	r3, #42	; 0x2a
 80082ac:	d135      	bne.n	800831a <_vfiprintf_r+0x1ce>
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	3402      	adds	r4, #2
 80082b2:	1d1a      	adds	r2, r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	9203      	str	r2, [sp, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfb8      	it	lt
 80082bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80082c0:	9305      	str	r3, [sp, #20]
 80082c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800839c <_vfiprintf_r+0x250>
 80082c6:	2203      	movs	r2, #3
 80082c8:	4650      	mov	r0, sl
 80082ca:	7821      	ldrb	r1, [r4, #0]
 80082cc:	f7fe ff3a 	bl	8007144 <memchr>
 80082d0:	b140      	cbz	r0, 80082e4 <_vfiprintf_r+0x198>
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	eba0 000a 	sub.w	r0, r0, sl
 80082d8:	fa03 f000 	lsl.w	r0, r3, r0
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	3401      	adds	r4, #1
 80082e0:	4303      	orrs	r3, r0
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e8:	2206      	movs	r2, #6
 80082ea:	482d      	ldr	r0, [pc, #180]	; (80083a0 <_vfiprintf_r+0x254>)
 80082ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082f0:	f7fe ff28 	bl	8007144 <memchr>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d03f      	beq.n	8008378 <_vfiprintf_r+0x22c>
 80082f8:	4b2a      	ldr	r3, [pc, #168]	; (80083a4 <_vfiprintf_r+0x258>)
 80082fa:	bb1b      	cbnz	r3, 8008344 <_vfiprintf_r+0x1f8>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	3307      	adds	r3, #7
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	3308      	adds	r3, #8
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	443b      	add	r3, r7
 800830c:	9309      	str	r3, [sp, #36]	; 0x24
 800830e:	e767      	b.n	80081e0 <_vfiprintf_r+0x94>
 8008310:	460c      	mov	r4, r1
 8008312:	2001      	movs	r0, #1
 8008314:	fb0c 3202 	mla	r2, ip, r2, r3
 8008318:	e7a5      	b.n	8008266 <_vfiprintf_r+0x11a>
 800831a:	2300      	movs	r3, #0
 800831c:	f04f 0c0a 	mov.w	ip, #10
 8008320:	4619      	mov	r1, r3
 8008322:	3401      	adds	r4, #1
 8008324:	9305      	str	r3, [sp, #20]
 8008326:	4620      	mov	r0, r4
 8008328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800832c:	3a30      	subs	r2, #48	; 0x30
 800832e:	2a09      	cmp	r2, #9
 8008330:	d903      	bls.n	800833a <_vfiprintf_r+0x1ee>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c5      	beq.n	80082c2 <_vfiprintf_r+0x176>
 8008336:	9105      	str	r1, [sp, #20]
 8008338:	e7c3      	b.n	80082c2 <_vfiprintf_r+0x176>
 800833a:	4604      	mov	r4, r0
 800833c:	2301      	movs	r3, #1
 800833e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008342:	e7f0      	b.n	8008326 <_vfiprintf_r+0x1da>
 8008344:	ab03      	add	r3, sp, #12
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	462a      	mov	r2, r5
 800834a:	4630      	mov	r0, r6
 800834c:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <_vfiprintf_r+0x25c>)
 800834e:	a904      	add	r1, sp, #16
 8008350:	f7fc f86a 	bl	8004428 <_printf_float>
 8008354:	4607      	mov	r7, r0
 8008356:	1c78      	adds	r0, r7, #1
 8008358:	d1d6      	bne.n	8008308 <_vfiprintf_r+0x1bc>
 800835a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800835c:	07d9      	lsls	r1, r3, #31
 800835e:	d405      	bmi.n	800836c <_vfiprintf_r+0x220>
 8008360:	89ab      	ldrh	r3, [r5, #12]
 8008362:	059a      	lsls	r2, r3, #22
 8008364:	d402      	bmi.n	800836c <_vfiprintf_r+0x220>
 8008366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008368:	f000 fa9d 	bl	80088a6 <__retarget_lock_release_recursive>
 800836c:	89ab      	ldrh	r3, [r5, #12]
 800836e:	065b      	lsls	r3, r3, #25
 8008370:	f53f af12 	bmi.w	8008198 <_vfiprintf_r+0x4c>
 8008374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008376:	e711      	b.n	800819c <_vfiprintf_r+0x50>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4630      	mov	r0, r6
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <_vfiprintf_r+0x25c>)
 8008382:	a904      	add	r1, sp, #16
 8008384:	f7fc faec 	bl	8004960 <_printf_i>
 8008388:	e7e4      	b.n	8008354 <_vfiprintf_r+0x208>
 800838a:	bf00      	nop
 800838c:	0801aa3c 	.word	0x0801aa3c
 8008390:	0801aa5c 	.word	0x0801aa5c
 8008394:	0801aa1c 	.word	0x0801aa1c
 8008398:	0801a9cc 	.word	0x0801a9cc
 800839c:	0801a9d2 	.word	0x0801a9d2
 80083a0:	0801a9d6 	.word	0x0801a9d6
 80083a4:	08004429 	.word	0x08004429
 80083a8:	08008129 	.word	0x08008129

080083ac <__swbuf_r>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	460e      	mov	r6, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	4605      	mov	r5, r0
 80083b4:	b118      	cbz	r0, 80083be <__swbuf_r+0x12>
 80083b6:	6983      	ldr	r3, [r0, #24]
 80083b8:	b90b      	cbnz	r3, 80083be <__swbuf_r+0x12>
 80083ba:	f000 f9d5 	bl	8008768 <__sinit>
 80083be:	4b21      	ldr	r3, [pc, #132]	; (8008444 <__swbuf_r+0x98>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d12b      	bne.n	800841c <__swbuf_r+0x70>
 80083c4:	686c      	ldr	r4, [r5, #4]
 80083c6:	69a3      	ldr	r3, [r4, #24]
 80083c8:	60a3      	str	r3, [r4, #8]
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	071a      	lsls	r2, r3, #28
 80083ce:	d52f      	bpl.n	8008430 <__swbuf_r+0x84>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	b36b      	cbz	r3, 8008430 <__swbuf_r+0x84>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	6820      	ldr	r0, [r4, #0]
 80083d8:	b2f6      	uxtb	r6, r6
 80083da:	1ac0      	subs	r0, r0, r3
 80083dc:	6963      	ldr	r3, [r4, #20]
 80083de:	4637      	mov	r7, r6
 80083e0:	4283      	cmp	r3, r0
 80083e2:	dc04      	bgt.n	80083ee <__swbuf_r+0x42>
 80083e4:	4621      	mov	r1, r4
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 f92a 	bl	8008640 <_fflush_r>
 80083ec:	bb30      	cbnz	r0, 800843c <__swbuf_r+0x90>
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	3001      	adds	r0, #1
 80083f2:	3b01      	subs	r3, #1
 80083f4:	60a3      	str	r3, [r4, #8]
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	701e      	strb	r6, [r3, #0]
 80083fe:	6963      	ldr	r3, [r4, #20]
 8008400:	4283      	cmp	r3, r0
 8008402:	d004      	beq.n	800840e <__swbuf_r+0x62>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	07db      	lsls	r3, r3, #31
 8008408:	d506      	bpl.n	8008418 <__swbuf_r+0x6c>
 800840a:	2e0a      	cmp	r6, #10
 800840c:	d104      	bne.n	8008418 <__swbuf_r+0x6c>
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f000 f915 	bl	8008640 <_fflush_r>
 8008416:	b988      	cbnz	r0, 800843c <__swbuf_r+0x90>
 8008418:	4638      	mov	r0, r7
 800841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <__swbuf_r+0x9c>)
 800841e:	429c      	cmp	r4, r3
 8008420:	d101      	bne.n	8008426 <__swbuf_r+0x7a>
 8008422:	68ac      	ldr	r4, [r5, #8]
 8008424:	e7cf      	b.n	80083c6 <__swbuf_r+0x1a>
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <__swbuf_r+0xa0>)
 8008428:	429c      	cmp	r4, r3
 800842a:	bf08      	it	eq
 800842c:	68ec      	ldreq	r4, [r5, #12]
 800842e:	e7ca      	b.n	80083c6 <__swbuf_r+0x1a>
 8008430:	4621      	mov	r1, r4
 8008432:	4628      	mov	r0, r5
 8008434:	f000 f80c 	bl	8008450 <__swsetup_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	d0cb      	beq.n	80083d4 <__swbuf_r+0x28>
 800843c:	f04f 37ff 	mov.w	r7, #4294967295
 8008440:	e7ea      	b.n	8008418 <__swbuf_r+0x6c>
 8008442:	bf00      	nop
 8008444:	0801aa3c 	.word	0x0801aa3c
 8008448:	0801aa5c 	.word	0x0801aa5c
 800844c:	0801aa1c 	.word	0x0801aa1c

08008450 <__swsetup_r>:
 8008450:	4b32      	ldr	r3, [pc, #200]	; (800851c <__swsetup_r+0xcc>)
 8008452:	b570      	push	{r4, r5, r6, lr}
 8008454:	681d      	ldr	r5, [r3, #0]
 8008456:	4606      	mov	r6, r0
 8008458:	460c      	mov	r4, r1
 800845a:	b125      	cbz	r5, 8008466 <__swsetup_r+0x16>
 800845c:	69ab      	ldr	r3, [r5, #24]
 800845e:	b913      	cbnz	r3, 8008466 <__swsetup_r+0x16>
 8008460:	4628      	mov	r0, r5
 8008462:	f000 f981 	bl	8008768 <__sinit>
 8008466:	4b2e      	ldr	r3, [pc, #184]	; (8008520 <__swsetup_r+0xd0>)
 8008468:	429c      	cmp	r4, r3
 800846a:	d10f      	bne.n	800848c <__swsetup_r+0x3c>
 800846c:	686c      	ldr	r4, [r5, #4]
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008474:	0719      	lsls	r1, r3, #28
 8008476:	d42c      	bmi.n	80084d2 <__swsetup_r+0x82>
 8008478:	06dd      	lsls	r5, r3, #27
 800847a:	d411      	bmi.n	80084a0 <__swsetup_r+0x50>
 800847c:	2309      	movs	r3, #9
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	81a3      	strh	r3, [r4, #12]
 800848a:	e03e      	b.n	800850a <__swsetup_r+0xba>
 800848c:	4b25      	ldr	r3, [pc, #148]	; (8008524 <__swsetup_r+0xd4>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <__swsetup_r+0x46>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7eb      	b.n	800846e <__swsetup_r+0x1e>
 8008496:	4b24      	ldr	r3, [pc, #144]	; (8008528 <__swsetup_r+0xd8>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7e6      	b.n	800846e <__swsetup_r+0x1e>
 80084a0:	0758      	lsls	r0, r3, #29
 80084a2:	d512      	bpl.n	80084ca <__swsetup_r+0x7a>
 80084a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084a6:	b141      	cbz	r1, 80084ba <__swsetup_r+0x6a>
 80084a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ac:	4299      	cmp	r1, r3
 80084ae:	d002      	beq.n	80084b6 <__swsetup_r+0x66>
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff fb2f 	bl	8007b14 <_free_r>
 80084b6:	2300      	movs	r3, #0
 80084b8:	6363      	str	r3, [r4, #52]	; 0x34
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	2300      	movs	r3, #0
 80084c4:	6063      	str	r3, [r4, #4]
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f043 0308 	orr.w	r3, r3, #8
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	b94b      	cbnz	r3, 80084ea <__swsetup_r+0x9a>
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e0:	d003      	beq.n	80084ea <__swsetup_r+0x9a>
 80084e2:	4621      	mov	r1, r4
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 fa05 	bl	80088f4 <__smakebuf_r>
 80084ea:	89a0      	ldrh	r0, [r4, #12]
 80084ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084f0:	f010 0301 	ands.w	r3, r0, #1
 80084f4:	d00a      	beq.n	800850c <__swsetup_r+0xbc>
 80084f6:	2300      	movs	r3, #0
 80084f8:	60a3      	str	r3, [r4, #8]
 80084fa:	6963      	ldr	r3, [r4, #20]
 80084fc:	425b      	negs	r3, r3
 80084fe:	61a3      	str	r3, [r4, #24]
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	b943      	cbnz	r3, 8008516 <__swsetup_r+0xc6>
 8008504:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008508:	d1ba      	bne.n	8008480 <__swsetup_r+0x30>
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	0781      	lsls	r1, r0, #30
 800850e:	bf58      	it	pl
 8008510:	6963      	ldrpl	r3, [r4, #20]
 8008512:	60a3      	str	r3, [r4, #8]
 8008514:	e7f4      	b.n	8008500 <__swsetup_r+0xb0>
 8008516:	2000      	movs	r0, #0
 8008518:	e7f7      	b.n	800850a <__swsetup_r+0xba>
 800851a:	bf00      	nop
 800851c:	2000000c 	.word	0x2000000c
 8008520:	0801aa3c 	.word	0x0801aa3c
 8008524:	0801aa5c 	.word	0x0801aa5c
 8008528:	0801aa1c 	.word	0x0801aa1c

0800852c <abort>:
 800852c:	2006      	movs	r0, #6
 800852e:	b508      	push	{r3, lr}
 8008530:	f000 fa50 	bl	80089d4 <raise>
 8008534:	2001      	movs	r0, #1
 8008536:	f7f9 f947 	bl	80017c8 <_exit>
	...

0800853c <__sflush_r>:
 800853c:	898a      	ldrh	r2, [r1, #12]
 800853e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008540:	4605      	mov	r5, r0
 8008542:	0710      	lsls	r0, r2, #28
 8008544:	460c      	mov	r4, r1
 8008546:	d457      	bmi.n	80085f8 <__sflush_r+0xbc>
 8008548:	684b      	ldr	r3, [r1, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dc04      	bgt.n	8008558 <__sflush_r+0x1c>
 800854e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc01      	bgt.n	8008558 <__sflush_r+0x1c>
 8008554:	2000      	movs	r0, #0
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800855a:	2e00      	cmp	r6, #0
 800855c:	d0fa      	beq.n	8008554 <__sflush_r+0x18>
 800855e:	2300      	movs	r3, #0
 8008560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008564:	682f      	ldr	r7, [r5, #0]
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	d032      	beq.n	80085d0 <__sflush_r+0x94>
 800856a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	075a      	lsls	r2, r3, #29
 8008570:	d505      	bpl.n	800857e <__sflush_r+0x42>
 8008572:	6863      	ldr	r3, [r4, #4]
 8008574:	1ac0      	subs	r0, r0, r3
 8008576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008578:	b10b      	cbz	r3, 800857e <__sflush_r+0x42>
 800857a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800857c:	1ac0      	subs	r0, r0, r3
 800857e:	2300      	movs	r3, #0
 8008580:	4602      	mov	r2, r0
 8008582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008584:	4628      	mov	r0, r5
 8008586:	6a21      	ldr	r1, [r4, #32]
 8008588:	47b0      	blx	r6
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	d106      	bne.n	800859e <__sflush_r+0x62>
 8008590:	6829      	ldr	r1, [r5, #0]
 8008592:	291d      	cmp	r1, #29
 8008594:	d82c      	bhi.n	80085f0 <__sflush_r+0xb4>
 8008596:	4a29      	ldr	r2, [pc, #164]	; (800863c <__sflush_r+0x100>)
 8008598:	40ca      	lsrs	r2, r1
 800859a:	07d6      	lsls	r6, r2, #31
 800859c:	d528      	bpl.n	80085f0 <__sflush_r+0xb4>
 800859e:	2200      	movs	r2, #0
 80085a0:	6062      	str	r2, [r4, #4]
 80085a2:	6922      	ldr	r2, [r4, #16]
 80085a4:	04d9      	lsls	r1, r3, #19
 80085a6:	6022      	str	r2, [r4, #0]
 80085a8:	d504      	bpl.n	80085b4 <__sflush_r+0x78>
 80085aa:	1c42      	adds	r2, r0, #1
 80085ac:	d101      	bne.n	80085b2 <__sflush_r+0x76>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b903      	cbnz	r3, 80085b4 <__sflush_r+0x78>
 80085b2:	6560      	str	r0, [r4, #84]	; 0x54
 80085b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b6:	602f      	str	r7, [r5, #0]
 80085b8:	2900      	cmp	r1, #0
 80085ba:	d0cb      	beq.n	8008554 <__sflush_r+0x18>
 80085bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c0:	4299      	cmp	r1, r3
 80085c2:	d002      	beq.n	80085ca <__sflush_r+0x8e>
 80085c4:	4628      	mov	r0, r5
 80085c6:	f7ff faa5 	bl	8007b14 <_free_r>
 80085ca:	2000      	movs	r0, #0
 80085cc:	6360      	str	r0, [r4, #52]	; 0x34
 80085ce:	e7c2      	b.n	8008556 <__sflush_r+0x1a>
 80085d0:	6a21      	ldr	r1, [r4, #32]
 80085d2:	2301      	movs	r3, #1
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b0      	blx	r6
 80085d8:	1c41      	adds	r1, r0, #1
 80085da:	d1c7      	bne.n	800856c <__sflush_r+0x30>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c4      	beq.n	800856c <__sflush_r+0x30>
 80085e2:	2b1d      	cmp	r3, #29
 80085e4:	d001      	beq.n	80085ea <__sflush_r+0xae>
 80085e6:	2b16      	cmp	r3, #22
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0xb2>
 80085ea:	602f      	str	r7, [r5, #0]
 80085ec:	e7b2      	b.n	8008554 <__sflush_r+0x18>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	e7ae      	b.n	8008556 <__sflush_r+0x1a>
 80085f8:	690f      	ldr	r7, [r1, #16]
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	d0aa      	beq.n	8008554 <__sflush_r+0x18>
 80085fe:	0793      	lsls	r3, r2, #30
 8008600:	bf18      	it	ne
 8008602:	2300      	movne	r3, #0
 8008604:	680e      	ldr	r6, [r1, #0]
 8008606:	bf08      	it	eq
 8008608:	694b      	ldreq	r3, [r1, #20]
 800860a:	1bf6      	subs	r6, r6, r7
 800860c:	600f      	str	r7, [r1, #0]
 800860e:	608b      	str	r3, [r1, #8]
 8008610:	2e00      	cmp	r6, #0
 8008612:	dd9f      	ble.n	8008554 <__sflush_r+0x18>
 8008614:	4633      	mov	r3, r6
 8008616:	463a      	mov	r2, r7
 8008618:	4628      	mov	r0, r5
 800861a:	6a21      	ldr	r1, [r4, #32]
 800861c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008620:	47e0      	blx	ip
 8008622:	2800      	cmp	r0, #0
 8008624:	dc06      	bgt.n	8008634 <__sflush_r+0xf8>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e790      	b.n	8008556 <__sflush_r+0x1a>
 8008634:	4407      	add	r7, r0
 8008636:	1a36      	subs	r6, r6, r0
 8008638:	e7ea      	b.n	8008610 <__sflush_r+0xd4>
 800863a:	bf00      	nop
 800863c:	20400001 	.word	0x20400001

08008640 <_fflush_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	690b      	ldr	r3, [r1, #16]
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	b913      	cbnz	r3, 8008650 <_fflush_r+0x10>
 800864a:	2500      	movs	r5, #0
 800864c:	4628      	mov	r0, r5
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	b118      	cbz	r0, 800865a <_fflush_r+0x1a>
 8008652:	6983      	ldr	r3, [r0, #24]
 8008654:	b90b      	cbnz	r3, 800865a <_fflush_r+0x1a>
 8008656:	f000 f887 	bl	8008768 <__sinit>
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <_fflush_r+0x6c>)
 800865c:	429c      	cmp	r4, r3
 800865e:	d11b      	bne.n	8008698 <_fflush_r+0x58>
 8008660:	686c      	ldr	r4, [r5, #4]
 8008662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0ef      	beq.n	800864a <_fflush_r+0xa>
 800866a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800866c:	07d0      	lsls	r0, r2, #31
 800866e:	d404      	bmi.n	800867a <_fflush_r+0x3a>
 8008670:	0599      	lsls	r1, r3, #22
 8008672:	d402      	bmi.n	800867a <_fflush_r+0x3a>
 8008674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008676:	f000 f915 	bl	80088a4 <__retarget_lock_acquire_recursive>
 800867a:	4628      	mov	r0, r5
 800867c:	4621      	mov	r1, r4
 800867e:	f7ff ff5d 	bl	800853c <__sflush_r>
 8008682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008684:	4605      	mov	r5, r0
 8008686:	07da      	lsls	r2, r3, #31
 8008688:	d4e0      	bmi.n	800864c <_fflush_r+0xc>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	059b      	lsls	r3, r3, #22
 800868e:	d4dd      	bmi.n	800864c <_fflush_r+0xc>
 8008690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008692:	f000 f908 	bl	80088a6 <__retarget_lock_release_recursive>
 8008696:	e7d9      	b.n	800864c <_fflush_r+0xc>
 8008698:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <_fflush_r+0x70>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d101      	bne.n	80086a2 <_fflush_r+0x62>
 800869e:	68ac      	ldr	r4, [r5, #8]
 80086a0:	e7df      	b.n	8008662 <_fflush_r+0x22>
 80086a2:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <_fflush_r+0x74>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	bf08      	it	eq
 80086a8:	68ec      	ldreq	r4, [r5, #12]
 80086aa:	e7da      	b.n	8008662 <_fflush_r+0x22>
 80086ac:	0801aa3c 	.word	0x0801aa3c
 80086b0:	0801aa5c 	.word	0x0801aa5c
 80086b4:	0801aa1c 	.word	0x0801aa1c

080086b8 <std>:
 80086b8:	2300      	movs	r3, #0
 80086ba:	b510      	push	{r4, lr}
 80086bc:	4604      	mov	r4, r0
 80086be:	e9c0 3300 	strd	r3, r3, [r0]
 80086c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086c6:	6083      	str	r3, [r0, #8]
 80086c8:	8181      	strh	r1, [r0, #12]
 80086ca:	6643      	str	r3, [r0, #100]	; 0x64
 80086cc:	81c2      	strh	r2, [r0, #14]
 80086ce:	6183      	str	r3, [r0, #24]
 80086d0:	4619      	mov	r1, r3
 80086d2:	2208      	movs	r2, #8
 80086d4:	305c      	adds	r0, #92	; 0x5c
 80086d6:	f7fb fe01 	bl	80042dc <memset>
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <std+0x38>)
 80086dc:	6224      	str	r4, [r4, #32]
 80086de:	6263      	str	r3, [r4, #36]	; 0x24
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <std+0x3c>)
 80086e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80086e4:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <std+0x40>)
 80086e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <std+0x44>)
 80086ea:	6323      	str	r3, [r4, #48]	; 0x30
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	08008a0d 	.word	0x08008a0d
 80086f4:	08008a2f 	.word	0x08008a2f
 80086f8:	08008a67 	.word	0x08008a67
 80086fc:	08008a8b 	.word	0x08008a8b

08008700 <_cleanup_r>:
 8008700:	4901      	ldr	r1, [pc, #4]	; (8008708 <_cleanup_r+0x8>)
 8008702:	f000 b8af 	b.w	8008864 <_fwalk_reent>
 8008706:	bf00      	nop
 8008708:	08008641 	.word	0x08008641

0800870c <__sfmoreglue>:
 800870c:	2268      	movs	r2, #104	; 0x68
 800870e:	b570      	push	{r4, r5, r6, lr}
 8008710:	1e4d      	subs	r5, r1, #1
 8008712:	4355      	muls	r5, r2
 8008714:	460e      	mov	r6, r1
 8008716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800871a:	f7ff fa63 	bl	8007be4 <_malloc_r>
 800871e:	4604      	mov	r4, r0
 8008720:	b140      	cbz	r0, 8008734 <__sfmoreglue+0x28>
 8008722:	2100      	movs	r1, #0
 8008724:	e9c0 1600 	strd	r1, r6, [r0]
 8008728:	300c      	adds	r0, #12
 800872a:	60a0      	str	r0, [r4, #8]
 800872c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008730:	f7fb fdd4 	bl	80042dc <memset>
 8008734:	4620      	mov	r0, r4
 8008736:	bd70      	pop	{r4, r5, r6, pc}

08008738 <__sfp_lock_acquire>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__sfp_lock_acquire+0x8>)
 800873a:	f000 b8b3 	b.w	80088a4 <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	200008f5 	.word	0x200008f5

08008744 <__sfp_lock_release>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sfp_lock_release+0x8>)
 8008746:	f000 b8ae 	b.w	80088a6 <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	200008f5 	.word	0x200008f5

08008750 <__sinit_lock_acquire>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__sinit_lock_acquire+0x8>)
 8008752:	f000 b8a7 	b.w	80088a4 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	200008f6 	.word	0x200008f6

0800875c <__sinit_lock_release>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__sinit_lock_release+0x8>)
 800875e:	f000 b8a2 	b.w	80088a6 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	200008f6 	.word	0x200008f6

08008768 <__sinit>:
 8008768:	b510      	push	{r4, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	f7ff fff0 	bl	8008750 <__sinit_lock_acquire>
 8008770:	69a3      	ldr	r3, [r4, #24]
 8008772:	b11b      	cbz	r3, 800877c <__sinit+0x14>
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	f7ff bff0 	b.w	800875c <__sinit_lock_release>
 800877c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008780:	6523      	str	r3, [r4, #80]	; 0x50
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <__sinit+0x68>)
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <__sinit+0x6c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	62a2      	str	r2, [r4, #40]	; 0x28
 800878a:	42a3      	cmp	r3, r4
 800878c:	bf08      	it	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	4620      	mov	r0, r4
 8008792:	bf08      	it	eq
 8008794:	61a3      	streq	r3, [r4, #24]
 8008796:	f000 f81f 	bl	80087d8 <__sfp>
 800879a:	6060      	str	r0, [r4, #4]
 800879c:	4620      	mov	r0, r4
 800879e:	f000 f81b 	bl	80087d8 <__sfp>
 80087a2:	60a0      	str	r0, [r4, #8]
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 f817 	bl	80087d8 <__sfp>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2104      	movs	r1, #4
 80087ae:	60e0      	str	r0, [r4, #12]
 80087b0:	6860      	ldr	r0, [r4, #4]
 80087b2:	f7ff ff81 	bl	80086b8 <std>
 80087b6:	2201      	movs	r2, #1
 80087b8:	2109      	movs	r1, #9
 80087ba:	68a0      	ldr	r0, [r4, #8]
 80087bc:	f7ff ff7c 	bl	80086b8 <std>
 80087c0:	2202      	movs	r2, #2
 80087c2:	2112      	movs	r1, #18
 80087c4:	68e0      	ldr	r0, [r4, #12]
 80087c6:	f7ff ff77 	bl	80086b8 <std>
 80087ca:	2301      	movs	r3, #1
 80087cc:	61a3      	str	r3, [r4, #24]
 80087ce:	e7d1      	b.n	8008774 <__sinit+0xc>
 80087d0:	0801a56c 	.word	0x0801a56c
 80087d4:	08008701 	.word	0x08008701

080087d8 <__sfp>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	4607      	mov	r7, r0
 80087dc:	f7ff ffac 	bl	8008738 <__sfp_lock_acquire>
 80087e0:	4b1e      	ldr	r3, [pc, #120]	; (800885c <__sfp+0x84>)
 80087e2:	681e      	ldr	r6, [r3, #0]
 80087e4:	69b3      	ldr	r3, [r6, #24]
 80087e6:	b913      	cbnz	r3, 80087ee <__sfp+0x16>
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7ff ffbd 	bl	8008768 <__sinit>
 80087ee:	3648      	adds	r6, #72	; 0x48
 80087f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	d503      	bpl.n	8008800 <__sfp+0x28>
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	b30b      	cbz	r3, 8008840 <__sfp+0x68>
 80087fc:	6836      	ldr	r6, [r6, #0]
 80087fe:	e7f7      	b.n	80087f0 <__sfp+0x18>
 8008800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008804:	b9d5      	cbnz	r5, 800883c <__sfp+0x64>
 8008806:	4b16      	ldr	r3, [pc, #88]	; (8008860 <__sfp+0x88>)
 8008808:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800880c:	60e3      	str	r3, [r4, #12]
 800880e:	6665      	str	r5, [r4, #100]	; 0x64
 8008810:	f000 f847 	bl	80088a2 <__retarget_lock_init_recursive>
 8008814:	f7ff ff96 	bl	8008744 <__sfp_lock_release>
 8008818:	2208      	movs	r2, #8
 800881a:	4629      	mov	r1, r5
 800881c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008824:	6025      	str	r5, [r4, #0]
 8008826:	61a5      	str	r5, [r4, #24]
 8008828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800882c:	f7fb fd56 	bl	80042dc <memset>
 8008830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008838:	4620      	mov	r0, r4
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883c:	3468      	adds	r4, #104	; 0x68
 800883e:	e7d9      	b.n	80087f4 <__sfp+0x1c>
 8008840:	2104      	movs	r1, #4
 8008842:	4638      	mov	r0, r7
 8008844:	f7ff ff62 	bl	800870c <__sfmoreglue>
 8008848:	4604      	mov	r4, r0
 800884a:	6030      	str	r0, [r6, #0]
 800884c:	2800      	cmp	r0, #0
 800884e:	d1d5      	bne.n	80087fc <__sfp+0x24>
 8008850:	f7ff ff78 	bl	8008744 <__sfp_lock_release>
 8008854:	230c      	movs	r3, #12
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	e7ee      	b.n	8008838 <__sfp+0x60>
 800885a:	bf00      	nop
 800885c:	0801a56c 	.word	0x0801a56c
 8008860:	ffff0001 	.word	0xffff0001

08008864 <_fwalk_reent>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	4606      	mov	r6, r0
 800886a:	4688      	mov	r8, r1
 800886c:	2700      	movs	r7, #0
 800886e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008876:	f1b9 0901 	subs.w	r9, r9, #1
 800887a:	d505      	bpl.n	8008888 <_fwalk_reent+0x24>
 800887c:	6824      	ldr	r4, [r4, #0]
 800887e:	2c00      	cmp	r4, #0
 8008880:	d1f7      	bne.n	8008872 <_fwalk_reent+0xe>
 8008882:	4638      	mov	r0, r7
 8008884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008888:	89ab      	ldrh	r3, [r5, #12]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d907      	bls.n	800889e <_fwalk_reent+0x3a>
 800888e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008892:	3301      	adds	r3, #1
 8008894:	d003      	beq.n	800889e <_fwalk_reent+0x3a>
 8008896:	4629      	mov	r1, r5
 8008898:	4630      	mov	r0, r6
 800889a:	47c0      	blx	r8
 800889c:	4307      	orrs	r7, r0
 800889e:	3568      	adds	r5, #104	; 0x68
 80088a0:	e7e9      	b.n	8008876 <_fwalk_reent+0x12>

080088a2 <__retarget_lock_init_recursive>:
 80088a2:	4770      	bx	lr

080088a4 <__retarget_lock_acquire_recursive>:
 80088a4:	4770      	bx	lr

080088a6 <__retarget_lock_release_recursive>:
 80088a6:	4770      	bx	lr

080088a8 <__swhatbuf_r>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b0:	4614      	mov	r4, r2
 80088b2:	2900      	cmp	r1, #0
 80088b4:	461d      	mov	r5, r3
 80088b6:	b096      	sub	sp, #88	; 0x58
 80088b8:	da08      	bge.n	80088cc <__swhatbuf_r+0x24>
 80088ba:	2200      	movs	r2, #0
 80088bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	061a      	lsls	r2, r3, #24
 80088c4:	d410      	bmi.n	80088e8 <__swhatbuf_r+0x40>
 80088c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ca:	e00e      	b.n	80088ea <__swhatbuf_r+0x42>
 80088cc:	466a      	mov	r2, sp
 80088ce:	f000 f903 	bl	8008ad8 <_fstat_r>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	dbf1      	blt.n	80088ba <__swhatbuf_r+0x12>
 80088d6:	9a01      	ldr	r2, [sp, #4]
 80088d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088e0:	425a      	negs	r2, r3
 80088e2:	415a      	adcs	r2, r3
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	e7ee      	b.n	80088c6 <__swhatbuf_r+0x1e>
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	2000      	movs	r0, #0
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	b016      	add	sp, #88	; 0x58
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080088f4 <__smakebuf_r>:
 80088f4:	898b      	ldrh	r3, [r1, #12]
 80088f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088f8:	079d      	lsls	r5, r3, #30
 80088fa:	4606      	mov	r6, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	d507      	bpl.n	8008910 <__smakebuf_r+0x1c>
 8008900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	2301      	movs	r3, #1
 800890a:	6163      	str	r3, [r4, #20]
 800890c:	b002      	add	sp, #8
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	466a      	mov	r2, sp
 8008912:	ab01      	add	r3, sp, #4
 8008914:	f7ff ffc8 	bl	80088a8 <__swhatbuf_r>
 8008918:	9900      	ldr	r1, [sp, #0]
 800891a:	4605      	mov	r5, r0
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff f961 	bl	8007be4 <_malloc_r>
 8008922:	b948      	cbnz	r0, 8008938 <__smakebuf_r+0x44>
 8008924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008928:	059a      	lsls	r2, r3, #22
 800892a:	d4ef      	bmi.n	800890c <__smakebuf_r+0x18>
 800892c:	f023 0303 	bic.w	r3, r3, #3
 8008930:	f043 0302 	orr.w	r3, r3, #2
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	e7e3      	b.n	8008900 <__smakebuf_r+0xc>
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <__smakebuf_r+0x7c>)
 800893a:	62b3      	str	r3, [r6, #40]	; 0x28
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	6020      	str	r0, [r4, #0]
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	6120      	str	r0, [r4, #16]
 800894a:	6163      	str	r3, [r4, #20]
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	b15b      	cbz	r3, 8008968 <__smakebuf_r+0x74>
 8008950:	4630      	mov	r0, r6
 8008952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008956:	f000 f8d1 	bl	8008afc <_isatty_r>
 800895a:	b128      	cbz	r0, 8008968 <__smakebuf_r+0x74>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	89a0      	ldrh	r0, [r4, #12]
 800896a:	4305      	orrs	r5, r0
 800896c:	81a5      	strh	r5, [r4, #12]
 800896e:	e7cd      	b.n	800890c <__smakebuf_r+0x18>
 8008970:	08008701 	.word	0x08008701

08008974 <_malloc_usable_size_r>:
 8008974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008978:	1f18      	subs	r0, r3, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfbc      	itt	lt
 800897e:	580b      	ldrlt	r3, [r1, r0]
 8008980:	18c0      	addlt	r0, r0, r3
 8008982:	4770      	bx	lr

08008984 <_raise_r>:
 8008984:	291f      	cmp	r1, #31
 8008986:	b538      	push	{r3, r4, r5, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	d904      	bls.n	8008998 <_raise_r+0x14>
 800898e:	2316      	movs	r3, #22
 8008990:	6003      	str	r3, [r0, #0]
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800899a:	b112      	cbz	r2, 80089a2 <_raise_r+0x1e>
 800899c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089a0:	b94b      	cbnz	r3, 80089b6 <_raise_r+0x32>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f830 	bl	8008a08 <_getpid_r>
 80089a8:	462a      	mov	r2, r5
 80089aa:	4601      	mov	r1, r0
 80089ac:	4620      	mov	r0, r4
 80089ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089b2:	f000 b817 	b.w	80089e4 <_kill_r>
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d00a      	beq.n	80089d0 <_raise_r+0x4c>
 80089ba:	1c59      	adds	r1, r3, #1
 80089bc:	d103      	bne.n	80089c6 <_raise_r+0x42>
 80089be:	2316      	movs	r3, #22
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	2001      	movs	r0, #1
 80089c4:	e7e7      	b.n	8008996 <_raise_r+0x12>
 80089c6:	2400      	movs	r4, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089ce:	4798      	blx	r3
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7e0      	b.n	8008996 <_raise_r+0x12>

080089d4 <raise>:
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <raise+0xc>)
 80089d6:	4601      	mov	r1, r0
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	f7ff bfd3 	b.w	8008984 <_raise_r>
 80089de:	bf00      	nop
 80089e0:	2000000c 	.word	0x2000000c

080089e4 <_kill_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	2300      	movs	r3, #0
 80089e8:	4d06      	ldr	r5, [pc, #24]	; (8008a04 <_kill_r+0x20>)
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	f7f8 fee1 	bl	80017b8 <_kill>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d102      	bne.n	8008a00 <_kill_r+0x1c>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	b103      	cbz	r3, 8008a00 <_kill_r+0x1c>
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	bf00      	nop
 8008a04:	200008f0 	.word	0x200008f0

08008a08 <_getpid_r>:
 8008a08:	f7f8 bed4 	b.w	80017b4 <_getpid>

08008a0c <__sread>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a14:	f000 f894 	bl	8008b40 <_read_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	bfab      	itete	ge
 8008a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a20:	181b      	addge	r3, r3, r0
 8008a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a26:	bfac      	ite	ge
 8008a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a2a:	81a3      	strhlt	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__swrite>:
 8008a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a32:	461f      	mov	r7, r3
 8008a34:	898b      	ldrh	r3, [r1, #12]
 8008a36:	4605      	mov	r5, r0
 8008a38:	05db      	lsls	r3, r3, #23
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	4616      	mov	r6, r2
 8008a3e:	d505      	bpl.n	8008a4c <__swrite+0x1e>
 8008a40:	2302      	movs	r3, #2
 8008a42:	2200      	movs	r2, #0
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	f000 f868 	bl	8008b1c <_lseek_r>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	4632      	mov	r2, r6
 8008a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	4628      	mov	r0, r5
 8008a58:	463b      	mov	r3, r7
 8008a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a62:	f000 b817 	b.w	8008a94 <_write_r>

08008a66 <__sseek>:
 8008a66:	b510      	push	{r4, lr}
 8008a68:	460c      	mov	r4, r1
 8008a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6e:	f000 f855 	bl	8008b1c <_lseek_r>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	bf15      	itete	ne
 8008a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a82:	81a3      	strheq	r3, [r4, #12]
 8008a84:	bf18      	it	ne
 8008a86:	81a3      	strhne	r3, [r4, #12]
 8008a88:	bd10      	pop	{r4, pc}

08008a8a <__sclose>:
 8008a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8e:	f000 b813 	b.w	8008ab8 <_close_r>
	...

08008a94 <_write_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4d05      	ldr	r5, [pc, #20]	; (8008ab4 <_write_r+0x20>)
 8008aa0:	602a      	str	r2, [r5, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f7f8 fea4 	bl	80017f0 <_write>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_write_r+0x1e>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_write_r+0x1e>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200008f0 	.word	0x200008f0

08008ab8 <_close_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	2300      	movs	r3, #0
 8008abc:	4d05      	ldr	r5, [pc, #20]	; (8008ad4 <_close_r+0x1c>)
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	f7f8 fea2 	bl	800180c <_close>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_close_r+0x1a>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_close_r+0x1a>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	200008f0 	.word	0x200008f0

08008ad8 <_fstat_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_fstat_r+0x20>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	f7f8 fe94 	bl	8001812 <_fstat>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	d102      	bne.n	8008af4 <_fstat_r+0x1c>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	b103      	cbz	r3, 8008af4 <_fstat_r+0x1c>
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	200008f0 	.word	0x200008f0

08008afc <_isatty_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	2300      	movs	r3, #0
 8008b00:	4d05      	ldr	r5, [pc, #20]	; (8008b18 <_isatty_r+0x1c>)
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	f7f8 fe88 	bl	800181c <_isatty>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_isatty_r+0x1a>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_isatty_r+0x1a>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	200008f0 	.word	0x200008f0

08008b1c <_lseek_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	4d05      	ldr	r5, [pc, #20]	; (8008b3c <_lseek_r+0x20>)
 8008b28:	602a      	str	r2, [r5, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f7f8 fe78 	bl	8001820 <_lseek>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_lseek_r+0x1e>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_lseek_r+0x1e>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	200008f0 	.word	0x200008f0

08008b40 <_read_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4d05      	ldr	r5, [pc, #20]	; (8008b60 <_read_r+0x20>)
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7f8 fe40 	bl	80017d4 <_read>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_read_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_read_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	200008f0 	.word	0x200008f0

08008b64 <memcmp>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	3901      	subs	r1, #1
 8008b68:	4402      	add	r2, r0
 8008b6a:	4290      	cmp	r0, r2
 8008b6c:	d101      	bne.n	8008b72 <memcmp+0xe>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e005      	b.n	8008b7e <memcmp+0x1a>
 8008b72:	7803      	ldrb	r3, [r0, #0]
 8008b74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d001      	beq.n	8008b80 <memcmp+0x1c>
 8008b7c:	1b18      	subs	r0, r3, r4
 8008b7e:	bd10      	pop	{r4, pc}
 8008b80:	3001      	adds	r0, #1
 8008b82:	e7f2      	b.n	8008b6a <memcmp+0x6>
 8008b84:	0000      	movs	r0, r0
	...

08008b88 <floor>:
 8008b88:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8008b92:	2d13      	cmp	r5, #19
 8008b94:	460b      	mov	r3, r1
 8008b96:	4684      	mov	ip, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	dc30      	bgt.n	8008c00 <floor+0x78>
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	db1e      	blt.n	8008be0 <floor+0x58>
 8008ba2:	4f35      	ldr	r7, [pc, #212]	; (8008c78 <floor+0xf0>)
 8008ba4:	412f      	asrs	r7, r5
 8008ba6:	ea01 0207 	and.w	r2, r1, r7
 8008baa:	4302      	orrs	r2, r0
 8008bac:	d015      	beq.n	8008bda <floor+0x52>
 8008bae:	a330      	add	r3, pc, #192	; (adr r3, 8008c70 <floor+0xe8>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f8 fe6a 	bl	800188c <__adddf3>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f7f9 faac 	bl	8002118 <__aeabi_dcmpgt>
 8008bc0:	b148      	cbz	r0, 8008bd6 <floor+0x4e>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	da04      	bge.n	8008bd0 <floor+0x48>
 8008bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bca:	fa43 f505 	asr.w	r5, r3, r5
 8008bce:	442c      	add	r4, r5
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	ea24 0407 	bic.w	r4, r4, r7
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	46b4      	mov	ip, r6
 8008bda:	4660      	mov	r0, ip
 8008bdc:	4619      	mov	r1, r3
 8008bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be0:	a323      	add	r3, pc, #140	; (adr r3, 8008c70 <floor+0xe8>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f8 fe51 	bl	800188c <__adddf3>
 8008bea:	2200      	movs	r2, #0
 8008bec:	2300      	movs	r3, #0
 8008bee:	f7f9 fa93 	bl	8002118 <__aeabi_dcmpgt>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0ef      	beq.n	8008bd6 <floor+0x4e>
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	db24      	blt.n	8008c44 <floor+0xbc>
 8008bfa:	2600      	movs	r6, #0
 8008bfc:	4634      	mov	r4, r6
 8008bfe:	e7ea      	b.n	8008bd6 <floor+0x4e>
 8008c00:	2d33      	cmp	r5, #51	; 0x33
 8008c02:	dd08      	ble.n	8008c16 <floor+0x8e>
 8008c04:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008c08:	d1e7      	bne.n	8008bda <floor+0x52>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f7f8 fe3e 	bl	800188c <__adddf3>
 8008c10:	4684      	mov	ip, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	e7e1      	b.n	8008bda <floor+0x52>
 8008c16:	f04f 37ff 	mov.w	r7, #4294967295
 8008c1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008c1e:	40d7      	lsrs	r7, r2
 8008c20:	4207      	tst	r7, r0
 8008c22:	d0da      	beq.n	8008bda <floor+0x52>
 8008c24:	a312      	add	r3, pc, #72	; (adr r3, 8008c70 <floor+0xe8>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f8 fe2f 	bl	800188c <__adddf3>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	f7f9 fa71 	bl	8002118 <__aeabi_dcmpgt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d0cd      	beq.n	8008bd6 <floor+0x4e>
 8008c3a:	2c00      	cmp	r4, #0
 8008c3c:	db0b      	blt.n	8008c56 <floor+0xce>
 8008c3e:	ea26 0607 	bic.w	r6, r6, r7
 8008c42:	e7c8      	b.n	8008bd6 <floor+0x4e>
 8008c44:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c48:	4a0c      	ldr	r2, [pc, #48]	; (8008c7c <floor+0xf4>)
 8008c4a:	431e      	orrs	r6, r3
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	bf18      	it	ne
 8008c50:	4614      	movne	r4, r2
 8008c52:	2600      	movs	r6, #0
 8008c54:	e7bf      	b.n	8008bd6 <floor+0x4e>
 8008c56:	2d14      	cmp	r5, #20
 8008c58:	d008      	beq.n	8008c6c <floor+0xe4>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8008c60:	fa03 f505 	lsl.w	r5, r3, r5
 8008c64:	19ae      	adds	r6, r5, r6
 8008c66:	bf28      	it	cs
 8008c68:	18e4      	addcs	r4, r4, r3
 8008c6a:	e7e8      	b.n	8008c3e <floor+0xb6>
 8008c6c:	3401      	adds	r4, #1
 8008c6e:	e7e6      	b.n	8008c3e <floor+0xb6>
 8008c70:	8800759c 	.word	0x8800759c
 8008c74:	7e37e43c 	.word	0x7e37e43c
 8008c78:	000fffff 	.word	0x000fffff
 8008c7c:	bff00000 	.word	0xbff00000

08008c80 <_init>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr

08008c8c <_fini>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr
