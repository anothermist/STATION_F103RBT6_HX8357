
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010edc  08009cf8  08009cf8  00019cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abd4  0801abd4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  0801abd4  0801abd4  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801abd4  0801abd4  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801abd4  0801abd4  0002abd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801abd8  0801abd8  0002abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801abdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  200001e8  0801adc4  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016f0  0801adc4  000316f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011689  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002749  00000000  00000000  0004189a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009abd  00000000  00000000  00043fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0004daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0004e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d03  00000000  00000000  0004f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124e9  00000000  00000000  000684e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088cd3  00000000  00000000  0007a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  0010369f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003804  00000000  00000000  001036e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cdc 	.word	0x08009cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009cdc 	.word	0x08009cdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	460c      	mov	r4, r1
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	4628      	mov	r0, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <AT24XX_Save>:
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
    if(size_of_data > 16)
        return false;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
    if(size_of_data > 32)
 80010d4:	2a20      	cmp	r2, #32
bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80010d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(size_of_data > 32)
 80010d8:	d903      	bls.n	80010e2 <AT24XX_Save+0xe>
        return false;
 80010da:	2000      	movs	r0, #0
        HAL_Delay(5);
#endif
        return true;
    } else
        return false;
}
 80010dc:	b005      	add	sp, #20
 80010de:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	b292      	uxth	r2, r2
 80010e6:	e9cd 1200 	strd	r1, r2, [sp]
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	4602      	mov	r2, r0
 80010ee:	2310      	movs	r3, #16
 80010f0:	21ae      	movs	r1, #174	; 0xae
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <AT24XX_Save+0x34>)
 80010f4:	f002 fc5e 	bl	80039b4 <HAL_I2C_Mem_Write>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d1ee      	bne.n	80010da <AT24XX_Save+0x6>
        HAL_Delay(5);
 80010fc:	2005      	movs	r0, #5
 80010fe:	f001 fe11 	bl	8002d24 <HAL_Delay>
        return true;
 8001102:	2001      	movs	r0, #1
 8001104:	e7ea      	b.n	80010dc <AT24XX_Save+0x8>
 8001106:	bf00      	nop
 8001108:	20001254 	.word	0x20001254

0800110c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800110c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
    if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, 100) == HAL_OK)
#else
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	b292      	uxth	r2, r2
 8001112:	e9cd 1200 	strd	r1, r2, [sp]
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	4602      	mov	r2, r0
 800111a:	2310      	movs	r3, #16
 800111c:	21ae      	movs	r1, #174	; 0xae
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <AT24XX_Load+0x24>)
 8001120:	f002 fcd8 	bl	8003ad4 <HAL_I2C_Mem_Read>
#endif
    {
        return true;
    } else
        return false;
}
 8001124:	fab0 f080 	clz	r0, r0
 8001128:	0940      	lsrs	r0, r0, #5
 800112a:	b005      	add	sp, #20
 800112c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001130:	20001254 	.word	0x20001254

08001134 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 8001134:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 8001136:	b507      	push	{r0, r1, r2, lr}
    AT24XX_Load(address, dt, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 800113c:	f8ad 3004 	strh.w	r3, [sp, #4]
    AT24XX_Load(address, dt, 1);
 8001140:	f7ff ffe4 	bl	800110c <AT24XX_Load>
    return dt[0];
}
 8001144:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001148:	b003      	add	sp, #12
 800114a:	f85d fb04 	ldr.w	pc, [sp], #4

0800114e <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 800114e:	b507      	push	{r0, r1, r2, lr}
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
 8001150:	2201      	movs	r2, #1
    uint8_t save[] = {val};
 8001152:	f88d 1004 	strb.w	r1, [sp, #4]
    AT24XX_Save(address, save, 1);
 8001156:	a901      	add	r1, sp, #4
 8001158:	f7ff ffbc 	bl	80010d4 <AT24XX_Save>
}
 800115c:	b003      	add	sp, #12
 800115e:	f85d fb04 	ldr.w	pc, [sp], #4

08001162 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 8001162:	b538      	push	{r3, r4, r5, lr}
 8001164:	460c      	mov	r4, r1
 8001166:	4605      	mov	r5, r0
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8001168:	f7ff ffe4 	bl	8001134 <AT24XX_Read>
 800116c:	42a0      	cmp	r0, r4
 800116e:	d005      	beq.n	800117c <AT24XX_Update+0x1a>
 8001170:	4621      	mov	r1, r4
 8001172:	4628      	mov	r0, r5
}
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8001178:	f7ff bfe9 	b.w	800114e <AT24XX_Write>
}
 800117c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001180 <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001186:	f7ff fad1 	bl	800072c <__aeabi_ddiv>
 800118a:	2200      	movs	r2, #0
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <round_eps+0x24>)
 800118e:	f7fe ffed 	bl	800016c <__adddf3>
 8001192:	f007 fdb5 	bl	8008d00 <floor>
 8001196:	4622      	mov	r2, r4
 8001198:	462b      	mov	r3, r5
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc93 	bl	8000ac8 <__aeabi_d2f>
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	3fe00000 	.word	0x3fe00000

080011a8 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	4606      	mov	r6, r0
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011ac:	4608      	mov	r0, r1
 80011ae:	f7ff f929 	bl	8000404 <__aeabi_i2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	2000      	movs	r0, #0
 80011b8:	4906      	ldr	r1, [pc, #24]	; (80011d4 <round_nth+0x2c>)
 80011ba:	f007 fe1d 	bl	8008df8 <pow>
 80011be:	4604      	mov	r4, r0
 80011c0:	460d      	mov	r5, r1
 80011c2:	4630      	mov	r0, r6
 80011c4:	f7ff f930 	bl	8000428 <__aeabi_f2d>
 80011c8:	4622      	mov	r2, r4
 80011ca:	462b      	mov	r3, r5
}                                                                                        // round_nth(1.235, -2) = 1.24
 80011cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011d0:	f7ff bfd6 	b.w	8001180 <round_eps>
 80011d4:	40240000 	.word	0x40240000

080011d8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80011d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80011da:	2664      	movs	r6, #100	; 0x64
    cmd[0] = 0xFA; // temp_msb
 80011dc:	23fa      	movs	r3, #250	; 0xfa
float BME280_getTemperature(int8_t n) {
 80011de:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80011e0:	4d20      	ldr	r5, [pc, #128]	; (8001264 <BME280_getTemperature+0x8c>)
    cmd[0] = 0xFA; // temp_msb
 80011e2:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80011e6:	aa03      	add	r2, sp, #12
 80011e8:	2301      	movs	r3, #1
 80011ea:	21ec      	movs	r1, #236	; 0xec
 80011ec:	4628      	mov	r0, r5
 80011ee:	9600      	str	r6, [sp, #0]
 80011f0:	f002 f964 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80011f4:	f10d 020d 	add.w	r2, sp, #13
 80011f8:	2303      	movs	r3, #3
 80011fa:	21ec      	movs	r1, #236	; 0xec
 80011fc:	4628      	mov	r0, r5
 80011fe:	9600      	str	r6, [sp, #0]
 8001200:	f002 fa34 	bl	800366c <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001204:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001208:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	ea42 3203 	orr.w	r2, r2, r3, lsl #12

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <BME280_getTemperature+0x90>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001214:	f89d 000f 	ldrb.w	r0, [sp, #15]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	4914      	ldr	r1, [pc, #80]	; (800126c <BME280_getTemperature+0x94>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800121c:	ea42 1010 	orr.w	r0, r2, r0, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001220:	ebc3 1212 	rsb	r2, r3, r2, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	ebc3 03d0 	rsb	r3, r3, r0, lsr #3
 800122a:	f9b1 0000 	ldrsh.w	r0, [r1]
 800122e:	4358      	muls	r0, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001230:	fb02 f302 	mul.w	r3, r2, r2
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <BME280_getTemperature+0x98>)
 8001236:	0b1b      	lsrs	r3, r3, #12
 8001238:	f9b2 2000 	ldrsh.w	r2, [r2]
 800123c:	4353      	muls	r3, r2

    t_fine = temp;
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <BME280_getTemperature+0x9c>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001240:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001242:	eb03 23d0 	add.w	r3, r3, r0, lsr #11
    t_fine = temp;
 8001246:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8001248:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800124c:	3380      	adds	r3, #128	; 0x80
    tempf = (float) temp;
 800124e:	1218      	asrs	r0, r3, #8
 8001250:	f7ff fd44 	bl	8000cdc <__aeabi_i2f>

    return round_nth((tempf / 100.0f), n);
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <BME280_getTemperature+0xa0>)
 8001256:	f7ff fe49 	bl	8000eec <__aeabi_fdiv>
 800125a:	4621      	mov	r1, r4
 800125c:	f7ff ffa4 	bl	80011a8 <round_nth>
}
 8001260:	b004      	add	sp, #16
 8001262:	bd70      	pop	{r4, r5, r6, pc}
 8001264:	20001254 	.word	0x20001254
 8001268:	20000222 	.word	0x20000222
 800126c:	20000224 	.word	0x20000224
 8001270:	20000226 	.word	0x20000226
 8001274:	20000228 	.word	0x20000228
 8001278:	42c80000 	.word	0x42c80000

0800127c <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 800127c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800127e:	2664      	movs	r6, #100	; 0x64
    cmd[0] = 0xFD; // hum_msb
 8001280:	23fd      	movs	r3, #253	; 0xfd
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001282:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <BME280_getHumidity+0xbc>)
float BME280_getHumidity(int8_t n) {
 8001284:	4604      	mov	r4, r0
    cmd[0] = 0xFD; // hum_msb
 8001286:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800128a:	aa03      	add	r2, sp, #12
 800128c:	2301      	movs	r3, #1
 800128e:	21ec      	movs	r1, #236	; 0xec
 8001290:	4628      	mov	r0, r5
 8001292:	9600      	str	r6, [sp, #0]
 8001294:	f002 f912 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8001298:	f10d 020d 	add.w	r2, sp, #13
 800129c:	2302      	movs	r3, #2
 800129e:	21ec      	movs	r1, #236	; 0xec
 80012a0:	4628      	mov	r0, r5
 80012a2:	9600      	str	r6, [sp, #0]
 80012a4:	f002 f9e2 	bl	800366c <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <BME280_getHumidity+0xc0>)
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012aa:	4a25      	ldr	r2, [pc, #148]	; (8001340 <BME280_getHumidity+0xc4>)
    v_x1 = t_fine - 76800;
 80012ac:	6819      	ldr	r1, [r3, #0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <BME280_getHumidity+0xc8>)
    v_x1 = t_fine - 76800;
 80012b0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012b4:	881b      	ldrh	r3, [r3, #0]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012b6:	f9b2 2000 	ldrsh.w	r2, [r2]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012ba:	434b      	muls	r3, r1
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012bc:	434a      	muls	r2, r1
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012be:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012c0:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012c6:	4353      	muls	r3, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <BME280_getHumidity+0xcc>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012ca:	129b      	asrs	r3, r3, #10
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012cc:	f9b2 2000 	ldrsh.w	r2, [r2]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80012d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80012d4:	4353      	muls	r3, r2
    hum_raw = (cmd[1] << 8) | cmd[2];
 80012d6:	f8bd 200d 	ldrh.w	r2, [sp, #13]
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    hum_raw = (cmd[1] << 8) | cmd[2];
 80012de:	ba52      	rev16	r2, r2
 80012e0:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <BME280_getHumidity+0xd0>)
                                            (int32_t) dig_H2 + 8192) >> 14));
 80012e4:	139b      	asrs	r3, r3, #14
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80012e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012ea:	0512      	lsls	r2, r2, #20
 80012ec:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <BME280_getHumidity+0xd4>)
 80012f2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80012f6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80012fa:	fb01 2210 	mls	r2, r1, r0, r2
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80012fe:	0bd2      	lsrs	r2, r2, #15
 8001300:	435a      	muls	r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8001302:	13d3      	asrs	r3, r2, #15
 8001304:	435b      	muls	r3, r3
 8001306:	4913      	ldr	r1, [pc, #76]	; (8001354 <BME280_getHumidity+0xd8>)
 8001308:	11db      	asrs	r3, r3, #7
 800130a:	8808      	ldrh	r0, [r1, #0]
 800130c:	4343      	muls	r3, r0
 800130e:	eba2 1223 	sub.w	r2, r2, r3, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8001312:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8001316:	f1b2 5fc8 	cmp.w	r2, #419430400	; 0x19000000
 800131a:	bfa8      	it	ge
 800131c:	f04f 52c8 	movge.w	r2, #419430400	; 0x19000000

    humf = (float) (v_x1 >> 12);
 8001320:	1310      	asrs	r0, r2, #12
 8001322:	f7ff fcdb 	bl	8000cdc <__aeabi_i2f>

    return round_nth((humf / 1024.0f), n);
 8001326:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 800132a:	f7ff fd2b 	bl	8000d84 <__aeabi_fmul>
 800132e:	4621      	mov	r1, r4
 8001330:	f7ff ff3a 	bl	80011a8 <round_nth>
}
 8001334:	b004      	add	sp, #16
 8001336:	bd70      	pop	{r4, r5, r6, pc}
 8001338:	20001254 	.word	0x20001254
 800133c:	20000228 	.word	0x20000228
 8001340:	2000020e 	.word	0x2000020e
 8001344:	20000208 	.word	0x20000208
 8001348:	20000206 	.word	0x20000206
 800134c:	2000020a 	.word	0x2000020a
 8001350:	2000020c 	.word	0x2000020c
 8001354:	20000204 	.word	0x20000204

08001358 <BME280_getPressure>:

float BME280_getPressure(void) {
 8001358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800135a:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF7; // press_msb
 800135c:	23f7      	movs	r3, #247	; 0xf7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800135e:	21ec      	movs	r1, #236	; 0xec
    cmd[0] = 0xF7; // press_msb
 8001360:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001364:	9400      	str	r4, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	aa03      	add	r2, sp, #12
 800136a:	4838      	ldr	r0, [pc, #224]	; (800144c <BME280_getPressure+0xf4>)
 800136c:	f002 f8a6 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001370:	2303      	movs	r3, #3
 8001372:	21ec      	movs	r1, #236	; 0xec
 8001374:	9400      	str	r4, [sp, #0]
 8001376:	f10d 020d 	add.w	r2, sp, #13
 800137a:	4834      	ldr	r0, [pc, #208]	; (800144c <BME280_getPressure+0xf4>)
 800137c:	f002 f976 	bl	800366c <HAL_I2C_Master_Receive>
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <BME280_getPressure+0xf8>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
    var2 = var2 + ((var1 * dig_P5) << 1);
    var2 = (var2 >> 2) + (dig_P4 << 16);
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <BME280_getPressure+0xfc>)
    var1 = (t_fine >> 1) - 64000;
 8001384:	6819      	ldr	r1, [r3, #0]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001386:	f9b2 0000 	ldrsh.w	r0, [r2]
    var1 = (t_fine >> 1) - 64000;
 800138a:	1049      	asrs	r1, r1, #1
 800138c:	f5a1 447a 	sub.w	r4, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8001390:	10a3      	asrs	r3, r4, #2
 8001392:	435b      	muls	r3, r3
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001394:	4930      	ldr	r1, [pc, #192]	; (8001458 <BME280_getPressure+0x100>)
 8001396:	135a      	asrs	r2, r3, #13
 8001398:	4342      	muls	r2, r0
 800139a:	f9b1 0000 	ldrsh.w	r0, [r1]
 800139e:	4360      	muls	r0, r4
 80013a0:	1040      	asrs	r0, r0, #1
 80013a2:	eb00 00e2 	add.w	r0, r0, r2, asr #3
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <BME280_getPressure+0x104>)
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80013a8:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80013b0:	4350      	muls	r0, r2
    if (var1 == 0) {
 80013b2:	13c2      	asrs	r2, r0, #15
 80013b4:	d047      	beq.n	8001446 <BME280_getPressure+0xee>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80013b6:	492a      	ldr	r1, [pc, #168]	; (8001460 <BME280_getPressure+0x108>)
 80013b8:	12db      	asrs	r3, r3, #11
 80013ba:	f9b1 0000 	ldrsh.w	r0, [r1]
    var2 = var2 + ((var1 * dig_P5) << 1);
 80013be:	4929      	ldr	r1, [pc, #164]	; (8001464 <BME280_getPressure+0x10c>)
 80013c0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80013c4:	4361      	muls	r1, r4
 80013c6:	0049      	lsls	r1, r1, #1
 80013c8:	fb00 1103 	mla	r1, r0, r3, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80013cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80013d0:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80013da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80013de:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <BME280_getPressure+0x110>)
 80013e4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80013e8:	0400      	lsls	r0, r0, #16
 80013ea:	eb00 01a1 	add.w	r1, r0, r1, asr #2
        return 0;
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80013ee:	481f      	ldr	r0, [pc, #124]	; (800146c <BME280_getPressure+0x114>)
 80013f0:	eb03 3321 	add.w	r3, r3, r1, asr #12
 80013f4:	4343      	muls	r3, r0
 80013f6:	f103 4043 	add.w	r0, r3, #3271557120	; 0xc3000000
 80013fa:	f500 00a0 	add.w	r0, r0, #5242880	; 0x500000
    if (press < 0x80000000) {
 80013fe:	2800      	cmp	r0, #0
        press = (press << 1) / var1;
    } else {
        press = (press / var1) * 2;
 8001400:	bfb3      	iteet	lt
 8001402:	fbb0 f0f2 	udivlt	r0, r0, r2
        press = (press << 1) / var1;
 8001406:	0040      	lslge	r0, r0, #1
 8001408:	fbb0 f0f2 	udivge	r0, r0, r2
        press = (press / var1) * 2;
 800140c:	0040      	lsllt	r0, r0, #1
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800140e:	08c3      	lsrs	r3, r0, #3
 8001410:	435b      	muls	r3, r3
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <BME280_getPressure+0x118>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001414:	4917      	ldr	r1, [pc, #92]	; (8001474 <BME280_getPressure+0x11c>)
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001416:	f9b2 2000 	ldrsh.w	r2, [r2]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800141a:	f9b1 1000 	ldrsh.w	r1, [r1]
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800141e:	0b5b      	lsrs	r3, r3, #13
 8001420:	435a      	muls	r2, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001422:	0883      	lsrs	r3, r0, #2
 8001424:	434b      	muls	r3, r1
 8001426:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001428:	eb03 3322 	add.w	r3, r3, r2, asr #12
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <BME280_getPressure+0x120>)
 800142e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001432:	4413      	add	r3, r2

    pressf = (float) press;
 8001434:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8001438:	f7ff fc4c 	bl	8000cd4 <__aeabi_ui2f>
    return (pressf / 100.0f);
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <BME280_getPressure+0x124>)
 800143e:	f7ff fd55 	bl	8000eec <__aeabi_fdiv>
}
 8001442:	b004      	add	sp, #16
 8001444:	bd10      	pop	{r4, pc}
        return 0;
 8001446:	2000      	movs	r0, #0
 8001448:	e7fb      	b.n	8001442 <BME280_getPressure+0xea>
 800144a:	bf00      	nop
 800144c:	20001254 	.word	0x20001254
 8001450:	20000228 	.word	0x20000228
 8001454:	20000214 	.word	0x20000214
 8001458:	20000212 	.word	0x20000212
 800145c:	20000210 	.word	0x20000210
 8001460:	2000021a 	.word	0x2000021a
 8001464:	20000218 	.word	0x20000218
 8001468:	20000216 	.word	0x20000216
 800146c:	fffff3cb 	.word	0xfffff3cb
 8001470:	20000220 	.word	0x20000220
 8001474:	2000021e 	.word	0x2000021e
 8001478:	2000021c 	.word	0x2000021c
 800147c:	42c80000 	.word	0x42c80000

08001480 <BME280_Init>:

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8001480:	23f2      	movs	r3, #242	; 0xf2
void BME280_Init(void) {
 8001482:	b530      	push	{r4, r5, lr}
 8001484:	b089      	sub	sp, #36	; 0x24
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001486:	2564      	movs	r5, #100	; 0x64
    cmd[0] = 0xF2; // ctrl_hum
 8001488:	f88d 300c 	strb.w	r3, [sp, #12]
    cmd[1] = 0x05; // Humidity oversampling x16
 800148c:	2305      	movs	r3, #5
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800148e:	4c5e      	ldr	r4, [pc, #376]	; (8001608 <BME280_Init+0x188>)
    cmd[1] = 0x05; // Humidity oversampling x16
 8001490:	f88d 300d 	strb.w	r3, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001494:	aa03      	add	r2, sp, #12
 8001496:	2302      	movs	r3, #2
 8001498:	21ec      	movs	r1, #236	; 0xec
 800149a:	4620      	mov	r0, r4
 800149c:	9500      	str	r5, [sp, #0]
 800149e:	f002 f80d 	bl	80034bc <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80014a2:	23f4      	movs	r3, #244	; 0xf4
 80014a4:	f88d 300c 	strb.w	r3, [sp, #12]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80014a8:	23b7      	movs	r3, #183	; 0xb7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014aa:	aa03      	add	r2, sp, #12
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80014ac:	f88d 300d 	strb.w	r3, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014b0:	21ec      	movs	r1, #236	; 0xec
 80014b2:	2302      	movs	r3, #2
 80014b4:	4620      	mov	r0, r4
 80014b6:	9500      	str	r5, [sp, #0]
 80014b8:	f002 f800 	bl	80034bc <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 80014bc:	23f5      	movs	r3, #245	; 0xf5
 80014be:	f88d 300c 	strb.w	r3, [sp, #12]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 80014c2:	23a0      	movs	r3, #160	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014c4:	aa03      	add	r2, sp, #12
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 80014c6:	f88d 300d 	strb.w	r3, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80014ca:	21ec      	movs	r1, #236	; 0xec
 80014cc:	2302      	movs	r3, #2
 80014ce:	4620      	mov	r0, r4
 80014d0:	9500      	str	r5, [sp, #0]
 80014d2:	f001 fff3 	bl	80034bc <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 80014d6:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80014d8:	aa03      	add	r2, sp, #12
    cmd[0] = 0x88; // read dig_T regs
 80014da:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80014de:	21ec      	movs	r1, #236	; 0xec
 80014e0:	2301      	movs	r3, #1
 80014e2:	4620      	mov	r0, r4
 80014e4:	9500      	str	r5, [sp, #0]
 80014e6:	f001 ffe9 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80014ea:	aa03      	add	r2, sp, #12
 80014ec:	2306      	movs	r3, #6
 80014ee:	21ec      	movs	r1, #236	; 0xec
 80014f0:	4620      	mov	r0, r4
 80014f2:	9500      	str	r5, [sp, #0]
 80014f4:	f002 f8ba 	bl	800366c <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 80014f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <BME280_Init+0x18c>)
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80014fe:	21ec      	movs	r1, #236	; 0xec
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001500:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001502:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8001506:	4b42      	ldr	r3, [pc, #264]	; (8001610 <BME280_Init+0x190>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001508:	4620      	mov	r0, r4
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800150a:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800150c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <BME280_Init+0x194>)
 8001512:	801a      	strh	r2, [r3, #0]
    cmd[0] = 0x8E; // read dig_P regs
 8001514:	238e      	movs	r3, #142	; 0x8e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001516:	aa03      	add	r2, sp, #12
    cmd[0] = 0x8E; // read dig_P regs
 8001518:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800151c:	9500      	str	r5, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	f001 ffcc 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8001524:	aa03      	add	r2, sp, #12
 8001526:	2312      	movs	r3, #18
 8001528:	21ec      	movs	r1, #236	; 0xec
 800152a:	4620      	mov	r0, r4
 800152c:	9500      	str	r5, [sp, #0]
 800152e:	f002 f89d 	bl	800366c <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 8001532:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <BME280_Init+0x198>)
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001538:	21ec      	movs	r1, #236	; 0xec
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800153a:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800153c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <BME280_Init+0x19c>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001542:	4620      	mov	r0, r4
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001544:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8001546:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <BME280_Init+0x1a0>)
 800154c:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800154e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <BME280_Init+0x1a4>)
 8001554:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001556:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <BME280_Init+0x1a8>)
 800155c:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 800155e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <BME280_Init+0x1ac>)
 8001564:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001566:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <BME280_Init+0x1b0>)
 800156c:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800156e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <BME280_Init+0x1b4>)
 8001574:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8001576:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <BME280_Init+0x1b8>)
 800157c:	801a      	strh	r2, [r3, #0]
    cmd[0] = 0xA1; // read dig_H regs
 800157e:	23a1      	movs	r3, #161	; 0xa1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001580:	aa03      	add	r2, sp, #12
    cmd[0] = 0xA1; // read dig_H regs
 8001582:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001586:	9500      	str	r5, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	f001 ff97 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800158e:	aa03      	add	r2, sp, #12
 8001590:	2301      	movs	r3, #1
 8001592:	21ec      	movs	r1, #236	; 0xec
 8001594:	4620      	mov	r0, r4
 8001596:	9500      	str	r5, [sp, #0]
 8001598:	f002 f868 	bl	800366c <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 800159c:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 800159e:	f10d 020d 	add.w	r2, sp, #13
    cmd[1] = 0xE1; // read dig_H regs
 80015a2:	f88d 300d 	strb.w	r3, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80015a6:	21ec      	movs	r1, #236	; 0xec
 80015a8:	2301      	movs	r3, #1
 80015aa:	4620      	mov	r0, r4
 80015ac:	9500      	str	r5, [sp, #0]
 80015ae:	f001 ff85 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80015b2:	f10d 020d 	add.w	r2, sp, #13
 80015b6:	2307      	movs	r3, #7
 80015b8:	21ec      	movs	r1, #236	; 0xec
 80015ba:	4620      	mov	r0, r4
 80015bc:	9500      	str	r5, [sp, #0]
 80015be:	f002 f855 	bl	800366c <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80015c2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <BME280_Init+0x1bc>)
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80015c8:	f89d 1010 	ldrb.w	r1, [sp, #16]
    dig_H1 = cmd[0];
 80015cc:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80015ce:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <BME280_Init+0x1c0>)
 80015d4:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80015d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <BME280_Init+0x1c4>)
 80015dc:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80015de:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80015e2:	f003 020f 	and.w	r2, r3, #15
 80015e6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80015ea:	4917      	ldr	r1, [pc, #92]	; (8001648 <BME280_Init+0x1c8>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80015ec:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80015ee:	800a      	strh	r2, [r1, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80015f0:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80015f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <BME280_Init+0x1cc>)
 80015fa:	8013      	strh	r3, [r2, #0]
    dig_H6 = cmd[7];
 80015fc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <BME280_Init+0x1d0>)
 8001602:	801a      	strh	r2, [r3, #0]
}
 8001604:	b009      	add	sp, #36	; 0x24
 8001606:	bd30      	pop	{r4, r5, pc}
 8001608:	20001254 	.word	0x20001254
 800160c:	20000222 	.word	0x20000222
 8001610:	20000224 	.word	0x20000224
 8001614:	20000226 	.word	0x20000226
 8001618:	20000210 	.word	0x20000210
 800161c:	20000212 	.word	0x20000212
 8001620:	20000214 	.word	0x20000214
 8001624:	20000216 	.word	0x20000216
 8001628:	20000218 	.word	0x20000218
 800162c:	2000021a 	.word	0x2000021a
 8001630:	2000021c 	.word	0x2000021c
 8001634:	2000021e 	.word	0x2000021e
 8001638:	20000220 	.word	0x20000220
 800163c:	20000204 	.word	0x20000204
 8001640:	20000206 	.word	0x20000206
 8001644:	20000208 	.word	0x20000208
 8001648:	2000020a 	.word	0x2000020a
 800164c:	2000020c 	.word	0x2000020c
 8001650:	2000020e 	.word	0x2000020e

08001654 <bcdToDec>:
uint8_t decToBcd(uint8_t val) {
    return ((val / 10 * 16) + (val % 10));
}

uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
 8001654:	0903      	lsrs	r3, r0, #4
 8001656:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800165a:	f000 000f 	and.w	r0, r0, #15
 800165e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001662:	b2c0      	uxtb	r0, r0
 8001664:	4770      	bx	lr
	...

08001668 <DS3231_Update>:

void DS3231_Update(void) {
 8001668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t cmd = 0;
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800166a:	2664      	movs	r6, #100	; 0x64
    uint8_t cmd = 0;
 800166c:	2300      	movs	r3, #0
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800166e:	4d1b      	ldr	r5, [pc, #108]	; (80016dc <DS3231_Update+0x74>)
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001670:	4c1b      	ldr	r4, [pc, #108]	; (80016e0 <DS3231_Update+0x78>)
    uint8_t cmd = 0;
 8001672:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001676:	f10d 020f 	add.w	r2, sp, #15
 800167a:	2301      	movs	r3, #1
 800167c:	21d0      	movs	r1, #208	; 0xd0
 800167e:	4628      	mov	r0, r5
 8001680:	9600      	str	r6, [sp, #0]
 8001682:	f001 ff1b 	bl	80034bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001686:	4622      	mov	r2, r4
 8001688:	2313      	movs	r3, #19
 800168a:	21d0      	movs	r1, #208	; 0xd0
 800168c:	4628      	mov	r0, r5
 800168e:	9600      	str	r6, [sp, #0]
 8001690:	f001 ffec 	bl	800366c <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <DS3231_Update+0x7c>)
 8001696:	7822      	ldrb	r2, [r4, #0]
 8001698:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 800169a:	7862      	ldrb	r2, [r4, #1]
 800169c:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 800169e:	78a2      	ldrb	r2, [r4, #2]
 80016a0:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 80016a2:	78e2      	ldrb	r2, [r4, #3]
 80016a4:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 80016a6:	7922      	ldrb	r2, [r4, #4]
 80016a8:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 80016aa:	7962      	ldrb	r2, [r4, #5]
 80016ac:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 80016ae:	79a2      	ldrb	r2, [r4, #6]
 80016b0:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 80016b2:	79e2      	ldrb	r2, [r4, #7]
 80016b4:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 80016b6:	7a22      	ldrb	r2, [r4, #8]
 80016b8:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 80016ba:	7a62      	ldrb	r2, [r4, #9]
 80016bc:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 80016be:	7aa2      	ldrb	r2, [r4, #10]
 80016c0:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 80016c2:	7ae2      	ldrb	r2, [r4, #11]
 80016c4:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 80016c6:	7b22      	ldrb	r2, [r4, #12]
 80016c8:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 80016ca:	7b62      	ldrb	r2, [r4, #13]
 80016cc:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 80016ce:	7ba2      	ldrb	r2, [r4, #14]
 80016d0:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 80016d2:	7be2      	ldrb	r2, [r4, #15]
 80016d4:	741a      	strb	r2, [r3, #16]
}
 80016d6:	b004      	add	sp, #16
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	bf00      	nop
 80016dc:	20001254 	.word	0x20001254
 80016e0:	2000022c 	.word	0x2000022c
 80016e4:	2000023f 	.word	0x2000023f

080016e8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 80016e8:	4b01      	ldr	r3, [pc, #4]	; (80016f0 <DS3231_getSec+0x8>)
 80016ea:	7818      	ldrb	r0, [r3, #0]
 80016ec:	f7ff bfb2 	b.w	8001654 <bcdToDec>
 80016f0:	2000022c 	.word	0x2000022c

080016f4 <DS3231_getMin>:
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <DS3231_getMin+0x8>)
 80016f6:	7858      	ldrb	r0, [r3, #1]
 80016f8:	f7ff bfac 	b.w	8001654 <bcdToDec>
 80016fc:	2000022c 	.word	0x2000022c

08001700 <DS3231_getHrs>:
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <DS3231_getHrs+0x8>)
 8001702:	7898      	ldrb	r0, [r3, #2]
 8001704:	f7ff bfa6 	b.w	8001654 <bcdToDec>
 8001708:	2000022c 	.word	0x2000022c

0800170c <DS3231_getDay>:
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <DS3231_getDay+0x8>)
 800170e:	78d8      	ldrb	r0, [r3, #3]
 8001710:	f7ff bfa0 	b.w	8001654 <bcdToDec>
 8001714:	2000022c 	.word	0x2000022c

08001718 <DS3231_getDate>:
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <DS3231_getDate+0x8>)
 800171a:	7918      	ldrb	r0, [r3, #4]
 800171c:	f7ff bf9a 	b.w	8001654 <bcdToDec>
 8001720:	2000022c 	.word	0x2000022c

08001724 <DS3231_getMonth>:
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 8001724:	4b01      	ldr	r3, [pc, #4]	; (800172c <DS3231_getMonth+0x8>)
 8001726:	7958      	ldrb	r0, [r3, #5]
 8001728:	f7ff bf94 	b.w	8001654 <bcdToDec>
 800172c:	2000022c 	.word	0x2000022c

08001730 <DS3231_getYear>:
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8001730:	4b01      	ldr	r3, [pc, #4]	; (8001738 <DS3231_getYear+0x8>)
 8001732:	7998      	ldrb	r0, [r3, #6]
 8001734:	f7ff bf8e 	b.w	8001654 <bcdToDec>
 8001738:	2000022c 	.word	0x2000022c

0800173c <DS3231_getAlarm1Min>:
uint8_t DS3231_getAlarm1Sec(void) {
    return bcdToDec(rtcBuffer[7]);
}

uint8_t DS3231_getAlarm1Min(void) {
    return bcdToDec(rtcBuffer[8]);
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <DS3231_getAlarm1Min+0x8>)
 800173e:	7a18      	ldrb	r0, [r3, #8]
 8001740:	f7ff bf88 	b.w	8001654 <bcdToDec>
 8001744:	2000022c 	.word	0x2000022c

08001748 <DS3231_getAlarm1Hour>:
}

uint8_t DS3231_getAlarm1Hour(void) {
    return bcdToDec(rtcBuffer[9]);
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <DS3231_getAlarm1Hour+0x8>)
 800174a:	7a58      	ldrb	r0, [r3, #9]
 800174c:	f7ff bf82 	b.w	8001654 <bcdToDec>
 8001750:	2000022c 	.word	0x2000022c

08001754 <LCD_Bus>:
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
 8001754:	b510      	push	{r4, lr}
 8001756:	4604      	mov	r4, r0
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001758:	0bc2      	lsrs	r2, r0, #15
 800175a:	bf18      	it	ne
 800175c:	2201      	movne	r2, #1
 800175e:	2102      	movs	r1, #2
 8001760:	484a      	ldr	r0, [pc, #296]	; (800188c <LCD_Bus+0x138>)
 8001762:	f001 fc23 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001766:	0461      	lsls	r1, r4, #17
 8001768:	f3c4 3280 	ubfx	r2, r4, #14, #1
 800176c:	f04f 0101 	mov.w	r1, #1
 8001770:	bf48      	it	mi
 8001772:	2201      	movmi	r2, #1
 8001774:	4845      	ldr	r0, [pc, #276]	; (800188c <LCD_Bus+0x138>)
 8001776:	f001 fc19 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800177a:	04a3      	lsls	r3, r4, #18
 800177c:	f3c4 3240 	ubfx	r2, r4, #13, #1
 8001780:	4843      	ldr	r0, [pc, #268]	; (8001890 <LCD_Bus+0x13c>)
 8001782:	bf48      	it	mi
 8001784:	2201      	movmi	r2, #1
 8001786:	2108      	movs	r1, #8
 8001788:	f001 fc10 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800178c:	04e0      	lsls	r0, r4, #19
 800178e:	f3c4 3200 	ubfx	r2, r4, #12, #1
 8001792:	f04f 0104 	mov.w	r1, #4
 8001796:	bf48      	it	mi
 8001798:	2201      	movmi	r2, #1
 800179a:	483d      	ldr	r0, [pc, #244]	; (8001890 <LCD_Bus+0x13c>)
 800179c:	f001 fc06 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80017a0:	0521      	lsls	r1, r4, #20
 80017a2:	f3c4 22c0 	ubfx	r2, r4, #11, #1
 80017a6:	f04f 0102 	mov.w	r1, #2
 80017aa:	bf48      	it	mi
 80017ac:	2201      	movmi	r2, #1
 80017ae:	4838      	ldr	r0, [pc, #224]	; (8001890 <LCD_Bus+0x13c>)
 80017b0:	f001 fbfc 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80017b4:	0563      	lsls	r3, r4, #21
 80017b6:	f3c4 2280 	ubfx	r2, r4, #10, #1
 80017ba:	4835      	ldr	r0, [pc, #212]	; (8001890 <LCD_Bus+0x13c>)
 80017bc:	bf48      	it	mi
 80017be:	2201      	movmi	r2, #1
 80017c0:	2101      	movs	r1, #1
 80017c2:	f001 fbf3 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80017c6:	05a0      	lsls	r0, r4, #22
 80017c8:	f3c4 2240 	ubfx	r2, r4, #9, #1
 80017cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d0:	bf48      	it	mi
 80017d2:	2201      	movmi	r2, #1
 80017d4:	482e      	ldr	r0, [pc, #184]	; (8001890 <LCD_Bus+0x13c>)
 80017d6:	f001 fbe9 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80017da:	05e1      	lsls	r1, r4, #23
 80017dc:	f3c4 2200 	ubfx	r2, r4, #8, #1
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	bf48      	it	mi
 80017e6:	2201      	movmi	r2, #1
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <LCD_Bus+0x13c>)
 80017ea:	f001 fbdf 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80017ee:	0623      	lsls	r3, r4, #24
 80017f0:	f3c4 12c0 	ubfx	r2, r4, #7, #1
 80017f4:	4825      	ldr	r0, [pc, #148]	; (800188c <LCD_Bus+0x138>)
 80017f6:	bf48      	it	mi
 80017f8:	2201      	movmi	r2, #1
 80017fa:	2104      	movs	r1, #4
 80017fc:	f001 fbd6 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001800:	0660      	lsls	r0, r4, #25
 8001802:	f3c4 1280 	ubfx	r2, r4, #6, #1
 8001806:	f04f 0108 	mov.w	r1, #8
 800180a:	bf48      	it	mi
 800180c:	2201      	movmi	r2, #1
 800180e:	481f      	ldr	r0, [pc, #124]	; (800188c <LCD_Bus+0x138>)
 8001810:	f001 fbcc 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001814:	06a1      	lsls	r1, r4, #26
 8001816:	f3c4 1240 	ubfx	r2, r4, #5, #1
 800181a:	f04f 0110 	mov.w	r1, #16
 800181e:	bf48      	it	mi
 8001820:	2201      	movmi	r2, #1
 8001822:	481a      	ldr	r0, [pc, #104]	; (800188c <LCD_Bus+0x138>)
 8001824:	f001 fbc2 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001828:	06e3      	lsls	r3, r4, #27
 800182a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <LCD_Bus+0x138>)
 8001830:	bf48      	it	mi
 8001832:	2201      	movmi	r2, #1
 8001834:	2120      	movs	r1, #32
 8001836:	f001 fbb9 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800183a:	0720      	lsls	r0, r4, #28
 800183c:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8001840:	f04f 0140 	mov.w	r1, #64	; 0x40
 8001844:	bf48      	it	mi
 8001846:	2201      	movmi	r2, #1
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <LCD_Bus+0x138>)
 800184a:	f001 fbaf 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800184e:	0761      	lsls	r1, r4, #29
 8001850:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8001854:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001858:	bf48      	it	mi
 800185a:	2201      	movmi	r2, #1
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LCD_Bus+0x138>)
 800185e:	f001 fba5 	bl	8002fac <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001862:	07a3      	lsls	r3, r4, #30
 8001864:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8001868:	f04f 0110 	mov.w	r1, #16
 800186c:	bf48      	it	mi
 800186e:	2201      	movmi	r2, #1
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <LCD_Bus+0x13c>)
 8001872:	f001 fb9b 	bl	8002fac <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001876:	f014 0201 	ands.w	r2, r4, #1
 800187a:	bf18      	it	ne
 800187c:	2201      	movne	r2, #1
}
 800187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001882:	2120      	movs	r1, #32
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <LCD_Bus+0x13c>)
 8001886:	f001 bb91 	b.w	8002fac <HAL_GPIO_WritePin>
 800188a:	bf00      	nop
 800188c:	40010800 	.word	0x40010800
 8001890:	40011000 	.word	0x40011000

08001894 <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4605      	mov	r5, r0
	LCD_RS_R
 8001898:	4c10      	ldr	r4, [pc, #64]	; (80018dc <LCD_Send_Cmd+0x48>)
 800189a:	2200      	movs	r2, #0
 800189c:	4620      	mov	r0, r4
 800189e:	2101      	movs	r1, #1
 80018a0:	f001 fb84 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_CS_R
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4620      	mov	r0, r4
 80018ac:	f001 fb7e 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_Bus(cmd);
 80018b0:	4628      	mov	r0, r5
 80018b2:	f7ff ff4f 	bl	8001754 <LCD_Bus>
	LCD_WR_R
 80018b6:	4620      	mov	r0, r4
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	f001 fb76 	bl	8002fac <HAL_GPIO_WritePin>
	//_delay_us(5);
	LCD_WR_S
 80018c0:	4620      	mov	r0, r4
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	f001 fb71 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_CS_S
 80018ca:	4620      	mov	r0, r4
}
 80018cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD_CS_S
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d6:	f001 bb69 	b.w	8002fac <HAL_GPIO_WritePin>
 80018da:	bf00      	nop
 80018dc:	40010c00 	.word	0x40010c00

080018e0 <LCD_Send_Dat>:

inline static void LCD_Send_Dat(uint16_t dat)
{
	LCD_RS_S
 80018e0:	2201      	movs	r2, #1
{
 80018e2:	b538      	push	{r3, r4, r5, lr}
 80018e4:	4605      	mov	r5, r0
	LCD_RS_S
 80018e6:	4c10      	ldr	r4, [pc, #64]	; (8001928 <LCD_Send_Dat+0x48>)
 80018e8:	4611      	mov	r1, r2
 80018ea:	4620      	mov	r0, r4
 80018ec:	f001 fb5e 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_CS_R	
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f6:	4620      	mov	r0, r4
 80018f8:	f001 fb58 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_Bus(dat);
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff ff29 	bl	8001754 <LCD_Bus>
	LCD_WR_R
 8001902:	4620      	mov	r0, r4
 8001904:	2200      	movs	r2, #0
 8001906:	2102      	movs	r1, #2
 8001908:	f001 fb50 	bl	8002fac <HAL_GPIO_WritePin>
//	_delay_us(5);
	LCD_WR_S
 800190c:	4620      	mov	r0, r4
 800190e:	2201      	movs	r2, #1
 8001910:	2102      	movs	r1, #2
 8001912:	f001 fb4b 	bl	8002fac <HAL_GPIO_WritePin>
	LCD_CS_S
 8001916:	4620      	mov	r0, r4
}
 8001918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD_CS_S
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001922:	f001 bb43 	b.w	8002fac <HAL_GPIO_WritePin>
 8001926:	bf00      	nop
 8001928:	40010c00 	.word	0x40010c00

0800192c <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 800192c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001930:	461d      	mov	r5, r3
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
 8001932:	0a03      	lsrs	r3, r0, #8
 8001934:	f88d 3004 	strb.w	r3, [sp, #4]
  data[1] = x1 & 0xFF;
 8001938:	f88d 0005 	strb.w	r0, [sp, #5]
  data[2] = x2 >> 8;
 800193c:	0a13      	lsrs	r3, r2, #8
  data[3] = x2 & 0xFF;
	LCD_Send_Cmd(HX8357_CASET);
 800193e:	202a      	movs	r0, #42	; 0x2a
 8001940:	af01      	add	r7, sp, #4
{		
 8001942:	460e      	mov	r6, r1
  data[2] = x2 >> 8;
 8001944:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = x2 & 0xFF;
 8001948:	f88d 2007 	strb.w	r2, [sp, #7]
	LCD_Send_Cmd(HX8357_CASET);
 800194c:	46b8      	mov	r8, r7
 800194e:	f7ff ffa1 	bl	8001894 <LCD_Send_Cmd>
 8001952:	2404      	movs	r4, #4
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001954:	f818 0b01 	ldrb.w	r0, [r8], #1
 8001958:	3c01      	subs	r4, #1
 800195a:	f7ff ffc1 	bl	80018e0 <LCD_Send_Dat>
 800195e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001962:	d1f7      	bne.n	8001954 <LCD_Window+0x28>
	data[0] = y1 >> 8;
 8001964:	0a33      	lsrs	r3, r6, #8
 8001966:	f88d 3004 	strb.w	r3, [sp, #4]
  data[1] = y1;
  data[2] = y2 >> 8;
  data[3] = y2;
	LCD_Send_Cmd(HX8357_PASET);
 800196a:	202b      	movs	r0, #43	; 0x2b
  data[2] = y2 >> 8;
 800196c:	0a2b      	lsrs	r3, r5, #8
  data[1] = y1;
 800196e:	f88d 6005 	strb.w	r6, [sp, #5]
  data[2] = y2 >> 8;
 8001972:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = y2;
 8001976:	f88d 5007 	strb.w	r5, [sp, #7]
	LCD_Send_Cmd(HX8357_PASET);
 800197a:	2404      	movs	r4, #4
 800197c:	f7ff ff8a 	bl	8001894 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001980:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001984:	3c01      	subs	r4, #1
 8001986:	f7ff ffab 	bl	80018e0 <LCD_Send_Dat>
 800198a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800198e:	d1f7      	bne.n	8001980 <LCD_Window+0x54>
  LCD_Send_Cmd(HX83h7_RAMWR);
 8001990:	202c      	movs	r0, #44	; 0x2c
}
 8001992:	b002      	add	sp, #8
 8001994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_Send_Cmd(HX83h7_RAMWR);
 8001998:	f7ff bf7c 	b.w	8001894 <LCD_Send_Cmd>

0800199c <RGB>:
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800199c:	0209      	lsls	r1, r1, #8
 800199e:	eb01 4000 	add.w	r0, r1, r0, lsl #16
}
 80019a2:	4410      	add	r0, r2
 80019a4:	4770      	bx	lr

080019a6 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80019a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a8:	4607      	mov	r7, r0
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019aa:	1e7d      	subs	r5, r7, #1
 80019ac:	4415      	add	r5, r2
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80019ae:	fb03 f602 	mul.w	r6, r3, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019b2:	1e4a      	subs	r2, r1, #1
 80019b4:	441a      	add	r2, r3
 80019b6:	b2ab      	uxth	r3, r5
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80019b8:	2500      	movs	r5, #0
{
 80019ba:	9c06      	ldr	r4, [sp, #24]
 80019bc:	4608      	mov	r0, r1
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80019be:	b292      	uxth	r2, r2
 80019c0:	4639      	mov	r1, r7
 80019c2:	f7ff ffb3 	bl	800192c <LCD_Window>
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80019c6:	f3c4 2085 	ubfx	r0, r4, #10, #6
 80019ca:	f3c4 43c4 	ubfx	r3, r4, #19, #5
 80019ce:	0140      	lsls	r0, r0, #5
 80019d0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80019d4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80019d8:	4304      	orrs	r4, r0
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80019da:	42b5      	cmp	r5, r6
 80019dc:	d100      	bne.n	80019e0 <LCD_Rect_Fill+0x3a>
}
 80019de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff ff7d 	bl	80018e0 <LCD_Send_Dat>
 80019e6:	3501      	adds	r5, #1
 80019e8:	e7f7      	b.n	80019da <LCD_Rect_Fill+0x34>

080019ea <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 80019ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int deltaX = abs(x2 - x1);
 80019ee:	1a15      	subs	r5, r2, r0
	int deltaY = abs(y2 - y1);
 80019f0:	1a5e      	subs	r6, r3, r1
	int deltaX = abs(x2 - x1);
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	bfb8      	it	lt
 80019f6:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 80019f8:	2e00      	cmp	r6, #0
 80019fa:	bfb8      	it	lt
 80019fc:	4276      	neglt	r6, r6
{
 80019fe:	4617      	mov	r7, r2
	int signX = x1 < x2 ? 1 : -1;
 8001a00:	4282      	cmp	r2, r0
 8001a02:	bf8c      	ite	hi
 8001a04:	f04f 0a01 	movhi.w	sl, #1
 8001a08:	f04f 3aff 	movls.w	sl, #4294967295
{
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	4698      	mov	r8, r3
	int signY = y1 < y2 ? 1 : -1;
 8001a10:	428b      	cmp	r3, r1
 8001a12:	bf8c      	ite	hi
 8001a14:	f04f 0901 	movhi.w	r9, #1
 8001a18:	f04f 39ff 	movls.w	r9, #4294967295
	int error = deltaX - deltaY;
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001a1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	int error = deltaX - deltaY;
 8001a20:	1bac      	subs	r4, r5, r6
		if (x1 == x2 && y1 == y2)
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 8001a22:	f1c6 0b00 	rsb	fp, r6, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001a26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001a28:	e9cd 1304 	strd	r1, r3, [sp, #16]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	9003      	str	r0, [sp, #12]
 8001a32:	f7ff ffb8 	bl	80019a6 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001a36:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8001a3a:	9803      	ldr	r0, [sp, #12]
 8001a3c:	42b8      	cmp	r0, r7
 8001a3e:	d101      	bne.n	8001a44 <LCD_Line+0x5a>
 8001a40:	4541      	cmp	r1, r8
 8001a42:	d00d      	beq.n	8001a60 <LCD_Line+0x76>
		if (error2 > -deltaY)
 8001a44:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
		error2 = error * 2;
 8001a48:	ea4f 0244 	mov.w	r2, r4, lsl #1
		{
			error -= deltaY;
			x1 += signX;
 8001a4c:	bfbe      	ittt	lt
 8001a4e:	4450      	addlt	r0, sl
			error -= deltaY;
 8001a50:	1ba4      	sublt	r4, r4, r6
			x1 += signX;
 8001a52:	b280      	uxthlt	r0, r0
		}
		if (error2 < deltaX)
 8001a54:	4295      	cmp	r5, r2
 8001a56:	dde6      	ble.n	8001a26 <LCD_Line+0x3c>
		{
			error += deltaX;
			y1 += signY;
 8001a58:	4449      	add	r1, r9
			error += deltaX;
 8001a5a:	442c      	add	r4, r5
			y1 += signY;
 8001a5c:	b289      	uxth	r1, r1
 8001a5e:	e7e2      	b.n	8001a26 <LCD_Line+0x3c>
		}
	}
}
 8001a60:	b007      	add	sp, #28
 8001a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a66 <LCD_Rect>:
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8001a66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a6a:	460e      	mov	r6, r1
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	4607      	mov	r7, r0
 8001a70:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8001a74:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
	LCD_Line(x, y, x + w, y, size, color24);
 8001a78:	4402      	add	r2, r0
 8001a7a:	b295      	uxth	r5, r2
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001a7c:	4434      	add	r4, r6
 8001a7e:	b2a4      	uxth	r4, r4
	LCD_Line(x, y, x + w, y, size, color24);
 8001a80:	460b      	mov	r3, r1
 8001a82:	462a      	mov	r2, r5
 8001a84:	e9cd 8900 	strd	r8, r9, [sp]
 8001a88:	f7ff ffaf 	bl	80019ea <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	462a      	mov	r2, r5
 8001a90:	4621      	mov	r1, r4
 8001a92:	4638      	mov	r0, r7
 8001a94:	e9cd 8900 	strd	r8, r9, [sp]
 8001a98:	f7ff ffa7 	bl	80019ea <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	463a      	mov	r2, r7
 8001aa0:	4631      	mov	r1, r6
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	e9cd 8900 	strd	r8, r9, [sp]
 8001aa8:	f7ff ff9f 	bl	80019ea <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8001aac:	4623      	mov	r3, r4
 8001aae:	462a      	mov	r2, r5
 8001ab0:	4631      	mov	r1, r6
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
}
 8001ab8:	b003      	add	sp, #12
 8001aba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8001abe:	f7ff bf94 	b.w	80019ea <LCD_Line>

08001ac2 <LCD_Circle>:
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8001ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8001ac6:	f04f 0b00 	mov.w	fp, #0
{
 8001aca:	b08b      	sub	sp, #44	; 0x2c
 8001acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ad2:	9f15      	ldr	r7, [sp, #84]	; 0x54
	P = 1 - radius;
 8001ad4:	f1c2 0301 	rsb	r3, r2, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8001ad8:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
	b_ = radius;
 8001adc:	9202      	str	r2, [sp, #8]
	P = 1 - radius;
 8001ade:	9303      	str	r3, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001ae0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8001ae4:	9b04      	ldr	r3, [sp, #16]
 8001ae6:	fa1f f58b 	uxth.w	r5, fp
 8001aea:	eba3 0905 	sub.w	r9, r3, r5
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8001aee:	1b1b      	subs	r3, r3, r4
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	9306      	str	r3, [sp, #24]
 8001af4:	9b05      	ldr	r3, [sp, #20]
 8001af6:	fa1f f989 	uxth.w	r9, r9
 8001afa:	eba3 0805 	sub.w	r8, r3, r5
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001afe:	eba3 0a04 	sub.w	sl, r3, r4
		if (fill == 1)
 8001b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b04:	fa1f f888 	uxth.w	r8, r8
 8001b08:	2b01      	cmp	r3, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001b0a:	fa1f fa8a 	uxth.w	sl, sl
		if (fill == 1)
 8001b0e:	d122      	bne.n	8001b56 <LCD_Circle+0x94>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001b10:	006d      	lsls	r5, r5, #1
 8001b12:	0064      	lsls	r4, r4, #1
 8001b14:	3501      	adds	r5, #1
 8001b16:	3401      	adds	r4, #1
 8001b18:	b2ad      	uxth	r5, r5
 8001b1a:	b2a4      	uxth	r4, r4
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	462a      	mov	r2, r5
 8001b20:	4651      	mov	r1, sl
 8001b22:	4648      	mov	r0, r9
 8001b24:	9700      	str	r7, [sp, #0]
 8001b26:	f7ff ff3e 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	9700      	str	r7, [sp, #0]
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8001b30:	4641      	mov	r1, r8
 8001b32:	9806      	ldr	r0, [sp, #24]
 8001b34:	f7ff ff37 	bl	80019a6 <LCD_Rect_Fill>
		}
		if (P < 0)
 8001b38:	9b03      	ldr	r3, [sp, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	da4e      	bge.n	8001bdc <LCD_Circle+0x11a>
		{
			P = (P + 3) + (2 * a_);
 8001b3e:	3303      	adds	r3, #3
 8001b40:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8001b44:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8001b46:	9b02      	ldr	r3, [sp, #8]
 8001b48:	f10b 0b01 	add.w	fp, fp, #1
 8001b4c:	455b      	cmp	r3, fp
 8001b4e:	dac7      	bge.n	8001ae0 <LCD_Circle+0x1e>
			P = (P + 5) + (2 * (a_ - b_));
			a_++;
			b_--;
		}
	}
}
 8001b50:	b00b      	add	sp, #44	; 0x2c
 8001b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8001b56:	9b04      	ldr	r3, [sp, #16]
 8001b58:	4632      	mov	r2, r6
 8001b5a:	18eb      	adds	r3, r5, r3
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	9307      	str	r3, [sp, #28]
 8001b60:	9b05      	ldr	r3, [sp, #20]
 8001b62:	9700      	str	r7, [sp, #0]
 8001b64:	4423      	add	r3, r4
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	9308      	str	r3, [sp, #32]
 8001b6a:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8001b6e:	4633      	mov	r3, r6
 8001b70:	f7ff ff19 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8001b74:	9b04      	ldr	r3, [sp, #16]
 8001b76:	4632      	mov	r2, r6
 8001b78:	441c      	add	r4, r3
 8001b7a:	9b05      	ldr	r3, [sp, #20]
 8001b7c:	b2a4      	uxth	r4, r4
 8001b7e:	441d      	add	r5, r3
 8001b80:	b2ad      	uxth	r5, r5
 8001b82:	4633      	mov	r3, r6
 8001b84:	4629      	mov	r1, r5
 8001b86:	4620      	mov	r0, r4
 8001b88:	9700      	str	r7, [sp, #0]
 8001b8a:	f7ff ff0c 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001b8e:	4633      	mov	r3, r6
 8001b90:	4632      	mov	r2, r6
 8001b92:	4648      	mov	r0, r9
 8001b94:	9908      	ldr	r1, [sp, #32]
 8001b96:	9700      	str	r7, [sp, #0]
 8001b98:	f7ff ff05 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001b9c:	4633      	mov	r3, r6
 8001b9e:	4632      	mov	r2, r6
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	9806      	ldr	r0, [sp, #24]
 8001ba4:	9700      	str	r7, [sp, #0]
 8001ba6:	f7ff fefe 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8001baa:	4633      	mov	r3, r6
 8001bac:	4632      	mov	r2, r6
 8001bae:	4641      	mov	r1, r8
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	9700      	str	r7, [sp, #0]
 8001bb4:	f7ff fef7 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8001bb8:	4633      	mov	r3, r6
 8001bba:	4632      	mov	r2, r6
 8001bbc:	4651      	mov	r1, sl
 8001bbe:	9807      	ldr	r0, [sp, #28]
 8001bc0:	9700      	str	r7, [sp, #0]
 8001bc2:	f7ff fef0 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8001bc6:	4633      	mov	r3, r6
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	4648      	mov	r0, r9
 8001bce:	9700      	str	r7, [sp, #0]
 8001bd0:	f7ff fee9 	bl	80019a6 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8001bd4:	4633      	mov	r3, r6
 8001bd6:	4632      	mov	r2, r6
 8001bd8:	9700      	str	r7, [sp, #0]
 8001bda:	e7a9      	b.n	8001b30 <LCD_Circle+0x6e>
			P = (P + 5) + (2 * (a_ - b_));
 8001bdc:	9b03      	ldr	r3, [sp, #12]
 8001bde:	9a02      	ldr	r2, [sp, #8]
 8001be0:	3305      	adds	r3, #5
 8001be2:	ebab 0202 	sub.w	r2, fp, r2
 8001be6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001bea:	9303      	str	r3, [sp, #12]
			b_--;
 8001bec:	9b02      	ldr	r3, [sp, #8]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	e7a8      	b.n	8001b46 <LCD_Circle+0x84>

08001bf4 <LCD_Font>:
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001bf8:	f04f 0a00 	mov.w	sl, #0
{
 8001bfc:	b091      	sub	sp, #68	; 0x44
 8001bfe:	9205      	str	r2, [sp, #20]
 8001c00:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
	int16_t cursor_y = y;
 8001c04:	b20c      	sxth	r4, r1
{
 8001c06:	9206      	str	r2, [sp, #24]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001c08:	6859      	ldr	r1, [r3, #4]
	int16_t cursor_x = x;
 8001c0a:	b202      	sxth	r2, r0
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001c0c:	6818      	ldr	r0, [r3, #0]
	int16_t cursor_x = x;
 8001c0e:	9203      	str	r2, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001c10:	aa0d      	add	r2, sp, #52	; 0x34
 8001c12:	c203      	stmia	r2!, {r0, r1}
 8001c14:	6898      	ldr	r0, [r3, #8]
	int16_t cursor_x = x;
 8001c16:	9f03      	ldr	r7, [sp, #12]
	{
		char c = text[text_pos];
		if(c == '\n')
		{
			cursor_x = x;
			cursor_y += font.yAdvance * size;
 8001c18:	f89d b068 	ldrb.w	fp, [sp, #104]	; 0x68
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001c1c:	6010      	str	r0, [r2, #0]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001c1e:	9805      	ldr	r0, [sp, #20]
 8001c20:	f7fe fa96 	bl	8000150 <strlen>
 8001c24:	fa1f f58a 	uxth.w	r5, sl
 8001c28:	42a8      	cmp	r0, r5
 8001c2a:	d802      	bhi.n	8001c32 <LCD_Font+0x3e>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
		}
	}
}
 8001c2c:	b011      	add	sp, #68	; 0x44
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		char c = text[text_pos];
 8001c32:	9b05      	ldr	r3, [sp, #20]
 8001c34:	5d5a      	ldrb	r2, [r3, r5]
		if(c == '\n')
 8001c36:	2a0a      	cmp	r2, #10
 8001c38:	d109      	bne.n	8001c4e <LCD_Font+0x5a>
			cursor_y += font.yAdvance * size;
 8001c3a:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
 8001c3e:	9b06      	ldr	r3, [sp, #24]
			cursor_x = x;
 8001c40:	9f03      	ldr	r7, [sp, #12]
			cursor_y += font.yAdvance * size;
 8001c42:	fb01 4403 	mla	r4, r1, r3, r4
 8001c46:	b224      	sxth	r4, r4
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001c48:	f10a 0a01 	add.w	sl, sl, #1
 8001c4c:	e7e7      	b.n	8001c1e <LCD_Font+0x2a>
		else if(c >= font.first && c <= font.last && c != '\r')
 8001c4e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8001c52:	4291      	cmp	r1, r2
 8001c54:	d8f8      	bhi.n	8001c48 <LCD_Font+0x54>
 8001c56:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 8001c5a:	4290      	cmp	r0, r2
 8001c5c:	d3f4      	bcc.n	8001c48 <LCD_Font+0x54>
 8001c5e:	2a0d      	cmp	r2, #13
 8001c60:	d0f2      	beq.n	8001c48 <LCD_Font+0x54>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001c62:	1a52      	subs	r2, r2, r1
 8001c64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001c66:	ad0b      	add	r5, sp, #44	; 0x2c
 8001c68:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
 8001c6c:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8001c70:	6871      	ldr	r1, [r6, #4]
 8001c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c74:	c503      	stmia	r5!, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001c76:	2500      	movs	r5, #0
	uint8_t bits = 0, bit = 0;
 8001c78:	462e      	mov	r6, r5
	uint16_t bo = glyph -> bitmapOffset;
 8001c7a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 8001c7e:	9307      	str	r3, [sp, #28]
	uint8_t bits = 0, bit = 0;
 8001c80:	9504      	str	r5, [sp, #16]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001c82:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001c86:	b2eb      	uxtb	r3, r5
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c8c:	d857      	bhi.n	8001d3e <LCD_Font+0x14a>
			cursor_x += glyph.xAdvance * size;
 8001c8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001c92:	9b06      	ldr	r3, [sp, #24]
 8001c94:	fb02 7703 	mla	r7, r2, r3, r7
 8001c98:	b23f      	sxth	r7, r7
 8001c9a:	e7d5      	b.n	8001c48 <LCD_Font+0x54>
			if(bit == 0)
 8001c9c:	b946      	cbnz	r6, 8001cb0 <LCD_Font+0xbc>
				bit  = 0x80;
 8001c9e:	2680      	movs	r6, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001ca0:	9b07      	ldr	r3, [sp, #28]
 8001ca2:	f109 0201 	add.w	r2, r9, #1
 8001ca6:	f813 3009 	ldrb.w	r3, [r3, r9]
 8001caa:	fa1f f982 	uxth.w	r9, r2
 8001cae:	9304      	str	r3, [sp, #16]
			if(bits & bit)
 8001cb0:	9b04      	ldr	r3, [sp, #16]
 8001cb2:	4033      	ands	r3, r6
 8001cb4:	9308      	str	r3, [sp, #32]
 8001cb6:	d025      	beq.n	8001d04 <LCD_Font+0x110>
				set_pixels++;
 8001cb8:	3001      	adds	r0, #1
 8001cba:	b280      	uxth	r0, r0
			bit >>= 1;
 8001cbc:	0876      	lsrs	r6, r6, #1
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001cbe:	f108 0801 	add.w	r8, r8, #1
 8001cc2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8001cc6:	fa5f fe88 	uxtb.w	lr, r8
 8001cca:	4572      	cmp	r2, lr
 8001ccc:	d8e6      	bhi.n	8001c9c <LCD_Font+0xa8>
		if (set_pixels > 0)
 8001cce:	b1b8      	cbz	r0, 8001d00 <LCD_Font+0x10c>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001cd0:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 8001cd4:	fa5f fc85 	uxtb.w	ip, r5
 8001cd8:	4461      	add	r1, ip
 8001cda:	f99d c031 	ldrsb.w	ip, [sp, #49]	; 0x31
 8001cde:	fb0b f200 	mul.w	r2, fp, r0
 8001ce2:	44f4      	add	ip, lr
 8001ce4:	ebac 0000 	sub.w	r0, ip, r0
 8001ce8:	fb01 410b 	mla	r1, r1, fp, r4
 8001cec:	fb00 700b 	mla	r0, r0, fp, r7
 8001cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	b289      	uxth	r1, r1
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	b280      	uxth	r0, r0
 8001cfc:	f7ff fe53 	bl	80019a6 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001d00:	3501      	adds	r5, #1
 8001d02:	e7be      	b.n	8001c82 <LCD_Font+0x8e>
			else if (set_pixels > 0)
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0d9      	beq.n	8001cbc <LCD_Font+0xc8>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001d08:	f99d c031 	ldrsb.w	ip, [sp, #49]	; 0x31
 8001d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d0e:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 8001d12:	fa5f fe88 	uxtb.w	lr, r8
 8001d16:	44f4      	add	ip, lr
 8001d18:	fb0b f200 	mul.w	r2, fp, r0
 8001d1c:	4419      	add	r1, r3
 8001d1e:	ebac 0000 	sub.w	r0, ip, r0
 8001d22:	fb01 410b 	mla	r1, r1, fp, r4
 8001d26:	fb00 700b 	mla	r0, r0, fp, r7
 8001d2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d2c:	b280      	uxth	r0, r0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	b292      	uxth	r2, r2
 8001d32:	465b      	mov	r3, fp
 8001d34:	b289      	uxth	r1, r1
 8001d36:	f7ff fe36 	bl	80019a6 <LCD_Rect_Fill>
				set_pixels = 0;
 8001d3a:	9808      	ldr	r0, [sp, #32]
 8001d3c:	e7be      	b.n	8001cbc <LCD_Font+0xc8>
 8001d3e:	f04f 0800 	mov.w	r8, #0
 8001d42:	4640      	mov	r0, r8
 8001d44:	e7bd      	b.n	8001cc2 <LCD_Font+0xce>

08001d46 <LCD_Orientation>:
	
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
 8001d46:	b510      	push	{r4, lr}
 8001d48:	4604      	mov	r4, r0
	LCD_Send_Cmd(HX8357_MADCTL);
 8001d4a:	2036      	movs	r0, #54	; 0x36
 8001d4c:	f7ff fda2 	bl	8001894 <LCD_Send_Cmd>
	switch (orientation)
 8001d50:	2c03      	cmp	r4, #3
 8001d52:	d80e      	bhi.n	8001d72 <LCD_Orientation+0x2c>
 8001d54:	e8df f004 	tbb	[pc, r4]
 8001d58:	0b090702 	.word	0x0b090702
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8001d5c:	2008      	movs	r0, #8
	case 3:
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MV | MADCTL_MX);
	else LCD_Send_Dat(MADCTL_RGB | MADCTL_MV | MADCTL_MX);
	break;
	}
}
 8001d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MV | MADCTL_MX);
 8001d62:	f7ff bdbd 	b.w	80018e0 <LCD_Send_Dat>
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MY | MADCTL_MV);
 8001d66:	20a8      	movs	r0, #168	; 0xa8
 8001d68:	e7f9      	b.n	8001d5e <LCD_Orientation+0x18>
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MY | MADCTL_MX);
 8001d6a:	20c8      	movs	r0, #200	; 0xc8
 8001d6c:	e7f7      	b.n	8001d5e <LCD_Orientation+0x18>
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MV | MADCTL_MX);
 8001d6e:	2068      	movs	r0, #104	; 0x68
 8001d70:	e7f5      	b.n	8001d5e <LCD_Orientation+0x18>
}
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <LCD_Init>:
{	
 8001d74:	b510      	push	{r4, lr}
	LCD_RST_R
 8001d76:	4c13      	ldr	r4, [pc, #76]	; (8001dc4 <LCD_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f001 f914 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001d84:	20c8      	movs	r0, #200	; 0xc8
 8001d86:	f000 ffcd 	bl	8002d24 <HAL_Delay>
	LCD_RST_S
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d90:	4620      	mov	r0, r4
 8001d92:	f001 f90b 	bl	8002fac <HAL_GPIO_WritePin>
  LCD_Send_Cmd(HX8357_SLPOUT);
 8001d96:	2011      	movs	r0, #17
 8001d98:	f7ff fd7c 	bl	8001894 <LCD_Send_Cmd>
  HAL_Delay(120);
 8001d9c:	2078      	movs	r0, #120	; 0x78
 8001d9e:	f000 ffc1 	bl	8002d24 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 8001da2:	203a      	movs	r0, #58	; 0x3a
 8001da4:	f7ff fd76 	bl	8001894 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8001da8:	2055      	movs	r0, #85	; 0x55
 8001daa:	f7ff fd99 	bl	80018e0 <LCD_Send_Dat>
  HAL_Delay(5);
 8001dae:	2005      	movs	r0, #5
 8001db0:	f000 ffb8 	bl	8002d24 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 8001db4:	2029      	movs	r0, #41	; 0x29
 8001db6:	f7ff fd6d 	bl	8001894 <LCD_Send_Cmd>
}
 8001dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_Orientation(DEFAULT_ORIENTATION);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff bfc1 	b.w	8001d46 <LCD_Orientation>
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <bme280>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
	return (byteH << 8) | byteL;
}

void bme280(void) {
 8001dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
void bme280(void) {
 8001dd0:	b087      	sub	sp, #28
	temperature = BME280_getTemperature(-1);
 8001dd2:	f7ff fa01 	bl	80011d8 <BME280_getTemperature>
 8001dd6:	f7fe fb27 	bl	8000428 <__aeabi_f2d>
 8001dda:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001f90 <bme280+0x1c8>
	humidity = BME280_getHumidity(-1);
 8001dde:	4e6d      	ldr	r6, [pc, #436]	; (8001f94 <bme280+0x1cc>)
	temperature = BME280_getTemperature(-1);
 8001de0:	e9ca 0100 	strd	r0, r1, [sl]
	humidity = BME280_getHumidity(-1);
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff fa48 	bl	800127c <BME280_getHumidity>
 8001dec:	f7fe fb1c 	bl	8000428 <__aeabi_f2d>
 8001df0:	e9c6 0100 	strd	r0, r1, [r6]
	pressure = (uint16_t)BME280_getPressure();
 8001df4:	f7ff fab0 	bl	8001358 <BME280_getPressure>
 8001df8:	f7ff f914 	bl	8001024 <__aeabi_f2uiz>

	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001dfc:	f46f 7896 	mvn.w	r8, #300	; 0x12c
 8001e00:	f240 331e 	movw	r3, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8001e04:	4f64      	ldr	r7, [pc, #400]	; (8001f98 <bme280+0x1d0>)
 8001e06:	b280      	uxth	r0, r0
 8001e08:	8038      	strh	r0, [r7, #0]
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001e0a:	4440      	add	r0, r8
 8001e0c:	b280      	uxth	r0, r0
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	f200 833c 	bhi.w	800248c <bme280+0x6c4>
 8001e14:	e9da 8900 	ldrd	r8, r9, [sl]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <bme280+0x1d4>)
 8001e20:	f7fe fdcc 	bl	80009bc <__aeabi_dcmplt>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f000 8331 	beq.w	800248c <bme280+0x6c4>
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <bme280+0x1d8>)
 8001e32:	f7fe fde1 	bl	80009f8 <__aeabi_dcmpgt>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	f000 8328 	beq.w	800248c <bme280+0x6c4>
 8001e3c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8001e40:	2200      	movs	r2, #0
 8001e42:	2300      	movs	r3, #0
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f000 831d 	beq.w	800248c <bme280+0x6c4>
 8001e52:	2200      	movs	r2, #0
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <bme280+0x1dc>)
 8001e5a:	f7fe fdaf 	bl	80009bc <__aeabi_dcmplt>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f000 8314 	beq.w	800248c <bme280+0x6c4>

		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8001e64:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001fa8 <bme280+0x1e0>
 8001e68:	4640      	mov	r0, r8
 8001e6a:	e9db 4500 	ldrd	r4, r5, [fp]
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4622      	mov	r2, r4
 8001e72:	462b      	mov	r3, r5
 8001e74:	f7fe fd98 	bl	80009a8 <__aeabi_dcmpeq>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	f040 80cb 	bne.w	8002014 <bme280+0x24c>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4640      	mov	r0, r8
 8001e82:	4649      	mov	r1, r9
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <bme280+0x1e4>)
 8001e86:	f7fe fda3 	bl	80009d0 <__aeabi_dcmple>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	f000 80c2 	beq.w	8002014 <bme280+0x24c>

			char weatherPrintT[8];

			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8001e90:	2200      	movs	r2, #0
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <bme280+0x1e8>)
 8001e98:	f7fe fda4 	bl	80009e4 <__aeabi_dcmpge>
 8001e9c:	b968      	cbnz	r0, 8001eba <bme280+0xf2>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe fd89 	bl	80009bc <__aeabi_dcmplt>
 8001eaa:	b1b0      	cbz	r0, 8001eda <bme280+0x112>
 8001eac:	2200      	movs	r2, #0
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <bme280+0x1ec>)
 8001eb4:	f7fe fda0 	bl	80009f8 <__aeabi_dcmpgt>
 8001eb8:	b178      	cbz	r0, 8001eda <bme280+0x112>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	493e      	ldr	r1, [pc, #248]	; (8001fb8 <bme280+0x1f0>)
 8001ec0:	a803      	add	r0, sp, #12
 8001ec2:	f003 f97b 	bl	80051bc <siprintf>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
			}
			else if (temperatureLast <= -10) {
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f04f 0c00 	mov.w	ip, #0
 8001ecc:	21bb      	movs	r1, #187	; 0xbb
 8001ece:	e9cd 3c00 	strd	r3, ip, [sp]
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <bme280+0x1f4>)
 8001ed6:	aa03      	add	r2, sp, #12
 8001ed8:	e01e      	b.n	8001f18 <bme280+0x150>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8001eda:	2200      	movs	r2, #0
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <bme280+0x1e8>)
 8001ee2:	f7fe fd6b 	bl	80009bc <__aeabi_dcmplt>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d040      	beq.n	8001f6c <bme280+0x1a4>
 8001eea:	2200      	movs	r2, #0
 8001eec:	2300      	movs	r3, #0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d038      	beq.n	8001f6c <bme280+0x1a4>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8001efa:	4622      	mov	r2, r4
 8001efc:	462b      	mov	r3, r5
 8001efe:	492e      	ldr	r1, [pc, #184]	; (8001fb8 <bme280+0x1f0>)
 8001f00:	a803      	add	r0, sp, #12
 8001f02:	f003 f95b 	bl	80051bc <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8001f06:	2301      	movs	r3, #1
 8001f08:	f04f 0e00 	mov.w	lr, #0
 8001f0c:	21bb      	movs	r1, #187	; 0xbb
 8001f0e:	201d      	movs	r0, #29
 8001f10:	e9cd 3e00 	strd	r3, lr, [sp]
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <bme280+0x1f4>)
 8001f16:	aa03      	add	r2, sp, #12
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8001f18:	f7ff fe6c 	bl	8001bf4 <LCD_Font>
			}

			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8001f1c:	e9da 4500 	ldrd	r4, r5, [sl]
 8001f20:	2200      	movs	r2, #0
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <bme280+0x1e8>)
 8001f28:	f7fe fd5c 	bl	80009e4 <__aeabi_dcmpge>
 8001f2c:	b978      	cbnz	r0, 8001f4e <bme280+0x186>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2300      	movs	r3, #0
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fd41 	bl	80009bc <__aeabi_dcmplt>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d044      	beq.n	8001fc8 <bme280+0x200>
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <bme280+0x1ec>)
 8001f46:	f7fe fd57 	bl	80009f8 <__aeabi_dcmpgt>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d03c      	beq.n	8001fc8 <bme280+0x200>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8001f4e:	4622      	mov	r2, r4
 8001f50:	462b      	mov	r3, r5
 8001f52:	4919      	ldr	r1, [pc, #100]	; (8001fb8 <bme280+0x1f0>)
 8001f54:	a803      	add	r0, sp, #12
 8001f56:	f003 f931 	bl	80051bc <siprintf>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
			}
			else if (temperature <= -10) {
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4c18      	ldr	r4, [pc, #96]	; (8001fc0 <bme280+0x1f8>)
 8001f5e:	21bb      	movs	r1, #187	; 0xbb
 8001f60:	e9cd 3400 	strd	r3, r4, [sp]
 8001f64:	2003      	movs	r0, #3
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <bme280+0x1f4>)
 8001f68:	aa03      	add	r2, sp, #12
 8001f6a:	e04d      	b.n	8002008 <bme280+0x240>
			else if (temperatureLast <= -10) {
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <bme280+0x1ec>)
 8001f74:	f7fe fd2c 	bl	80009d0 <__aeabi_dcmple>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d0cf      	beq.n	8001f1c <bme280+0x154>
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7fe fd5a 	bl	8000a38 <__aeabi_d2iz>
 8001f84:	490f      	ldr	r1, [pc, #60]	; (8001fc4 <bme280+0x1fc>)
 8001f86:	b242      	sxtb	r2, r0
 8001f88:	a803      	add	r0, sp, #12
 8001f8a:	f003 f917 	bl	80051bc <siprintf>
 8001f8e:	e79a      	b.n	8001ec6 <bme280+0xfe>
 8001f90:	200016c8 	.word	0x200016c8
 8001f94:	200016a0 	.word	0x200016a0
 8001f98:	200016b0 	.word	0x200016b0
 8001f9c:	40554000 	.word	0x40554000
 8001fa0:	c0440000 	.word	0xc0440000
 8001fa4:	40590000 	.word	0x40590000
 8001fa8:	200016d0 	.word	0x200016d0
 8001fac:	40440000 	.word	0x40440000
 8001fb0:	40240000 	.word	0x40240000
 8001fb4:	c0240000 	.word	0xc0240000
 8001fb8:	08009cf8 	.word	0x08009cf8
 8001fbc:	08018fbc 	.word	0x08018fbc
 8001fc0:	00ffa500 	.word	0x00ffa500
 8001fc4:	08009d00 	.word	0x08009d00
			else if (temperature < 10 && temperature > 0) {
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	4bb1      	ldr	r3, [pc, #708]	; (8002294 <bme280+0x4cc>)
 8001fd0:	f7fe fcf4 	bl	80009bc <__aeabi_dcmplt>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	f000 8238 	beq.w	800244a <bme280+0x682>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2300      	movs	r3, #0
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7fe fd09 	bl	80009f8 <__aeabi_dcmpgt>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f000 822f 	beq.w	800244a <bme280+0x682>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8001fec:	462b      	mov	r3, r5
 8001fee:	4622      	mov	r2, r4
 8001ff0:	49a9      	ldr	r1, [pc, #676]	; (8002298 <bme280+0x4d0>)
 8001ff2:	a803      	add	r0, sp, #12
 8001ff4:	f003 f8e2 	bl	80051bc <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	21bb      	movs	r1, #187	; 0xbb
 8001ffc:	201d      	movs	r0, #29
 8001ffe:	4da7      	ldr	r5, [pc, #668]	; (800229c <bme280+0x4d4>)
 8002000:	aa03      	add	r2, sp, #12
 8002002:	e9cd 3500 	strd	r3, r5, [sp]
 8002006:	4ba6      	ldr	r3, [pc, #664]	; (80022a0 <bme280+0x4d8>)
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002008:	f7ff fdf4 	bl	8001bf4 <LCD_Font>
			}

			temperatureLast = temperature;
 800200c:	e9da 2300 	ldrd	r2, r3, [sl]
 8002010:	e9cb 2300 	strd	r2, r3, [fp]
		}

		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8002014:	e9d6 4500 	ldrd	r4, r5, [r6]
 8002018:	f8df b288 	ldr.w	fp, [pc, #648]	; 80022a4 <bme280+0x4dc>
 800201c:	4620      	mov	r0, r4
 800201e:	e9db 8900 	ldrd	r8, r9, [fp]
 8002022:	4629      	mov	r1, r5
 8002024:	4642      	mov	r2, r8
 8002026:	464b      	mov	r3, r9
 8002028:	f7fe fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800202c:	2800      	cmp	r0, #0
 800202e:	d146      	bne.n	80020be <bme280+0x2f6>
 8002030:	2200      	movs	r2, #0
 8002032:	2300      	movs	r3, #0
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe fcd4 	bl	80009e4 <__aeabi_dcmpge>
 800203c:	2800      	cmp	r0, #0
 800203e:	d03e      	beq.n	80020be <bme280+0x2f6>
 8002040:	2200      	movs	r2, #0
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	4b98      	ldr	r3, [pc, #608]	; (80022a8 <bme280+0x4e0>)
 8002048:	f7fe fcb8 	bl	80009bc <__aeabi_dcmplt>
 800204c:	2800      	cmp	r0, #0
 800204e:	d036      	beq.n	80020be <bme280+0x2f6>

			char weatherPrintH[7];

			sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8002050:	4642      	mov	r2, r8
 8002052:	464b      	mov	r3, r9
 8002054:	4995      	ldr	r1, [pc, #596]	; (80022ac <bme280+0x4e4>)
 8002056:	a803      	add	r0, sp, #12
 8002058:	f003 f8b0 	bl	80051bc <siprintf>
			if (humidityLast >= 10)
 800205c:	e9db 0100 	ldrd	r0, r1, [fp]
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <bme280+0x4cc>)
 8002062:	2200      	movs	r2, #0
 8002064:	f7fe fcbe 	bl	80009e4 <__aeabi_dcmpge>
 8002068:	2301      	movs	r3, #1
 800206a:	2800      	cmp	r0, #0
 800206c:	f000 8200 	beq.w	8002470 <bme280+0x6a8>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002070:	2200      	movs	r2, #0
 8002072:	21bb      	movs	r1, #187	; 0xbb
 8002074:	20a2      	movs	r0, #162	; 0xa2
 8002076:	e9cd 3200 	strd	r3, r2, [sp]
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <bme280+0x4d8>)
 800207c:	aa03      	add	r2, sp, #12
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 800207e:	f7ff fdb9 	bl	8001bf4 <LCD_Font>

			sprintf(weatherPrintH, "%.1f %%H", humidity);
 8002082:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002086:	4989      	ldr	r1, [pc, #548]	; (80022ac <bme280+0x4e4>)
 8002088:	a803      	add	r0, sp, #12
 800208a:	f003 f897 	bl	80051bc <siprintf>
			if (humidity >= 10)
 800208e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002092:	2200      	movs	r2, #0
 8002094:	4b7f      	ldr	r3, [pc, #508]	; (8002294 <bme280+0x4cc>)
 8002096:	f7fe fca5 	bl	80009e4 <__aeabi_dcmpge>
 800209a:	2301      	movs	r3, #1
 800209c:	f64f 72ff 	movw	r2, #65535	; 0xffff
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 80020a0:	21bb      	movs	r1, #187	; 0xbb
 80020a2:	e9cd 3200 	strd	r3, r2, [sp]
 80020a6:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <bme280+0x4d8>)
 80020a8:	aa03      	add	r2, sp, #12
			if (humidity >= 10)
 80020aa:	2800      	cmp	r0, #0
 80020ac:	f000 81e7 	beq.w	800247e <bme280+0x6b6>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 80020b0:	20a2      	movs	r0, #162	; 0xa2
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 80020b2:	f7ff fd9f 	bl	8001bf4 <LCD_Font>

			humidityLast = humidity;
 80020b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80020ba:	e9cb 2300 	strd	r2, r3, [fp]
		}

		if (pressureLast != pressure) {
 80020be:	4c7c      	ldr	r4, [pc, #496]	; (80022b0 <bme280+0x4e8>)
 80020c0:	883b      	ldrh	r3, [r7, #0]
 80020c2:	8822      	ldrh	r2, [r4, #0]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d028      	beq.n	800211a <bme280+0x352>

			char weatherPrintP[11];

			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80020c8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80020cc:	bf2c      	ite	cs
 80020ce:	4979      	ldrcs	r1, [pc, #484]	; (80022b4 <bme280+0x4ec>)
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 80020d0:	4979      	ldrcc	r1, [pc, #484]	; (80022b8 <bme280+0x4f0>)
 80020d2:	a803      	add	r0, sp, #12
 80020d4:	f003 f872 	bl	80051bc <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 80020d8:	2301      	movs	r3, #1
 80020da:	2000      	movs	r0, #0
 80020dc:	21bb      	movs	r1, #187	; 0xbb
 80020de:	e9cd 3000 	strd	r3, r0, [sp]
 80020e2:	aa03      	add	r2, sp, #12
 80020e4:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <bme280+0x4d8>)
 80020e6:	f240 1041 	movw	r0, #321	; 0x141
 80020ea:	f7ff fd83 	bl	8001bf4 <LCD_Font>

			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 80020ee:	883a      	ldrh	r2, [r7, #0]
			else sprintf(weatherPrintP, " %02d HP", pressure);
 80020f0:	a803      	add	r0, sp, #12
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 80020f2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80020f6:	bf2c      	ite	cs
 80020f8:	496e      	ldrcs	r1, [pc, #440]	; (80022b4 <bme280+0x4ec>)
			else sprintf(weatherPrintP, " %02d HP", pressure);
 80020fa:	496f      	ldrcc	r1, [pc, #444]	; (80022b8 <bme280+0x4f0>)
 80020fc:	f003 f85e 	bl	80051bc <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8002100:	2301      	movs	r3, #1
 8002102:	496e      	ldr	r1, [pc, #440]	; (80022bc <bme280+0x4f4>)
 8002104:	f240 1041 	movw	r0, #321	; 0x141
 8002108:	e9cd 3100 	strd	r3, r1, [sp]
 800210c:	aa03      	add	r2, sp, #12
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <bme280+0x4d8>)
 8002110:	21bb      	movs	r1, #187	; 0xbb
 8002112:	f7ff fd6f 	bl	8001bf4 <LCD_Font>

			pressureLast = pressure;
 8002116:	883b      	ldrh	r3, [r7, #0]
 8002118:	8023      	strh	r3, [r4, #0]
		}

		if (updateTime != rtcHrs) {
 800211a:	4b69      	ldr	r3, [pc, #420]	; (80022c0 <bme280+0x4f8>)
 800211c:	4c69      	ldr	r4, [pc, #420]	; (80022c4 <bme280+0x4fc>)
 800211e:	7819      	ldrb	r1, [r3, #0]
 8002120:	8822      	ldrh	r2, [r4, #0]
 8002122:	428a      	cmp	r2, r1
 8002124:	f000 81ad 	beq.w	8002482 <bme280+0x6ba>

			AT24XX_Update(0, rtcHrs);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff f81a 	bl	8001162 <AT24XX_Update>
			updateTime = AT24XX_Read(0);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff f800 	bl	8001134 <AT24XX_Read>
 8002134:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80022c8 <bme280+0x500>
 8002138:	4d64      	ldr	r5, [pc, #400]	; (80022cc <bme280+0x504>)
 800213a:	8020      	strh	r0, [r4, #0]
 800213c:	462b      	mov	r3, r5
 800213e:	4640      	mov	r0, r8
 8002140:	2200      	movs	r2, #0
 8002142:	4644      	mov	r4, r8
	return (byteH << 8) | byteL;
 8002144:	f893 c3e9 	ldrb.w	ip, [r3, #1001]	; 0x3e9
 8002148:	f893 13e8 	ldrb.w	r1, [r3, #1000]	; 0x3e8

			for (uint16_t i = 0; i < 157; i++) {
 800214c:	3201      	adds	r2, #1
	return (byteH << 8) | byteL;
 800214e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			for (uint16_t i = 0; i < 157; i++) {
 8002152:	2a9d      	cmp	r2, #157	; 0x9d
				hourlyTemperature[i] = byteS(eeprom[i * 2 + 1000], eeprom[i * 2 + 1 + 1000]);
 8002154:	f820 1b02 	strh.w	r1, [r0], #2
			for (uint16_t i = 0; i < 157; i++) {
 8002158:	f103 0302 	add.w	r3, r3, #2
 800215c:	d1f2      	bne.n	8002144 <bme280+0x37c>
			}

			for (uint16_t i = 1; i < 156; i++) hourlyTemperature[i] = hourlyTemperature[i + 1];
 800215e:	495c      	ldr	r1, [pc, #368]	; (80022d0 <bme280+0x508>)
 8002160:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002164:	1e88      	subs	r0, r1, #2
 8002166:	f002 f995 	bl	8004494 <memmove>

			hourlyTemperature[155] = (uint16_t) (temperature * 10);
 800216a:	e9da 0100 	ldrd	r0, r1, [sl]
 800216e:	2200      	movs	r2, #0
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <bme280+0x4cc>)
 8002172:	f7fe f9b1 	bl	80004d8 <__aeabi_dmul>
 8002176:	f7fe fc87 	bl	8000a88 <__aeabi_d2uiz>

			for (uint16_t i = 0; i < 157; i++) {
 800217a:	f240 5922 	movw	r9, #1314	; 0x522
			hourlyTemperature[155] = (uint16_t) (temperature * 10);
 800217e:	f8a4 0136 	strh.w	r0, [r4, #310]	; 0x136
 8002182:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
				AT24XX_Update(i * 2 + 1000, byteL(hourlyTemperature[i]));
 8002186:	4620      	mov	r0, r4
 8002188:	f898 1000 	ldrb.w	r1, [r8]
 800218c:	f7fe ffe9 	bl	8001162 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8002190:	f838 1b02 	ldrh.w	r1, [r8], #2
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 8002194:	1c60      	adds	r0, r4, #1
			for (uint16_t i = 0; i < 157; i++) {
 8002196:	3402      	adds	r4, #2
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 8002198:	0a09      	lsrs	r1, r1, #8
 800219a:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 800219c:	b2a4      	uxth	r4, r4
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 800219e:	f7fe ffe0 	bl	8001162 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80021a2:	454c      	cmp	r4, r9
 80021a4:	d1ef      	bne.n	8002186 <bme280+0x3be>
 80021a6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80022d4 <bme280+0x50c>
 80021aa:	2200      	movs	r2, #0
 80021ac:	4640      	mov	r0, r8
 80021ae:	4644      	mov	r4, r8
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <bme280+0x504>)
	return (byteH << 8) | byteL;
 80021b2:	f893 c7d1 	ldrb.w	ip, [r3, #2001]	; 0x7d1
 80021b6:	f893 17d0 	ldrb.w	r1, [r3, #2000]	; 0x7d0
			}


			for (uint16_t i = 0; i < 157; i++) {
 80021ba:	3201      	adds	r2, #1
	return (byteH << 8) | byteL;
 80021bc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			for (uint16_t i = 0; i < 157; i++) {
 80021c0:	2a9d      	cmp	r2, #157	; 0x9d
				hourlyHumidity[i] = byteS(eeprom[i * 2 + 2000], eeprom[i * 2 + 1 + 2000]);
 80021c2:	f820 1b02 	strh.w	r1, [r0], #2
			for (uint16_t i = 0; i < 157; i++) {
 80021c6:	f103 0302 	add.w	r3, r3, #2
 80021ca:	d1f2      	bne.n	80021b2 <bme280+0x3ea>
			}

			for (uint16_t i = 1; i < 156; i++) hourlyHumidity[i] = hourlyHumidity[i + 1];
 80021cc:	4942      	ldr	r1, [pc, #264]	; (80022d8 <bme280+0x510>)
 80021ce:	f44f 729b 	mov.w	r2, #310	; 0x136
 80021d2:	1e88      	subs	r0, r1, #2
 80021d4:	f002 f95e 	bl	8004494 <memmove>

			hourlyHumidity[155] = (uint16_t) (humidity * 10);
 80021d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80021dc:	2200      	movs	r2, #0
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <bme280+0x4cc>)
 80021e0:	f7fe f97a 	bl	80004d8 <__aeabi_dmul>
 80021e4:	f7fe fc50 	bl	8000a88 <__aeabi_d2uiz>

			for (uint16_t i = 0; i < 157; i++) {
 80021e8:	f640 160a 	movw	r6, #2314	; 0x90a
			hourlyHumidity[155] = (uint16_t) (humidity * 10);
 80021ec:	f8a4 0136 	strh.w	r0, [r4, #310]	; 0x136
 80021f0:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
				AT24XX_Update(i * 2 + 2000, byteL(hourlyHumidity[i]));
 80021f4:	4620      	mov	r0, r4
 80021f6:	f898 1000 	ldrb.w	r1, [r8]
 80021fa:	f7fe ffb2 	bl	8001162 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 80021fe:	f838 1b02 	ldrh.w	r1, [r8], #2
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 8002202:	1c60      	adds	r0, r4, #1
			for (uint16_t i = 0; i < 157; i++) {
 8002204:	3402      	adds	r4, #2
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 8002206:	0a09      	lsrs	r1, r1, #8
 8002208:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 800220a:	b2a4      	uxth	r4, r4
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 800220c:	f7fe ffa9 	bl	8001162 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8002210:	42b4      	cmp	r4, r6
 8002212:	d1ef      	bne.n	80021f4 <bme280+0x42c>
 8002214:	4e31      	ldr	r6, [pc, #196]	; (80022dc <bme280+0x514>)
 8002216:	2300      	movs	r3, #0
 8002218:	4631      	mov	r1, r6
 800221a:	4634      	mov	r4, r6
	return (byteH << 8) | byteL;
 800221c:	f895 0bb9 	ldrb.w	r0, [r5, #3001]	; 0xbb9
 8002220:	f895 2bb8 	ldrb.w	r2, [r5, #3000]	; 0xbb8
			}


			for (uint16_t i = 0; i < 157; i++) {
 8002224:	3301      	adds	r3, #1
	return (byteH << 8) | byteL;
 8002226:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			for (uint16_t i = 0; i < 157; i++) {
 800222a:	2b9d      	cmp	r3, #157	; 0x9d
				hourlyPressure[i] = byteS(eeprom[i * 2 + 3000], eeprom[i * 2 + 1 + 3000]);
 800222c:	f821 2b02 	strh.w	r2, [r1], #2
			for (uint16_t i = 0; i < 157; i++) {
 8002230:	f105 0502 	add.w	r5, r5, #2
 8002234:	d1f2      	bne.n	800221c <bme280+0x454>
			}

			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 8002236:	492a      	ldr	r1, [pc, #168]	; (80022e0 <bme280+0x518>)
 8002238:	f44f 729b 	mov.w	r2, #310	; 0x136
 800223c:	1e88      	subs	r0, r1, #2
 800223e:	f002 f929 	bl	8004494 <memmove>

			hourlyPressure[155] = (uint16_t)pressure;
 8002242:	883b      	ldrh	r3, [r7, #0]

			for (uint16_t i = 0; i < 157; i++) {
 8002244:	f640 45f2 	movw	r5, #3314	; 0xcf2
			hourlyPressure[155] = (uint16_t)pressure;
 8002248:	f8a4 3136 	strh.w	r3, [r4, #310]	; 0x136
 800224c:	f640 34b8 	movw	r4, #3000	; 0xbb8
				AT24XX_Update(i * 2 + 3000, byteL(hourlyPressure[i]));
 8002250:	4620      	mov	r0, r4
 8002252:	7831      	ldrb	r1, [r6, #0]
 8002254:	f7fe ff85 	bl	8001162 <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8002258:	f836 1b02 	ldrh.w	r1, [r6], #2
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 800225c:	1c60      	adds	r0, r4, #1
			for (uint16_t i = 0; i < 157; i++) {
 800225e:	3402      	adds	r4, #2
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 8002260:	0a09      	lsrs	r1, r1, #8
 8002262:	b280      	uxth	r0, r0
			for (uint16_t i = 0; i < 157; i++) {
 8002264:	b2a4      	uxth	r4, r4
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 8002266:	f7fe ff7c 	bl	8001162 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 800226a:	42ac      	cmp	r4, r5
 800226c:	d1f0      	bne.n	8002250 <bme280+0x488>
			}

			graphViewed = 0;
 800226e:	2200      	movs	r2, #0
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <bme280+0x51c>)
 8002272:	701a      	strb	r2, [r3, #0]
		}

		if (!graphViewed) {

			LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8002274:	2301      	movs	r3, #1
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	21be      	movs	r1, #190	; 0xbe
 800227a:	e9cd 3200 	strd	r3, r2, [sp]
 800227e:	2002      	movs	r0, #2
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	229d      	movs	r2, #157	; 0x9d
 8002284:	f7ff fbef 	bl	8001a66 <LCD_Rect>
 8002288:	2503      	movs	r5, #3

			for (uint16_t i = 0; i < 155 ; i++) {
				int16_t val = map(((int16_t)hourlyTemperature[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 800228a:	260a      	movs	r6, #10
				if (val < 0) val = 0;
				if (val > 127) val = 127;
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 800228c:	f04f 0800 	mov.w	r8, #0
 8002290:	4f0d      	ldr	r7, [pc, #52]	; (80022c8 <bme280+0x500>)
 8002292:	e029      	b.n	80022e8 <bme280+0x520>
 8002294:	40240000 	.word	0x40240000
 8002298:	08009cf8 	.word	0x08009cf8
 800229c:	00ffa500 	.word	0x00ffa500
 80022a0:	08018fbc 	.word	0x08018fbc
 80022a4:	200016a8 	.word	0x200016a8
 80022a8:	40590000 	.word	0x40590000
 80022ac:	08009d0b 	.word	0x08009d0b
 80022b0:	200016b2 	.word	0x200016b2
 80022b4:	08009d15 	.word	0x08009d15
 80022b8:	08009d14 	.word	0x08009d14
 80022bc:	007f7f7f 	.word	0x007f7f7f
 80022c0:	200016b8 	.word	0x200016b8
 80022c4:	20000004 	.word	0x20000004
 80022c8:	2000151c 	.word	0x2000151c
 80022cc:	20000251 	.word	0x20000251
 80022d0:	20001520 	.word	0x20001520
 80022d4:	200012a8 	.word	0x200012a8
 80022d8:	200012ac 	.word	0x200012ac
 80022dc:	200013e2 	.word	0x200013e2
 80022e0:	200013e6 	.word	0x200013e6
 80022e4:	20001251 	.word	0x20001251
				int16_t val = map(((int16_t)hourlyTemperature[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 80022e8:	f937 4b02 	ldrsh.w	r4, [r7], #2
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 80022ec:	f04f 0901 	mov.w	r9, #1
				int16_t val = map(((int16_t)hourlyTemperature[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 80022f0:	fb94 f4f6 	sdiv	r4, r4, r6
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022f4:	b2a4      	uxth	r4, r4
 80022f6:	3c14      	subs	r4, #20
 80022f8:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 80022fc:	fb94 f4f6 	sdiv	r4, r4, r6
 8002300:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8002302:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002306:	462a      	mov	r2, r5
 8002308:	4628      	mov	r0, r5
 800230a:	21bf      	movs	r1, #191	; 0xbf
 800230c:	f384 0407 	usat	r4, #7, r4
 8002310:	f8cd 8004 	str.w	r8, [sp, #4]
 8002314:	f8cd 9000 	str.w	r9, [sp]
 8002318:	f7ff fb67 	bl	80019ea <LCD_Line>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800231c:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
 8002320:	fa02 f209 	lsl.w	r2, r2, r9
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	2100      	movs	r1, #0
 8002328:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 800232c:	f7ff fb36 	bl	800199c <RGB>
 8002330:	462a      	mov	r2, r5
 8002332:	e9cd 9000 	strd	r9, r0, [sp]
 8002336:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 800233a:	4628      	mov	r0, r5
			for (uint16_t i = 0; i < 155 ; i++) {
 800233c:	444d      	add	r5, r9
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800233e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002342:	b289      	uxth	r1, r1
			for (uint16_t i = 0; i < 155 ; i++) {
 8002344:	b2ad      	uxth	r5, r5
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8002346:	f7ff fb50 	bl	80019ea <LCD_Line>
			for (uint16_t i = 0; i < 155 ; i++) {
 800234a:	2d9e      	cmp	r5, #158	; 0x9e
 800234c:	d1cc      	bne.n	80022e8 <bme280+0x520>

			}


			LCD_Rect(161, 190, 157, 128, 1, BLUE);
 800234e:	23ff      	movs	r3, #255	; 0xff
 8002350:	229d      	movs	r2, #157	; 0x9d
 8002352:	e9cd 9300 	strd	r9, r3, [sp]
 8002356:	21be      	movs	r1, #190	; 0xbe
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	20a1      	movs	r0, #161	; 0xa1
 800235c:	f7ff fb83 	bl	8001a66 <LCD_Rect>
 8002360:	25a2      	movs	r5, #162	; 0xa2

			for (uint16_t i = 0; i < 155 ; i++) {
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8002362:	f04f 080a 	mov.w	r8, #10
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002366:	273c      	movs	r7, #60	; 0x3c
 8002368:	4e4a      	ldr	r6, [pc, #296]	; (8002494 <bme280+0x6cc>)
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 800236a:	f936 4b02 	ldrsh.w	r4, [r6], #2
				if (val < 0) val = 0;
				if (val > 127) val = 127;
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 800236e:	f04f 0901 	mov.w	r9, #1
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8002372:	fb94 f4f8 	sdiv	r4, r4, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002376:	b2a4      	uxth	r4, r4
 8002378:	3c14      	subs	r4, #20
 800237a:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 800237e:	fb94 f4f7 	sdiv	r4, r4, r7
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8002382:	f04f 0a00 	mov.w	sl, #0
 8002386:	b224      	sxth	r4, r4
 8002388:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800238c:	462a      	mov	r2, r5
 800238e:	4628      	mov	r0, r5
 8002390:	21bf      	movs	r1, #191	; 0xbf
 8002392:	f384 0407 	usat	r4, #7, r4
 8002396:	e9cd 9a00 	strd	r9, sl, [sp]
 800239a:	f7ff fb26 	bl	80019ea <LCD_Line>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800239e:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
 80023a2:	fa02 f209 	lsl.w	r2, r2, r9
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4651      	mov	r1, sl
 80023aa:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 80023ae:	f7ff faf5 	bl	800199c <RGB>
 80023b2:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80023b6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80023ba:	462a      	mov	r2, r5
 80023bc:	e9cd 9000 	strd	r9, r0, [sp]
 80023c0:	b289      	uxth	r1, r1
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff fb11 	bl	80019ea <LCD_Line>
			for (uint16_t i = 0; i < 155 ; i++) {
 80023c8:	f240 133d 	movw	r3, #317	; 0x13d
 80023cc:	444d      	add	r5, r9
 80023ce:	b2ad      	uxth	r5, r5
 80023d0:	429d      	cmp	r5, r3
 80023d2:	d1ca      	bne.n	800236a <bme280+0x5a2>

			}


			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 80023d4:	23ff      	movs	r3, #255	; 0xff
 80023d6:	229d      	movs	r2, #157	; 0x9d
 80023d8:	e9cd 9300 	strd	r9, r3, [sp]
 80023dc:	21be      	movs	r1, #190	; 0xbe
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023e4:	f7ff fb3f 	bl	8001a66 <LCD_Rect>
 80023e8:	f44f 75a1 	mov.w	r5, #322	; 0x142
 80023ec:	4e2a      	ldr	r6, [pc, #168]	; (8002498 <bme280+0x6d0>)

			for (uint16_t i = 0; i < 155 ; i++) {
				int16_t val = map(((int16_t)hourlyPressure[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 127);
 80023ee:	f836 4b02 	ldrh.w	r4, [r6], #2
				if (val < 0) val = 0;
				if (val > 127) val = 127;
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80023f2:	f44f 739f 	mov.w	r3, #318	; 0x13e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023f6:	f5a4 7466 	sub.w	r4, r4, #920	; 0x398
 80023fa:	b224      	sxth	r4, r4
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80023fc:	462a      	mov	r2, r5
 80023fe:	4628      	mov	r0, r5
 8002400:	21bf      	movs	r1, #191	; 0xbf
 8002402:	f384 0407 	usat	r4, #7, r4
 8002406:	e9cd 9a00 	strd	r9, sl, [sp]
 800240a:	f7ff faee 	bl	80019ea <LCD_Line>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800240e:	f1c4 027f 	rsb	r2, r4, #127	; 0x7f
 8002412:	0052      	lsls	r2, r2, #1
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	2100      	movs	r1, #0
 8002418:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 800241c:	f7ff fabe 	bl	800199c <RGB>
 8002420:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8002424:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002428:	462a      	mov	r2, r5
 800242a:	e9cd 9000 	strd	r9, r0, [sp]
 800242e:	b289      	uxth	r1, r1
 8002430:	4628      	mov	r0, r5
 8002432:	f7ff fada 	bl	80019ea <LCD_Line>
			for (uint16_t i = 0; i < 155 ; i++) {
 8002436:	f240 13dd 	movw	r3, #477	; 0x1dd
 800243a:	3501      	adds	r5, #1
 800243c:	b2ad      	uxth	r5, r5
 800243e:	429d      	cmp	r5, r3
 8002440:	d1d5      	bne.n	80023ee <bme280+0x626>

			}

			graphViewed = 1;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <bme280+0x6d4>)
 8002444:	f883 9000 	strb.w	r9, [r3]
		}
	}
}
 8002448:	e020      	b.n	800248c <bme280+0x6c4>
			else if (temperature <= -10) {
 800244a:	2200      	movs	r2, #0
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <bme280+0x6d8>)
 8002452:	f7fe fabd 	bl	80009d0 <__aeabi_dcmple>
 8002456:	2800      	cmp	r0, #0
 8002458:	f43f add8 	beq.w	800200c <bme280+0x244>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 800245c:	4629      	mov	r1, r5
 800245e:	4620      	mov	r0, r4
 8002460:	f7fe faea 	bl	8000a38 <__aeabi_d2iz>
 8002464:	490f      	ldr	r1, [pc, #60]	; (80024a4 <bme280+0x6dc>)
 8002466:	b242      	sxtb	r2, r0
 8002468:	a803      	add	r0, sp, #12
 800246a:	f002 fea7 	bl	80051bc <siprintf>
 800246e:	e574      	b.n	8001f5a <bme280+0x192>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002470:	e9cd 3000 	strd	r3, r0, [sp]
 8002474:	21bb      	movs	r1, #187	; 0xbb
 8002476:	20bc      	movs	r0, #188	; 0xbc
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <bme280+0x6e0>)
 800247a:	aa03      	add	r2, sp, #12
 800247c:	e5ff      	b.n	800207e <bme280+0x2b6>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 800247e:	20bc      	movs	r0, #188	; 0xbc
 8002480:	e617      	b.n	80020b2 <bme280+0x2ea>
		if (!graphViewed) {
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <bme280+0x6d4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f43f aef4 	beq.w	8002274 <bme280+0x4ac>
}
 800248c:	b007      	add	sp, #28
 800248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002492:	bf00      	nop
 8002494:	200012a8 	.word	0x200012a8
 8002498:	200013e2 	.word	0x200013e2
 800249c:	20001251 	.word	0x20001251
 80024a0:	c0240000 	.word	0xc0240000
 80024a4:	08009d04 	.word	0x08009d04
 80024a8:	08018fbc 	.word	0x08018fbc

080024ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80024ac:	b510      	push	{r4, lr}
 80024ae:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b0:	2214      	movs	r2, #20
 80024b2:	2100      	movs	r1, #0
 80024b4:	a808      	add	r0, sp, #32
 80024b6:	f002 f807 	bl	80044c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ba:	2214      	movs	r2, #20
 80024bc:	2100      	movs	r1, #0
 80024be:	a801      	add	r0, sp, #4
 80024c0:	f002 f802 	bl	80044c8 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c4:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ca:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024cc:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024da:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024dc:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024de:	f001 fc37 	bl	8003d50 <HAL_RCC_OscConfig>
 80024e2:	b108      	cbz	r0, 80024e8 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024e6:	e7fe      	b.n	80024e6 <SystemClock_Config+0x3a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e8:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f2:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f4:	e9cd 3004 	strd	r3, r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024f8:	4621      	mov	r1, r4
 80024fa:	a801      	add	r0, sp, #4
 80024fc:	f001 fdfe 	bl	80040fc <HAL_RCC_ClockConfig>
 8002500:	b108      	cbz	r0, 8002506 <SystemClock_Config+0x5a>
 8002502:	b672      	cpsid	i
	while (1)
 8002504:	e7fe      	b.n	8002504 <SystemClock_Config+0x58>
}
 8002506:	b010      	add	sp, #64	; 0x40
 8002508:	bd10      	pop	{r4, pc}
	...

0800250c <main>:
{
 800250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	b08f      	sub	sp, #60	; 0x3c
	HAL_Init();
 8002512:	f000 fbe3 	bl	8002cdc <HAL_Init>
	SystemClock_Config();
 8002516:	f7ff ffc9 	bl	80024ac <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	2210      	movs	r2, #16
 800251c:	2100      	movs	r1, #0
 800251e:	a80a      	add	r0, sp, #40	; 0x28
 8002520:	f001 ffd2 	bl	80044c8 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002524:	4b47      	ldr	r3, [pc, #284]	; (8002644 <main+0x138>)
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002526:	f24e 013f 	movw	r1, #57407	; 0xe03f
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 800252c:	4846      	ldr	r0, [pc, #280]	; (8002648 <main+0x13c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002538:	f002 0210 	and.w	r2, r2, #16
 800253c:	9203      	str	r2, [sp, #12]
 800253e:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002540:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2400      	movs	r4, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002544:	f042 0220 	orr.w	r2, r2, #32
 8002548:	619a      	str	r2, [r3, #24]
 800254a:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2703      	movs	r7, #3
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800254e:	f002 0220 	and.w	r2, r2, #32
 8002552:	9204      	str	r2, [sp, #16]
 8002554:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002558:	26ff      	movs	r6, #255	; 0xff
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	f042 0204 	orr.w	r2, r2, #4
 800255e:	619a      	str	r2, [r3, #24]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	f002 0204 	and.w	r2, r2, #4
 8002566:	9205      	str	r2, [sp, #20]
 8002568:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	619a      	str	r2, [r3, #24]
 8002572:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002574:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	9306      	str	r3, [sp, #24]
 800257c:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 800257e:	f000 fd15 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002582:	2200      	movs	r2, #0
 8002584:	21ff      	movs	r1, #255	; 0xff
 8002586:	4831      	ldr	r0, [pc, #196]	; (800264c <main+0x140>)
 8002588:	f000 fd10 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f640 4103 	movw	r1, #3075	; 0xc03
 8002592:	482f      	ldr	r0, [pc, #188]	; (8002650 <main+0x144>)
 8002594:	f000 fd0a 	bl	8002fac <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2302      	movs	r3, #2
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025a2:	4829      	ldr	r0, [pc, #164]	; (8002648 <main+0x13c>)
 80025a4:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f000 fc25 	bl	8002df8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80025ae:	f24c 033f 	movw	r3, #49215	; 0xc03f
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	4825      	ldr	r0, [pc, #148]	; (8002648 <main+0x13c>)
 80025b4:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f000 fc1b 	bl	8002df8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <main+0x140>)
 80025c4:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c6:	e9cd 470c 	strd	r4, r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f000 fc13 	bl	8002df8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80025d2:	f640 4303 	movw	r3, #3075	; 0xc03
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	481e      	ldr	r0, [pc, #120]	; (8002650 <main+0x144>)
 80025d8:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025de:	e9cd 470c 	strd	r4, r7, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f000 fc09 	bl	8002df8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 80025e6:	2304      	movs	r3, #4
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80025e8:	4819      	ldr	r0, [pc, #100]	; (8002650 <main+0x144>)
 80025ea:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	hi2c1.Init.ClockSpeed = 400000;
 80025f0:	4f18      	ldr	r7, [pc, #96]	; (8002654 <main+0x148>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f000 fc00 	bl	8002df8 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80025f8:	4817      	ldr	r0, [pc, #92]	; (8002658 <main+0x14c>)
	hi2c1.Init.ClockSpeed = 400000;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <main+0x150>)
	hi2c1.Init.OwnAddress1 = 0;
 80025fc:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 400000;
 8002600:	e9c0 7300 	strd	r7, r3, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002608:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800260c:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002610:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002612:	f000 feab 	bl	800336c <HAL_I2C_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	b108      	cbz	r0, 800261e <main+0x112>
 800261a:	b672      	cpsid	i
	while (1)
 800261c:	e7fe      	b.n	800261c <main+0x110>
	huart1.Init.BaudRate = 115200;
 800261e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart1.Instance = USART1;
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <main+0x154>)
	huart1.Init.BaudRate = 115200;
 8002624:	490f      	ldr	r1, [pc, #60]	; (8002664 <main+0x158>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002626:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.BaudRate = 115200;
 800262a:	e9c0 1200 	strd	r1, r2, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800262e:	220c      	movs	r2, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 8002630:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002636:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002638:	f001 fe7e 	bl	8004338 <HAL_UART_Init>
 800263c:	4604      	mov	r4, r0
 800263e:	b198      	cbz	r0, 8002668 <main+0x15c>
 8002640:	b672      	cpsid	i
	while (1)
 8002642:	e7fe      	b.n	8002642 <main+0x136>
 8002644:	40021000 	.word	0x40021000
 8002648:	40011000 	.word	0x40011000
 800264c:	40010800 	.word	0x40010800
 8002650:	40010c00 	.word	0x40010c00
 8002654:	40005400 	.word	0x40005400
 8002658:	20001254 	.word	0x20001254
 800265c:	00061a80 	.word	0x00061a80
 8002660:	20001658 	.word	0x20001658
 8002664:	40013800 	.word	0x40013800
	LCD_Init();
 8002668:	f7ff fb84 	bl	8001d74 <LCD_Init>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 800266c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002670:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002674:	4621      	mov	r1, r4
 8002676:	4620      	mov	r0, r4
 8002678:	9600      	str	r6, [sp, #0]
 800267a:	f7ff f994 	bl	80019a6 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 800267e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002682:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002686:	4629      	mov	r1, r5
 8002688:	4628      	mov	r0, r5
 800268a:	9400      	str	r4, [sp, #0]
 800268c:	f7ff f98b 	bl	80019a6 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 8002690:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002694:	217f      	movs	r1, #127	; 0x7f
 8002696:	e9cd 5300 	strd	r5, r3, [sp]
 800269a:	2014      	movs	r0, #20
 800269c:	4bc4      	ldr	r3, [pc, #784]	; (80029b0 <main+0x4a4>)
 800269e:	4ac5      	ldr	r2, [pc, #788]	; (80029b4 <main+0x4a8>)
 80026a0:	f7ff faa8 	bl	8001bf4 <LCD_Font>
	if (clearEEPROM) {
 80026a4:	4bc4      	ldr	r3, [pc, #784]	; (80029b8 <main+0x4ac>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b13b      	cbz	r3, 80026ba <main+0x1ae>
			AT24XX_Update(i, 0);
 80026aa:	b2a0      	uxth	r0, r4
 80026ac:	2100      	movs	r1, #0
		for (uint16_t i = 0; i < 4096; i++) {
 80026ae:	3401      	adds	r4, #1
			AT24XX_Update(i, 0);
 80026b0:	f7fe fd57 	bl	8001162 <AT24XX_Update>
		for (uint16_t i = 0; i < 4096; i++) {
 80026b4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80026b8:	d1f7      	bne.n	80026aa <main+0x19e>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 80026ba:	2501      	movs	r5, #1
 80026bc:	2400      	movs	r4, #0
 80026be:	217f      	movs	r1, #127	; 0x7f
 80026c0:	2014      	movs	r0, #20
 80026c2:	e9cd 5400 	strd	r5, r4, [sp]
 80026c6:	4bba      	ldr	r3, [pc, #744]	; (80029b0 <main+0x4a4>)
 80026c8:	4aba      	ldr	r2, [pc, #744]	; (80029b4 <main+0x4a8>)
 80026ca:	f7ff fa93 	bl	8001bf4 <LCD_Font>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 80026ce:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80026d2:	217f      	movs	r1, #127	; 0x7f
 80026d4:	e9cd 5300 	strd	r5, r3, [sp]
 80026d8:	2014      	movs	r0, #20
 80026da:	4bb5      	ldr	r3, [pc, #724]	; (80029b0 <main+0x4a4>)
 80026dc:	4ab7      	ldr	r2, [pc, #732]	; (80029bc <main+0x4b0>)
 80026de:	f7ff fa89 	bl	8001bf4 <LCD_Font>
 80026e2:	4db7      	ldr	r5, [pc, #732]	; (80029c0 <main+0x4b4>)
	for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 80026e4:	b2a0      	uxth	r0, r4
 80026e6:	f7fe fd25 	bl	8001134 <AT24XX_Read>
 80026ea:	3401      	adds	r4, #1
 80026ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80026f0:	f805 0b01 	strb.w	r0, [r5], #1
 80026f4:	d1f6      	bne.n	80026e4 <main+0x1d8>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 80026f6:	2301      	movs	r3, #1
 80026f8:	2200      	movs	r2, #0
 80026fa:	217f      	movs	r1, #127	; 0x7f
 80026fc:	2014      	movs	r0, #20
 80026fe:	e9cd 3200 	strd	r3, r2, [sp]
 8002702:	4bab      	ldr	r3, [pc, #684]	; (80029b0 <main+0x4a4>)
 8002704:	4aad      	ldr	r2, [pc, #692]	; (80029bc <main+0x4b0>)
 8002706:	f7ff fa75 	bl	8001bf4 <LCD_Font>
	BME280_Init();
 800270a:	f7fe feb9 	bl	8001480 <BME280_Init>
	DS3231_Update();
 800270e:	f7fe ffab 	bl	8001668 <DS3231_Update>
	uint8_t uartTransmit[] = "UART OK\r\n";
 8002712:	4aac      	ldr	r2, [pc, #688]	; (80029c4 <main+0x4b8>)
 8002714:	ab07      	add	r3, sp, #28
 8002716:	6810      	ldr	r0, [r2, #0]
 8002718:	6851      	ldr	r1, [r2, #4]
 800271a:	8912      	ldrh	r2, [r2, #8]
 800271c:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 800271e:	48aa      	ldr	r0, [pc, #680]	; (80029c8 <main+0x4bc>)
	uint8_t uartTransmit[] = "UART OK\r\n";
 8002720:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002722:	a907      	add	r1, sp, #28
 8002724:	2364      	movs	r3, #100	; 0x64
 8002726:	220a      	movs	r2, #10
 8002728:	f001 fe34 	bl	8004394 <HAL_UART_Transmit>
		rtcSec = DS3231_getSec();
 800272c:	4ea7      	ldr	r6, [pc, #668]	; (80029cc <main+0x4c0>)
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800272e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 80029d0 <main+0x4c4>
		DS3231_Update();
 8002732:	f7fe ff99 	bl	8001668 <DS3231_Update>
		rtcSec = DS3231_getSec();
 8002736:	f7fe ffd7 	bl	80016e8 <DS3231_getSec>
 800273a:	7030      	strb	r0, [r6, #0]
		rtcMin = DS3231_getMin();
 800273c:	f7fe ffda 	bl	80016f4 <DS3231_getMin>
 8002740:	f8df 9290 	ldr.w	r9, [pc, #656]	; 80029d4 <main+0x4c8>
		rtcHrs = DS3231_getHrs();
 8002744:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80029d8 <main+0x4cc>
		rtcMin = DS3231_getMin();
 8002748:	f889 0000 	strb.w	r0, [r9]
		rtcHrs = DS3231_getHrs();
 800274c:	f7fe ffd8 	bl	8001700 <DS3231_getHrs>
 8002750:	f888 0000 	strb.w	r0, [r8]
		rtcDay = DS3231_getDay();
 8002754:	f7fe ffda 	bl	800170c <DS3231_getDay>
 8002758:	4fa0      	ldr	r7, [pc, #640]	; (80029dc <main+0x4d0>)
 800275a:	7038      	strb	r0, [r7, #0]
		rtcDate = DS3231_getDate();
 800275c:	f7fe ffdc 	bl	8001718 <DS3231_getDate>
 8002760:	4b9f      	ldr	r3, [pc, #636]	; (80029e0 <main+0x4d4>)
 8002762:	7018      	strb	r0, [r3, #0]
		rtcMonth = DS3231_getMonth();
 8002764:	f7fe ffde 	bl	8001724 <DS3231_getMonth>
 8002768:	4b9e      	ldr	r3, [pc, #632]	; (80029e4 <main+0x4d8>)
 800276a:	7018      	strb	r0, [r3, #0]
		rtcYear = DS3231_getYear();
 800276c:	f7fe ffe0 	bl	8001730 <DS3231_getYear>
 8002770:	4b9d      	ldr	r3, [pc, #628]	; (80029e8 <main+0x4dc>)
 8002772:	7018      	strb	r0, [r3, #0]
		rtcMinA1 = DS3231_getAlarm1Min();
 8002774:	f7fe ffe2 	bl	800173c <DS3231_getAlarm1Min>
 8002778:	4b9c      	ldr	r3, [pc, #624]	; (80029ec <main+0x4e0>)
 800277a:	7018      	strb	r0, [r3, #0]
		rtcHrsA1 = DS3231_getAlarm1Hour();
 800277c:	f7fe ffe4 	bl	8001748 <DS3231_getAlarm1Hour>
 8002780:	4b9b      	ldr	r3, [pc, #620]	; (80029f0 <main+0x4e4>)
 8002782:	7018      	strb	r0, [r3, #0]
		if (rtcSecLast != rtcSec) {
 8002784:	4b9b      	ldr	r3, [pc, #620]	; (80029f4 <main+0x4e8>)
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	7833      	ldrb	r3, [r6, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d0d1      	beq.n	8002732 <main+0x226>
 800278e:	2400      	movs	r4, #0
 8002790:	4d8b      	ldr	r5, [pc, #556]	; (80029c0 <main+0x4b4>)
			for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8002792:	b2a0      	uxth	r0, r4
 8002794:	f7fe fcce 	bl	8001134 <AT24XX_Read>
 8002798:	3401      	adds	r4, #1
 800279a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800279e:	f805 0b01 	strb.w	r0, [r5], #1
 80027a2:	d1f6      	bne.n	8002792 <main+0x286>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 80027a4:	2401      	movs	r4, #1
 80027a6:	f8df a250 	ldr.w	sl, [pc, #592]	; 80029f8 <main+0x4ec>
			bme280();
 80027aa:	f7ff fb0d 	bl	8001dc8 <bme280>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 80027ae:	2300      	movs	r3, #0
 80027b0:	2208      	movs	r2, #8
 80027b2:	2123      	movs	r1, #35	; 0x23
 80027b4:	20ac      	movs	r0, #172	; 0xac
 80027b6:	e9cd 4a00 	strd	r4, sl, [sp]
 80027ba:	f7ff f982 	bl	8001ac2 <LCD_Circle>
			LCD_Circle(172, 75, 8, 0, 1, HUE_14);
 80027be:	2300      	movs	r3, #0
 80027c0:	2208      	movs	r2, #8
 80027c2:	214b      	movs	r1, #75	; 0x4b
 80027c4:	20ac      	movs	r0, #172	; 0xac
 80027c6:	e9cd 4a00 	strd	r4, sl, [sp]
 80027ca:	f7ff f97a 	bl	8001ac2 <LCD_Circle>
			if (rtcSec % 2 != 0) {
 80027ce:	7835      	ldrb	r5, [r6, #0]
 80027d0:	4025      	ands	r5, r4
 80027d2:	f000 8131 	beq.w	8002a38 <main+0x52c>
				LCD_Circle(172, 35, 7, 1, 1, HUE_14);
 80027d6:	4623      	mov	r3, r4
 80027d8:	2207      	movs	r2, #7
 80027da:	2123      	movs	r1, #35	; 0x23
 80027dc:	20ac      	movs	r0, #172	; 0xac
 80027de:	e9cd 4a00 	strd	r4, sl, [sp]
 80027e2:	f7ff f96e 	bl	8001ac2 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, HUE_14);
 80027e6:	2207      	movs	r2, #7
 80027e8:	4623      	mov	r3, r4
 80027ea:	214b      	movs	r1, #75	; 0x4b
 80027ec:	20ac      	movs	r0, #172	; 0xac
 80027ee:	e9cd 4a00 	strd	r4, sl, [sp]
 80027f2:	f7ff f966 	bl	8001ac2 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80027f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027fc:	4658      	mov	r0, fp
 80027fe:	f000 fbd5 	bl	8002fac <HAL_GPIO_WritePin>
			if (rtcMinLast != rtcMin) {
 8002802:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <main+0x4f0>)
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	f899 3000 	ldrb.w	r3, [r9]
 800280a:	4293      	cmp	r3, r2
 800280c:	f000 8110 	beq.w	8002a30 <main+0x524>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8002810:	2401      	movs	r4, #1
 8002812:	2500      	movs	r5, #0
				sprintf(clockPrint, "%02d", rtcMinLast);
 8002814:	497a      	ldr	r1, [pc, #488]	; (8002a00 <main+0x4f4>)
 8002816:	a80a      	add	r0, sp, #40	; 0x28
 8002818:	f002 fcd0 	bl	80051bc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <main+0x4f8>)
 800281e:	2164      	movs	r1, #100	; 0x64
 8002820:	20b4      	movs	r0, #180	; 0xb4
 8002822:	aa0a      	add	r2, sp, #40	; 0x28
 8002824:	e9cd 4500 	strd	r4, r5, [sp]
 8002828:	f7ff f9e4 	bl	8001bf4 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 800282c:	f899 2000 	ldrb.w	r2, [r9]
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 8002830:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80029f8 <main+0x4ec>
				sprintf(clockPrint, "%02d", rtcMin);
 8002834:	4972      	ldr	r1, [pc, #456]	; (8002a00 <main+0x4f4>)
 8002836:	a80a      	add	r0, sp, #40	; 0x28
 8002838:	f002 fcc0 	bl	80051bc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 800283c:	4b71      	ldr	r3, [pc, #452]	; (8002a04 <main+0x4f8>)
 800283e:	aa0a      	add	r2, sp, #40	; 0x28
 8002840:	2164      	movs	r1, #100	; 0x64
 8002842:	20b4      	movs	r0, #180	; 0xb4
 8002844:	e9cd 4900 	strd	r4, r9, [sp]
 8002848:	f7ff f9d4 	bl	8001bf4 <LCD_Font>
				if (rtcHrsLast != rtcHrs) {
 800284c:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <main+0x4fc>)
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	f898 3000 	ldrb.w	r3, [r8]
 8002854:	4293      	cmp	r3, r2
 8002856:	f000 80a7 	beq.w	80029a8 <main+0x49c>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 800285a:	4969      	ldr	r1, [pc, #420]	; (8002a00 <main+0x4f4>)
 800285c:	a80a      	add	r0, sp, #40	; 0x28
 800285e:	f002 fcad 	bl	80051bc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8002862:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <main+0x4f8>)
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	4628      	mov	r0, r5
 8002868:	aa0a      	add	r2, sp, #40	; 0x28
 800286a:	e9cd 4500 	strd	r4, r5, [sp]
 800286e:	f7ff f9c1 	bl	8001bf4 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8002872:	f898 2000 	ldrb.w	r2, [r8]
 8002876:	4962      	ldr	r1, [pc, #392]	; (8002a00 <main+0x4f4>)
 8002878:	a80a      	add	r0, sp, #40	; 0x28
 800287a:	f002 fc9f 	bl	80051bc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <main+0x4f8>)
 8002880:	aa0a      	add	r2, sp, #40	; 0x28
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	4628      	mov	r0, r5
 8002886:	e9cd 4900 	strd	r4, r9, [sp]
 800288a:	f7ff f9b3 	bl	8001bf4 <LCD_Font>
					if (rtcDayLast != rtcDay) {
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <main+0x500>)
 8002890:	783b      	ldrb	r3, [r7, #0]
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d077      	beq.n	8002988 <main+0x47c>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8002898:	f04f 0907 	mov.w	r9, #7
 800289c:	3305      	adds	r3, #5
 800289e:	fbb3 f2f9 	udiv	r2, r3, r9
 80028a2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002a10 <main+0x504>
 80028a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80028aa:	1a9a      	subs	r2, r3, r2
 80028ac:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80028b0:	2182      	movs	r1, #130	; 0x82
 80028b2:	2002      	movs	r0, #2
 80028b4:	e9cd 4500 	strd	r4, r5, [sp]
 80028b8:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <main+0x4a4>)
 80028ba:	f7ff f99b 	bl	8001bf4 <LCD_Font>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80028be:	783b      	ldrb	r3, [r7, #0]
 80028c0:	2182      	movs	r1, #130	; 0x82
 80028c2:	3306      	adds	r3, #6
 80028c4:	fbb3 f9f9 	udiv	r9, r3, r9
 80028c8:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80028cc:	eba3 0209 	sub.w	r2, r3, r9
 80028d0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 80028d4:	f04f 080c 	mov.w	r8, #12
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80028d8:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8002a14 <main+0x508>
 80028dc:	2002      	movs	r0, #2
 80028de:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <main+0x4a4>)
 80028e0:	e9cd 4900 	strd	r4, r9, [sp]
 80028e4:	f7ff f986 	bl	8001bf4 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <main+0x50c>)
 80028ea:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <main+0x510>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	494c      	ldr	r1, [pc, #304]	; (8002a20 <main+0x514>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <main+0x518>)
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	a80a      	add	r0, sp, #40	; 0x28
 80028fa:	f002 fc5f 	bl	80051bc <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 80028fe:	a90a      	add	r1, sp, #40	; 0x28
 8002900:	460a      	mov	r2, r1
 8002902:	2064      	movs	r0, #100	; 0x64
 8002904:	2182      	movs	r1, #130	; 0x82
 8002906:	e9cd 4500 	strd	r4, r5, [sp]
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <main+0x4a4>)
 800290c:	f7ff f972 	bl	8001bf4 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <main+0x4dc>)
 8002912:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80029e4 <main+0x4d8>
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <main+0x4d4>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f89a 3000 	ldrb.w	r3, [sl]
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	493f      	ldr	r1, [pc, #252]	; (8002a20 <main+0x514>)
 8002924:	a80a      	add	r0, sp, #40	; 0x28
 8002926:	f002 fc49 	bl	80051bc <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 800292a:	a90a      	add	r1, sp, #40	; 0x28
 800292c:	460a      	mov	r2, r1
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	2182      	movs	r1, #130	; 0x82
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <main+0x4a4>)
 8002934:	e9cd 4900 	strd	r4, r9, [sp]
 8002938:	f7ff f95c 	bl	8001bf4 <LCD_Font>
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800293c:	f89a 3000 	ldrb.w	r3, [sl]
 8002940:	e9cd 4500 	strd	r4, r5, [sp]
 8002944:	330a      	adds	r3, #10
 8002946:	fbb3 f2f8 	udiv	r2, r3, r8
 800294a:	fb08 3212 	mls	r2, r8, r2, r3
 800294e:	4d36      	ldr	r5, [pc, #216]	; (8002a28 <main+0x51c>)
 8002950:	2182      	movs	r1, #130	; 0x82
 8002952:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002956:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <main+0x4a4>)
 8002958:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800295c:	f7ff f94a 	bl	8001bf4 <LCD_Font>
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 8002960:	f89a 3000 	ldrb.w	r3, [sl]
 8002964:	2182      	movs	r1, #130	; 0x82
 8002966:	330b      	adds	r3, #11
 8002968:	fbb3 f2f8 	udiv	r2, r3, r8
 800296c:	fb08 3812 	mls	r8, r8, r2, r3
 8002970:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <main+0x4a4>)
 8002976:	f855 2028 	ldr.w	r2, [r5, r8, lsl #2]
 800297a:	e9cd 4900 	strd	r4, r9, [sp]
 800297e:	f7ff f939 	bl	8001bf4 <LCD_Font>
						rtcDayLast = rtcDay;
 8002982:	783b      	ldrb	r3, [r7, #0]
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <main+0x500>)
 8002986:	7013      	strb	r3, [r2, #0]
					rtcDateLast = rtcDate;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <main+0x4d4>)
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <main+0x510>)
 800298e:	701a      	strb	r2, [r3, #0]
					rtcMonthLast = rtcMonth;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <main+0x4d8>)
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <main+0x518>)
 8002996:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <main+0x4dc>)
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <main+0x50c>)
 800299e:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <main+0x4cc>)
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <main+0x4fc>)
 80029a6:	701a      	strb	r2, [r3, #0]
				rtcMinLast = rtcMin;
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <main+0x4c8>)
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	e03e      	b.n	8002a2c <main+0x520>
 80029ae:	bf00      	nop
 80029b0:	08018fbc 	.word	0x08018fbc
 80029b4:	08009d1d 	.word	0x08009d1d
 80029b8:	20000250 	.word	0x20000250
 80029bc:	08009d2d 	.word	0x08009d2d
 80029c0:	20000251 	.word	0x20000251
 80029c4:	08009d54 	.word	0x08009d54
 80029c8:	20001658 	.word	0x20001658
 80029cc:	200016be 	.word	0x200016be
 80029d0:	40011000 	.word	0x40011000
 80029d4:	200016ba 	.word	0x200016ba
 80029d8:	200016b8 	.word	0x200016b8
 80029dc:	200016b6 	.word	0x200016b6
 80029e0:	200016b4 	.word	0x200016b4
 80029e4:	200016bc 	.word	0x200016bc
 80029e8:	200016bf 	.word	0x200016bf
 80029ec:	200016bb 	.word	0x200016bb
 80029f0:	200016b9 	.word	0x200016b9
 80029f4:	20000002 	.word	0x20000002
 80029f8:	00ffbf00 	.word	0x00ffbf00
 80029fc:	20000001 	.word	0x20000001
 8002a00:	08009d4f 	.word	0x08009d4f
 8002a04:	08009dac 	.word	0x08009dac
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	200016b7 	.word	0x200016b7
 8002a10:	0801a650 	.word	0x0801a650
 8002a14:	007f7f7f 	.word	0x007f7f7f
 8002a18:	200016c0 	.word	0x200016c0
 8002a1c:	200016b5 	.word	0x200016b5
 8002a20:	08009d45 	.word	0x08009d45
 8002a24:	200016bd 	.word	0x200016bd
 8002a28:	0801a66c 	.word	0x0801a66c
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <main+0x550>)
 8002a2e:	701a      	strb	r2, [r3, #0]
			rtcSecLast = rtcSec;
 8002a30:	7832      	ldrb	r2, [r6, #0]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <main+0x554>)
 8002a34:	701a      	strb	r2, [r3, #0]
	{
 8002a36:	e67c      	b.n	8002732 <main+0x226>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 8002a38:	4623      	mov	r3, r4
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	2123      	movs	r1, #35	; 0x23
 8002a3e:	20ac      	movs	r0, #172	; 0xac
 8002a40:	e9cd 4500 	strd	r4, r5, [sp]
 8002a44:	f7ff f83d 	bl	8001ac2 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	214b      	movs	r1, #75	; 0x4b
 8002a4e:	20ac      	movs	r0, #172	; 0xac
 8002a50:	e9cd 4500 	strd	r4, r5, [sp]
 8002a54:	f7ff f835 	bl	8001ac2 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002a58:	4622      	mov	r2, r4
 8002a5a:	e6cd      	b.n	80027f8 <main+0x2ec>
 8002a5c:	20000001 	.word	0x20000001
 8002a60:	20000002 	.word	0x20000002

08002a64 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_MspInit+0x3c>)
{
 8002a66:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	619a      	str	r2, [r3, #24]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f002 0201 	and.w	r2, r2, #1
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a8e:	6853      	ldr	r3, [r2, #4]
 8002a90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	b002      	add	sp, #8
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	4604      	mov	r4, r0
 8002aac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aae:	2210      	movs	r2, #16
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	a802      	add	r0, sp, #8
 8002ab4:	f001 fd08 	bl	80044c8 <memset>
  if(hi2c->Instance==I2C1)
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_I2C_MspInit+0x58>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d11c      	bne.n	8002afa <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4c10      	ldr	r4, [pc, #64]	; (8002b04 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac2:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac4:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac6:	4810      	ldr	r0, [pc, #64]	; (8002b08 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	61a3      	str	r3, [r4, #24]
 8002ace:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f000 f988 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae8:	69e3      	ldr	r3, [r4, #28]
 8002aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aee:	61e3      	str	r3, [r4, #28]
 8002af0:	69e3      	ldr	r3, [r4, #28]
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002afa:	b006      	add	sp, #24
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010c00 	.word	0x40010c00

08002b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	2210      	movs	r2, #16
 8002b14:	2100      	movs	r1, #0
 8002b16:	a802      	add	r0, sp, #8
 8002b18:	f001 fcd6 	bl	80044c8 <memset>
  if(huart->Instance==USART1)
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_UART_MspInit+0x70>)
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d128      	bne.n	8002b76 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b24:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002b28:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	4815      	ldr	r0, [pc, #84]	; (8002b80 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	f042 0204 	orr.w	r2, r2, #4
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f000 f94b 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b66:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f000 f941 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b76:	b006      	add	sp, #24
 8002b78:	bd10      	pop	{r4, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40010800 	.word	0x40010800

08002b84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <NMI_Handler>

08002b86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <HardFault_Handler>

08002b88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <MemManage_Handler>

08002b8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <BusFault_Handler>

08002b8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler>

08002b8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8e:	4770      	bx	lr

08002b90 <DebugMon_Handler>:
 8002b90:	4770      	bx	lr

08002b92 <PendSV_Handler>:
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b94:	f000 b8b4 	b.w	8002d00 <HAL_IncTick>

08002b98 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002b98:	2001      	movs	r0, #1
 8002b9a:	4770      	bx	lr

08002b9c <_kill>:

int _kill(int pid, int sig)
{
 8002b9c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002b9e:	f001 fc4f 	bl	8004440 <__errno>
 8002ba2:	2316      	movs	r3, #22
 8002ba4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	bd08      	pop	{r3, pc}

08002bac <_exit>:

void _exit (int status)
{
 8002bac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002bae:	f001 fc47 	bl	8004440 <__errno>
 8002bb2:	2316      	movs	r3, #22
 8002bb4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002bb6:	e7fe      	b.n	8002bb6 <_exit+0xa>

08002bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	460d      	mov	r5, r1
 8002bbc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	460e      	mov	r6, r1
 8002bc0:	1b73      	subs	r3, r6, r5
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	dc01      	bgt.n	8002bca <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002bca:	f3af 8000 	nop.w
 8002bce:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	e7f5      	b.n	8002bc0 <_read+0x8>

08002bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	460d      	mov	r5, r1
 8002bd8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bda:	460e      	mov	r6, r1
 8002bdc:	1b73      	subs	r3, r6, r5
 8002bde:	429c      	cmp	r4, r3
 8002be0:	dc01      	bgt.n	8002be6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002be2:	4620      	mov	r0, r4
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002be6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002bea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	e7f5      	b.n	8002bdc <_write+0x8>

08002bf0 <_close>:

int _close(int file)
{
	return -1;
}
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	4770      	bx	lr

08002bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002bfa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002bfc:	604b      	str	r3, [r1, #4]
}
 8002bfe:	4770      	bx	lr

08002c00 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002c00:	2001      	movs	r0, #1
 8002c02:	4770      	bx	lr

08002c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002c04:	2000      	movs	r0, #0
 8002c06:	4770      	bx	lr

08002c08 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <_sbrk+0x30>)
{
 8002c0a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002c0c:	6811      	ldr	r1, [r2, #0]
{
 8002c0e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002c10:	b909      	cbnz	r1, 8002c16 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <_sbrk+0x34>)
 8002c14:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	6810      	ldr	r0, [r2, #0]
 8002c18:	4909      	ldr	r1, [pc, #36]	; (8002c40 <_sbrk+0x38>)
 8002c1a:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <_sbrk+0x3c>)
 8002c1c:	4403      	add	r3, r0
 8002c1e:	1b09      	subs	r1, r1, r4
 8002c20:	428b      	cmp	r3, r1
 8002c22:	d906      	bls.n	8002c32 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002c24:	f001 fc0c 	bl	8004440 <__errno>
 8002c28:	230c      	movs	r3, #12
 8002c2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002c30:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002c32:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002c34:	e7fc      	b.n	8002c30 <_sbrk+0x28>
 8002c36:	bf00      	nop
 8002c38:	200016d8 	.word	0x200016d8
 8002c3c:	200016f0 	.word	0x200016f0
 8002c40:	20005000 	.word	0x20005000
 8002c44:	00000400 	.word	0x00000400

08002c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c48:	480c      	ldr	r0, [pc, #48]	; (8002c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c6e:	f000 f810 	bl	8002c92 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f001 fbeb 	bl	800444c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7ff fc49 	bl	800250c <main>
  bx lr
 8002c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c84:	0801abdc 	.word	0x0801abdc
  ldr r2, =_sbss
 8002c88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c8c:	200016f0 	.word	0x200016f0

08002c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_2_IRQHandler>

08002c92 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c92:	4770      	bx	lr

08002c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_InitTick+0x3c>)
{
 8002c98:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c9a:	7818      	ldrb	r0, [r3, #0]
 8002c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca0:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <HAL_InitTick+0x40>)
 8002ca6:	6810      	ldr	r0, [r2, #0]
 8002ca8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cac:	f000 f890 	bl	8002dd0 <HAL_SYSTICK_Config>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	b958      	cbnz	r0, 8002ccc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb4:	2d0f      	cmp	r5, #15
 8002cb6:	d809      	bhi.n	8002ccc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4629      	mov	r1, r5
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f000 f854 	bl	8002d6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_InitTick+0x44>)
 8002cc8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
 8002cce:	e7fc      	b.n	8002cca <HAL_InitTick+0x36>
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	20000010 	.word	0x20000010

08002cdc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_Init+0x20>)
{
 8002cde:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cea:	f000 f82d 	bl	8002d48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cee:	200f      	movs	r0, #15
 8002cf0:	f7ff ffd0 	bl	8002c94 <HAL_InitTick>
  HAL_MspInit();
 8002cf4:	f7ff feb6 	bl	8002a64 <HAL_MspInit>
}
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	bd08      	pop	{r3, pc}
 8002cfc:	40022000 	.word	0x40022000

08002d00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d00:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_IncTick+0x10>)
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_IncTick+0x14>)
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	440b      	add	r3, r1
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200016dc 	.word	0x200016dc
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <HAL_GetTick+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	200016dc 	.word	0x200016dc

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d28:	f7ff fff6 	bl	8002d18 <HAL_GetTick>
 8002d2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002d30:	bf1e      	ittt	ne
 8002d32:	4b04      	ldrne	r3, [pc, #16]	; (8002d44 <HAL_Delay+0x20>)
 8002d34:	781b      	ldrbne	r3, [r3, #0]
 8002d36:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	1b43      	subs	r3, r0, r5
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	d3fa      	bcc.n	8002d38 <HAL_Delay+0x14>
  {
  }
}
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d4a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d56:	0412      	lsls	r2, r2, #16
 8002d58:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d64:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b530      	push	{r4, r5, lr}
 8002d70:	68dc      	ldr	r4, [r3, #12]
 8002d72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	bf28      	it	cs
 8002d80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d88:	bf98      	it	ls
 8002d8a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d90:	bf88      	it	hi
 8002d92:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	ea21 0303 	bic.w	r3, r1, r3
 8002d98:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9a:	fa05 f404 	lsl.w	r4, r5, r4
 8002d9e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002da2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	bfac      	ite	ge
 8002daa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	4a07      	ldrlt	r2, [pc, #28]	; (8002dcc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	bfab      	itete	ge
 8002db8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002dc6:	bd30      	pop	{r4, r5, pc}
 8002dc8:	e000ed00 	.word	0xe000ed00
 8002dcc:	e000ed14 	.word	0xe000ed14

08002dd0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	3801      	subs	r0, #1
 8002dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002dd6:	d20b      	bcs.n	8002df0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	21f0      	movs	r1, #240	; 0xf0
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dea:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002df0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dfc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002dfe:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e00:	4f64      	ldr	r7, [pc, #400]	; (8002f94 <HAL_GPIO_Init+0x19c>)
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002e04:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002f9c <HAL_GPIO_Init+0x1a4>
 8002e08:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002fa0 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0c:	680d      	ldr	r5, [r1, #0]
 8002e0e:	fa35 f406 	lsrs.w	r4, r5, r6
 8002e12:	d102      	bne.n	8002e1a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002e14:	b003      	add	sp, #12
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002e1a:	f04f 0801 	mov.w	r8, #1
 8002e1e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002e26:	ea38 0505 	bics.w	r5, r8, r5
 8002e2a:	d17b      	bne.n	8002f24 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002e2c:	684d      	ldr	r5, [r1, #4]
 8002e2e:	2d03      	cmp	r5, #3
 8002e30:	d807      	bhi.n	8002e42 <HAL_GPIO_Init+0x4a>
 8002e32:	3d01      	subs	r5, #1
 8002e34:	2d02      	cmp	r5, #2
 8002e36:	f200 8088 	bhi.w	8002f4a <HAL_GPIO_Init+0x152>
 8002e3a:	e8df f005 	tbb	[pc, r5]
 8002e3e:	9b96      	.short	0x9b96
 8002e40:	a1          	.byte	0xa1
 8002e41:	00          	.byte	0x00
 8002e42:	2d12      	cmp	r5, #18
 8002e44:	f000 8099 	beq.w	8002f7a <HAL_GPIO_Init+0x182>
 8002e48:	d86e      	bhi.n	8002f28 <HAL_GPIO_Init+0x130>
 8002e4a:	2d11      	cmp	r5, #17
 8002e4c:	f000 808f 	beq.w	8002f6e <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e50:	2cff      	cmp	r4, #255	; 0xff
 8002e52:	bf98      	it	ls
 8002e54:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e56:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e5a:	bf88      	it	hi
 8002e5c:	f100 0a04 	addhi.w	sl, r0, #4
 8002e60:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e64:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e68:	bf88      	it	hi
 8002e6a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e6c:	fa09 fb05 	lsl.w	fp, r9, r5
 8002e70:	ea28 080b 	bic.w	r8, r8, fp
 8002e74:	fa02 f505 	lsl.w	r5, r2, r5
 8002e78:	ea48 0505 	orr.w	r5, r8, r5
 8002e7c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e80:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002e84:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002e88:	d04c      	beq.n	8002f24 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e8a:	69bd      	ldr	r5, [r7, #24]
 8002e8c:	f026 0803 	bic.w	r8, r6, #3
 8002e90:	f045 0501 	orr.w	r5, r5, #1
 8002e94:	61bd      	str	r5, [r7, #24]
 8002e96:	69bd      	ldr	r5, [r7, #24]
 8002e98:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002e9c:	f005 0501 	and.w	r5, r5, #1
 8002ea0:	9501      	str	r5, [sp, #4]
 8002ea2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eaa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002eb0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eb4:	fa09 f90b 	lsl.w	r9, r9, fp
 8002eb8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	4d39      	ldr	r5, [pc, #228]	; (8002fa4 <HAL_GPIO_Init+0x1ac>)
 8002ebe:	42a8      	cmp	r0, r5
 8002ec0:	d062      	beq.n	8002f88 <HAL_GPIO_Init+0x190>
 8002ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ec6:	42a8      	cmp	r0, r5
 8002ec8:	d060      	beq.n	8002f8c <HAL_GPIO_Init+0x194>
 8002eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	d05e      	beq.n	8002f90 <HAL_GPIO_Init+0x198>
 8002ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ed6:	42a8      	cmp	r0, r5
 8002ed8:	bf0c      	ite	eq
 8002eda:	2503      	moveq	r5, #3
 8002edc:	2504      	movne	r5, #4
 8002ede:	fa05 f50b 	lsl.w	r5, r5, fp
 8002ee2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002ee6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002eea:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eec:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef0:	bf14      	ite	ne
 8002ef2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef4:	43a5      	biceq	r5, r4
 8002ef6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002efe:	bf14      	ite	ne
 8002f00:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f02:	43a5      	biceq	r5, r4
 8002f04:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f06:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f08:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f0c:	bf14      	ite	ne
 8002f0e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f10:	43a5      	biceq	r5, r4
 8002f12:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f14:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f16:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f1a:	bf14      	ite	ne
 8002f1c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f1e:	ea25 0404 	biceq.w	r4, r5, r4
 8002f22:	60dc      	str	r4, [r3, #12]
	position++;
 8002f24:	3601      	adds	r6, #1
 8002f26:	e771      	b.n	8002e0c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002f28:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002fa8 <HAL_GPIO_Init+0x1b0>
 8002f2c:	454d      	cmp	r5, r9
 8002f2e:	d00c      	beq.n	8002f4a <HAL_GPIO_Init+0x152>
 8002f30:	d817      	bhi.n	8002f62 <HAL_GPIO_Init+0x16a>
 8002f32:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002f36:	454d      	cmp	r5, r9
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x152>
 8002f3a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002f3e:	454d      	cmp	r5, r9
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x152>
 8002f42:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002f46:	454d      	cmp	r5, r9
 8002f48:	d182      	bne.n	8002e50 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f4a:	688a      	ldr	r2, [r1, #8]
 8002f4c:	b1d2      	cbz	r2, 8002f84 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f4e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002f50:	bf08      	it	eq
 8002f52:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f56:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002f5a:	bf18      	it	ne
 8002f5c:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002f60:	e776      	b.n	8002e50 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002f62:	4565      	cmp	r5, ip
 8002f64:	d0f1      	beq.n	8002f4a <HAL_GPIO_Init+0x152>
 8002f66:	4575      	cmp	r5, lr
 8002f68:	e7ee      	b.n	8002f48 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f6a:	68ca      	ldr	r2, [r1, #12]
          break;
 8002f6c:	e770      	b.n	8002e50 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f6e:	68ca      	ldr	r2, [r1, #12]
 8002f70:	3204      	adds	r2, #4
          break;
 8002f72:	e76d      	b.n	8002e50 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f74:	68ca      	ldr	r2, [r1, #12]
 8002f76:	3208      	adds	r2, #8
          break;
 8002f78:	e76a      	b.n	8002e50 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f7a:	68ca      	ldr	r2, [r1, #12]
 8002f7c:	320c      	adds	r2, #12
          break;
 8002f7e:	e767      	b.n	8002e50 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002f80:	2200      	movs	r2, #0
 8002f82:	e765      	b.n	8002e50 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f84:	2204      	movs	r2, #4
 8002f86:	e763      	b.n	8002e50 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f88:	2500      	movs	r5, #0
 8002f8a:	e7a8      	b.n	8002ede <HAL_GPIO_Init+0xe6>
 8002f8c:	2501      	movs	r5, #1
 8002f8e:	e7a6      	b.n	8002ede <HAL_GPIO_Init+0xe6>
 8002f90:	2502      	movs	r5, #2
 8002f92:	e7a4      	b.n	8002ede <HAL_GPIO_Init+0xe6>
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	10310000 	.word	0x10310000
 8002fa0:	10320000 	.word	0x10320000
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	10220000 	.word	0x10220000

08002fac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fac:	b10a      	cbz	r2, 8002fb2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fae:	6101      	str	r1, [r0, #16]
  }
}
 8002fb0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fb2:	0409      	lsls	r1, r1, #16
 8002fb4:	e7fb      	b.n	8002fae <HAL_GPIO_WritePin+0x2>

08002fb6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb6:	6801      	ldr	r1, [r0, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	694b      	ldr	r3, [r1, #20]
 8002fbc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002fc0:	d010      	beq.n	8002fe4 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002fc6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	4770      	bx	lr
  }
  return HAL_OK;
 8002fe4:	4618      	mov	r0, r3
}
 8002fe6:	4770      	bx	lr

08002fe8 <I2C_WaitOnFlagUntilTimeout>:
{
 8002fe8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002fec:	4606      	mov	r6, r0
 8002fee:	460f      	mov	r7, r1
 8002ff0:	4691      	mov	r9, r2
 8002ff2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002ff8:	6833      	ldr	r3, [r6, #0]
 8002ffa:	f1ba 0f01 	cmp.w	sl, #1
 8002ffe:	bf0c      	ite	eq
 8003000:	695c      	ldreq	r4, [r3, #20]
 8003002:	699c      	ldrne	r4, [r3, #24]
 8003004:	ea27 0404 	bic.w	r4, r7, r4
 8003008:	b2a4      	uxth	r4, r4
 800300a:	fab4 f484 	clz	r4, r4
 800300e:	0964      	lsrs	r4, r4, #5
 8003010:	45a1      	cmp	r9, r4
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003014:	2000      	movs	r0, #0
 8003016:	e017      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003018:	1c6a      	adds	r2, r5, #1
 800301a:	d0ee      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7ff fe7c 	bl	8002d18 <HAL_GetTick>
 8003020:	9b08      	ldr	r3, [sp, #32]
 8003022:	1ac0      	subs	r0, r0, r3
 8003024:	42a8      	cmp	r0, r5
 8003026:	d801      	bhi.n	800302c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003028:	2d00      	cmp	r5, #0
 800302a:	d1e5      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800302c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800302e:	2220      	movs	r2, #32
        return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003032:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003034:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003038:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800303e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	f042 0220 	orr.w	r2, r2, #32
 8003046:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003048:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003050:	4604      	mov	r4, r0
 8003052:	460f      	mov	r7, r1
 8003054:	4616      	mov	r6, r2
 8003056:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	6968      	ldr	r0, [r5, #20]
 800305c:	ea27 0000 	bic.w	r0, r7, r0
 8003060:	b280      	uxth	r0, r0
 8003062:	b1b8      	cbz	r0, 8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003064:	696b      	ldr	r3, [r5, #20]
 8003066:	055a      	lsls	r2, r3, #21
 8003068:	d516      	bpl.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306a:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003072:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003078:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003086:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003088:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003090:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003098:	1c73      	adds	r3, r6, #1
 800309a:	d0de      	beq.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7ff fe3c 	bl	8002d18 <HAL_GetTick>
 80030a0:	eba0 0008 	sub.w	r0, r0, r8
 80030a4:	42b0      	cmp	r0, r6
 80030a6:	d801      	bhi.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80030a8:	2e00      	cmp	r6, #0
 80030aa:	d1d5      	bne.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ac:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030bc:	f042 0220 	orr.w	r2, r2, #32
 80030c0:	e7e4      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080030c2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80030c2:	b570      	push	{r4, r5, r6, lr}
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
 80030c8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ca:	6821      	ldr	r1, [r4, #0]
 80030cc:	694b      	ldr	r3, [r1, #20]
 80030ce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80030d2:	d001      	beq.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80030d4:	2000      	movs	r0, #0
 80030d6:	e010      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030d8:	694a      	ldr	r2, [r1, #20]
 80030da:	06d2      	lsls	r2, r2, #27
 80030dc:	d50e      	bpl.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030de:	f06f 0210 	mvn.w	r2, #16
 80030e2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80030f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7ff fe0c 	bl	8002d18 <HAL_GetTick>
 8003100:	1b80      	subs	r0, r0, r6
 8003102:	42a8      	cmp	r0, r5
 8003104:	d801      	bhi.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d1df      	bne.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	e7e8      	b.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003120 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4604      	mov	r4, r0
 8003124:	460d      	mov	r5, r1
 8003126:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	075b      	lsls	r3, r3, #29
 800312e:	d501      	bpl.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003130:	2000      	movs	r0, #0
}
 8003132:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff ff3e 	bl	8002fb6 <I2C_IsAcknowledgeFailed>
 800313a:	b9a8      	cbnz	r0, 8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800313c:	1c6a      	adds	r2, r5, #1
 800313e:	d0f3      	beq.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff fdea 	bl	8002d18 <HAL_GetTick>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	42a8      	cmp	r0, r5
 8003148:	d801      	bhi.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800314a:	2d00      	cmp	r5, #0
 800314c:	d1ec      	bne.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800315e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	f042 0220 	orr.w	r2, r2, #32
 8003166:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003168:	2001      	movs	r0, #1
 800316a:	e7e2      	b.n	8003132 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800316c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	460d      	mov	r5, r1
 8003172:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	d501      	bpl.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
}
 800317e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff ff18 	bl	8002fb6 <I2C_IsAcknowledgeFailed>
 8003186:	b9a8      	cbnz	r0, 80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003188:	1c6a      	adds	r2, r5, #1
 800318a:	d0f3      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7ff fdc4 	bl	8002d18 <HAL_GetTick>
 8003190:	1b80      	subs	r0, r0, r6
 8003192:	42a8      	cmp	r0, r5
 8003194:	d801      	bhi.n	800319a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003196:	2d00      	cmp	r5, #0
 8003198:	d1ec      	bne.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80031b4:	2001      	movs	r0, #1
 80031b6:	e7e2      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080031b8 <I2C_RequestMemoryWrite>:
{
 80031b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031bc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031be:	6802      	ldr	r2, [r0, #0]
{
 80031c0:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	6813      	ldr	r3, [r2, #0]
{
 80031c4:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
{
 80031cc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80031d0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d2:	463b      	mov	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031da:	f8cd 8000 	str.w	r8, [sp]
{
 80031de:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	f7ff ff02 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	b138      	cbz	r0, 80031f8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	05db      	lsls	r3, r3, #23
 80031ec:	d502      	bpl.n	80031f4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80031f4:	2003      	movs	r0, #3
 80031f6:	e00a      	b.n	800320e <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031f8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80031fc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fe:	463a      	mov	r2, r7
 8003200:	4643      	mov	r3, r8
 8003202:	4620      	mov	r0, r4
 8003204:	4917      	ldr	r1, [pc, #92]	; (8003264 <I2C_RequestMemoryWrite+0xac>)
 8003206:	f7ff ff21 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320a:	b118      	cbz	r0, 8003214 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
}
 800320e:	b005      	add	sp, #20
 8003210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	9003      	str	r0, [sp, #12]
 8003218:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321c:	9203      	str	r2, [sp, #12]
 800321e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003220:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003224:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003228:	f7ff ffa0 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	b140      	cbz	r0, 8003240 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003230:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	bf01      	itttt	eq
 8003234:	6822      	ldreq	r2, [r4, #0]
 8003236:	6813      	ldreq	r3, [r2, #0]
 8003238:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800323c:	6013      	streq	r3, [r2, #0]
 800323e:	e7e5      	b.n	800320c <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003240:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003246:	d102      	bne.n	800324e <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003248:	b2ed      	uxtb	r5, r5
 800324a:	611d      	str	r5, [r3, #16]
 800324c:	e7df      	b.n	800320e <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800324e:	0a2a      	lsrs	r2, r5, #8
 8003250:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	4639      	mov	r1, r7
 8003254:	4642      	mov	r2, r8
 8003256:	4620      	mov	r0, r4
 8003258:	f7ff ff88 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	2800      	cmp	r0, #0
 800325e:	d1e6      	bne.n	800322e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	e7f1      	b.n	8003248 <I2C_RequestMemoryWrite+0x90>
 8003264:	00010002 	.word	0x00010002

08003268 <I2C_RequestMemoryRead>:
{
 8003268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	469a      	mov	sl, r3
 800326e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	6803      	ldr	r3, [r0, #0]
{
 8003274:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	681a      	ldr	r2, [r3, #0]
{
 8003278:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003280:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	463b      	mov	r3, r7
 800328e:	2200      	movs	r2, #0
 8003290:	f8cd 8000 	str.w	r8, [sp]
{
 8003294:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	f7ff fea7 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	b148      	cbz	r0, 80032b2 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	d502      	bpl.n	80032aa <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80032aa:	2003      	movs	r0, #3
}
 80032ac:	b004      	add	sp, #16
 80032ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b2:	fa5f f986 	uxtb.w	r9, r6
 80032b6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80032ba:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032bc:	463a      	mov	r2, r7
 80032be:	4643      	mov	r3, r8
 80032c0:	4620      	mov	r0, r4
 80032c2:	4929      	ldr	r1, [pc, #164]	; (8003368 <I2C_RequestMemoryRead+0x100>)
 80032c4:	f7ff fec2 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	b108      	cbz	r0, 80032ce <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
 80032cc:	e7ee      	b.n	80032ac <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	9003      	str	r0, [sp, #12]
 80032d2:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d4:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	9203      	str	r2, [sp, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	f7ff ff43 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 80032e6:	b140      	cbz	r0, 80032fa <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ea:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	bf01      	itttt	eq
 80032ee:	6822      	ldreq	r2, [r4, #0]
 80032f0:	6813      	ldreq	r3, [r2, #0]
 80032f2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80032f6:	6013      	streq	r3, [r2, #0]
 80032f8:	e7e7      	b.n	80032ca <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032fa:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003300:	d11a      	bne.n	8003338 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003302:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003304:	4642      	mov	r2, r8
 8003306:	4639      	mov	r1, r7
 8003308:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330c:	f7ff ff2e 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4602      	mov	r2, r0
 8003312:	2800      	cmp	r0, #0
 8003314:	d1e8      	bne.n	80032e8 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003316:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003322:	463b      	mov	r3, r7
 8003324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003328:	f8cd 8000 	str.w	r8, [sp]
 800332c:	f7ff fe5c 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	b160      	cbz	r0, 800334e <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	e7b3      	b.n	80032a0 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003338:	0a2a      	lsrs	r2, r5, #8
 800333a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333c:	4639      	mov	r1, r7
 800333e:	4642      	mov	r2, r8
 8003340:	4620      	mov	r0, r4
 8003342:	f7ff ff13 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8003346:	2800      	cmp	r0, #0
 8003348:	d1ce      	bne.n	80032e8 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	e7d9      	b.n	8003302 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800334e:	f049 0301 	orr.w	r3, r9, #1
 8003352:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003354:	4620      	mov	r0, r4
 8003356:	4643      	mov	r3, r8
 8003358:	463a      	mov	r2, r7
 800335a:	4903      	ldr	r1, [pc, #12]	; (8003368 <I2C_RequestMemoryRead+0x100>)
 800335c:	f7ff fe76 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003360:	3800      	subs	r0, #0
 8003362:	bf18      	it	ne
 8003364:	2001      	movne	r0, #1
 8003366:	e7a1      	b.n	80032ac <I2C_RequestMemoryRead+0x44>
 8003368:	00010002 	.word	0x00010002

0800336c <HAL_I2C_Init>:
{
 800336c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800336e:	4604      	mov	r4, r0
 8003370:	b908      	cbnz	r0, 8003376 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003372:	2001      	movs	r0, #1
}
 8003374:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800337a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800337e:	b91b      	cbnz	r3, 8003388 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003380:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003384:	f7ff fb90 	bl	8002aa8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	2324      	movs	r3, #36	; 0x24
 800338a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f000 ff44 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ac:	4a3f      	ldr	r2, [pc, #252]	; (80034ac <HAL_I2C_Init+0x140>)
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	4a3e      	ldrls	r2, [pc, #248]	; (80034b0 <HAL_I2C_Init+0x144>)
 80033b6:	4a3f      	ldrhi	r2, [pc, #252]	; (80034b4 <HAL_I2C_Init+0x148>)
 80033b8:	4290      	cmp	r0, r2
 80033ba:	bf8c      	ite	hi
 80033bc:	2200      	movhi	r2, #0
 80033be:	2201      	movls	r2, #1
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d1d6      	bne.n	8003372 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c4:	4e39      	ldr	r6, [pc, #228]	; (80034ac <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80033c6:	493c      	ldr	r1, [pc, #240]	; (80034b8 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c8:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80033ca:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ce:	bf88      	it	hi
 80033d0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033d4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d6:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033da:	6855      	ldr	r5, [r2, #4]
 80033dc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80033e0:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e4:	bf82      	ittt	hi
 80033e6:	4371      	mulhi	r1, r6
 80033e8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80033ec:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f0:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f2:	6a15      	ldr	r5, [r2, #32]
 80033f4:	3101      	adds	r1, #1
 80033f6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80033fa:	4329      	orrs	r1, r5
 80033fc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033fe:	69d1      	ldr	r1, [r2, #28]
 8003400:	4d2a      	ldr	r5, [pc, #168]	; (80034ac <HAL_I2C_Init+0x140>)
 8003402:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003406:	42ab      	cmp	r3, r5
 8003408:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800340c:	d832      	bhi.n	8003474 <HAL_I2C_Init+0x108>
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fbb0 f0f3 	udiv	r0, r0, r3
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	f640 70fc 	movw	r0, #4092	; 0xffc
 800341a:	4203      	tst	r3, r0
 800341c:	d042      	beq.n	80034a4 <HAL_I2C_Init+0x138>
 800341e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003422:	430b      	orrs	r3, r1
 8003424:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003426:	6811      	ldr	r1, [r2, #0]
 8003428:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800342c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003430:	4303      	orrs	r3, r0
 8003432:	430b      	orrs	r3, r1
 8003434:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003436:	6891      	ldr	r1, [r2, #8]
 8003438:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800343c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003440:	4303      	orrs	r3, r0
 8003442:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003446:	430b      	orrs	r3, r1
 8003448:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344a:	68d1      	ldr	r1, [r2, #12]
 800344c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003450:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003454:	4303      	orrs	r3, r0
 8003456:	430b      	orrs	r3, r1
 8003458:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800345a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003464:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003466:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003468:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800346c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003472:	e77f      	b.n	8003374 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003474:	68a5      	ldr	r5, [r4, #8]
 8003476:	b955      	cbnz	r5, 800348e <HAL_I2C_Init+0x122>
 8003478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800347c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	b17b      	cbz	r3, 80034a8 <HAL_I2C_Init+0x13c>
 8003488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348c:	e7c9      	b.n	8003422 <HAL_I2C_Init+0xb6>
 800348e:	2519      	movs	r5, #25
 8003490:	436b      	muls	r3, r5
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	b123      	cbz	r3, 80034a8 <HAL_I2C_Init+0x13c>
 800349e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a2:	e7be      	b.n	8003422 <HAL_I2C_Init+0xb6>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e7bc      	b.n	8003422 <HAL_I2C_Init+0xb6>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e7ba      	b.n	8003422 <HAL_I2C_Init+0xb6>
 80034ac:	000186a0 	.word	0x000186a0
 80034b0:	001e847f 	.word	0x001e847f
 80034b4:	003d08ff 	.word	0x003d08ff
 80034b8:	000f4240 	.word	0x000f4240

080034bc <HAL_I2C_Master_Transmit>:
{
 80034bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	b085      	sub	sp, #20
 80034c4:	4698      	mov	r8, r3
 80034c6:	460d      	mov	r5, r1
 80034c8:	4691      	mov	r9, r2
 80034ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fc24 	bl	8002d18 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80034d4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d004      	beq.n	80034e4 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80034da:	2502      	movs	r5, #2
}
 80034dc:	4628      	mov	r0, r5
 80034de:	b005      	add	sp, #20
 80034e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e4:	9000      	str	r0, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	2201      	movs	r2, #1
 80034ea:	4620      	mov	r0, r4
 80034ec:	495b      	ldr	r1, [pc, #364]	; (800365c <HAL_I2C_Master_Transmit+0x1a0>)
 80034ee:	f7ff fd7b 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d1f1      	bne.n	80034da <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80034f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d0ed      	beq.n	80034da <HAL_I2C_Master_Transmit+0x1e>
 80034fe:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003500:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8003502:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003506:	680b      	ldr	r3, [r1, #0]
 8003508:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800350a:	bf5e      	ittt	pl
 800350c:	680b      	ldrpl	r3, [r1, #0]
 800350e:	f043 0301 	orrpl.w	r3, r3, #1
 8003512:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003514:	680b      	ldr	r3, [r1, #0]
 8003516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800351c:	2321      	movs	r3, #33	; 0x21
 800351e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003522:	2310      	movs	r3, #16
 8003524:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003528:	2300      	movs	r3, #0
 800352a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800352c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8003532:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003536:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003538:	4b49      	ldr	r3, [pc, #292]	; (8003660 <HAL_I2C_Master_Transmit+0x1a4>)
 800353a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800353c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353e:	2b08      	cmp	r3, #8
 8003540:	d004      	beq.n	800354c <HAL_I2C_Master_Transmit+0x90>
 8003542:	2b01      	cmp	r3, #1
 8003544:	d002      	beq.n	800354c <HAL_I2C_Master_Transmit+0x90>
 8003546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800354a:	d104      	bne.n	8003556 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354c:	680b      	ldr	r3, [r1, #0]
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	600b      	str	r3, [r1, #0]
 8003554:	e002      	b.n	800355c <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003558:	2b12      	cmp	r3, #18
 800355a:	d0f7      	beq.n	800354c <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	2200      	movs	r2, #0
 800355e:	463b      	mov	r3, r7
 8003560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003564:	4620      	mov	r0, r4
 8003566:	9600      	str	r6, [sp, #0]
 8003568:	f7ff fd3e 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	b138      	cbz	r0, 8003580 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003574:	bf44      	itt	mi
 8003576:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800357a:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800357c:	2501      	movs	r5, #1
 800357e:	e7ad      	b.n	80034dc <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003586:	d121      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003588:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800358c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358e:	4633      	mov	r3, r6
 8003590:	463a      	mov	r2, r7
 8003592:	4620      	mov	r0, r4
 8003594:	4933      	ldr	r1, [pc, #204]	; (8003664 <HAL_I2C_Master_Transmit+0x1a8>)
 8003596:	f7ff fd59 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359a:	4605      	mov	r5, r0
 800359c:	2800      	cmp	r0, #0
 800359e:	d1ed      	bne.n	800357c <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	9003      	str	r0, [sp, #12]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	9203      	str	r2, [sp, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	9303      	str	r3, [sp, #12]
 80035ac:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80035ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035b0:	b9f3      	cbnz	r3, 80035f0 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b2:	6821      	ldr	r1, [r4, #0]
 80035b4:	680a      	ldr	r2, [r1, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ba:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80035be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80035ca:	e787      	b.n	80034dc <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035cc:	11eb      	asrs	r3, r5, #7
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80035d6:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d8:	4620      	mov	r0, r4
 80035da:	4633      	mov	r3, r6
 80035dc:	463a      	mov	r2, r7
 80035de:	4922      	ldr	r1, [pc, #136]	; (8003668 <HAL_I2C_Master_Transmit+0x1ac>)
 80035e0:	f7ff fd34 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1c9      	bne.n	800357c <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	b2ed      	uxtb	r5, r5
 80035ec:	611d      	str	r5, [r3, #16]
 80035ee:	e7ce      	b.n	800358e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	4632      	mov	r2, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fdb9 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 80035fa:	b140      	cbz	r0, 800360e <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d1bc      	bne.n	800357c <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e7b6      	b.n	800357c <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003610:	6820      	ldr	r0, [r4, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003618:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800361a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800361c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800361e:	3a01      	subs	r2, #1
 8003620:	b292      	uxth	r2, r2
 8003622:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003624:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003626:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 800362a:	1e51      	subs	r1, r2, #1
 800362c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800362e:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8003632:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003634:	d00a      	beq.n	800364c <HAL_I2C_Master_Transmit+0x190>
 8003636:	b149      	cbz	r1, 800364c <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003638:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800363a:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800363e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003640:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003642:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8003644:	3b01      	subs	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800364a:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	4632      	mov	r2, r6
 800364e:	4639      	mov	r1, r7
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff fd65 	bl	8003120 <I2C_WaitOnBTFFlagUntilTimeout>
 8003656:	2800      	cmp	r0, #0
 8003658:	d0a9      	beq.n	80035ae <HAL_I2C_Master_Transmit+0xf2>
 800365a:	e7cf      	b.n	80035fc <HAL_I2C_Master_Transmit+0x140>
 800365c:	00100002 	.word	0x00100002
 8003660:	ffff0000 	.word	0xffff0000
 8003664:	00010002 	.word	0x00010002
 8003668:	00010008 	.word	0x00010008

0800366c <HAL_I2C_Master_Receive>:
{
 800366c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003670:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8003672:	2300      	movs	r3, #0
{
 8003674:	4604      	mov	r4, r0
 8003676:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8003678:	9302      	str	r3, [sp, #8]
{
 800367a:	460d      	mov	r5, r1
 800367c:	4691      	mov	r9, r2
 800367e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fb4a 	bl	8002d18 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003684:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003688:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	2b20      	cmp	r3, #32
 800368c:	d004      	beq.n	8003698 <HAL_I2C_Master_Receive+0x2c>
    return HAL_BUSY;
 800368e:	2502      	movs	r5, #2
}
 8003690:	4628      	mov	r0, r5
 8003692:	b009      	add	sp, #36	; 0x24
 8003694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003698:	9000      	str	r0, [sp, #0]
 800369a:	2319      	movs	r3, #25
 800369c:	2201      	movs	r2, #1
 800369e:	4620      	mov	r0, r4
 80036a0:	498f      	ldr	r1, [pc, #572]	; (80038e0 <HAL_I2C_Master_Receive+0x274>)
 80036a2:	f7ff fca1 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d1f1      	bne.n	800368e <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 80036aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d0ed      	beq.n	800368e <HAL_I2C_Master_Receive+0x22>
 80036b2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b4:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80036b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ba:	680b      	ldr	r3, [r1, #0]
 80036bc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80036be:	bf5e      	ittt	pl
 80036c0:	680b      	ldrpl	r3, [r1, #0]
 80036c2:	f043 0301 	orrpl.w	r3, r3, #1
 80036c6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c8:	680b      	ldr	r3, [r1, #0]
 80036ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ce:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036d0:	2322      	movs	r3, #34	; 0x22
 80036d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d6:	2310      	movs	r3, #16
 80036d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80036e0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80036e6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80036ea:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ec:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_I2C_Master_Receive+0x278>)
 80036ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f4:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fa:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fc:	d004      	beq.n	8003708 <HAL_I2C_Master_Receive+0x9c>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <HAL_I2C_Master_Receive+0x9c>
 8003702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003706:	d104      	bne.n	8003712 <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003708:	680b      	ldr	r3, [r1, #0]
 800370a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370e:	600b      	str	r3, [r1, #0]
 8003710:	e002      	b.n	8003718 <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003714:	2b11      	cmp	r3, #17
 8003716:	d0f7      	beq.n	8003708 <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	463b      	mov	r3, r7
 800371a:	2200      	movs	r2, #0
 800371c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003720:	4620      	mov	r0, r4
 8003722:	9600      	str	r6, [sp, #0]
 8003724:	f7ff fc60 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	b138      	cbz	r0, 800373c <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800372c:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800372e:	05dd      	lsls	r5, r3, #23
 8003730:	d502      	bpl.n	8003738 <HAL_I2C_Master_Receive+0xcc>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003736:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8003738:	2501      	movs	r5, #1
 800373a:	e7a9      	b.n	8003690 <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373c:	6922      	ldr	r2, [r4, #16]
 800373e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003742:	d129      	bne.n	8003798 <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003744:	f045 0501 	orr.w	r5, r5, #1
 8003748:	b2ed      	uxtb	r5, r5
 800374a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800374c:	4633      	mov	r3, r6
 800374e:	463a      	mov	r2, r7
 8003750:	4620      	mov	r0, r4
 8003752:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_I2C_Master_Receive+0x27c>)
 8003754:	f7ff fc7a 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003758:	4605      	mov	r5, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	d1ec      	bne.n	8003738 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 800375e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003760:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003762:	2a00      	cmp	r2, #0
 8003764:	d14d      	bne.n	8003802 <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	9003      	str	r0, [sp, #12]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	9203      	str	r2, [sp, #12]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	9203      	str	r2, [sp, #12]
 8003770:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80038ec <HAL_I2C_Master_Receive+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800377e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80038f0 <HAL_I2C_Master_Receive+0x284>
    while (hi2c->XferSize > 0U)
 8003782:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d16c      	bne.n	8003862 <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800378a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003796:	e77b      	b.n	8003690 <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003798:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800379c:	f008 0806 	and.w	r8, r8, #6
 80037a0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80037a4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a6:	4620      	mov	r0, r4
 80037a8:	4633      	mov	r3, r6
 80037aa:	463a      	mov	r2, r7
 80037ac:	4951      	ldr	r1, [pc, #324]	; (80038f4 <HAL_I2C_Master_Receive+0x288>)
 80037ae:	f7ff fc4d 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d1c0      	bne.n	8003738 <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	b2ed      	uxtb	r5, r5
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ba:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037bc:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037be:	4620      	mov	r0, r4
 80037c0:	4633      	mov	r3, r6
 80037c2:	4949      	ldr	r1, [pc, #292]	; (80038e8 <HAL_I2C_Master_Receive+0x27c>)
 80037c4:	f7ff fc42 	bl	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c8:	4602      	mov	r2, r0
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d1b4      	bne.n	8003738 <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	9007      	str	r0, [sp, #28]
 80037d2:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	9107      	str	r1, [sp, #28]
 80037d8:	6999      	ldr	r1, [r3, #24]
 80037da:	9107      	str	r1, [sp, #28]
 80037dc:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037e4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e6:	463b      	mov	r3, r7
 80037e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ec:	9600      	str	r6, [sp, #0]
 80037ee:	f7ff fbfb 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	b108      	cbz	r0, 80037fa <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	6813      	ldr	r3, [r2, #0]
 80037f8:	e799      	b.n	800372e <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037fa:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80037fe:	6113      	str	r3, [r2, #16]
 8003800:	e7a4      	b.n	800374c <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 8003802:	2a01      	cmp	r2, #1
 8003804:	d111      	bne.n	800382a <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	9004      	str	r0, [sp, #16]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	9204      	str	r2, [sp, #16]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	9204      	str	r2, [sp, #16]
 800381c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003826:	b662      	cpsie	i
}
 8003828:	e7a7      	b.n	800377a <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 800382a:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800382e:	d10e      	bne.n	800384e <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003836:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	9005      	str	r0, [sp, #20]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	9205      	str	r2, [sp, #20]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	9205      	str	r2, [sp, #20]
 8003844:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	e7ea      	b.n	8003824 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003852:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003854:	9006      	str	r0, [sp, #24]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	9206      	str	r2, [sp, #24]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	9306      	str	r3, [sp, #24]
 800385e:	9b06      	ldr	r3, [sp, #24]
 8003860:	e78b      	b.n	800377a <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 8003862:	2b03      	cmp	r3, #3
 8003864:	f200 8088 	bhi.w	8003978 <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8003868:	2b01      	cmp	r3, #1
 800386a:	d116      	bne.n	800389a <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	4632      	mov	r2, r6
 800386e:	4639      	mov	r1, r7
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff fc26 	bl	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003876:	2800      	cmp	r0, #0
 8003878:	f47f af5e 	bne.w	8003738 <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003882:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003886:	3301      	adds	r3, #1
 8003888:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800388a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003892:	3b01      	subs	r3, #1
 8003894:	b29b      	uxth	r3, r3
 8003896:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003898:	e773      	b.n	8003782 <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 800389a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	463b      	mov	r3, r7
 80038a2:	4641      	mov	r1, r8
 80038a4:	4620      	mov	r0, r4
 80038a6:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 80038a8:	d126      	bne.n	80038f8 <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038aa:	f7ff fb9d 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	f47f af42 	bne.w	8003738 <HAL_I2C_Master_Receive+0xcc>
 80038b4:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80038c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c8:	3301      	adds	r3, #1
 80038ca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80038cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80038d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038da:	b662      	cpsie	i
 80038dc:	e7ce      	b.n	800387c <HAL_I2C_Master_Receive+0x210>
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000
 80038e8:	00010002 	.word	0x00010002
 80038ec:	00010004 	.word	0x00010004
 80038f0:	20000008 	.word	0x20000008
 80038f4:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f8:	f7ff fb76 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f47f af1b 	bne.w	8003738 <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800390c:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800390e:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003918:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800391a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800391c:	1c53      	adds	r3, r2, #1
 800391e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003920:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003926:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003928:	3b01      	subs	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800392e:	f8d9 3000 	ldr.w	r3, [r9]
 8003932:	fbb3 f3f1 	udiv	r3, r3, r1
 8003936:	2123      	movs	r1, #35	; 0x23
 8003938:	434b      	muls	r3, r1
 800393a:	9302      	str	r3, [sp, #8]
            count--;
 800393c:	9b02      	ldr	r3, [sp, #8]
 800393e:	3b01      	subs	r3, #1
 8003940:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8003942:	9b02      	ldr	r3, [sp, #8]
 8003944:	b96b      	cbnz	r3, 8003962 <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003946:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003948:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800395a:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800395c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003960:	e6ea      	b.n	8003738 <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	6959      	ldr	r1, [r3, #20]
 8003966:	0748      	lsls	r0, r1, #29
 8003968:	d5e8      	bpl.n	800393c <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003970:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	7053      	strb	r3, [r2, #1]
 8003976:	e7a6      	b.n	80038c6 <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	4632      	mov	r2, r6
 800397a:	4639      	mov	r1, r7
 800397c:	4620      	mov	r0, r4
 800397e:	f7ff fba0 	bl	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003982:	2800      	cmp	r0, #0
 8003984:	f47f aed8 	bne.w	8003738 <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800398e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003990:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003992:	1c53      	adds	r3, r2, #1
 8003994:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003996:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800399c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	6959      	ldr	r1, [r3, #20]
 80039a8:	0749      	lsls	r1, r1, #29
 80039aa:	f57f aeea 	bpl.w	8003782 <HAL_I2C_Master_Receive+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	7053      	strb	r3, [r2, #1]
 80039b2:	e767      	b.n	8003884 <HAL_I2C_Master_Receive+0x218>

080039b4 <HAL_I2C_Mem_Write>:
{
 80039b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	4699      	mov	r9, r3
 80039bc:	460f      	mov	r7, r1
 80039be:	4690      	mov	r8, r2
 80039c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039c2:	f7ff f9a9 	bl	8002d18 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80039ca:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d003      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80039d0:	2002      	movs	r0, #2
}
 80039d2:	b003      	add	sp, #12
 80039d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d8:	9000      	str	r0, [sp, #0]
 80039da:	2319      	movs	r3, #25
 80039dc:	2201      	movs	r2, #1
 80039de:	4620      	mov	r0, r4
 80039e0:	493a      	ldr	r1, [pc, #232]	; (8003acc <HAL_I2C_Mem_Write+0x118>)
 80039e2:	f7ff fb01 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1f2      	bne.n	80039d0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80039ea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d0ee      	beq.n	80039d0 <HAL_I2C_Mem_Write+0x1c>
 80039f2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f4:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80039f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fa:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039fc:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fe:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003a00:	bf58      	it	pl
 8003a02:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a04:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003a06:	bf5c      	itt	pl
 8003a08:	f043 0301 	orrpl.w	r3, r3, #1
 8003a0c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a14:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a16:	2321      	movs	r3, #33	; 0x21
 8003a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a1c:	2340      	movs	r3, #64	; 0x40
 8003a1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a28:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003a2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a30:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8003a34:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3a:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_I2C_Mem_Write+0x11c>)
 8003a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3e:	464b      	mov	r3, r9
 8003a40:	f7ff fbba 	bl	80031b8 <I2C_RequestMemoryWrite>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d02a      	beq.n	8003a9e <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003a48:	2001      	movs	r0, #1
 8003a4a:	e7c2      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4c:	f7ff fb8e 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	b140      	cbz	r0, 8003a64 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a54:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	bf01      	itttt	eq
 8003a58:	6822      	ldreq	r2, [r4, #0]
 8003a5a:	6813      	ldreq	r3, [r2, #0]
 8003a5c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003a60:	6013      	streq	r3, [r2, #0]
 8003a62:	e7f1      	b.n	8003a48 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a66:	6827      	ldr	r7, [r4, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a6e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003a70:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003a74:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a76:	3a01      	subs	r2, #1
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a7c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003a7e:	1e48      	subs	r0, r1, #1
 8003a80:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a82:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003a84:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a86:	d50a      	bpl.n	8003a9e <HAL_I2C_Mem_Write+0xea>
 8003a88:	b148      	cbz	r0, 8003a9e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003a8c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003a90:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003a94:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003a9a:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003a9c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1d0      	bne.n	8003a4c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	f7ff fb39 	bl	8003120 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d1cf      	bne.n	8003a52 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	6822      	ldr	r2, [r4, #0]
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003abe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003aca:	e782      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e>
 8003acc:	00100002 	.word	0x00100002
 8003ad0:	ffff0000 	.word	0xffff0000

08003ad4 <HAL_I2C_Mem_Read>:
{
 8003ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ad8:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8003ada:	2300      	movs	r3, #0
{
 8003adc:	4604      	mov	r4, r0
 8003ade:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8003ae0:	9303      	str	r3, [sp, #12]
{
 8003ae2:	460d      	mov	r5, r1
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff f916 	bl	8002d18 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003af0:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d004      	beq.n	8003b00 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8003af6:	2502      	movs	r5, #2
}
 8003af8:	4628      	mov	r0, r5
 8003afa:	b009      	add	sp, #36	; 0x24
 8003afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b00:	9000      	str	r0, [sp, #0]
 8003b02:	2319      	movs	r3, #25
 8003b04:	2201      	movs	r2, #1
 8003b06:	4620      	mov	r0, r4
 8003b08:	498d      	ldr	r1, [pc, #564]	; (8003d40 <HAL_I2C_Mem_Read+0x26c>)
 8003b0a:	f7ff fa6d 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d1f1      	bne.n	8003af6 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003b12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d0ed      	beq.n	8003af6 <HAL_I2C_Mem_Read+0x22>
 8003b1a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b1c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003b1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b22:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b24:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b26:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003b28:	bf58      	it	pl
 8003b2a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b2c:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8003b2e:	bf5c      	itt	pl
 8003b30:	f043 0301 	orrpl.w	r3, r3, #1
 8003b34:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b36:	6803      	ldr	r3, [r0, #0]
 8003b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b3c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b50:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003b52:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b58:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8003b5c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b60:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b62:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_I2C_Mem_Read+0x270>)
 8003b64:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b66:	464b      	mov	r3, r9
 8003b68:	f7ff fb7e 	bl	8003268 <I2C_RequestMemoryRead>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	b108      	cbz	r0, 8003b74 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8003b70:	2501      	movs	r5, #1
 8003b72:	e7c1      	b.n	8003af8 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8003b74:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003b78:	b9c2      	cbnz	r2, 8003bac <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	9004      	str	r0, [sp, #16]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	9204      	str	r2, [sp, #16]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	9204      	str	r2, [sp, #16]
 8003b84:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8003d48 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b92:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003d4c <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8003b96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d137      	bne.n	8003c0c <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003b9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003baa:	e7a5      	b.n	8003af8 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8003bac:	2a01      	cmp	r2, #1
 8003bae:	d111      	bne.n	8003bd4 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	9005      	str	r0, [sp, #20]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	9205      	str	r2, [sp, #20]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	9205      	str	r2, [sp, #20]
 8003bc6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bd0:	b662      	cpsie	i
}
 8003bd2:	e7dc      	b.n	8003b8e <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8003bd4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003be0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	9006      	str	r0, [sp, #24]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	9206      	str	r2, [sp, #24]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	9206      	str	r2, [sp, #24]
 8003bee:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	e7ea      	b.n	8003bce <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bfc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	9007      	str	r0, [sp, #28]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	9207      	str	r2, [sp, #28]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	9307      	str	r3, [sp, #28]
 8003c08:	9b07      	ldr	r3, [sp, #28]
 8003c0a:	e7c0      	b.n	8003b8e <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d878      	bhi.n	8003d02 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d115      	bne.n	8003c40 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c14:	4632      	mov	r2, r6
 8003c16:	4639      	mov	r1, r7
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff fa52 	bl	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d1a6      	bne.n	8003b70 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c28:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003c3e:	e7aa      	b.n	8003b96 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8003c40:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	463b      	mov	r3, r7
 8003c48:	4641      	mov	r1, r8
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8003c4e:	d118      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c50:	f7ff f9ca 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d18b      	bne.n	8003b70 <HAL_I2C_Mem_Read+0x9c>
 8003c58:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c62:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c68:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c7e:	b662      	cpsie	i
 8003c80:	e7cf      	b.n	8003c22 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c82:	f7ff f9b1 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f47f af72 	bne.w	8003b70 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c96:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c98:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003ca4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ca6:	1c53      	adds	r3, r2, #1
 8003ca8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003caa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003cb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cb8:	f8d9 3000 	ldr.w	r3, [r9]
 8003cbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc0:	2123      	movs	r1, #35	; 0x23
 8003cc2:	434b      	muls	r3, r1
 8003cc4:	9303      	str	r3, [sp, #12]
            count--;
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	b96b      	cbnz	r3, 8003cec <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ce4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003ce6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003cea:	e741      	b.n	8003b70 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	6959      	ldr	r1, [r3, #20]
 8003cf0:	0748      	lsls	r0, r1, #29
 8003cf2:	d5e8      	bpl.n	8003cc6 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003cfa:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	7053      	strb	r3, [r2, #1]
 8003d00:	e7b3      	b.n	8003c6a <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	4632      	mov	r2, r6
 8003d04:	4639      	mov	r1, r7
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7ff f9db 	bl	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	f47f af2f 	bne.w	8003b70 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d1c:	1c53      	adds	r3, r2, #1
 8003d1e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003d20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	6959      	ldr	r1, [r3, #20]
 8003d32:	0749      	lsls	r1, r1, #29
 8003d34:	f57f af2f 	bpl.w	8003b96 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	7053      	strb	r3, [r2, #1]
 8003d3c:	e775      	b.n	8003c2a <HAL_I2C_Mem_Read+0x156>
 8003d3e:	bf00      	nop
 8003d40:	00100002 	.word	0x00100002
 8003d44:	ffff0000 	.word	0xffff0000
 8003d48:	00010004 	.word	0x00010004
 8003d4c:	20000008 	.word	0x20000008

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d54:	4605      	mov	r5, r0
 8003d56:	b338      	cbz	r0, 8003da8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d58:	6803      	ldr	r3, [r0, #0]
 8003d5a:	07db      	lsls	r3, r3, #31
 8003d5c:	d410      	bmi.n	8003d80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	079f      	lsls	r7, r3, #30
 8003d62:	d45e      	bmi.n	8003e22 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	0719      	lsls	r1, r3, #28
 8003d68:	f100 8095 	bmi.w	8003e96 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	075a      	lsls	r2, r3, #29
 8003d70:	f100 80c1 	bmi.w	8003ef6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d74:	69e8      	ldr	r0, [r5, #28]
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 812c 	bne.w	8003fd4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e029      	b.n	8003dd4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d80:	4c90      	ldr	r4, [pc, #576]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d007      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10a      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	03de      	lsls	r6, r3, #15
 8003d9a:	d507      	bpl.n	8003dac <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	039c      	lsls	r4, r3, #14
 8003da0:	d5dd      	bpl.n	8003d5e <HAL_RCC_OscConfig+0xe>
 8003da2:	686b      	ldr	r3, [r5, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1da      	bne.n	8003d5e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003da8:	2001      	movs	r0, #1
 8003daa:	e013      	b.n	8003dd4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	686b      	ldr	r3, [r5, #4]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d112      	bne.n	8003dda <HAL_RCC_OscConfig+0x8a>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dbc:	f7fe ffac 	bl	8002d18 <HAL_GetTick>
 8003dc0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0398      	lsls	r0, r3, #14
 8003dc6:	d4ca      	bmi.n	8003d5e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe ffa6 	bl	8002d18 <HAL_GetTick>
 8003dcc:	1b80      	subs	r0, r0, r6
 8003dce:	2864      	cmp	r0, #100	; 0x64
 8003dd0:	d9f7      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003dd2:	2003      	movs	r0, #3
}
 8003dd4:	b002      	add	sp, #8
 8003dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dda:	b99b      	cbnz	r3, 8003e04 <HAL_RCC_OscConfig+0xb4>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dec:	f7fe ff94 	bl	8002d18 <HAL_GetTick>
 8003df0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	0399      	lsls	r1, r3, #14
 8003df6:	d5b2      	bpl.n	8003d5e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe ff8e 	bl	8002d18 <HAL_GetTick>
 8003dfc:	1b80      	subs	r0, r0, r6
 8003dfe:	2864      	cmp	r0, #100	; 0x64
 8003e00:	d9f7      	bls.n	8003df2 <HAL_RCC_OscConfig+0xa2>
 8003e02:	e7e6      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	d103      	bne.n	8003e14 <HAL_RCC_OscConfig+0xc4>
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	e7cf      	b.n	8003db4 <HAL_RCC_OscConfig+0x64>
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e20:	e7cb      	b.n	8003dba <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4c68      	ldr	r4, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	f013 0f0c 	tst.w	r3, #12
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d110      	bne.n	8003e58 <HAL_RCC_OscConfig+0x108>
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	03da      	lsls	r2, r3, #15
 8003e3a:	d40d      	bmi.n	8003e58 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	079b      	lsls	r3, r3, #30
 8003e40:	d502      	bpl.n	8003e48 <HAL_RCC_OscConfig+0xf8>
 8003e42:	692b      	ldr	r3, [r5, #16]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d1af      	bne.n	8003da8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	696a      	ldr	r2, [r5, #20]
 8003e4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	e785      	b.n	8003d64 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e58:	692a      	ldr	r2, [r5, #16]
 8003e5a:	4b5b      	ldr	r3, [pc, #364]	; (8003fc8 <HAL_RCC_OscConfig+0x278>)
 8003e5c:	b16a      	cbz	r2, 8003e7a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e62:	f7fe ff59 	bl	8002d18 <HAL_GetTick>
 8003e66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	079f      	lsls	r7, r3, #30
 8003e6c:	d4ec      	bmi.n	8003e48 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe ff53 	bl	8002d18 <HAL_GetTick>
 8003e72:	1b80      	subs	r0, r0, r6
 8003e74:	2802      	cmp	r0, #2
 8003e76:	d9f7      	bls.n	8003e68 <HAL_RCC_OscConfig+0x118>
 8003e78:	e7ab      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003e7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e7c:	f7fe ff4c 	bl	8002d18 <HAL_GetTick>
 8003e80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0798      	lsls	r0, r3, #30
 8003e86:	f57f af6d 	bpl.w	8003d64 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe ff45 	bl	8002d18 <HAL_GetTick>
 8003e8e:	1b80      	subs	r0, r0, r6
 8003e90:	2802      	cmp	r0, #2
 8003e92:	d9f6      	bls.n	8003e82 <HAL_RCC_OscConfig+0x132>
 8003e94:	e79d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e96:	69aa      	ldr	r2, [r5, #24]
 8003e98:	4e4a      	ldr	r6, [pc, #296]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_RCC_OscConfig+0x278>)
 8003e9c:	b1e2      	cbz	r2, 8003ed8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003ea4:	f7fe ff38 	bl	8002d18 <HAL_GetTick>
 8003ea8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003eac:	079b      	lsls	r3, r3, #30
 8003eae:	d50d      	bpl.n	8003ecc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003eb4:	4b45      	ldr	r3, [pc, #276]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ebc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003ebe:	bf00      	nop
  }
  while (Delay --);
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f9      	bne.n	8003ebe <HAL_RCC_OscConfig+0x16e>
 8003eca:	e74f      	b.n	8003d6c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fe ff24 	bl	8002d18 <HAL_GetTick>
 8003ed0:	1b00      	subs	r0, r0, r4
 8003ed2:	2802      	cmp	r0, #2
 8003ed4:	d9e9      	bls.n	8003eaa <HAL_RCC_OscConfig+0x15a>
 8003ed6:	e77c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003ed8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003edc:	f7fe ff1c 	bl	8002d18 <HAL_GetTick>
 8003ee0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ee4:	079f      	lsls	r7, r3, #30
 8003ee6:	f57f af41 	bpl.w	8003d6c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fe ff15 	bl	8002d18 <HAL_GetTick>
 8003eee:	1b00      	subs	r0, r0, r4
 8003ef0:	2802      	cmp	r0, #2
 8003ef2:	d9f6      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x192>
 8003ef4:	e76d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4c33      	ldr	r4, [pc, #204]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	69e3      	ldr	r3, [r4, #28]
 8003efa:	00d8      	lsls	r0, r3, #3
 8003efc:	d424      	bmi.n	8003f48 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003efe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f00:	69e3      	ldr	r3, [r4, #28]
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	61e3      	str	r3, [r4, #28]
 8003f08:	69e3      	ldr	r3, [r4, #28]
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4e2f      	ldr	r6, [pc, #188]	; (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	05d9      	lsls	r1, r3, #23
 8003f18:	d518      	bpl.n	8003f4c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1a:	68eb      	ldr	r3, [r5, #12]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d126      	bne.n	8003f6e <HAL_RCC_OscConfig+0x21e>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003f28:	f7fe fef6 	bl	8002d18 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	6a23      	ldr	r3, [r4, #32]
 8003f34:	079b      	lsls	r3, r3, #30
 8003f36:	d53f      	bpl.n	8003fb8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003f38:	2f00      	cmp	r7, #0
 8003f3a:	f43f af1b 	beq.w	8003d74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	69e3      	ldr	r3, [r4, #28]
 8003f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f44:	61e3      	str	r3, [r4, #28]
 8003f46:	e715      	b.n	8003d74 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2700      	movs	r7, #0
 8003f4a:	e7e2      	b.n	8003f12 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f54:	f7fe fee0 	bl	8002d18 <HAL_GetTick>
 8003f58:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	6833      	ldr	r3, [r6, #0]
 8003f5c:	05da      	lsls	r2, r3, #23
 8003f5e:	d4dc      	bmi.n	8003f1a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fe feda 	bl	8002d18 <HAL_GetTick>
 8003f64:	eba0 0008 	sub.w	r0, r0, r8
 8003f68:	2864      	cmp	r0, #100	; 0x64
 8003f6a:	d9f6      	bls.n	8003f5a <HAL_RCC_OscConfig+0x20a>
 8003f6c:	e731      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6e:	b9ab      	cbnz	r3, 8003f9c <HAL_RCC_OscConfig+0x24c>
 8003f70:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	6223      	str	r3, [r4, #32]
 8003f7c:	6a23      	ldr	r3, [r4, #32]
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003f84:	f7fe fec8 	bl	8002d18 <HAL_GetTick>
 8003f88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	6a23      	ldr	r3, [r4, #32]
 8003f8c:	0798      	lsls	r0, r3, #30
 8003f8e:	d5d3      	bpl.n	8003f38 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fe fec2 	bl	8002d18 <HAL_GetTick>
 8003f94:	1b80      	subs	r0, r0, r6
 8003f96:	4540      	cmp	r0, r8
 8003f98:	d9f7      	bls.n	8003f8a <HAL_RCC_OscConfig+0x23a>
 8003f9a:	e71a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	6a23      	ldr	r3, [r4, #32]
 8003fa0:	d103      	bne.n	8003faa <HAL_RCC_OscConfig+0x25a>
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6223      	str	r3, [r4, #32]
 8003fa8:	e7ba      	b.n	8003f20 <HAL_RCC_OscConfig+0x1d0>
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6223      	str	r3, [r4, #32]
 8003fb0:	6a23      	ldr	r3, [r4, #32]
 8003fb2:	f023 0304 	bic.w	r3, r3, #4
 8003fb6:	e7b6      	b.n	8003f26 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe feae 	bl	8002d18 <HAL_GetTick>
 8003fbc:	1b80      	subs	r0, r0, r6
 8003fbe:	4540      	cmp	r0, r8
 8003fc0:	d9b7      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1e2>
 8003fc2:	e706      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	42420000 	.word	0x42420000
 8003fcc:	20000008 	.word	0x20000008
 8003fd0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd4:	4c2a      	ldr	r4, [pc, #168]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d03e      	beq.n	800405e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4b28      	ldr	r3, [pc, #160]	; (8004084 <HAL_RCC_OscConfig+0x334>)
 8003fe4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	d12c      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003fea:	f7fe fe95 	bl	8002d18 <HAL_GetTick>
 8003fee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	0199      	lsls	r1, r3, #6
 8003ff4:	d420      	bmi.n	8004038 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ff6:	6a2b      	ldr	r3, [r5, #32]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	68a9      	ldr	r1, [r5, #8]
 8004002:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004006:	430a      	orrs	r2, r1
 8004008:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800400c:	6862      	ldr	r2, [r4, #4]
 800400e:	430b      	orrs	r3, r1
 8004010:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004014:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004016:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004018:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_RCC_OscConfig+0x334>)
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800401e:	f7fe fe7b 	bl	8002d18 <HAL_GetTick>
 8004022:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	f53f aea8 	bmi.w	8003d7c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe fe74 	bl	8002d18 <HAL_GetTick>
 8004030:	1b40      	subs	r0, r0, r5
 8004032:	2802      	cmp	r0, #2
 8004034:	d9f6      	bls.n	8004024 <HAL_RCC_OscConfig+0x2d4>
 8004036:	e6cc      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe fe6e 	bl	8002d18 <HAL_GetTick>
 800403c:	1b80      	subs	r0, r0, r6
 800403e:	2802      	cmp	r0, #2
 8004040:	d9d6      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2a0>
 8004042:	e6c6      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004044:	f7fe fe68 	bl	8002d18 <HAL_GetTick>
 8004048:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	f57f ae95 	bpl.w	8003d7c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004052:	f7fe fe61 	bl	8002d18 <HAL_GetTick>
 8004056:	1b40      	subs	r0, r0, r5
 8004058:	2802      	cmp	r0, #2
 800405a:	d9f6      	bls.n	800404a <HAL_RCC_OscConfig+0x2fa>
 800405c:	e6b9      	b.n	8003dd2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405e:	2801      	cmp	r0, #1
 8004060:	f43f aeb8 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004064:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	6a2a      	ldr	r2, [r5, #32]
 8004068:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800406c:	4291      	cmp	r1, r2
 800406e:	f47f ae9b 	bne.w	8003da8 <HAL_RCC_OscConfig+0x58>
 8004072:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	4293      	cmp	r3, r2
 800407a:	f43f ae7f 	beq.w	8003d7c <HAL_RCC_OscConfig+0x2c>
 800407e:	e693      	b.n	8003da8 <HAL_RCC_OscConfig+0x58>
 8004080:	40021000 	.word	0x40021000
 8004084:	42420000 	.word	0x42420000

08004088 <HAL_RCC_GetSysClockFreq>:
{
 8004088:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_RCC_GetSysClockFreq+0x64>)
{
 800408c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800408e:	ac02      	add	r4, sp, #8
 8004090:	f103 0510 	add.w	r5, r3, #16
 8004094:	4622      	mov	r2, r4
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	6859      	ldr	r1, [r3, #4]
 800409a:	3308      	adds	r3, #8
 800409c:	c203      	stmia	r2!, {r0, r1}
 800409e:	42ab      	cmp	r3, r5
 80040a0:	4614      	mov	r4, r2
 80040a2:	d1f7      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040a4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80040a8:	4911      	ldr	r1, [pc, #68]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80040ae:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80040b0:	f003 020c 	and.w	r2, r3, #12
 80040b4:	2a08      	cmp	r2, #8
 80040b6:	d117      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80040bc:	3218      	adds	r2, #24
 80040be:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040c0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040c6:	d50c      	bpl.n	80040e2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040c8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040d0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040d2:	3318      	adds	r3, #24
 80040d4:	446b      	add	r3, sp
 80040d6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040da:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80040de:	b007      	add	sp, #28
 80040e0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x70>)
 80040e4:	4358      	muls	r0, r3
 80040e6:	e7fa      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80040e8:	4802      	ldr	r0, [pc, #8]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80040ea:	e7f8      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x56>
 80040ec:	0801a6b4 	.word	0x0801a6b4
 80040f0:	40021000 	.word	0x40021000
 80040f4:	007a1200 	.word	0x007a1200
 80040f8:	003d0900 	.word	0x003d0900

080040fc <HAL_RCC_ClockConfig>:
{
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004102:	4604      	mov	r4, r0
 8004104:	b910      	cbnz	r0, 800410c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004106:	2001      	movs	r0, #1
}
 8004108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4a44      	ldr	r2, [pc, #272]	; (8004220 <HAL_RCC_ClockConfig+0x124>)
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	428b      	cmp	r3, r1
 8004116:	d328      	bcc.n	800416a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	6821      	ldr	r1, [r4, #0]
 800411a:	078e      	lsls	r6, r1, #30
 800411c:	d430      	bmi.n	8004180 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	07ca      	lsls	r2, r1, #31
 8004120:	d443      	bmi.n	80041aa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004122:	4a3f      	ldr	r2, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x124>)
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	42ab      	cmp	r3, r5
 800412c:	d865      	bhi.n	80041fa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	4d3c      	ldr	r5, [pc, #240]	; (8004224 <HAL_RCC_ClockConfig+0x128>)
 8004132:	f012 0f04 	tst.w	r2, #4
 8004136:	d16c      	bne.n	8004212 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	0713      	lsls	r3, r2, #28
 800413a:	d506      	bpl.n	800414a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800413c:	686b      	ldr	r3, [r5, #4]
 800413e:	6922      	ldr	r2, [r4, #16]
 8004140:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004148:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414a:	f7ff ff9d 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 800414e:	686b      	ldr	r3, [r5, #4]
 8004150:	4a35      	ldr	r2, [pc, #212]	; (8004228 <HAL_RCC_ClockConfig+0x12c>)
 8004152:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	40d8      	lsrs	r0, r3
 800415a:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCC_ClockConfig+0x130>)
 800415c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x134>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f7fe fd97 	bl	8002c94 <HAL_InitTick>
  return HAL_OK;
 8004166:	2000      	movs	r0, #0
 8004168:	e7ce      	b.n	8004108 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	f023 0307 	bic.w	r3, r3, #7
 8004170:	430b      	orrs	r3, r1
 8004172:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	428b      	cmp	r3, r1
 800417c:	d1c3      	bne.n	8004106 <HAL_RCC_ClockConfig+0xa>
 800417e:	e7cb      	b.n	8004118 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_RCC_ClockConfig+0x128>)
 8004182:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004186:	bf1e      	ittt	ne
 8004188:	685a      	ldrne	r2, [r3, #4]
 800418a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800418e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004192:	bf42      	ittt	mi
 8004194:	685a      	ldrmi	r2, [r3, #4]
 8004196:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800419a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68a0      	ldr	r0, [r4, #8]
 80041a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041a4:	4302      	orrs	r2, r0
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	e7b9      	b.n	800411e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	4e1d      	ldr	r6, [pc, #116]	; (8004224 <HAL_RCC_ClockConfig+0x128>)
 80041ae:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	d11a      	bne.n	80041ea <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b8:	d0a5      	beq.n	8004106 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ba:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c0:	f023 0303 	bic.w	r3, r3, #3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80041c8:	f7fe fda6 	bl	8002d18 <HAL_GetTick>
 80041cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	6873      	ldr	r3, [r6, #4]
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80041da:	d0a2      	beq.n	8004122 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fd9c 	bl	8002d18 <HAL_GetTick>
 80041e0:	1bc0      	subs	r0, r0, r7
 80041e2:	4540      	cmp	r0, r8
 80041e4:	d9f3      	bls.n	80041ce <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80041e6:	2003      	movs	r0, #3
 80041e8:	e78e      	b.n	8004108 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	2a02      	cmp	r2, #2
 80041ec:	d102      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041f2:	e7e1      	b.n	80041b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	f013 0f02 	tst.w	r3, #2
 80041f8:	e7de      	b.n	80041b8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	432b      	orrs	r3, r5
 8004202:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	42ab      	cmp	r3, r5
 800420c:	f47f af7b 	bne.w	8004106 <HAL_RCC_ClockConfig+0xa>
 8004210:	e78d      	b.n	800412e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004212:	686b      	ldr	r3, [r5, #4]
 8004214:	68e1      	ldr	r1, [r4, #12]
 8004216:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800421a:	430b      	orrs	r3, r1
 800421c:	606b      	str	r3, [r5, #4]
 800421e:	e78b      	b.n	8004138 <HAL_RCC_ClockConfig+0x3c>
 8004220:	40022000 	.word	0x40022000
 8004224:	40021000 	.word	0x40021000
 8004228:	0801a69c 	.word	0x0801a69c
 800422c:	20000008 	.word	0x20000008
 8004230:	20000010 	.word	0x20000010

08004234 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	4a03      	ldr	r2, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004242:	6810      	ldr	r0, [r2, #0]
}
 8004244:	40d8      	lsrs	r0, r3
 8004246:	4770      	bx	lr
 8004248:	40021000 	.word	0x40021000
 800424c:	0801a6ac 	.word	0x0801a6ac
 8004250:	20000008 	.word	0x20000008

08004254 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	4a03      	ldr	r2, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004262:	6810      	ldr	r0, [r2, #0]
}
 8004264:	40d8      	lsrs	r0, r3
 8004266:	4770      	bx	lr
 8004268:	40021000 	.word	0x40021000
 800426c:	0801a6ac 	.word	0x0801a6ac
 8004270:	20000008 	.word	0x20000008

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	b510      	push	{r4, lr}
 8004276:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	68c1      	ldr	r1, [r0, #12]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004286:	6882      	ldr	r2, [r0, #8]
 8004288:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800428a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800428c:	4302      	orrs	r2, r0
 800428e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004290:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004294:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004298:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800429a:	430a      	orrs	r2, r1
 800429c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	69a1      	ldr	r1, [r4, #24]
 80042a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042a6:	430a      	orrs	r2, r1
 80042a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <UART_SetConfig+0x70>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d115      	bne.n	80042dc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7ff ffd0 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b4:	2319      	movs	r3, #25
 80042b6:	4343      	muls	r3, r0
 80042b8:	6862      	ldr	r2, [r4, #4]
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c2:	2264      	movs	r2, #100	; 0x64
 80042c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042c8:	fb02 3311 	mls	r3, r2, r1, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80042d8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80042da:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80042dc:	f7ff ffaa 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80042e0:	e7e8      	b.n	80042b4 <UART_SetConfig+0x40>
 80042e2:	bf00      	nop
 80042e4:	40013800 	.word	0x40013800

080042e8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	4604      	mov	r4, r0
 80042ec:	460e      	mov	r6, r1
 80042ee:	4617      	mov	r7, r2
 80042f0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	6813      	ldr	r3, [r2, #0]
 80042f6:	ea36 0303 	bics.w	r3, r6, r3
 80042fa:	d101      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80042fc:	2000      	movs	r0, #0
 80042fe:	e014      	b.n	800432a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8004300:	1c6b      	adds	r3, r5, #1
 8004302:	d0f7      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004304:	b995      	cbnz	r5, 800432c <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004306:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004308:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004310:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800431a:	2320      	movs	r3, #32
 800431c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004320:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004324:	2300      	movs	r3, #0
 8004326:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800432c:	f7fe fcf4 	bl	8002d18 <HAL_GetTick>
 8004330:	1bc0      	subs	r0, r0, r7
 8004332:	4285      	cmp	r5, r0
 8004334:	d2dd      	bcs.n	80042f2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8004336:	e7e6      	b.n	8004306 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08004338 <HAL_UART_Init>:
{
 8004338:	b510      	push	{r4, lr}
  if (huart == NULL)
 800433a:	4604      	mov	r4, r0
 800433c:	b340      	cbz	r0, 8004390 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800433e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004342:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004346:	b91b      	cbnz	r3, 8004350 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004348:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800434c:	f7fe fbde 	bl	8002b0c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004350:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004352:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004354:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004358:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800435a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800435c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004360:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004362:	f7ff ff87 	bl	8004274 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004366:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004378:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004380:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004382:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800438e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004390:	2001      	movs	r0, #1
 8004392:	e7fc      	b.n	800438e <HAL_UART_Init+0x56>

08004394 <HAL_UART_Transmit>:
{
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800439a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800439e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	2b20      	cmp	r3, #32
{
 80043a2:	460e      	mov	r6, r1
 80043a4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80043a6:	d148      	bne.n	800443a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d044      	beq.n	8004436 <HAL_UART_Transmit+0xa2>
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	d042      	beq.n	8004436 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80043b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d040      	beq.n	800443a <HAL_UART_Transmit+0xa6>
 80043b8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80043bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80043c8:	f7fe fca6 	bl	8002d18 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80043ce:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80043d4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	d103      	bne.n	80043e2 <HAL_UART_Transmit+0x4e>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	b90b      	cbnz	r3, 80043e2 <HAL_UART_Transmit+0x4e>
 80043de:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80043e0:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80043e2:	2300      	movs	r3, #0
 80043e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80043e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b953      	cbnz	r3, 8004404 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	464b      	mov	r3, r9
 80043f0:	4642      	mov	r2, r8
 80043f2:	2140      	movs	r1, #64	; 0x40
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7ff ff77 	bl	80042e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80043fa:	b950      	cbnz	r0, 8004412 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80043fc:	2320      	movs	r3, #32
 80043fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004402:	e007      	b.n	8004414 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004404:	464b      	mov	r3, r9
 8004406:	4642      	mov	r2, r8
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff ff6c 	bl	80042e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004410:	b110      	cbz	r0, 8004418 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004412:	2003      	movs	r0, #3
}
 8004414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004418:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800441a:	b94e      	cbnz	r6, 8004430 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800441c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004420:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004424:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004426:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004428:	3901      	subs	r1, #1
 800442a:	b289      	uxth	r1, r1
 800442c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800442e:	e7db      	b.n	80043e8 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004430:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004434:	e7f6      	b.n	8004424 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8004436:	2001      	movs	r0, #1
 8004438:	e7ec      	b.n	8004414 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800443a:	2002      	movs	r0, #2
 800443c:	e7ea      	b.n	8004414 <HAL_UART_Transmit+0x80>
	...

08004440 <__errno>:
 8004440:	4b01      	ldr	r3, [pc, #4]	; (8004448 <__errno+0x8>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000014 	.word	0x20000014

0800444c <__libc_init_array>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	2600      	movs	r6, #0
 8004450:	4d0c      	ldr	r5, [pc, #48]	; (8004484 <__libc_init_array+0x38>)
 8004452:	4c0d      	ldr	r4, [pc, #52]	; (8004488 <__libc_init_array+0x3c>)
 8004454:	1b64      	subs	r4, r4, r5
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	42a6      	cmp	r6, r4
 800445a:	d109      	bne.n	8004470 <__libc_init_array+0x24>
 800445c:	f005 fc3e 	bl	8009cdc <_init>
 8004460:	2600      	movs	r6, #0
 8004462:	4d0a      	ldr	r5, [pc, #40]	; (800448c <__libc_init_array+0x40>)
 8004464:	4c0a      	ldr	r4, [pc, #40]	; (8004490 <__libc_init_array+0x44>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	42a6      	cmp	r6, r4
 800446c:	d105      	bne.n	800447a <__libc_init_array+0x2e>
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	f855 3b04 	ldr.w	r3, [r5], #4
 8004474:	4798      	blx	r3
 8004476:	3601      	adds	r6, #1
 8004478:	e7ee      	b.n	8004458 <__libc_init_array+0xc>
 800447a:	f855 3b04 	ldr.w	r3, [r5], #4
 800447e:	4798      	blx	r3
 8004480:	3601      	adds	r6, #1
 8004482:	e7f2      	b.n	800446a <__libc_init_array+0x1e>
 8004484:	0801abd4 	.word	0x0801abd4
 8004488:	0801abd4 	.word	0x0801abd4
 800448c:	0801abd4 	.word	0x0801abd4
 8004490:	0801abd8 	.word	0x0801abd8

08004494 <memmove>:
 8004494:	4288      	cmp	r0, r1
 8004496:	b510      	push	{r4, lr}
 8004498:	eb01 0402 	add.w	r4, r1, r2
 800449c:	d902      	bls.n	80044a4 <memmove+0x10>
 800449e:	4284      	cmp	r4, r0
 80044a0:	4623      	mov	r3, r4
 80044a2:	d807      	bhi.n	80044b4 <memmove+0x20>
 80044a4:	1e43      	subs	r3, r0, #1
 80044a6:	42a1      	cmp	r1, r4
 80044a8:	d008      	beq.n	80044bc <memmove+0x28>
 80044aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b2:	e7f8      	b.n	80044a6 <memmove+0x12>
 80044b4:	4601      	mov	r1, r0
 80044b6:	4402      	add	r2, r0
 80044b8:	428a      	cmp	r2, r1
 80044ba:	d100      	bne.n	80044be <memmove+0x2a>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c6:	e7f7      	b.n	80044b8 <memmove+0x24>

080044c8 <memset>:
 80044c8:	4603      	mov	r3, r0
 80044ca:	4402      	add	r2, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <__cvt>:
 80044d8:	2b00      	cmp	r3, #0
 80044da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044de:	461f      	mov	r7, r3
 80044e0:	bfbb      	ittet	lt
 80044e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	461f      	movlt	r7, r3
 80044e8:	2300      	movge	r3, #0
 80044ea:	232d      	movlt	r3, #45	; 0x2d
 80044ec:	b088      	sub	sp, #32
 80044ee:	4614      	mov	r4, r2
 80044f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044fc:	f023 0820 	bic.w	r8, r3, #32
 8004500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004504:	d005      	beq.n	8004512 <__cvt+0x3a>
 8004506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800450a:	d100      	bne.n	800450e <__cvt+0x36>
 800450c:	3501      	adds	r5, #1
 800450e:	2302      	movs	r3, #2
 8004510:	e000      	b.n	8004514 <__cvt+0x3c>
 8004512:	2303      	movs	r3, #3
 8004514:	aa07      	add	r2, sp, #28
 8004516:	9204      	str	r2, [sp, #16]
 8004518:	aa06      	add	r2, sp, #24
 800451a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800451e:	e9cd 3500 	strd	r3, r5, [sp]
 8004522:	4622      	mov	r2, r4
 8004524:	463b      	mov	r3, r7
 8004526:	f001 fd83 	bl	8006030 <_dtoa_r>
 800452a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800452e:	4606      	mov	r6, r0
 8004530:	d102      	bne.n	8004538 <__cvt+0x60>
 8004532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004534:	07db      	lsls	r3, r3, #31
 8004536:	d522      	bpl.n	800457e <__cvt+0xa6>
 8004538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800453c:	eb06 0905 	add.w	r9, r6, r5
 8004540:	d110      	bne.n	8004564 <__cvt+0x8c>
 8004542:	7833      	ldrb	r3, [r6, #0]
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d10a      	bne.n	800455e <__cvt+0x86>
 8004548:	2200      	movs	r2, #0
 800454a:	2300      	movs	r3, #0
 800454c:	4620      	mov	r0, r4
 800454e:	4639      	mov	r1, r7
 8004550:	f7fc fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 8004554:	b918      	cbnz	r0, 800455e <__cvt+0x86>
 8004556:	f1c5 0501 	rsb	r5, r5, #1
 800455a:	f8ca 5000 	str.w	r5, [sl]
 800455e:	f8da 3000 	ldr.w	r3, [sl]
 8004562:	4499      	add	r9, r3
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	4620      	mov	r0, r4
 800456a:	4639      	mov	r1, r7
 800456c:	f7fc fa1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004570:	b108      	cbz	r0, 8004576 <__cvt+0x9e>
 8004572:	f8cd 901c 	str.w	r9, [sp, #28]
 8004576:	2230      	movs	r2, #48	; 0x30
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	454b      	cmp	r3, r9
 800457c:	d307      	bcc.n	800458e <__cvt+0xb6>
 800457e:	4630      	mov	r0, r6
 8004580:	9b07      	ldr	r3, [sp, #28]
 8004582:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004584:	1b9b      	subs	r3, r3, r6
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	b008      	add	sp, #32
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	9107      	str	r1, [sp, #28]
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e7f0      	b.n	8004578 <__cvt+0xa0>

08004596 <__exponent>:
 8004596:	4603      	mov	r3, r0
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459a:	2900      	cmp	r1, #0
 800459c:	f803 2b02 	strb.w	r2, [r3], #2
 80045a0:	bfb6      	itet	lt
 80045a2:	222d      	movlt	r2, #45	; 0x2d
 80045a4:	222b      	movge	r2, #43	; 0x2b
 80045a6:	4249      	neglt	r1, r1
 80045a8:	2909      	cmp	r1, #9
 80045aa:	7042      	strb	r2, [r0, #1]
 80045ac:	dd2b      	ble.n	8004606 <__exponent+0x70>
 80045ae:	f10d 0407 	add.w	r4, sp, #7
 80045b2:	46a4      	mov	ip, r4
 80045b4:	270a      	movs	r7, #10
 80045b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045ba:	460a      	mov	r2, r1
 80045bc:	46a6      	mov	lr, r4
 80045be:	fb07 1516 	mls	r5, r7, r6, r1
 80045c2:	2a63      	cmp	r2, #99	; 0x63
 80045c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80045c8:	4631      	mov	r1, r6
 80045ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80045ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045d2:	dcf0      	bgt.n	80045b6 <__exponent+0x20>
 80045d4:	3130      	adds	r1, #48	; 0x30
 80045d6:	f1ae 0502 	sub.w	r5, lr, #2
 80045da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045de:	4629      	mov	r1, r5
 80045e0:	1c44      	adds	r4, r0, #1
 80045e2:	4561      	cmp	r1, ip
 80045e4:	d30a      	bcc.n	80045fc <__exponent+0x66>
 80045e6:	f10d 0209 	add.w	r2, sp, #9
 80045ea:	eba2 020e 	sub.w	r2, r2, lr
 80045ee:	4565      	cmp	r5, ip
 80045f0:	bf88      	it	hi
 80045f2:	2200      	movhi	r2, #0
 80045f4:	4413      	add	r3, r2
 80045f6:	1a18      	subs	r0, r3, r0
 80045f8:	b003      	add	sp, #12
 80045fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004600:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004604:	e7ed      	b.n	80045e2 <__exponent+0x4c>
 8004606:	2330      	movs	r3, #48	; 0x30
 8004608:	3130      	adds	r1, #48	; 0x30
 800460a:	7083      	strb	r3, [r0, #2]
 800460c:	70c1      	strb	r1, [r0, #3]
 800460e:	1d03      	adds	r3, r0, #4
 8004610:	e7f1      	b.n	80045f6 <__exponent+0x60>
	...

08004614 <_printf_float>:
 8004614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	b091      	sub	sp, #68	; 0x44
 800461a:	460c      	mov	r4, r1
 800461c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004620:	4616      	mov	r6, r2
 8004622:	461f      	mov	r7, r3
 8004624:	4605      	mov	r5, r0
 8004626:	f002 fe57 	bl	80072d8 <_localeconv_r>
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	9309      	str	r3, [sp, #36]	; 0x24
 8004630:	f7fb fd8e 	bl	8000150 <strlen>
 8004634:	2300      	movs	r3, #0
 8004636:	930e      	str	r3, [sp, #56]	; 0x38
 8004638:	f8d8 3000 	ldr.w	r3, [r8]
 800463c:	900a      	str	r0, [sp, #40]	; 0x28
 800463e:	3307      	adds	r3, #7
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	f103 0208 	add.w	r2, r3, #8
 8004648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800464c:	f8d4 b000 	ldr.w	fp, [r4]
 8004650:	f8c8 2000 	str.w	r2, [r8]
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800465c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004660:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004664:	930b      	str	r3, [sp, #44]	; 0x2c
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	4640      	mov	r0, r8
 800466c:	4b9c      	ldr	r3, [pc, #624]	; (80048e0 <_printf_float+0x2cc>)
 800466e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004670:	f7fc f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8004674:	bb70      	cbnz	r0, 80046d4 <_printf_float+0xc0>
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	4640      	mov	r0, r8
 800467c:	4b98      	ldr	r3, [pc, #608]	; (80048e0 <_printf_float+0x2cc>)
 800467e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004680:	f7fc f9a6 	bl	80009d0 <__aeabi_dcmple>
 8004684:	bb30      	cbnz	r0, 80046d4 <_printf_float+0xc0>
 8004686:	2200      	movs	r2, #0
 8004688:	2300      	movs	r3, #0
 800468a:	4640      	mov	r0, r8
 800468c:	4651      	mov	r1, sl
 800468e:	f7fc f995 	bl	80009bc <__aeabi_dcmplt>
 8004692:	b110      	cbz	r0, 800469a <_printf_float+0x86>
 8004694:	232d      	movs	r3, #45	; 0x2d
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469a:	4b92      	ldr	r3, [pc, #584]	; (80048e4 <_printf_float+0x2d0>)
 800469c:	4892      	ldr	r0, [pc, #584]	; (80048e8 <_printf_float+0x2d4>)
 800469e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046a2:	bf94      	ite	ls
 80046a4:	4698      	movls	r8, r3
 80046a6:	4680      	movhi	r8, r0
 80046a8:	2303      	movs	r3, #3
 80046aa:	f04f 0a00 	mov.w	sl, #0
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	f02b 0304 	bic.w	r3, fp, #4
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	4633      	mov	r3, r6
 80046b8:	4621      	mov	r1, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	9700      	str	r7, [sp, #0]
 80046be:	aa0f      	add	r2, sp, #60	; 0x3c
 80046c0:	f000 f9d4 	bl	8004a6c <_printf_common>
 80046c4:	3001      	adds	r0, #1
 80046c6:	f040 8090 	bne.w	80047ea <_printf_float+0x1d6>
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	b011      	add	sp, #68	; 0x44
 80046d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d4:	4642      	mov	r2, r8
 80046d6:	4653      	mov	r3, sl
 80046d8:	4640      	mov	r0, r8
 80046da:	4651      	mov	r1, sl
 80046dc:	f7fc f996 	bl	8000a0c <__aeabi_dcmpun>
 80046e0:	b148      	cbz	r0, 80046f6 <_printf_float+0xe2>
 80046e2:	f1ba 0f00 	cmp.w	sl, #0
 80046e6:	bfb8      	it	lt
 80046e8:	232d      	movlt	r3, #45	; 0x2d
 80046ea:	4880      	ldr	r0, [pc, #512]	; (80048ec <_printf_float+0x2d8>)
 80046ec:	bfb8      	it	lt
 80046ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046f2:	4b7f      	ldr	r3, [pc, #508]	; (80048f0 <_printf_float+0x2dc>)
 80046f4:	e7d3      	b.n	800469e <_printf_float+0x8a>
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	d142      	bne.n	8004786 <_printf_float+0x172>
 8004700:	2306      	movs	r3, #6
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	9206      	str	r2, [sp, #24]
 8004708:	aa0e      	add	r2, sp, #56	; 0x38
 800470a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800470e:	aa0d      	add	r2, sp, #52	; 0x34
 8004710:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004714:	9203      	str	r2, [sp, #12]
 8004716:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800471a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	4642      	mov	r2, r8
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	4628      	mov	r0, r5
 8004728:	4653      	mov	r3, sl
 800472a:	910b      	str	r1, [sp, #44]	; 0x2c
 800472c:	f7ff fed4 	bl	80044d8 <__cvt>
 8004730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004732:	4680      	mov	r8, r0
 8004734:	2947      	cmp	r1, #71	; 0x47
 8004736:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004738:	d108      	bne.n	800474c <_printf_float+0x138>
 800473a:	1cc8      	adds	r0, r1, #3
 800473c:	db02      	blt.n	8004744 <_printf_float+0x130>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	4299      	cmp	r1, r3
 8004742:	dd40      	ble.n	80047c6 <_printf_float+0x1b2>
 8004744:	f1a9 0902 	sub.w	r9, r9, #2
 8004748:	fa5f f989 	uxtb.w	r9, r9
 800474c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004750:	d81f      	bhi.n	8004792 <_printf_float+0x17e>
 8004752:	464a      	mov	r2, r9
 8004754:	3901      	subs	r1, #1
 8004756:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800475a:	910d      	str	r1, [sp, #52]	; 0x34
 800475c:	f7ff ff1b 	bl	8004596 <__exponent>
 8004760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004762:	4682      	mov	sl, r0
 8004764:	1813      	adds	r3, r2, r0
 8004766:	2a01      	cmp	r2, #1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	dc02      	bgt.n	8004772 <_printf_float+0x15e>
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	07d2      	lsls	r2, r2, #31
 8004770:	d501      	bpl.n	8004776 <_printf_float+0x162>
 8004772:	3301      	adds	r3, #1
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800477a:	2b00      	cmp	r3, #0
 800477c:	d09b      	beq.n	80046b6 <_printf_float+0xa2>
 800477e:	232d      	movs	r3, #45	; 0x2d
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004784:	e797      	b.n	80046b6 <_printf_float+0xa2>
 8004786:	2947      	cmp	r1, #71	; 0x47
 8004788:	d1bc      	bne.n	8004704 <_printf_float+0xf0>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ba      	bne.n	8004704 <_printf_float+0xf0>
 800478e:	2301      	movs	r3, #1
 8004790:	e7b7      	b.n	8004702 <_printf_float+0xee>
 8004792:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004796:	d118      	bne.n	80047ca <_printf_float+0x1b6>
 8004798:	2900      	cmp	r1, #0
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	dd0b      	ble.n	80047b6 <_printf_float+0x1a2>
 800479e:	6121      	str	r1, [r4, #16]
 80047a0:	b913      	cbnz	r3, 80047a8 <_printf_float+0x194>
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	07d0      	lsls	r0, r2, #31
 80047a6:	d502      	bpl.n	80047ae <_printf_float+0x19a>
 80047a8:	3301      	adds	r3, #1
 80047aa:	440b      	add	r3, r1
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	f04f 0a00 	mov.w	sl, #0
 80047b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047b4:	e7df      	b.n	8004776 <_printf_float+0x162>
 80047b6:	b913      	cbnz	r3, 80047be <_printf_float+0x1aa>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	07d2      	lsls	r2, r2, #31
 80047bc:	d501      	bpl.n	80047c2 <_printf_float+0x1ae>
 80047be:	3302      	adds	r3, #2
 80047c0:	e7f4      	b.n	80047ac <_printf_float+0x198>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e7f2      	b.n	80047ac <_printf_float+0x198>
 80047c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80047ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047cc:	4299      	cmp	r1, r3
 80047ce:	db05      	blt.n	80047dc <_printf_float+0x1c8>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	6121      	str	r1, [r4, #16]
 80047d4:	07d8      	lsls	r0, r3, #31
 80047d6:	d5ea      	bpl.n	80047ae <_printf_float+0x19a>
 80047d8:	1c4b      	adds	r3, r1, #1
 80047da:	e7e7      	b.n	80047ac <_printf_float+0x198>
 80047dc:	2900      	cmp	r1, #0
 80047de:	bfcc      	ite	gt
 80047e0:	2201      	movgt	r2, #1
 80047e2:	f1c1 0202 	rsble	r2, r1, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	e7e0      	b.n	80047ac <_printf_float+0x198>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	055a      	lsls	r2, r3, #21
 80047ee:	d407      	bmi.n	8004800 <_printf_float+0x1ec>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	4642      	mov	r2, r8
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d12b      	bne.n	8004856 <_printf_float+0x242>
 80047fe:	e764      	b.n	80046ca <_printf_float+0xb6>
 8004800:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004804:	f240 80dd 	bls.w	80049c2 <_printf_float+0x3ae>
 8004808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	f7fc f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8004814:	2800      	cmp	r0, #0
 8004816:	d033      	beq.n	8004880 <_printf_float+0x26c>
 8004818:	2301      	movs	r3, #1
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	4a35      	ldr	r2, [pc, #212]	; (80048f4 <_printf_float+0x2e0>)
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f af51 	beq.w	80046ca <_printf_float+0xb6>
 8004828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800482c:	429a      	cmp	r2, r3
 800482e:	db02      	blt.n	8004836 <_printf_float+0x222>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07d8      	lsls	r0, r3, #31
 8004834:	d50f      	bpl.n	8004856 <_printf_float+0x242>
 8004836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	f43f af42 	beq.w	80046ca <_printf_float+0xb6>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	f104 091a 	add.w	r9, r4, #26
 800484e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004850:	3b01      	subs	r3, #1
 8004852:	4543      	cmp	r3, r8
 8004854:	dc09      	bgt.n	800486a <_printf_float+0x256>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	f100 8102 	bmi.w	8004a62 <_printf_float+0x44e>
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004862:	4298      	cmp	r0, r3
 8004864:	bfb8      	it	lt
 8004866:	4618      	movlt	r0, r3
 8004868:	e731      	b.n	80046ce <_printf_float+0xba>
 800486a:	2301      	movs	r3, #1
 800486c:	464a      	mov	r2, r9
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f af28 	beq.w	80046ca <_printf_float+0xb6>
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	e7e6      	b.n	800484e <_printf_float+0x23a>
 8004880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004882:	2b00      	cmp	r3, #0
 8004884:	dc38      	bgt.n	80048f8 <_printf_float+0x2e4>
 8004886:	2301      	movs	r3, #1
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <_printf_float+0x2e0>)
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f af1a 	beq.w	80046ca <_printf_float+0xb6>
 8004896:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800489a:	4313      	orrs	r3, r2
 800489c:	d102      	bne.n	80048a4 <_printf_float+0x290>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	07d9      	lsls	r1, r3, #31
 80048a2:	d5d8      	bpl.n	8004856 <_printf_float+0x242>
 80048a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	f43f af0b 	beq.w	80046ca <_printf_float+0xb6>
 80048b4:	f04f 0900 	mov.w	r9, #0
 80048b8:	f104 0a1a 	add.w	sl, r4, #26
 80048bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048be:	425b      	negs	r3, r3
 80048c0:	454b      	cmp	r3, r9
 80048c2:	dc01      	bgt.n	80048c8 <_printf_float+0x2b4>
 80048c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c6:	e794      	b.n	80047f2 <_printf_float+0x1de>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4652      	mov	r2, sl
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f aef9 	beq.w	80046ca <_printf_float+0xb6>
 80048d8:	f109 0901 	add.w	r9, r9, #1
 80048dc:	e7ee      	b.n	80048bc <_printf_float+0x2a8>
 80048de:	bf00      	nop
 80048e0:	7fefffff 	.word	0x7fefffff
 80048e4:	0801a6cc 	.word	0x0801a6cc
 80048e8:	0801a6d0 	.word	0x0801a6d0
 80048ec:	0801a6d8 	.word	0x0801a6d8
 80048f0:	0801a6d4 	.word	0x0801a6d4
 80048f4:	0801a6dc 	.word	0x0801a6dc
 80048f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bfa8      	it	ge
 8004900:	461a      	movge	r2, r3
 8004902:	2a00      	cmp	r2, #0
 8004904:	4691      	mov	r9, r2
 8004906:	dc37      	bgt.n	8004978 <_printf_float+0x364>
 8004908:	f04f 0b00 	mov.w	fp, #0
 800490c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004910:	f104 021a 	add.w	r2, r4, #26
 8004914:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004918:	ebaa 0309 	sub.w	r3, sl, r9
 800491c:	455b      	cmp	r3, fp
 800491e:	dc33      	bgt.n	8004988 <_printf_float+0x374>
 8004920:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004924:	429a      	cmp	r2, r3
 8004926:	db3b      	blt.n	80049a0 <_printf_float+0x38c>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	07da      	lsls	r2, r3, #31
 800492c:	d438      	bmi.n	80049a0 <_printf_float+0x38c>
 800492e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004930:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004932:	eba3 020a 	sub.w	r2, r3, sl
 8004936:	eba3 0901 	sub.w	r9, r3, r1
 800493a:	4591      	cmp	r9, r2
 800493c:	bfa8      	it	ge
 800493e:	4691      	movge	r9, r2
 8004940:	f1b9 0f00 	cmp.w	r9, #0
 8004944:	dc34      	bgt.n	80049b0 <_printf_float+0x39c>
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494e:	f104 0a1a 	add.w	sl, r4, #26
 8004952:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	eba3 0309 	sub.w	r3, r3, r9
 800495c:	4543      	cmp	r3, r8
 800495e:	f77f af7a 	ble.w	8004856 <_printf_float+0x242>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	f43f aeac 	beq.w	80046ca <_printf_float+0xb6>
 8004972:	f108 0801 	add.w	r8, r8, #1
 8004976:	e7ec      	b.n	8004952 <_printf_float+0x33e>
 8004978:	4613      	mov	r3, r2
 800497a:	4631      	mov	r1, r6
 800497c:	4642      	mov	r2, r8
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	d1c0      	bne.n	8004908 <_printf_float+0x2f4>
 8004986:	e6a0      	b.n	80046ca <_printf_float+0xb6>
 8004988:	2301      	movs	r3, #1
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f ae99 	beq.w	80046ca <_printf_float+0xb6>
 8004998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800499a:	f10b 0b01 	add.w	fp, fp, #1
 800499e:	e7b9      	b.n	8004914 <_printf_float+0x300>
 80049a0:	4631      	mov	r1, r6
 80049a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1bf      	bne.n	800492e <_printf_float+0x31a>
 80049ae:	e68c      	b.n	80046ca <_printf_float+0xb6>
 80049b0:	464b      	mov	r3, r9
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	eb08 020a 	add.w	r2, r8, sl
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1c2      	bne.n	8004946 <_printf_float+0x332>
 80049c0:	e683      	b.n	80046ca <_printf_float+0xb6>
 80049c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c4:	2a01      	cmp	r2, #1
 80049c6:	dc01      	bgt.n	80049cc <_printf_float+0x3b8>
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d537      	bpl.n	8004a3c <_printf_float+0x428>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f ae77 	beq.w	80046ca <_printf_float+0xb6>
 80049dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae6f 	beq.w	80046ca <_printf_float+0xb6>
 80049ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fb ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80049f8:	b9d8      	cbnz	r0, 8004a32 <_printf_float+0x41e>
 80049fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049fc:	f108 0201 	add.w	r2, r8, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d10e      	bne.n	8004a2a <_printf_float+0x416>
 8004a0c:	e65d      	b.n	80046ca <_printf_float+0xb6>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	464a      	mov	r2, r9
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae56 	beq.w	80046ca <_printf_float+0xb6>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4543      	cmp	r3, r8
 8004a28:	dcf1      	bgt.n	8004a0e <_printf_float+0x3fa>
 8004a2a:	4653      	mov	r3, sl
 8004a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a30:	e6e0      	b.n	80047f4 <_printf_float+0x1e0>
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f104 091a 	add.w	r9, r4, #26
 8004a3a:	e7f2      	b.n	8004a22 <_printf_float+0x40e>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4642      	mov	r2, r8
 8004a40:	e7df      	b.n	8004a02 <_printf_float+0x3ee>
 8004a42:	2301      	movs	r3, #1
 8004a44:	464a      	mov	r2, r9
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae3c 	beq.w	80046ca <_printf_float+0xb6>
 8004a52:	f108 0801 	add.w	r8, r8, #1
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	4543      	cmp	r3, r8
 8004a5e:	dcf0      	bgt.n	8004a42 <_printf_float+0x42e>
 8004a60:	e6fd      	b.n	800485e <_printf_float+0x24a>
 8004a62:	f04f 0800 	mov.w	r8, #0
 8004a66:	f104 0919 	add.w	r9, r4, #25
 8004a6a:	e7f4      	b.n	8004a56 <_printf_float+0x442>

08004a6c <_printf_common>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	4616      	mov	r6, r2
 8004a72:	4699      	mov	r9, r3
 8004a74:	688a      	ldr	r2, [r1, #8]
 8004a76:	690b      	ldr	r3, [r1, #16]
 8004a78:	4607      	mov	r7, r0
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	bfb8      	it	lt
 8004a7e:	4613      	movlt	r3, r2
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a86:	460c      	mov	r4, r1
 8004a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a8c:	b10a      	cbz	r2, 8004a92 <_printf_common+0x26>
 8004a8e:	3301      	adds	r3, #1
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	0699      	lsls	r1, r3, #26
 8004a96:	bf42      	ittt	mi
 8004a98:	6833      	ldrmi	r3, [r6, #0]
 8004a9a:	3302      	addmi	r3, #2
 8004a9c:	6033      	strmi	r3, [r6, #0]
 8004a9e:	6825      	ldr	r5, [r4, #0]
 8004aa0:	f015 0506 	ands.w	r5, r5, #6
 8004aa4:	d106      	bne.n	8004ab4 <_printf_common+0x48>
 8004aa6:	f104 0a19 	add.w	sl, r4, #25
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	6832      	ldr	r2, [r6, #0]
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	42ab      	cmp	r3, r5
 8004ab2:	dc28      	bgt.n	8004b06 <_printf_common+0x9a>
 8004ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab8:	1e13      	subs	r3, r2, #0
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	bf18      	it	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	0692      	lsls	r2, r2, #26
 8004ac2:	d42d      	bmi.n	8004b20 <_printf_common+0xb4>
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d020      	beq.n	8004b14 <_printf_common+0xa8>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	68e5      	ldr	r5, [r4, #12]
 8004ad6:	f003 0306 	and.w	r3, r3, #6
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	bf18      	it	ne
 8004ade:	2500      	movne	r5, #0
 8004ae0:	6832      	ldr	r2, [r6, #0]
 8004ae2:	f04f 0600 	mov.w	r6, #0
 8004ae6:	68a3      	ldr	r3, [r4, #8]
 8004ae8:	bf08      	it	eq
 8004aea:	1aad      	subeq	r5, r5, r2
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	bf08      	it	eq
 8004af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bfc4      	itt	gt
 8004af8:	1a9b      	subgt	r3, r3, r2
 8004afa:	18ed      	addgt	r5, r5, r3
 8004afc:	341a      	adds	r4, #26
 8004afe:	42b5      	cmp	r5, r6
 8004b00:	d11a      	bne.n	8004b38 <_printf_common+0xcc>
 8004b02:	2000      	movs	r0, #0
 8004b04:	e008      	b.n	8004b18 <_printf_common+0xac>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4652      	mov	r2, sl
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	47c0      	blx	r8
 8004b10:	3001      	adds	r0, #1
 8004b12:	d103      	bne.n	8004b1c <_printf_common+0xb0>
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	e7c4      	b.n	8004aaa <_printf_common+0x3e>
 8004b20:	2030      	movs	r0, #48	; 0x30
 8004b22:	18e1      	adds	r1, r4, r3
 8004b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2e:	4422      	add	r2, r4
 8004b30:	3302      	adds	r3, #2
 8004b32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b36:	e7c5      	b.n	8004ac4 <_printf_common+0x58>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c0      	blx	r8
 8004b42:	3001      	adds	r0, #1
 8004b44:	d0e6      	beq.n	8004b14 <_printf_common+0xa8>
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7d9      	b.n	8004afe <_printf_common+0x92>
	...

08004b4c <_printf_i>:
 8004b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	7e0f      	ldrb	r7, [r1, #24]
 8004b52:	4691      	mov	r9, r2
 8004b54:	2f78      	cmp	r7, #120	; 0x78
 8004b56:	4680      	mov	r8, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	469a      	mov	sl, r3
 8004b5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b62:	d807      	bhi.n	8004b74 <_printf_i+0x28>
 8004b64:	2f62      	cmp	r7, #98	; 0x62
 8004b66:	d80a      	bhi.n	8004b7e <_printf_i+0x32>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	f000 80d9 	beq.w	8004d20 <_printf_i+0x1d4>
 8004b6e:	2f58      	cmp	r7, #88	; 0x58
 8004b70:	f000 80a4 	beq.w	8004cbc <_printf_i+0x170>
 8004b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b7c:	e03a      	b.n	8004bf4 <_printf_i+0xa8>
 8004b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b82:	2b15      	cmp	r3, #21
 8004b84:	d8f6      	bhi.n	8004b74 <_printf_i+0x28>
 8004b86:	a101      	add	r1, pc, #4	; (adr r1, 8004b8c <_printf_i+0x40>)
 8004b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004b75 	.word	0x08004b75
 8004b98:	08004b75 	.word	0x08004b75
 8004b9c:	08004b75 	.word	0x08004b75
 8004ba0:	08004b75 	.word	0x08004b75
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b75 	.word	0x08004b75
 8004bac:	08004b75 	.word	0x08004b75
 8004bb0:	08004b75 	.word	0x08004b75
 8004bb4:	08004b75 	.word	0x08004b75
 8004bb8:	08004d07 	.word	0x08004d07
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004ce9 	.word	0x08004ce9
 8004bc4:	08004b75 	.word	0x08004b75
 8004bc8:	08004b75 	.word	0x08004b75
 8004bcc:	08004d29 	.word	0x08004d29
 8004bd0:	08004b75 	.word	0x08004b75
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004b75 	.word	0x08004b75
 8004bdc:	08004b75 	.word	0x08004b75
 8004be0:	08004cf1 	.word	0x08004cf1
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	602a      	str	r2, [r5, #0]
 8004bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0a4      	b.n	8004d42 <_printf_i+0x1f6>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	6829      	ldr	r1, [r5, #0]
 8004bfc:	0606      	lsls	r6, r0, #24
 8004bfe:	f101 0304 	add.w	r3, r1, #4
 8004c02:	d50a      	bpl.n	8004c1a <_printf_i+0xce>
 8004c04:	680e      	ldr	r6, [r1, #0]
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	2e00      	cmp	r6, #0
 8004c0a:	da03      	bge.n	8004c14 <_printf_i+0xc8>
 8004c0c:	232d      	movs	r3, #45	; 0x2d
 8004c0e:	4276      	negs	r6, r6
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c14:	230a      	movs	r3, #10
 8004c16:	485e      	ldr	r0, [pc, #376]	; (8004d90 <_printf_i+0x244>)
 8004c18:	e019      	b.n	8004c4e <_printf_i+0x102>
 8004c1a:	680e      	ldr	r6, [r1, #0]
 8004c1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	bf18      	it	ne
 8004c24:	b236      	sxthne	r6, r6
 8004c26:	e7ef      	b.n	8004c08 <_printf_i+0xbc>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	1d19      	adds	r1, r3, #4
 8004c2e:	6029      	str	r1, [r5, #0]
 8004c30:	0601      	lsls	r1, r0, #24
 8004c32:	d501      	bpl.n	8004c38 <_printf_i+0xec>
 8004c34:	681e      	ldr	r6, [r3, #0]
 8004c36:	e002      	b.n	8004c3e <_printf_i+0xf2>
 8004c38:	0646      	lsls	r6, r0, #25
 8004c3a:	d5fb      	bpl.n	8004c34 <_printf_i+0xe8>
 8004c3c:	881e      	ldrh	r6, [r3, #0]
 8004c3e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c40:	bf0c      	ite	eq
 8004c42:	2308      	moveq	r3, #8
 8004c44:	230a      	movne	r3, #10
 8004c46:	4852      	ldr	r0, [pc, #328]	; (8004d90 <_printf_i+0x244>)
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c4e:	6865      	ldr	r5, [r4, #4]
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	bfa8      	it	ge
 8004c54:	6821      	ldrge	r1, [r4, #0]
 8004c56:	60a5      	str	r5, [r4, #8]
 8004c58:	bfa4      	itt	ge
 8004c5a:	f021 0104 	bicge.w	r1, r1, #4
 8004c5e:	6021      	strge	r1, [r4, #0]
 8004c60:	b90e      	cbnz	r6, 8004c66 <_printf_i+0x11a>
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	d04d      	beq.n	8004d02 <_printf_i+0x1b6>
 8004c66:	4615      	mov	r5, r2
 8004c68:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c6c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c70:	5dc7      	ldrb	r7, [r0, r7]
 8004c72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c76:	4637      	mov	r7, r6
 8004c78:	42bb      	cmp	r3, r7
 8004c7a:	460e      	mov	r6, r1
 8004c7c:	d9f4      	bls.n	8004c68 <_printf_i+0x11c>
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d10b      	bne.n	8004c9a <_printf_i+0x14e>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	07de      	lsls	r6, r3, #31
 8004c86:	d508      	bpl.n	8004c9a <_printf_i+0x14e>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	6861      	ldr	r1, [r4, #4]
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	bfde      	ittt	le
 8004c90:	2330      	movle	r3, #48	; 0x30
 8004c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c9a:	1b52      	subs	r2, r2, r5
 8004c9c:	6122      	str	r2, [r4, #16]
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f8cd a000 	str.w	sl, [sp]
 8004ca8:	aa03      	add	r2, sp, #12
 8004caa:	f7ff fedf 	bl	8004a6c <_printf_common>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d14c      	bne.n	8004d4c <_printf_i+0x200>
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	b004      	add	sp, #16
 8004cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbc:	4834      	ldr	r0, [pc, #208]	; (8004d90 <_printf_i+0x244>)
 8004cbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cc2:	6829      	ldr	r1, [r5, #0]
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cca:	6029      	str	r1, [r5, #0]
 8004ccc:	061d      	lsls	r5, r3, #24
 8004cce:	d514      	bpl.n	8004cfa <_printf_i+0x1ae>
 8004cd0:	07df      	lsls	r7, r3, #31
 8004cd2:	bf44      	itt	mi
 8004cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd8:	6023      	strmi	r3, [r4, #0]
 8004cda:	b91e      	cbnz	r6, 8004ce4 <_printf_i+0x198>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f023 0320 	bic.w	r3, r3, #32
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	e7af      	b.n	8004c48 <_printf_i+0xfc>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	2378      	movs	r3, #120	; 0x78
 8004cf2:	4828      	ldr	r0, [pc, #160]	; (8004d94 <_printf_i+0x248>)
 8004cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf8:	e7e3      	b.n	8004cc2 <_printf_i+0x176>
 8004cfa:	0659      	lsls	r1, r3, #25
 8004cfc:	bf48      	it	mi
 8004cfe:	b2b6      	uxthmi	r6, r6
 8004d00:	e7e6      	b.n	8004cd0 <_printf_i+0x184>
 8004d02:	4615      	mov	r5, r2
 8004d04:	e7bb      	b.n	8004c7e <_printf_i+0x132>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	6826      	ldr	r6, [r4, #0]
 8004d0a:	1d18      	adds	r0, r3, #4
 8004d0c:	6961      	ldr	r1, [r4, #20]
 8004d0e:	6028      	str	r0, [r5, #0]
 8004d10:	0635      	lsls	r5, r6, #24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	d501      	bpl.n	8004d1a <_printf_i+0x1ce>
 8004d16:	6019      	str	r1, [r3, #0]
 8004d18:	e002      	b.n	8004d20 <_printf_i+0x1d4>
 8004d1a:	0670      	lsls	r0, r6, #25
 8004d1c:	d5fb      	bpl.n	8004d16 <_printf_i+0x1ca>
 8004d1e:	8019      	strh	r1, [r3, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	4615      	mov	r5, r2
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	e7ba      	b.n	8004c9e <_printf_i+0x152>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	602a      	str	r2, [r5, #0]
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	4628      	mov	r0, r5
 8004d36:	f002 faed 	bl	8007314 <memchr>
 8004d3a:	b108      	cbz	r0, 8004d40 <_printf_i+0x1f4>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4a:	e7a8      	b.n	8004c9e <_printf_i+0x152>
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4640      	mov	r0, r8
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	47d0      	blx	sl
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0ab      	beq.n	8004cb2 <_printf_i+0x166>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	079b      	lsls	r3, r3, #30
 8004d5e:	d413      	bmi.n	8004d88 <_printf_i+0x23c>
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	4298      	cmp	r0, r3
 8004d66:	bfb8      	it	lt
 8004d68:	4618      	movlt	r0, r3
 8004d6a:	e7a4      	b.n	8004cb6 <_printf_i+0x16a>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4649      	mov	r1, r9
 8004d72:	4640      	mov	r0, r8
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d09b      	beq.n	8004cb2 <_printf_i+0x166>
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	68e3      	ldr	r3, [r4, #12]
 8004d7e:	9903      	ldr	r1, [sp, #12]
 8004d80:	1a5b      	subs	r3, r3, r1
 8004d82:	42ab      	cmp	r3, r5
 8004d84:	dcf2      	bgt.n	8004d6c <_printf_i+0x220>
 8004d86:	e7eb      	b.n	8004d60 <_printf_i+0x214>
 8004d88:	2500      	movs	r5, #0
 8004d8a:	f104 0619 	add.w	r6, r4, #25
 8004d8e:	e7f5      	b.n	8004d7c <_printf_i+0x230>
 8004d90:	0801a6de 	.word	0x0801a6de
 8004d94:	0801a6ef 	.word	0x0801a6ef

08004d98 <_scanf_float>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	688b      	ldr	r3, [r1, #8]
 8004da2:	4617      	mov	r7, r2
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004daa:	bf85      	ittet	hi
 8004dac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004db0:	195b      	addhi	r3, r3, r5
 8004db2:	2300      	movls	r3, #0
 8004db4:	9302      	strhi	r3, [sp, #8]
 8004db6:	bf88      	it	hi
 8004db8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004dbc:	468b      	mov	fp, r1
 8004dbe:	f04f 0500 	mov.w	r5, #0
 8004dc2:	bf8c      	ite	hi
 8004dc4:	608b      	strhi	r3, [r1, #8]
 8004dc6:	9302      	strls	r3, [sp, #8]
 8004dc8:	680b      	ldr	r3, [r1, #0]
 8004dca:	4680      	mov	r8, r0
 8004dcc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004dd0:	f84b 3b1c 	str.w	r3, [fp], #28
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	465e      	mov	r6, fp
 8004dd8:	46aa      	mov	sl, r5
 8004dda:	46a9      	mov	r9, r5
 8004ddc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004de0:	9501      	str	r5, [sp, #4]
 8004de2:	68a2      	ldr	r2, [r4, #8]
 8004de4:	b152      	cbz	r2, 8004dfc <_scanf_float+0x64>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b4e      	cmp	r3, #78	; 0x4e
 8004dec:	d864      	bhi.n	8004eb8 <_scanf_float+0x120>
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d83c      	bhi.n	8004e6c <_scanf_float+0xd4>
 8004df2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004df6:	b2c8      	uxtb	r0, r1
 8004df8:	280e      	cmp	r0, #14
 8004dfa:	d93a      	bls.n	8004e72 <_scanf_float+0xda>
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	d003      	beq.n	8004e0a <_scanf_float+0x72>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	f1ba 0f01 	cmp.w	sl, #1
 8004e12:	f200 8113 	bhi.w	800503c <_scanf_float+0x2a4>
 8004e16:	455e      	cmp	r6, fp
 8004e18:	f200 8105 	bhi.w	8005026 <_scanf_float+0x28e>
 8004e1c:	2501      	movs	r5, #1
 8004e1e:	4628      	mov	r0, r5
 8004e20:	b007      	add	sp, #28
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e2a:	2a0d      	cmp	r2, #13
 8004e2c:	d8e6      	bhi.n	8004dfc <_scanf_float+0x64>
 8004e2e:	a101      	add	r1, pc, #4	; (adr r1, 8004e34 <_scanf_float+0x9c>)
 8004e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e34:	08004f73 	.word	0x08004f73
 8004e38:	08004dfd 	.word	0x08004dfd
 8004e3c:	08004dfd 	.word	0x08004dfd
 8004e40:	08004dfd 	.word	0x08004dfd
 8004e44:	08004fd3 	.word	0x08004fd3
 8004e48:	08004fab 	.word	0x08004fab
 8004e4c:	08004dfd 	.word	0x08004dfd
 8004e50:	08004dfd 	.word	0x08004dfd
 8004e54:	08004f81 	.word	0x08004f81
 8004e58:	08004dfd 	.word	0x08004dfd
 8004e5c:	08004dfd 	.word	0x08004dfd
 8004e60:	08004dfd 	.word	0x08004dfd
 8004e64:	08004dfd 	.word	0x08004dfd
 8004e68:	08004f39 	.word	0x08004f39
 8004e6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e70:	e7db      	b.n	8004e2a <_scanf_float+0x92>
 8004e72:	290e      	cmp	r1, #14
 8004e74:	d8c2      	bhi.n	8004dfc <_scanf_float+0x64>
 8004e76:	a001      	add	r0, pc, #4	; (adr r0, 8004e7c <_scanf_float+0xe4>)
 8004e78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e7c:	08004f2b 	.word	0x08004f2b
 8004e80:	08004dfd 	.word	0x08004dfd
 8004e84:	08004f2b 	.word	0x08004f2b
 8004e88:	08004fbf 	.word	0x08004fbf
 8004e8c:	08004dfd 	.word	0x08004dfd
 8004e90:	08004ed9 	.word	0x08004ed9
 8004e94:	08004f15 	.word	0x08004f15
 8004e98:	08004f15 	.word	0x08004f15
 8004e9c:	08004f15 	.word	0x08004f15
 8004ea0:	08004f15 	.word	0x08004f15
 8004ea4:	08004f15 	.word	0x08004f15
 8004ea8:	08004f15 	.word	0x08004f15
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	2b6e      	cmp	r3, #110	; 0x6e
 8004eba:	d809      	bhi.n	8004ed0 <_scanf_float+0x138>
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d8b2      	bhi.n	8004e26 <_scanf_float+0x8e>
 8004ec0:	2b54      	cmp	r3, #84	; 0x54
 8004ec2:	d077      	beq.n	8004fb4 <_scanf_float+0x21c>
 8004ec4:	2b59      	cmp	r3, #89	; 0x59
 8004ec6:	d199      	bne.n	8004dfc <_scanf_float+0x64>
 8004ec8:	2d07      	cmp	r5, #7
 8004eca:	d197      	bne.n	8004dfc <_scanf_float+0x64>
 8004ecc:	2508      	movs	r5, #8
 8004ece:	e029      	b.n	8004f24 <_scanf_float+0x18c>
 8004ed0:	2b74      	cmp	r3, #116	; 0x74
 8004ed2:	d06f      	beq.n	8004fb4 <_scanf_float+0x21c>
 8004ed4:	2b79      	cmp	r3, #121	; 0x79
 8004ed6:	e7f6      	b.n	8004ec6 <_scanf_float+0x12e>
 8004ed8:	6821      	ldr	r1, [r4, #0]
 8004eda:	05c8      	lsls	r0, r1, #23
 8004edc:	d51a      	bpl.n	8004f14 <_scanf_float+0x17c>
 8004ede:	9b02      	ldr	r3, [sp, #8]
 8004ee0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ee4:	6021      	str	r1, [r4, #0]
 8004ee6:	f109 0901 	add.w	r9, r9, #1
 8004eea:	b11b      	cbz	r3, 8004ef4 <_scanf_float+0x15c>
 8004eec:	3b01      	subs	r3, #1
 8004eee:	3201      	adds	r2, #1
 8004ef0:	9302      	str	r3, [sp, #8]
 8004ef2:	60a2      	str	r2, [r4, #8]
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	3301      	adds	r3, #1
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	f340 8084 	ble.w	8005014 <_scanf_float+0x27c>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	e766      	b.n	8004de2 <_scanf_float+0x4a>
 8004f14:	eb1a 0f05 	cmn.w	sl, r5
 8004f18:	f47f af70 	bne.w	8004dfc <_scanf_float+0x64>
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	f806 3b01 	strb.w	r3, [r6], #1
 8004f28:	e7e4      	b.n	8004ef4 <_scanf_float+0x15c>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	0610      	lsls	r0, r2, #24
 8004f2e:	f57f af65 	bpl.w	8004dfc <_scanf_float+0x64>
 8004f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f36:	e7f4      	b.n	8004f22 <_scanf_float+0x18a>
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	d10e      	bne.n	8004f5c <_scanf_float+0x1c4>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	d10e      	bne.n	8004f62 <_scanf_float+0x1ca>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f4e:	d108      	bne.n	8004f62 <_scanf_float+0x1ca>
 8004f50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f54:	f04f 0a01 	mov.w	sl, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	e7e3      	b.n	8004f24 <_scanf_float+0x18c>
 8004f5c:	f1ba 0f02 	cmp.w	sl, #2
 8004f60:	d055      	beq.n	800500e <_scanf_float+0x276>
 8004f62:	2d01      	cmp	r5, #1
 8004f64:	d002      	beq.n	8004f6c <_scanf_float+0x1d4>
 8004f66:	2d04      	cmp	r5, #4
 8004f68:	f47f af48 	bne.w	8004dfc <_scanf_float+0x64>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	b2ed      	uxtb	r5, r5
 8004f70:	e7d8      	b.n	8004f24 <_scanf_float+0x18c>
 8004f72:	f1ba 0f01 	cmp.w	sl, #1
 8004f76:	f47f af41 	bne.w	8004dfc <_scanf_float+0x64>
 8004f7a:	f04f 0a02 	mov.w	sl, #2
 8004f7e:	e7d1      	b.n	8004f24 <_scanf_float+0x18c>
 8004f80:	b97d      	cbnz	r5, 8004fa2 <_scanf_float+0x20a>
 8004f82:	f1b9 0f00 	cmp.w	r9, #0
 8004f86:	f47f af3c 	bne.w	8004e02 <_scanf_float+0x6a>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f94:	f47f af39 	bne.w	8004e0a <_scanf_float+0x72>
 8004f98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f9c:	2501      	movs	r5, #1
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	e7c0      	b.n	8004f24 <_scanf_float+0x18c>
 8004fa2:	2d03      	cmp	r5, #3
 8004fa4:	d0e2      	beq.n	8004f6c <_scanf_float+0x1d4>
 8004fa6:	2d05      	cmp	r5, #5
 8004fa8:	e7de      	b.n	8004f68 <_scanf_float+0x1d0>
 8004faa:	2d02      	cmp	r5, #2
 8004fac:	f47f af26 	bne.w	8004dfc <_scanf_float+0x64>
 8004fb0:	2503      	movs	r5, #3
 8004fb2:	e7b7      	b.n	8004f24 <_scanf_float+0x18c>
 8004fb4:	2d06      	cmp	r5, #6
 8004fb6:	f47f af21 	bne.w	8004dfc <_scanf_float+0x64>
 8004fba:	2507      	movs	r5, #7
 8004fbc:	e7b2      	b.n	8004f24 <_scanf_float+0x18c>
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	0591      	lsls	r1, r2, #22
 8004fc2:	f57f af1b 	bpl.w	8004dfc <_scanf_float+0x64>
 8004fc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fd0:	e7a8      	b.n	8004f24 <_scanf_float+0x18c>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004fd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fdc:	d006      	beq.n	8004fec <_scanf_float+0x254>
 8004fde:	0550      	lsls	r0, r2, #21
 8004fe0:	f57f af0c 	bpl.w	8004dfc <_scanf_float+0x64>
 8004fe4:	f1b9 0f00 	cmp.w	r9, #0
 8004fe8:	f43f af0f 	beq.w	8004e0a <_scanf_float+0x72>
 8004fec:	0591      	lsls	r1, r2, #22
 8004fee:	bf58      	it	pl
 8004ff0:	9901      	ldrpl	r1, [sp, #4]
 8004ff2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ff6:	bf58      	it	pl
 8004ff8:	eba9 0101 	subpl.w	r1, r9, r1
 8004ffc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005000:	f04f 0900 	mov.w	r9, #0
 8005004:	bf58      	it	pl
 8005006:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800500a:	6022      	str	r2, [r4, #0]
 800500c:	e78a      	b.n	8004f24 <_scanf_float+0x18c>
 800500e:	f04f 0a03 	mov.w	sl, #3
 8005012:	e787      	b.n	8004f24 <_scanf_float+0x18c>
 8005014:	4639      	mov	r1, r7
 8005016:	4640      	mov	r0, r8
 8005018:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800501c:	4798      	blx	r3
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f aedf 	beq.w	8004de2 <_scanf_float+0x4a>
 8005024:	e6ea      	b.n	8004dfc <_scanf_float+0x64>
 8005026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502a:	463a      	mov	r2, r7
 800502c:	4640      	mov	r0, r8
 800502e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005032:	4798      	blx	r3
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	e6ec      	b.n	8004e16 <_scanf_float+0x7e>
 800503c:	1e6b      	subs	r3, r5, #1
 800503e:	2b06      	cmp	r3, #6
 8005040:	d825      	bhi.n	800508e <_scanf_float+0x2f6>
 8005042:	2d02      	cmp	r5, #2
 8005044:	d836      	bhi.n	80050b4 <_scanf_float+0x31c>
 8005046:	455e      	cmp	r6, fp
 8005048:	f67f aee8 	bls.w	8004e1c <_scanf_float+0x84>
 800504c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005050:	463a      	mov	r2, r7
 8005052:	4640      	mov	r0, r8
 8005054:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005058:	4798      	blx	r3
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	3b01      	subs	r3, #1
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	e7f1      	b.n	8005046 <_scanf_float+0x2ae>
 8005062:	9802      	ldr	r0, [sp, #8]
 8005064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005068:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800506c:	463a      	mov	r2, r7
 800506e:	9002      	str	r0, [sp, #8]
 8005070:	4640      	mov	r0, r8
 8005072:	4798      	blx	r3
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	3b01      	subs	r3, #1
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800507e:	fa5f fa8a 	uxtb.w	sl, sl
 8005082:	f1ba 0f02 	cmp.w	sl, #2
 8005086:	d1ec      	bne.n	8005062 <_scanf_float+0x2ca>
 8005088:	3d03      	subs	r5, #3
 800508a:	b2ed      	uxtb	r5, r5
 800508c:	1b76      	subs	r6, r6, r5
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	05da      	lsls	r2, r3, #23
 8005092:	d52f      	bpl.n	80050f4 <_scanf_float+0x35c>
 8005094:	055b      	lsls	r3, r3, #21
 8005096:	d510      	bpl.n	80050ba <_scanf_float+0x322>
 8005098:	455e      	cmp	r6, fp
 800509a:	f67f aebf 	bls.w	8004e1c <_scanf_float+0x84>
 800509e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a2:	463a      	mov	r2, r7
 80050a4:	4640      	mov	r0, r8
 80050a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050aa:	4798      	blx	r3
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7f1      	b.n	8005098 <_scanf_float+0x300>
 80050b4:	46aa      	mov	sl, r5
 80050b6:	9602      	str	r6, [sp, #8]
 80050b8:	e7df      	b.n	800507a <_scanf_float+0x2e2>
 80050ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	2965      	cmp	r1, #101	; 0x65
 80050c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	d00c      	beq.n	80050e8 <_scanf_float+0x350>
 80050ce:	2945      	cmp	r1, #69	; 0x45
 80050d0:	d00a      	beq.n	80050e8 <_scanf_float+0x350>
 80050d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050d6:	463a      	mov	r2, r7
 80050d8:	4640      	mov	r0, r8
 80050da:	4798      	blx	r3
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	1eb5      	subs	r5, r6, #2
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	463a      	mov	r2, r7
 80050ea:	4640      	mov	r0, r8
 80050ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f0:	4798      	blx	r3
 80050f2:	462e      	mov	r6, r5
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	f015 0510 	ands.w	r5, r5, #16
 80050fa:	d155      	bne.n	80051a8 <_scanf_float+0x410>
 80050fc:	7035      	strb	r5, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d11b      	bne.n	8005142 <_scanf_float+0x3aa>
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	454b      	cmp	r3, r9
 800510e:	eba3 0209 	sub.w	r2, r3, r9
 8005112:	d123      	bne.n	800515c <_scanf_float+0x3c4>
 8005114:	2200      	movs	r2, #0
 8005116:	4659      	mov	r1, fp
 8005118:	4640      	mov	r0, r8
 800511a:	f000 fe79 	bl	8005e10 <_strtod_r>
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	f012 0f02 	tst.w	r2, #2
 8005126:	4606      	mov	r6, r0
 8005128:	460f      	mov	r7, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	d021      	beq.n	8005172 <_scanf_float+0x3da>
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	9903      	ldr	r1, [sp, #12]
 8005132:	600a      	str	r2, [r1, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e9c3 6700 	strd	r6, r7, [r3]
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60e3      	str	r3, [r4, #12]
 8005140:	e66d      	b.n	8004e1e <_scanf_float+0x86>
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0e5      	beq.n	8005114 <_scanf_float+0x37c>
 8005148:	9905      	ldr	r1, [sp, #20]
 800514a:	230a      	movs	r3, #10
 800514c:	462a      	mov	r2, r5
 800514e:	4640      	mov	r0, r8
 8005150:	3101      	adds	r1, #1
 8005152:	f000 fedf 	bl	8005f14 <_strtol_r>
 8005156:	9b04      	ldr	r3, [sp, #16]
 8005158:	9e05      	ldr	r6, [sp, #20]
 800515a:	1ac2      	subs	r2, r0, r3
 800515c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005160:	429e      	cmp	r6, r3
 8005162:	bf28      	it	cs
 8005164:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005168:	4630      	mov	r0, r6
 800516a:	4910      	ldr	r1, [pc, #64]	; (80051ac <_scanf_float+0x414>)
 800516c:	f000 f826 	bl	80051bc <siprintf>
 8005170:	e7d0      	b.n	8005114 <_scanf_float+0x37c>
 8005172:	f012 0f04 	tst.w	r2, #4
 8005176:	f103 0204 	add.w	r2, r3, #4
 800517a:	d1d9      	bne.n	8005130 <_scanf_float+0x398>
 800517c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005180:	f8cc 2000 	str.w	r2, [ip]
 8005184:	f8d3 8000 	ldr.w	r8, [r3]
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	f7fb fc3e 	bl	8000a0c <__aeabi_dcmpun>
 8005190:	b128      	cbz	r0, 800519e <_scanf_float+0x406>
 8005192:	4807      	ldr	r0, [pc, #28]	; (80051b0 <_scanf_float+0x418>)
 8005194:	f000 f80e 	bl	80051b4 <nanf>
 8005198:	f8c8 0000 	str.w	r0, [r8]
 800519c:	e7cd      	b.n	800513a <_scanf_float+0x3a2>
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb fc91 	bl	8000ac8 <__aeabi_d2f>
 80051a6:	e7f7      	b.n	8005198 <_scanf_float+0x400>
 80051a8:	2500      	movs	r5, #0
 80051aa:	e638      	b.n	8004e1e <_scanf_float+0x86>
 80051ac:	0801a700 	.word	0x0801a700
 80051b0:	08009d5d 	.word	0x08009d5d

080051b4 <nanf>:
 80051b4:	4800      	ldr	r0, [pc, #0]	; (80051b8 <nanf+0x4>)
 80051b6:	4770      	bx	lr
 80051b8:	7fc00000 	.word	0x7fc00000

080051bc <siprintf>:
 80051bc:	b40e      	push	{r1, r2, r3}
 80051be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051c2:	b500      	push	{lr}
 80051c4:	b09c      	sub	sp, #112	; 0x70
 80051c6:	ab1d      	add	r3, sp, #116	; 0x74
 80051c8:	9002      	str	r0, [sp, #8]
 80051ca:	9006      	str	r0, [sp, #24]
 80051cc:	9107      	str	r1, [sp, #28]
 80051ce:	9104      	str	r1, [sp, #16]
 80051d0:	4808      	ldr	r0, [pc, #32]	; (80051f4 <siprintf+0x38>)
 80051d2:	4909      	ldr	r1, [pc, #36]	; (80051f8 <siprintf+0x3c>)
 80051d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d8:	9105      	str	r1, [sp, #20]
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	a902      	add	r1, sp, #8
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	f002 feb8 	bl	8007f54 <_svfiprintf_r>
 80051e4:	2200      	movs	r2, #0
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	b01c      	add	sp, #112	; 0x70
 80051ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f0:	b003      	add	sp, #12
 80051f2:	4770      	bx	lr
 80051f4:	20000014 	.word	0x20000014
 80051f8:	ffff0208 	.word	0xffff0208

080051fc <sulp>:
 80051fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005200:	460f      	mov	r7, r1
 8005202:	4690      	mov	r8, r2
 8005204:	f002 fc12 	bl	8007a2c <__ulp>
 8005208:	4604      	mov	r4, r0
 800520a:	460d      	mov	r5, r1
 800520c:	f1b8 0f00 	cmp.w	r8, #0
 8005210:	d011      	beq.n	8005236 <sulp+0x3a>
 8005212:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005216:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800521a:	2b00      	cmp	r3, #0
 800521c:	dd0b      	ble.n	8005236 <sulp+0x3a>
 800521e:	2400      	movs	r4, #0
 8005220:	051b      	lsls	r3, r3, #20
 8005222:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005226:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	f7fb f953 	bl	80004d8 <__aeabi_dmul>
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005240 <_strtod_l>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	469b      	mov	fp, r3
 8005246:	2300      	movs	r3, #0
 8005248:	b09f      	sub	sp, #124	; 0x7c
 800524a:	931a      	str	r3, [sp, #104]	; 0x68
 800524c:	4b9e      	ldr	r3, [pc, #632]	; (80054c8 <_strtod_l+0x288>)
 800524e:	4682      	mov	sl, r0
 8005250:	681f      	ldr	r7, [r3, #0]
 8005252:	460e      	mov	r6, r1
 8005254:	4638      	mov	r0, r7
 8005256:	9215      	str	r2, [sp, #84]	; 0x54
 8005258:	f7fa ff7a 	bl	8000150 <strlen>
 800525c:	f04f 0800 	mov.w	r8, #0
 8005260:	4604      	mov	r4, r0
 8005262:	f04f 0900 	mov.w	r9, #0
 8005266:	9619      	str	r6, [sp, #100]	; 0x64
 8005268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	2a2b      	cmp	r2, #43	; 0x2b
 800526e:	d04c      	beq.n	800530a <_strtod_l+0xca>
 8005270:	d83a      	bhi.n	80052e8 <_strtod_l+0xa8>
 8005272:	2a0d      	cmp	r2, #13
 8005274:	d833      	bhi.n	80052de <_strtod_l+0x9e>
 8005276:	2a08      	cmp	r2, #8
 8005278:	d833      	bhi.n	80052e2 <_strtod_l+0xa2>
 800527a:	2a00      	cmp	r2, #0
 800527c:	d03d      	beq.n	80052fa <_strtod_l+0xba>
 800527e:	2300      	movs	r3, #0
 8005280:	930a      	str	r3, [sp, #40]	; 0x28
 8005282:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005284:	782b      	ldrb	r3, [r5, #0]
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	f040 80aa 	bne.w	80053e0 <_strtod_l+0x1a0>
 800528c:	786b      	ldrb	r3, [r5, #1]
 800528e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005292:	2b58      	cmp	r3, #88	; 0x58
 8005294:	d166      	bne.n	8005364 <_strtod_l+0x124>
 8005296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005298:	4650      	mov	r0, sl
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	ab1a      	add	r3, sp, #104	; 0x68
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4a8a      	ldr	r2, [pc, #552]	; (80054cc <_strtod_l+0x28c>)
 80052a2:	f8cd b008 	str.w	fp, [sp, #8]
 80052a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80052a8:	a919      	add	r1, sp, #100	; 0x64
 80052aa:	f001 fd17 	bl	8006cdc <__gethex>
 80052ae:	f010 0607 	ands.w	r6, r0, #7
 80052b2:	4604      	mov	r4, r0
 80052b4:	d005      	beq.n	80052c2 <_strtod_l+0x82>
 80052b6:	2e06      	cmp	r6, #6
 80052b8:	d129      	bne.n	800530e <_strtod_l+0xce>
 80052ba:	2300      	movs	r3, #0
 80052bc:	3501      	adds	r5, #1
 80052be:	9519      	str	r5, [sp, #100]	; 0x64
 80052c0:	930a      	str	r3, [sp, #40]	; 0x28
 80052c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 858a 	bne.w	8005dde <_strtod_l+0xb9e>
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	b1d3      	cbz	r3, 8005304 <_strtod_l+0xc4>
 80052ce:	4642      	mov	r2, r8
 80052d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	b01f      	add	sp, #124	; 0x7c
 80052da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052de:	2a20      	cmp	r2, #32
 80052e0:	d1cd      	bne.n	800527e <_strtod_l+0x3e>
 80052e2:	3301      	adds	r3, #1
 80052e4:	9319      	str	r3, [sp, #100]	; 0x64
 80052e6:	e7bf      	b.n	8005268 <_strtod_l+0x28>
 80052e8:	2a2d      	cmp	r2, #45	; 0x2d
 80052ea:	d1c8      	bne.n	800527e <_strtod_l+0x3e>
 80052ec:	2201      	movs	r2, #1
 80052ee:	920a      	str	r2, [sp, #40]	; 0x28
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	9219      	str	r2, [sp, #100]	; 0x64
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1c3      	bne.n	8005282 <_strtod_l+0x42>
 80052fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052fc:	9619      	str	r6, [sp, #100]	; 0x64
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 856b 	bne.w	8005dda <_strtod_l+0xb9a>
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	e7e4      	b.n	80052d4 <_strtod_l+0x94>
 800530a:	2200      	movs	r2, #0
 800530c:	e7ef      	b.n	80052ee <_strtod_l+0xae>
 800530e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005310:	b13a      	cbz	r2, 8005322 <_strtod_l+0xe2>
 8005312:	2135      	movs	r1, #53	; 0x35
 8005314:	a81c      	add	r0, sp, #112	; 0x70
 8005316:	f002 fc8d 	bl	8007c34 <__copybits>
 800531a:	4650      	mov	r0, sl
 800531c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800531e:	f002 f855 	bl	80073cc <_Bfree>
 8005322:	3e01      	subs	r6, #1
 8005324:	2e04      	cmp	r6, #4
 8005326:	d806      	bhi.n	8005336 <_strtod_l+0xf6>
 8005328:	e8df f006 	tbb	[pc, r6]
 800532c:	1714030a 	.word	0x1714030a
 8005330:	0a          	.byte	0x0a
 8005331:	00          	.byte	0x00
 8005332:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005336:	0721      	lsls	r1, r4, #28
 8005338:	d5c3      	bpl.n	80052c2 <_strtod_l+0x82>
 800533a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800533e:	e7c0      	b.n	80052c2 <_strtod_l+0x82>
 8005340:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005342:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005346:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800534a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800534e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005352:	e7f0      	b.n	8005336 <_strtod_l+0xf6>
 8005354:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80054d0 <_strtod_l+0x290>
 8005358:	e7ed      	b.n	8005336 <_strtod_l+0xf6>
 800535a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800535e:	f04f 38ff 	mov.w	r8, #4294967295
 8005362:	e7e8      	b.n	8005336 <_strtod_l+0xf6>
 8005364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	9219      	str	r2, [sp, #100]	; 0x64
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d0f9      	beq.n	8005364 <_strtod_l+0x124>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0a6      	beq.n	80052c2 <_strtod_l+0x82>
 8005374:	2301      	movs	r3, #1
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800537a:	220a      	movs	r2, #10
 800537c:	9308      	str	r3, [sp, #32]
 800537e:	2300      	movs	r3, #0
 8005380:	469b      	mov	fp, r3
 8005382:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005386:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005388:	7805      	ldrb	r5, [r0, #0]
 800538a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800538e:	b2d9      	uxtb	r1, r3
 8005390:	2909      	cmp	r1, #9
 8005392:	d927      	bls.n	80053e4 <_strtod_l+0x1a4>
 8005394:	4622      	mov	r2, r4
 8005396:	4639      	mov	r1, r7
 8005398:	f002 fef2 	bl	8008180 <strncmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	d033      	beq.n	8005408 <_strtod_l+0x1c8>
 80053a0:	2000      	movs	r0, #0
 80053a2:	462a      	mov	r2, r5
 80053a4:	465c      	mov	r4, fp
 80053a6:	4603      	mov	r3, r0
 80053a8:	9004      	str	r0, [sp, #16]
 80053aa:	2a65      	cmp	r2, #101	; 0x65
 80053ac:	d001      	beq.n	80053b2 <_strtod_l+0x172>
 80053ae:	2a45      	cmp	r2, #69	; 0x45
 80053b0:	d114      	bne.n	80053dc <_strtod_l+0x19c>
 80053b2:	b91c      	cbnz	r4, 80053bc <_strtod_l+0x17c>
 80053b4:	9a07      	ldr	r2, [sp, #28]
 80053b6:	4302      	orrs	r2, r0
 80053b8:	d09f      	beq.n	80052fa <_strtod_l+0xba>
 80053ba:	2400      	movs	r4, #0
 80053bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80053be:	1c72      	adds	r2, r6, #1
 80053c0:	9219      	str	r2, [sp, #100]	; 0x64
 80053c2:	7872      	ldrb	r2, [r6, #1]
 80053c4:	2a2b      	cmp	r2, #43	; 0x2b
 80053c6:	d079      	beq.n	80054bc <_strtod_l+0x27c>
 80053c8:	2a2d      	cmp	r2, #45	; 0x2d
 80053ca:	f000 8083 	beq.w	80054d4 <_strtod_l+0x294>
 80053ce:	2700      	movs	r7, #0
 80053d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80053d4:	2909      	cmp	r1, #9
 80053d6:	f240 8083 	bls.w	80054e0 <_strtod_l+0x2a0>
 80053da:	9619      	str	r6, [sp, #100]	; 0x64
 80053dc:	2500      	movs	r5, #0
 80053de:	e09f      	b.n	8005520 <_strtod_l+0x2e0>
 80053e0:	2300      	movs	r3, #0
 80053e2:	e7c8      	b.n	8005376 <_strtod_l+0x136>
 80053e4:	f1bb 0f08 	cmp.w	fp, #8
 80053e8:	bfd5      	itete	le
 80053ea:	9906      	ldrle	r1, [sp, #24]
 80053ec:	9905      	ldrgt	r1, [sp, #20]
 80053ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80053f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80053f6:	f100 0001 	add.w	r0, r0, #1
 80053fa:	bfd4      	ite	le
 80053fc:	9306      	strle	r3, [sp, #24]
 80053fe:	9305      	strgt	r3, [sp, #20]
 8005400:	f10b 0b01 	add.w	fp, fp, #1
 8005404:	9019      	str	r0, [sp, #100]	; 0x64
 8005406:	e7be      	b.n	8005386 <_strtod_l+0x146>
 8005408:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800540a:	191a      	adds	r2, r3, r4
 800540c:	9219      	str	r2, [sp, #100]	; 0x64
 800540e:	5d1a      	ldrb	r2, [r3, r4]
 8005410:	f1bb 0f00 	cmp.w	fp, #0
 8005414:	d036      	beq.n	8005484 <_strtod_l+0x244>
 8005416:	465c      	mov	r4, fp
 8005418:	9004      	str	r0, [sp, #16]
 800541a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800541e:	2b09      	cmp	r3, #9
 8005420:	d912      	bls.n	8005448 <_strtod_l+0x208>
 8005422:	2301      	movs	r3, #1
 8005424:	e7c1      	b.n	80053aa <_strtod_l+0x16a>
 8005426:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005428:	3001      	adds	r0, #1
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	9219      	str	r2, [sp, #100]	; 0x64
 800542e:	785a      	ldrb	r2, [r3, #1]
 8005430:	2a30      	cmp	r2, #48	; 0x30
 8005432:	d0f8      	beq.n	8005426 <_strtod_l+0x1e6>
 8005434:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005438:	2b08      	cmp	r3, #8
 800543a:	f200 84d5 	bhi.w	8005de8 <_strtod_l+0xba8>
 800543e:	9004      	str	r0, [sp, #16]
 8005440:	2000      	movs	r0, #0
 8005442:	4604      	mov	r4, r0
 8005444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005446:	9308      	str	r3, [sp, #32]
 8005448:	3a30      	subs	r2, #48	; 0x30
 800544a:	f100 0301 	add.w	r3, r0, #1
 800544e:	d013      	beq.n	8005478 <_strtod_l+0x238>
 8005450:	9904      	ldr	r1, [sp, #16]
 8005452:	1905      	adds	r5, r0, r4
 8005454:	4419      	add	r1, r3
 8005456:	9104      	str	r1, [sp, #16]
 8005458:	4623      	mov	r3, r4
 800545a:	210a      	movs	r1, #10
 800545c:	42ab      	cmp	r3, r5
 800545e:	d113      	bne.n	8005488 <_strtod_l+0x248>
 8005460:	1823      	adds	r3, r4, r0
 8005462:	2b08      	cmp	r3, #8
 8005464:	f104 0401 	add.w	r4, r4, #1
 8005468:	4404      	add	r4, r0
 800546a:	dc1b      	bgt.n	80054a4 <_strtod_l+0x264>
 800546c:	230a      	movs	r3, #10
 800546e:	9906      	ldr	r1, [sp, #24]
 8005470:	fb03 2301 	mla	r3, r3, r1, r2
 8005474:	9306      	str	r3, [sp, #24]
 8005476:	2300      	movs	r3, #0
 8005478:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800547a:	4618      	mov	r0, r3
 800547c:	1c51      	adds	r1, r2, #1
 800547e:	9119      	str	r1, [sp, #100]	; 0x64
 8005480:	7852      	ldrb	r2, [r2, #1]
 8005482:	e7ca      	b.n	800541a <_strtod_l+0x1da>
 8005484:	4658      	mov	r0, fp
 8005486:	e7d3      	b.n	8005430 <_strtod_l+0x1f0>
 8005488:	2b08      	cmp	r3, #8
 800548a:	dc04      	bgt.n	8005496 <_strtod_l+0x256>
 800548c:	9f06      	ldr	r7, [sp, #24]
 800548e:	434f      	muls	r7, r1
 8005490:	9706      	str	r7, [sp, #24]
 8005492:	3301      	adds	r3, #1
 8005494:	e7e2      	b.n	800545c <_strtod_l+0x21c>
 8005496:	1c5f      	adds	r7, r3, #1
 8005498:	2f10      	cmp	r7, #16
 800549a:	bfde      	ittt	le
 800549c:	9f05      	ldrle	r7, [sp, #20]
 800549e:	434f      	mulle	r7, r1
 80054a0:	9705      	strle	r7, [sp, #20]
 80054a2:	e7f6      	b.n	8005492 <_strtod_l+0x252>
 80054a4:	2c10      	cmp	r4, #16
 80054a6:	bfdf      	itttt	le
 80054a8:	230a      	movle	r3, #10
 80054aa:	9905      	ldrle	r1, [sp, #20]
 80054ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80054b0:	9305      	strle	r3, [sp, #20]
 80054b2:	e7e0      	b.n	8005476 <_strtod_l+0x236>
 80054b4:	2300      	movs	r3, #0
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	2301      	movs	r3, #1
 80054ba:	e77b      	b.n	80053b4 <_strtod_l+0x174>
 80054bc:	2700      	movs	r7, #0
 80054be:	1cb2      	adds	r2, r6, #2
 80054c0:	9219      	str	r2, [sp, #100]	; 0x64
 80054c2:	78b2      	ldrb	r2, [r6, #2]
 80054c4:	e784      	b.n	80053d0 <_strtod_l+0x190>
 80054c6:	bf00      	nop
 80054c8:	0801a994 	.word	0x0801a994
 80054cc:	0801a708 	.word	0x0801a708
 80054d0:	7ff00000 	.word	0x7ff00000
 80054d4:	2701      	movs	r7, #1
 80054d6:	e7f2      	b.n	80054be <_strtod_l+0x27e>
 80054d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054da:	1c51      	adds	r1, r2, #1
 80054dc:	9119      	str	r1, [sp, #100]	; 0x64
 80054de:	7852      	ldrb	r2, [r2, #1]
 80054e0:	2a30      	cmp	r2, #48	; 0x30
 80054e2:	d0f9      	beq.n	80054d8 <_strtod_l+0x298>
 80054e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80054e8:	2908      	cmp	r1, #8
 80054ea:	f63f af77 	bhi.w	80053dc <_strtod_l+0x19c>
 80054ee:	f04f 0e0a 	mov.w	lr, #10
 80054f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80054f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054f8:	9209      	str	r2, [sp, #36]	; 0x24
 80054fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054fc:	1c51      	adds	r1, r2, #1
 80054fe:	9119      	str	r1, [sp, #100]	; 0x64
 8005500:	7852      	ldrb	r2, [r2, #1]
 8005502:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005506:	2d09      	cmp	r5, #9
 8005508:	d935      	bls.n	8005576 <_strtod_l+0x336>
 800550a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800550c:	1b49      	subs	r1, r1, r5
 800550e:	2908      	cmp	r1, #8
 8005510:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005514:	dc02      	bgt.n	800551c <_strtod_l+0x2dc>
 8005516:	4565      	cmp	r5, ip
 8005518:	bfa8      	it	ge
 800551a:	4665      	movge	r5, ip
 800551c:	b107      	cbz	r7, 8005520 <_strtod_l+0x2e0>
 800551e:	426d      	negs	r5, r5
 8005520:	2c00      	cmp	r4, #0
 8005522:	d14c      	bne.n	80055be <_strtod_l+0x37e>
 8005524:	9907      	ldr	r1, [sp, #28]
 8005526:	4301      	orrs	r1, r0
 8005528:	f47f aecb 	bne.w	80052c2 <_strtod_l+0x82>
 800552c:	2b00      	cmp	r3, #0
 800552e:	f47f aee4 	bne.w	80052fa <_strtod_l+0xba>
 8005532:	2a69      	cmp	r2, #105	; 0x69
 8005534:	d026      	beq.n	8005584 <_strtod_l+0x344>
 8005536:	dc23      	bgt.n	8005580 <_strtod_l+0x340>
 8005538:	2a49      	cmp	r2, #73	; 0x49
 800553a:	d023      	beq.n	8005584 <_strtod_l+0x344>
 800553c:	2a4e      	cmp	r2, #78	; 0x4e
 800553e:	f47f aedc 	bne.w	80052fa <_strtod_l+0xba>
 8005542:	499d      	ldr	r1, [pc, #628]	; (80057b8 <_strtod_l+0x578>)
 8005544:	a819      	add	r0, sp, #100	; 0x64
 8005546:	f001 fe17 	bl	8007178 <__match>
 800554a:	2800      	cmp	r0, #0
 800554c:	f43f aed5 	beq.w	80052fa <_strtod_l+0xba>
 8005550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b28      	cmp	r3, #40	; 0x28
 8005556:	d12c      	bne.n	80055b2 <_strtod_l+0x372>
 8005558:	4998      	ldr	r1, [pc, #608]	; (80057bc <_strtod_l+0x57c>)
 800555a:	aa1c      	add	r2, sp, #112	; 0x70
 800555c:	a819      	add	r0, sp, #100	; 0x64
 800555e:	f001 fe1f 	bl	80071a0 <__hexnan>
 8005562:	2805      	cmp	r0, #5
 8005564:	d125      	bne.n	80055b2 <_strtod_l+0x372>
 8005566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005568:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800556c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005570:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005574:	e6a5      	b.n	80052c2 <_strtod_l+0x82>
 8005576:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800557a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800557e:	e7bc      	b.n	80054fa <_strtod_l+0x2ba>
 8005580:	2a6e      	cmp	r2, #110	; 0x6e
 8005582:	e7dc      	b.n	800553e <_strtod_l+0x2fe>
 8005584:	498e      	ldr	r1, [pc, #568]	; (80057c0 <_strtod_l+0x580>)
 8005586:	a819      	add	r0, sp, #100	; 0x64
 8005588:	f001 fdf6 	bl	8007178 <__match>
 800558c:	2800      	cmp	r0, #0
 800558e:	f43f aeb4 	beq.w	80052fa <_strtod_l+0xba>
 8005592:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005594:	498b      	ldr	r1, [pc, #556]	; (80057c4 <_strtod_l+0x584>)
 8005596:	3b01      	subs	r3, #1
 8005598:	a819      	add	r0, sp, #100	; 0x64
 800559a:	9319      	str	r3, [sp, #100]	; 0x64
 800559c:	f001 fdec 	bl	8007178 <__match>
 80055a0:	b910      	cbnz	r0, 80055a8 <_strtod_l+0x368>
 80055a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055a4:	3301      	adds	r3, #1
 80055a6:	9319      	str	r3, [sp, #100]	; 0x64
 80055a8:	f04f 0800 	mov.w	r8, #0
 80055ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80057c8 <_strtod_l+0x588>
 80055b0:	e687      	b.n	80052c2 <_strtod_l+0x82>
 80055b2:	4886      	ldr	r0, [pc, #536]	; (80057cc <_strtod_l+0x58c>)
 80055b4:	f002 fdce 	bl	8008154 <nan>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	e681      	b.n	80052c2 <_strtod_l+0x82>
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	f1bb 0f00 	cmp.w	fp, #0
 80055c4:	bf08      	it	eq
 80055c6:	46a3      	moveq	fp, r4
 80055c8:	1aeb      	subs	r3, r5, r3
 80055ca:	2c10      	cmp	r4, #16
 80055cc:	9806      	ldr	r0, [sp, #24]
 80055ce:	4626      	mov	r6, r4
 80055d0:	9307      	str	r3, [sp, #28]
 80055d2:	bfa8      	it	ge
 80055d4:	2610      	movge	r6, #16
 80055d6:	f7fa ff05 	bl	80003e4 <__aeabi_ui2d>
 80055da:	2c09      	cmp	r4, #9
 80055dc:	4680      	mov	r8, r0
 80055de:	4689      	mov	r9, r1
 80055e0:	dd13      	ble.n	800560a <_strtod_l+0x3ca>
 80055e2:	4b7b      	ldr	r3, [pc, #492]	; (80057d0 <_strtod_l+0x590>)
 80055e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055ec:	f7fa ff74 	bl	80004d8 <__aeabi_dmul>
 80055f0:	4680      	mov	r8, r0
 80055f2:	9805      	ldr	r0, [sp, #20]
 80055f4:	4689      	mov	r9, r1
 80055f6:	f7fa fef5 	bl	80003e4 <__aeabi_ui2d>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fa fdb3 	bl	800016c <__adddf3>
 8005606:	4680      	mov	r8, r0
 8005608:	4689      	mov	r9, r1
 800560a:	2c0f      	cmp	r4, #15
 800560c:	dc36      	bgt.n	800567c <_strtod_l+0x43c>
 800560e:	9b07      	ldr	r3, [sp, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f43f ae56 	beq.w	80052c2 <_strtod_l+0x82>
 8005616:	dd22      	ble.n	800565e <_strtod_l+0x41e>
 8005618:	2b16      	cmp	r3, #22
 800561a:	dc09      	bgt.n	8005630 <_strtod_l+0x3f0>
 800561c:	496c      	ldr	r1, [pc, #432]	; (80057d0 <_strtod_l+0x590>)
 800561e:	4642      	mov	r2, r8
 8005620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005624:	464b      	mov	r3, r9
 8005626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800562a:	f7fa ff55 	bl	80004d8 <__aeabi_dmul>
 800562e:	e7c3      	b.n	80055b8 <_strtod_l+0x378>
 8005630:	9a07      	ldr	r2, [sp, #28]
 8005632:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005636:	4293      	cmp	r3, r2
 8005638:	db20      	blt.n	800567c <_strtod_l+0x43c>
 800563a:	4d65      	ldr	r5, [pc, #404]	; (80057d0 <_strtod_l+0x590>)
 800563c:	f1c4 040f 	rsb	r4, r4, #15
 8005640:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005644:	4642      	mov	r2, r8
 8005646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564a:	464b      	mov	r3, r9
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	9b07      	ldr	r3, [sp, #28]
 8005652:	1b1c      	subs	r4, r3, r4
 8005654:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800565c:	e7e5      	b.n	800562a <_strtod_l+0x3ea>
 800565e:	9b07      	ldr	r3, [sp, #28]
 8005660:	3316      	adds	r3, #22
 8005662:	db0b      	blt.n	800567c <_strtod_l+0x43c>
 8005664:	9b04      	ldr	r3, [sp, #16]
 8005666:	4640      	mov	r0, r8
 8005668:	1b5d      	subs	r5, r3, r5
 800566a:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <_strtod_l+0x590>)
 800566c:	4649      	mov	r1, r9
 800566e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005672:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005676:	f7fb f859 	bl	800072c <__aeabi_ddiv>
 800567a:	e79d      	b.n	80055b8 <_strtod_l+0x378>
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	1ba6      	subs	r6, r4, r6
 8005680:	441e      	add	r6, r3
 8005682:	2e00      	cmp	r6, #0
 8005684:	dd74      	ble.n	8005770 <_strtod_l+0x530>
 8005686:	f016 030f 	ands.w	r3, r6, #15
 800568a:	d00a      	beq.n	80056a2 <_strtod_l+0x462>
 800568c:	4950      	ldr	r1, [pc, #320]	; (80057d0 <_strtod_l+0x590>)
 800568e:	4642      	mov	r2, r8
 8005690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005698:	464b      	mov	r3, r9
 800569a:	f7fa ff1d 	bl	80004d8 <__aeabi_dmul>
 800569e:	4680      	mov	r8, r0
 80056a0:	4689      	mov	r9, r1
 80056a2:	f036 060f 	bics.w	r6, r6, #15
 80056a6:	d052      	beq.n	800574e <_strtod_l+0x50e>
 80056a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80056ac:	dd27      	ble.n	80056fe <_strtod_l+0x4be>
 80056ae:	f04f 0b00 	mov.w	fp, #0
 80056b2:	f8cd b010 	str.w	fp, [sp, #16]
 80056b6:	f8cd b020 	str.w	fp, [sp, #32]
 80056ba:	f8cd b018 	str.w	fp, [sp, #24]
 80056be:	2322      	movs	r3, #34	; 0x22
 80056c0:	f04f 0800 	mov.w	r8, #0
 80056c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80057c8 <_strtod_l+0x588>
 80056c8:	f8ca 3000 	str.w	r3, [sl]
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f43f adf7 	beq.w	80052c2 <_strtod_l+0x82>
 80056d4:	4650      	mov	r0, sl
 80056d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056d8:	f001 fe78 	bl	80073cc <_Bfree>
 80056dc:	4650      	mov	r0, sl
 80056de:	9906      	ldr	r1, [sp, #24]
 80056e0:	f001 fe74 	bl	80073cc <_Bfree>
 80056e4:	4650      	mov	r0, sl
 80056e6:	9904      	ldr	r1, [sp, #16]
 80056e8:	f001 fe70 	bl	80073cc <_Bfree>
 80056ec:	4650      	mov	r0, sl
 80056ee:	9908      	ldr	r1, [sp, #32]
 80056f0:	f001 fe6c 	bl	80073cc <_Bfree>
 80056f4:	4659      	mov	r1, fp
 80056f6:	4650      	mov	r0, sl
 80056f8:	f001 fe68 	bl	80073cc <_Bfree>
 80056fc:	e5e1      	b.n	80052c2 <_strtod_l+0x82>
 80056fe:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <_strtod_l+0x594>)
 8005700:	4640      	mov	r0, r8
 8005702:	9305      	str	r3, [sp, #20]
 8005704:	2300      	movs	r3, #0
 8005706:	4649      	mov	r1, r9
 8005708:	461f      	mov	r7, r3
 800570a:	1136      	asrs	r6, r6, #4
 800570c:	2e01      	cmp	r6, #1
 800570e:	dc21      	bgt.n	8005754 <_strtod_l+0x514>
 8005710:	b10b      	cbz	r3, 8005716 <_strtod_l+0x4d6>
 8005712:	4680      	mov	r8, r0
 8005714:	4689      	mov	r9, r1
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <_strtod_l+0x594>)
 8005718:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800571c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005720:	4642      	mov	r2, r8
 8005722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005726:	464b      	mov	r3, r9
 8005728:	f7fa fed6 	bl	80004d8 <__aeabi_dmul>
 800572c:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <_strtod_l+0x588>)
 800572e:	460a      	mov	r2, r1
 8005730:	400b      	ands	r3, r1
 8005732:	4929      	ldr	r1, [pc, #164]	; (80057d8 <_strtod_l+0x598>)
 8005734:	4680      	mov	r8, r0
 8005736:	428b      	cmp	r3, r1
 8005738:	d8b9      	bhi.n	80056ae <_strtod_l+0x46e>
 800573a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800573e:	428b      	cmp	r3, r1
 8005740:	bf86      	itte	hi
 8005742:	f04f 38ff 	movhi.w	r8, #4294967295
 8005746:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80057dc <_strtod_l+0x59c>
 800574a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800574e:	2300      	movs	r3, #0
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	e07f      	b.n	8005854 <_strtod_l+0x614>
 8005754:	07f2      	lsls	r2, r6, #31
 8005756:	d505      	bpl.n	8005764 <_strtod_l+0x524>
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa febb 	bl	80004d8 <__aeabi_dmul>
 8005762:	2301      	movs	r3, #1
 8005764:	9a05      	ldr	r2, [sp, #20]
 8005766:	3701      	adds	r7, #1
 8005768:	3208      	adds	r2, #8
 800576a:	1076      	asrs	r6, r6, #1
 800576c:	9205      	str	r2, [sp, #20]
 800576e:	e7cd      	b.n	800570c <_strtod_l+0x4cc>
 8005770:	d0ed      	beq.n	800574e <_strtod_l+0x50e>
 8005772:	4276      	negs	r6, r6
 8005774:	f016 020f 	ands.w	r2, r6, #15
 8005778:	d00a      	beq.n	8005790 <_strtod_l+0x550>
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <_strtod_l+0x590>)
 800577c:	4640      	mov	r0, r8
 800577e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005782:	4649      	mov	r1, r9
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fa ffd0 	bl	800072c <__aeabi_ddiv>
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	1136      	asrs	r6, r6, #4
 8005792:	d0dc      	beq.n	800574e <_strtod_l+0x50e>
 8005794:	2e1f      	cmp	r6, #31
 8005796:	dd23      	ble.n	80057e0 <_strtod_l+0x5a0>
 8005798:	f04f 0b00 	mov.w	fp, #0
 800579c:	f8cd b010 	str.w	fp, [sp, #16]
 80057a0:	f8cd b020 	str.w	fp, [sp, #32]
 80057a4:	f8cd b018 	str.w	fp, [sp, #24]
 80057a8:	2322      	movs	r3, #34	; 0x22
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	f8ca 3000 	str.w	r3, [sl]
 80057b6:	e789      	b.n	80056cc <_strtod_l+0x48c>
 80057b8:	0801a6d9 	.word	0x0801a6d9
 80057bc:	0801a71c 	.word	0x0801a71c
 80057c0:	0801a6d1 	.word	0x0801a6d1
 80057c4:	0801a85c 	.word	0x0801a85c
 80057c8:	7ff00000 	.word	0x7ff00000
 80057cc:	08009d5d 	.word	0x08009d5d
 80057d0:	0801aa50 	.word	0x0801aa50
 80057d4:	0801aa28 	.word	0x0801aa28
 80057d8:	7ca00000 	.word	0x7ca00000
 80057dc:	7fefffff 	.word	0x7fefffff
 80057e0:	f016 0310 	ands.w	r3, r6, #16
 80057e4:	bf18      	it	ne
 80057e6:	236a      	movne	r3, #106	; 0x6a
 80057e8:	4640      	mov	r0, r8
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	4649      	mov	r1, r9
 80057ee:	2300      	movs	r3, #0
 80057f0:	4fb0      	ldr	r7, [pc, #704]	; (8005ab4 <_strtod_l+0x874>)
 80057f2:	07f2      	lsls	r2, r6, #31
 80057f4:	d504      	bpl.n	8005800 <_strtod_l+0x5c0>
 80057f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	2301      	movs	r3, #1
 8005800:	1076      	asrs	r6, r6, #1
 8005802:	f107 0708 	add.w	r7, r7, #8
 8005806:	d1f4      	bne.n	80057f2 <_strtod_l+0x5b2>
 8005808:	b10b      	cbz	r3, 800580e <_strtod_l+0x5ce>
 800580a:	4680      	mov	r8, r0
 800580c:	4689      	mov	r9, r1
 800580e:	9b05      	ldr	r3, [sp, #20]
 8005810:	b1c3      	cbz	r3, 8005844 <_strtod_l+0x604>
 8005812:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005816:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800581a:	2b00      	cmp	r3, #0
 800581c:	4649      	mov	r1, r9
 800581e:	dd11      	ble.n	8005844 <_strtod_l+0x604>
 8005820:	2b1f      	cmp	r3, #31
 8005822:	f340 8127 	ble.w	8005a74 <_strtod_l+0x834>
 8005826:	2b34      	cmp	r3, #52	; 0x34
 8005828:	bfd8      	it	le
 800582a:	f04f 33ff 	movle.w	r3, #4294967295
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	bfcf      	iteee	gt
 8005834:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005838:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800583c:	fa03 f202 	lslle.w	r2, r3, r2
 8005840:	ea02 0901 	andle.w	r9, r2, r1
 8005844:	2200      	movs	r2, #0
 8005846:	2300      	movs	r3, #0
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fb f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8005850:	2800      	cmp	r0, #0
 8005852:	d1a1      	bne.n	8005798 <_strtod_l+0x558>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	465a      	mov	r2, fp
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4650      	mov	r0, sl
 800585c:	4623      	mov	r3, r4
 800585e:	9908      	ldr	r1, [sp, #32]
 8005860:	f001 fe1c 	bl	800749c <__s2b>
 8005864:	9008      	str	r0, [sp, #32]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f af21 	beq.w	80056ae <_strtod_l+0x46e>
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	f04f 0b00 	mov.w	fp, #0
 8005872:	1b5d      	subs	r5, r3, r5
 8005874:	9b07      	ldr	r3, [sp, #28]
 8005876:	f8cd b010 	str.w	fp, [sp, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfb4      	ite	lt
 800587e:	462b      	movlt	r3, r5
 8005880:	2300      	movge	r3, #0
 8005882:	930e      	str	r3, [sp, #56]	; 0x38
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800588a:	9314      	str	r3, [sp, #80]	; 0x50
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	4650      	mov	r0, sl
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	f001 fd5b 	bl	800734c <_Balloc>
 8005896:	9006      	str	r0, [sp, #24]
 8005898:	2800      	cmp	r0, #0
 800589a:	f43f af10 	beq.w	80056be <_strtod_l+0x47e>
 800589e:	9b08      	ldr	r3, [sp, #32]
 80058a0:	300c      	adds	r0, #12
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	f103 010c 	add.w	r1, r3, #12
 80058a8:	3202      	adds	r2, #2
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	f001 fd40 	bl	8007330 <memcpy>
 80058b0:	ab1c      	add	r3, sp, #112	; 0x70
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	4650      	mov	r0, sl
 80058be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80058c2:	f002 f92d 	bl	8007b20 <__d2b>
 80058c6:	901a      	str	r0, [sp, #104]	; 0x68
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f43f aef8 	beq.w	80056be <_strtod_l+0x47e>
 80058ce:	2101      	movs	r1, #1
 80058d0:	4650      	mov	r0, sl
 80058d2:	f001 fe7b 	bl	80075cc <__i2b>
 80058d6:	4603      	mov	r3, r0
 80058d8:	9004      	str	r0, [sp, #16]
 80058da:	2800      	cmp	r0, #0
 80058dc:	f43f aeef 	beq.w	80056be <_strtod_l+0x47e>
 80058e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	bfab      	itete	ge
 80058e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80058ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80058ec:	18ee      	addge	r6, r5, r3
 80058ee:	1b5c      	sublt	r4, r3, r5
 80058f0:	9b05      	ldr	r3, [sp, #20]
 80058f2:	bfa8      	it	ge
 80058f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80058f6:	eba5 0503 	sub.w	r5, r5, r3
 80058fa:	4415      	add	r5, r2
 80058fc:	4b6e      	ldr	r3, [pc, #440]	; (8005ab8 <_strtod_l+0x878>)
 80058fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8005902:	bfb8      	it	lt
 8005904:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005906:	429d      	cmp	r5, r3
 8005908:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800590c:	f280 80c4 	bge.w	8005a98 <_strtod_l+0x858>
 8005910:	1b5b      	subs	r3, r3, r5
 8005912:	2b1f      	cmp	r3, #31
 8005914:	f04f 0701 	mov.w	r7, #1
 8005918:	eba2 0203 	sub.w	r2, r2, r3
 800591c:	f300 80b1 	bgt.w	8005a82 <_strtod_l+0x842>
 8005920:	2500      	movs	r5, #0
 8005922:	fa07 f303 	lsl.w	r3, r7, r3
 8005926:	930f      	str	r3, [sp, #60]	; 0x3c
 8005928:	18b7      	adds	r7, r6, r2
 800592a:	9b05      	ldr	r3, [sp, #20]
 800592c:	42be      	cmp	r6, r7
 800592e:	4414      	add	r4, r2
 8005930:	441c      	add	r4, r3
 8005932:	4633      	mov	r3, r6
 8005934:	bfa8      	it	ge
 8005936:	463b      	movge	r3, r7
 8005938:	42a3      	cmp	r3, r4
 800593a:	bfa8      	it	ge
 800593c:	4623      	movge	r3, r4
 800593e:	2b00      	cmp	r3, #0
 8005940:	bfc2      	ittt	gt
 8005942:	1aff      	subgt	r7, r7, r3
 8005944:	1ae4      	subgt	r4, r4, r3
 8005946:	1af6      	subgt	r6, r6, r3
 8005948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd17      	ble.n	800597e <_strtod_l+0x73e>
 800594e:	461a      	mov	r2, r3
 8005950:	4650      	mov	r0, sl
 8005952:	9904      	ldr	r1, [sp, #16]
 8005954:	f001 fef8 	bl	8007748 <__pow5mult>
 8005958:	9004      	str	r0, [sp, #16]
 800595a:	2800      	cmp	r0, #0
 800595c:	f43f aeaf 	beq.w	80056be <_strtod_l+0x47e>
 8005960:	4601      	mov	r1, r0
 8005962:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005964:	4650      	mov	r0, sl
 8005966:	f001 fe47 	bl	80075f8 <__multiply>
 800596a:	9009      	str	r0, [sp, #36]	; 0x24
 800596c:	2800      	cmp	r0, #0
 800596e:	f43f aea6 	beq.w	80056be <_strtod_l+0x47e>
 8005972:	4650      	mov	r0, sl
 8005974:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005976:	f001 fd29 	bl	80073cc <_Bfree>
 800597a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597c:	931a      	str	r3, [sp, #104]	; 0x68
 800597e:	2f00      	cmp	r7, #0
 8005980:	f300 808e 	bgt.w	8005aa0 <_strtod_l+0x860>
 8005984:	9b07      	ldr	r3, [sp, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	dd08      	ble.n	800599c <_strtod_l+0x75c>
 800598a:	4650      	mov	r0, sl
 800598c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800598e:	9906      	ldr	r1, [sp, #24]
 8005990:	f001 feda 	bl	8007748 <__pow5mult>
 8005994:	9006      	str	r0, [sp, #24]
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f ae91 	beq.w	80056be <_strtod_l+0x47e>
 800599c:	2c00      	cmp	r4, #0
 800599e:	dd08      	ble.n	80059b2 <_strtod_l+0x772>
 80059a0:	4622      	mov	r2, r4
 80059a2:	4650      	mov	r0, sl
 80059a4:	9906      	ldr	r1, [sp, #24]
 80059a6:	f001 ff29 	bl	80077fc <__lshift>
 80059aa:	9006      	str	r0, [sp, #24]
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f43f ae86 	beq.w	80056be <_strtod_l+0x47e>
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	dd08      	ble.n	80059c8 <_strtod_l+0x788>
 80059b6:	4632      	mov	r2, r6
 80059b8:	4650      	mov	r0, sl
 80059ba:	9904      	ldr	r1, [sp, #16]
 80059bc:	f001 ff1e 	bl	80077fc <__lshift>
 80059c0:	9004      	str	r0, [sp, #16]
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f43f ae7b 	beq.w	80056be <_strtod_l+0x47e>
 80059c8:	4650      	mov	r0, sl
 80059ca:	9a06      	ldr	r2, [sp, #24]
 80059cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059ce:	f001 ffa1 	bl	8007914 <__mdiff>
 80059d2:	4683      	mov	fp, r0
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f43f ae72 	beq.w	80056be <_strtod_l+0x47e>
 80059da:	2400      	movs	r4, #0
 80059dc:	68c3      	ldr	r3, [r0, #12]
 80059de:	9904      	ldr	r1, [sp, #16]
 80059e0:	60c4      	str	r4, [r0, #12]
 80059e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e4:	f001 ff7a 	bl	80078dc <__mcmp>
 80059e8:	42a0      	cmp	r0, r4
 80059ea:	da6b      	bge.n	8005ac4 <_strtod_l+0x884>
 80059ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ee:	ea53 0308 	orrs.w	r3, r3, r8
 80059f2:	f040 8091 	bne.w	8005b18 <_strtod_l+0x8d8>
 80059f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 808c 	bne.w	8005b18 <_strtod_l+0x8d8>
 8005a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a04:	0d1b      	lsrs	r3, r3, #20
 8005a06:	051b      	lsls	r3, r3, #20
 8005a08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a0c:	f240 8084 	bls.w	8005b18 <_strtod_l+0x8d8>
 8005a10:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005a14:	b91b      	cbnz	r3, 8005a1e <_strtod_l+0x7de>
 8005a16:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	dd7c      	ble.n	8005b18 <_strtod_l+0x8d8>
 8005a1e:	4659      	mov	r1, fp
 8005a20:	2201      	movs	r2, #1
 8005a22:	4650      	mov	r0, sl
 8005a24:	f001 feea 	bl	80077fc <__lshift>
 8005a28:	9904      	ldr	r1, [sp, #16]
 8005a2a:	4683      	mov	fp, r0
 8005a2c:	f001 ff56 	bl	80078dc <__mcmp>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	dd71      	ble.n	8005b18 <_strtod_l+0x8d8>
 8005a34:	9905      	ldr	r1, [sp, #20]
 8005a36:	464b      	mov	r3, r9
 8005a38:	4a20      	ldr	r2, [pc, #128]	; (8005abc <_strtod_l+0x87c>)
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	f000 808c 	beq.w	8005b58 <_strtod_l+0x918>
 8005a40:	ea02 0109 	and.w	r1, r2, r9
 8005a44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a48:	f300 8086 	bgt.w	8005b58 <_strtod_l+0x918>
 8005a4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005a50:	f77f aeaa 	ble.w	80057a8 <_strtod_l+0x568>
 8005a54:	4640      	mov	r0, r8
 8005a56:	4649      	mov	r1, r9
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <_strtod_l+0x880>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f7fa fd3c 	bl	80004d8 <__aeabi_dmul>
 8005a60:	460b      	mov	r3, r1
 8005a62:	4303      	orrs	r3, r0
 8005a64:	bf08      	it	eq
 8005a66:	2322      	moveq	r3, #34	; 0x22
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	bf08      	it	eq
 8005a6e:	f8ca 3000 	streq.w	r3, [sl]
 8005a72:	e62f      	b.n	80056d4 <_strtod_l+0x494>
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	ea03 0808 	and.w	r8, r3, r8
 8005a80:	e6e0      	b.n	8005844 <_strtod_l+0x604>
 8005a82:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a86:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a8a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a8e:	35e2      	adds	r5, #226	; 0xe2
 8005a90:	fa07 f505 	lsl.w	r5, r7, r5
 8005a94:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a96:	e747      	b.n	8005928 <_strtod_l+0x6e8>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a9e:	e743      	b.n	8005928 <_strtod_l+0x6e8>
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	4650      	mov	r0, sl
 8005aa4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005aa6:	f001 fea9 	bl	80077fc <__lshift>
 8005aaa:	901a      	str	r0, [sp, #104]	; 0x68
 8005aac:	2800      	cmp	r0, #0
 8005aae:	f47f af69 	bne.w	8005984 <_strtod_l+0x744>
 8005ab2:	e604      	b.n	80056be <_strtod_l+0x47e>
 8005ab4:	0801a730 	.word	0x0801a730
 8005ab8:	fffffc02 	.word	0xfffffc02
 8005abc:	7ff00000 	.word	0x7ff00000
 8005ac0:	39500000 	.word	0x39500000
 8005ac4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ac8:	d165      	bne.n	8005b96 <_strtod_l+0x956>
 8005aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005acc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ad0:	b35a      	cbz	r2, 8005b2a <_strtod_l+0x8ea>
 8005ad2:	4a99      	ldr	r2, [pc, #612]	; (8005d38 <_strtod_l+0xaf8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d12b      	bne.n	8005b30 <_strtod_l+0x8f0>
 8005ad8:	9b05      	ldr	r3, [sp, #20]
 8005ada:	4641      	mov	r1, r8
 8005adc:	b303      	cbz	r3, 8005b20 <_strtod_l+0x8e0>
 8005ade:	464a      	mov	r2, r9
 8005ae0:	4b96      	ldr	r3, [pc, #600]	; (8005d3c <_strtod_l+0xafc>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	d81b      	bhi.n	8005b26 <_strtod_l+0x8e6>
 8005aee:	0d1b      	lsrs	r3, r3, #20
 8005af0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d119      	bne.n	8005b30 <_strtod_l+0x8f0>
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <_strtod_l+0xb00>)
 8005afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d102      	bne.n	8005b0a <_strtod_l+0x8ca>
 8005b04:	3101      	adds	r1, #1
 8005b06:	f43f adda 	beq.w	80056be <_strtod_l+0x47e>
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	4b8b      	ldr	r3, [pc, #556]	; (8005d3c <_strtod_l+0xafc>)
 8005b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b12:	401a      	ands	r2, r3
 8005b14:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005b18:	9b05      	ldr	r3, [sp, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d19a      	bne.n	8005a54 <_strtod_l+0x814>
 8005b1e:	e5d9      	b.n	80056d4 <_strtod_l+0x494>
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
 8005b24:	e7e8      	b.n	8005af8 <_strtod_l+0x8b8>
 8005b26:	4613      	mov	r3, r2
 8005b28:	e7e6      	b.n	8005af8 <_strtod_l+0x8b8>
 8005b2a:	ea53 0308 	orrs.w	r3, r3, r8
 8005b2e:	d081      	beq.n	8005a34 <_strtod_l+0x7f4>
 8005b30:	b1e5      	cbz	r5, 8005b6c <_strtod_l+0x92c>
 8005b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b34:	421d      	tst	r5, r3
 8005b36:	d0ef      	beq.n	8005b18 <_strtod_l+0x8d8>
 8005b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	9a05      	ldr	r2, [sp, #20]
 8005b40:	b1c3      	cbz	r3, 8005b74 <_strtod_l+0x934>
 8005b42:	f7ff fb5b 	bl	80051fc <sulp>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b4e:	f7fa fb0d 	bl	800016c <__adddf3>
 8005b52:	4680      	mov	r8, r0
 8005b54:	4689      	mov	r9, r1
 8005b56:	e7df      	b.n	8005b18 <_strtod_l+0x8d8>
 8005b58:	4013      	ands	r3, r2
 8005b5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b5e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005b62:	f04f 38ff 	mov.w	r8, #4294967295
 8005b66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005b6a:	e7d5      	b.n	8005b18 <_strtod_l+0x8d8>
 8005b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b6e:	ea13 0f08 	tst.w	r3, r8
 8005b72:	e7e0      	b.n	8005b36 <_strtod_l+0x8f6>
 8005b74:	f7ff fb42 	bl	80051fc <sulp>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b80:	f7fa faf2 	bl	8000168 <__aeabi_dsub>
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	4680      	mov	r8, r0
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	f7fa ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d0c1      	beq.n	8005b18 <_strtod_l+0x8d8>
 8005b94:	e608      	b.n	80057a8 <_strtod_l+0x568>
 8005b96:	4658      	mov	r0, fp
 8005b98:	9904      	ldr	r1, [sp, #16]
 8005b9a:	f002 f81d 	bl	8007bd8 <__ratio>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	f7fa ff12 	bl	80009d0 <__aeabi_dcmple>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d070      	beq.n	8005c92 <_strtod_l+0xa52>
 8005bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d042      	beq.n	8005c3c <_strtod_l+0x9fc>
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	4f62      	ldr	r7, [pc, #392]	; (8005d44 <_strtod_l+0xb04>)
 8005bba:	4d62      	ldr	r5, [pc, #392]	; (8005d44 <_strtod_l+0xb04>)
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	0d1b      	lsrs	r3, r3, #20
 8005bc4:	051b      	lsls	r3, r3, #20
 8005bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bca:	4b5f      	ldr	r3, [pc, #380]	; (8005d48 <_strtod_l+0xb08>)
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	f040 80c3 	bne.w	8005d58 <_strtod_l+0xb18>
 8005bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005bda:	4649      	mov	r1, r9
 8005bdc:	f001 ff26 	bl	8007a2c <__ulp>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa fc76 	bl	80004d8 <__aeabi_dmul>
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	f7fa fabc 	bl	800016c <__adddf3>
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4951      	ldr	r1, [pc, #324]	; (8005d3c <_strtod_l+0xafc>)
 8005bf8:	4a54      	ldr	r2, [pc, #336]	; (8005d4c <_strtod_l+0xb0c>)
 8005bfa:	4019      	ands	r1, r3
 8005bfc:	4291      	cmp	r1, r2
 8005bfe:	4680      	mov	r8, r0
 8005c00:	d95d      	bls.n	8005cbe <_strtod_l+0xa7e>
 8005c02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c04:	4b4e      	ldr	r3, [pc, #312]	; (8005d40 <_strtod_l+0xb00>)
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d103      	bne.n	8005c12 <_strtod_l+0x9d2>
 8005c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f43f ad56 	beq.w	80056be <_strtod_l+0x47e>
 8005c12:	f04f 38ff 	mov.w	r8, #4294967295
 8005c16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005d40 <_strtod_l+0xb00>
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c1e:	f001 fbd5 	bl	80073cc <_Bfree>
 8005c22:	4650      	mov	r0, sl
 8005c24:	9906      	ldr	r1, [sp, #24]
 8005c26:	f001 fbd1 	bl	80073cc <_Bfree>
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	9904      	ldr	r1, [sp, #16]
 8005c2e:	f001 fbcd 	bl	80073cc <_Bfree>
 8005c32:	4659      	mov	r1, fp
 8005c34:	4650      	mov	r0, sl
 8005c36:	f001 fbc9 	bl	80073cc <_Bfree>
 8005c3a:	e627      	b.n	800588c <_strtod_l+0x64c>
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	d119      	bne.n	8005c76 <_strtod_l+0xa36>
 8005c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c48:	b9e3      	cbnz	r3, 8005c84 <_strtod_l+0xa44>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	4b3c      	ldr	r3, [pc, #240]	; (8005d44 <_strtod_l+0xb04>)
 8005c52:	f7fa feb3 	bl	80009bc <__aeabi_dcmplt>
 8005c56:	b9c8      	cbnz	r0, 8005c8c <_strtod_l+0xa4c>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <_strtod_l+0xb10>)
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c6c:	9416      	str	r4, [sp, #88]	; 0x58
 8005c6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005c74:	e7a2      	b.n	8005bbc <_strtod_l+0x97c>
 8005c76:	f1b8 0f01 	cmp.w	r8, #1
 8005c7a:	d103      	bne.n	8005c84 <_strtod_l+0xa44>
 8005c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f43f ad92 	beq.w	80057a8 <_strtod_l+0x568>
 8005c84:	2600      	movs	r6, #0
 8005c86:	2400      	movs	r4, #0
 8005c88:	4f32      	ldr	r7, [pc, #200]	; (8005d54 <_strtod_l+0xb14>)
 8005c8a:	e796      	b.n	8005bba <_strtod_l+0x97a>
 8005c8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005c8e:	4d30      	ldr	r5, [pc, #192]	; (8005d50 <_strtod_l+0xb10>)
 8005c90:	e7ea      	b.n	8005c68 <_strtod_l+0xa28>
 8005c92:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <_strtod_l+0xb10>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	b933      	cbnz	r3, 8005cb4 <_strtod_l+0xa74>
 8005ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005caa:	9010      	str	r0, [sp, #64]	; 0x40
 8005cac:	9311      	str	r3, [sp, #68]	; 0x44
 8005cae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cb2:	e783      	b.n	8005bbc <_strtod_l+0x97c>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005cbc:	e7f7      	b.n	8005cae <_strtod_l+0xa6e>
 8005cbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1a8      	bne.n	8005c1a <_strtod_l+0x9da>
 8005cc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cce:	0d1b      	lsrs	r3, r3, #20
 8005cd0:	051b      	lsls	r3, r3, #20
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d1a1      	bne.n	8005c1a <_strtod_l+0x9da>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fb f9c3 	bl	8001064 <__aeabi_d2lz>
 8005cde:	f7fa fbcd 	bl	800047c <__aeabi_l2d>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7fa fa3d 	bl	8000168 <__aeabi_dsub>
 8005cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cf4:	ea43 0308 	orr.w	r3, r3, r8
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	d066      	beq.n	8005dce <_strtod_l+0xb8e>
 8005d00:	a309      	add	r3, pc, #36	; (adr r3, 8005d28 <_strtod_l+0xae8>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fe59 	bl	80009bc <__aeabi_dcmplt>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f47f ace2 	bne.w	80056d4 <_strtod_l+0x494>
 8005d10:	a307      	add	r3, pc, #28	; (adr r3, 8005d30 <_strtod_l+0xaf0>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fe6d 	bl	80009f8 <__aeabi_dcmpgt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f43f af7b 	beq.w	8005c1a <_strtod_l+0x9da>
 8005d24:	e4d6      	b.n	80056d4 <_strtod_l+0x494>
 8005d26:	bf00      	nop
 8005d28:	94a03595 	.word	0x94a03595
 8005d2c:	3fdfffff 	.word	0x3fdfffff
 8005d30:	35afe535 	.word	0x35afe535
 8005d34:	3fe00000 	.word	0x3fe00000
 8005d38:	000fffff 	.word	0x000fffff
 8005d3c:	7ff00000 	.word	0x7ff00000
 8005d40:	7fefffff 	.word	0x7fefffff
 8005d44:	3ff00000 	.word	0x3ff00000
 8005d48:	7fe00000 	.word	0x7fe00000
 8005d4c:	7c9fffff 	.word	0x7c9fffff
 8005d50:	3fe00000 	.word	0x3fe00000
 8005d54:	bff00000 	.word	0xbff00000
 8005d58:	9b05      	ldr	r3, [sp, #20]
 8005d5a:	b313      	cbz	r3, 8005da2 <_strtod_l+0xb62>
 8005d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d62:	d81e      	bhi.n	8005da2 <_strtod_l+0xb62>
 8005d64:	a326      	add	r3, pc, #152	; (adr r3, 8005e00 <_strtod_l+0xbc0>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	f7fa fe2f 	bl	80009d0 <__aeabi_dcmple>
 8005d72:	b190      	cbz	r0, 8005d9a <_strtod_l+0xb5a>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7fa fe86 	bl	8000a88 <__aeabi_d2uiz>
 8005d7c:	2801      	cmp	r0, #1
 8005d7e:	bf38      	it	cc
 8005d80:	2001      	movcc	r0, #1
 8005d82:	f7fa fb2f 	bl	80003e4 <__aeabi_ui2d>
 8005d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	b9d3      	cbnz	r3, 8005dc4 <_strtod_l+0xb84>
 8005d8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d92:	9012      	str	r0, [sp, #72]	; 0x48
 8005d94:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005d9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d9c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005da0:	1a9f      	subs	r7, r3, r2
 8005da2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005da6:	f001 fe41 	bl	8007a2c <__ulp>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	f7fa fb91 	bl	80004d8 <__aeabi_dmul>
 8005db6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dba:	f7fa f9d7 	bl	800016c <__adddf3>
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	e77e      	b.n	8005cc2 <_strtod_l+0xa82>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005dcc:	e7e3      	b.n	8005d96 <_strtod_l+0xb56>
 8005dce:	a30e      	add	r3, pc, #56	; (adr r3, 8005e08 <_strtod_l+0xbc8>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fdf2 	bl	80009bc <__aeabi_dcmplt>
 8005dd8:	e7a1      	b.n	8005d1e <_strtod_l+0xade>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8005dde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005de0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	f7ff ba71 	b.w	80052ca <_strtod_l+0x8a>
 8005de8:	2a65      	cmp	r2, #101	; 0x65
 8005dea:	f43f ab63 	beq.w	80054b4 <_strtod_l+0x274>
 8005dee:	2a45      	cmp	r2, #69	; 0x45
 8005df0:	f43f ab60 	beq.w	80054b4 <_strtod_l+0x274>
 8005df4:	2301      	movs	r3, #1
 8005df6:	f7ff bb95 	b.w	8005524 <_strtod_l+0x2e4>
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w
 8005e00:	ffc00000 	.word	0xffc00000
 8005e04:	41dfffff 	.word	0x41dfffff
 8005e08:	94a03595 	.word	0x94a03595
 8005e0c:	3fcfffff 	.word	0x3fcfffff

08005e10 <_strtod_r>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <_strtod_r+0x8>)
 8005e12:	f7ff ba15 	b.w	8005240 <_strtod_l>
 8005e16:	bf00      	nop
 8005e18:	2000007c 	.word	0x2000007c

08005e1c <_strtol_l.constprop.0>:
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e22:	4680      	mov	r8, r0
 8005e24:	d001      	beq.n	8005e2a <_strtol_l.constprop.0+0xe>
 8005e26:	2b24      	cmp	r3, #36	; 0x24
 8005e28:	d906      	bls.n	8005e38 <_strtol_l.constprop.0+0x1c>
 8005e2a:	f7fe fb09 	bl	8004440 <__errno>
 8005e2e:	2316      	movs	r3, #22
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	2000      	movs	r0, #0
 8005e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4f35      	ldr	r7, [pc, #212]	; (8005f10 <_strtol_l.constprop.0+0xf4>)
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e42:	5de6      	ldrb	r6, [r4, r7]
 8005e44:	f016 0608 	ands.w	r6, r6, #8
 8005e48:	d1f8      	bne.n	8005e3c <_strtol_l.constprop.0+0x20>
 8005e4a:	2c2d      	cmp	r4, #45	; 0x2d
 8005e4c:	d12f      	bne.n	8005eae <_strtol_l.constprop.0+0x92>
 8005e4e:	2601      	movs	r6, #1
 8005e50:	782c      	ldrb	r4, [r5, #0]
 8005e52:	1c85      	adds	r5, r0, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d057      	beq.n	8005f08 <_strtol_l.constprop.0+0xec>
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d109      	bne.n	8005e70 <_strtol_l.constprop.0+0x54>
 8005e5c:	2c30      	cmp	r4, #48	; 0x30
 8005e5e:	d107      	bne.n	8005e70 <_strtol_l.constprop.0+0x54>
 8005e60:	7828      	ldrb	r0, [r5, #0]
 8005e62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e66:	2858      	cmp	r0, #88	; 0x58
 8005e68:	d149      	bne.n	8005efe <_strtol_l.constprop.0+0xe2>
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	786c      	ldrb	r4, [r5, #1]
 8005e6e:	3502      	adds	r5, #2
 8005e70:	2700      	movs	r7, #0
 8005e72:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005e76:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005e7a:	fbbe f9f3 	udiv	r9, lr, r3
 8005e7e:	4638      	mov	r0, r7
 8005e80:	fb03 ea19 	mls	sl, r3, r9, lr
 8005e84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e88:	f1bc 0f09 	cmp.w	ip, #9
 8005e8c:	d814      	bhi.n	8005eb8 <_strtol_l.constprop.0+0x9c>
 8005e8e:	4664      	mov	r4, ip
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	dd22      	ble.n	8005eda <_strtol_l.constprop.0+0xbe>
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	db1d      	blt.n	8005ed4 <_strtol_l.constprop.0+0xb8>
 8005e98:	4581      	cmp	r9, r0
 8005e9a:	d31b      	bcc.n	8005ed4 <_strtol_l.constprop.0+0xb8>
 8005e9c:	d101      	bne.n	8005ea2 <_strtol_l.constprop.0+0x86>
 8005e9e:	45a2      	cmp	sl, r4
 8005ea0:	db18      	blt.n	8005ed4 <_strtol_l.constprop.0+0xb8>
 8005ea2:	2701      	movs	r7, #1
 8005ea4:	fb00 4003 	mla	r0, r0, r3, r4
 8005ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eac:	e7ea      	b.n	8005e84 <_strtol_l.constprop.0+0x68>
 8005eae:	2c2b      	cmp	r4, #43	; 0x2b
 8005eb0:	bf04      	itt	eq
 8005eb2:	782c      	ldrbeq	r4, [r5, #0]
 8005eb4:	1c85      	addeq	r5, r0, #2
 8005eb6:	e7cd      	b.n	8005e54 <_strtol_l.constprop.0+0x38>
 8005eb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ebc:	f1bc 0f19 	cmp.w	ip, #25
 8005ec0:	d801      	bhi.n	8005ec6 <_strtol_l.constprop.0+0xaa>
 8005ec2:	3c37      	subs	r4, #55	; 0x37
 8005ec4:	e7e4      	b.n	8005e90 <_strtol_l.constprop.0+0x74>
 8005ec6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005eca:	f1bc 0f19 	cmp.w	ip, #25
 8005ece:	d804      	bhi.n	8005eda <_strtol_l.constprop.0+0xbe>
 8005ed0:	3c57      	subs	r4, #87	; 0x57
 8005ed2:	e7dd      	b.n	8005e90 <_strtol_l.constprop.0+0x74>
 8005ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ed8:	e7e6      	b.n	8005ea8 <_strtol_l.constprop.0+0x8c>
 8005eda:	2f00      	cmp	r7, #0
 8005edc:	da07      	bge.n	8005eee <_strtol_l.constprop.0+0xd2>
 8005ede:	2322      	movs	r3, #34	; 0x22
 8005ee0:	4670      	mov	r0, lr
 8005ee2:	f8c8 3000 	str.w	r3, [r8]
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	d0a4      	beq.n	8005e34 <_strtol_l.constprop.0+0x18>
 8005eea:	1e69      	subs	r1, r5, #1
 8005eec:	e005      	b.n	8005efa <_strtol_l.constprop.0+0xde>
 8005eee:	b106      	cbz	r6, 8005ef2 <_strtol_l.constprop.0+0xd6>
 8005ef0:	4240      	negs	r0, r0
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d09e      	beq.n	8005e34 <_strtol_l.constprop.0+0x18>
 8005ef6:	2f00      	cmp	r7, #0
 8005ef8:	d1f7      	bne.n	8005eea <_strtol_l.constprop.0+0xce>
 8005efa:	6011      	str	r1, [r2, #0]
 8005efc:	e79a      	b.n	8005e34 <_strtol_l.constprop.0+0x18>
 8005efe:	2430      	movs	r4, #48	; 0x30
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1b5      	bne.n	8005e70 <_strtol_l.constprop.0+0x54>
 8005f04:	2308      	movs	r3, #8
 8005f06:	e7b3      	b.n	8005e70 <_strtol_l.constprop.0+0x54>
 8005f08:	2c30      	cmp	r4, #48	; 0x30
 8005f0a:	d0a9      	beq.n	8005e60 <_strtol_l.constprop.0+0x44>
 8005f0c:	230a      	movs	r3, #10
 8005f0e:	e7af      	b.n	8005e70 <_strtol_l.constprop.0+0x54>
 8005f10:	0801a759 	.word	0x0801a759

08005f14 <_strtol_r>:
 8005f14:	f7ff bf82 	b.w	8005e1c <_strtol_l.constprop.0>

08005f18 <quorem>:
 8005f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	6903      	ldr	r3, [r0, #16]
 8005f1e:	690c      	ldr	r4, [r1, #16]
 8005f20:	4607      	mov	r7, r0
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	f2c0 8082 	blt.w	800602c <quorem+0x114>
 8005f28:	3c01      	subs	r4, #1
 8005f2a:	f100 0514 	add.w	r5, r0, #20
 8005f2e:	f101 0814 	add.w	r8, r1, #20
 8005f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f40:	3301      	adds	r3, #1
 8005f42:	429a      	cmp	r2, r3
 8005f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f50:	d331      	bcc.n	8005fb6 <quorem+0x9e>
 8005f52:	f04f 0e00 	mov.w	lr, #0
 8005f56:	4640      	mov	r0, r8
 8005f58:	46ac      	mov	ip, r5
 8005f5a:	46f2      	mov	sl, lr
 8005f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f60:	b293      	uxth	r3, r2
 8005f62:	fb06 e303 	mla	r3, r6, r3, lr
 8005f66:	0c12      	lsrs	r2, r2, #16
 8005f68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005f72:	ebaa 0303 	sub.w	r3, sl, r3
 8005f76:	f8dc a000 	ldr.w	sl, [ip]
 8005f7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f7e:	fa1f fa8a 	uxth.w	sl, sl
 8005f82:	4453      	add	r3, sl
 8005f84:	f8dc a000 	ldr.w	sl, [ip]
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f98:	4581      	cmp	r9, r0
 8005f9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f9e:	f84c 3b04 	str.w	r3, [ip], #4
 8005fa2:	d2db      	bcs.n	8005f5c <quorem+0x44>
 8005fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fa8:	b92b      	cbnz	r3, 8005fb6 <quorem+0x9e>
 8005faa:	9b01      	ldr	r3, [sp, #4]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	429d      	cmp	r5, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	d32f      	bcc.n	8006014 <quorem+0xfc>
 8005fb4:	613c      	str	r4, [r7, #16]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f001 fc90 	bl	80078dc <__mcmp>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	db25      	blt.n	800600c <quorem+0xf4>
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f04f 0c00 	mov.w	ip, #0
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	f858 1b04 	ldr.w	r1, [r8], #4
 8005fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8005fd0:	b28b      	uxth	r3, r1
 8005fd2:	ebac 0303 	sub.w	r3, ip, r3
 8005fd6:	fa1f f28e 	uxth.w	r2, lr
 8005fda:	4413      	add	r3, r2
 8005fdc:	0c0a      	lsrs	r2, r1, #16
 8005fde:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fe2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fec:	45c1      	cmp	r9, r8
 8005fee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ff2:	f840 3b04 	str.w	r3, [r0], #4
 8005ff6:	d2e7      	bcs.n	8005fc8 <quorem+0xb0>
 8005ff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006000:	b922      	cbnz	r2, 800600c <quorem+0xf4>
 8006002:	3b04      	subs	r3, #4
 8006004:	429d      	cmp	r5, r3
 8006006:	461a      	mov	r2, r3
 8006008:	d30a      	bcc.n	8006020 <quorem+0x108>
 800600a:	613c      	str	r4, [r7, #16]
 800600c:	4630      	mov	r0, r6
 800600e:	b003      	add	sp, #12
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	3b04      	subs	r3, #4
 8006018:	2a00      	cmp	r2, #0
 800601a:	d1cb      	bne.n	8005fb4 <quorem+0x9c>
 800601c:	3c01      	subs	r4, #1
 800601e:	e7c6      	b.n	8005fae <quorem+0x96>
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	3b04      	subs	r3, #4
 8006024:	2a00      	cmp	r2, #0
 8006026:	d1f0      	bne.n	800600a <quorem+0xf2>
 8006028:	3c01      	subs	r4, #1
 800602a:	e7eb      	b.n	8006004 <quorem+0xec>
 800602c:	2000      	movs	r0, #0
 800602e:	e7ee      	b.n	800600e <quorem+0xf6>

08006030 <_dtoa_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	4616      	mov	r6, r2
 8006036:	461f      	mov	r7, r3
 8006038:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800603a:	b099      	sub	sp, #100	; 0x64
 800603c:	4605      	mov	r5, r0
 800603e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006042:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006046:	b974      	cbnz	r4, 8006066 <_dtoa_r+0x36>
 8006048:	2010      	movs	r0, #16
 800604a:	f001 f949 	bl	80072e0 <malloc>
 800604e:	4602      	mov	r2, r0
 8006050:	6268      	str	r0, [r5, #36]	; 0x24
 8006052:	b920      	cbnz	r0, 800605e <_dtoa_r+0x2e>
 8006054:	21ea      	movs	r1, #234	; 0xea
 8006056:	4ba8      	ldr	r3, [pc, #672]	; (80062f8 <_dtoa_r+0x2c8>)
 8006058:	48a8      	ldr	r0, [pc, #672]	; (80062fc <_dtoa_r+0x2cc>)
 800605a:	f002 f8b3 	bl	80081c4 <__assert_func>
 800605e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006062:	6004      	str	r4, [r0, #0]
 8006064:	60c4      	str	r4, [r0, #12]
 8006066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	b151      	cbz	r1, 8006082 <_dtoa_r+0x52>
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	2301      	movs	r3, #1
 8006070:	4093      	lsls	r3, r2
 8006072:	604a      	str	r2, [r1, #4]
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	4628      	mov	r0, r5
 8006078:	f001 f9a8 	bl	80073cc <_Bfree>
 800607c:	2200      	movs	r2, #0
 800607e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	1e3b      	subs	r3, r7, #0
 8006084:	bfaf      	iteee	ge
 8006086:	2300      	movge	r3, #0
 8006088:	2201      	movlt	r2, #1
 800608a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800608e:	9305      	strlt	r3, [sp, #20]
 8006090:	bfa8      	it	ge
 8006092:	f8c8 3000 	strge.w	r3, [r8]
 8006096:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800609a:	4b99      	ldr	r3, [pc, #612]	; (8006300 <_dtoa_r+0x2d0>)
 800609c:	bfb8      	it	lt
 800609e:	f8c8 2000 	strlt.w	r2, [r8]
 80060a2:	ea33 0309 	bics.w	r3, r3, r9
 80060a6:	d119      	bne.n	80060dc <_dtoa_r+0xac>
 80060a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80060ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060b4:	4333      	orrs	r3, r6
 80060b6:	f000 857f 	beq.w	8006bb8 <_dtoa_r+0xb88>
 80060ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060bc:	b953      	cbnz	r3, 80060d4 <_dtoa_r+0xa4>
 80060be:	4b91      	ldr	r3, [pc, #580]	; (8006304 <_dtoa_r+0x2d4>)
 80060c0:	e022      	b.n	8006108 <_dtoa_r+0xd8>
 80060c2:	4b91      	ldr	r3, [pc, #580]	; (8006308 <_dtoa_r+0x2d8>)
 80060c4:	9303      	str	r3, [sp, #12]
 80060c6:	3308      	adds	r3, #8
 80060c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	9803      	ldr	r0, [sp, #12]
 80060ce:	b019      	add	sp, #100	; 0x64
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <_dtoa_r+0x2d4>)
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	3303      	adds	r3, #3
 80060da:	e7f5      	b.n	80060c8 <_dtoa_r+0x98>
 80060dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80060e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	2300      	movs	r3, #0
 80060ec:	f7fa fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80060f0:	4680      	mov	r8, r0
 80060f2:	b158      	cbz	r0, 800610c <_dtoa_r+0xdc>
 80060f4:	2301      	movs	r3, #1
 80060f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8558 	beq.w	8006bb2 <_dtoa_r+0xb82>
 8006102:	4882      	ldr	r0, [pc, #520]	; (800630c <_dtoa_r+0x2dc>)
 8006104:	6018      	str	r0, [r3, #0]
 8006106:	1e43      	subs	r3, r0, #1
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	e7df      	b.n	80060cc <_dtoa_r+0x9c>
 800610c:	ab16      	add	r3, sp, #88	; 0x58
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	ab17      	add	r3, sp, #92	; 0x5c
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4628      	mov	r0, r5
 8006116:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800611a:	f001 fd01 	bl	8007b20 <__d2b>
 800611e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006122:	4683      	mov	fp, r0
 8006124:	2c00      	cmp	r4, #0
 8006126:	d07f      	beq.n	8006228 <_dtoa_r+0x1f8>
 8006128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800612c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800612e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006136:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800613a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800613e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006142:	2200      	movs	r2, #0
 8006144:	4b72      	ldr	r3, [pc, #456]	; (8006310 <_dtoa_r+0x2e0>)
 8006146:	f7fa f80f 	bl	8000168 <__aeabi_dsub>
 800614a:	a365      	add	r3, pc, #404	; (adr r3, 80062e0 <_dtoa_r+0x2b0>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa f9c2 	bl	80004d8 <__aeabi_dmul>
 8006154:	a364      	add	r3, pc, #400	; (adr r3, 80062e8 <_dtoa_r+0x2b8>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f807 	bl	800016c <__adddf3>
 800615e:	4606      	mov	r6, r0
 8006160:	4620      	mov	r0, r4
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa f94e 	bl	8000404 <__aeabi_i2d>
 8006168:	a361      	add	r3, pc, #388	; (adr r3, 80062f0 <_dtoa_r+0x2c0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa f9b3 	bl	80004d8 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7f9 fff7 	bl	800016c <__adddf3>
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	f7fa fc59 	bl	8000a38 <__aeabi_d2iz>
 8006186:	2200      	movs	r2, #0
 8006188:	4682      	mov	sl, r0
 800618a:	2300      	movs	r3, #0
 800618c:	4630      	mov	r0, r6
 800618e:	4639      	mov	r1, r7
 8006190:	f7fa fc14 	bl	80009bc <__aeabi_dcmplt>
 8006194:	b148      	cbz	r0, 80061aa <_dtoa_r+0x17a>
 8006196:	4650      	mov	r0, sl
 8006198:	f7fa f934 	bl	8000404 <__aeabi_i2d>
 800619c:	4632      	mov	r2, r6
 800619e:	463b      	mov	r3, r7
 80061a0:	f7fa fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80061a4:	b908      	cbnz	r0, 80061aa <_dtoa_r+0x17a>
 80061a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061aa:	f1ba 0f16 	cmp.w	sl, #22
 80061ae:	d858      	bhi.n	8006262 <_dtoa_r+0x232>
 80061b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061b4:	4b57      	ldr	r3, [pc, #348]	; (8006314 <_dtoa_r+0x2e4>)
 80061b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa fbfd 	bl	80009bc <__aeabi_dcmplt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d04f      	beq.n	8006266 <_dtoa_r+0x236>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80061ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061d0:	1b1c      	subs	r4, r3, r4
 80061d2:	1e63      	subs	r3, r4, #1
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	bf49      	itett	mi
 80061d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80061dc:	2300      	movpl	r3, #0
 80061de:	9306      	strmi	r3, [sp, #24]
 80061e0:	2300      	movmi	r3, #0
 80061e2:	bf54      	ite	pl
 80061e4:	9306      	strpl	r3, [sp, #24]
 80061e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	db3d      	blt.n	800626a <_dtoa_r+0x23a>
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061f4:	4453      	add	r3, sl
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	2300      	movs	r3, #0
 80061fa:	930a      	str	r3, [sp, #40]	; 0x28
 80061fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061fe:	2b09      	cmp	r3, #9
 8006200:	f200 808c 	bhi.w	800631c <_dtoa_r+0x2ec>
 8006204:	2b05      	cmp	r3, #5
 8006206:	bfc4      	itt	gt
 8006208:	3b04      	subgt	r3, #4
 800620a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800620c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620e:	bfc8      	it	gt
 8006210:	2400      	movgt	r4, #0
 8006212:	f1a3 0302 	sub.w	r3, r3, #2
 8006216:	bfd8      	it	le
 8006218:	2401      	movle	r4, #1
 800621a:	2b03      	cmp	r3, #3
 800621c:	f200 808a 	bhi.w	8006334 <_dtoa_r+0x304>
 8006220:	e8df f003 	tbb	[pc, r3]
 8006224:	5b4d4f2d 	.word	0x5b4d4f2d
 8006228:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800622c:	441c      	add	r4, r3
 800622e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006232:	2b20      	cmp	r3, #32
 8006234:	bfc3      	ittte	gt
 8006236:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800623a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800623e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006242:	f1c3 0320 	rsble	r3, r3, #32
 8006246:	bfc6      	itte	gt
 8006248:	fa26 f000 	lsrgt.w	r0, r6, r0
 800624c:	4318      	orrgt	r0, r3
 800624e:	fa06 f003 	lslle.w	r0, r6, r3
 8006252:	f7fa f8c7 	bl	80003e4 <__aeabi_ui2d>
 8006256:	2301      	movs	r3, #1
 8006258:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800625c:	3c01      	subs	r4, #1
 800625e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006260:	e76f      	b.n	8006142 <_dtoa_r+0x112>
 8006262:	2301      	movs	r3, #1
 8006264:	e7b2      	b.n	80061cc <_dtoa_r+0x19c>
 8006266:	900f      	str	r0, [sp, #60]	; 0x3c
 8006268:	e7b1      	b.n	80061ce <_dtoa_r+0x19e>
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	eba3 030a 	sub.w	r3, r3, sl
 8006270:	9306      	str	r3, [sp, #24]
 8006272:	f1ca 0300 	rsb	r3, sl, #0
 8006276:	930a      	str	r3, [sp, #40]	; 0x28
 8006278:	2300      	movs	r3, #0
 800627a:	930e      	str	r3, [sp, #56]	; 0x38
 800627c:	e7be      	b.n	80061fc <_dtoa_r+0x1cc>
 800627e:	2300      	movs	r3, #0
 8006280:	930b      	str	r3, [sp, #44]	; 0x2c
 8006282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006284:	2b00      	cmp	r3, #0
 8006286:	dc58      	bgt.n	800633a <_dtoa_r+0x30a>
 8006288:	f04f 0901 	mov.w	r9, #1
 800628c:	464b      	mov	r3, r9
 800628e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006292:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006296:	2200      	movs	r2, #0
 8006298:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800629a:	6042      	str	r2, [r0, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	f102 0614 	add.w	r6, r2, #20
 80062a2:	429e      	cmp	r6, r3
 80062a4:	6841      	ldr	r1, [r0, #4]
 80062a6:	d94e      	bls.n	8006346 <_dtoa_r+0x316>
 80062a8:	4628      	mov	r0, r5
 80062aa:	f001 f84f 	bl	800734c <_Balloc>
 80062ae:	9003      	str	r0, [sp, #12]
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d14c      	bne.n	800634e <_dtoa_r+0x31e>
 80062b4:	4602      	mov	r2, r0
 80062b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <_dtoa_r+0x2e8>)
 80062bc:	e6cc      	b.n	8006058 <_dtoa_r+0x28>
 80062be:	2301      	movs	r3, #1
 80062c0:	e7de      	b.n	8006280 <_dtoa_r+0x250>
 80062c2:	2300      	movs	r3, #0
 80062c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80062c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062c8:	eb0a 0903 	add.w	r9, sl, r3
 80062cc:	f109 0301 	add.w	r3, r9, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	9308      	str	r3, [sp, #32]
 80062d4:	bfb8      	it	lt
 80062d6:	2301      	movlt	r3, #1
 80062d8:	e7dd      	b.n	8006296 <_dtoa_r+0x266>
 80062da:	2301      	movs	r3, #1
 80062dc:	e7f2      	b.n	80062c4 <_dtoa_r+0x294>
 80062de:	bf00      	nop
 80062e0:	636f4361 	.word	0x636f4361
 80062e4:	3fd287a7 	.word	0x3fd287a7
 80062e8:	8b60c8b3 	.word	0x8b60c8b3
 80062ec:	3fc68a28 	.word	0x3fc68a28
 80062f0:	509f79fb 	.word	0x509f79fb
 80062f4:	3fd34413 	.word	0x3fd34413
 80062f8:	0801a866 	.word	0x0801a866
 80062fc:	0801a87d 	.word	0x0801a87d
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	0801a862 	.word	0x0801a862
 8006308:	0801a859 	.word	0x0801a859
 800630c:	0801a6dd 	.word	0x0801a6dd
 8006310:	3ff80000 	.word	0x3ff80000
 8006314:	0801aa50 	.word	0x0801aa50
 8006318:	0801a8fb 	.word	0x0801a8fb
 800631c:	2401      	movs	r4, #1
 800631e:	2300      	movs	r3, #0
 8006320:	940b      	str	r4, [sp, #44]	; 0x2c
 8006322:	9322      	str	r3, [sp, #136]	; 0x88
 8006324:	f04f 39ff 	mov.w	r9, #4294967295
 8006328:	2200      	movs	r2, #0
 800632a:	2312      	movs	r3, #18
 800632c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006330:	9223      	str	r2, [sp, #140]	; 0x8c
 8006332:	e7b0      	b.n	8006296 <_dtoa_r+0x266>
 8006334:	2301      	movs	r3, #1
 8006336:	930b      	str	r3, [sp, #44]	; 0x2c
 8006338:	e7f4      	b.n	8006324 <_dtoa_r+0x2f4>
 800633a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800633e:	464b      	mov	r3, r9
 8006340:	f8cd 9020 	str.w	r9, [sp, #32]
 8006344:	e7a7      	b.n	8006296 <_dtoa_r+0x266>
 8006346:	3101      	adds	r1, #1
 8006348:	6041      	str	r1, [r0, #4]
 800634a:	0052      	lsls	r2, r2, #1
 800634c:	e7a7      	b.n	800629e <_dtoa_r+0x26e>
 800634e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006350:	9a03      	ldr	r2, [sp, #12]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	2b0e      	cmp	r3, #14
 8006358:	f200 80a8 	bhi.w	80064ac <_dtoa_r+0x47c>
 800635c:	2c00      	cmp	r4, #0
 800635e:	f000 80a5 	beq.w	80064ac <_dtoa_r+0x47c>
 8006362:	f1ba 0f00 	cmp.w	sl, #0
 8006366:	dd34      	ble.n	80063d2 <_dtoa_r+0x3a2>
 8006368:	4a9a      	ldr	r2, [pc, #616]	; (80065d4 <_dtoa_r+0x5a4>)
 800636a:	f00a 030f 	and.w	r3, sl, #15
 800636e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006372:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800637a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800637e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006382:	d016      	beq.n	80063b2 <_dtoa_r+0x382>
 8006384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006388:	4b93      	ldr	r3, [pc, #588]	; (80065d8 <_dtoa_r+0x5a8>)
 800638a:	2703      	movs	r7, #3
 800638c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006390:	f7fa f9cc 	bl	800072c <__aeabi_ddiv>
 8006394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006398:	f004 040f 	and.w	r4, r4, #15
 800639c:	4e8e      	ldr	r6, [pc, #568]	; (80065d8 <_dtoa_r+0x5a8>)
 800639e:	b954      	cbnz	r4, 80063b6 <_dtoa_r+0x386>
 80063a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a8:	f7fa f9c0 	bl	800072c <__aeabi_ddiv>
 80063ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b0:	e029      	b.n	8006406 <_dtoa_r+0x3d6>
 80063b2:	2702      	movs	r7, #2
 80063b4:	e7f2      	b.n	800639c <_dtoa_r+0x36c>
 80063b6:	07e1      	lsls	r1, r4, #31
 80063b8:	d508      	bpl.n	80063cc <_dtoa_r+0x39c>
 80063ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063c2:	f7fa f889 	bl	80004d8 <__aeabi_dmul>
 80063c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063ca:	3701      	adds	r7, #1
 80063cc:	1064      	asrs	r4, r4, #1
 80063ce:	3608      	adds	r6, #8
 80063d0:	e7e5      	b.n	800639e <_dtoa_r+0x36e>
 80063d2:	f000 80a5 	beq.w	8006520 <_dtoa_r+0x4f0>
 80063d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063da:	f1ca 0400 	rsb	r4, sl, #0
 80063de:	4b7d      	ldr	r3, [pc, #500]	; (80065d4 <_dtoa_r+0x5a4>)
 80063e0:	f004 020f 	and.w	r2, r4, #15
 80063e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f7fa f874 	bl	80004d8 <__aeabi_dmul>
 80063f0:	2702      	movs	r7, #2
 80063f2:	2300      	movs	r3, #0
 80063f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063f8:	4e77      	ldr	r6, [pc, #476]	; (80065d8 <_dtoa_r+0x5a8>)
 80063fa:	1124      	asrs	r4, r4, #4
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	f040 8084 	bne.w	800650a <_dtoa_r+0x4da>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d2      	bne.n	80063ac <_dtoa_r+0x37c>
 8006406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 808b 	beq.w	8006524 <_dtoa_r+0x4f4>
 800640e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006412:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006416:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800641a:	2200      	movs	r2, #0
 800641c:	4b6f      	ldr	r3, [pc, #444]	; (80065dc <_dtoa_r+0x5ac>)
 800641e:	f7fa facd 	bl	80009bc <__aeabi_dcmplt>
 8006422:	2800      	cmp	r0, #0
 8006424:	d07e      	beq.n	8006524 <_dtoa_r+0x4f4>
 8006426:	9b08      	ldr	r3, [sp, #32]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d07b      	beq.n	8006524 <_dtoa_r+0x4f4>
 800642c:	f1b9 0f00 	cmp.w	r9, #0
 8006430:	dd38      	ble.n	80064a4 <_dtoa_r+0x474>
 8006432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006436:	2200      	movs	r2, #0
 8006438:	4b69      	ldr	r3, [pc, #420]	; (80065e0 <_dtoa_r+0x5b0>)
 800643a:	f7fa f84d 	bl	80004d8 <__aeabi_dmul>
 800643e:	464c      	mov	r4, r9
 8006440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006444:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006448:	3701      	adds	r7, #1
 800644a:	4638      	mov	r0, r7
 800644c:	f7f9 ffda 	bl	8000404 <__aeabi_i2d>
 8006450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006454:	f7fa f840 	bl	80004d8 <__aeabi_dmul>
 8006458:	2200      	movs	r2, #0
 800645a:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <_dtoa_r+0x5b4>)
 800645c:	f7f9 fe86 	bl	800016c <__adddf3>
 8006460:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006464:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006468:	9611      	str	r6, [sp, #68]	; 0x44
 800646a:	2c00      	cmp	r4, #0
 800646c:	d15d      	bne.n	800652a <_dtoa_r+0x4fa>
 800646e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006472:	2200      	movs	r2, #0
 8006474:	4b5c      	ldr	r3, [pc, #368]	; (80065e8 <_dtoa_r+0x5b8>)
 8006476:	f7f9 fe77 	bl	8000168 <__aeabi_dsub>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006482:	4633      	mov	r3, r6
 8006484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006486:	f7fa fab7 	bl	80009f8 <__aeabi_dcmpgt>
 800648a:	2800      	cmp	r0, #0
 800648c:	f040 829c 	bne.w	80069c8 <_dtoa_r+0x998>
 8006490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006496:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800649a:	f7fa fa8f 	bl	80009bc <__aeabi_dcmplt>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f040 8290 	bne.w	80069c4 <_dtoa_r+0x994>
 80064a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80064a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f2c0 8152 	blt.w	8006758 <_dtoa_r+0x728>
 80064b4:	f1ba 0f0e 	cmp.w	sl, #14
 80064b8:	f300 814e 	bgt.w	8006758 <_dtoa_r+0x728>
 80064bc:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <_dtoa_r+0x5a4>)
 80064be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80064ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f280 80db 	bge.w	8006688 <_dtoa_r+0x658>
 80064d2:	9b08      	ldr	r3, [sp, #32]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f300 80d7 	bgt.w	8006688 <_dtoa_r+0x658>
 80064da:	f040 8272 	bne.w	80069c2 <_dtoa_r+0x992>
 80064de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064e2:	2200      	movs	r2, #0
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <_dtoa_r+0x5b8>)
 80064e6:	f7f9 fff7 	bl	80004d8 <__aeabi_dmul>
 80064ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ee:	f7fa fa79 	bl	80009e4 <__aeabi_dcmpge>
 80064f2:	9c08      	ldr	r4, [sp, #32]
 80064f4:	4626      	mov	r6, r4
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8248 	bne.w	800698c <_dtoa_r+0x95c>
 80064fc:	2331      	movs	r3, #49	; 0x31
 80064fe:	9f03      	ldr	r7, [sp, #12]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	f807 3b01 	strb.w	r3, [r7], #1
 8006508:	e244      	b.n	8006994 <_dtoa_r+0x964>
 800650a:	07e2      	lsls	r2, r4, #31
 800650c:	d505      	bpl.n	800651a <_dtoa_r+0x4ea>
 800650e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006512:	f7f9 ffe1 	bl	80004d8 <__aeabi_dmul>
 8006516:	2301      	movs	r3, #1
 8006518:	3701      	adds	r7, #1
 800651a:	1064      	asrs	r4, r4, #1
 800651c:	3608      	adds	r6, #8
 800651e:	e76d      	b.n	80063fc <_dtoa_r+0x3cc>
 8006520:	2702      	movs	r7, #2
 8006522:	e770      	b.n	8006406 <_dtoa_r+0x3d6>
 8006524:	46d0      	mov	r8, sl
 8006526:	9c08      	ldr	r4, [sp, #32]
 8006528:	e78f      	b.n	800644a <_dtoa_r+0x41a>
 800652a:	9903      	ldr	r1, [sp, #12]
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <_dtoa_r+0x5a4>)
 800652e:	4421      	add	r1, r4
 8006530:	9112      	str	r1, [sp, #72]	; 0x48
 8006532:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006538:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800653c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006540:	2900      	cmp	r1, #0
 8006542:	d055      	beq.n	80065f0 <_dtoa_r+0x5c0>
 8006544:	2000      	movs	r0, #0
 8006546:	4929      	ldr	r1, [pc, #164]	; (80065ec <_dtoa_r+0x5bc>)
 8006548:	f7fa f8f0 	bl	800072c <__aeabi_ddiv>
 800654c:	463b      	mov	r3, r7
 800654e:	4632      	mov	r2, r6
 8006550:	f7f9 fe0a 	bl	8000168 <__aeabi_dsub>
 8006554:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006558:	9f03      	ldr	r7, [sp, #12]
 800655a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800655e:	f7fa fa6b 	bl	8000a38 <__aeabi_d2iz>
 8006562:	4604      	mov	r4, r0
 8006564:	f7f9 ff4e 	bl	8000404 <__aeabi_i2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006570:	f7f9 fdfa 	bl	8000168 <__aeabi_dsub>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	3430      	adds	r4, #48	; 0x30
 800657a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800657e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006582:	f807 4b01 	strb.w	r4, [r7], #1
 8006586:	f7fa fa19 	bl	80009bc <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d174      	bne.n	8006678 <_dtoa_r+0x648>
 800658e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006592:	2000      	movs	r0, #0
 8006594:	4911      	ldr	r1, [pc, #68]	; (80065dc <_dtoa_r+0x5ac>)
 8006596:	f7f9 fde7 	bl	8000168 <__aeabi_dsub>
 800659a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800659e:	f7fa fa0d 	bl	80009bc <__aeabi_dcmplt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f040 80b7 	bne.w	8006716 <_dtoa_r+0x6e6>
 80065a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065aa:	429f      	cmp	r7, r3
 80065ac:	f43f af7a 	beq.w	80064a4 <_dtoa_r+0x474>
 80065b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065b4:	2200      	movs	r2, #0
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <_dtoa_r+0x5b0>)
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	2200      	movs	r2, #0
 80065be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <_dtoa_r+0x5b0>)
 80065c8:	f7f9 ff86 	bl	80004d8 <__aeabi_dmul>
 80065cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d0:	e7c3      	b.n	800655a <_dtoa_r+0x52a>
 80065d2:	bf00      	nop
 80065d4:	0801aa50 	.word	0x0801aa50
 80065d8:	0801aa28 	.word	0x0801aa28
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	40240000 	.word	0x40240000
 80065e4:	401c0000 	.word	0x401c0000
 80065e8:	40140000 	.word	0x40140000
 80065ec:	3fe00000 	.word	0x3fe00000
 80065f0:	4630      	mov	r0, r6
 80065f2:	4639      	mov	r1, r7
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065fe:	9c03      	ldr	r4, [sp, #12]
 8006600:	9314      	str	r3, [sp, #80]	; 0x50
 8006602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006606:	f7fa fa17 	bl	8000a38 <__aeabi_d2iz>
 800660a:	9015      	str	r0, [sp, #84]	; 0x54
 800660c:	f7f9 fefa 	bl	8000404 <__aeabi_i2d>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006618:	f7f9 fda6 	bl	8000168 <__aeabi_dsub>
 800661c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800661e:	4606      	mov	r6, r0
 8006620:	3330      	adds	r3, #48	; 0x30
 8006622:	f804 3b01 	strb.w	r3, [r4], #1
 8006626:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006628:	460f      	mov	r7, r1
 800662a:	429c      	cmp	r4, r3
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	d124      	bne.n	800667c <_dtoa_r+0x64c>
 8006632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006636:	4bb0      	ldr	r3, [pc, #704]	; (80068f8 <_dtoa_r+0x8c8>)
 8006638:	f7f9 fd98 	bl	800016c <__adddf3>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7fa f9d8 	bl	80009f8 <__aeabi_dcmpgt>
 8006648:	2800      	cmp	r0, #0
 800664a:	d163      	bne.n	8006714 <_dtoa_r+0x6e4>
 800664c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006650:	2000      	movs	r0, #0
 8006652:	49a9      	ldr	r1, [pc, #676]	; (80068f8 <_dtoa_r+0x8c8>)
 8006654:	f7f9 fd88 	bl	8000168 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7fa f9ac 	bl	80009bc <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f af1d 	beq.w	80064a4 <_dtoa_r+0x474>
 800666a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800666c:	1e7b      	subs	r3, r7, #1
 800666e:	9314      	str	r3, [sp, #80]	; 0x50
 8006670:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d0f8      	beq.n	800666a <_dtoa_r+0x63a>
 8006678:	46c2      	mov	sl, r8
 800667a:	e03b      	b.n	80066f4 <_dtoa_r+0x6c4>
 800667c:	4b9f      	ldr	r3, [pc, #636]	; (80068fc <_dtoa_r+0x8cc>)
 800667e:	f7f9 ff2b 	bl	80004d8 <__aeabi_dmul>
 8006682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006686:	e7bc      	b.n	8006602 <_dtoa_r+0x5d2>
 8006688:	9f03      	ldr	r7, [sp, #12]
 800668a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800668e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa f849 	bl	800072c <__aeabi_ddiv>
 800669a:	f7fa f9cd 	bl	8000a38 <__aeabi_d2iz>
 800669e:	4604      	mov	r4, r0
 80066a0:	f7f9 feb0 	bl	8000404 <__aeabi_i2d>
 80066a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a8:	f7f9 ff16 	bl	80004d8 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7f9 fd58 	bl	8000168 <__aeabi_dsub>
 80066b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80066bc:	f807 6b01 	strb.w	r6, [r7], #1
 80066c0:	9e03      	ldr	r6, [sp, #12]
 80066c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80066c6:	1bbe      	subs	r6, r7, r6
 80066c8:	45b4      	cmp	ip, r6
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	d136      	bne.n	800673e <_dtoa_r+0x70e>
 80066d0:	f7f9 fd4c 	bl	800016c <__adddf3>
 80066d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066d8:	4680      	mov	r8, r0
 80066da:	4689      	mov	r9, r1
 80066dc:	f7fa f98c 	bl	80009f8 <__aeabi_dcmpgt>
 80066e0:	bb58      	cbnz	r0, 800673a <_dtoa_r+0x70a>
 80066e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7fa f95d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ee:	b108      	cbz	r0, 80066f4 <_dtoa_r+0x6c4>
 80066f0:	07e1      	lsls	r1, r4, #31
 80066f2:	d422      	bmi.n	800673a <_dtoa_r+0x70a>
 80066f4:	4628      	mov	r0, r5
 80066f6:	4659      	mov	r1, fp
 80066f8:	f000 fe68 	bl	80073cc <_Bfree>
 80066fc:	2300      	movs	r3, #0
 80066fe:	703b      	strb	r3, [r7, #0]
 8006700:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006702:	f10a 0001 	add.w	r0, sl, #1
 8006706:	6018      	str	r0, [r3, #0]
 8006708:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800670a:	2b00      	cmp	r3, #0
 800670c:	f43f acde 	beq.w	80060cc <_dtoa_r+0x9c>
 8006710:	601f      	str	r7, [r3, #0]
 8006712:	e4db      	b.n	80060cc <_dtoa_r+0x9c>
 8006714:	4627      	mov	r7, r4
 8006716:	463b      	mov	r3, r7
 8006718:	461f      	mov	r7, r3
 800671a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800671e:	2a39      	cmp	r2, #57	; 0x39
 8006720:	d107      	bne.n	8006732 <_dtoa_r+0x702>
 8006722:	9a03      	ldr	r2, [sp, #12]
 8006724:	429a      	cmp	r2, r3
 8006726:	d1f7      	bne.n	8006718 <_dtoa_r+0x6e8>
 8006728:	2230      	movs	r2, #48	; 0x30
 800672a:	9903      	ldr	r1, [sp, #12]
 800672c:	f108 0801 	add.w	r8, r8, #1
 8006730:	700a      	strb	r2, [r1, #0]
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	3201      	adds	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e79e      	b.n	8006678 <_dtoa_r+0x648>
 800673a:	46d0      	mov	r8, sl
 800673c:	e7eb      	b.n	8006716 <_dtoa_r+0x6e6>
 800673e:	2200      	movs	r2, #0
 8006740:	4b6e      	ldr	r3, [pc, #440]	; (80068fc <_dtoa_r+0x8cc>)
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	f7fa f92b 	bl	80009a8 <__aeabi_dcmpeq>
 8006752:	2800      	cmp	r0, #0
 8006754:	d09b      	beq.n	800668e <_dtoa_r+0x65e>
 8006756:	e7cd      	b.n	80066f4 <_dtoa_r+0x6c4>
 8006758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800675a:	2a00      	cmp	r2, #0
 800675c:	f000 80d0 	beq.w	8006900 <_dtoa_r+0x8d0>
 8006760:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006762:	2a01      	cmp	r2, #1
 8006764:	f300 80ae 	bgt.w	80068c4 <_dtoa_r+0x894>
 8006768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800676a:	2a00      	cmp	r2, #0
 800676c:	f000 80a6 	beq.w	80068bc <_dtoa_r+0x88c>
 8006770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006776:	9f06      	ldr	r7, [sp, #24]
 8006778:	9a06      	ldr	r2, [sp, #24]
 800677a:	2101      	movs	r1, #1
 800677c:	441a      	add	r2, r3
 800677e:	9206      	str	r2, [sp, #24]
 8006780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006782:	4628      	mov	r0, r5
 8006784:	441a      	add	r2, r3
 8006786:	9209      	str	r2, [sp, #36]	; 0x24
 8006788:	f000 ff20 	bl	80075cc <__i2b>
 800678c:	4606      	mov	r6, r0
 800678e:	2f00      	cmp	r7, #0
 8006790:	dd0c      	ble.n	80067ac <_dtoa_r+0x77c>
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd09      	ble.n	80067ac <_dtoa_r+0x77c>
 8006798:	42bb      	cmp	r3, r7
 800679a:	bfa8      	it	ge
 800679c:	463b      	movge	r3, r7
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	1aff      	subs	r7, r7, r3
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	9206      	str	r2, [sp, #24]
 80067a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	b1f3      	cbz	r3, 80067ee <_dtoa_r+0x7be>
 80067b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80a8 	beq.w	8006908 <_dtoa_r+0x8d8>
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	dd10      	ble.n	80067de <_dtoa_r+0x7ae>
 80067bc:	4631      	mov	r1, r6
 80067be:	4622      	mov	r2, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 ffc1 	bl	8007748 <__pow5mult>
 80067c6:	465a      	mov	r2, fp
 80067c8:	4601      	mov	r1, r0
 80067ca:	4606      	mov	r6, r0
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 ff13 	bl	80075f8 <__multiply>
 80067d2:	4680      	mov	r8, r0
 80067d4:	4659      	mov	r1, fp
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fdf8 	bl	80073cc <_Bfree>
 80067dc:	46c3      	mov	fp, r8
 80067de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e0:	1b1a      	subs	r2, r3, r4
 80067e2:	d004      	beq.n	80067ee <_dtoa_r+0x7be>
 80067e4:	4659      	mov	r1, fp
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 ffae 	bl	8007748 <__pow5mult>
 80067ec:	4683      	mov	fp, r0
 80067ee:	2101      	movs	r1, #1
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 feeb 	bl	80075cc <__i2b>
 80067f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f8:	4604      	mov	r4, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f340 8086 	ble.w	800690c <_dtoa_r+0x8dc>
 8006800:	461a      	mov	r2, r3
 8006802:	4601      	mov	r1, r0
 8006804:	4628      	mov	r0, r5
 8006806:	f000 ff9f 	bl	8007748 <__pow5mult>
 800680a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800680c:	4604      	mov	r4, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	dd7f      	ble.n	8006912 <_dtoa_r+0x8e2>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800681c:	6918      	ldr	r0, [r3, #16]
 800681e:	f000 fe87 	bl	8007530 <__hi0bits>
 8006822:	f1c0 0020 	rsb	r0, r0, #32
 8006826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006828:	4418      	add	r0, r3
 800682a:	f010 001f 	ands.w	r0, r0, #31
 800682e:	f000 8092 	beq.w	8006956 <_dtoa_r+0x926>
 8006832:	f1c0 0320 	rsb	r3, r0, #32
 8006836:	2b04      	cmp	r3, #4
 8006838:	f340 808a 	ble.w	8006950 <_dtoa_r+0x920>
 800683c:	f1c0 001c 	rsb	r0, r0, #28
 8006840:	9b06      	ldr	r3, [sp, #24]
 8006842:	4407      	add	r7, r0
 8006844:	4403      	add	r3, r0
 8006846:	9306      	str	r3, [sp, #24]
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	4403      	add	r3, r0
 800684c:	9309      	str	r3, [sp, #36]	; 0x24
 800684e:	9b06      	ldr	r3, [sp, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd05      	ble.n	8006860 <_dtoa_r+0x830>
 8006854:	4659      	mov	r1, fp
 8006856:	461a      	mov	r2, r3
 8006858:	4628      	mov	r0, r5
 800685a:	f000 ffcf 	bl	80077fc <__lshift>
 800685e:	4683      	mov	fp, r0
 8006860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd05      	ble.n	8006872 <_dtoa_r+0x842>
 8006866:	4621      	mov	r1, r4
 8006868:	461a      	mov	r2, r3
 800686a:	4628      	mov	r0, r5
 800686c:	f000 ffc6 	bl	80077fc <__lshift>
 8006870:	4604      	mov	r4, r0
 8006872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d070      	beq.n	800695a <_dtoa_r+0x92a>
 8006878:	4621      	mov	r1, r4
 800687a:	4658      	mov	r0, fp
 800687c:	f001 f82e 	bl	80078dc <__mcmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	da6a      	bge.n	800695a <_dtoa_r+0x92a>
 8006884:	2300      	movs	r3, #0
 8006886:	4659      	mov	r1, fp
 8006888:	220a      	movs	r2, #10
 800688a:	4628      	mov	r0, r5
 800688c:	f000 fdc0 	bl	8007410 <__multadd>
 8006890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006892:	4683      	mov	fp, r0
 8006894:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8194 	beq.w	8006bc6 <_dtoa_r+0xb96>
 800689e:	4631      	mov	r1, r6
 80068a0:	2300      	movs	r3, #0
 80068a2:	220a      	movs	r2, #10
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 fdb3 	bl	8007410 <__multadd>
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	4606      	mov	r6, r0
 80068b0:	f300 8093 	bgt.w	80069da <_dtoa_r+0x9aa>
 80068b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	dc57      	bgt.n	800696a <_dtoa_r+0x93a>
 80068ba:	e08e      	b.n	80069da <_dtoa_r+0x9aa>
 80068bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068c2:	e757      	b.n	8006774 <_dtoa_r+0x744>
 80068c4:	9b08      	ldr	r3, [sp, #32]
 80068c6:	1e5c      	subs	r4, r3, #1
 80068c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	bfb7      	itett	lt
 80068ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068d0:	1b1c      	subge	r4, r3, r4
 80068d2:	1ae2      	sublt	r2, r4, r3
 80068d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068d6:	bfbe      	ittt	lt
 80068d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068da:	189b      	addlt	r3, r3, r2
 80068dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	bfb8      	it	lt
 80068e2:	2400      	movlt	r4, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bfbb      	ittet	lt
 80068e8:	9b06      	ldrlt	r3, [sp, #24]
 80068ea:	9a08      	ldrlt	r2, [sp, #32]
 80068ec:	9f06      	ldrge	r7, [sp, #24]
 80068ee:	1a9f      	sublt	r7, r3, r2
 80068f0:	bfac      	ite	ge
 80068f2:	9b08      	ldrge	r3, [sp, #32]
 80068f4:	2300      	movlt	r3, #0
 80068f6:	e73f      	b.n	8006778 <_dtoa_r+0x748>
 80068f8:	3fe00000 	.word	0x3fe00000
 80068fc:	40240000 	.word	0x40240000
 8006900:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006902:	9f06      	ldr	r7, [sp, #24]
 8006904:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006906:	e742      	b.n	800678e <_dtoa_r+0x75e>
 8006908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800690a:	e76b      	b.n	80067e4 <_dtoa_r+0x7b4>
 800690c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690e:	2b01      	cmp	r3, #1
 8006910:	dc19      	bgt.n	8006946 <_dtoa_r+0x916>
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	b9bb      	cbnz	r3, 8006946 <_dtoa_r+0x916>
 8006916:	9b05      	ldr	r3, [sp, #20]
 8006918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800691c:	b99b      	cbnz	r3, 8006946 <_dtoa_r+0x916>
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006924:	0d1b      	lsrs	r3, r3, #20
 8006926:	051b      	lsls	r3, r3, #20
 8006928:	b183      	cbz	r3, 800694c <_dtoa_r+0x91c>
 800692a:	f04f 0801 	mov.w	r8, #1
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	3301      	adds	r3, #1
 8006932:	9306      	str	r3, [sp, #24]
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	3301      	adds	r3, #1
 8006938:	9309      	str	r3, [sp, #36]	; 0x24
 800693a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	f47f af6a 	bne.w	8006816 <_dtoa_r+0x7e6>
 8006942:	2001      	movs	r0, #1
 8006944:	e76f      	b.n	8006826 <_dtoa_r+0x7f6>
 8006946:	f04f 0800 	mov.w	r8, #0
 800694a:	e7f6      	b.n	800693a <_dtoa_r+0x90a>
 800694c:	4698      	mov	r8, r3
 800694e:	e7f4      	b.n	800693a <_dtoa_r+0x90a>
 8006950:	f43f af7d 	beq.w	800684e <_dtoa_r+0x81e>
 8006954:	4618      	mov	r0, r3
 8006956:	301c      	adds	r0, #28
 8006958:	e772      	b.n	8006840 <_dtoa_r+0x810>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc36      	bgt.n	80069ce <_dtoa_r+0x99e>
 8006960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006962:	2b02      	cmp	r3, #2
 8006964:	dd33      	ble.n	80069ce <_dtoa_r+0x99e>
 8006966:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800696a:	f1b9 0f00 	cmp.w	r9, #0
 800696e:	d10d      	bne.n	800698c <_dtoa_r+0x95c>
 8006970:	4621      	mov	r1, r4
 8006972:	464b      	mov	r3, r9
 8006974:	2205      	movs	r2, #5
 8006976:	4628      	mov	r0, r5
 8006978:	f000 fd4a 	bl	8007410 <__multadd>
 800697c:	4601      	mov	r1, r0
 800697e:	4604      	mov	r4, r0
 8006980:	4658      	mov	r0, fp
 8006982:	f000 ffab 	bl	80078dc <__mcmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	f73f adb8 	bgt.w	80064fc <_dtoa_r+0x4cc>
 800698c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800698e:	9f03      	ldr	r7, [sp, #12]
 8006990:	ea6f 0a03 	mvn.w	sl, r3
 8006994:	f04f 0800 	mov.w	r8, #0
 8006998:	4621      	mov	r1, r4
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fd16 	bl	80073cc <_Bfree>
 80069a0:	2e00      	cmp	r6, #0
 80069a2:	f43f aea7 	beq.w	80066f4 <_dtoa_r+0x6c4>
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	d005      	beq.n	80069b8 <_dtoa_r+0x988>
 80069ac:	45b0      	cmp	r8, r6
 80069ae:	d003      	beq.n	80069b8 <_dtoa_r+0x988>
 80069b0:	4641      	mov	r1, r8
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 fd0a 	bl	80073cc <_Bfree>
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 fd06 	bl	80073cc <_Bfree>
 80069c0:	e698      	b.n	80066f4 <_dtoa_r+0x6c4>
 80069c2:	2400      	movs	r4, #0
 80069c4:	4626      	mov	r6, r4
 80069c6:	e7e1      	b.n	800698c <_dtoa_r+0x95c>
 80069c8:	46c2      	mov	sl, r8
 80069ca:	4626      	mov	r6, r4
 80069cc:	e596      	b.n	80064fc <_dtoa_r+0x4cc>
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80fd 	beq.w	8006bd4 <_dtoa_r+0xba4>
 80069da:	2f00      	cmp	r7, #0
 80069dc:	dd05      	ble.n	80069ea <_dtoa_r+0x9ba>
 80069de:	4631      	mov	r1, r6
 80069e0:	463a      	mov	r2, r7
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 ff0a 	bl	80077fc <__lshift>
 80069e8:	4606      	mov	r6, r0
 80069ea:	f1b8 0f00 	cmp.w	r8, #0
 80069ee:	d05c      	beq.n	8006aaa <_dtoa_r+0xa7a>
 80069f0:	4628      	mov	r0, r5
 80069f2:	6871      	ldr	r1, [r6, #4]
 80069f4:	f000 fcaa 	bl	800734c <_Balloc>
 80069f8:	4607      	mov	r7, r0
 80069fa:	b928      	cbnz	r0, 8006a08 <_dtoa_r+0x9d8>
 80069fc:	4602      	mov	r2, r0
 80069fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a02:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <_dtoa_r+0xbd0>)
 8006a04:	f7ff bb28 	b.w	8006058 <_dtoa_r+0x28>
 8006a08:	6932      	ldr	r2, [r6, #16]
 8006a0a:	f106 010c 	add.w	r1, r6, #12
 8006a0e:	3202      	adds	r2, #2
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	300c      	adds	r0, #12
 8006a14:	f000 fc8c 	bl	8007330 <memcpy>
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 feed 	bl	80077fc <__lshift>
 8006a22:	46b0      	mov	r8, r6
 8006a24:	4606      	mov	r6, r0
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9308      	str	r3, [sp, #32]
 8006a2c:	9b03      	ldr	r3, [sp, #12]
 8006a2e:	444b      	add	r3, r9
 8006a30:	930a      	str	r3, [sp, #40]	; 0x28
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3a:	9b08      	ldr	r3, [sp, #32]
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4658      	mov	r0, fp
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	f7ff fa68 	bl	8005f18 <quorem>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	3330      	adds	r3, #48	; 0x30
 8006a4e:	9006      	str	r0, [sp, #24]
 8006a50:	4658      	mov	r0, fp
 8006a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a54:	f000 ff42 	bl	80078dc <__mcmp>
 8006a58:	4632      	mov	r2, r6
 8006a5a:	4681      	mov	r9, r0
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 ff58 	bl	8007914 <__mdiff>
 8006a64:	68c2      	ldr	r2, [r0, #12]
 8006a66:	4607      	mov	r7, r0
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	bb02      	cbnz	r2, 8006aae <_dtoa_r+0xa7e>
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4658      	mov	r0, fp
 8006a70:	f000 ff34 	bl	80078dc <__mcmp>
 8006a74:	4602      	mov	r2, r0
 8006a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a80:	f000 fca4 	bl	80073cc <_Bfree>
 8006a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a88:	9f08      	ldr	r7, [sp, #32]
 8006a8a:	ea43 0102 	orr.w	r1, r3, r2
 8006a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a90:	430b      	orrs	r3, r1
 8006a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a94:	d10d      	bne.n	8006ab2 <_dtoa_r+0xa82>
 8006a96:	2b39      	cmp	r3, #57	; 0x39
 8006a98:	d029      	beq.n	8006aee <_dtoa_r+0xabe>
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	dd01      	ble.n	8006aa4 <_dtoa_r+0xa74>
 8006aa0:	9b06      	ldr	r3, [sp, #24]
 8006aa2:	3331      	adds	r3, #49	; 0x31
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	7013      	strb	r3, [r2, #0]
 8006aa8:	e776      	b.n	8006998 <_dtoa_r+0x968>
 8006aaa:	4630      	mov	r0, r6
 8006aac:	e7b9      	b.n	8006a22 <_dtoa_r+0x9f2>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	e7e2      	b.n	8006a78 <_dtoa_r+0xa48>
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	db06      	blt.n	8006ac6 <_dtoa_r+0xa96>
 8006ab8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006aba:	ea41 0909 	orr.w	r9, r1, r9
 8006abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac0:	ea59 0101 	orrs.w	r1, r9, r1
 8006ac4:	d120      	bne.n	8006b08 <_dtoa_r+0xad8>
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	ddec      	ble.n	8006aa4 <_dtoa_r+0xa74>
 8006aca:	4659      	mov	r1, fp
 8006acc:	2201      	movs	r2, #1
 8006ace:	4628      	mov	r0, r5
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	f000 fe93 	bl	80077fc <__lshift>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4683      	mov	fp, r0
 8006ada:	f000 feff 	bl	80078dc <__mcmp>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	9b08      	ldr	r3, [sp, #32]
 8006ae2:	dc02      	bgt.n	8006aea <_dtoa_r+0xaba>
 8006ae4:	d1de      	bne.n	8006aa4 <_dtoa_r+0xa74>
 8006ae6:	07da      	lsls	r2, r3, #31
 8006ae8:	d5dc      	bpl.n	8006aa4 <_dtoa_r+0xa74>
 8006aea:	2b39      	cmp	r3, #57	; 0x39
 8006aec:	d1d8      	bne.n	8006aa0 <_dtoa_r+0xa70>
 8006aee:	2339      	movs	r3, #57	; 0x39
 8006af0:	9a04      	ldr	r2, [sp, #16]
 8006af2:	7013      	strb	r3, [r2, #0]
 8006af4:	463b      	mov	r3, r7
 8006af6:	461f      	mov	r7, r3
 8006af8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	2a39      	cmp	r2, #57	; 0x39
 8006b00:	d050      	beq.n	8006ba4 <_dtoa_r+0xb74>
 8006b02:	3201      	adds	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e747      	b.n	8006998 <_dtoa_r+0x968>
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	dd03      	ble.n	8006b14 <_dtoa_r+0xae4>
 8006b0c:	2b39      	cmp	r3, #57	; 0x39
 8006b0e:	d0ee      	beq.n	8006aee <_dtoa_r+0xabe>
 8006b10:	3301      	adds	r3, #1
 8006b12:	e7c7      	b.n	8006aa4 <_dtoa_r+0xa74>
 8006b14:	9a08      	ldr	r2, [sp, #32]
 8006b16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b1c:	428a      	cmp	r2, r1
 8006b1e:	d02a      	beq.n	8006b76 <_dtoa_r+0xb46>
 8006b20:	4659      	mov	r1, fp
 8006b22:	2300      	movs	r3, #0
 8006b24:	220a      	movs	r2, #10
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fc72 	bl	8007410 <__multadd>
 8006b2c:	45b0      	cmp	r8, r6
 8006b2e:	4683      	mov	fp, r0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	f04f 020a 	mov.w	r2, #10
 8006b38:	4641      	mov	r1, r8
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	d107      	bne.n	8006b4e <_dtoa_r+0xb1e>
 8006b3e:	f000 fc67 	bl	8007410 <__multadd>
 8006b42:	4680      	mov	r8, r0
 8006b44:	4606      	mov	r6, r0
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	9308      	str	r3, [sp, #32]
 8006b4c:	e775      	b.n	8006a3a <_dtoa_r+0xa0a>
 8006b4e:	f000 fc5f 	bl	8007410 <__multadd>
 8006b52:	4631      	mov	r1, r6
 8006b54:	4680      	mov	r8, r0
 8006b56:	2300      	movs	r3, #0
 8006b58:	220a      	movs	r2, #10
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 fc58 	bl	8007410 <__multadd>
 8006b60:	4606      	mov	r6, r0
 8006b62:	e7f0      	b.n	8006b46 <_dtoa_r+0xb16>
 8006b64:	f1b9 0f00 	cmp.w	r9, #0
 8006b68:	bfcc      	ite	gt
 8006b6a:	464f      	movgt	r7, r9
 8006b6c:	2701      	movle	r7, #1
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	9a03      	ldr	r2, [sp, #12]
 8006b74:	4417      	add	r7, r2
 8006b76:	4659      	mov	r1, fp
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	9308      	str	r3, [sp, #32]
 8006b7e:	f000 fe3d 	bl	80077fc <__lshift>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4683      	mov	fp, r0
 8006b86:	f000 fea9 	bl	80078dc <__mcmp>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	dcb2      	bgt.n	8006af4 <_dtoa_r+0xac4>
 8006b8e:	d102      	bne.n	8006b96 <_dtoa_r+0xb66>
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d4ae      	bmi.n	8006af4 <_dtoa_r+0xac4>
 8006b96:	463b      	mov	r3, r7
 8006b98:	461f      	mov	r7, r3
 8006b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b9e:	2a30      	cmp	r2, #48	; 0x30
 8006ba0:	d0fa      	beq.n	8006b98 <_dtoa_r+0xb68>
 8006ba2:	e6f9      	b.n	8006998 <_dtoa_r+0x968>
 8006ba4:	9a03      	ldr	r2, [sp, #12]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d1a5      	bne.n	8006af6 <_dtoa_r+0xac6>
 8006baa:	2331      	movs	r3, #49	; 0x31
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	e779      	b.n	8006aa6 <_dtoa_r+0xa76>
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <_dtoa_r+0xbd4>)
 8006bb4:	f7ff baa8 	b.w	8006108 <_dtoa_r+0xd8>
 8006bb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f47f aa81 	bne.w	80060c2 <_dtoa_r+0x92>
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <_dtoa_r+0xbd8>)
 8006bc2:	f7ff baa1 	b.w	8006108 <_dtoa_r+0xd8>
 8006bc6:	f1b9 0f00 	cmp.w	r9, #0
 8006bca:	dc03      	bgt.n	8006bd4 <_dtoa_r+0xba4>
 8006bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	f73f aecb 	bgt.w	800696a <_dtoa_r+0x93a>
 8006bd4:	9f03      	ldr	r7, [sp, #12]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f7ff f99d 	bl	8005f18 <quorem>
 8006bde:	9a03      	ldr	r2, [sp, #12]
 8006be0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006be4:	f807 3b01 	strb.w	r3, [r7], #1
 8006be8:	1aba      	subs	r2, r7, r2
 8006bea:	4591      	cmp	r9, r2
 8006bec:	ddba      	ble.n	8006b64 <_dtoa_r+0xb34>
 8006bee:	4659      	mov	r1, fp
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 fc0b 	bl	8007410 <__multadd>
 8006bfa:	4683      	mov	fp, r0
 8006bfc:	e7eb      	b.n	8006bd6 <_dtoa_r+0xba6>
 8006bfe:	bf00      	nop
 8006c00:	0801a8fb 	.word	0x0801a8fb
 8006c04:	0801a6dc 	.word	0x0801a6dc
 8006c08:	0801a859 	.word	0x0801a859

08006c0c <rshift>:
 8006c0c:	6903      	ldr	r3, [r0, #16]
 8006c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c16:	f100 0414 	add.w	r4, r0, #20
 8006c1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c1e:	dd46      	ble.n	8006cae <rshift+0xa2>
 8006c20:	f011 011f 	ands.w	r1, r1, #31
 8006c24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c2c:	d10c      	bne.n	8006c48 <rshift+0x3c>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f100 0710 	add.w	r7, r0, #16
 8006c34:	42b1      	cmp	r1, r6
 8006c36:	d335      	bcc.n	8006ca4 <rshift+0x98>
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	1eea      	subs	r2, r5, #3
 8006c3e:	4296      	cmp	r6, r2
 8006c40:	bf38      	it	cc
 8006c42:	2300      	movcc	r3, #0
 8006c44:	4423      	add	r3, r4
 8006c46:	e015      	b.n	8006c74 <rshift+0x68>
 8006c48:	46a1      	mov	r9, r4
 8006c4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c4e:	f1c1 0820 	rsb	r8, r1, #32
 8006c52:	40cf      	lsrs	r7, r1
 8006c54:	f105 0e04 	add.w	lr, r5, #4
 8006c58:	4576      	cmp	r6, lr
 8006c5a:	46f4      	mov	ip, lr
 8006c5c:	d816      	bhi.n	8006c8c <rshift+0x80>
 8006c5e:	1a9a      	subs	r2, r3, r2
 8006c60:	0092      	lsls	r2, r2, #2
 8006c62:	3a04      	subs	r2, #4
 8006c64:	3501      	adds	r5, #1
 8006c66:	42ae      	cmp	r6, r5
 8006c68:	bf38      	it	cc
 8006c6a:	2200      	movcc	r2, #0
 8006c6c:	18a3      	adds	r3, r4, r2
 8006c6e:	50a7      	str	r7, [r4, r2]
 8006c70:	b107      	cbz	r7, 8006c74 <rshift+0x68>
 8006c72:	3304      	adds	r3, #4
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	eba3 0204 	sub.w	r2, r3, r4
 8006c7a:	bf08      	it	eq
 8006c7c:	2300      	moveq	r3, #0
 8006c7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c82:	6102      	str	r2, [r0, #16]
 8006c84:	bf08      	it	eq
 8006c86:	6143      	streq	r3, [r0, #20]
 8006c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c8c:	f8dc c000 	ldr.w	ip, [ip]
 8006c90:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c94:	ea4c 0707 	orr.w	r7, ip, r7
 8006c98:	f849 7b04 	str.w	r7, [r9], #4
 8006c9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ca0:	40cf      	lsrs	r7, r1
 8006ca2:	e7d9      	b.n	8006c58 <rshift+0x4c>
 8006ca4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ca8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006cac:	e7c2      	b.n	8006c34 <rshift+0x28>
 8006cae:	4623      	mov	r3, r4
 8006cb0:	e7e0      	b.n	8006c74 <rshift+0x68>

08006cb2 <__hexdig_fun>:
 8006cb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d802      	bhi.n	8006cc0 <__hexdig_fun+0xe>
 8006cba:	3820      	subs	r0, #32
 8006cbc:	b2c0      	uxtb	r0, r0
 8006cbe:	4770      	bx	lr
 8006cc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d801      	bhi.n	8006ccc <__hexdig_fun+0x1a>
 8006cc8:	3847      	subs	r0, #71	; 0x47
 8006cca:	e7f7      	b.n	8006cbc <__hexdig_fun+0xa>
 8006ccc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	d801      	bhi.n	8006cd8 <__hexdig_fun+0x26>
 8006cd4:	3827      	subs	r0, #39	; 0x27
 8006cd6:	e7f1      	b.n	8006cbc <__hexdig_fun+0xa>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4770      	bx	lr

08006cdc <__gethex>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	b08b      	sub	sp, #44	; 0x2c
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	4bb2      	ldr	r3, [pc, #712]	; (8006fb0 <__gethex+0x2d4>)
 8006ce6:	9002      	str	r0, [sp, #8]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	468b      	mov	fp, r1
 8006cec:	4618      	mov	r0, r3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	f7f9 fa2d 	bl	8000150 <strlen>
 8006cf6:	4682      	mov	sl, r0
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	f8db 2000 	ldr.w	r2, [fp]
 8006cfe:	4403      	add	r3, r0
 8006d00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d04:	9306      	str	r3, [sp, #24]
 8006d06:	1c93      	adds	r3, r2, #2
 8006d08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d10:	32fe      	adds	r2, #254	; 0xfe
 8006d12:	18d1      	adds	r1, r2, r3
 8006d14:	461f      	mov	r7, r3
 8006d16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d1a:	9101      	str	r1, [sp, #4]
 8006d1c:	2830      	cmp	r0, #48	; 0x30
 8006d1e:	d0f8      	beq.n	8006d12 <__gethex+0x36>
 8006d20:	f7ff ffc7 	bl	8006cb2 <__hexdig_fun>
 8006d24:	4604      	mov	r4, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d13a      	bne.n	8006da0 <__gethex+0xc4>
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	9903      	ldr	r1, [sp, #12]
 8006d30:	f001 fa26 	bl	8008180 <strncmp>
 8006d34:	4605      	mov	r5, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d166      	bne.n	8006e08 <__gethex+0x12c>
 8006d3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d3e:	eb07 060a 	add.w	r6, r7, sl
 8006d42:	f7ff ffb6 	bl	8006cb2 <__hexdig_fun>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d060      	beq.n	8006e0c <__gethex+0x130>
 8006d4a:	4633      	mov	r3, r6
 8006d4c:	7818      	ldrb	r0, [r3, #0]
 8006d4e:	461f      	mov	r7, r3
 8006d50:	2830      	cmp	r0, #48	; 0x30
 8006d52:	f103 0301 	add.w	r3, r3, #1
 8006d56:	d0f9      	beq.n	8006d4c <__gethex+0x70>
 8006d58:	f7ff ffab 	bl	8006cb2 <__hexdig_fun>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	fab0 f480 	clz	r4, r0
 8006d62:	4635      	mov	r5, r6
 8006d64:	0964      	lsrs	r4, r4, #5
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	463a      	mov	r2, r7
 8006d6a:	4616      	mov	r6, r2
 8006d6c:	7830      	ldrb	r0, [r6, #0]
 8006d6e:	3201      	adds	r2, #1
 8006d70:	f7ff ff9f 	bl	8006cb2 <__hexdig_fun>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d1f8      	bne.n	8006d6a <__gethex+0x8e>
 8006d78:	4652      	mov	r2, sl
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	9903      	ldr	r1, [sp, #12]
 8006d7e:	f001 f9ff 	bl	8008180 <strncmp>
 8006d82:	b980      	cbnz	r0, 8006da6 <__gethex+0xca>
 8006d84:	b94d      	cbnz	r5, 8006d9a <__gethex+0xbe>
 8006d86:	eb06 050a 	add.w	r5, r6, sl
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	7830      	ldrb	r0, [r6, #0]
 8006d90:	3201      	adds	r2, #1
 8006d92:	f7ff ff8e 	bl	8006cb2 <__hexdig_fun>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d1f8      	bne.n	8006d8c <__gethex+0xb0>
 8006d9a:	1bad      	subs	r5, r5, r6
 8006d9c:	00ad      	lsls	r5, r5, #2
 8006d9e:	e004      	b.n	8006daa <__gethex+0xce>
 8006da0:	2400      	movs	r4, #0
 8006da2:	4625      	mov	r5, r4
 8006da4:	e7e0      	b.n	8006d68 <__gethex+0x8c>
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	d1f7      	bne.n	8006d9a <__gethex+0xbe>
 8006daa:	7833      	ldrb	r3, [r6, #0]
 8006dac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006db0:	2b50      	cmp	r3, #80	; 0x50
 8006db2:	d139      	bne.n	8006e28 <__gethex+0x14c>
 8006db4:	7873      	ldrb	r3, [r6, #1]
 8006db6:	2b2b      	cmp	r3, #43	; 0x2b
 8006db8:	d02a      	beq.n	8006e10 <__gethex+0x134>
 8006dba:	2b2d      	cmp	r3, #45	; 0x2d
 8006dbc:	d02c      	beq.n	8006e18 <__gethex+0x13c>
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	1c71      	adds	r1, r6, #1
 8006dc4:	7808      	ldrb	r0, [r1, #0]
 8006dc6:	f7ff ff74 	bl	8006cb2 <__hexdig_fun>
 8006dca:	1e43      	subs	r3, r0, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b18      	cmp	r3, #24
 8006dd0:	d82a      	bhi.n	8006e28 <__gethex+0x14c>
 8006dd2:	f1a0 0210 	sub.w	r2, r0, #16
 8006dd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dda:	f7ff ff6a 	bl	8006cb2 <__hexdig_fun>
 8006dde:	1e43      	subs	r3, r0, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b18      	cmp	r3, #24
 8006de4:	d91b      	bls.n	8006e1e <__gethex+0x142>
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	d000      	beq.n	8006dee <__gethex+0x112>
 8006dec:	4252      	negs	r2, r2
 8006dee:	4415      	add	r5, r2
 8006df0:	f8cb 1000 	str.w	r1, [fp]
 8006df4:	b1d4      	cbz	r4, 8006e2c <__gethex+0x150>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bf14      	ite	ne
 8006dfc:	2700      	movne	r7, #0
 8006dfe:	2706      	moveq	r7, #6
 8006e00:	4638      	mov	r0, r7
 8006e02:	b00b      	add	sp, #44	; 0x2c
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	463e      	mov	r6, r7
 8006e0a:	4625      	mov	r5, r4
 8006e0c:	2401      	movs	r4, #1
 8006e0e:	e7cc      	b.n	8006daa <__gethex+0xce>
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	1cb1      	adds	r1, r6, #2
 8006e16:	e7d5      	b.n	8006dc4 <__gethex+0xe8>
 8006e18:	f04f 0901 	mov.w	r9, #1
 8006e1c:	e7fa      	b.n	8006e14 <__gethex+0x138>
 8006e1e:	230a      	movs	r3, #10
 8006e20:	fb03 0202 	mla	r2, r3, r2, r0
 8006e24:	3a10      	subs	r2, #16
 8006e26:	e7d6      	b.n	8006dd6 <__gethex+0xfa>
 8006e28:	4631      	mov	r1, r6
 8006e2a:	e7e1      	b.n	8006df0 <__gethex+0x114>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	1bf3      	subs	r3, r6, r7
 8006e30:	3b01      	subs	r3, #1
 8006e32:	2b07      	cmp	r3, #7
 8006e34:	dc0a      	bgt.n	8006e4c <__gethex+0x170>
 8006e36:	9802      	ldr	r0, [sp, #8]
 8006e38:	f000 fa88 	bl	800734c <_Balloc>
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	b940      	cbnz	r0, 8006e52 <__gethex+0x176>
 8006e40:	4602      	mov	r2, r0
 8006e42:	21de      	movs	r1, #222	; 0xde
 8006e44:	4b5b      	ldr	r3, [pc, #364]	; (8006fb4 <__gethex+0x2d8>)
 8006e46:	485c      	ldr	r0, [pc, #368]	; (8006fb8 <__gethex+0x2dc>)
 8006e48:	f001 f9bc 	bl	80081c4 <__assert_func>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	105b      	asrs	r3, r3, #1
 8006e50:	e7ef      	b.n	8006e32 <__gethex+0x156>
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	f100 0914 	add.w	r9, r0, #20
 8006e5a:	f1ca 0301 	rsb	r3, sl, #1
 8006e5e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e62:	f8cd b004 	str.w	fp, [sp, #4]
 8006e66:	9308      	str	r3, [sp, #32]
 8006e68:	42b7      	cmp	r7, r6
 8006e6a:	d33f      	bcc.n	8006eec <__gethex+0x210>
 8006e6c:	9f04      	ldr	r7, [sp, #16]
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	f847 3b04 	str.w	r3, [r7], #4
 8006e74:	eba7 0709 	sub.w	r7, r7, r9
 8006e78:	10bf      	asrs	r7, r7, #2
 8006e7a:	6127      	str	r7, [r4, #16]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fb57 	bl	8007530 <__hi0bits>
 8006e82:	017f      	lsls	r7, r7, #5
 8006e84:	f8d8 6000 	ldr.w	r6, [r8]
 8006e88:	1a3f      	subs	r7, r7, r0
 8006e8a:	42b7      	cmp	r7, r6
 8006e8c:	dd62      	ble.n	8006f54 <__gethex+0x278>
 8006e8e:	1bbf      	subs	r7, r7, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fef1 	bl	8007c7a <__any_on>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	b1a8      	cbz	r0, 8006ec8 <__gethex+0x1ec>
 8006e9c:	f04f 0a01 	mov.w	sl, #1
 8006ea0:	1e7b      	subs	r3, r7, #1
 8006ea2:	1159      	asrs	r1, r3, #5
 8006ea4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ea8:	f003 021f 	and.w	r2, r3, #31
 8006eac:	fa0a f202 	lsl.w	r2, sl, r2
 8006eb0:	420a      	tst	r2, r1
 8006eb2:	d009      	beq.n	8006ec8 <__gethex+0x1ec>
 8006eb4:	4553      	cmp	r3, sl
 8006eb6:	dd05      	ble.n	8006ec4 <__gethex+0x1e8>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	1eb9      	subs	r1, r7, #2
 8006ebc:	f000 fedd 	bl	8007c7a <__any_on>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d144      	bne.n	8006f4e <__gethex+0x272>
 8006ec4:	f04f 0a02 	mov.w	sl, #2
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff fe9e 	bl	8006c0c <rshift>
 8006ed0:	443d      	add	r5, r7
 8006ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	da4a      	bge.n	8006f70 <__gethex+0x294>
 8006eda:	4621      	mov	r1, r4
 8006edc:	9802      	ldr	r0, [sp, #8]
 8006ede:	f000 fa75 	bl	80073cc <_Bfree>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ee6:	27a3      	movs	r7, #163	; 0xa3
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e789      	b.n	8006e00 <__gethex+0x124>
 8006eec:	1e73      	subs	r3, r6, #1
 8006eee:	9a06      	ldr	r2, [sp, #24]
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d019      	beq.n	8006f2e <__gethex+0x252>
 8006efa:	f1bb 0f20 	cmp.w	fp, #32
 8006efe:	d107      	bne.n	8006f10 <__gethex+0x234>
 8006f00:	9b04      	ldr	r3, [sp, #16]
 8006f02:	9a01      	ldr	r2, [sp, #4]
 8006f04:	f843 2b04 	str.w	r2, [r3], #4
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	469b      	mov	fp, r3
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f14:	f7ff fecd 	bl	8006cb2 <__hexdig_fun>
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	f000 000f 	and.w	r0, r0, #15
 8006f1e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f22:	4303      	orrs	r3, r0
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	f10b 0b04 	add.w	fp, fp, #4
 8006f2a:	9b07      	ldr	r3, [sp, #28]
 8006f2c:	e00d      	b.n	8006f4a <__gethex+0x26e>
 8006f2e:	9a08      	ldr	r2, [sp, #32]
 8006f30:	1e73      	subs	r3, r6, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	42bb      	cmp	r3, r7
 8006f36:	d3e0      	bcc.n	8006efa <__gethex+0x21e>
 8006f38:	4618      	mov	r0, r3
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	9903      	ldr	r1, [sp, #12]
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	f001 f91e 	bl	8008180 <strncmp>
 8006f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d1d7      	bne.n	8006efa <__gethex+0x21e>
 8006f4a:	461e      	mov	r6, r3
 8006f4c:	e78c      	b.n	8006e68 <__gethex+0x18c>
 8006f4e:	f04f 0a03 	mov.w	sl, #3
 8006f52:	e7b9      	b.n	8006ec8 <__gethex+0x1ec>
 8006f54:	da09      	bge.n	8006f6a <__gethex+0x28e>
 8006f56:	1bf7      	subs	r7, r6, r7
 8006f58:	4621      	mov	r1, r4
 8006f5a:	463a      	mov	r2, r7
 8006f5c:	9802      	ldr	r0, [sp, #8]
 8006f5e:	f000 fc4d 	bl	80077fc <__lshift>
 8006f62:	4604      	mov	r4, r0
 8006f64:	1bed      	subs	r5, r5, r7
 8006f66:	f100 0914 	add.w	r9, r0, #20
 8006f6a:	f04f 0a00 	mov.w	sl, #0
 8006f6e:	e7b0      	b.n	8006ed2 <__gethex+0x1f6>
 8006f70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f74:	42a8      	cmp	r0, r5
 8006f76:	dd72      	ble.n	800705e <__gethex+0x382>
 8006f78:	1b45      	subs	r5, r0, r5
 8006f7a:	42ae      	cmp	r6, r5
 8006f7c:	dc35      	bgt.n	8006fea <__gethex+0x30e>
 8006f7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d029      	beq.n	8006fda <__gethex+0x2fe>
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d02b      	beq.n	8006fe2 <__gethex+0x306>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d11c      	bne.n	8006fc8 <__gethex+0x2ec>
 8006f8e:	42ae      	cmp	r6, r5
 8006f90:	d11a      	bne.n	8006fc8 <__gethex+0x2ec>
 8006f92:	2e01      	cmp	r6, #1
 8006f94:	d112      	bne.n	8006fbc <__gethex+0x2e0>
 8006f96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f9a:	9a05      	ldr	r2, [sp, #20]
 8006f9c:	2762      	movs	r7, #98	; 0x62
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	f8c9 3000 	str.w	r3, [r9]
 8006fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006faa:	601c      	str	r4, [r3, #0]
 8006fac:	e728      	b.n	8006e00 <__gethex+0x124>
 8006fae:	bf00      	nop
 8006fb0:	0801a994 	.word	0x0801a994
 8006fb4:	0801a8fb 	.word	0x0801a8fb
 8006fb8:	0801a90c 	.word	0x0801a90c
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	1e71      	subs	r1, r6, #1
 8006fc0:	f000 fe5b 	bl	8007c7a <__any_on>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d1e6      	bne.n	8006f96 <__gethex+0x2ba>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	9802      	ldr	r0, [sp, #8]
 8006fcc:	f000 f9fe 	bl	80073cc <_Bfree>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fd4:	2750      	movs	r7, #80	; 0x50
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e712      	b.n	8006e00 <__gethex+0x124>
 8006fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f3      	bne.n	8006fc8 <__gethex+0x2ec>
 8006fe0:	e7d9      	b.n	8006f96 <__gethex+0x2ba>
 8006fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1d6      	bne.n	8006f96 <__gethex+0x2ba>
 8006fe8:	e7ee      	b.n	8006fc8 <__gethex+0x2ec>
 8006fea:	1e6f      	subs	r7, r5, #1
 8006fec:	f1ba 0f00 	cmp.w	sl, #0
 8006ff0:	d132      	bne.n	8007058 <__gethex+0x37c>
 8006ff2:	b127      	cbz	r7, 8006ffe <__gethex+0x322>
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fe3f 	bl	8007c7a <__any_on>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	2101      	movs	r1, #1
 8007000:	117b      	asrs	r3, r7, #5
 8007002:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007006:	f007 071f 	and.w	r7, r7, #31
 800700a:	fa01 f707 	lsl.w	r7, r1, r7
 800700e:	421f      	tst	r7, r3
 8007010:	f04f 0702 	mov.w	r7, #2
 8007014:	4629      	mov	r1, r5
 8007016:	4620      	mov	r0, r4
 8007018:	bf18      	it	ne
 800701a:	f04a 0a02 	orrne.w	sl, sl, #2
 800701e:	1b76      	subs	r6, r6, r5
 8007020:	f7ff fdf4 	bl	8006c0c <rshift>
 8007024:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007028:	f1ba 0f00 	cmp.w	sl, #0
 800702c:	d048      	beq.n	80070c0 <__gethex+0x3e4>
 800702e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d015      	beq.n	8007062 <__gethex+0x386>
 8007036:	2b03      	cmp	r3, #3
 8007038:	d017      	beq.n	800706a <__gethex+0x38e>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d109      	bne.n	8007052 <__gethex+0x376>
 800703e:	f01a 0f02 	tst.w	sl, #2
 8007042:	d006      	beq.n	8007052 <__gethex+0x376>
 8007044:	f8d9 0000 	ldr.w	r0, [r9]
 8007048:	ea4a 0a00 	orr.w	sl, sl, r0
 800704c:	f01a 0f01 	tst.w	sl, #1
 8007050:	d10e      	bne.n	8007070 <__gethex+0x394>
 8007052:	f047 0710 	orr.w	r7, r7, #16
 8007056:	e033      	b.n	80070c0 <__gethex+0x3e4>
 8007058:	f04f 0a01 	mov.w	sl, #1
 800705c:	e7cf      	b.n	8006ffe <__gethex+0x322>
 800705e:	2701      	movs	r7, #1
 8007060:	e7e2      	b.n	8007028 <__gethex+0x34c>
 8007062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007064:	f1c3 0301 	rsb	r3, r3, #1
 8007068:	9315      	str	r3, [sp, #84]	; 0x54
 800706a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f0      	beq.n	8007052 <__gethex+0x376>
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007078:	f104 0314 	add.w	r3, r4, #20
 800707c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007080:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007084:	4618      	mov	r0, r3
 8007086:	f853 2b04 	ldr.w	r2, [r3], #4
 800708a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800708e:	d01c      	beq.n	80070ca <__gethex+0x3ee>
 8007090:	3201      	adds	r2, #1
 8007092:	6002      	str	r2, [r0, #0]
 8007094:	2f02      	cmp	r7, #2
 8007096:	f104 0314 	add.w	r3, r4, #20
 800709a:	d13d      	bne.n	8007118 <__gethex+0x43c>
 800709c:	f8d8 2000 	ldr.w	r2, [r8]
 80070a0:	3a01      	subs	r2, #1
 80070a2:	42b2      	cmp	r2, r6
 80070a4:	d10a      	bne.n	80070bc <__gethex+0x3e0>
 80070a6:	2201      	movs	r2, #1
 80070a8:	1171      	asrs	r1, r6, #5
 80070aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070ae:	f006 061f 	and.w	r6, r6, #31
 80070b2:	fa02 f606 	lsl.w	r6, r2, r6
 80070b6:	421e      	tst	r6, r3
 80070b8:	bf18      	it	ne
 80070ba:	4617      	movne	r7, r2
 80070bc:	f047 0720 	orr.w	r7, r7, #32
 80070c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c2:	601c      	str	r4, [r3, #0]
 80070c4:	9b05      	ldr	r3, [sp, #20]
 80070c6:	601d      	str	r5, [r3, #0]
 80070c8:	e69a      	b.n	8006e00 <__gethex+0x124>
 80070ca:	4299      	cmp	r1, r3
 80070cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80070d0:	d8d8      	bhi.n	8007084 <__gethex+0x3a8>
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	459b      	cmp	fp, r3
 80070d6:	db17      	blt.n	8007108 <__gethex+0x42c>
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	9802      	ldr	r0, [sp, #8]
 80070dc:	3101      	adds	r1, #1
 80070de:	f000 f935 	bl	800734c <_Balloc>
 80070e2:	4681      	mov	r9, r0
 80070e4:	b918      	cbnz	r0, 80070ee <__gethex+0x412>
 80070e6:	4602      	mov	r2, r0
 80070e8:	2184      	movs	r1, #132	; 0x84
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <__gethex+0x474>)
 80070ec:	e6ab      	b.n	8006e46 <__gethex+0x16a>
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	f104 010c 	add.w	r1, r4, #12
 80070f4:	3202      	adds	r2, #2
 80070f6:	0092      	lsls	r2, r2, #2
 80070f8:	300c      	adds	r0, #12
 80070fa:	f000 f919 	bl	8007330 <memcpy>
 80070fe:	4621      	mov	r1, r4
 8007100:	9802      	ldr	r0, [sp, #8]
 8007102:	f000 f963 	bl	80073cc <_Bfree>
 8007106:	464c      	mov	r4, r9
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	6122      	str	r2, [r4, #16]
 800710e:	2201      	movs	r2, #1
 8007110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007114:	615a      	str	r2, [r3, #20]
 8007116:	e7bd      	b.n	8007094 <__gethex+0x3b8>
 8007118:	6922      	ldr	r2, [r4, #16]
 800711a:	455a      	cmp	r2, fp
 800711c:	dd0b      	ble.n	8007136 <__gethex+0x45a>
 800711e:	2101      	movs	r1, #1
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff fd73 	bl	8006c0c <rshift>
 8007126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800712a:	3501      	adds	r5, #1
 800712c:	42ab      	cmp	r3, r5
 800712e:	f6ff aed4 	blt.w	8006eda <__gethex+0x1fe>
 8007132:	2701      	movs	r7, #1
 8007134:	e7c2      	b.n	80070bc <__gethex+0x3e0>
 8007136:	f016 061f 	ands.w	r6, r6, #31
 800713a:	d0fa      	beq.n	8007132 <__gethex+0x456>
 800713c:	4453      	add	r3, sl
 800713e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007142:	f000 f9f5 	bl	8007530 <__hi0bits>
 8007146:	f1c6 0620 	rsb	r6, r6, #32
 800714a:	42b0      	cmp	r0, r6
 800714c:	dbe7      	blt.n	800711e <__gethex+0x442>
 800714e:	e7f0      	b.n	8007132 <__gethex+0x456>
 8007150:	0801a8fb 	.word	0x0801a8fb

08007154 <L_shift>:
 8007154:	f1c2 0208 	rsb	r2, r2, #8
 8007158:	0092      	lsls	r2, r2, #2
 800715a:	b570      	push	{r4, r5, r6, lr}
 800715c:	f1c2 0620 	rsb	r6, r2, #32
 8007160:	6843      	ldr	r3, [r0, #4]
 8007162:	6804      	ldr	r4, [r0, #0]
 8007164:	fa03 f506 	lsl.w	r5, r3, r6
 8007168:	432c      	orrs	r4, r5
 800716a:	40d3      	lsrs	r3, r2
 800716c:	6004      	str	r4, [r0, #0]
 800716e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007172:	4288      	cmp	r0, r1
 8007174:	d3f4      	bcc.n	8007160 <L_shift+0xc>
 8007176:	bd70      	pop	{r4, r5, r6, pc}

08007178 <__match>:
 8007178:	b530      	push	{r4, r5, lr}
 800717a:	6803      	ldr	r3, [r0, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	b914      	cbnz	r4, 800718a <__match+0x12>
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	2001      	movs	r0, #1
 8007188:	bd30      	pop	{r4, r5, pc}
 800718a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007192:	2d19      	cmp	r5, #25
 8007194:	bf98      	it	ls
 8007196:	3220      	addls	r2, #32
 8007198:	42a2      	cmp	r2, r4
 800719a:	d0f0      	beq.n	800717e <__match+0x6>
 800719c:	2000      	movs	r0, #0
 800719e:	e7f3      	b.n	8007188 <__match+0x10>

080071a0 <__hexnan>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	2500      	movs	r5, #0
 80071a6:	680b      	ldr	r3, [r1, #0]
 80071a8:	4682      	mov	sl, r0
 80071aa:	115e      	asrs	r6, r3, #5
 80071ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071b0:	f013 031f 	ands.w	r3, r3, #31
 80071b4:	bf18      	it	ne
 80071b6:	3604      	addne	r6, #4
 80071b8:	1f37      	subs	r7, r6, #4
 80071ba:	46b9      	mov	r9, r7
 80071bc:	463c      	mov	r4, r7
 80071be:	46ab      	mov	fp, r5
 80071c0:	b087      	sub	sp, #28
 80071c2:	4690      	mov	r8, r2
 80071c4:	6802      	ldr	r2, [r0, #0]
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80071cc:	9502      	str	r5, [sp, #8]
 80071ce:	7851      	ldrb	r1, [r2, #1]
 80071d0:	1c53      	adds	r3, r2, #1
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	b341      	cbz	r1, 8007228 <__hexnan+0x88>
 80071d6:	4608      	mov	r0, r1
 80071d8:	9205      	str	r2, [sp, #20]
 80071da:	9104      	str	r1, [sp, #16]
 80071dc:	f7ff fd69 	bl	8006cb2 <__hexdig_fun>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d14f      	bne.n	8007284 <__hexnan+0xe4>
 80071e4:	9904      	ldr	r1, [sp, #16]
 80071e6:	9a05      	ldr	r2, [sp, #20]
 80071e8:	2920      	cmp	r1, #32
 80071ea:	d818      	bhi.n	800721e <__hexnan+0x7e>
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	459b      	cmp	fp, r3
 80071f0:	dd13      	ble.n	800721a <__hexnan+0x7a>
 80071f2:	454c      	cmp	r4, r9
 80071f4:	d206      	bcs.n	8007204 <__hexnan+0x64>
 80071f6:	2d07      	cmp	r5, #7
 80071f8:	dc04      	bgt.n	8007204 <__hexnan+0x64>
 80071fa:	462a      	mov	r2, r5
 80071fc:	4649      	mov	r1, r9
 80071fe:	4620      	mov	r0, r4
 8007200:	f7ff ffa8 	bl	8007154 <L_shift>
 8007204:	4544      	cmp	r4, r8
 8007206:	d950      	bls.n	80072aa <__hexnan+0x10a>
 8007208:	2300      	movs	r3, #0
 800720a:	f1a4 0904 	sub.w	r9, r4, #4
 800720e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007212:	461d      	mov	r5, r3
 8007214:	464c      	mov	r4, r9
 8007216:	f8cd b008 	str.w	fp, [sp, #8]
 800721a:	9a03      	ldr	r2, [sp, #12]
 800721c:	e7d7      	b.n	80071ce <__hexnan+0x2e>
 800721e:	2929      	cmp	r1, #41	; 0x29
 8007220:	d156      	bne.n	80072d0 <__hexnan+0x130>
 8007222:	3202      	adds	r2, #2
 8007224:	f8ca 2000 	str.w	r2, [sl]
 8007228:	f1bb 0f00 	cmp.w	fp, #0
 800722c:	d050      	beq.n	80072d0 <__hexnan+0x130>
 800722e:	454c      	cmp	r4, r9
 8007230:	d206      	bcs.n	8007240 <__hexnan+0xa0>
 8007232:	2d07      	cmp	r5, #7
 8007234:	dc04      	bgt.n	8007240 <__hexnan+0xa0>
 8007236:	462a      	mov	r2, r5
 8007238:	4649      	mov	r1, r9
 800723a:	4620      	mov	r0, r4
 800723c:	f7ff ff8a 	bl	8007154 <L_shift>
 8007240:	4544      	cmp	r4, r8
 8007242:	d934      	bls.n	80072ae <__hexnan+0x10e>
 8007244:	4623      	mov	r3, r4
 8007246:	f1a8 0204 	sub.w	r2, r8, #4
 800724a:	f853 1b04 	ldr.w	r1, [r3], #4
 800724e:	429f      	cmp	r7, r3
 8007250:	f842 1f04 	str.w	r1, [r2, #4]!
 8007254:	d2f9      	bcs.n	800724a <__hexnan+0xaa>
 8007256:	1b3b      	subs	r3, r7, r4
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3304      	adds	r3, #4
 800725e:	3401      	adds	r4, #1
 8007260:	3e03      	subs	r6, #3
 8007262:	42b4      	cmp	r4, r6
 8007264:	bf88      	it	hi
 8007266:	2304      	movhi	r3, #4
 8007268:	2200      	movs	r2, #0
 800726a:	4443      	add	r3, r8
 800726c:	f843 2b04 	str.w	r2, [r3], #4
 8007270:	429f      	cmp	r7, r3
 8007272:	d2fb      	bcs.n	800726c <__hexnan+0xcc>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	b91b      	cbnz	r3, 8007280 <__hexnan+0xe0>
 8007278:	4547      	cmp	r7, r8
 800727a:	d127      	bne.n	80072cc <__hexnan+0x12c>
 800727c:	2301      	movs	r3, #1
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	2005      	movs	r0, #5
 8007282:	e026      	b.n	80072d2 <__hexnan+0x132>
 8007284:	3501      	adds	r5, #1
 8007286:	2d08      	cmp	r5, #8
 8007288:	f10b 0b01 	add.w	fp, fp, #1
 800728c:	dd06      	ble.n	800729c <__hexnan+0xfc>
 800728e:	4544      	cmp	r4, r8
 8007290:	d9c3      	bls.n	800721a <__hexnan+0x7a>
 8007292:	2300      	movs	r3, #0
 8007294:	2501      	movs	r5, #1
 8007296:	f844 3c04 	str.w	r3, [r4, #-4]
 800729a:	3c04      	subs	r4, #4
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	f000 000f 	and.w	r0, r0, #15
 80072a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	e7b7      	b.n	800721a <__hexnan+0x7a>
 80072aa:	2508      	movs	r5, #8
 80072ac:	e7b5      	b.n	800721a <__hexnan+0x7a>
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0df      	beq.n	8007274 <__hexnan+0xd4>
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	f1c3 0320 	rsb	r3, r3, #32
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072c4:	401a      	ands	r2, r3
 80072c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80072ca:	e7d3      	b.n	8007274 <__hexnan+0xd4>
 80072cc:	3f04      	subs	r7, #4
 80072ce:	e7d1      	b.n	8007274 <__hexnan+0xd4>
 80072d0:	2004      	movs	r0, #4
 80072d2:	b007      	add	sp, #28
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072d8 <_localeconv_r>:
 80072d8:	4800      	ldr	r0, [pc, #0]	; (80072dc <_localeconv_r+0x4>)
 80072da:	4770      	bx	lr
 80072dc:	2000016c 	.word	0x2000016c

080072e0 <malloc>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <malloc+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f000 bd65 	b.w	8007db4 <_malloc_r>
 80072ea:	bf00      	nop
 80072ec:	20000014 	.word	0x20000014

080072f0 <__ascii_mbtowc>:
 80072f0:	b082      	sub	sp, #8
 80072f2:	b901      	cbnz	r1, 80072f6 <__ascii_mbtowc+0x6>
 80072f4:	a901      	add	r1, sp, #4
 80072f6:	b142      	cbz	r2, 800730a <__ascii_mbtowc+0x1a>
 80072f8:	b14b      	cbz	r3, 800730e <__ascii_mbtowc+0x1e>
 80072fa:	7813      	ldrb	r3, [r2, #0]
 80072fc:	600b      	str	r3, [r1, #0]
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	1e10      	subs	r0, r2, #0
 8007302:	bf18      	it	ne
 8007304:	2001      	movne	r0, #1
 8007306:	b002      	add	sp, #8
 8007308:	4770      	bx	lr
 800730a:	4610      	mov	r0, r2
 800730c:	e7fb      	b.n	8007306 <__ascii_mbtowc+0x16>
 800730e:	f06f 0001 	mvn.w	r0, #1
 8007312:	e7f8      	b.n	8007306 <__ascii_mbtowc+0x16>

08007314 <memchr>:
 8007314:	4603      	mov	r3, r0
 8007316:	b510      	push	{r4, lr}
 8007318:	b2c9      	uxtb	r1, r1
 800731a:	4402      	add	r2, r0
 800731c:	4293      	cmp	r3, r2
 800731e:	4618      	mov	r0, r3
 8007320:	d101      	bne.n	8007326 <memchr+0x12>
 8007322:	2000      	movs	r0, #0
 8007324:	e003      	b.n	800732e <memchr+0x1a>
 8007326:	7804      	ldrb	r4, [r0, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	428c      	cmp	r4, r1
 800732c:	d1f6      	bne.n	800731c <memchr+0x8>
 800732e:	bd10      	pop	{r4, pc}

08007330 <memcpy>:
 8007330:	440a      	add	r2, r1
 8007332:	4291      	cmp	r1, r2
 8007334:	f100 33ff 	add.w	r3, r0, #4294967295
 8007338:	d100      	bne.n	800733c <memcpy+0xc>
 800733a:	4770      	bx	lr
 800733c:	b510      	push	{r4, lr}
 800733e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007342:	4291      	cmp	r1, r2
 8007344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007348:	d1f9      	bne.n	800733e <memcpy+0xe>
 800734a:	bd10      	pop	{r4, pc}

0800734c <_Balloc>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	b976      	cbnz	r6, 8007374 <_Balloc+0x28>
 8007356:	2010      	movs	r0, #16
 8007358:	f7ff ffc2 	bl	80072e0 <malloc>
 800735c:	4602      	mov	r2, r0
 800735e:	6260      	str	r0, [r4, #36]	; 0x24
 8007360:	b920      	cbnz	r0, 800736c <_Balloc+0x20>
 8007362:	2166      	movs	r1, #102	; 0x66
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <_Balloc+0x78>)
 8007366:	4818      	ldr	r0, [pc, #96]	; (80073c8 <_Balloc+0x7c>)
 8007368:	f000 ff2c 	bl	80081c4 <__assert_func>
 800736c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007370:	6006      	str	r6, [r0, #0]
 8007372:	60c6      	str	r6, [r0, #12]
 8007374:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007376:	68f3      	ldr	r3, [r6, #12]
 8007378:	b183      	cbz	r3, 800739c <_Balloc+0x50>
 800737a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007382:	b9b8      	cbnz	r0, 80073b4 <_Balloc+0x68>
 8007384:	2101      	movs	r1, #1
 8007386:	fa01 f605 	lsl.w	r6, r1, r5
 800738a:	1d72      	adds	r2, r6, #5
 800738c:	4620      	mov	r0, r4
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	f000 fc94 	bl	8007cbc <_calloc_r>
 8007394:	b160      	cbz	r0, 80073b0 <_Balloc+0x64>
 8007396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800739a:	e00e      	b.n	80073ba <_Balloc+0x6e>
 800739c:	2221      	movs	r2, #33	; 0x21
 800739e:	2104      	movs	r1, #4
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fc8b 	bl	8007cbc <_calloc_r>
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	60f0      	str	r0, [r6, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e4      	bne.n	800737a <_Balloc+0x2e>
 80073b0:	2000      	movs	r0, #0
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	6802      	ldr	r2, [r0, #0]
 80073b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ba:	2300      	movs	r3, #0
 80073bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073c0:	e7f7      	b.n	80073b2 <_Balloc+0x66>
 80073c2:	bf00      	nop
 80073c4:	0801a866 	.word	0x0801a866
 80073c8:	0801a9a6 	.word	0x0801a9a6

080073cc <_Bfree>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d0:	4605      	mov	r5, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	b976      	cbnz	r6, 80073f4 <_Bfree+0x28>
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7ff ff82 	bl	80072e0 <malloc>
 80073dc:	4602      	mov	r2, r0
 80073de:	6268      	str	r0, [r5, #36]	; 0x24
 80073e0:	b920      	cbnz	r0, 80073ec <_Bfree+0x20>
 80073e2:	218a      	movs	r1, #138	; 0x8a
 80073e4:	4b08      	ldr	r3, [pc, #32]	; (8007408 <_Bfree+0x3c>)
 80073e6:	4809      	ldr	r0, [pc, #36]	; (800740c <_Bfree+0x40>)
 80073e8:	f000 feec 	bl	80081c4 <__assert_func>
 80073ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f0:	6006      	str	r6, [r0, #0]
 80073f2:	60c6      	str	r6, [r0, #12]
 80073f4:	b13c      	cbz	r4, 8007406 <_Bfree+0x3a>
 80073f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073f8:	6862      	ldr	r2, [r4, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007400:	6021      	str	r1, [r4, #0]
 8007402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	0801a866 	.word	0x0801a866
 800740c:	0801a9a6 	.word	0x0801a9a6

08007410 <__multadd>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4607      	mov	r7, r0
 8007416:	460c      	mov	r4, r1
 8007418:	461e      	mov	r6, r3
 800741a:	2000      	movs	r0, #0
 800741c:	690d      	ldr	r5, [r1, #16]
 800741e:	f101 0c14 	add.w	ip, r1, #20
 8007422:	f8dc 3000 	ldr.w	r3, [ip]
 8007426:	3001      	adds	r0, #1
 8007428:	b299      	uxth	r1, r3
 800742a:	fb02 6101 	mla	r1, r2, r1, r6
 800742e:	0c1e      	lsrs	r6, r3, #16
 8007430:	0c0b      	lsrs	r3, r1, #16
 8007432:	fb02 3306 	mla	r3, r2, r6, r3
 8007436:	b289      	uxth	r1, r1
 8007438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800743c:	4285      	cmp	r5, r0
 800743e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007442:	f84c 1b04 	str.w	r1, [ip], #4
 8007446:	dcec      	bgt.n	8007422 <__multadd+0x12>
 8007448:	b30e      	cbz	r6, 800748e <__multadd+0x7e>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc19      	bgt.n	8007484 <__multadd+0x74>
 8007450:	6861      	ldr	r1, [r4, #4]
 8007452:	4638      	mov	r0, r7
 8007454:	3101      	adds	r1, #1
 8007456:	f7ff ff79 	bl	800734c <_Balloc>
 800745a:	4680      	mov	r8, r0
 800745c:	b928      	cbnz	r0, 800746a <__multadd+0x5a>
 800745e:	4602      	mov	r2, r0
 8007460:	21b5      	movs	r1, #181	; 0xb5
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <__multadd+0x84>)
 8007464:	480c      	ldr	r0, [pc, #48]	; (8007498 <__multadd+0x88>)
 8007466:	f000 fead 	bl	80081c4 <__assert_func>
 800746a:	6922      	ldr	r2, [r4, #16]
 800746c:	f104 010c 	add.w	r1, r4, #12
 8007470:	3202      	adds	r2, #2
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	300c      	adds	r0, #12
 8007476:	f7ff ff5b 	bl	8007330 <memcpy>
 800747a:	4621      	mov	r1, r4
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ffa5 	bl	80073cc <_Bfree>
 8007482:	4644      	mov	r4, r8
 8007484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007488:	3501      	adds	r5, #1
 800748a:	615e      	str	r6, [r3, #20]
 800748c:	6125      	str	r5, [r4, #16]
 800748e:	4620      	mov	r0, r4
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	0801a8fb 	.word	0x0801a8fb
 8007498:	0801a9a6 	.word	0x0801a9a6

0800749c <__s2b>:
 800749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	4615      	mov	r5, r2
 80074a2:	2209      	movs	r2, #9
 80074a4:	461f      	mov	r7, r3
 80074a6:	3308      	adds	r3, #8
 80074a8:	460c      	mov	r4, r1
 80074aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ae:	4606      	mov	r6, r0
 80074b0:	2201      	movs	r2, #1
 80074b2:	2100      	movs	r1, #0
 80074b4:	429a      	cmp	r2, r3
 80074b6:	db09      	blt.n	80074cc <__s2b+0x30>
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff47 	bl	800734c <_Balloc>
 80074be:	b940      	cbnz	r0, 80074d2 <__s2b+0x36>
 80074c0:	4602      	mov	r2, r0
 80074c2:	21ce      	movs	r1, #206	; 0xce
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <__s2b+0x8c>)
 80074c6:	4819      	ldr	r0, [pc, #100]	; (800752c <__s2b+0x90>)
 80074c8:	f000 fe7c 	bl	80081c4 <__assert_func>
 80074cc:	0052      	lsls	r2, r2, #1
 80074ce:	3101      	adds	r1, #1
 80074d0:	e7f0      	b.n	80074b4 <__s2b+0x18>
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	2d09      	cmp	r5, #9
 80074d6:	6143      	str	r3, [r0, #20]
 80074d8:	f04f 0301 	mov.w	r3, #1
 80074dc:	6103      	str	r3, [r0, #16]
 80074de:	dd16      	ble.n	800750e <__s2b+0x72>
 80074e0:	f104 0909 	add.w	r9, r4, #9
 80074e4:	46c8      	mov	r8, r9
 80074e6:	442c      	add	r4, r5
 80074e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074ec:	4601      	mov	r1, r0
 80074ee:	220a      	movs	r2, #10
 80074f0:	4630      	mov	r0, r6
 80074f2:	3b30      	subs	r3, #48	; 0x30
 80074f4:	f7ff ff8c 	bl	8007410 <__multadd>
 80074f8:	45a0      	cmp	r8, r4
 80074fa:	d1f5      	bne.n	80074e8 <__s2b+0x4c>
 80074fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007500:	444c      	add	r4, r9
 8007502:	1b2d      	subs	r5, r5, r4
 8007504:	1963      	adds	r3, r4, r5
 8007506:	42bb      	cmp	r3, r7
 8007508:	db04      	blt.n	8007514 <__s2b+0x78>
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	2509      	movs	r5, #9
 8007510:	340a      	adds	r4, #10
 8007512:	e7f6      	b.n	8007502 <__s2b+0x66>
 8007514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007518:	4601      	mov	r1, r0
 800751a:	220a      	movs	r2, #10
 800751c:	4630      	mov	r0, r6
 800751e:	3b30      	subs	r3, #48	; 0x30
 8007520:	f7ff ff76 	bl	8007410 <__multadd>
 8007524:	e7ee      	b.n	8007504 <__s2b+0x68>
 8007526:	bf00      	nop
 8007528:	0801a8fb 	.word	0x0801a8fb
 800752c:	0801a9a6 	.word	0x0801a9a6

08007530 <__hi0bits>:
 8007530:	0c02      	lsrs	r2, r0, #16
 8007532:	0412      	lsls	r2, r2, #16
 8007534:	4603      	mov	r3, r0
 8007536:	b9ca      	cbnz	r2, 800756c <__hi0bits+0x3c>
 8007538:	0403      	lsls	r3, r0, #16
 800753a:	2010      	movs	r0, #16
 800753c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007540:	bf04      	itt	eq
 8007542:	021b      	lsleq	r3, r3, #8
 8007544:	3008      	addeq	r0, #8
 8007546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800754a:	bf04      	itt	eq
 800754c:	011b      	lsleq	r3, r3, #4
 800754e:	3004      	addeq	r0, #4
 8007550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007554:	bf04      	itt	eq
 8007556:	009b      	lsleq	r3, r3, #2
 8007558:	3002      	addeq	r0, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	db05      	blt.n	800756a <__hi0bits+0x3a>
 800755e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007562:	f100 0001 	add.w	r0, r0, #1
 8007566:	bf08      	it	eq
 8007568:	2020      	moveq	r0, #32
 800756a:	4770      	bx	lr
 800756c:	2000      	movs	r0, #0
 800756e:	e7e5      	b.n	800753c <__hi0bits+0xc>

08007570 <__lo0bits>:
 8007570:	6803      	ldr	r3, [r0, #0]
 8007572:	4602      	mov	r2, r0
 8007574:	f013 0007 	ands.w	r0, r3, #7
 8007578:	d00b      	beq.n	8007592 <__lo0bits+0x22>
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	d421      	bmi.n	80075c2 <__lo0bits+0x52>
 800757e:	0798      	lsls	r0, r3, #30
 8007580:	bf49      	itett	mi
 8007582:	085b      	lsrmi	r3, r3, #1
 8007584:	089b      	lsrpl	r3, r3, #2
 8007586:	2001      	movmi	r0, #1
 8007588:	6013      	strmi	r3, [r2, #0]
 800758a:	bf5c      	itt	pl
 800758c:	2002      	movpl	r0, #2
 800758e:	6013      	strpl	r3, [r2, #0]
 8007590:	4770      	bx	lr
 8007592:	b299      	uxth	r1, r3
 8007594:	b909      	cbnz	r1, 800759a <__lo0bits+0x2a>
 8007596:	2010      	movs	r0, #16
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	b2d9      	uxtb	r1, r3
 800759c:	b909      	cbnz	r1, 80075a2 <__lo0bits+0x32>
 800759e:	3008      	adds	r0, #8
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	0719      	lsls	r1, r3, #28
 80075a4:	bf04      	itt	eq
 80075a6:	091b      	lsreq	r3, r3, #4
 80075a8:	3004      	addeq	r0, #4
 80075aa:	0799      	lsls	r1, r3, #30
 80075ac:	bf04      	itt	eq
 80075ae:	089b      	lsreq	r3, r3, #2
 80075b0:	3002      	addeq	r0, #2
 80075b2:	07d9      	lsls	r1, r3, #31
 80075b4:	d403      	bmi.n	80075be <__lo0bits+0x4e>
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	f100 0001 	add.w	r0, r0, #1
 80075bc:	d003      	beq.n	80075c6 <__lo0bits+0x56>
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	4770      	bx	lr
 80075c2:	2000      	movs	r0, #0
 80075c4:	4770      	bx	lr
 80075c6:	2020      	movs	r0, #32
 80075c8:	4770      	bx	lr
	...

080075cc <__i2b>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	460c      	mov	r4, r1
 80075d0:	2101      	movs	r1, #1
 80075d2:	f7ff febb 	bl	800734c <_Balloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	b928      	cbnz	r0, 80075e6 <__i2b+0x1a>
 80075da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <__i2b+0x24>)
 80075e0:	4804      	ldr	r0, [pc, #16]	; (80075f4 <__i2b+0x28>)
 80075e2:	f000 fdef 	bl	80081c4 <__assert_func>
 80075e6:	2301      	movs	r3, #1
 80075e8:	6144      	str	r4, [r0, #20]
 80075ea:	6103      	str	r3, [r0, #16]
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop
 80075f0:	0801a8fb 	.word	0x0801a8fb
 80075f4:	0801a9a6 	.word	0x0801a9a6

080075f8 <__multiply>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	4691      	mov	r9, r2
 80075fe:	690a      	ldr	r2, [r1, #16]
 8007600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007604:	460c      	mov	r4, r1
 8007606:	429a      	cmp	r2, r3
 8007608:	bfbe      	ittt	lt
 800760a:	460b      	movlt	r3, r1
 800760c:	464c      	movlt	r4, r9
 800760e:	4699      	movlt	r9, r3
 8007610:	6927      	ldr	r7, [r4, #16]
 8007612:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007616:	68a3      	ldr	r3, [r4, #8]
 8007618:	6861      	ldr	r1, [r4, #4]
 800761a:	eb07 060a 	add.w	r6, r7, sl
 800761e:	42b3      	cmp	r3, r6
 8007620:	b085      	sub	sp, #20
 8007622:	bfb8      	it	lt
 8007624:	3101      	addlt	r1, #1
 8007626:	f7ff fe91 	bl	800734c <_Balloc>
 800762a:	b930      	cbnz	r0, 800763a <__multiply+0x42>
 800762c:	4602      	mov	r2, r0
 800762e:	f240 115d 	movw	r1, #349	; 0x15d
 8007632:	4b43      	ldr	r3, [pc, #268]	; (8007740 <__multiply+0x148>)
 8007634:	4843      	ldr	r0, [pc, #268]	; (8007744 <__multiply+0x14c>)
 8007636:	f000 fdc5 	bl	80081c4 <__assert_func>
 800763a:	f100 0514 	add.w	r5, r0, #20
 800763e:	462b      	mov	r3, r5
 8007640:	2200      	movs	r2, #0
 8007642:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007646:	4543      	cmp	r3, r8
 8007648:	d321      	bcc.n	800768e <__multiply+0x96>
 800764a:	f104 0314 	add.w	r3, r4, #20
 800764e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007652:	f109 0314 	add.w	r3, r9, #20
 8007656:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	1b3a      	subs	r2, r7, r4
 800765e:	3a15      	subs	r2, #21
 8007660:	f022 0203 	bic.w	r2, r2, #3
 8007664:	3204      	adds	r2, #4
 8007666:	f104 0115 	add.w	r1, r4, #21
 800766a:	428f      	cmp	r7, r1
 800766c:	bf38      	it	cc
 800766e:	2204      	movcc	r2, #4
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9a02      	ldr	r2, [sp, #8]
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d80c      	bhi.n	8007694 <__multiply+0x9c>
 800767a:	2e00      	cmp	r6, #0
 800767c:	dd03      	ble.n	8007686 <__multiply+0x8e>
 800767e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007682:	2b00      	cmp	r3, #0
 8007684:	d059      	beq.n	800773a <__multiply+0x142>
 8007686:	6106      	str	r6, [r0, #16]
 8007688:	b005      	add	sp, #20
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	f843 2b04 	str.w	r2, [r3], #4
 8007692:	e7d8      	b.n	8007646 <__multiply+0x4e>
 8007694:	f8b3 a000 	ldrh.w	sl, [r3]
 8007698:	f1ba 0f00 	cmp.w	sl, #0
 800769c:	d023      	beq.n	80076e6 <__multiply+0xee>
 800769e:	46a9      	mov	r9, r5
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	f104 0e14 	add.w	lr, r4, #20
 80076a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076ac:	f8d9 1000 	ldr.w	r1, [r9]
 80076b0:	fa1f fb82 	uxth.w	fp, r2
 80076b4:	b289      	uxth	r1, r1
 80076b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80076ba:	4461      	add	r1, ip
 80076bc:	f8d9 c000 	ldr.w	ip, [r9]
 80076c0:	0c12      	lsrs	r2, r2, #16
 80076c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076c6:	fb0a c202 	mla	r2, sl, r2, ip
 80076ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076ce:	b289      	uxth	r1, r1
 80076d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076d4:	4577      	cmp	r7, lr
 80076d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076da:	f849 1b04 	str.w	r1, [r9], #4
 80076de:	d8e3      	bhi.n	80076a8 <__multiply+0xb0>
 80076e0:	9a01      	ldr	r2, [sp, #4]
 80076e2:	f845 c002 	str.w	ip, [r5, r2]
 80076e6:	9a03      	ldr	r2, [sp, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076ee:	f1b9 0f00 	cmp.w	r9, #0
 80076f2:	d020      	beq.n	8007736 <__multiply+0x13e>
 80076f4:	46ae      	mov	lr, r5
 80076f6:	f04f 0a00 	mov.w	sl, #0
 80076fa:	6829      	ldr	r1, [r5, #0]
 80076fc:	f104 0c14 	add.w	ip, r4, #20
 8007700:	f8bc b000 	ldrh.w	fp, [ip]
 8007704:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007708:	b289      	uxth	r1, r1
 800770a:	fb09 220b 	mla	r2, r9, fp, r2
 800770e:	4492      	add	sl, r2
 8007710:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007714:	f84e 1b04 	str.w	r1, [lr], #4
 8007718:	f85c 2b04 	ldr.w	r2, [ip], #4
 800771c:	f8be 1000 	ldrh.w	r1, [lr]
 8007720:	0c12      	lsrs	r2, r2, #16
 8007722:	fb09 1102 	mla	r1, r9, r2, r1
 8007726:	4567      	cmp	r7, ip
 8007728:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800772c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007730:	d8e6      	bhi.n	8007700 <__multiply+0x108>
 8007732:	9a01      	ldr	r2, [sp, #4]
 8007734:	50a9      	str	r1, [r5, r2]
 8007736:	3504      	adds	r5, #4
 8007738:	e79b      	b.n	8007672 <__multiply+0x7a>
 800773a:	3e01      	subs	r6, #1
 800773c:	e79d      	b.n	800767a <__multiply+0x82>
 800773e:	bf00      	nop
 8007740:	0801a8fb 	.word	0x0801a8fb
 8007744:	0801a9a6 	.word	0x0801a9a6

08007748 <__pow5mult>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	4615      	mov	r5, r2
 800774e:	f012 0203 	ands.w	r2, r2, #3
 8007752:	4606      	mov	r6, r0
 8007754:	460f      	mov	r7, r1
 8007756:	d007      	beq.n	8007768 <__pow5mult+0x20>
 8007758:	4c25      	ldr	r4, [pc, #148]	; (80077f0 <__pow5mult+0xa8>)
 800775a:	3a01      	subs	r2, #1
 800775c:	2300      	movs	r3, #0
 800775e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007762:	f7ff fe55 	bl	8007410 <__multadd>
 8007766:	4607      	mov	r7, r0
 8007768:	10ad      	asrs	r5, r5, #2
 800776a:	d03d      	beq.n	80077e8 <__pow5mult+0xa0>
 800776c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800776e:	b97c      	cbnz	r4, 8007790 <__pow5mult+0x48>
 8007770:	2010      	movs	r0, #16
 8007772:	f7ff fdb5 	bl	80072e0 <malloc>
 8007776:	4602      	mov	r2, r0
 8007778:	6270      	str	r0, [r6, #36]	; 0x24
 800777a:	b928      	cbnz	r0, 8007788 <__pow5mult+0x40>
 800777c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007780:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <__pow5mult+0xac>)
 8007782:	481d      	ldr	r0, [pc, #116]	; (80077f8 <__pow5mult+0xb0>)
 8007784:	f000 fd1e 	bl	80081c4 <__assert_func>
 8007788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800778c:	6004      	str	r4, [r0, #0]
 800778e:	60c4      	str	r4, [r0, #12]
 8007790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007798:	b94c      	cbnz	r4, 80077ae <__pow5mult+0x66>
 800779a:	f240 2171 	movw	r1, #625	; 0x271
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ff14 	bl	80075cc <__i2b>
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ac:	6003      	str	r3, [r0, #0]
 80077ae:	f04f 0900 	mov.w	r9, #0
 80077b2:	07eb      	lsls	r3, r5, #31
 80077b4:	d50a      	bpl.n	80077cc <__pow5mult+0x84>
 80077b6:	4639      	mov	r1, r7
 80077b8:	4622      	mov	r2, r4
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7ff ff1c 	bl	80075f8 <__multiply>
 80077c0:	4680      	mov	r8, r0
 80077c2:	4639      	mov	r1, r7
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff fe01 	bl	80073cc <_Bfree>
 80077ca:	4647      	mov	r7, r8
 80077cc:	106d      	asrs	r5, r5, #1
 80077ce:	d00b      	beq.n	80077e8 <__pow5mult+0xa0>
 80077d0:	6820      	ldr	r0, [r4, #0]
 80077d2:	b938      	cbnz	r0, 80077e4 <__pow5mult+0x9c>
 80077d4:	4622      	mov	r2, r4
 80077d6:	4621      	mov	r1, r4
 80077d8:	4630      	mov	r0, r6
 80077da:	f7ff ff0d 	bl	80075f8 <__multiply>
 80077de:	6020      	str	r0, [r4, #0]
 80077e0:	f8c0 9000 	str.w	r9, [r0]
 80077e4:	4604      	mov	r4, r0
 80077e6:	e7e4      	b.n	80077b2 <__pow5mult+0x6a>
 80077e8:	4638      	mov	r0, r7
 80077ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ee:	bf00      	nop
 80077f0:	0801ab18 	.word	0x0801ab18
 80077f4:	0801a866 	.word	0x0801a866
 80077f8:	0801a9a6 	.word	0x0801a9a6

080077fc <__lshift>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	4607      	mov	r7, r0
 8007804:	4691      	mov	r9, r2
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	6849      	ldr	r1, [r1, #4]
 800780a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800780e:	68a3      	ldr	r3, [r4, #8]
 8007810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007814:	f108 0601 	add.w	r6, r8, #1
 8007818:	42b3      	cmp	r3, r6
 800781a:	db0b      	blt.n	8007834 <__lshift+0x38>
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff fd95 	bl	800734c <_Balloc>
 8007822:	4605      	mov	r5, r0
 8007824:	b948      	cbnz	r0, 800783a <__lshift+0x3e>
 8007826:	4602      	mov	r2, r0
 8007828:	f240 11d9 	movw	r1, #473	; 0x1d9
 800782c:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <__lshift+0xd8>)
 800782e:	482a      	ldr	r0, [pc, #168]	; (80078d8 <__lshift+0xdc>)
 8007830:	f000 fcc8 	bl	80081c4 <__assert_func>
 8007834:	3101      	adds	r1, #1
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	e7ee      	b.n	8007818 <__lshift+0x1c>
 800783a:	2300      	movs	r3, #0
 800783c:	f100 0114 	add.w	r1, r0, #20
 8007840:	f100 0210 	add.w	r2, r0, #16
 8007844:	4618      	mov	r0, r3
 8007846:	4553      	cmp	r3, sl
 8007848:	db37      	blt.n	80078ba <__lshift+0xbe>
 800784a:	6920      	ldr	r0, [r4, #16]
 800784c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007850:	f104 0314 	add.w	r3, r4, #20
 8007854:	f019 091f 	ands.w	r9, r9, #31
 8007858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800785c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007860:	d02f      	beq.n	80078c2 <__lshift+0xc6>
 8007862:	468a      	mov	sl, r1
 8007864:	f04f 0c00 	mov.w	ip, #0
 8007868:	f1c9 0e20 	rsb	lr, r9, #32
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	fa02 f209 	lsl.w	r2, r2, r9
 8007872:	ea42 020c 	orr.w	r2, r2, ip
 8007876:	f84a 2b04 	str.w	r2, [sl], #4
 800787a:	f853 2b04 	ldr.w	r2, [r3], #4
 800787e:	4298      	cmp	r0, r3
 8007880:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007884:	d8f2      	bhi.n	800786c <__lshift+0x70>
 8007886:	1b03      	subs	r3, r0, r4
 8007888:	3b15      	subs	r3, #21
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	3304      	adds	r3, #4
 8007890:	f104 0215 	add.w	r2, r4, #21
 8007894:	4290      	cmp	r0, r2
 8007896:	bf38      	it	cc
 8007898:	2304      	movcc	r3, #4
 800789a:	f841 c003 	str.w	ip, [r1, r3]
 800789e:	f1bc 0f00 	cmp.w	ip, #0
 80078a2:	d001      	beq.n	80078a8 <__lshift+0xac>
 80078a4:	f108 0602 	add.w	r6, r8, #2
 80078a8:	3e01      	subs	r6, #1
 80078aa:	4638      	mov	r0, r7
 80078ac:	4621      	mov	r1, r4
 80078ae:	612e      	str	r6, [r5, #16]
 80078b0:	f7ff fd8c 	bl	80073cc <_Bfree>
 80078b4:	4628      	mov	r0, r5
 80078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80078be:	3301      	adds	r3, #1
 80078c0:	e7c1      	b.n	8007846 <__lshift+0x4a>
 80078c2:	3904      	subs	r1, #4
 80078c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c8:	4298      	cmp	r0, r3
 80078ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80078ce:	d8f9      	bhi.n	80078c4 <__lshift+0xc8>
 80078d0:	e7ea      	b.n	80078a8 <__lshift+0xac>
 80078d2:	bf00      	nop
 80078d4:	0801a8fb 	.word	0x0801a8fb
 80078d8:	0801a9a6 	.word	0x0801a9a6

080078dc <__mcmp>:
 80078dc:	4603      	mov	r3, r0
 80078de:	690a      	ldr	r2, [r1, #16]
 80078e0:	6900      	ldr	r0, [r0, #16]
 80078e2:	b530      	push	{r4, r5, lr}
 80078e4:	1a80      	subs	r0, r0, r2
 80078e6:	d10d      	bne.n	8007904 <__mcmp+0x28>
 80078e8:	3314      	adds	r3, #20
 80078ea:	3114      	adds	r1, #20
 80078ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078fc:	4295      	cmp	r5, r2
 80078fe:	d002      	beq.n	8007906 <__mcmp+0x2a>
 8007900:	d304      	bcc.n	800790c <__mcmp+0x30>
 8007902:	2001      	movs	r0, #1
 8007904:	bd30      	pop	{r4, r5, pc}
 8007906:	42a3      	cmp	r3, r4
 8007908:	d3f4      	bcc.n	80078f4 <__mcmp+0x18>
 800790a:	e7fb      	b.n	8007904 <__mcmp+0x28>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e7f8      	b.n	8007904 <__mcmp+0x28>
	...

08007914 <__mdiff>:
 8007914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	460d      	mov	r5, r1
 800791a:	4607      	mov	r7, r0
 800791c:	4611      	mov	r1, r2
 800791e:	4628      	mov	r0, r5
 8007920:	4614      	mov	r4, r2
 8007922:	f7ff ffdb 	bl	80078dc <__mcmp>
 8007926:	1e06      	subs	r6, r0, #0
 8007928:	d111      	bne.n	800794e <__mdiff+0x3a>
 800792a:	4631      	mov	r1, r6
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff fd0d 	bl	800734c <_Balloc>
 8007932:	4602      	mov	r2, r0
 8007934:	b928      	cbnz	r0, 8007942 <__mdiff+0x2e>
 8007936:	f240 2132 	movw	r1, #562	; 0x232
 800793a:	4b3a      	ldr	r3, [pc, #232]	; (8007a24 <__mdiff+0x110>)
 800793c:	483a      	ldr	r0, [pc, #232]	; (8007a28 <__mdiff+0x114>)
 800793e:	f000 fc41 	bl	80081c4 <__assert_func>
 8007942:	2301      	movs	r3, #1
 8007944:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007948:	4610      	mov	r0, r2
 800794a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794e:	bfa4      	itt	ge
 8007950:	4623      	movge	r3, r4
 8007952:	462c      	movge	r4, r5
 8007954:	4638      	mov	r0, r7
 8007956:	6861      	ldr	r1, [r4, #4]
 8007958:	bfa6      	itte	ge
 800795a:	461d      	movge	r5, r3
 800795c:	2600      	movge	r6, #0
 800795e:	2601      	movlt	r6, #1
 8007960:	f7ff fcf4 	bl	800734c <_Balloc>
 8007964:	4602      	mov	r2, r0
 8007966:	b918      	cbnz	r0, 8007970 <__mdiff+0x5c>
 8007968:	f44f 7110 	mov.w	r1, #576	; 0x240
 800796c:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <__mdiff+0x110>)
 800796e:	e7e5      	b.n	800793c <__mdiff+0x28>
 8007970:	f102 0814 	add.w	r8, r2, #20
 8007974:	46c2      	mov	sl, r8
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	6927      	ldr	r7, [r4, #16]
 800797c:	60c6      	str	r6, [r0, #12]
 800797e:	692e      	ldr	r6, [r5, #16]
 8007980:	f104 0014 	add.w	r0, r4, #20
 8007984:	f105 0914 	add.w	r9, r5, #20
 8007988:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800798c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007990:	3410      	adds	r4, #16
 8007992:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007996:	f859 3b04 	ldr.w	r3, [r9], #4
 800799a:	fa1f f18b 	uxth.w	r1, fp
 800799e:	448c      	add	ip, r1
 80079a0:	b299      	uxth	r1, r3
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	ebac 0101 	sub.w	r1, ip, r1
 80079a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079b0:	b289      	uxth	r1, r1
 80079b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079b6:	454e      	cmp	r6, r9
 80079b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079bc:	f84a 3b04 	str.w	r3, [sl], #4
 80079c0:	d8e7      	bhi.n	8007992 <__mdiff+0x7e>
 80079c2:	1b73      	subs	r3, r6, r5
 80079c4:	3b15      	subs	r3, #21
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	3515      	adds	r5, #21
 80079cc:	3304      	adds	r3, #4
 80079ce:	42ae      	cmp	r6, r5
 80079d0:	bf38      	it	cc
 80079d2:	2304      	movcc	r3, #4
 80079d4:	4418      	add	r0, r3
 80079d6:	4443      	add	r3, r8
 80079d8:	461e      	mov	r6, r3
 80079da:	4605      	mov	r5, r0
 80079dc:	4575      	cmp	r5, lr
 80079de:	d30e      	bcc.n	80079fe <__mdiff+0xea>
 80079e0:	f10e 0103 	add.w	r1, lr, #3
 80079e4:	1a09      	subs	r1, r1, r0
 80079e6:	f021 0103 	bic.w	r1, r1, #3
 80079ea:	3803      	subs	r0, #3
 80079ec:	4586      	cmp	lr, r0
 80079ee:	bf38      	it	cc
 80079f0:	2100      	movcc	r1, #0
 80079f2:	4419      	add	r1, r3
 80079f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80079f8:	b18b      	cbz	r3, 8007a1e <__mdiff+0x10a>
 80079fa:	6117      	str	r7, [r2, #16]
 80079fc:	e7a4      	b.n	8007948 <__mdiff+0x34>
 80079fe:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a02:	fa1f f188 	uxth.w	r1, r8
 8007a06:	4461      	add	r1, ip
 8007a08:	140c      	asrs	r4, r1, #16
 8007a0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a0e:	b289      	uxth	r1, r1
 8007a10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a14:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a18:	f846 1b04 	str.w	r1, [r6], #4
 8007a1c:	e7de      	b.n	80079dc <__mdiff+0xc8>
 8007a1e:	3f01      	subs	r7, #1
 8007a20:	e7e8      	b.n	80079f4 <__mdiff+0xe0>
 8007a22:	bf00      	nop
 8007a24:	0801a8fb 	.word	0x0801a8fb
 8007a28:	0801a9a6 	.word	0x0801a9a6

08007a2c <__ulp>:
 8007a2c:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <__ulp+0x48>)
 8007a2e:	400b      	ands	r3, r1
 8007a30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd02      	ble.n	8007a3e <__ulp+0x12>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4770      	bx	lr
 8007a3e:	425b      	negs	r3, r3
 8007a40:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a50:	da04      	bge.n	8007a5c <__ulp+0x30>
 8007a52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a56:	fa43 f102 	asr.w	r1, r3, r2
 8007a5a:	4770      	bx	lr
 8007a5c:	f1a2 0314 	sub.w	r3, r2, #20
 8007a60:	2b1e      	cmp	r3, #30
 8007a62:	bfd6      	itet	le
 8007a64:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a68:	2301      	movgt	r3, #1
 8007a6a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007a6e:	4618      	mov	r0, r3
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	7ff00000 	.word	0x7ff00000

08007a78 <__b2d>:
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	6907      	ldr	r7, [r0, #16]
 8007a7e:	f100 0914 	add.w	r9, r0, #20
 8007a82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007a86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007a8a:	f1a7 0804 	sub.w	r8, r7, #4
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7ff fd4e 	bl	8007530 <__hi0bits>
 8007a94:	f1c0 0320 	rsb	r3, r0, #32
 8007a98:	280a      	cmp	r0, #10
 8007a9a:	600b      	str	r3, [r1, #0]
 8007a9c:	491f      	ldr	r1, [pc, #124]	; (8007b1c <__b2d+0xa4>)
 8007a9e:	dc17      	bgt.n	8007ad0 <__b2d+0x58>
 8007aa0:	45c1      	cmp	r9, r8
 8007aa2:	bf28      	it	cs
 8007aa4:	2200      	movcs	r2, #0
 8007aa6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007aaa:	fa26 f30c 	lsr.w	r3, r6, ip
 8007aae:	bf38      	it	cc
 8007ab0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ab4:	ea43 0501 	orr.w	r5, r3, r1
 8007ab8:	f100 0315 	add.w	r3, r0, #21
 8007abc:	fa06 f303 	lsl.w	r3, r6, r3
 8007ac0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007ac4:	ea43 0402 	orr.w	r4, r3, r2
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad0:	45c1      	cmp	r9, r8
 8007ad2:	bf2e      	itee	cs
 8007ad4:	2200      	movcs	r2, #0
 8007ad6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ada:	f1a7 0808 	subcc.w	r8, r7, #8
 8007ade:	f1b0 030b 	subs.w	r3, r0, #11
 8007ae2:	d016      	beq.n	8007b12 <__b2d+0x9a>
 8007ae4:	f1c3 0720 	rsb	r7, r3, #32
 8007ae8:	fa22 f107 	lsr.w	r1, r2, r7
 8007aec:	45c8      	cmp	r8, r9
 8007aee:	fa06 f603 	lsl.w	r6, r6, r3
 8007af2:	ea46 0601 	orr.w	r6, r6, r1
 8007af6:	bf94      	ite	ls
 8007af8:	2100      	movls	r1, #0
 8007afa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007afe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007b02:	fa02 f003 	lsl.w	r0, r2, r3
 8007b06:	40f9      	lsrs	r1, r7
 8007b08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b0c:	ea40 0401 	orr.w	r4, r0, r1
 8007b10:	e7da      	b.n	8007ac8 <__b2d+0x50>
 8007b12:	4614      	mov	r4, r2
 8007b14:	ea46 0501 	orr.w	r5, r6, r1
 8007b18:	e7d6      	b.n	8007ac8 <__b2d+0x50>
 8007b1a:	bf00      	nop
 8007b1c:	3ff00000 	.word	0x3ff00000

08007b20 <__d2b>:
 8007b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b24:	2101      	movs	r1, #1
 8007b26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b2a:	4690      	mov	r8, r2
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	f7ff fc0d 	bl	800734c <_Balloc>
 8007b32:	4604      	mov	r4, r0
 8007b34:	b930      	cbnz	r0, 8007b44 <__d2b+0x24>
 8007b36:	4602      	mov	r2, r0
 8007b38:	f240 310a 	movw	r1, #778	; 0x30a
 8007b3c:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <__d2b+0xb0>)
 8007b3e:	4825      	ldr	r0, [pc, #148]	; (8007bd4 <__d2b+0xb4>)
 8007b40:	f000 fb40 	bl	80081c4 <__assert_func>
 8007b44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b4c:	bb2d      	cbnz	r5, 8007b9a <__d2b+0x7a>
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	f1b8 0300 	subs.w	r3, r8, #0
 8007b54:	d026      	beq.n	8007ba4 <__d2b+0x84>
 8007b56:	4668      	mov	r0, sp
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	f7ff fd09 	bl	8007570 <__lo0bits>
 8007b5e:	9900      	ldr	r1, [sp, #0]
 8007b60:	b1f0      	cbz	r0, 8007ba0 <__d2b+0x80>
 8007b62:	9a01      	ldr	r2, [sp, #4]
 8007b64:	f1c0 0320 	rsb	r3, r0, #32
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	40c2      	lsrs	r2, r0
 8007b70:	6163      	str	r3, [r4, #20]
 8007b72:	9201      	str	r2, [sp, #4]
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2102      	movne	r1, #2
 8007b7c:	2101      	moveq	r1, #1
 8007b7e:	61a3      	str	r3, [r4, #24]
 8007b80:	6121      	str	r1, [r4, #16]
 8007b82:	b1c5      	cbz	r5, 8007bb6 <__d2b+0x96>
 8007b84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b88:	4405      	add	r5, r0
 8007b8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b8e:	603d      	str	r5, [r7, #0]
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	4620      	mov	r0, r4
 8007b94:	b002      	add	sp, #8
 8007b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b9e:	e7d6      	b.n	8007b4e <__d2b+0x2e>
 8007ba0:	6161      	str	r1, [r4, #20]
 8007ba2:	e7e7      	b.n	8007b74 <__d2b+0x54>
 8007ba4:	a801      	add	r0, sp, #4
 8007ba6:	f7ff fce3 	bl	8007570 <__lo0bits>
 8007baa:	2101      	movs	r1, #1
 8007bac:	9b01      	ldr	r3, [sp, #4]
 8007bae:	6121      	str	r1, [r4, #16]
 8007bb0:	6163      	str	r3, [r4, #20]
 8007bb2:	3020      	adds	r0, #32
 8007bb4:	e7e5      	b.n	8007b82 <__d2b+0x62>
 8007bb6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007bba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bbe:	6038      	str	r0, [r7, #0]
 8007bc0:	6918      	ldr	r0, [r3, #16]
 8007bc2:	f7ff fcb5 	bl	8007530 <__hi0bits>
 8007bc6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007bca:	6031      	str	r1, [r6, #0]
 8007bcc:	e7e1      	b.n	8007b92 <__d2b+0x72>
 8007bce:	bf00      	nop
 8007bd0:	0801a8fb 	.word	0x0801a8fb
 8007bd4:	0801a9a6 	.word	0x0801a9a6

08007bd8 <__ratio>:
 8007bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	4688      	mov	r8, r1
 8007bde:	4669      	mov	r1, sp
 8007be0:	4681      	mov	r9, r0
 8007be2:	f7ff ff49 	bl	8007a78 <__b2d>
 8007be6:	460f      	mov	r7, r1
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	4640      	mov	r0, r8
 8007bee:	a901      	add	r1, sp, #4
 8007bf0:	f7ff ff42 	bl	8007a78 <__b2d>
 8007bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007bfc:	468b      	mov	fp, r1
 8007bfe:	eba3 0c02 	sub.w	ip, r3, r2
 8007c02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfd5      	itete	le
 8007c10:	460a      	movle	r2, r1
 8007c12:	462a      	movgt	r2, r5
 8007c14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c1c:	bfd8      	it	le
 8007c1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c22:	465b      	mov	r3, fp
 8007c24:	4602      	mov	r2, r0
 8007c26:	4639      	mov	r1, r7
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f7f8 fd7f 	bl	800072c <__aeabi_ddiv>
 8007c2e:	b003      	add	sp, #12
 8007c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c34 <__copybits>:
 8007c34:	3901      	subs	r1, #1
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	1149      	asrs	r1, r1, #5
 8007c3a:	6914      	ldr	r4, [r2, #16]
 8007c3c:	3101      	adds	r1, #1
 8007c3e:	f102 0314 	add.w	r3, r2, #20
 8007c42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c4a:	1f05      	subs	r5, r0, #4
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d30c      	bcc.n	8007c6a <__copybits+0x36>
 8007c50:	1aa3      	subs	r3, r4, r2
 8007c52:	3b11      	subs	r3, #17
 8007c54:	f023 0303 	bic.w	r3, r3, #3
 8007c58:	3211      	adds	r2, #17
 8007c5a:	42a2      	cmp	r2, r4
 8007c5c:	bf88      	it	hi
 8007c5e:	2300      	movhi	r3, #0
 8007c60:	4418      	add	r0, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	4288      	cmp	r0, r1
 8007c66:	d305      	bcc.n	8007c74 <__copybits+0x40>
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c72:	e7eb      	b.n	8007c4c <__copybits+0x18>
 8007c74:	f840 3b04 	str.w	r3, [r0], #4
 8007c78:	e7f4      	b.n	8007c64 <__copybits+0x30>

08007c7a <__any_on>:
 8007c7a:	f100 0214 	add.w	r2, r0, #20
 8007c7e:	6900      	ldr	r0, [r0, #16]
 8007c80:	114b      	asrs	r3, r1, #5
 8007c82:	4298      	cmp	r0, r3
 8007c84:	b510      	push	{r4, lr}
 8007c86:	db11      	blt.n	8007cac <__any_on+0x32>
 8007c88:	dd0a      	ble.n	8007ca0 <__any_on+0x26>
 8007c8a:	f011 011f 	ands.w	r1, r1, #31
 8007c8e:	d007      	beq.n	8007ca0 <__any_on+0x26>
 8007c90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c94:	fa24 f001 	lsr.w	r0, r4, r1
 8007c98:	fa00 f101 	lsl.w	r1, r0, r1
 8007c9c:	428c      	cmp	r4, r1
 8007c9e:	d10b      	bne.n	8007cb8 <__any_on+0x3e>
 8007ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d803      	bhi.n	8007cb0 <__any_on+0x36>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	bd10      	pop	{r4, pc}
 8007cac:	4603      	mov	r3, r0
 8007cae:	e7f7      	b.n	8007ca0 <__any_on+0x26>
 8007cb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d0f5      	beq.n	8007ca4 <__any_on+0x2a>
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7f6      	b.n	8007caa <__any_on+0x30>

08007cbc <_calloc_r>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	fba1 5402 	umull	r5, r4, r1, r2
 8007cc2:	b934      	cbnz	r4, 8007cd2 <_calloc_r+0x16>
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f000 f875 	bl	8007db4 <_malloc_r>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	b928      	cbnz	r0, 8007cda <_calloc_r+0x1e>
 8007cce:	4630      	mov	r0, r6
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	220c      	movs	r2, #12
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	6002      	str	r2, [r0, #0]
 8007cd8:	e7f9      	b.n	8007cce <_calloc_r+0x12>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f7fc fbf3 	bl	80044c8 <memset>
 8007ce2:	e7f4      	b.n	8007cce <_calloc_r+0x12>

08007ce4 <_free_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	d040      	beq.n	8007d6e <_free_r+0x8a>
 8007cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf0:	1f0c      	subs	r4, r1, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfb8      	it	lt
 8007cf6:	18e4      	addlt	r4, r4, r3
 8007cf8:	f000 fa94 	bl	8008224 <__malloc_lock>
 8007cfc:	4a1c      	ldr	r2, [pc, #112]	; (8007d70 <_free_r+0x8c>)
 8007cfe:	6813      	ldr	r3, [r2, #0]
 8007d00:	b933      	cbnz	r3, 8007d10 <_free_r+0x2c>
 8007d02:	6063      	str	r3, [r4, #4]
 8007d04:	6014      	str	r4, [r2, #0]
 8007d06:	4628      	mov	r0, r5
 8007d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d0c:	f000 ba90 	b.w	8008230 <__malloc_unlock>
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d908      	bls.n	8007d26 <_free_r+0x42>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	1821      	adds	r1, r4, r0
 8007d18:	428b      	cmp	r3, r1
 8007d1a:	bf01      	itttt	eq
 8007d1c:	6819      	ldreq	r1, [r3, #0]
 8007d1e:	685b      	ldreq	r3, [r3, #4]
 8007d20:	1809      	addeq	r1, r1, r0
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	e7ed      	b.n	8007d02 <_free_r+0x1e>
 8007d26:	461a      	mov	r2, r3
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	b10b      	cbz	r3, 8007d30 <_free_r+0x4c>
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d9fa      	bls.n	8007d26 <_free_r+0x42>
 8007d30:	6811      	ldr	r1, [r2, #0]
 8007d32:	1850      	adds	r0, r2, r1
 8007d34:	42a0      	cmp	r0, r4
 8007d36:	d10b      	bne.n	8007d50 <_free_r+0x6c>
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	4401      	add	r1, r0
 8007d3c:	1850      	adds	r0, r2, r1
 8007d3e:	4283      	cmp	r3, r0
 8007d40:	6011      	str	r1, [r2, #0]
 8007d42:	d1e0      	bne.n	8007d06 <_free_r+0x22>
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4401      	add	r1, r0
 8007d4a:	6011      	str	r1, [r2, #0]
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	e7da      	b.n	8007d06 <_free_r+0x22>
 8007d50:	d902      	bls.n	8007d58 <_free_r+0x74>
 8007d52:	230c      	movs	r3, #12
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	e7d6      	b.n	8007d06 <_free_r+0x22>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	1821      	adds	r1, r4, r0
 8007d5c:	428b      	cmp	r3, r1
 8007d5e:	bf01      	itttt	eq
 8007d60:	6819      	ldreq	r1, [r3, #0]
 8007d62:	685b      	ldreq	r3, [r3, #4]
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	6054      	str	r4, [r2, #4]
 8007d6c:	e7cb      	b.n	8007d06 <_free_r+0x22>
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	200016e0 	.word	0x200016e0

08007d74 <sbrk_aligned>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4e0e      	ldr	r6, [pc, #56]	; (8007db0 <sbrk_aligned+0x3c>)
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6831      	ldr	r1, [r6, #0]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	b911      	cbnz	r1, 8007d86 <sbrk_aligned+0x12>
 8007d80:	f000 f9ee 	bl	8008160 <_sbrk_r>
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 f9e9 	bl	8008160 <_sbrk_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d00a      	beq.n	8007da8 <sbrk_aligned+0x34>
 8007d92:	1cc4      	adds	r4, r0, #3
 8007d94:	f024 0403 	bic.w	r4, r4, #3
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d007      	beq.n	8007dac <sbrk_aligned+0x38>
 8007d9c:	1a21      	subs	r1, r4, r0
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 f9de 	bl	8008160 <_sbrk_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d101      	bne.n	8007dac <sbrk_aligned+0x38>
 8007da8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dac:	4620      	mov	r0, r4
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	200016e4 	.word	0x200016e4

08007db4 <_malloc_r>:
 8007db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db8:	1ccd      	adds	r5, r1, #3
 8007dba:	f025 0503 	bic.w	r5, r5, #3
 8007dbe:	3508      	adds	r5, #8
 8007dc0:	2d0c      	cmp	r5, #12
 8007dc2:	bf38      	it	cc
 8007dc4:	250c      	movcc	r5, #12
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	4607      	mov	r7, r0
 8007dca:	db01      	blt.n	8007dd0 <_malloc_r+0x1c>
 8007dcc:	42a9      	cmp	r1, r5
 8007dce:	d905      	bls.n	8007ddc <_malloc_r+0x28>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	4e2e      	ldr	r6, [pc, #184]	; (8007e98 <_malloc_r+0xe4>)
 8007dde:	f000 fa21 	bl	8008224 <__malloc_lock>
 8007de2:	6833      	ldr	r3, [r6, #0]
 8007de4:	461c      	mov	r4, r3
 8007de6:	bb34      	cbnz	r4, 8007e36 <_malloc_r+0x82>
 8007de8:	4629      	mov	r1, r5
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7ff ffc2 	bl	8007d74 <sbrk_aligned>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	4604      	mov	r4, r0
 8007df4:	d14d      	bne.n	8007e92 <_malloc_r+0xde>
 8007df6:	6834      	ldr	r4, [r6, #0]
 8007df8:	4626      	mov	r6, r4
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d140      	bne.n	8007e80 <_malloc_r+0xcc>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	4631      	mov	r1, r6
 8007e02:	4638      	mov	r0, r7
 8007e04:	eb04 0803 	add.w	r8, r4, r3
 8007e08:	f000 f9aa 	bl	8008160 <_sbrk_r>
 8007e0c:	4580      	cmp	r8, r0
 8007e0e:	d13a      	bne.n	8007e86 <_malloc_r+0xd2>
 8007e10:	6821      	ldr	r1, [r4, #0]
 8007e12:	3503      	adds	r5, #3
 8007e14:	1a6d      	subs	r5, r5, r1
 8007e16:	f025 0503 	bic.w	r5, r5, #3
 8007e1a:	3508      	adds	r5, #8
 8007e1c:	2d0c      	cmp	r5, #12
 8007e1e:	bf38      	it	cc
 8007e20:	250c      	movcc	r5, #12
 8007e22:	4638      	mov	r0, r7
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7ff ffa5 	bl	8007d74 <sbrk_aligned>
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d02b      	beq.n	8007e86 <_malloc_r+0xd2>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	442b      	add	r3, r5
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	e00e      	b.n	8007e54 <_malloc_r+0xa0>
 8007e36:	6822      	ldr	r2, [r4, #0]
 8007e38:	1b52      	subs	r2, r2, r5
 8007e3a:	d41e      	bmi.n	8007e7a <_malloc_r+0xc6>
 8007e3c:	2a0b      	cmp	r2, #11
 8007e3e:	d916      	bls.n	8007e6e <_malloc_r+0xba>
 8007e40:	1961      	adds	r1, r4, r5
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	6025      	str	r5, [r4, #0]
 8007e46:	bf18      	it	ne
 8007e48:	6059      	strne	r1, [r3, #4]
 8007e4a:	6863      	ldr	r3, [r4, #4]
 8007e4c:	bf08      	it	eq
 8007e4e:	6031      	streq	r1, [r6, #0]
 8007e50:	5162      	str	r2, [r4, r5]
 8007e52:	604b      	str	r3, [r1, #4]
 8007e54:	4638      	mov	r0, r7
 8007e56:	f104 060b 	add.w	r6, r4, #11
 8007e5a:	f000 f9e9 	bl	8008230 <__malloc_unlock>
 8007e5e:	f026 0607 	bic.w	r6, r6, #7
 8007e62:	1d23      	adds	r3, r4, #4
 8007e64:	1af2      	subs	r2, r6, r3
 8007e66:	d0b6      	beq.n	8007dd6 <_malloc_r+0x22>
 8007e68:	1b9b      	subs	r3, r3, r6
 8007e6a:	50a3      	str	r3, [r4, r2]
 8007e6c:	e7b3      	b.n	8007dd6 <_malloc_r+0x22>
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	bf0c      	ite	eq
 8007e74:	6032      	streq	r2, [r6, #0]
 8007e76:	605a      	strne	r2, [r3, #4]
 8007e78:	e7ec      	b.n	8007e54 <_malloc_r+0xa0>
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	6864      	ldr	r4, [r4, #4]
 8007e7e:	e7b2      	b.n	8007de6 <_malloc_r+0x32>
 8007e80:	4634      	mov	r4, r6
 8007e82:	6876      	ldr	r6, [r6, #4]
 8007e84:	e7b9      	b.n	8007dfa <_malloc_r+0x46>
 8007e86:	230c      	movs	r3, #12
 8007e88:	4638      	mov	r0, r7
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	f000 f9d0 	bl	8008230 <__malloc_unlock>
 8007e90:	e7a1      	b.n	8007dd6 <_malloc_r+0x22>
 8007e92:	6025      	str	r5, [r4, #0]
 8007e94:	e7de      	b.n	8007e54 <_malloc_r+0xa0>
 8007e96:	bf00      	nop
 8007e98:	200016e0 	.word	0x200016e0

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	429e      	cmp	r6, r3
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	461f      	mov	r7, r3
 8007eac:	d838      	bhi.n	8007f20 <__ssputs_r+0x84>
 8007eae:	898a      	ldrh	r2, [r1, #12]
 8007eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb4:	d032      	beq.n	8007f1c <__ssputs_r+0x80>
 8007eb6:	6825      	ldr	r5, [r4, #0]
 8007eb8:	6909      	ldr	r1, [r1, #16]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	eba5 0901 	sub.w	r9, r5, r1
 8007ec0:	6965      	ldr	r5, [r4, #20]
 8007ec2:	444b      	add	r3, r9
 8007ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	bf38      	it	cc
 8007ed2:	461d      	movcc	r5, r3
 8007ed4:	0553      	lsls	r3, r2, #21
 8007ed6:	d531      	bpl.n	8007f3c <__ssputs_r+0xa0>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7ff ff6b 	bl	8007db4 <_malloc_r>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b950      	cbnz	r0, 8007ef8 <__ssputs_r+0x5c>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	f8ca 3000 	str.w	r3, [sl]
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	464a      	mov	r2, r9
 8007efa:	6921      	ldr	r1, [r4, #16]
 8007efc:	f7ff fa18 	bl	8007330 <memcpy>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	6126      	str	r6, [r4, #16]
 8007f0e:	444e      	add	r6, r9
 8007f10:	6026      	str	r6, [r4, #0]
 8007f12:	463e      	mov	r6, r7
 8007f14:	6165      	str	r5, [r4, #20]
 8007f16:	eba5 0509 	sub.w	r5, r5, r9
 8007f1a:	60a5      	str	r5, [r4, #8]
 8007f1c:	42be      	cmp	r6, r7
 8007f1e:	d900      	bls.n	8007f22 <__ssputs_r+0x86>
 8007f20:	463e      	mov	r6, r7
 8007f22:	4632      	mov	r2, r6
 8007f24:	4641      	mov	r1, r8
 8007f26:	6820      	ldr	r0, [r4, #0]
 8007f28:	f7fc fab4 	bl	8004494 <memmove>
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	2000      	movs	r0, #0
 8007f30:	1b9b      	subs	r3, r3, r6
 8007f32:	60a3      	str	r3, [r4, #8]
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	4433      	add	r3, r6
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	e7db      	b.n	8007ef4 <__ssputs_r+0x58>
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	f000 f97d 	bl	800823c <_realloc_r>
 8007f42:	4606      	mov	r6, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1e1      	bne.n	8007f0c <__ssputs_r+0x70>
 8007f48:	4650      	mov	r0, sl
 8007f4a:	6921      	ldr	r1, [r4, #16]
 8007f4c:	f7ff feca 	bl	8007ce4 <_free_r>
 8007f50:	e7c7      	b.n	8007ee2 <__ssputs_r+0x46>
	...

08007f54 <_svfiprintf_r>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	4698      	mov	r8, r3
 8007f5a:	898b      	ldrh	r3, [r1, #12]
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	061b      	lsls	r3, r3, #24
 8007f60:	460d      	mov	r5, r1
 8007f62:	4614      	mov	r4, r2
 8007f64:	b09d      	sub	sp, #116	; 0x74
 8007f66:	d50e      	bpl.n	8007f86 <_svfiprintf_r+0x32>
 8007f68:	690b      	ldr	r3, [r1, #16]
 8007f6a:	b963      	cbnz	r3, 8007f86 <_svfiprintf_r+0x32>
 8007f6c:	2140      	movs	r1, #64	; 0x40
 8007f6e:	f7ff ff21 	bl	8007db4 <_malloc_r>
 8007f72:	6028      	str	r0, [r5, #0]
 8007f74:	6128      	str	r0, [r5, #16]
 8007f76:	b920      	cbnz	r0, 8007f82 <_svfiprintf_r+0x2e>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	e0d1      	b.n	8008126 <_svfiprintf_r+0x1d2>
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	616b      	str	r3, [r5, #20]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	2320      	movs	r3, #32
 8007f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f90:	2330      	movs	r3, #48	; 0x30
 8007f92:	f04f 0901 	mov.w	r9, #1
 8007f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008140 <_svfiprintf_r+0x1ec>
 8007f9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	469a      	mov	sl, r3
 8007fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007faa:	b10a      	cbz	r2, 8007fb0 <_svfiprintf_r+0x5c>
 8007fac:	2a25      	cmp	r2, #37	; 0x25
 8007fae:	d1f9      	bne.n	8007fa4 <_svfiprintf_r+0x50>
 8007fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb4:	d00b      	beq.n	8007fce <_svfiprintf_r+0x7a>
 8007fb6:	465b      	mov	r3, fp
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff ff6d 	bl	8007e9c <__ssputs_r>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f000 80aa 	beq.w	800811c <_svfiprintf_r+0x1c8>
 8007fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fca:	445a      	add	r2, fp
 8007fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80a2 	beq.w	800811c <_svfiprintf_r+0x1c8>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295
 8007fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe2:	f10a 0a01 	add.w	sl, sl, #1
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fee:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff0:	4654      	mov	r4, sl
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	4851      	ldr	r0, [pc, #324]	; (8008140 <_svfiprintf_r+0x1ec>)
 8007ffa:	f7ff f98b 	bl	8007314 <memchr>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	b9d8      	cbnz	r0, 800803a <_svfiprintf_r+0xe6>
 8008002:	06d0      	lsls	r0, r2, #27
 8008004:	bf44      	itt	mi
 8008006:	2320      	movmi	r3, #32
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800c:	0711      	lsls	r1, r2, #28
 800800e:	bf44      	itt	mi
 8008010:	232b      	movmi	r3, #43	; 0x2b
 8008012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008016:	f89a 3000 	ldrb.w	r3, [sl]
 800801a:	2b2a      	cmp	r3, #42	; 0x2a
 800801c:	d015      	beq.n	800804a <_svfiprintf_r+0xf6>
 800801e:	4654      	mov	r4, sl
 8008020:	2000      	movs	r0, #0
 8008022:	f04f 0c0a 	mov.w	ip, #10
 8008026:	9a07      	ldr	r2, [sp, #28]
 8008028:	4621      	mov	r1, r4
 800802a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802e:	3b30      	subs	r3, #48	; 0x30
 8008030:	2b09      	cmp	r3, #9
 8008032:	d94e      	bls.n	80080d2 <_svfiprintf_r+0x17e>
 8008034:	b1b0      	cbz	r0, 8008064 <_svfiprintf_r+0x110>
 8008036:	9207      	str	r2, [sp, #28]
 8008038:	e014      	b.n	8008064 <_svfiprintf_r+0x110>
 800803a:	eba0 0308 	sub.w	r3, r0, r8
 800803e:	fa09 f303 	lsl.w	r3, r9, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	46a2      	mov	sl, r4
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	e7d2      	b.n	8007ff0 <_svfiprintf_r+0x9c>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	1d19      	adds	r1, r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	9103      	str	r1, [sp, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	bfbb      	ittet	lt
 8008056:	425b      	neglt	r3, r3
 8008058:	f042 0202 	orrlt.w	r2, r2, #2
 800805c:	9307      	strge	r3, [sp, #28]
 800805e:	9307      	strlt	r3, [sp, #28]
 8008060:	bfb8      	it	lt
 8008062:	9204      	strlt	r2, [sp, #16]
 8008064:	7823      	ldrb	r3, [r4, #0]
 8008066:	2b2e      	cmp	r3, #46	; 0x2e
 8008068:	d10c      	bne.n	8008084 <_svfiprintf_r+0x130>
 800806a:	7863      	ldrb	r3, [r4, #1]
 800806c:	2b2a      	cmp	r3, #42	; 0x2a
 800806e:	d135      	bne.n	80080dc <_svfiprintf_r+0x188>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	3402      	adds	r4, #2
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	9203      	str	r2, [sp, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfb8      	it	lt
 800807e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008144 <_svfiprintf_r+0x1f0>
 8008088:	2203      	movs	r2, #3
 800808a:	4650      	mov	r0, sl
 800808c:	7821      	ldrb	r1, [r4, #0]
 800808e:	f7ff f941 	bl	8007314 <memchr>
 8008092:	b140      	cbz	r0, 80080a6 <_svfiprintf_r+0x152>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	eba0 000a 	sub.w	r0, r0, sl
 800809a:	fa03 f000 	lsl.w	r0, r3, r0
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	3401      	adds	r4, #1
 80080a2:	4303      	orrs	r3, r0
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080aa:	2206      	movs	r2, #6
 80080ac:	4826      	ldr	r0, [pc, #152]	; (8008148 <_svfiprintf_r+0x1f4>)
 80080ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080b2:	f7ff f92f 	bl	8007314 <memchr>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d038      	beq.n	800812c <_svfiprintf_r+0x1d8>
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <_svfiprintf_r+0x1f8>)
 80080bc:	bb1b      	cbnz	r3, 8008106 <_svfiprintf_r+0x1b2>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	3307      	adds	r3, #7
 80080c2:	f023 0307 	bic.w	r3, r3, #7
 80080c6:	3308      	adds	r3, #8
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080cc:	4433      	add	r3, r6
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
 80080d0:	e767      	b.n	8007fa2 <_svfiprintf_r+0x4e>
 80080d2:	460c      	mov	r4, r1
 80080d4:	2001      	movs	r0, #1
 80080d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080da:	e7a5      	b.n	8008028 <_svfiprintf_r+0xd4>
 80080dc:	2300      	movs	r3, #0
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4619      	mov	r1, r3
 80080e4:	3401      	adds	r4, #1
 80080e6:	9305      	str	r3, [sp, #20]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ee:	3a30      	subs	r2, #48	; 0x30
 80080f0:	2a09      	cmp	r2, #9
 80080f2:	d903      	bls.n	80080fc <_svfiprintf_r+0x1a8>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c5      	beq.n	8008084 <_svfiprintf_r+0x130>
 80080f8:	9105      	str	r1, [sp, #20]
 80080fa:	e7c3      	b.n	8008084 <_svfiprintf_r+0x130>
 80080fc:	4604      	mov	r4, r0
 80080fe:	2301      	movs	r3, #1
 8008100:	fb0c 2101 	mla	r1, ip, r1, r2
 8008104:	e7f0      	b.n	80080e8 <_svfiprintf_r+0x194>
 8008106:	ab03      	add	r3, sp, #12
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	462a      	mov	r2, r5
 800810c:	4638      	mov	r0, r7
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <_svfiprintf_r+0x1fc>)
 8008110:	a904      	add	r1, sp, #16
 8008112:	f7fc fa7f 	bl	8004614 <_printf_float>
 8008116:	1c42      	adds	r2, r0, #1
 8008118:	4606      	mov	r6, r0
 800811a:	d1d6      	bne.n	80080ca <_svfiprintf_r+0x176>
 800811c:	89ab      	ldrh	r3, [r5, #12]
 800811e:	065b      	lsls	r3, r3, #25
 8008120:	f53f af2c 	bmi.w	8007f7c <_svfiprintf_r+0x28>
 8008124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008126:	b01d      	add	sp, #116	; 0x74
 8008128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812c:	ab03      	add	r3, sp, #12
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	462a      	mov	r2, r5
 8008132:	4638      	mov	r0, r7
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <_svfiprintf_r+0x1fc>)
 8008136:	a904      	add	r1, sp, #16
 8008138:	f7fc fd08 	bl	8004b4c <_printf_i>
 800813c:	e7eb      	b.n	8008116 <_svfiprintf_r+0x1c2>
 800813e:	bf00      	nop
 8008140:	0801ab24 	.word	0x0801ab24
 8008144:	0801ab2a 	.word	0x0801ab2a
 8008148:	0801ab2e 	.word	0x0801ab2e
 800814c:	08004615 	.word	0x08004615
 8008150:	08007e9d 	.word	0x08007e9d

08008154 <nan>:
 8008154:	2000      	movs	r0, #0
 8008156:	4901      	ldr	r1, [pc, #4]	; (800815c <nan+0x8>)
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	7ff80000 	.word	0x7ff80000

08008160 <_sbrk_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	2300      	movs	r3, #0
 8008164:	4d05      	ldr	r5, [pc, #20]	; (800817c <_sbrk_r+0x1c>)
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	f7fa fd4c 	bl	8002c08 <_sbrk>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_sbrk_r+0x1a>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_sbrk_r+0x1a>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200016e8 	.word	0x200016e8

08008180 <strncmp>:
 8008180:	4603      	mov	r3, r0
 8008182:	b510      	push	{r4, lr}
 8008184:	b172      	cbz	r2, 80081a4 <strncmp+0x24>
 8008186:	3901      	subs	r1, #1
 8008188:	1884      	adds	r4, r0, r2
 800818a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800818e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008192:	4290      	cmp	r0, r2
 8008194:	d101      	bne.n	800819a <strncmp+0x1a>
 8008196:	42a3      	cmp	r3, r4
 8008198:	d101      	bne.n	800819e <strncmp+0x1e>
 800819a:	1a80      	subs	r0, r0, r2
 800819c:	bd10      	pop	{r4, pc}
 800819e:	2800      	cmp	r0, #0
 80081a0:	d1f3      	bne.n	800818a <strncmp+0xa>
 80081a2:	e7fa      	b.n	800819a <strncmp+0x1a>
 80081a4:	4610      	mov	r0, r2
 80081a6:	e7f9      	b.n	800819c <strncmp+0x1c>

080081a8 <__ascii_wctomb>:
 80081a8:	4603      	mov	r3, r0
 80081aa:	4608      	mov	r0, r1
 80081ac:	b141      	cbz	r1, 80081c0 <__ascii_wctomb+0x18>
 80081ae:	2aff      	cmp	r2, #255	; 0xff
 80081b0:	d904      	bls.n	80081bc <__ascii_wctomb+0x14>
 80081b2:	228a      	movs	r2, #138	; 0x8a
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	4770      	bx	lr
 80081bc:	2001      	movs	r0, #1
 80081be:	700a      	strb	r2, [r1, #0]
 80081c0:	4770      	bx	lr
	...

080081c4 <__assert_func>:
 80081c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081c6:	4614      	mov	r4, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <__assert_func+0x2c>)
 80081cc:	4605      	mov	r5, r0
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68d8      	ldr	r0, [r3, #12]
 80081d2:	b14c      	cbz	r4, 80081e8 <__assert_func+0x24>
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <__assert_func+0x30>)
 80081d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081da:	9100      	str	r1, [sp, #0]
 80081dc:	462b      	mov	r3, r5
 80081de:	4906      	ldr	r1, [pc, #24]	; (80081f8 <__assert_func+0x34>)
 80081e0:	f000 f80e 	bl	8008200 <fiprintf>
 80081e4:	f000 fa70 	bl	80086c8 <abort>
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <__assert_func+0x38>)
 80081ea:	461c      	mov	r4, r3
 80081ec:	e7f3      	b.n	80081d6 <__assert_func+0x12>
 80081ee:	bf00      	nop
 80081f0:	20000014 	.word	0x20000014
 80081f4:	0801ab35 	.word	0x0801ab35
 80081f8:	0801ab42 	.word	0x0801ab42
 80081fc:	08009d5d 	.word	0x08009d5d

08008200 <fiprintf>:
 8008200:	b40e      	push	{r1, r2, r3}
 8008202:	b503      	push	{r0, r1, lr}
 8008204:	4601      	mov	r1, r0
 8008206:	ab03      	add	r3, sp, #12
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <fiprintf+0x20>)
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f000 f869 	bl	80082e8 <_vfiprintf_r>
 8008216:	b002      	add	sp, #8
 8008218:	f85d eb04 	ldr.w	lr, [sp], #4
 800821c:	b003      	add	sp, #12
 800821e:	4770      	bx	lr
 8008220:	20000014 	.word	0x20000014

08008224 <__malloc_lock>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__malloc_lock+0x8>)
 8008226:	f000 bc0b 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	200016ec 	.word	0x200016ec

08008230 <__malloc_unlock>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__malloc_unlock+0x8>)
 8008232:	f000 bc06 	b.w	8008a42 <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	200016ec 	.word	0x200016ec

0800823c <_realloc_r>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	4680      	mov	r8, r0
 8008242:	4614      	mov	r4, r2
 8008244:	460e      	mov	r6, r1
 8008246:	b921      	cbnz	r1, 8008252 <_realloc_r+0x16>
 8008248:	4611      	mov	r1, r2
 800824a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	f7ff bdb1 	b.w	8007db4 <_malloc_r>
 8008252:	b92a      	cbnz	r2, 8008260 <_realloc_r+0x24>
 8008254:	f7ff fd46 	bl	8007ce4 <_free_r>
 8008258:	4625      	mov	r5, r4
 800825a:	4628      	mov	r0, r5
 800825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008260:	f000 fc56 	bl	8008b10 <_malloc_usable_size_r>
 8008264:	4284      	cmp	r4, r0
 8008266:	4607      	mov	r7, r0
 8008268:	d802      	bhi.n	8008270 <_realloc_r+0x34>
 800826a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800826e:	d812      	bhi.n	8008296 <_realloc_r+0x5a>
 8008270:	4621      	mov	r1, r4
 8008272:	4640      	mov	r0, r8
 8008274:	f7ff fd9e 	bl	8007db4 <_malloc_r>
 8008278:	4605      	mov	r5, r0
 800827a:	2800      	cmp	r0, #0
 800827c:	d0ed      	beq.n	800825a <_realloc_r+0x1e>
 800827e:	42bc      	cmp	r4, r7
 8008280:	4622      	mov	r2, r4
 8008282:	4631      	mov	r1, r6
 8008284:	bf28      	it	cs
 8008286:	463a      	movcs	r2, r7
 8008288:	f7ff f852 	bl	8007330 <memcpy>
 800828c:	4631      	mov	r1, r6
 800828e:	4640      	mov	r0, r8
 8008290:	f7ff fd28 	bl	8007ce4 <_free_r>
 8008294:	e7e1      	b.n	800825a <_realloc_r+0x1e>
 8008296:	4635      	mov	r5, r6
 8008298:	e7df      	b.n	800825a <_realloc_r+0x1e>

0800829a <__sfputc_r>:
 800829a:	6893      	ldr	r3, [r2, #8]
 800829c:	b410      	push	{r4}
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	6093      	str	r3, [r2, #8]
 80082a4:	da07      	bge.n	80082b6 <__sfputc_r+0x1c>
 80082a6:	6994      	ldr	r4, [r2, #24]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	db01      	blt.n	80082b0 <__sfputc_r+0x16>
 80082ac:	290a      	cmp	r1, #10
 80082ae:	d102      	bne.n	80082b6 <__sfputc_r+0x1c>
 80082b0:	bc10      	pop	{r4}
 80082b2:	f000 b949 	b.w	8008548 <__swbuf_r>
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	1c58      	adds	r0, r3, #1
 80082ba:	6010      	str	r0, [r2, #0]
 80082bc:	7019      	strb	r1, [r3, #0]
 80082be:	4608      	mov	r0, r1
 80082c0:	bc10      	pop	{r4}
 80082c2:	4770      	bx	lr

080082c4 <__sfputs_r>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	4614      	mov	r4, r2
 80082cc:	18d5      	adds	r5, r2, r3
 80082ce:	42ac      	cmp	r4, r5
 80082d0:	d101      	bne.n	80082d6 <__sfputs_r+0x12>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e007      	b.n	80082e6 <__sfputs_r+0x22>
 80082d6:	463a      	mov	r2, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082de:	f7ff ffdc 	bl	800829a <__sfputc_r>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d1f3      	bne.n	80082ce <__sfputs_r+0xa>
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082e8 <_vfiprintf_r>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	460d      	mov	r5, r1
 80082ee:	4614      	mov	r4, r2
 80082f0:	4698      	mov	r8, r3
 80082f2:	4606      	mov	r6, r0
 80082f4:	b09d      	sub	sp, #116	; 0x74
 80082f6:	b118      	cbz	r0, 8008300 <_vfiprintf_r+0x18>
 80082f8:	6983      	ldr	r3, [r0, #24]
 80082fa:	b90b      	cbnz	r3, 8008300 <_vfiprintf_r+0x18>
 80082fc:	f000 fb02 	bl	8008904 <__sinit>
 8008300:	4b89      	ldr	r3, [pc, #548]	; (8008528 <_vfiprintf_r+0x240>)
 8008302:	429d      	cmp	r5, r3
 8008304:	d11b      	bne.n	800833e <_vfiprintf_r+0x56>
 8008306:	6875      	ldr	r5, [r6, #4]
 8008308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800830a:	07d9      	lsls	r1, r3, #31
 800830c:	d405      	bmi.n	800831a <_vfiprintf_r+0x32>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	059a      	lsls	r2, r3, #22
 8008312:	d402      	bmi.n	800831a <_vfiprintf_r+0x32>
 8008314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008316:	f000 fb93 	bl	8008a40 <__retarget_lock_acquire_recursive>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	071b      	lsls	r3, r3, #28
 800831e:	d501      	bpl.n	8008324 <_vfiprintf_r+0x3c>
 8008320:	692b      	ldr	r3, [r5, #16]
 8008322:	b9eb      	cbnz	r3, 8008360 <_vfiprintf_r+0x78>
 8008324:	4629      	mov	r1, r5
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f960 	bl	80085ec <__swsetup_r>
 800832c:	b1c0      	cbz	r0, 8008360 <_vfiprintf_r+0x78>
 800832e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008330:	07dc      	lsls	r4, r3, #31
 8008332:	d50e      	bpl.n	8008352 <_vfiprintf_r+0x6a>
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	b01d      	add	sp, #116	; 0x74
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	4b7b      	ldr	r3, [pc, #492]	; (800852c <_vfiprintf_r+0x244>)
 8008340:	429d      	cmp	r5, r3
 8008342:	d101      	bne.n	8008348 <_vfiprintf_r+0x60>
 8008344:	68b5      	ldr	r5, [r6, #8]
 8008346:	e7df      	b.n	8008308 <_vfiprintf_r+0x20>
 8008348:	4b79      	ldr	r3, [pc, #484]	; (8008530 <_vfiprintf_r+0x248>)
 800834a:	429d      	cmp	r5, r3
 800834c:	bf08      	it	eq
 800834e:	68f5      	ldreq	r5, [r6, #12]
 8008350:	e7da      	b.n	8008308 <_vfiprintf_r+0x20>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	0598      	lsls	r0, r3, #22
 8008356:	d4ed      	bmi.n	8008334 <_vfiprintf_r+0x4c>
 8008358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835a:	f000 fb72 	bl	8008a42 <__retarget_lock_release_recursive>
 800835e:	e7e9      	b.n	8008334 <_vfiprintf_r+0x4c>
 8008360:	2300      	movs	r3, #0
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	2320      	movs	r3, #32
 8008366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800836a:	2330      	movs	r3, #48	; 0x30
 800836c:	f04f 0901 	mov.w	r9, #1
 8008370:	f8cd 800c 	str.w	r8, [sp, #12]
 8008374:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008534 <_vfiprintf_r+0x24c>
 8008378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800837c:	4623      	mov	r3, r4
 800837e:	469a      	mov	sl, r3
 8008380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008384:	b10a      	cbz	r2, 800838a <_vfiprintf_r+0xa2>
 8008386:	2a25      	cmp	r2, #37	; 0x25
 8008388:	d1f9      	bne.n	800837e <_vfiprintf_r+0x96>
 800838a:	ebba 0b04 	subs.w	fp, sl, r4
 800838e:	d00b      	beq.n	80083a8 <_vfiprintf_r+0xc0>
 8008390:	465b      	mov	r3, fp
 8008392:	4622      	mov	r2, r4
 8008394:	4629      	mov	r1, r5
 8008396:	4630      	mov	r0, r6
 8008398:	f7ff ff94 	bl	80082c4 <__sfputs_r>
 800839c:	3001      	adds	r0, #1
 800839e:	f000 80aa 	beq.w	80084f6 <_vfiprintf_r+0x20e>
 80083a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a4:	445a      	add	r2, fp
 80083a6:	9209      	str	r2, [sp, #36]	; 0x24
 80083a8:	f89a 3000 	ldrb.w	r3, [sl]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 80a2 	beq.w	80084f6 <_vfiprintf_r+0x20e>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083bc:	f10a 0a01 	add.w	sl, sl, #1
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	9307      	str	r3, [sp, #28]
 80083c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c8:	931a      	str	r3, [sp, #104]	; 0x68
 80083ca:	4654      	mov	r4, sl
 80083cc:	2205      	movs	r2, #5
 80083ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d2:	4858      	ldr	r0, [pc, #352]	; (8008534 <_vfiprintf_r+0x24c>)
 80083d4:	f7fe ff9e 	bl	8007314 <memchr>
 80083d8:	9a04      	ldr	r2, [sp, #16]
 80083da:	b9d8      	cbnz	r0, 8008414 <_vfiprintf_r+0x12c>
 80083dc:	06d1      	lsls	r1, r2, #27
 80083de:	bf44      	itt	mi
 80083e0:	2320      	movmi	r3, #32
 80083e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e6:	0713      	lsls	r3, r2, #28
 80083e8:	bf44      	itt	mi
 80083ea:	232b      	movmi	r3, #43	; 0x2b
 80083ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f0:	f89a 3000 	ldrb.w	r3, [sl]
 80083f4:	2b2a      	cmp	r3, #42	; 0x2a
 80083f6:	d015      	beq.n	8008424 <_vfiprintf_r+0x13c>
 80083f8:	4654      	mov	r4, sl
 80083fa:	2000      	movs	r0, #0
 80083fc:	f04f 0c0a 	mov.w	ip, #10
 8008400:	9a07      	ldr	r2, [sp, #28]
 8008402:	4621      	mov	r1, r4
 8008404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008408:	3b30      	subs	r3, #48	; 0x30
 800840a:	2b09      	cmp	r3, #9
 800840c:	d94e      	bls.n	80084ac <_vfiprintf_r+0x1c4>
 800840e:	b1b0      	cbz	r0, 800843e <_vfiprintf_r+0x156>
 8008410:	9207      	str	r2, [sp, #28]
 8008412:	e014      	b.n	800843e <_vfiprintf_r+0x156>
 8008414:	eba0 0308 	sub.w	r3, r0, r8
 8008418:	fa09 f303 	lsl.w	r3, r9, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	46a2      	mov	sl, r4
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	e7d2      	b.n	80083ca <_vfiprintf_r+0xe2>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	1d19      	adds	r1, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	9103      	str	r1, [sp, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfbb      	ittet	lt
 8008430:	425b      	neglt	r3, r3
 8008432:	f042 0202 	orrlt.w	r2, r2, #2
 8008436:	9307      	strge	r3, [sp, #28]
 8008438:	9307      	strlt	r3, [sp, #28]
 800843a:	bfb8      	it	lt
 800843c:	9204      	strlt	r2, [sp, #16]
 800843e:	7823      	ldrb	r3, [r4, #0]
 8008440:	2b2e      	cmp	r3, #46	; 0x2e
 8008442:	d10c      	bne.n	800845e <_vfiprintf_r+0x176>
 8008444:	7863      	ldrb	r3, [r4, #1]
 8008446:	2b2a      	cmp	r3, #42	; 0x2a
 8008448:	d135      	bne.n	80084b6 <_vfiprintf_r+0x1ce>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	3402      	adds	r4, #2
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	9203      	str	r2, [sp, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfb8      	it	lt
 8008458:	f04f 33ff 	movlt.w	r3, #4294967295
 800845c:	9305      	str	r3, [sp, #20]
 800845e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008538 <_vfiprintf_r+0x250>
 8008462:	2203      	movs	r2, #3
 8008464:	4650      	mov	r0, sl
 8008466:	7821      	ldrb	r1, [r4, #0]
 8008468:	f7fe ff54 	bl	8007314 <memchr>
 800846c:	b140      	cbz	r0, 8008480 <_vfiprintf_r+0x198>
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	eba0 000a 	sub.w	r0, r0, sl
 8008474:	fa03 f000 	lsl.w	r0, r3, r0
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	3401      	adds	r4, #1
 800847c:	4303      	orrs	r3, r0
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008484:	2206      	movs	r2, #6
 8008486:	482d      	ldr	r0, [pc, #180]	; (800853c <_vfiprintf_r+0x254>)
 8008488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800848c:	f7fe ff42 	bl	8007314 <memchr>
 8008490:	2800      	cmp	r0, #0
 8008492:	d03f      	beq.n	8008514 <_vfiprintf_r+0x22c>
 8008494:	4b2a      	ldr	r3, [pc, #168]	; (8008540 <_vfiprintf_r+0x258>)
 8008496:	bb1b      	cbnz	r3, 80084e0 <_vfiprintf_r+0x1f8>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	3307      	adds	r3, #7
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	3308      	adds	r3, #8
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a6:	443b      	add	r3, r7
 80084a8:	9309      	str	r3, [sp, #36]	; 0x24
 80084aa:	e767      	b.n	800837c <_vfiprintf_r+0x94>
 80084ac:	460c      	mov	r4, r1
 80084ae:	2001      	movs	r0, #1
 80084b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b4:	e7a5      	b.n	8008402 <_vfiprintf_r+0x11a>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f04f 0c0a 	mov.w	ip, #10
 80084bc:	4619      	mov	r1, r3
 80084be:	3401      	adds	r4, #1
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c8:	3a30      	subs	r2, #48	; 0x30
 80084ca:	2a09      	cmp	r2, #9
 80084cc:	d903      	bls.n	80084d6 <_vfiprintf_r+0x1ee>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0c5      	beq.n	800845e <_vfiprintf_r+0x176>
 80084d2:	9105      	str	r1, [sp, #20]
 80084d4:	e7c3      	b.n	800845e <_vfiprintf_r+0x176>
 80084d6:	4604      	mov	r4, r0
 80084d8:	2301      	movs	r3, #1
 80084da:	fb0c 2101 	mla	r1, ip, r1, r2
 80084de:	e7f0      	b.n	80084c2 <_vfiprintf_r+0x1da>
 80084e0:	ab03      	add	r3, sp, #12
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	462a      	mov	r2, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	4b16      	ldr	r3, [pc, #88]	; (8008544 <_vfiprintf_r+0x25c>)
 80084ea:	a904      	add	r1, sp, #16
 80084ec:	f7fc f892 	bl	8004614 <_printf_float>
 80084f0:	4607      	mov	r7, r0
 80084f2:	1c78      	adds	r0, r7, #1
 80084f4:	d1d6      	bne.n	80084a4 <_vfiprintf_r+0x1bc>
 80084f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f8:	07d9      	lsls	r1, r3, #31
 80084fa:	d405      	bmi.n	8008508 <_vfiprintf_r+0x220>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	059a      	lsls	r2, r3, #22
 8008500:	d402      	bmi.n	8008508 <_vfiprintf_r+0x220>
 8008502:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008504:	f000 fa9d 	bl	8008a42 <__retarget_lock_release_recursive>
 8008508:	89ab      	ldrh	r3, [r5, #12]
 800850a:	065b      	lsls	r3, r3, #25
 800850c:	f53f af12 	bmi.w	8008334 <_vfiprintf_r+0x4c>
 8008510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008512:	e711      	b.n	8008338 <_vfiprintf_r+0x50>
 8008514:	ab03      	add	r3, sp, #12
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	462a      	mov	r2, r5
 800851a:	4630      	mov	r0, r6
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <_vfiprintf_r+0x25c>)
 800851e:	a904      	add	r1, sp, #16
 8008520:	f7fc fb14 	bl	8004b4c <_printf_i>
 8008524:	e7e4      	b.n	80084f0 <_vfiprintf_r+0x208>
 8008526:	bf00      	nop
 8008528:	0801ab94 	.word	0x0801ab94
 800852c:	0801abb4 	.word	0x0801abb4
 8008530:	0801ab74 	.word	0x0801ab74
 8008534:	0801ab24 	.word	0x0801ab24
 8008538:	0801ab2a 	.word	0x0801ab2a
 800853c:	0801ab2e 	.word	0x0801ab2e
 8008540:	08004615 	.word	0x08004615
 8008544:	080082c5 	.word	0x080082c5

08008548 <__swbuf_r>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	460e      	mov	r6, r1
 800854c:	4614      	mov	r4, r2
 800854e:	4605      	mov	r5, r0
 8008550:	b118      	cbz	r0, 800855a <__swbuf_r+0x12>
 8008552:	6983      	ldr	r3, [r0, #24]
 8008554:	b90b      	cbnz	r3, 800855a <__swbuf_r+0x12>
 8008556:	f000 f9d5 	bl	8008904 <__sinit>
 800855a:	4b21      	ldr	r3, [pc, #132]	; (80085e0 <__swbuf_r+0x98>)
 800855c:	429c      	cmp	r4, r3
 800855e:	d12b      	bne.n	80085b8 <__swbuf_r+0x70>
 8008560:	686c      	ldr	r4, [r5, #4]
 8008562:	69a3      	ldr	r3, [r4, #24]
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	071a      	lsls	r2, r3, #28
 800856a:	d52f      	bpl.n	80085cc <__swbuf_r+0x84>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b36b      	cbz	r3, 80085cc <__swbuf_r+0x84>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	b2f6      	uxtb	r6, r6
 8008576:	1ac0      	subs	r0, r0, r3
 8008578:	6963      	ldr	r3, [r4, #20]
 800857a:	4637      	mov	r7, r6
 800857c:	4283      	cmp	r3, r0
 800857e:	dc04      	bgt.n	800858a <__swbuf_r+0x42>
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f92a 	bl	80087dc <_fflush_r>
 8008588:	bb30      	cbnz	r0, 80085d8 <__swbuf_r+0x90>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	3001      	adds	r0, #1
 800858e:	3b01      	subs	r3, #1
 8008590:	60a3      	str	r3, [r4, #8]
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	701e      	strb	r6, [r3, #0]
 800859a:	6963      	ldr	r3, [r4, #20]
 800859c:	4283      	cmp	r3, r0
 800859e:	d004      	beq.n	80085aa <__swbuf_r+0x62>
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	07db      	lsls	r3, r3, #31
 80085a4:	d506      	bpl.n	80085b4 <__swbuf_r+0x6c>
 80085a6:	2e0a      	cmp	r6, #10
 80085a8:	d104      	bne.n	80085b4 <__swbuf_r+0x6c>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f915 	bl	80087dc <_fflush_r>
 80085b2:	b988      	cbnz	r0, 80085d8 <__swbuf_r+0x90>
 80085b4:	4638      	mov	r0, r7
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <__swbuf_r+0x9c>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d101      	bne.n	80085c2 <__swbuf_r+0x7a>
 80085be:	68ac      	ldr	r4, [r5, #8]
 80085c0:	e7cf      	b.n	8008562 <__swbuf_r+0x1a>
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <__swbuf_r+0xa0>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	bf08      	it	eq
 80085c8:	68ec      	ldreq	r4, [r5, #12]
 80085ca:	e7ca      	b.n	8008562 <__swbuf_r+0x1a>
 80085cc:	4621      	mov	r1, r4
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f80c 	bl	80085ec <__swsetup_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0cb      	beq.n	8008570 <__swbuf_r+0x28>
 80085d8:	f04f 37ff 	mov.w	r7, #4294967295
 80085dc:	e7ea      	b.n	80085b4 <__swbuf_r+0x6c>
 80085de:	bf00      	nop
 80085e0:	0801ab94 	.word	0x0801ab94
 80085e4:	0801abb4 	.word	0x0801abb4
 80085e8:	0801ab74 	.word	0x0801ab74

080085ec <__swsetup_r>:
 80085ec:	4b32      	ldr	r3, [pc, #200]	; (80086b8 <__swsetup_r+0xcc>)
 80085ee:	b570      	push	{r4, r5, r6, lr}
 80085f0:	681d      	ldr	r5, [r3, #0]
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	b125      	cbz	r5, 8008602 <__swsetup_r+0x16>
 80085f8:	69ab      	ldr	r3, [r5, #24]
 80085fa:	b913      	cbnz	r3, 8008602 <__swsetup_r+0x16>
 80085fc:	4628      	mov	r0, r5
 80085fe:	f000 f981 	bl	8008904 <__sinit>
 8008602:	4b2e      	ldr	r3, [pc, #184]	; (80086bc <__swsetup_r+0xd0>)
 8008604:	429c      	cmp	r4, r3
 8008606:	d10f      	bne.n	8008628 <__swsetup_r+0x3c>
 8008608:	686c      	ldr	r4, [r5, #4]
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d42c      	bmi.n	800866e <__swsetup_r+0x82>
 8008614:	06dd      	lsls	r5, r3, #27
 8008616:	d411      	bmi.n	800863c <__swsetup_r+0x50>
 8008618:	2309      	movs	r3, #9
 800861a:	6033      	str	r3, [r6, #0]
 800861c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	e03e      	b.n	80086a6 <__swsetup_r+0xba>
 8008628:	4b25      	ldr	r3, [pc, #148]	; (80086c0 <__swsetup_r+0xd4>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d101      	bne.n	8008632 <__swsetup_r+0x46>
 800862e:	68ac      	ldr	r4, [r5, #8]
 8008630:	e7eb      	b.n	800860a <__swsetup_r+0x1e>
 8008632:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <__swsetup_r+0xd8>)
 8008634:	429c      	cmp	r4, r3
 8008636:	bf08      	it	eq
 8008638:	68ec      	ldreq	r4, [r5, #12]
 800863a:	e7e6      	b.n	800860a <__swsetup_r+0x1e>
 800863c:	0758      	lsls	r0, r3, #29
 800863e:	d512      	bpl.n	8008666 <__swsetup_r+0x7a>
 8008640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008642:	b141      	cbz	r1, 8008656 <__swsetup_r+0x6a>
 8008644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008648:	4299      	cmp	r1, r3
 800864a:	d002      	beq.n	8008652 <__swsetup_r+0x66>
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff fb49 	bl	8007ce4 <_free_r>
 8008652:	2300      	movs	r3, #0
 8008654:	6363      	str	r3, [r4, #52]	; 0x34
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	2300      	movs	r3, #0
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f043 0308 	orr.w	r3, r3, #8
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	b94b      	cbnz	r3, 8008686 <__swsetup_r+0x9a>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800867c:	d003      	beq.n	8008686 <__swsetup_r+0x9a>
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f000 fa05 	bl	8008a90 <__smakebuf_r>
 8008686:	89a0      	ldrh	r0, [r4, #12]
 8008688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868c:	f010 0301 	ands.w	r3, r0, #1
 8008690:	d00a      	beq.n	80086a8 <__swsetup_r+0xbc>
 8008692:	2300      	movs	r3, #0
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	6963      	ldr	r3, [r4, #20]
 8008698:	425b      	negs	r3, r3
 800869a:	61a3      	str	r3, [r4, #24]
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	b943      	cbnz	r3, 80086b2 <__swsetup_r+0xc6>
 80086a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086a4:	d1ba      	bne.n	800861c <__swsetup_r+0x30>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	0781      	lsls	r1, r0, #30
 80086aa:	bf58      	it	pl
 80086ac:	6963      	ldrpl	r3, [r4, #20]
 80086ae:	60a3      	str	r3, [r4, #8]
 80086b0:	e7f4      	b.n	800869c <__swsetup_r+0xb0>
 80086b2:	2000      	movs	r0, #0
 80086b4:	e7f7      	b.n	80086a6 <__swsetup_r+0xba>
 80086b6:	bf00      	nop
 80086b8:	20000014 	.word	0x20000014
 80086bc:	0801ab94 	.word	0x0801ab94
 80086c0:	0801abb4 	.word	0x0801abb4
 80086c4:	0801ab74 	.word	0x0801ab74

080086c8 <abort>:
 80086c8:	2006      	movs	r0, #6
 80086ca:	b508      	push	{r3, lr}
 80086cc:	f000 fa50 	bl	8008b70 <raise>
 80086d0:	2001      	movs	r0, #1
 80086d2:	f7fa fa6b 	bl	8002bac <_exit>
	...

080086d8 <__sflush_r>:
 80086d8:	898a      	ldrh	r2, [r1, #12]
 80086da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086dc:	4605      	mov	r5, r0
 80086de:	0710      	lsls	r0, r2, #28
 80086e0:	460c      	mov	r4, r1
 80086e2:	d457      	bmi.n	8008794 <__sflush_r+0xbc>
 80086e4:	684b      	ldr	r3, [r1, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dc04      	bgt.n	80086f4 <__sflush_r+0x1c>
 80086ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc01      	bgt.n	80086f4 <__sflush_r+0x1c>
 80086f0:	2000      	movs	r0, #0
 80086f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d0fa      	beq.n	80086f0 <__sflush_r+0x18>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008700:	682f      	ldr	r7, [r5, #0]
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	d032      	beq.n	800876c <__sflush_r+0x94>
 8008706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	075a      	lsls	r2, r3, #29
 800870c:	d505      	bpl.n	800871a <__sflush_r+0x42>
 800870e:	6863      	ldr	r3, [r4, #4]
 8008710:	1ac0      	subs	r0, r0, r3
 8008712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008714:	b10b      	cbz	r3, 800871a <__sflush_r+0x42>
 8008716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008718:	1ac0      	subs	r0, r0, r3
 800871a:	2300      	movs	r3, #0
 800871c:	4602      	mov	r2, r0
 800871e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008720:	4628      	mov	r0, r5
 8008722:	6a21      	ldr	r1, [r4, #32]
 8008724:	47b0      	blx	r6
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	d106      	bne.n	800873a <__sflush_r+0x62>
 800872c:	6829      	ldr	r1, [r5, #0]
 800872e:	291d      	cmp	r1, #29
 8008730:	d82c      	bhi.n	800878c <__sflush_r+0xb4>
 8008732:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <__sflush_r+0x100>)
 8008734:	40ca      	lsrs	r2, r1
 8008736:	07d6      	lsls	r6, r2, #31
 8008738:	d528      	bpl.n	800878c <__sflush_r+0xb4>
 800873a:	2200      	movs	r2, #0
 800873c:	6062      	str	r2, [r4, #4]
 800873e:	6922      	ldr	r2, [r4, #16]
 8008740:	04d9      	lsls	r1, r3, #19
 8008742:	6022      	str	r2, [r4, #0]
 8008744:	d504      	bpl.n	8008750 <__sflush_r+0x78>
 8008746:	1c42      	adds	r2, r0, #1
 8008748:	d101      	bne.n	800874e <__sflush_r+0x76>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	b903      	cbnz	r3, 8008750 <__sflush_r+0x78>
 800874e:	6560      	str	r0, [r4, #84]	; 0x54
 8008750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008752:	602f      	str	r7, [r5, #0]
 8008754:	2900      	cmp	r1, #0
 8008756:	d0cb      	beq.n	80086f0 <__sflush_r+0x18>
 8008758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800875c:	4299      	cmp	r1, r3
 800875e:	d002      	beq.n	8008766 <__sflush_r+0x8e>
 8008760:	4628      	mov	r0, r5
 8008762:	f7ff fabf 	bl	8007ce4 <_free_r>
 8008766:	2000      	movs	r0, #0
 8008768:	6360      	str	r0, [r4, #52]	; 0x34
 800876a:	e7c2      	b.n	80086f2 <__sflush_r+0x1a>
 800876c:	6a21      	ldr	r1, [r4, #32]
 800876e:	2301      	movs	r3, #1
 8008770:	4628      	mov	r0, r5
 8008772:	47b0      	blx	r6
 8008774:	1c41      	adds	r1, r0, #1
 8008776:	d1c7      	bne.n	8008708 <__sflush_r+0x30>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c4      	beq.n	8008708 <__sflush_r+0x30>
 800877e:	2b1d      	cmp	r3, #29
 8008780:	d001      	beq.n	8008786 <__sflush_r+0xae>
 8008782:	2b16      	cmp	r3, #22
 8008784:	d101      	bne.n	800878a <__sflush_r+0xb2>
 8008786:	602f      	str	r7, [r5, #0]
 8008788:	e7b2      	b.n	80086f0 <__sflush_r+0x18>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e7ae      	b.n	80086f2 <__sflush_r+0x1a>
 8008794:	690f      	ldr	r7, [r1, #16]
 8008796:	2f00      	cmp	r7, #0
 8008798:	d0aa      	beq.n	80086f0 <__sflush_r+0x18>
 800879a:	0793      	lsls	r3, r2, #30
 800879c:	bf18      	it	ne
 800879e:	2300      	movne	r3, #0
 80087a0:	680e      	ldr	r6, [r1, #0]
 80087a2:	bf08      	it	eq
 80087a4:	694b      	ldreq	r3, [r1, #20]
 80087a6:	1bf6      	subs	r6, r6, r7
 80087a8:	600f      	str	r7, [r1, #0]
 80087aa:	608b      	str	r3, [r1, #8]
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	dd9f      	ble.n	80086f0 <__sflush_r+0x18>
 80087b0:	4633      	mov	r3, r6
 80087b2:	463a      	mov	r2, r7
 80087b4:	4628      	mov	r0, r5
 80087b6:	6a21      	ldr	r1, [r4, #32]
 80087b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80087bc:	47e0      	blx	ip
 80087be:	2800      	cmp	r0, #0
 80087c0:	dc06      	bgt.n	80087d0 <__sflush_r+0xf8>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	e790      	b.n	80086f2 <__sflush_r+0x1a>
 80087d0:	4407      	add	r7, r0
 80087d2:	1a36      	subs	r6, r6, r0
 80087d4:	e7ea      	b.n	80087ac <__sflush_r+0xd4>
 80087d6:	bf00      	nop
 80087d8:	20400001 	.word	0x20400001

080087dc <_fflush_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	690b      	ldr	r3, [r1, #16]
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	b913      	cbnz	r3, 80087ec <_fflush_r+0x10>
 80087e6:	2500      	movs	r5, #0
 80087e8:	4628      	mov	r0, r5
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	b118      	cbz	r0, 80087f6 <_fflush_r+0x1a>
 80087ee:	6983      	ldr	r3, [r0, #24]
 80087f0:	b90b      	cbnz	r3, 80087f6 <_fflush_r+0x1a>
 80087f2:	f000 f887 	bl	8008904 <__sinit>
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <_fflush_r+0x6c>)
 80087f8:	429c      	cmp	r4, r3
 80087fa:	d11b      	bne.n	8008834 <_fflush_r+0x58>
 80087fc:	686c      	ldr	r4, [r5, #4]
 80087fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0ef      	beq.n	80087e6 <_fflush_r+0xa>
 8008806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008808:	07d0      	lsls	r0, r2, #31
 800880a:	d404      	bmi.n	8008816 <_fflush_r+0x3a>
 800880c:	0599      	lsls	r1, r3, #22
 800880e:	d402      	bmi.n	8008816 <_fflush_r+0x3a>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f000 f915 	bl	8008a40 <__retarget_lock_acquire_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	4621      	mov	r1, r4
 800881a:	f7ff ff5d 	bl	80086d8 <__sflush_r>
 800881e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008820:	4605      	mov	r5, r0
 8008822:	07da      	lsls	r2, r3, #31
 8008824:	d4e0      	bmi.n	80087e8 <_fflush_r+0xc>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	059b      	lsls	r3, r3, #22
 800882a:	d4dd      	bmi.n	80087e8 <_fflush_r+0xc>
 800882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882e:	f000 f908 	bl	8008a42 <__retarget_lock_release_recursive>
 8008832:	e7d9      	b.n	80087e8 <_fflush_r+0xc>
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <_fflush_r+0x70>)
 8008836:	429c      	cmp	r4, r3
 8008838:	d101      	bne.n	800883e <_fflush_r+0x62>
 800883a:	68ac      	ldr	r4, [r5, #8]
 800883c:	e7df      	b.n	80087fe <_fflush_r+0x22>
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <_fflush_r+0x74>)
 8008840:	429c      	cmp	r4, r3
 8008842:	bf08      	it	eq
 8008844:	68ec      	ldreq	r4, [r5, #12]
 8008846:	e7da      	b.n	80087fe <_fflush_r+0x22>
 8008848:	0801ab94 	.word	0x0801ab94
 800884c:	0801abb4 	.word	0x0801abb4
 8008850:	0801ab74 	.word	0x0801ab74

08008854 <std>:
 8008854:	2300      	movs	r3, #0
 8008856:	b510      	push	{r4, lr}
 8008858:	4604      	mov	r4, r0
 800885a:	e9c0 3300 	strd	r3, r3, [r0]
 800885e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008862:	6083      	str	r3, [r0, #8]
 8008864:	8181      	strh	r1, [r0, #12]
 8008866:	6643      	str	r3, [r0, #100]	; 0x64
 8008868:	81c2      	strh	r2, [r0, #14]
 800886a:	6183      	str	r3, [r0, #24]
 800886c:	4619      	mov	r1, r3
 800886e:	2208      	movs	r2, #8
 8008870:	305c      	adds	r0, #92	; 0x5c
 8008872:	f7fb fe29 	bl	80044c8 <memset>
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x38>)
 8008878:	6224      	str	r4, [r4, #32]
 800887a:	6263      	str	r3, [r4, #36]	; 0x24
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <std+0x3c>)
 800887e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <std+0x40>)
 8008882:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <std+0x44>)
 8008886:	6323      	str	r3, [r4, #48]	; 0x30
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	08008ba9 	.word	0x08008ba9
 8008890:	08008bcb 	.word	0x08008bcb
 8008894:	08008c03 	.word	0x08008c03
 8008898:	08008c27 	.word	0x08008c27

0800889c <_cleanup_r>:
 800889c:	4901      	ldr	r1, [pc, #4]	; (80088a4 <_cleanup_r+0x8>)
 800889e:	f000 b8af 	b.w	8008a00 <_fwalk_reent>
 80088a2:	bf00      	nop
 80088a4:	080087dd 	.word	0x080087dd

080088a8 <__sfmoreglue>:
 80088a8:	2268      	movs	r2, #104	; 0x68
 80088aa:	b570      	push	{r4, r5, r6, lr}
 80088ac:	1e4d      	subs	r5, r1, #1
 80088ae:	4355      	muls	r5, r2
 80088b0:	460e      	mov	r6, r1
 80088b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088b6:	f7ff fa7d 	bl	8007db4 <_malloc_r>
 80088ba:	4604      	mov	r4, r0
 80088bc:	b140      	cbz	r0, 80088d0 <__sfmoreglue+0x28>
 80088be:	2100      	movs	r1, #0
 80088c0:	e9c0 1600 	strd	r1, r6, [r0]
 80088c4:	300c      	adds	r0, #12
 80088c6:	60a0      	str	r0, [r4, #8]
 80088c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088cc:	f7fb fdfc 	bl	80044c8 <memset>
 80088d0:	4620      	mov	r0, r4
 80088d2:	bd70      	pop	{r4, r5, r6, pc}

080088d4 <__sfp_lock_acquire>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sfp_lock_acquire+0x8>)
 80088d6:	f000 b8b3 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	200016ed 	.word	0x200016ed

080088e0 <__sfp_lock_release>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sfp_lock_release+0x8>)
 80088e2:	f000 b8ae 	b.w	8008a42 <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	200016ed 	.word	0x200016ed

080088ec <__sinit_lock_acquire>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sinit_lock_acquire+0x8>)
 80088ee:	f000 b8a7 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 80088f2:	bf00      	nop
 80088f4:	200016ee 	.word	0x200016ee

080088f8 <__sinit_lock_release>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__sinit_lock_release+0x8>)
 80088fa:	f000 b8a2 	b.w	8008a42 <__retarget_lock_release_recursive>
 80088fe:	bf00      	nop
 8008900:	200016ee 	.word	0x200016ee

08008904 <__sinit>:
 8008904:	b510      	push	{r4, lr}
 8008906:	4604      	mov	r4, r0
 8008908:	f7ff fff0 	bl	80088ec <__sinit_lock_acquire>
 800890c:	69a3      	ldr	r3, [r4, #24]
 800890e:	b11b      	cbz	r3, 8008918 <__sinit+0x14>
 8008910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008914:	f7ff bff0 	b.w	80088f8 <__sinit_lock_release>
 8008918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800891c:	6523      	str	r3, [r4, #80]	; 0x50
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <__sinit+0x68>)
 8008920:	4a13      	ldr	r2, [pc, #76]	; (8008970 <__sinit+0x6c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	62a2      	str	r2, [r4, #40]	; 0x28
 8008926:	42a3      	cmp	r3, r4
 8008928:	bf08      	it	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	4620      	mov	r0, r4
 800892e:	bf08      	it	eq
 8008930:	61a3      	streq	r3, [r4, #24]
 8008932:	f000 f81f 	bl	8008974 <__sfp>
 8008936:	6060      	str	r0, [r4, #4]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 f81b 	bl	8008974 <__sfp>
 800893e:	60a0      	str	r0, [r4, #8]
 8008940:	4620      	mov	r0, r4
 8008942:	f000 f817 	bl	8008974 <__sfp>
 8008946:	2200      	movs	r2, #0
 8008948:	2104      	movs	r1, #4
 800894a:	60e0      	str	r0, [r4, #12]
 800894c:	6860      	ldr	r0, [r4, #4]
 800894e:	f7ff ff81 	bl	8008854 <std>
 8008952:	2201      	movs	r2, #1
 8008954:	2109      	movs	r1, #9
 8008956:	68a0      	ldr	r0, [r4, #8]
 8008958:	f7ff ff7c 	bl	8008854 <std>
 800895c:	2202      	movs	r2, #2
 800895e:	2112      	movs	r1, #18
 8008960:	68e0      	ldr	r0, [r4, #12]
 8008962:	f7ff ff77 	bl	8008854 <std>
 8008966:	2301      	movs	r3, #1
 8008968:	61a3      	str	r3, [r4, #24]
 800896a:	e7d1      	b.n	8008910 <__sinit+0xc>
 800896c:	0801a6c8 	.word	0x0801a6c8
 8008970:	0800889d 	.word	0x0800889d

08008974 <__sfp>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	4607      	mov	r7, r0
 8008978:	f7ff ffac 	bl	80088d4 <__sfp_lock_acquire>
 800897c:	4b1e      	ldr	r3, [pc, #120]	; (80089f8 <__sfp+0x84>)
 800897e:	681e      	ldr	r6, [r3, #0]
 8008980:	69b3      	ldr	r3, [r6, #24]
 8008982:	b913      	cbnz	r3, 800898a <__sfp+0x16>
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff ffbd 	bl	8008904 <__sinit>
 800898a:	3648      	adds	r6, #72	; 0x48
 800898c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008990:	3b01      	subs	r3, #1
 8008992:	d503      	bpl.n	800899c <__sfp+0x28>
 8008994:	6833      	ldr	r3, [r6, #0]
 8008996:	b30b      	cbz	r3, 80089dc <__sfp+0x68>
 8008998:	6836      	ldr	r6, [r6, #0]
 800899a:	e7f7      	b.n	800898c <__sfp+0x18>
 800899c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089a0:	b9d5      	cbnz	r5, 80089d8 <__sfp+0x64>
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <__sfp+0x88>)
 80089a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089a8:	60e3      	str	r3, [r4, #12]
 80089aa:	6665      	str	r5, [r4, #100]	; 0x64
 80089ac:	f000 f847 	bl	8008a3e <__retarget_lock_init_recursive>
 80089b0:	f7ff ff96 	bl	80088e0 <__sfp_lock_release>
 80089b4:	2208      	movs	r2, #8
 80089b6:	4629      	mov	r1, r5
 80089b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089c0:	6025      	str	r5, [r4, #0]
 80089c2:	61a5      	str	r5, [r4, #24]
 80089c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089c8:	f7fb fd7e 	bl	80044c8 <memset>
 80089cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089d4:	4620      	mov	r0, r4
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d8:	3468      	adds	r4, #104	; 0x68
 80089da:	e7d9      	b.n	8008990 <__sfp+0x1c>
 80089dc:	2104      	movs	r1, #4
 80089de:	4638      	mov	r0, r7
 80089e0:	f7ff ff62 	bl	80088a8 <__sfmoreglue>
 80089e4:	4604      	mov	r4, r0
 80089e6:	6030      	str	r0, [r6, #0]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1d5      	bne.n	8008998 <__sfp+0x24>
 80089ec:	f7ff ff78 	bl	80088e0 <__sfp_lock_release>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	e7ee      	b.n	80089d4 <__sfp+0x60>
 80089f6:	bf00      	nop
 80089f8:	0801a6c8 	.word	0x0801a6c8
 80089fc:	ffff0001 	.word	0xffff0001

08008a00 <_fwalk_reent>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4606      	mov	r6, r0
 8008a06:	4688      	mov	r8, r1
 8008a08:	2700      	movs	r7, #0
 8008a0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a12:	f1b9 0901 	subs.w	r9, r9, #1
 8008a16:	d505      	bpl.n	8008a24 <_fwalk_reent+0x24>
 8008a18:	6824      	ldr	r4, [r4, #0]
 8008a1a:	2c00      	cmp	r4, #0
 8008a1c:	d1f7      	bne.n	8008a0e <_fwalk_reent+0xe>
 8008a1e:	4638      	mov	r0, r7
 8008a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a24:	89ab      	ldrh	r3, [r5, #12]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d907      	bls.n	8008a3a <_fwalk_reent+0x3a>
 8008a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	d003      	beq.n	8008a3a <_fwalk_reent+0x3a>
 8008a32:	4629      	mov	r1, r5
 8008a34:	4630      	mov	r0, r6
 8008a36:	47c0      	blx	r8
 8008a38:	4307      	orrs	r7, r0
 8008a3a:	3568      	adds	r5, #104	; 0x68
 8008a3c:	e7e9      	b.n	8008a12 <_fwalk_reent+0x12>

08008a3e <__retarget_lock_init_recursive>:
 8008a3e:	4770      	bx	lr

08008a40 <__retarget_lock_acquire_recursive>:
 8008a40:	4770      	bx	lr

08008a42 <__retarget_lock_release_recursive>:
 8008a42:	4770      	bx	lr

08008a44 <__swhatbuf_r>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	460e      	mov	r6, r1
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	461d      	mov	r5, r3
 8008a52:	b096      	sub	sp, #88	; 0x58
 8008a54:	da08      	bge.n	8008a68 <__swhatbuf_r+0x24>
 8008a56:	2200      	movs	r2, #0
 8008a58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	061a      	lsls	r2, r3, #24
 8008a60:	d410      	bmi.n	8008a84 <__swhatbuf_r+0x40>
 8008a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a66:	e00e      	b.n	8008a86 <__swhatbuf_r+0x42>
 8008a68:	466a      	mov	r2, sp
 8008a6a:	f000 f903 	bl	8008c74 <_fstat_r>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	dbf1      	blt.n	8008a56 <__swhatbuf_r+0x12>
 8008a72:	9a01      	ldr	r2, [sp, #4]
 8008a74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a7c:	425a      	negs	r2, r3
 8008a7e:	415a      	adcs	r2, r3
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	e7ee      	b.n	8008a62 <__swhatbuf_r+0x1e>
 8008a84:	2340      	movs	r3, #64	; 0x40
 8008a86:	2000      	movs	r0, #0
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	b016      	add	sp, #88	; 0x58
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a90 <__smakebuf_r>:
 8008a90:	898b      	ldrh	r3, [r1, #12]
 8008a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a94:	079d      	lsls	r5, r3, #30
 8008a96:	4606      	mov	r6, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	d507      	bpl.n	8008aac <__smakebuf_r+0x1c>
 8008a9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	b002      	add	sp, #8
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	466a      	mov	r2, sp
 8008aae:	ab01      	add	r3, sp, #4
 8008ab0:	f7ff ffc8 	bl	8008a44 <__swhatbuf_r>
 8008ab4:	9900      	ldr	r1, [sp, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff f97b 	bl	8007db4 <_malloc_r>
 8008abe:	b948      	cbnz	r0, 8008ad4 <__smakebuf_r+0x44>
 8008ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac4:	059a      	lsls	r2, r3, #22
 8008ac6:	d4ef      	bmi.n	8008aa8 <__smakebuf_r+0x18>
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	f043 0302 	orr.w	r3, r3, #2
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e7e3      	b.n	8008a9c <__smakebuf_r+0xc>
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <__smakebuf_r+0x7c>)
 8008ad6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	6120      	str	r0, [r4, #16]
 8008ae6:	6163      	str	r3, [r4, #20]
 8008ae8:	9b01      	ldr	r3, [sp, #4]
 8008aea:	b15b      	cbz	r3, 8008b04 <__smakebuf_r+0x74>
 8008aec:	4630      	mov	r0, r6
 8008aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af2:	f000 f8d1 	bl	8008c98 <_isatty_r>
 8008af6:	b128      	cbz	r0, 8008b04 <__smakebuf_r+0x74>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	89a0      	ldrh	r0, [r4, #12]
 8008b06:	4305      	orrs	r5, r0
 8008b08:	81a5      	strh	r5, [r4, #12]
 8008b0a:	e7cd      	b.n	8008aa8 <__smakebuf_r+0x18>
 8008b0c:	0800889d 	.word	0x0800889d

08008b10 <_malloc_usable_size_r>:
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f18      	subs	r0, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfbc      	itt	lt
 8008b1a:	580b      	ldrlt	r3, [r1, r0]
 8008b1c:	18c0      	addlt	r0, r0, r3
 8008b1e:	4770      	bx	lr

08008b20 <_raise_r>:
 8008b20:	291f      	cmp	r1, #31
 8008b22:	b538      	push	{r3, r4, r5, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	d904      	bls.n	8008b34 <_raise_r+0x14>
 8008b2a:	2316      	movs	r3, #22
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b36:	b112      	cbz	r2, 8008b3e <_raise_r+0x1e>
 8008b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b3c:	b94b      	cbnz	r3, 8008b52 <_raise_r+0x32>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f830 	bl	8008ba4 <_getpid_r>
 8008b44:	462a      	mov	r2, r5
 8008b46:	4601      	mov	r1, r0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b4e:	f000 b817 	b.w	8008b80 <_kill_r>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d00a      	beq.n	8008b6c <_raise_r+0x4c>
 8008b56:	1c59      	adds	r1, r3, #1
 8008b58:	d103      	bne.n	8008b62 <_raise_r+0x42>
 8008b5a:	2316      	movs	r3, #22
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7e7      	b.n	8008b32 <_raise_r+0x12>
 8008b62:	2400      	movs	r4, #0
 8008b64:	4628      	mov	r0, r5
 8008b66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b6a:	4798      	blx	r3
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7e0      	b.n	8008b32 <_raise_r+0x12>

08008b70 <raise>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <raise+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f7ff bfd3 	b.w	8008b20 <_raise_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000014 	.word	0x20000014

08008b80 <_kill_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	2300      	movs	r3, #0
 8008b84:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_kill_r+0x20>)
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f7fa f805 	bl	8002b9c <_kill>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d102      	bne.n	8008b9c <_kill_r+0x1c>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b103      	cbz	r3, 8008b9c <_kill_r+0x1c>
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200016e8 	.word	0x200016e8

08008ba4 <_getpid_r>:
 8008ba4:	f7f9 bff8 	b.w	8002b98 <_getpid>

08008ba8 <__sread>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	f000 f894 	bl	8008cdc <_read_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	bfab      	itete	ge
 8008bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bba:	89a3      	ldrhlt	r3, [r4, #12]
 8008bbc:	181b      	addge	r3, r3, r0
 8008bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bc2:	bfac      	ite	ge
 8008bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bc6:	81a3      	strhlt	r3, [r4, #12]
 8008bc8:	bd10      	pop	{r4, pc}

08008bca <__swrite>:
 8008bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bce:	461f      	mov	r7, r3
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	05db      	lsls	r3, r3, #23
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	4616      	mov	r6, r2
 8008bda:	d505      	bpl.n	8008be8 <__swrite+0x1e>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	2200      	movs	r2, #0
 8008be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be4:	f000 f868 	bl	8008cb8 <_lseek_r>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	4632      	mov	r2, r6
 8008bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfe:	f000 b817 	b.w	8008c30 <_write_r>

08008c02 <__sseek>:
 8008c02:	b510      	push	{r4, lr}
 8008c04:	460c      	mov	r4, r1
 8008c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0a:	f000 f855 	bl	8008cb8 <_lseek_r>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	bf15      	itete	ne
 8008c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c1e:	81a3      	strheq	r3, [r4, #12]
 8008c20:	bf18      	it	ne
 8008c22:	81a3      	strhne	r3, [r4, #12]
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <__sclose>:
 8008c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2a:	f000 b813 	b.w	8008c54 <_close_r>
	...

08008c30 <_write_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4d05      	ldr	r5, [pc, #20]	; (8008c50 <_write_r+0x20>)
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f9 ffc8 	bl	8002bd4 <_write>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_write_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_write_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	200016e8 	.word	0x200016e8

08008c54 <_close_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	2300      	movs	r3, #0
 8008c58:	4d05      	ldr	r5, [pc, #20]	; (8008c70 <_close_r+0x1c>)
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f9 ffc6 	bl	8002bf0 <_close>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_close_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_close_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	200016e8 	.word	0x200016e8

08008c74 <_fstat_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	2300      	movs	r3, #0
 8008c78:	4d06      	ldr	r5, [pc, #24]	; (8008c94 <_fstat_r+0x20>)
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f7f9 ffb8 	bl	8002bf6 <_fstat>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d102      	bne.n	8008c90 <_fstat_r+0x1c>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	b103      	cbz	r3, 8008c90 <_fstat_r+0x1c>
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	200016e8 	.word	0x200016e8

08008c98 <_isatty_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4d05      	ldr	r5, [pc, #20]	; (8008cb4 <_isatty_r+0x1c>)
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f9 ffac 	bl	8002c00 <_isatty>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_isatty_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_isatty_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200016e8 	.word	0x200016e8

08008cb8 <_lseek_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4d05      	ldr	r5, [pc, #20]	; (8008cd8 <_lseek_r+0x20>)
 8008cc4:	602a      	str	r2, [r5, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f9 ff9c 	bl	8002c04 <_lseek>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_lseek_r+0x1e>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_lseek_r+0x1e>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	200016e8 	.word	0x200016e8

08008cdc <_read_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4d05      	ldr	r5, [pc, #20]	; (8008cfc <_read_r+0x20>)
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7f9 ff64 	bl	8002bb8 <_read>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_read_r+0x1e>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_read_r+0x1e>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	200016e8 	.word	0x200016e8

08008d00 <floor>:
 8008d00:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8008d0a:	2d13      	cmp	r5, #19
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4684      	mov	ip, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	4606      	mov	r6, r0
 8008d14:	dc30      	bgt.n	8008d78 <floor+0x78>
 8008d16:	2d00      	cmp	r5, #0
 8008d18:	db1e      	blt.n	8008d58 <floor+0x58>
 8008d1a:	4f35      	ldr	r7, [pc, #212]	; (8008df0 <floor+0xf0>)
 8008d1c:	412f      	asrs	r7, r5
 8008d1e:	ea01 0207 	and.w	r2, r1, r7
 8008d22:	4302      	orrs	r2, r0
 8008d24:	d015      	beq.n	8008d52 <floor+0x52>
 8008d26:	a330      	add	r3, pc, #192	; (adr r3, 8008de8 <floor+0xe8>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fa1e 	bl	800016c <__adddf3>
 8008d30:	2200      	movs	r2, #0
 8008d32:	2300      	movs	r3, #0
 8008d34:	f7f7 fe60 	bl	80009f8 <__aeabi_dcmpgt>
 8008d38:	b148      	cbz	r0, 8008d4e <floor+0x4e>
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	da04      	bge.n	8008d48 <floor+0x48>
 8008d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d42:	fa43 f505 	asr.w	r5, r3, r5
 8008d46:	442c      	add	r4, r5
 8008d48:	2600      	movs	r6, #0
 8008d4a:	ea24 0407 	bic.w	r4, r4, r7
 8008d4e:	4623      	mov	r3, r4
 8008d50:	46b4      	mov	ip, r6
 8008d52:	4660      	mov	r0, ip
 8008d54:	4619      	mov	r1, r3
 8008d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d58:	a323      	add	r3, pc, #140	; (adr r3, 8008de8 <floor+0xe8>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fa05 	bl	800016c <__adddf3>
 8008d62:	2200      	movs	r2, #0
 8008d64:	2300      	movs	r3, #0
 8008d66:	f7f7 fe47 	bl	80009f8 <__aeabi_dcmpgt>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0ef      	beq.n	8008d4e <floor+0x4e>
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	db24      	blt.n	8008dbc <floor+0xbc>
 8008d72:	2600      	movs	r6, #0
 8008d74:	4634      	mov	r4, r6
 8008d76:	e7ea      	b.n	8008d4e <floor+0x4e>
 8008d78:	2d33      	cmp	r5, #51	; 0x33
 8008d7a:	dd08      	ble.n	8008d8e <floor+0x8e>
 8008d7c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008d80:	d1e7      	bne.n	8008d52 <floor+0x52>
 8008d82:	4602      	mov	r2, r0
 8008d84:	f7f7 f9f2 	bl	800016c <__adddf3>
 8008d88:	4684      	mov	ip, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	e7e1      	b.n	8008d52 <floor+0x52>
 8008d8e:	f04f 37ff 	mov.w	r7, #4294967295
 8008d92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008d96:	40d7      	lsrs	r7, r2
 8008d98:	4207      	tst	r7, r0
 8008d9a:	d0da      	beq.n	8008d52 <floor+0x52>
 8008d9c:	a312      	add	r3, pc, #72	; (adr r3, 8008de8 <floor+0xe8>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 f9e3 	bl	800016c <__adddf3>
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	f7f7 fe25 	bl	80009f8 <__aeabi_dcmpgt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d0cd      	beq.n	8008d4e <floor+0x4e>
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	db0b      	blt.n	8008dce <floor+0xce>
 8008db6:	ea26 0607 	bic.w	r6, r6, r7
 8008dba:	e7c8      	b.n	8008d4e <floor+0x4e>
 8008dbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <floor+0xf4>)
 8008dc2:	431e      	orrs	r6, r3
 8008dc4:	2e00      	cmp	r6, #0
 8008dc6:	bf18      	it	ne
 8008dc8:	4614      	movne	r4, r2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	e7bf      	b.n	8008d4e <floor+0x4e>
 8008dce:	2d14      	cmp	r5, #20
 8008dd0:	d008      	beq.n	8008de4 <floor+0xe4>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8008dd8:	fa03 f505 	lsl.w	r5, r3, r5
 8008ddc:	19ae      	adds	r6, r5, r6
 8008dde:	bf28      	it	cs
 8008de0:	18e4      	addcs	r4, r4, r3
 8008de2:	e7e8      	b.n	8008db6 <floor+0xb6>
 8008de4:	3401      	adds	r4, #1
 8008de6:	e7e6      	b.n	8008db6 <floor+0xb6>
 8008de8:	8800759c 	.word	0x8800759c
 8008dec:	7e37e43c 	.word	0x7e37e43c
 8008df0:	000fffff 	.word	0x000fffff
 8008df4:	bff00000 	.word	0xbff00000

08008df8 <pow>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	461d      	mov	r5, r3
 8008e00:	4680      	mov	r8, r0
 8008e02:	4689      	mov	r9, r1
 8008e04:	f000 f868 	bl	8008ed8 <__ieee754_pow>
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	462b      	mov	r3, r5
 8008e10:	4620      	mov	r0, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	f7f7 fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8008e18:	b978      	cbnz	r0, 8008e3a <pow+0x42>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fdc1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e26:	b1d8      	cbz	r0, 8008e60 <pow+0x68>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8008e34:	b128      	cbz	r0, 8008e42 <pow+0x4a>
 8008e36:	2600      	movs	r6, #0
 8008e38:	4f25      	ldr	r7, [pc, #148]	; (8008ed0 <pow+0xd8>)
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f000 fec5 	bl	8009bd4 <finite>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d0f5      	beq.n	8008e3a <pow+0x42>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	2200      	movs	r2, #0
 8008e54:	2300      	movs	r3, #0
 8008e56:	f7f7 fdb1 	bl	80009bc <__aeabi_dcmplt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d0ed      	beq.n	8008e3a <pow+0x42>
 8008e5e:	e02c      	b.n	8008eba <pow+0xc2>
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f000 feb6 	bl	8009bd4 <finite>
 8008e68:	b1a0      	cbz	r0, 8008e94 <pow+0x9c>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fd99 	bl	80009a8 <__aeabi_dcmpeq>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d0df      	beq.n	8008e3a <pow+0x42>
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f000 fea9 	bl	8009bd4 <finite>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d0d9      	beq.n	8008e3a <pow+0x42>
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f000 fea3 	bl	8009bd4 <finite>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d0d3      	beq.n	8008e3a <pow+0x42>
 8008e92:	e012      	b.n	8008eba <pow+0xc2>
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f000 fe9c 	bl	8009bd4 <finite>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d0e4      	beq.n	8008e6a <pow+0x72>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f000 fe96 	bl	8009bd4 <finite>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0de      	beq.n	8008e6a <pow+0x72>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 fdaa 	bl	8000a0c <__aeabi_dcmpun>
 8008eb8:	b920      	cbnz	r0, 8008ec4 <pow+0xcc>
 8008eba:	f7fb fac1 	bl	8004440 <__errno>
 8008ebe:	2322      	movs	r3, #34	; 0x22
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	e7ba      	b.n	8008e3a <pow+0x42>
 8008ec4:	f7fb fabc 	bl	8004440 <__errno>
 8008ec8:	2321      	movs	r3, #33	; 0x21
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	e7b5      	b.n	8008e3a <pow+0x42>
 8008ece:	bf00      	nop
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	00000000 	.word	0x00000000

08008ed8 <__ieee754_pow>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	ea5b 0002 	orrs.w	r0, fp, r2
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	461d      	mov	r5, r3
 8008eea:	460e      	mov	r6, r1
 8008eec:	b093      	sub	sp, #76	; 0x4c
 8008eee:	d116      	bne.n	8008f1e <__ieee754_pow+0x46>
 8008ef0:	4643      	mov	r3, r8
 8008ef2:	497d      	ldr	r1, [pc, #500]	; (80090e8 <__ieee754_pow+0x210>)
 8008ef4:	18db      	adds	r3, r3, r3
 8008ef6:	f486 2200 	eor.w	r2, r6, #524288	; 0x80000
 8008efa:	4152      	adcs	r2, r2
 8008efc:	4298      	cmp	r0, r3
 8008efe:	eb71 0302 	sbcs.w	r3, r1, r2
 8008f02:	d224      	bcs.n	8008f4e <__ieee754_pow+0x76>
 8008f04:	4640      	mov	r0, r8
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	f7f7 f92e 	bl	800016c <__adddf3>
 8008f10:	e9cd 0100 	strd	r0, r1, [sp]
 8008f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f18:	b013      	add	sp, #76	; 0x4c
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4a72      	ldr	r2, [pc, #456]	; (80090ec <__ieee754_pow+0x214>)
 8008f22:	f026 4900 	bic.w	r9, r6, #2147483648	; 0x80000000
 8008f26:	4591      	cmp	r9, r2
 8008f28:	469a      	mov	sl, r3
 8008f2a:	4637      	mov	r7, r6
 8008f2c:	4643      	mov	r3, r8
 8008f2e:	dd17      	ble.n	8008f60 <__ieee754_pow+0x88>
 8008f30:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8008f34:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8008f38:	431f      	orrs	r7, r3
 8008f3a:	d1e3      	bne.n	8008f04 <__ieee754_pow+0x2c>
 8008f3c:	1922      	adds	r2, r4, r4
 8008f3e:	496a      	ldr	r1, [pc, #424]	; (80090e8 <__ieee754_pow+0x210>)
 8008f40:	f485 2300 	eor.w	r3, r5, #524288	; 0x80000
 8008f44:	415b      	adcs	r3, r3
 8008f46:	4297      	cmp	r7, r2
 8008f48:	eb71 0303 	sbcs.w	r3, r1, r3
 8008f4c:	d3da      	bcc.n	8008f04 <__ieee754_pow+0x2c>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4c67      	ldr	r4, [pc, #412]	; (80090f0 <__ieee754_pow+0x218>)
 8008f52:	e9cd 3400 	strd	r3, r4, [sp]
 8008f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f5a:	b013      	add	sp, #76	; 0x4c
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	d040      	beq.n	8008fe4 <__ieee754_pow+0x10c>
 8008f62:	4a62      	ldr	r2, [pc, #392]	; (80090ec <__ieee754_pow+0x214>)
 8008f64:	4593      	cmp	fp, r2
 8008f66:	dce3      	bgt.n	8008f30 <__ieee754_pow+0x58>
 8008f68:	f000 8093 	beq.w	8009092 <__ieee754_pow+0x1ba>
 8008f6c:	2f00      	cmp	r7, #0
 8008f6e:	db73      	blt.n	8009058 <__ieee754_pow+0x180>
 8008f70:	2200      	movs	r2, #0
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	b979      	cbnz	r1, 8008f96 <__ieee754_pow+0xbe>
 8008f76:	4a5d      	ldr	r2, [pc, #372]	; (80090ec <__ieee754_pow+0x214>)
 8008f78:	4593      	cmp	fp, r2
 8008f7a:	f000 808e 	beq.w	800909a <__ieee754_pow+0x1c2>
 8008f7e:	4a5c      	ldr	r2, [pc, #368]	; (80090f0 <__ieee754_pow+0x218>)
 8008f80:	4593      	cmp	fp, r2
 8008f82:	f000 80a2 	beq.w	80090ca <__ieee754_pow+0x1f2>
 8008f86:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8008f8a:	f000 84a0 	beq.w	80098ce <__ieee754_pow+0x9f6>
 8008f8e:	4a59      	ldr	r2, [pc, #356]	; (80090f4 <__ieee754_pow+0x21c>)
 8008f90:	4592      	cmp	sl, r2
 8008f92:	f000 83c6 	beq.w	8009722 <__ieee754_pow+0x84a>
 8008f96:	4640      	mov	r0, r8
 8008f98:	4631      	mov	r1, r6
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	f000 fe16 	bl	8009bcc <fabs>
 8008fa0:	9b04      	ldr	r3, [sp, #16]
 8008fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8008fa6:	b35b      	cbz	r3, 8009000 <__ieee754_pow+0x128>
 8008fa8:	9a02      	ldr	r2, [sp, #8]
 8008faa:	0ffb      	lsrs	r3, r7, #31
 8008fac:	3b01      	subs	r3, #1
 8008fae:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f000 8093 	beq.w	80090dc <__ieee754_pow+0x204>
 8008fb6:	4b50      	ldr	r3, [pc, #320]	; (80090f8 <__ieee754_pow+0x220>)
 8008fb8:	459b      	cmp	fp, r3
 8008fba:	f340 80a3 	ble.w	8009104 <__ieee754_pow+0x22c>
 8008fbe:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008fc2:	459b      	cmp	fp, r3
 8008fc4:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <__ieee754_pow+0x224>)
 8008fc6:	f340 841b 	ble.w	8009800 <__ieee754_pow+0x928>
 8008fca:	4599      	cmp	r9, r3
 8008fcc:	f340 8491 	ble.w	80098f2 <__ieee754_pow+0xa1a>
 8008fd0:	f1ba 0f00 	cmp.w	sl, #0
 8008fd4:	f340 8491 	ble.w	80098fa <__ieee754_pow+0xa22>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	b013      	add	sp, #76	; 0x4c
 8008fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	f000 bdee 	b.w	8009bc0 <__math_oflow>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d18d      	bne.n	8008f04 <__ieee754_pow+0x2c>
 8008fe8:	e7bb      	b.n	8008f62 <__ieee754_pow+0x8a>
 8008fea:	4640      	mov	r0, r8
 8008fec:	4631      	mov	r1, r6
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	f000 fdec 	bl	8009bcc <fabs>
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d16e      	bne.n	80090dc <__ieee754_pow+0x204>
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	f1b9 0f00 	cmp.w	r9, #0
 8009004:	d004      	beq.n	8009010 <__ieee754_pow+0x138>
 8009006:	4b3a      	ldr	r3, [pc, #232]	; (80090f0 <__ieee754_pow+0x218>)
 8009008:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 800900c:	429a      	cmp	r2, r3
 800900e:	d1cb      	bne.n	8008fa8 <__ieee754_pow+0xd0>
 8009010:	f1ba 0f00 	cmp.w	sl, #0
 8009014:	da07      	bge.n	8009026 <__ieee754_pow+0x14e>
 8009016:	e9dd 2300 	ldrd	r2, r3, [sp]
 800901a:	2000      	movs	r0, #0
 800901c:	4934      	ldr	r1, [pc, #208]	; (80090f0 <__ieee754_pow+0x218>)
 800901e:	f7f7 fb85 	bl	800072c <__aeabi_ddiv>
 8009022:	e9cd 0100 	strd	r0, r1, [sp]
 8009026:	2f00      	cmp	r7, #0
 8009028:	f6bf af74 	bge.w	8008f14 <__ieee754_pow+0x3c>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	f109 4940 	add.w	r9, r9, #3221225472	; 0xc0000000
 8009032:	f509 1980 	add.w	r9, r9, #1048576	; 0x100000
 8009036:	ea59 0303 	orrs.w	r3, r9, r3
 800903a:	f040 846e 	bne.w	800991a <__ieee754_pow+0xa42>
 800903e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	f7f7 f88f 	bl	8000168 <__aeabi_dsub>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	f7f7 fb6d 	bl	800072c <__aeabi_ddiv>
 8009052:	e9cd 0100 	strd	r0, r1, [sp]
 8009056:	e75d      	b.n	8008f14 <__ieee754_pow+0x3c>
 8009058:	4a29      	ldr	r2, [pc, #164]	; (8009100 <__ieee754_pow+0x228>)
 800905a:	4593      	cmp	fp, r2
 800905c:	dc2f      	bgt.n	80090be <__ieee754_pow+0x1e6>
 800905e:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8009062:	4593      	cmp	fp, r2
 8009064:	dd0f      	ble.n	8009086 <__ieee754_pow+0x1ae>
 8009066:	ea4f 522b 	mov.w	r2, fp, asr #20
 800906a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800906e:	2a14      	cmp	r2, #20
 8009070:	f340 8445 	ble.w	80098fe <__ieee754_pow+0xa26>
 8009074:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8009078:	fa21 f002 	lsr.w	r0, r1, r2
 800907c:	fa00 f202 	lsl.w	r2, r0, r2
 8009080:	428a      	cmp	r2, r1
 8009082:	f000 8477 	beq.w	8009974 <__ieee754_pow+0xa9c>
 8009086:	2200      	movs	r2, #0
 8009088:	9202      	str	r2, [sp, #8]
 800908a:	2900      	cmp	r1, #0
 800908c:	f43f af77 	beq.w	8008f7e <__ieee754_pow+0xa6>
 8009090:	e781      	b.n	8008f96 <__ieee754_pow+0xbe>
 8009092:	2900      	cmp	r1, #0
 8009094:	f43f af6a 	beq.w	8008f6c <__ieee754_pow+0x94>
 8009098:	e74a      	b.n	8008f30 <__ieee754_pow+0x58>
 800909a:	f109 4240 	add.w	r2, r9, #3221225472	; 0xc0000000
 800909e:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f43f af53 	beq.w	8008f4e <__ieee754_pow+0x76>
 80090a8:	4b14      	ldr	r3, [pc, #80]	; (80090fc <__ieee754_pow+0x224>)
 80090aa:	4599      	cmp	r9, r3
 80090ac:	f340 836d 	ble.w	800978a <__ieee754_pow+0x8b2>
 80090b0:	f1ba 0f00 	cmp.w	sl, #0
 80090b4:	f2c0 8363 	blt.w	800977e <__ieee754_pow+0x8a6>
 80090b8:	e9cd 4500 	strd	r4, r5, [sp]
 80090bc:	e72a      	b.n	8008f14 <__ieee754_pow+0x3c>
 80090be:	2202      	movs	r2, #2
 80090c0:	9202      	str	r2, [sp, #8]
 80090c2:	2900      	cmp	r1, #0
 80090c4:	f43f af57 	beq.w	8008f76 <__ieee754_pow+0x9e>
 80090c8:	e765      	b.n	8008f96 <__ieee754_pow+0xbe>
 80090ca:	f1ba 0f00 	cmp.w	sl, #0
 80090ce:	f2c0 83f4 	blt.w	80098ba <__ieee754_pow+0x9e2>
 80090d2:	4640      	mov	r0, r8
 80090d4:	4631      	mov	r1, r6
 80090d6:	e9cd 0100 	strd	r0, r1, [sp]
 80090da:	e71b      	b.n	8008f14 <__ieee754_pow+0x3c>
 80090dc:	4642      	mov	r2, r8
 80090de:	4640      	mov	r0, r8
 80090e0:	4633      	mov	r3, r6
 80090e2:	4631      	mov	r1, r6
 80090e4:	e7af      	b.n	8009046 <__ieee754_pow+0x16e>
 80090e6:	bf00      	nop
 80090e8:	fff00000 	.word	0xfff00000
 80090ec:	7ff00000 	.word	0x7ff00000
 80090f0:	3ff00000 	.word	0x3ff00000
 80090f4:	3fe00000 	.word	0x3fe00000
 80090f8:	41e00000 	.word	0x41e00000
 80090fc:	3fefffff 	.word	0x3fefffff
 8009100:	433fffff 	.word	0x433fffff
 8009104:	4bd4      	ldr	r3, [pc, #848]	; (8009458 <__ieee754_pow+0x580>)
 8009106:	403b      	ands	r3, r7
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 8347 	bne.w	800979c <__ieee754_pow+0x8c4>
 800910e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009112:	2200      	movs	r2, #0
 8009114:	4bd1      	ldr	r3, [pc, #836]	; (800945c <__ieee754_pow+0x584>)
 8009116:	f7f7 f9df 	bl	80004d8 <__aeabi_dmul>
 800911a:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800911e:	4689      	mov	r9, r1
 8009120:	e9cd 0100 	strd	r0, r1, [sp]
 8009124:	ea4f 5329 	mov.w	r3, r9, asr #20
 8009128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800912c:	189a      	adds	r2, r3, r2
 800912e:	4bcc      	ldr	r3, [pc, #816]	; (8009460 <__ieee754_pow+0x588>)
 8009130:	f3c9 0913 	ubfx	r9, r9, #0, #20
 8009134:	f049 567f 	orr.w	r6, r9, #1069547520	; 0x3fc00000
 8009138:	4599      	cmp	r9, r3
 800913a:	920b      	str	r2, [sp, #44]	; 0x2c
 800913c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009140:	dd07      	ble.n	8009152 <__ieee754_pow+0x27a>
 8009142:	4bc8      	ldr	r3, [pc, #800]	; (8009464 <__ieee754_pow+0x58c>)
 8009144:	4599      	cmp	r9, r3
 8009146:	f340 83f5 	ble.w	8009934 <__ieee754_pow+0xa5c>
 800914a:	3201      	adds	r2, #1
 800914c:	920b      	str	r2, [sp, #44]	; 0x2c
 800914e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8009152:	2200      	movs	r2, #0
 8009154:	2300      	movs	r3, #0
 8009156:	2000      	movs	r0, #0
 8009158:	2700      	movs	r7, #0
 800915a:	49c3      	ldr	r1, [pc, #780]	; (8009468 <__ieee754_pow+0x590>)
 800915c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009160:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009164:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800916c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009170:	4631      	mov	r1, r6
 8009172:	4682      	mov	sl, r0
 8009174:	f7f6 fff8 	bl	8000168 <__aeabi_dsub>
 8009178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800917c:	46b3      	mov	fp, r6
 800917e:	4680      	mov	r8, r0
 8009180:	4689      	mov	r9, r1
 8009182:	4650      	mov	r0, sl
 8009184:	4631      	mov	r1, r6
 8009186:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800918a:	f7f6 ffef 	bl	800016c <__adddf3>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	2000      	movs	r0, #0
 8009194:	49b4      	ldr	r1, [pc, #720]	; (8009468 <__ieee754_pow+0x590>)
 8009196:	f7f7 fac9 	bl	800072c <__aeabi_ddiv>
 800919a:	468c      	mov	ip, r1
 800919c:	4683      	mov	fp, r0
 800919e:	4663      	mov	r3, ip
 80091a0:	465a      	mov	r2, fp
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80091aa:	f7f7 f995 	bl	80004d8 <__aeabi_dmul>
 80091ae:	4682      	mov	sl, r0
 80091b0:	468b      	mov	fp, r1
 80091b2:	1073      	asrs	r3, r6, #1
 80091b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091b8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80091bc:	19d9      	adds	r1, r3, r7
 80091be:	460f      	mov	r7, r1
 80091c0:	465a      	mov	r2, fp
 80091c2:	4651      	mov	r1, sl
 80091c4:	2300      	movs	r3, #0
 80091c6:	2000      	movs	r0, #0
 80091c8:	e9cd 1200 	strd	r1, r2, [sp]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4606      	mov	r6, r0
 80091d0:	4602      	mov	r2, r0
 80091d2:	463b      	mov	r3, r7
 80091d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80091d8:	e9dd ab00 	ldrd	sl, fp, [sp]
 80091dc:	4650      	mov	r0, sl
 80091de:	4659      	mov	r1, fp
 80091e0:	f7f7 f97a 	bl	80004d8 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f6 ffbc 	bl	8000168 <__aeabi_dsub>
 80091f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f6 ffb4 	bl	8000168 <__aeabi_dsub>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009208:	f7f6 ffae 	bl	8000168 <__aeabi_dsub>
 800920c:	4652      	mov	r2, sl
 800920e:	465b      	mov	r3, fp
 8009210:	f7f7 f962 	bl	80004d8 <__aeabi_dmul>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f6 ffa4 	bl	8000168 <__aeabi_dsub>
 8009220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009224:	f7f7 f958 	bl	80004d8 <__aeabi_dmul>
 8009228:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800922c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009230:	4632      	mov	r2, r6
 8009232:	463b      	mov	r3, r7
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 f94e 	bl	80004d8 <__aeabi_dmul>
 800923c:	a374      	add	r3, pc, #464	; (adr r3, 8009410 <__ieee754_pow+0x538>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	f7f7 f947 	bl	80004d8 <__aeabi_dmul>
 800924a:	a373      	add	r3, pc, #460	; (adr r3, 8009418 <__ieee754_pow+0x540>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f6 ff8c 	bl	800016c <__adddf3>
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	a370      	add	r3, pc, #448	; (adr r3, 8009420 <__ieee754_pow+0x548>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f6 ff83 	bl	800016c <__adddf3>
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	f7f7 f935 	bl	80004d8 <__aeabi_dmul>
 800926e:	a36e      	add	r3, pc, #440	; (adr r3, 8009428 <__ieee754_pow+0x550>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f6 ff7a 	bl	800016c <__adddf3>
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	f7f7 f92c 	bl	80004d8 <__aeabi_dmul>
 8009280:	a36b      	add	r3, pc, #428	; (adr r3, 8009430 <__ieee754_pow+0x558>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f6 ff71 	bl	800016c <__adddf3>
 800928a:	4632      	mov	r2, r6
 800928c:	463b      	mov	r3, r7
 800928e:	f7f7 f923 	bl	80004d8 <__aeabi_dmul>
 8009292:	a369      	add	r3, pc, #420	; (adr r3, 8009438 <__ieee754_pow+0x560>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f6 ff68 	bl	800016c <__adddf3>
 800929c:	4632      	mov	r2, r6
 800929e:	4680      	mov	r8, r0
 80092a0:	4689      	mov	r9, r1
 80092a2:	463b      	mov	r3, r7
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 f916 	bl	80004d8 <__aeabi_dmul>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 f910 	bl	80004d8 <__aeabi_dmul>
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f6 ff52 	bl	800016c <__adddf3>
 80092c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092cc:	f7f7 f904 	bl	80004d8 <__aeabi_dmul>
 80092d0:	4632      	mov	r2, r6
 80092d2:	463b      	mov	r3, r7
 80092d4:	f7f6 ff4a 	bl	800016c <__adddf3>
 80092d8:	4652      	mov	r2, sl
 80092da:	4680      	mov	r8, r0
 80092dc:	4689      	mov	r9, r1
 80092de:	465b      	mov	r3, fp
 80092e0:	4650      	mov	r0, sl
 80092e2:	4659      	mov	r1, fp
 80092e4:	f7f7 f8f8 	bl	80004d8 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092f0:	2200      	movs	r2, #0
 80092f2:	4b5e      	ldr	r3, [pc, #376]	; (800946c <__ieee754_pow+0x594>)
 80092f4:	f7f6 ff3a 	bl	800016c <__adddf3>
 80092f8:	4642      	mov	r2, r8
 80092fa:	464b      	mov	r3, r9
 80092fc:	f7f6 ff36 	bl	800016c <__adddf3>
 8009300:	2600      	movs	r6, #0
 8009302:	460f      	mov	r7, r1
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	f7f7 f8e4 	bl	80004d8 <__aeabi_dmul>
 8009310:	2200      	movs	r2, #0
 8009312:	4682      	mov	sl, r0
 8009314:	468b      	mov	fp, r1
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	4b54      	ldr	r3, [pc, #336]	; (800946c <__ieee754_pow+0x594>)
 800931c:	f7f6 ff24 	bl	8000168 <__aeabi_dsub>
 8009320:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009324:	f7f6 ff20 	bl	8000168 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4640      	mov	r0, r8
 800932e:	4649      	mov	r1, r9
 8009330:	f7f6 ff1a 	bl	8000168 <__aeabi_dsub>
 8009334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009338:	f7f7 f8ce 	bl	80004d8 <__aeabi_dmul>
 800933c:	4632      	mov	r2, r6
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009346:	463b      	mov	r3, r7
 8009348:	f7f7 f8c6 	bl	80004d8 <__aeabi_dmul>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f6 ff0a 	bl	800016c <__adddf3>
 8009358:	4680      	mov	r8, r0
 800935a:	4689      	mov	r9, r1
 800935c:	2600      	movs	r6, #0
 800935e:	4642      	mov	r2, r8
 8009360:	464b      	mov	r3, r9
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f6 ff01 	bl	800016c <__adddf3>
 800936a:	a335      	add	r3, pc, #212	; (adr r3, 8009440 <__ieee754_pow+0x568>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	4630      	mov	r0, r6
 8009372:	460f      	mov	r7, r1
 8009374:	f7f7 f8b0 	bl	80004d8 <__aeabi_dmul>
 8009378:	4652      	mov	r2, sl
 800937a:	465b      	mov	r3, fp
 800937c:	4682      	mov	sl, r0
 800937e:	468b      	mov	fp, r1
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 fef0 	bl	8000168 <__aeabi_dsub>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f6 feea 	bl	8000168 <__aeabi_dsub>
 8009394:	a32c      	add	r3, pc, #176	; (adr r3, 8009448 <__ieee754_pow+0x570>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f7 f89d 	bl	80004d8 <__aeabi_dmul>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	4616      	mov	r6, r2
 80093a8:	461f      	mov	r7, r3
 80093aa:	a329      	add	r3, pc, #164	; (adr r3, 8009450 <__ieee754_pow+0x578>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f7 f892 	bl	80004d8 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f6 fed6 	bl	800016c <__adddf3>
 80093c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093c4:	f7f6 fed2 	bl	800016c <__adddf3>
 80093c8:	4606      	mov	r6, r0
 80093ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093cc:	460f      	mov	r7, r1
 80093ce:	f7f7 f819 	bl	8000404 <__aeabi_i2d>
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	4632      	mov	r2, r6
 80093d8:	463b      	mov	r3, r7
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80093e2:	f7f6 fec3 	bl	800016c <__adddf3>
 80093e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093ea:	f7f6 febf 	bl	800016c <__adddf3>
 80093ee:	f04f 0a00 	mov.w	sl, #0
 80093f2:	4642      	mov	r2, r8
 80093f4:	464b      	mov	r3, r9
 80093f6:	f7f6 feb9 	bl	800016c <__adddf3>
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	4650      	mov	r0, sl
 8009400:	468b      	mov	fp, r1
 8009402:	f7f6 feb1 	bl	8000168 <__aeabi_dsub>
 8009406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800940a:	f7f6 fead 	bl	8000168 <__aeabi_dsub>
 800940e:	e02f      	b.n	8009470 <__ieee754_pow+0x598>
 8009410:	4a454eef 	.word	0x4a454eef
 8009414:	3fca7e28 	.word	0x3fca7e28
 8009418:	93c9db65 	.word	0x93c9db65
 800941c:	3fcd864a 	.word	0x3fcd864a
 8009420:	a91d4101 	.word	0xa91d4101
 8009424:	3fd17460 	.word	0x3fd17460
 8009428:	518f264d 	.word	0x518f264d
 800942c:	3fd55555 	.word	0x3fd55555
 8009430:	db6fabff 	.word	0xdb6fabff
 8009434:	3fdb6db6 	.word	0x3fdb6db6
 8009438:	33333303 	.word	0x33333303
 800943c:	3fe33333 	.word	0x3fe33333
 8009440:	e0000000 	.word	0xe0000000
 8009444:	3feec709 	.word	0x3feec709
 8009448:	dc3a03fd 	.word	0xdc3a03fd
 800944c:	3feec709 	.word	0x3feec709
 8009450:	145b01f5 	.word	0x145b01f5
 8009454:	be3e2fe0 	.word	0xbe3e2fe0
 8009458:	7ff00000 	.word	0x7ff00000
 800945c:	43400000 	.word	0x43400000
 8009460:	0003988e 	.word	0x0003988e
 8009464:	000bb679 	.word	0x000bb679
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	40080000 	.word	0x40080000
 8009470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009474:	f7f6 fe78 	bl	8000168 <__aeabi_dsub>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f6 fe72 	bl	8000168 <__aeabi_dsub>
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009488:	3b01      	subs	r3, #1
 800948a:	4313      	orrs	r3, r2
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	bf0c      	ite	eq
 8009492:	4bd5      	ldreq	r3, [pc, #852]	; (80097e8 <__ieee754_pow+0x910>)
 8009494:	4bd5      	ldrne	r3, [pc, #852]	; (80097ec <__ieee754_pow+0x914>)
 8009496:	e9cd 4500 	strd	r4, r5, [sp]
 800949a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800949e:	2300      	movs	r3, #0
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	e9dd 8900 	ldrd	r8, r9, [sp]
 80094a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094aa:	4642      	mov	r2, r8
 80094ac:	464b      	mov	r3, r9
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7f6 fe59 	bl	8000168 <__aeabi_dsub>
 80094b6:	4652      	mov	r2, sl
 80094b8:	465b      	mov	r3, fp
 80094ba:	f7f7 f80d 	bl	80004d8 <__aeabi_dmul>
 80094be:	4622      	mov	r2, r4
 80094c0:	4606      	mov	r6, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c8:	462b      	mov	r3, r5
 80094ca:	f7f7 f805 	bl	80004d8 <__aeabi_dmul>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f6 fe49 	bl	800016c <__adddf3>
 80094da:	4642      	mov	r2, r8
 80094dc:	464b      	mov	r3, r9
 80094de:	4606      	mov	r6, r0
 80094e0:	460f      	mov	r7, r1
 80094e2:	4650      	mov	r0, sl
 80094e4:	4659      	mov	r1, fp
 80094e6:	f7f6 fff7 	bl	80004d8 <__aeabi_dmul>
 80094ea:	4604      	mov	r4, r0
 80094ec:	460d      	mov	r5, r1
 80094ee:	4630      	mov	r0, r6
 80094f0:	462b      	mov	r3, r5
 80094f2:	4639      	mov	r1, r7
 80094f4:	4622      	mov	r2, r4
 80094f6:	f7f6 fe39 	bl	800016c <__adddf3>
 80094fa:	4bbd      	ldr	r3, [pc, #756]	; (80097f0 <__ieee754_pow+0x918>)
 80094fc:	4680      	mov	r8, r0
 80094fe:	4299      	cmp	r1, r3
 8009500:	4689      	mov	r9, r1
 8009502:	468a      	mov	sl, r1
 8009504:	f340 8117 	ble.w	8009736 <__ieee754_pow+0x85e>
 8009508:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800950c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009510:	4303      	orrs	r3, r0
 8009512:	f040 8224 	bne.w	800995e <__ieee754_pow+0xa86>
 8009516:	a3a2      	add	r3, pc, #648	; (adr r3, 80097a0 <__ieee754_pow+0x8c8>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	4630      	mov	r0, r6
 800951e:	4639      	mov	r1, r7
 8009520:	f7f6 fe24 	bl	800016c <__adddf3>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4640      	mov	r0, r8
 800952a:	4649      	mov	r1, r9
 800952c:	4690      	mov	r8, r2
 800952e:	4699      	mov	r9, r3
 8009530:	4622      	mov	r2, r4
 8009532:	462b      	mov	r3, r5
 8009534:	f7f6 fe18 	bl	8000168 <__aeabi_dsub>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f7f7 fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8009544:	2800      	cmp	r0, #0
 8009546:	f040 820a 	bne.w	800995e <__ieee754_pow+0xa86>
 800954a:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800954e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009552:	2000      	movs	r0, #0
 8009554:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009558:	fa42 f303 	asr.w	r3, r2, r3
 800955c:	4453      	add	r3, sl
 800955e:	49a5      	ldr	r1, [pc, #660]	; (80097f4 <__ieee754_pow+0x91c>)
 8009560:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009564:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009568:	fa41 fc02 	asr.w	ip, r1, r2
 800956c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 8009570:	ea23 010c 	bic.w	r1, r3, ip
 8009574:	f1c2 0214 	rsb	r2, r2, #20
 8009578:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 800957c:	f1ba 0f00 	cmp.w	sl, #0
 8009580:	460b      	mov	r3, r1
 8009582:	fa4b fb02 	asr.w	fp, fp, r2
 8009586:	4629      	mov	r1, r5
 8009588:	4602      	mov	r2, r0
 800958a:	4620      	mov	r0, r4
 800958c:	bfb8      	it	lt
 800958e:	f1cb 0b00 	rsblt	fp, fp, #0
 8009592:	f7f6 fde9 	bl	8000168 <__aeabi_dsub>
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	4622      	mov	r2, r4
 80095a0:	462b      	mov	r3, r5
 80095a2:	f7f6 fde3 	bl	800016c <__adddf3>
 80095a6:	4689      	mov	r9, r1
 80095a8:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80095ac:	f04f 0800 	mov.w	r8, #0
 80095b0:	a37d      	add	r3, pc, #500	; (adr r3, 80097a8 <__ieee754_pow+0x8d0>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f6 ff8d 	bl	80004d8 <__aeabi_dmul>
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	4604      	mov	r4, r0
 80095c4:	460d      	mov	r5, r1
 80095c6:	4640      	mov	r0, r8
 80095c8:	4649      	mov	r1, r9
 80095ca:	f7f6 fdcd 	bl	8000168 <__aeabi_dsub>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f6 fdc7 	bl	8000168 <__aeabi_dsub>
 80095da:	a375      	add	r3, pc, #468	; (adr r3, 80097b0 <__ieee754_pow+0x8d8>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f6 ff7a 	bl	80004d8 <__aeabi_dmul>
 80095e4:	a374      	add	r3, pc, #464	; (adr r3, 80097b8 <__ieee754_pow+0x8e0>)
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	4606      	mov	r6, r0
 80095ec:	460f      	mov	r7, r1
 80095ee:	4640      	mov	r0, r8
 80095f0:	4649      	mov	r1, r9
 80095f2:	f7f6 ff71 	bl	80004d8 <__aeabi_dmul>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	f7f6 fdb5 	bl	800016c <__adddf3>
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	4642      	mov	r2, r8
 8009608:	464b      	mov	r3, r9
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f6 fdad 	bl	800016c <__adddf3>
 8009612:	4622      	mov	r2, r4
 8009614:	462b      	mov	r3, r5
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	f7f6 fda5 	bl	8000168 <__aeabi_dsub>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 fd9f 	bl	8000168 <__aeabi_dsub>
 800962a:	4632      	mov	r2, r6
 800962c:	4680      	mov	r8, r0
 800962e:	4689      	mov	r9, r1
 8009630:	463b      	mov	r3, r7
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 ff4f 	bl	80004d8 <__aeabi_dmul>
 800963a:	a361      	add	r3, pc, #388	; (adr r3, 80097c0 <__ieee754_pow+0x8e8>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	f7f6 ff48 	bl	80004d8 <__aeabi_dmul>
 8009648:	a35f      	add	r3, pc, #380	; (adr r3, 80097c8 <__ieee754_pow+0x8f0>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fd8b 	bl	8000168 <__aeabi_dsub>
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	f7f6 ff3f 	bl	80004d8 <__aeabi_dmul>
 800965a:	a35d      	add	r3, pc, #372	; (adr r3, 80097d0 <__ieee754_pow+0x8f8>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fd84 	bl	800016c <__adddf3>
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	f7f6 ff36 	bl	80004d8 <__aeabi_dmul>
 800966c:	a35a      	add	r3, pc, #360	; (adr r3, 80097d8 <__ieee754_pow+0x900>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f7f6 fd79 	bl	8000168 <__aeabi_dsub>
 8009676:	4622      	mov	r2, r4
 8009678:	462b      	mov	r3, r5
 800967a:	f7f6 ff2d 	bl	80004d8 <__aeabi_dmul>
 800967e:	a358      	add	r3, pc, #352	; (adr r3, 80097e0 <__ieee754_pow+0x908>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f7f6 fd72 	bl	800016c <__adddf3>
 8009688:	4622      	mov	r2, r4
 800968a:	462b      	mov	r3, r5
 800968c:	f7f6 ff24 	bl	80004d8 <__aeabi_dmul>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	f7f6 fd66 	bl	8000168 <__aeabi_dsub>
 800969c:	4604      	mov	r4, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f6 ff16 	bl	80004d8 <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	4614      	mov	r4, r2
 80096b6:	461d      	mov	r5, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096be:	f7f6 fd53 	bl	8000168 <__aeabi_dsub>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f82f 	bl	800072c <__aeabi_ddiv>
 80096ce:	4642      	mov	r2, r8
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	464b      	mov	r3, r9
 80096d6:	4630      	mov	r0, r6
 80096d8:	4639      	mov	r1, r7
 80096da:	f7f6 fefd 	bl	80004d8 <__aeabi_dmul>
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	f7f6 fd43 	bl	800016c <__adddf3>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f6 fd3b 	bl	8000168 <__aeabi_dsub>
 80096f2:	4632      	mov	r2, r6
 80096f4:	463b      	mov	r3, r7
 80096f6:	f7f6 fd37 	bl	8000168 <__aeabi_dsub>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	2000      	movs	r0, #0
 8009700:	493a      	ldr	r1, [pc, #232]	; (80097ec <__ieee754_pow+0x914>)
 8009702:	f7f6 fd31 	bl	8000168 <__aeabi_dsub>
 8009706:	448a      	add	sl, r1
 8009708:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 800970c:	f2c0 8123 	blt.w	8009956 <__ieee754_pow+0xa7e>
 8009710:	4651      	mov	r1, sl
 8009712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009716:	f7f6 fedf 	bl	80004d8 <__aeabi_dmul>
 800971a:	e9cd 0100 	strd	r0, r1, [sp]
 800971e:	f7ff bbf9 	b.w	8008f14 <__ieee754_pow+0x3c>
 8009722:	2f00      	cmp	r7, #0
 8009724:	f6ff ac37 	blt.w	8008f96 <__ieee754_pow+0xbe>
 8009728:	4640      	mov	r0, r8
 800972a:	4631      	mov	r1, r6
 800972c:	b013      	add	sp, #76	; 0x4c
 800972e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009732:	f000 b955 	b.w	80099e0 <__ieee754_sqrt>
 8009736:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80097f8 <__ieee754_pow+0x920>
 800973a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800973e:	4563      	cmp	r3, ip
 8009740:	f340 80cf 	ble.w	80098e2 <__ieee754_pow+0xa0a>
 8009744:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <__ieee754_pow+0x924>)
 8009746:	440b      	add	r3, r1
 8009748:	4303      	orrs	r3, r0
 800974a:	d10a      	bne.n	8009762 <__ieee754_pow+0x88a>
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	f7f6 fd0a 	bl	8000168 <__aeabi_dsub>
 8009754:	4632      	mov	r2, r6
 8009756:	463b      	mov	r3, r7
 8009758:	f7f7 f944 	bl	80009e4 <__aeabi_dcmpge>
 800975c:	2800      	cmp	r0, #0
 800975e:	f43f aef4 	beq.w	800954a <__ieee754_pow+0x672>
 8009762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	2300      	movs	r3, #0
 800976a:	f7f7 f927 	bl	80009bc <__aeabi_dcmplt>
 800976e:	3800      	subs	r0, #0
 8009770:	bf18      	it	ne
 8009772:	2001      	movne	r0, #1
 8009774:	b013      	add	sp, #76	; 0x4c
 8009776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	f000 ba1b 	b.w	8009bb4 <__math_uflow>
 800977e:	2300      	movs	r3, #0
 8009780:	2400      	movs	r4, #0
 8009782:	e9cd 3400 	strd	r3, r4, [sp]
 8009786:	f7ff bbc5 	b.w	8008f14 <__ieee754_pow+0x3c>
 800978a:	f1ba 0f00 	cmp.w	sl, #0
 800978e:	daf6      	bge.n	800977e <__ieee754_pow+0x8a6>
 8009790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009794:	9400      	str	r4, [sp, #0]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	f7ff bbbc 	b.w	8008f14 <__ieee754_pow+0x3c>
 800979c:	2200      	movs	r2, #0
 800979e:	e4c1      	b.n	8009124 <__ieee754_pow+0x24c>
 80097a0:	652b82fe 	.word	0x652b82fe
 80097a4:	3c971547 	.word	0x3c971547
 80097a8:	00000000 	.word	0x00000000
 80097ac:	3fe62e43 	.word	0x3fe62e43
 80097b0:	fefa39ef 	.word	0xfefa39ef
 80097b4:	3fe62e42 	.word	0x3fe62e42
 80097b8:	0ca86c39 	.word	0x0ca86c39
 80097bc:	be205c61 	.word	0xbe205c61
 80097c0:	72bea4d0 	.word	0x72bea4d0
 80097c4:	3e663769 	.word	0x3e663769
 80097c8:	c5d26bf1 	.word	0xc5d26bf1
 80097cc:	3ebbbd41 	.word	0x3ebbbd41
 80097d0:	af25de2c 	.word	0xaf25de2c
 80097d4:	3f11566a 	.word	0x3f11566a
 80097d8:	16bebd93 	.word	0x16bebd93
 80097dc:	3f66c16c 	.word	0x3f66c16c
 80097e0:	5555553e 	.word	0x5555553e
 80097e4:	3fc55555 	.word	0x3fc55555
 80097e8:	bff00000 	.word	0xbff00000
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	408fffff 	.word	0x408fffff
 80097f4:	000fffff 	.word	0x000fffff
 80097f8:	4090cbff 	.word	0x4090cbff
 80097fc:	3f6f3400 	.word	0x3f6f3400
 8009800:	4599      	cmp	r9, r3
 8009802:	db76      	blt.n	80098f2 <__ieee754_pow+0xa1a>
 8009804:	4b72      	ldr	r3, [pc, #456]	; (80099d0 <__ieee754_pow+0xaf8>)
 8009806:	4599      	cmp	r9, r3
 8009808:	f73f abe2 	bgt.w	8008fd0 <__ieee754_pow+0xf8>
 800980c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009810:	2200      	movs	r2, #0
 8009812:	4b6f      	ldr	r3, [pc, #444]	; (80099d0 <__ieee754_pow+0xaf8>)
 8009814:	f7f6 fca8 	bl	8000168 <__aeabi_dsub>
 8009818:	a361      	add	r3, pc, #388	; (adr r3, 80099a0 <__ieee754_pow+0xac8>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	4606      	mov	r6, r0
 8009820:	460f      	mov	r7, r1
 8009822:	f7f6 fe59 	bl	80004d8 <__aeabi_dmul>
 8009826:	a360      	add	r3, pc, #384	; (adr r3, 80099a8 <__ieee754_pow+0xad0>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	4682      	mov	sl, r0
 800982e:	468b      	mov	fp, r1
 8009830:	4630      	mov	r0, r6
 8009832:	4639      	mov	r1, r7
 8009834:	f7f6 fe50 	bl	80004d8 <__aeabi_dmul>
 8009838:	2200      	movs	r2, #0
 800983a:	e9cd 0100 	strd	r0, r1, [sp]
 800983e:	4b65      	ldr	r3, [pc, #404]	; (80099d4 <__ieee754_pow+0xafc>)
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fe48 	bl	80004d8 <__aeabi_dmul>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	a158      	add	r1, pc, #352	; (adr r1, 80099b0 <__ieee754_pow+0xad8>)
 800984e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009852:	f7f6 fc89 	bl	8000168 <__aeabi_dsub>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 fe3d 	bl	80004d8 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	2000      	movs	r0, #0
 8009864:	495c      	ldr	r1, [pc, #368]	; (80099d8 <__ieee754_pow+0xb00>)
 8009866:	f7f6 fc7f 	bl	8000168 <__aeabi_dsub>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	4680      	mov	r8, r0
 8009870:	4689      	mov	r9, r1
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f6 fe2f 	bl	80004d8 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f6 fe29 	bl	80004d8 <__aeabi_dmul>
 8009886:	a34c      	add	r3, pc, #304	; (adr r3, 80099b8 <__ieee754_pow+0xae0>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f7f6 fe24 	bl	80004d8 <__aeabi_dmul>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009898:	f7f6 fc66 	bl	8000168 <__aeabi_dsub>
 800989c:	4606      	mov	r6, r0
 800989e:	460f      	mov	r7, r1
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	4632      	mov	r2, r6
 80098a6:	463b      	mov	r3, r7
 80098a8:	f7f6 fc60 	bl	800016c <__adddf3>
 80098ac:	4652      	mov	r2, sl
 80098ae:	f04f 0a00 	mov.w	sl, #0
 80098b2:	465b      	mov	r3, fp
 80098b4:	4650      	mov	r0, sl
 80098b6:	468b      	mov	fp, r1
 80098b8:	e5dc      	b.n	8009474 <__ieee754_pow+0x59c>
 80098ba:	4642      	mov	r2, r8
 80098bc:	2000      	movs	r0, #0
 80098be:	4633      	mov	r3, r6
 80098c0:	4943      	ldr	r1, [pc, #268]	; (80099d0 <__ieee754_pow+0xaf8>)
 80098c2:	f7f6 ff33 	bl	800072c <__aeabi_ddiv>
 80098c6:	e9cd 0100 	strd	r0, r1, [sp]
 80098ca:	f7ff bb23 	b.w	8008f14 <__ieee754_pow+0x3c>
 80098ce:	4642      	mov	r2, r8
 80098d0:	4640      	mov	r0, r8
 80098d2:	4633      	mov	r3, r6
 80098d4:	4631      	mov	r1, r6
 80098d6:	f7f6 fdff 	bl	80004d8 <__aeabi_dmul>
 80098da:	e9cd 0100 	strd	r0, r1, [sp]
 80098de:	f7ff bb19 	b.w	8008f14 <__ieee754_pow+0x3c>
 80098e2:	4a3d      	ldr	r2, [pc, #244]	; (80099d8 <__ieee754_pow+0xb00>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	dc56      	bgt.n	8009996 <__ieee754_pow+0xabe>
 80098e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098ec:	4692      	mov	sl, r2
 80098ee:	4693      	mov	fp, r2
 80098f0:	e65c      	b.n	80095ac <__ieee754_pow+0x6d4>
 80098f2:	f1ba 0f00 	cmp.w	sl, #0
 80098f6:	f6ff ab6f 	blt.w	8008fd8 <__ieee754_pow+0x100>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e73a      	b.n	8009774 <__ieee754_pow+0x89c>
 80098fe:	2900      	cmp	r1, #0
 8009900:	f47f ab73 	bne.w	8008fea <__ieee754_pow+0x112>
 8009904:	f1c2 0214 	rsb	r2, r2, #20
 8009908:	fa4b f002 	asr.w	r0, fp, r2
 800990c:	fa00 f202 	lsl.w	r2, r0, r2
 8009910:	455a      	cmp	r2, fp
 8009912:	d039      	beq.n	8009988 <__ieee754_pow+0xab0>
 8009914:	9102      	str	r1, [sp, #8]
 8009916:	f7ff bb32 	b.w	8008f7e <__ieee754_pow+0xa6>
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	2b01      	cmp	r3, #1
 800991e:	f47f aaf9 	bne.w	8008f14 <__ieee754_pow+0x3c>
 8009922:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009926:	4622      	mov	r2, r4
 8009928:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800992c:	e9cd 2300 	strd	r2, r3, [sp]
 8009930:	f7ff baf0 	b.w	8008f14 <__ieee754_pow+0x3c>
 8009934:	2200      	movs	r2, #0
 8009936:	4b29      	ldr	r3, [pc, #164]	; (80099dc <__ieee754_pow+0xb04>)
 8009938:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800993c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009940:	a31f      	add	r3, pc, #124	; (adr r3, 80099c0 <__ieee754_pow+0xae8>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800994a:	a31f      	add	r3, pc, #124	; (adr r3, 80099c8 <__ieee754_pow+0xaf0>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009954:	e408      	b.n	8009168 <__ieee754_pow+0x290>
 8009956:	465a      	mov	r2, fp
 8009958:	f000 f942 	bl	8009be0 <scalbn>
 800995c:	e6d9      	b.n	8009712 <__ieee754_pow+0x83a>
 800995e:	2200      	movs	r2, #0
 8009960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009964:	2300      	movs	r3, #0
 8009966:	f7f7 f829 	bl	80009bc <__aeabi_dcmplt>
 800996a:	3800      	subs	r0, #0
 800996c:	bf18      	it	ne
 800996e:	2001      	movne	r0, #1
 8009970:	f7ff bb33 	b.w	8008fda <__ieee754_pow+0x102>
 8009974:	f000 0001 	and.w	r0, r0, #1
 8009978:	f1c0 0202 	rsb	r2, r0, #2
 800997c:	9202      	str	r2, [sp, #8]
 800997e:	2900      	cmp	r1, #0
 8009980:	f43f aafd 	beq.w	8008f7e <__ieee754_pow+0xa6>
 8009984:	f7ff bb07 	b.w	8008f96 <__ieee754_pow+0xbe>
 8009988:	f000 0001 	and.w	r0, r0, #1
 800998c:	f1c0 0202 	rsb	r2, r0, #2
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	f7ff baf4 	b.w	8008f7e <__ieee754_pow+0xa6>
 8009996:	151b      	asrs	r3, r3, #20
 8009998:	e5d9      	b.n	800954e <__ieee754_pow+0x676>
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w
 80099a0:	60000000 	.word	0x60000000
 80099a4:	3ff71547 	.word	0x3ff71547
 80099a8:	f85ddf44 	.word	0xf85ddf44
 80099ac:	3e54ae0b 	.word	0x3e54ae0b
 80099b0:	55555555 	.word	0x55555555
 80099b4:	3fd55555 	.word	0x3fd55555
 80099b8:	652b82fe 	.word	0x652b82fe
 80099bc:	3ff71547 	.word	0x3ff71547
 80099c0:	40000000 	.word	0x40000000
 80099c4:	3fe2b803 	.word	0x3fe2b803
 80099c8:	43cfd006 	.word	0x43cfd006
 80099cc:	3e4cfdeb 	.word	0x3e4cfdeb
 80099d0:	3ff00000 	.word	0x3ff00000
 80099d4:	3fd00000 	.word	0x3fd00000
 80099d8:	3fe00000 	.word	0x3fe00000
 80099dc:	3ff80000 	.word	0x3ff80000

080099e0 <__ieee754_sqrt>:
 80099e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	4e60      	ldr	r6, [pc, #384]	; (8009b68 <__ieee754_sqrt+0x188>)
 80099e6:	4605      	mov	r5, r0
 80099e8:	ea36 0201 	bics.w	r2, r6, r1
 80099ec:	460c      	mov	r4, r1
 80099ee:	f000 809e 	beq.w	8009b2e <__ieee754_sqrt+0x14e>
 80099f2:	2900      	cmp	r1, #0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4684      	mov	ip, r0
 80099f8:	dd54      	ble.n	8009aa4 <__ieee754_sqrt+0xc4>
 80099fa:	1509      	asrs	r1, r1, #20
 80099fc:	d062      	beq.n	8009ac4 <__ieee754_sqrt+0xe4>
 80099fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a02:	07c8      	lsls	r0, r1, #31
 8009a04:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a0c:	d404      	bmi.n	8009a18 <__ieee754_sqrt+0x38>
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8009a14:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8009a18:	2600      	movs	r6, #0
 8009a1a:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8009a1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009a22:	f04f 0e16 	mov.w	lr, #22
 8009a26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009a2a:	4634      	mov	r4, r6
 8009a2c:	107f      	asrs	r7, r7, #1
 8009a2e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8009a32:	18a1      	adds	r1, r4, r2
 8009a34:	4299      	cmp	r1, r3
 8009a36:	dc02      	bgt.n	8009a3e <__ieee754_sqrt+0x5e>
 8009a38:	1a5b      	subs	r3, r3, r1
 8009a3a:	188c      	adds	r4, r1, r2
 8009a3c:	4416      	add	r6, r2
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	f1be 0e01 	subs.w	lr, lr, #1
 8009a44:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8009a48:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a4c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8009a50:	d1ef      	bne.n	8009a32 <__ieee754_sqrt+0x52>
 8009a52:	4675      	mov	r5, lr
 8009a54:	2020      	movs	r0, #32
 8009a56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a5a:	e00a      	b.n	8009a72 <__ieee754_sqrt+0x92>
 8009a5c:	d043      	beq.n	8009ae6 <__ieee754_sqrt+0x106>
 8009a5e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8009a62:	3801      	subs	r0, #1
 8009a64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009a68:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8009a6c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a70:	d042      	beq.n	8009af8 <__ieee754_sqrt+0x118>
 8009a72:	42a3      	cmp	r3, r4
 8009a74:	eb02 010e 	add.w	r1, r2, lr
 8009a78:	ddf0      	ble.n	8009a5c <__ieee754_sqrt+0x7c>
 8009a7a:	2900      	cmp	r1, #0
 8009a7c:	eb01 0e02 	add.w	lr, r1, r2
 8009a80:	db0a      	blt.n	8009a98 <__ieee754_sqrt+0xb8>
 8009a82:	46a0      	mov	r8, r4
 8009a84:	1b1b      	subs	r3, r3, r4
 8009a86:	4561      	cmp	r1, ip
 8009a88:	bf88      	it	hi
 8009a8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009a8e:	4644      	mov	r4, r8
 8009a90:	ebac 0c01 	sub.w	ip, ip, r1
 8009a94:	4415      	add	r5, r2
 8009a96:	e7e2      	b.n	8009a5e <__ieee754_sqrt+0x7e>
 8009a98:	f1be 0f00 	cmp.w	lr, #0
 8009a9c:	dbf1      	blt.n	8009a82 <__ieee754_sqrt+0xa2>
 8009a9e:	f104 0801 	add.w	r8, r4, #1
 8009aa2:	e7ef      	b.n	8009a84 <__ieee754_sqrt+0xa4>
 8009aa4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009aa8:	4302      	orrs	r2, r0
 8009aaa:	d036      	beq.n	8009b1a <__ieee754_sqrt+0x13a>
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d14c      	bne.n	8009b4a <__ieee754_sqrt+0x16a>
 8009ab0:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	3915      	subs	r1, #21
 8009ab8:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	d0f7      	beq.n	8009ab0 <__ieee754_sqrt+0xd0>
 8009ac0:	02d6      	lsls	r6, r2, #11
 8009ac2:	d44c      	bmi.n	8009b5e <__ieee754_sqrt+0x17e>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	02dd      	lsls	r5, r3, #11
 8009aca:	4604      	mov	r4, r0
 8009acc:	f100 0001 	add.w	r0, r0, #1
 8009ad0:	d5f9      	bpl.n	8009ac6 <__ieee754_sqrt+0xe6>
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4663      	mov	r3, ip
 8009ad6:	fa0c fc00 	lsl.w	ip, ip, r0
 8009ada:	f1c0 0020 	rsb	r0, r0, #32
 8009ade:	40c3      	lsrs	r3, r0
 8009ae0:	1b09      	subs	r1, r1, r4
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	e78b      	b.n	80099fe <__ieee754_sqrt+0x1e>
 8009ae6:	4561      	cmp	r1, ip
 8009ae8:	d8b9      	bhi.n	8009a5e <__ieee754_sqrt+0x7e>
 8009aea:	2900      	cmp	r1, #0
 8009aec:	eb01 0e02 	add.w	lr, r1, r2
 8009af0:	dbd2      	blt.n	8009a98 <__ieee754_sqrt+0xb8>
 8009af2:	4698      	mov	r8, r3
 8009af4:	2300      	movs	r3, #0
 8009af6:	e7ca      	b.n	8009a8e <__ieee754_sqrt+0xae>
 8009af8:	ea53 030c 	orrs.w	r3, r3, ip
 8009afc:	d111      	bne.n	8009b22 <__ieee754_sqrt+0x142>
 8009afe:	0868      	lsrs	r0, r5, #1
 8009b00:	1073      	asrs	r3, r6, #1
 8009b02:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009b06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009b0a:	07f2      	lsls	r2, r6, #31
 8009b0c:	bf48      	it	mi
 8009b0e:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8009b12:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 8009b16:	4605      	mov	r5, r0
 8009b18:	464c      	mov	r4, r9
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b22:	1c69      	adds	r1, r5, #1
 8009b24:	bf16      	itet	ne
 8009b26:	1c68      	addne	r0, r5, #1
 8009b28:	3601      	addeq	r6, #1
 8009b2a:	0840      	lsrne	r0, r0, #1
 8009b2c:	e7e8      	b.n	8009b00 <__ieee754_sqrt+0x120>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	f7f6 fcd1 	bl	80004d8 <__aeabi_dmul>
 8009b36:	462a      	mov	r2, r5
 8009b38:	4623      	mov	r3, r4
 8009b3a:	f7f6 fb17 	bl	800016c <__adddf3>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	460c      	mov	r4, r1
 8009b42:	4628      	mov	r0, r5
 8009b44:	4621      	mov	r1, r4
 8009b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	f7f6 fb0c 	bl	8000168 <__aeabi_dsub>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	f7f6 fdea 	bl	800072c <__aeabi_ddiv>
 8009b58:	4605      	mov	r5, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	e7dd      	b.n	8009b1a <__ieee754_sqrt+0x13a>
 8009b5e:	4663      	mov	r3, ip
 8009b60:	2020      	movs	r0, #32
 8009b62:	f04f 34ff 	mov.w	r4, #4294967295
 8009b66:	e7ba      	b.n	8009ade <__ieee754_sqrt+0xfe>
 8009b68:	7ff00000 	.word	0x7ff00000

08009b6c <with_errno>:
 8009b6c:	b5d0      	push	{r4, r6, r7, lr}
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	4614      	mov	r4, r2
 8009b74:	f7fa fc64 	bl	8004440 <__errno>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	601c      	str	r4, [r3, #0]
 8009b80:	bdd0      	pop	{r4, r6, r7, pc}
 8009b82:	bf00      	nop

08009b84 <xflow>:
 8009b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b86:	4619      	mov	r1, r3
 8009b88:	b083      	sub	sp, #12
 8009b8a:	b180      	cbz	r0, 8009bae <xflow+0x2a>
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8009b92:	4616      	mov	r6, r2
 8009b94:	e9cd 4500 	strd	r4, r5, [sp]
 8009b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7f6 fc9b 	bl	80004d8 <__aeabi_dmul>
 8009ba2:	2222      	movs	r2, #34	; 0x22
 8009ba4:	b003      	add	sp, #12
 8009ba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009baa:	f7ff bfdf 	b.w	8009b6c <with_errno>
 8009bae:	4614      	mov	r4, r2
 8009bb0:	461d      	mov	r5, r3
 8009bb2:	e7ee      	b.n	8009b92 <xflow+0xe>

08009bb4 <__math_uflow>:
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bba:	f7ff bfe3 	b.w	8009b84 <xflow>
 8009bbe:	bf00      	nop

08009bc0 <__math_oflow>:
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009bc6:	f7ff bfdd 	b.w	8009b84 <xflow>
 8009bca:	bf00      	nop

08009bcc <fabs>:
 8009bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop

08009bd4 <finite>:
 8009bd4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009bd8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009bdc:	0fc0      	lsrs	r0, r0, #31
 8009bde:	4770      	bx	lr

08009be0 <scalbn>:
 8009be0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	468c      	mov	ip, r1
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	4616      	mov	r6, r2
 8009bee:	bb7b      	cbnz	r3, 8009c50 <scalbn+0x70>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009bf6:	ea5c 0303 	orrs.w	r3, ip, r3
 8009bfa:	d028      	beq.n	8009c4e <scalbn+0x6e>
 8009bfc:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <scalbn+0xe8>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f7f6 fc6a 	bl	80004d8 <__aeabi_dmul>
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <scalbn+0xec>)
 8009c06:	4604      	mov	r4, r0
 8009c08:	429e      	cmp	r6, r3
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	db1a      	blt.n	8009c44 <scalbn+0x64>
 8009c0e:	468c      	mov	ip, r1
 8009c10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c14:	3b36      	subs	r3, #54	; 0x36
 8009c16:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009c1a:	4433      	add	r3, r6
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	dc20      	bgt.n	8009c62 <scalbn+0x82>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dc3e      	bgt.n	8009ca2 <scalbn+0xc2>
 8009c24:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8009c28:	da2c      	bge.n	8009c84 <scalbn+0xa4>
 8009c2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c2e:	429e      	cmp	r6, r3
 8009c30:	dc17      	bgt.n	8009c62 <scalbn+0x82>
 8009c32:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009c36:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 8009c3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009c3e:	4824      	ldr	r0, [pc, #144]	; (8009cd0 <scalbn+0xf0>)
 8009c40:	f041 011f 	orr.w	r1, r1, #31
 8009c44:	a31c      	add	r3, pc, #112	; (adr r3, 8009cb8 <scalbn+0xd8>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fc45 	bl	80004d8 <__aeabi_dmul>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	f240 7eff 	movw	lr, #2047	; 0x7ff
 8009c54:	4573      	cmp	r3, lr
 8009c56:	d1de      	bne.n	8009c16 <scalbn+0x36>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	f7f6 fa86 	bl	800016c <__adddf3>
 8009c60:	bd70      	pop	{r4, r5, r6, pc}
 8009c62:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009c66:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 8009c6a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009c6e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009c72:	a313      	add	r3, pc, #76	; (adr r3, 8009cc0 <scalbn+0xe0>)
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	4816      	ldr	r0, [pc, #88]	; (8009cd4 <scalbn+0xf4>)
 8009c7a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009c7e:	f7f6 fc2b 	bl	80004d8 <__aeabi_dmul>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8009c88:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8009c8c:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8009c90:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 8009c94:	2200      	movs	r2, #0
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <scalbn+0xf8>)
 8009c9c:	f7f6 fc1c 	bl	80004d8 <__aeabi_dmul>
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8009ca6:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8009caa:	4620      	mov	r0, r4
 8009cac:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	bf00      	nop
 8009cb4:	f3af 8000 	nop.w
 8009cb8:	c2f8f359 	.word	0xc2f8f359
 8009cbc:	01a56e1f 	.word	0x01a56e1f
 8009cc0:	8800759c 	.word	0x8800759c
 8009cc4:	7e37e43c 	.word	0x7e37e43c
 8009cc8:	43500000 	.word	0x43500000
 8009ccc:	ffff3cb0 	.word	0xffff3cb0
 8009cd0:	c2f8f359 	.word	0xc2f8f359
 8009cd4:	8800759c 	.word	0x8800759c
 8009cd8:	3c900000 	.word	0x3c900000

08009cdc <_init>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr

08009ce8 <_fini>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr
