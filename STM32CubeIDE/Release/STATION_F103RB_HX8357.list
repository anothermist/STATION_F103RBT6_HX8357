
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d450  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ddc  0800d560  0800d560  0001d560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f33c  0801f33c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801f33c  0801f33c  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f33c  0801f33c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f33c  0801f33c  0002f33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f340  0801f340  0002f340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801f344  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001e0  0801f524  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0801f524  00030980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002172d  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dc  00000000  00000000  00051936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001bbb9  00000000  00000000  00053a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0006f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000092f0  00000000  00000000  0006f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012042  00000000  00000000  00078910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091251  00000000  00000000  0008a952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0011bba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd4  00000000  00000000  0011bbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c1d  00000000  00000000  0011dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d548 	.word	0x0800d548

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d548 	.word	0x0800d548

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000200 	.word	0x20000200

08000164 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000164:	4918      	ldr	r1, [pc, #96]	; (80001c8 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x64>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000166:	b430      	push	{r4, r5}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000168:	684c      	ldr	r4, [r1, #4]
 800016a:	6963      	ldr	r3, [r4, #20]
 800016c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8000170:	d127      	bne.n	80001c2 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000172:	6962      	ldr	r2, [r4, #20]
 8000174:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8000178:	d111      	bne.n	800019e <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x3a>
  return uwTick;
 800017a:	680b      	ldr	r3, [r1, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800017c:	1a1b      	subs	r3, r3, r0
 800017e:	2b64      	cmp	r3, #100	; 0x64
 8000180:	d9f3      	bls.n	800016a <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8000182:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000184:	634a      	str	r2, [r1, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8000186:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800018a:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800018e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000190:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000192:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8000196:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800019a:	644b      	str	r3, [r1, #68]	; 0x44
 800019c:	e00f      	b.n	80001be <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800019e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80001a0:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      return HAL_ERROR;
 80001a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80001a6:	6165      	str	r5, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80001a8:	634b      	str	r3, [r1, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80001aa:	f881 2041 	strb.w	r2, [r1, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80001ae:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80001b2:	6c4a      	ldr	r2, [r1, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80001b4:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80001b8:	f042 0204 	orr.w	r2, r2, #4
 80001bc:	644a      	str	r2, [r1, #68]	; 0x44
}
 80001be:	bc30      	pop	{r4, r5}
 80001c0:	4770      	bx	lr
  return HAL_OK;
 80001c2:	2000      	movs	r0, #0
 80001c4:	e7fb      	b.n	80001be <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
 80001c6:	bf00      	nop
 80001c8:	20000200 	.word	0x20000200

080001cc <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80001cc:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80001ce:	bf14      	ite	ne
 80001d0:	2202      	movne	r2, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d2:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 80001d6:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80001d8:	0441      	lsls	r1, r0, #17
 80001da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001dc:	bf4c      	ite	mi
 80001de:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e0:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80001e4:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <LCD_Bus+0xe8>)
 80001e6:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80001e8:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 80001ea:	bf4c      	ite	mi
 80001ec:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ee:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80001f2:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <LCD_Bus+0xec>)
 80001f4:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80001f6:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <LCD_Bus+0xec>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000202:	0501      	lsls	r1, r0, #20
 8000204:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000206:	bf4c      	ite	mi
 8000208:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800020a:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 800020e:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <LCD_Bus+0xec>)
 8000210:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000212:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000214:	bf4c      	ite	mi
 8000216:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000218:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800021c:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <LCD_Bus+0xec>)
 800021e:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000220:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000222:	bf4c      	ite	mi
 8000224:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000228:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 800022c:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <LCD_Bus+0xec>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800022e:	05c1      	lsls	r1, r0, #23
 8000230:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000232:	bf4c      	ite	mi
 8000234:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000238:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <LCD_Bus+0xec>)
 800023e:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000240:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000242:	bf4c      	ite	mi
 8000244:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000246:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800024a:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <LCD_Bus+0xe8>)
 800024c:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800024e:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 8000250:	bf4c      	ite	mi
 8000252:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000254:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000258:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800025a:	0681      	lsls	r1, r0, #26
 800025c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800025e:	bf4c      	ite	mi
 8000260:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000262:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <LCD_Bus+0xe8>)
 8000268:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800026a:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 800026c:	bf4c      	ite	mi
 800026e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000270:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <LCD_Bus+0xe8>)
 8000276:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000278:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 800027a:	bf4c      	ite	mi
 800027c:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800027e:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000284:	0741      	lsls	r1, r0, #29
 8000286:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000288:	bf4c      	ite	mi
 800028a:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800028c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LCD_Bus+0xe8>)
 8000292:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000294:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000296:	bf4c      	ite	mi
 8000298:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800029a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LCD_Bus+0xec>)
 80002a0:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002a2:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	bf4c      	ite	mi
 80002a6:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a8:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <LCD_Bus+0xec>)
 80002ae:	611a      	str	r2, [r3, #16]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40011000 	.word	0x40011000

080002bc <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 80002bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80002c4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80002c8:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80002cc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80002d0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80002d4:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80002d8:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <LCD_Send_Cmd+0xb4>)
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <LCD_Send_Cmd+0xb8>)
 80002e0:	4f25      	ldr	r7, [pc, #148]	; (8000378 <LCD_Send_Cmd+0xbc>)
 80002e2:	6139      	str	r1, [r7, #16]
 80002e4:	f8c7 8010 	str.w	r8, [r7, #16]
 80002e8:	6116      	str	r6, [r2, #16]
 80002ea:	6111      	str	r1, [r2, #16]
 80002ec:	611c      	str	r4, [r3, #16]
 80002ee:	611d      	str	r5, [r3, #16]
 80002f0:	611e      	str	r6, [r3, #16]
 80002f2:	6119      	str	r1, [r3, #16]
 80002f4:	f8c3 e010 	str.w	lr, [r3, #16]
 80002f8:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	6115      	str	r5, [r2, #16]
 8000300:	6114      	str	r4, [r2, #16]
 8000302:	d02e      	beq.n	8000362 <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 8000304:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000306:	0903      	lsrs	r3, r0, #4
 8000308:	2b02      	cmp	r3, #2
 800030a:	6111      	str	r1, [r2, #16]
 800030c:	d12c      	bne.n	8000368 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000312:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000314:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000316:	bf4c      	ite	mi
 8000318:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000320:	0741      	lsls	r1, r0, #29
 8000322:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000324:	bf4c      	ite	mi
 8000326:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000328:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 800032e:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000330:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000332:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000334:	bf4c      	ite	mi
 8000336:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000338:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <LCD_Send_Cmd+0xb4>)
 800033e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000340:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000342:	bf4c      	ite	mi
 8000344:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000346:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <LCD_Send_Cmd+0xb4>)
 800034c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000350:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000352:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <LCD_Send_Cmd+0xbc>)
 8000358:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800035a:	6119      	str	r1, [r3, #16]
 800035c:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 800035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000362:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000366:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000368:	2220      	movs	r2, #32
 800036a:	4b02      	ldr	r3, [pc, #8]	; (8000374 <LCD_Send_Cmd+0xb8>)
 800036c:	611a      	str	r2, [r3, #16]
  }
}
 800036e:	e7d1      	b.n	8000314 <LCD_Send_Cmd+0x58>
 8000370:	40011000 	.word	0x40011000
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000380:	2101      	movs	r1, #1
 8000382:	4b3f      	ldr	r3, [pc, #252]	; (8000480 <LCD_Send_Dat+0x104>)
 8000384:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000386:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000388:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800038a:	bf14      	ite	ne
 800038c:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038e:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 8000392:	4b3c      	ldr	r3, [pc, #240]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000394:	0441      	lsls	r1, r0, #17
 8000396:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000398:	bf4c      	ite	mi
 800039a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <LCD_Send_Dat+0x108>)
 80003a2:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80003a4:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 80003a6:	bf4c      	ite	mi
 80003a8:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003aa:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80003ae:	4b36      	ldr	r3, [pc, #216]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003b0:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80003b2:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 80003b4:	bf4c      	ite	mi
 80003b6:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003b8:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80003be:	0501      	lsls	r1, r0, #20
 80003c0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003c2:	bf4c      	ite	mi
 80003c4:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003c6:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003cc:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80003ce:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	bf4c      	ite	mi
 80003d2:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003d4:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003da:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80003dc:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80003de:	bf4c      	ite	mi
 80003e0:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e4:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80003ea:	05c1      	lsls	r1, r0, #23
 80003ec:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003ee:	bf4c      	ite	mi
 80003f0:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f4:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003fa:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003fc:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80003fe:	bf4c      	ite	mi
 8000400:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000402:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <LCD_Send_Dat+0x108>)
 8000408:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800040a:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 800040c:	bf4c      	ite	mi
 800040e:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000410:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000416:	0681      	lsls	r1, r0, #26
 8000418:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800041a:	bf4c      	ite	mi
 800041c:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800041e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <LCD_Send_Dat+0x108>)
 8000424:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000426:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 8000428:	bf4c      	ite	mi
 800042a:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800042c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <LCD_Send_Dat+0x108>)
 8000432:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000434:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000436:	bf4c      	ite	mi
 8000438:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800043a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000440:	0741      	lsls	r1, r0, #29
 8000442:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000444:	bf4c      	ite	mi
 8000446:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000448:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 800044e:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000450:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000452:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000454:	bf4c      	ite	mi
 8000456:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000458:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <LCD_Send_Dat+0x10c>)
 800045e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000460:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000462:	bf4c      	ite	mi
 8000464:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000466:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <LCD_Send_Dat+0x10c>)
 800046c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000470:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000472:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000476:	4b02      	ldr	r3, [pc, #8]	; (8000480 <LCD_Send_Dat+0x104>)
 8000478:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800047a:	6119      	str	r1, [r3, #16]
 800047c:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 800047e:	4770      	bx	lr
 8000480:	40010c00 	.word	0x40010c00
 8000484:	40010800 	.word	0x40010800
 8000488:	40011000 	.word	0x40011000

0800048c <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 800048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000490:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000494:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8000498:	468b      	mov	fp, r1
 800049a:	49ab      	ldr	r1, [pc, #684]	; (8000748 <LCD_Window+0x2bc>)
 800049c:	b085      	sub	sp, #20
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80004a4:	610d      	str	r5, [r1, #16]
 80004a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80004aa:	610c      	str	r4, [r1, #16]
 80004ac:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004b0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80004b4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80004b8:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004bc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80004c0:	4ba2      	ldr	r3, [pc, #648]	; (800074c <LCD_Window+0x2c0>)
 80004c2:	4696      	mov	lr, r2
 80004c4:	4aa2      	ldr	r2, [pc, #648]	; (8000750 <LCD_Window+0x2c4>)
 80004c6:	6116      	str	r6, [r2, #16]
 80004c8:	6115      	str	r5, [r2, #16]
 80004ca:	f8c3 c010 	str.w	ip, [r3, #16]
 80004ce:	611f      	str	r7, [r3, #16]
 80004d0:	611e      	str	r6, [r3, #16]
 80004d2:	611d      	str	r5, [r3, #16]
 80004d4:	f8c3 9010 	str.w	r9, [r3, #16]
 80004d8:	f8c3 a010 	str.w	sl, [r3, #16]
 80004dc:	6117      	str	r7, [r2, #16]
 80004de:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004e2:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e6:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004e8:	2440      	movs	r4, #64	; 0x40
 80004ea:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ec:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80004f0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004f2:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004fa:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004fe:	611c      	str	r4, [r3, #16]
 8000500:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000502:	f8c1 8010 	str.w	r8, [r1, #16]
 8000506:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800050a:	f8c1 8010 	str.w	r8, [r1, #16]
 800050e:	f04f 0801 	mov.w	r8, #1
 8000512:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000516:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800051a:	f8c1 8010 	str.w	r8, [r1, #16]
 800051e:	6116      	str	r6, [r2, #16]
 8000520:	6115      	str	r5, [r2, #16]
 8000522:	f8c3 c010 	str.w	ip, [r3, #16]
 8000526:	611f      	str	r7, [r3, #16]
 8000528:	611e      	str	r6, [r3, #16]
 800052a:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 800052c:	fa5f f58e 	uxtb.w	r5, lr
 8000530:	f8c3 9010 	str.w	r9, [r3, #16]
 8000534:	f8c3 a010 	str.w	sl, [r3, #16]
 8000538:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800053a:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800053c:	bf18      	it	ne
 800053e:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000540:	ea4f 2410 	mov.w	r4, r0, lsr #8
 8000544:	bf14      	ite	ne
 8000546:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000548:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800054a:	0667      	lsls	r7, r4, #25
 800054c:	bf54      	ite	pl
 800054e:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000552:	2508      	movmi	r5, #8
 8000554:	4a7e      	ldr	r2, [pc, #504]	; (8000750 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 8000556:	4621      	mov	r1, r4
 8000558:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800055a:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055c:	bf54      	ite	pl
 800055e:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000562:	2510      	movmi	r5, #16
 8000564:	4a7a      	ldr	r2, [pc, #488]	; (8000750 <LCD_Window+0x2c4>)
 8000566:	f04f 0a02 	mov.w	sl, #2
 800056a:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800056c:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056e:	bf54      	ite	pl
 8000570:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000574:	2520      	movmi	r5, #32
 8000576:	4a76      	ldr	r2, [pc, #472]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000578:	0727      	lsls	r7, r4, #28
 800057a:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057c:	bf54      	ite	pl
 800057e:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000582:	2540      	movmi	r5, #64	; 0x40
 8000584:	4a72      	ldr	r2, [pc, #456]	; (8000750 <LCD_Window+0x2c4>)
 8000586:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800058a:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800058c:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800058e:	bf54      	ite	pl
 8000590:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000594:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000596:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000598:	bf54      	ite	pl
 800059a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800059e:	2410      	movmi	r4, #16
 80005a0:	4a6b      	ldr	r2, [pc, #428]	; (8000750 <LCD_Window+0x2c4>)
 80005a2:	f04f 0801 	mov.w	r8, #1
 80005a6:	6115      	str	r5, [r2, #16]
 80005a8:	4a68      	ldr	r2, [pc, #416]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005aa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80005ae:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005b0:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b2:	bf54      	ite	pl
 80005b4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005b8:	2120      	movmi	r1, #32
 80005ba:	4a64      	ldr	r2, [pc, #400]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005bc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 80005c0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005c2:	4961      	ldr	r1, [pc, #388]	; (8000748 <LCD_Window+0x2bc>)
 80005c4:	4a61      	ldr	r2, [pc, #388]	; (800074c <LCD_Window+0x2c0>)
 80005c6:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80005c8:	f8c1 a010 	str.w	sl, [r1, #16]
 80005cc:	f8c1 9010 	str.w	r9, [r1, #16]
 80005d0:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005d4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80005d8:	f8c1 8010 	str.w	r8, [r1, #16]
 80005dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80005e0:	4c5b      	ldr	r4, [pc, #364]	; (8000750 <LCD_Window+0x2c4>)
 80005e2:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 80005e6:	6125      	str	r5, [r4, #16]
 80005e8:	6127      	str	r7, [r4, #16]
 80005ea:	6111      	str	r1, [r2, #16]
 80005ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80005f0:	f8c2 c010 	str.w	ip, [r2, #16]
 80005f4:	6115      	str	r5, [r2, #16]
 80005f6:	6117      	str	r7, [r2, #16]
 80005f8:	6111      	str	r1, [r2, #16]
 80005fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 80005fe:	b2c6      	uxtb	r6, r0
 8000600:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000602:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 8000604:	bf16      	itet	ne
 8000606:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000608:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800060c:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800060e:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000610:	bf54      	ite	pl
 8000612:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000616:	2108      	movmi	r1, #8
 8000618:	4a4d      	ldr	r2, [pc, #308]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800061a:	0685      	lsls	r5, r0, #26
 800061c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800061e:	bf54      	ite	pl
 8000620:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000624:	2110      	movmi	r1, #16
 8000626:	4a4a      	ldr	r2, [pc, #296]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000628:	06c4      	lsls	r4, r0, #27
 800062a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800062c:	bf54      	ite	pl
 800062e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000632:	2120      	movmi	r1, #32
 8000634:	4a46      	ldr	r2, [pc, #280]	; (8000750 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000636:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800063a:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800063c:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800063e:	bf54      	ite	pl
 8000640:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000644:	2140      	movmi	r1, #64	; 0x40
 8000646:	4a42      	ldr	r2, [pc, #264]	; (8000750 <LCD_Window+0x2c4>)
 8000648:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800064c:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800064e:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000650:	bf54      	ite	pl
 8000652:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000656:	2180      	movmi	r1, #128	; 0x80
 8000658:	4a3d      	ldr	r2, [pc, #244]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800065a:	0787      	lsls	r7, r0, #30
 800065c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065e:	bf54      	ite	pl
 8000660:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000664:	2110      	movmi	r1, #16
 8000666:	4a39      	ldr	r2, [pc, #228]	; (800074c <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000668:	07f5      	lsls	r5, r6, #31
 800066a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066c:	bf54      	ite	pl
 800066e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000672:	2120      	movmi	r1, #32
 8000674:	2702      	movs	r7, #2
 8000676:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067a:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800067e:	4a33      	ldr	r2, [pc, #204]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000680:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000684:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000686:	4930      	ldr	r1, [pc, #192]	; (8000748 <LCD_Window+0x2bc>)
 8000688:	4a30      	ldr	r2, [pc, #192]	; (800074c <LCD_Window+0x2c0>)
 800068a:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800068c:	610f      	str	r7, [r1, #16]
 800068e:	f8c1 a010 	str.w	sl, [r1, #16]
 8000692:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000696:	f8c1 8010 	str.w	r8, [r1, #16]
 800069a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800069e:	482c      	ldr	r0, [pc, #176]	; (8000750 <LCD_Window+0x2c4>)
 80006a0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006a4:	6104      	str	r4, [r0, #16]
 80006a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006aa:	6105      	str	r5, [r0, #16]
 80006ac:	6111      	str	r1, [r2, #16]
 80006ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80006b2:	6116      	str	r6, [r2, #16]
 80006b4:	6114      	str	r4, [r2, #16]
 80006b6:	6115      	str	r5, [r2, #16]
 80006b8:	f8c2 c010 	str.w	ip, [r2, #16]
 80006bc:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80006be:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80006c2:	bf18      	it	ne
 80006c4:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 80006c6:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ca:	bf0c      	ite	eq
 80006cc:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80006ce:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80006d0:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d2:	bf54      	ite	pl
 80006d4:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006d8:	2108      	movmi	r1, #8
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80006dc:	0698      	lsls	r0, r3, #26
 80006de:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e0:	bf54      	ite	pl
 80006e2:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	2110      	movmi	r1, #16
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80006ee:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80006f0:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f2:	bf54      	ite	pl
 80006f4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80006f8:	2120      	movmi	r1, #32
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <LCD_Window+0x2c4>)
 80006fc:	f04f 0a02 	mov.w	sl, #2
 8000700:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000702:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000704:	bf54      	ite	pl
 8000706:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800070a:	2140      	movmi	r1, #64	; 0x40
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800070e:	075f      	lsls	r7, r3, #29
 8000710:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000712:	bf54      	ite	pl
 8000714:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000718:	2180      	movmi	r1, #128	; 0x80
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800071c:	079e      	lsls	r6, r3, #30
 800071e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000720:	bf54      	ite	pl
 8000722:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000726:	2210      	movmi	r2, #16
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LCD_Window+0x2c0>)
 800072a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800072e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000730:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8000734:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000738:	bf0c      	ite	eq
 800073a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800073e:	2220      	movne	r2, #32
 8000740:	f04f 0801 	mov.w	r8, #1
 8000744:	e006      	b.n	8000754 <LCD_Window+0x2c8>
 8000746:	bf00      	nop
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800
 8000754:	4bac      	ldr	r3, [pc, #688]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000756:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800075a:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800075c:	4aab      	ldr	r2, [pc, #684]	; (8000a0c <LCD_Window+0x580>)
 800075e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000762:	6110      	str	r0, [r2, #16]
 8000764:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000768:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800076c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000770:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000774:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000778:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800077c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000780:	4ba1      	ldr	r3, [pc, #644]	; (8000a08 <LCD_Window+0x57c>)
 8000782:	49a3      	ldr	r1, [pc, #652]	; (8000a10 <LCD_Window+0x584>)
 8000784:	f8c2 8010 	str.w	r8, [r2, #16]
 8000788:	6108      	str	r0, [r1, #16]
 800078a:	610c      	str	r4, [r1, #16]
 800078c:	f8c3 c010 	str.w	ip, [r3, #16]
 8000790:	611d      	str	r5, [r3, #16]
 8000792:	6118      	str	r0, [r3, #16]
 8000794:	611c      	str	r4, [r3, #16]
 8000796:	611f      	str	r7, [r3, #16]
 8000798:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800079a:	fa5f f38e 	uxtb.w	r3, lr
 800079e:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80007a0:	bf16      	itet	ne
 80007a2:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a4:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007a6:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80007a8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80007ac:	bf14      	ite	ne
 80007ae:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007b4:	4b96      	ldr	r3, [pc, #600]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80007b6:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ba:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007bc:	bf14      	ite	ne
 80007be:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c0:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007c4:	4b92      	ldr	r3, [pc, #584]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80007c6:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ca:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007cc:	bf14      	ite	ne
 80007ce:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007d4:	4b8e      	ldr	r3, [pc, #568]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80007d6:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007dc:	bf14      	ite	ne
 80007de:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e0:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80007e4:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80007e6:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ea:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007ec:	bf14      	ite	ne
 80007ee:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f0:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007f6:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007fa:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007fc:	bf14      	ite	ne
 80007fe:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000800:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000804:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <LCD_Window+0x57c>)
 8000806:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800080a:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800080c:	9b02      	ldr	r3, [sp, #8]
 800080e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000812:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000814:	bf4c      	ite	mi
 8000816:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000818:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800081c:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000820:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000824:	f04f 0802 	mov.w	r8, #2
 8000828:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800082c:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 8000830:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8000834:	4b74      	ldr	r3, [pc, #464]	; (8000a08 <LCD_Window+0x57c>)
 8000836:	4975      	ldr	r1, [pc, #468]	; (8000a0c <LCD_Window+0x580>)
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <LCD_Window+0x57c>)
 800083c:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <LCD_Window+0x584>)
 800083e:	6108      	str	r0, [r1, #16]
 8000840:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000844:	f8c1 8010 	str.w	r8, [r1, #16]
 8000848:	f04f 0910 	mov.w	r9, #16
 800084c:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000850:	610c      	str	r4, [r1, #16]
 8000852:	f8c1 c010 	str.w	ip, [r1, #16]
 8000856:	6110      	str	r0, [r2, #16]
 8000858:	6114      	str	r4, [r2, #16]
 800085a:	611d      	str	r5, [r3, #16]
 800085c:	611e      	str	r6, [r3, #16]
 800085e:	6118      	str	r0, [r3, #16]
 8000860:	611c      	str	r4, [r3, #16]
 8000862:	611f      	str	r7, [r3, #16]
 8000864:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000868:	f8c3 a010 	str.w	sl, [r3, #16]
 800086c:	6116      	str	r6, [r2, #16]
 800086e:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000870:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000874:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000876:	2740      	movs	r7, #64	; 0x40
 8000878:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800087a:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 800087e:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000880:	2720      	movs	r7, #32
 8000882:	f8c3 9010 	str.w	r9, [r3, #16]
 8000886:	611f      	str	r7, [r3, #16]
 8000888:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800088c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000890:	f8c1 e010 	str.w	lr, [r1, #16]
 8000894:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000896:	f8c1 c010 	str.w	ip, [r1, #16]
 800089a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800089e:	6110      	str	r0, [r2, #16]
 80008a0:	6114      	str	r4, [r2, #16]
 80008a2:	611d      	str	r5, [r3, #16]
 80008a4:	611e      	str	r6, [r3, #16]
 80008a6:	6118      	str	r0, [r3, #16]
 80008a8:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 80008aa:	9c01      	ldr	r4, [sp, #4]
 80008ac:	6119      	str	r1, [r3, #16]
 80008ae:	f8c3 a010 	str.w	sl, [r3, #16]
 80008b2:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 80008b4:	b2e4      	uxtb	r4, r4
 80008b6:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80008b8:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80008bc:	bf18      	it	ne
 80008be:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 80008c0:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	bf14      	ite	ne
 80008c8:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ca:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80008cc:	064c      	lsls	r4, r1, #25
 80008ce:	bf54      	ite	pl
 80008d0:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80008d4:	2408      	movmi	r4, #8
 80008d6:	4a4e      	ldr	r2, [pc, #312]	; (8000a10 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 80008d8:	4608      	mov	r0, r1
 80008da:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80008dc:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008de:	bf54      	ite	pl
 80008e0:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80008e4:	2410      	movmi	r4, #16
 80008e6:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80008e8:	06cf      	lsls	r7, r1, #27
 80008ea:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ec:	bf54      	ite	pl
 80008ee:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008f2:	2420      	movmi	r4, #32
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80008f6:	070e      	lsls	r6, r1, #28
 80008f8:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008fa:	bf54      	ite	pl
 80008fc:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000900:	2440      	movmi	r4, #64	; 0x40
 8000902:	4a43      	ldr	r2, [pc, #268]	; (8000a10 <LCD_Window+0x584>)
 8000904:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000908:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800090a:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800090c:	bf54      	ite	pl
 800090e:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000912:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000914:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000916:	bf54      	ite	pl
 8000918:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800091c:	2110      	movmi	r1, #16
 800091e:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <LCD_Window+0x584>)
 8000920:	f04f 0901 	mov.w	r9, #1
 8000924:	6114      	str	r4, [r2, #16]
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000928:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800092c:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800092e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000930:	bf54      	ite	pl
 8000932:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000936:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000938:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800093c:	f04f 0c02 	mov.w	ip, #2
 8000940:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000942:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000946:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000948:	4930      	ldr	r1, [pc, #192]	; (8000a0c <LCD_Window+0x580>)
 800094a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800094e:	610c      	str	r4, [r1, #16]
 8000950:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000954:	f8c1 c010 	str.w	ip, [r1, #16]
 8000958:	f8c1 a010 	str.w	sl, [r1, #16]
 800095c:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000960:	f8c1 8010 	str.w	r8, [r1, #16]
 8000964:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <LCD_Window+0x57c>)
 800096a:	4829      	ldr	r0, [pc, #164]	; (8000a10 <LCD_Window+0x584>)
  data[1] = y1;
 800096c:	fa5f f58b 	uxtb.w	r5, fp
 8000970:	6104      	str	r4, [r0, #16]
 8000972:	6106      	str	r6, [r0, #16]
 8000974:	f8c2 e010 	str.w	lr, [r2, #16]
 8000978:	6117      	str	r7, [r2, #16]
 800097a:	6114      	str	r4, [r2, #16]
 800097c:	6116      	str	r6, [r2, #16]
 800097e:	6111      	str	r1, [r2, #16]
 8000980:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000984:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000986:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000988:	bf16      	itet	ne
 800098a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098c:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 800098e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000990:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000994:	bf0c      	ite	eq
 8000996:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800099a:	2108      	movne	r1, #8
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800099e:	f01b 0f20 	tst.w	fp, #32
 80009a2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a4:	bf0c      	ite	eq
 80009a6:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80009aa:	2110      	movne	r1, #16
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80009ae:	f01b 0f10 	tst.w	fp, #16
 80009b2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b4:	bf0c      	ite	eq
 80009b6:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80009ba:	2120      	movne	r1, #32
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80009be:	f01b 0f08 	tst.w	fp, #8
 80009c2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c4:	bf0c      	ite	eq
 80009c6:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80009ca:	2140      	movne	r1, #64	; 0x40
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80009ce:	f01b 0f04 	tst.w	fp, #4
 80009d2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d4:	bf0c      	ite	eq
 80009d6:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80009da:	2180      	movne	r1, #128	; 0x80
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80009de:	f01b 0f02 	tst.w	fp, #2
 80009e2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e4:	bf0c      	ite	eq
 80009e6:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	2110      	movne	r1, #16
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80009ee:	07ef      	lsls	r7, r5, #31
 80009f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f2:	bf54      	ite	pl
 80009f4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80009f8:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fa:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80009fe:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000a02:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000a06:	e005      	b.n	8000a14 <LCD_Window+0x588>
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40010800 	.word	0x40010800
 8000a14:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000a18:	f04f 0b02 	mov.w	fp, #2
 8000a1c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000a20:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a24:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000a28:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000a2c:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000a30:	4a7d      	ldr	r2, [pc, #500]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a32:	487e      	ldr	r0, [pc, #504]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000a34:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a36:	497e      	ldr	r1, [pc, #504]	; (8000c30 <LCD_Window+0x7a4>)
 8000a38:	4a7b      	ldr	r2, [pc, #492]	; (8000c28 <LCD_Window+0x79c>)
 8000a3a:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a3c:	f8c1 b010 	str.w	fp, [r1, #16]
 8000a40:	f8c1 a010 	str.w	sl, [r1, #16]
 8000a44:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a48:	f8c1 8010 	str.w	r8, [r1, #16]
 8000a4c:	6104      	str	r4, [r0, #16]
 8000a4e:	6105      	str	r5, [r0, #16]
 8000a50:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a54:	6116      	str	r6, [r2, #16]
 8000a56:	6114      	str	r4, [r2, #16]
 8000a58:	6115      	str	r5, [r2, #16]
 8000a5a:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a5e:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000a60:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a62:	f04f 0a02 	mov.w	sl, #2
 8000a66:	0bd2      	lsrs	r2, r2, #15
 8000a68:	bf16      	itet	ne
 8000a6a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a6e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000a70:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a72:	bf54      	ite	pl
 8000a74:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000a78:	2108      	movmi	r1, #8
 8000a7a:	4a6c      	ldr	r2, [pc, #432]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000a7c:	069d      	lsls	r5, r3, #26
 8000a7e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	bf54      	ite	pl
 8000a82:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a86:	2110      	movmi	r1, #16
 8000a88:	4a68      	ldr	r2, [pc, #416]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a8a:	06dc      	lsls	r4, r3, #27
 8000a8c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8e:	bf54      	ite	pl
 8000a90:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a94:	2120      	movmi	r1, #32
 8000a96:	4a65      	ldr	r2, [pc, #404]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a98:	0718      	lsls	r0, r3, #28
 8000a9a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9c:	bf54      	ite	pl
 8000a9e:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000aa2:	2140      	movmi	r1, #64	; 0x40
 8000aa4:	4a61      	ldr	r2, [pc, #388]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000aaa:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000aac:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aae:	bf54      	ite	pl
 8000ab0:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000ab4:	2180      	movmi	r1, #128	; 0x80
 8000ab6:	4a5d      	ldr	r2, [pc, #372]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ab8:	079b      	lsls	r3, r3, #30
 8000aba:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000abc:	bf54      	ite	pl
 8000abe:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	2210      	movmi	r2, #16
 8000ac4:	4b58      	ldr	r3, [pc, #352]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ac6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000aca:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000acc:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ace:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000ad2:	07df      	lsls	r7, r3, #31
 8000ad4:	bf54      	ite	pl
 8000ad6:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ada:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000adc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000ae0:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000ae4:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ae8:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000aec:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000af0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000af4:	4b4c      	ldr	r3, [pc, #304]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af6:	494d      	ldr	r1, [pc, #308]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000af8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afa:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <LCD_Window+0x7a4>)
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <LCD_Window+0x79c>)
 8000afe:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b00:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b04:	f8c2 9010 	str.w	r9, [r2, #16]
 8000b08:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b0c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000b10:	6108      	str	r0, [r1, #16]
 8000b12:	610c      	str	r4, [r1, #16]
 8000b14:	f8c3 c010 	str.w	ip, [r3, #16]
 8000b18:	611d      	str	r5, [r3, #16]
 8000b1a:	6118      	str	r0, [r3, #16]
 8000b1c:	611c      	str	r4, [r3, #16]
 8000b1e:	611f      	str	r7, [r3, #16]
 8000b20:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000b22:	9b02      	ldr	r3, [sp, #8]
 8000b24:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b28:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	bf1c      	itt	ne
 8000b2c:	2304      	movne	r3, #4
 8000b2e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000b30:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	bf08      	it	eq
 8000b34:	610d      	streq	r5, [r1, #16]
 8000b36:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8000b38:	bf4c      	ite	mi
 8000b3a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b3c:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000b42:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b44:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000b4c:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	bf4c      	ite	mi
 8000b50:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b52:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000b58:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5c:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000b5e:	9b01      	ldr	r3, [sp, #4]
 8000b60:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000b64:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	bf4c      	ite	mi
 8000b68:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <LCD_Window+0x7a0>)
 8000b70:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000b74:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000b7c:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	bf4c      	ite	mi
 8000b80:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <LCD_Window+0x7a0>)
 8000b88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b8c:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000b8e:	9b01      	ldr	r3, [sp, #4]
 8000b90:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b94:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000b96:	bf4c      	ite	mi
 8000b98:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <LCD_Window+0x7a0>)
 8000ba0:	4922      	ldr	r1, [pc, #136]	; (8000c2c <LCD_Window+0x7a0>)
 8000ba2:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ba4:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000ba6:	f04f 0910 	mov.w	r9, #16
 8000baa:	079a      	lsls	r2, r3, #30
 8000bac:	bf4c      	ite	mi
 8000bae:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bba:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000bbc:	9b02      	ldr	r3, [sp, #8]
 8000bbe:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000bc0:	bf4c      	ite	mi
 8000bc2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <LCD_Window+0x79c>)
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <LCD_Window+0x7a4>)
 8000bd2:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bd4:	611e      	str	r6, [r3, #16]
 8000bd6:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd8:	611c      	str	r4, [r3, #16]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000be0:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000be4:	6108      	str	r0, [r1, #16]
 8000be6:	610c      	str	r4, [r1, #16]
 8000be8:	f8c2 c010 	str.w	ip, [r2, #16]
 8000bec:	f8c2 e010 	str.w	lr, [r2, #16]
 8000bf0:	6110      	str	r0, [r2, #16]
 8000bf2:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bf4:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf6:	f8c2 b010 	str.w	fp, [r2, #16]
 8000bfa:	f8c2 a010 	str.w	sl, [r2, #16]
 8000bfe:	f8c1 e010 	str.w	lr, [r1, #16]
 8000c02:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0a:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c0c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000c10:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c12:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000c16:	6111      	str	r1, [r2, #16]
 8000c18:	6117      	str	r7, [r2, #16]
 8000c1a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c1c:	611e      	str	r6, [r3, #16]
 8000c1e:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000c20:	b005      	add	sp, #20
 8000c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c38:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000c3c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000c40:	4caf      	ldr	r4, [pc, #700]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000c42:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000c46:	6125      	str	r5, [r4, #16]
 8000c48:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c4c:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c50:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c54:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000c58:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000c5c:	4681      	mov	r9, r0
 8000c5e:	4696      	mov	lr, r2
 8000c60:	48a8      	ldr	r0, [pc, #672]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000c62:	4aa9      	ldr	r2, [pc, #676]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000c64:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c66:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c6a:	6105      	str	r5, [r0, #16]
 8000c6c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000c70:	6117      	str	r7, [r2, #16]
 8000c72:	6116      	str	r6, [r2, #16]
 8000c74:	6115      	str	r5, [r2, #16]
 8000c76:	f8c2 8010 	str.w	r8, [r2, #16]
 8000c7a:	f8c2 a010 	str.w	sl, [r2, #16]
 8000c7e:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000c82:	6107      	str	r7, [r0, #16]
 8000c84:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c88:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c90:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000c94:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c98:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000c9c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ca0:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca4:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ca8:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cac:	f8c2 a010 	str.w	sl, [r2, #16]
 8000cb0:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	f8c4 b010 	str.w	fp, [r4, #16]
 8000cb6:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	f8c4 b010 	str.w	fp, [r4, #16]
 8000cc2:	f04f 0b01 	mov.w	fp, #1
 8000cc6:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cca:	f8c4 a010 	str.w	sl, [r4, #16]
 8000cce:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000cd2:	6106      	str	r6, [r0, #16]
 8000cd4:	6105      	str	r5, [r0, #16]
 8000cd6:	f8c2 c010 	str.w	ip, [r2, #16]
 8000cda:	6117      	str	r7, [r2, #16]
 8000cdc:	6116      	str	r6, [r2, #16]
 8000cde:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000ce0:	1e4d      	subs	r5, r1, #1
 8000ce2:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000ce4:	fb03 f30e 	mul.w	r3, r3, lr
 8000ce8:	f8c2 8010 	str.w	r8, [r2, #16]
 8000cec:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cf0:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000cf4:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cf6:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000cf8:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cfa:	b293      	uxth	r3, r2
 8000cfc:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000cfe:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000d02:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000d04:	b2ed      	uxtb	r5, r5
 8000d06:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d08:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	bf18      	it	ne
 8000d0c:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000d0e:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000d12:	9204      	str	r2, [sp, #16]
 8000d14:	bf14      	ite	ne
 8000d16:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d18:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d1a:	0667      	lsls	r7, r4, #25
 8000d1c:	bf54      	ite	pl
 8000d1e:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d22:	2508      	movmi	r5, #8
 8000d24:	4877      	ldr	r0, [pc, #476]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000d26:	4626      	mov	r6, r4
 8000d28:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d2a:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2c:	bf54      	ite	pl
 8000d2e:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d32:	2510      	movmi	r5, #16
 8000d34:	4873      	ldr	r0, [pc, #460]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000d36:	f04f 0b02 	mov.w	fp, #2
 8000d3a:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d3c:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	bf54      	ite	pl
 8000d40:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	2520      	movmi	r5, #32
 8000d46:	486f      	ldr	r0, [pc, #444]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d48:	0727      	lsls	r7, r4, #28
 8000d4a:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	bf54      	ite	pl
 8000d4e:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	2540      	movmi	r5, #64	; 0x40
 8000d54:	486b      	ldr	r0, [pc, #428]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000d56:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d5a:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d5c:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5e:	bf54      	ite	pl
 8000d60:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d64:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d66:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d68:	bf54      	ite	pl
 8000d6a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	2410      	movmi	r4, #16
 8000d70:	4864      	ldr	r0, [pc, #400]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d72:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000d76:	6105      	str	r5, [r0, #16]
 8000d78:	4863      	ldr	r0, [pc, #396]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000d7e:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000d80:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	bf54      	ite	pl
 8000d84:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d88:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d8e:	485e      	ldr	r0, [pc, #376]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d90:	4d5c      	ldr	r5, [pc, #368]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d94:	4c5a      	ldr	r4, [pc, #360]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000d96:	485c      	ldr	r0, [pc, #368]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000d98:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d9a:	f8c4 b010 	str.w	fp, [r4, #16]
 8000d9e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000da2:	f04f 0a01 	mov.w	sl, #1
 8000da6:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000daa:	f8c4 8010 	str.w	r8, [r4, #16]
 8000dae:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000db2:	612e      	str	r6, [r5, #16]
 8000db4:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000db8:	612f      	str	r7, [r5, #16]
 8000dba:	6104      	str	r4, [r0, #16]
 8000dbc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000dc0:	f8c0 e010 	str.w	lr, [r0, #16]
 8000dc4:	6106      	str	r6, [r0, #16]
 8000dc6:	6107      	str	r7, [r0, #16]
 8000dc8:	6104      	str	r4, [r0, #16]
 8000dca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000dce:	fa5f fc81 	uxtb.w	ip, r1
 8000dd2:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000dd4:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000dd8:	bf16      	itet	ne
 8000dda:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ddc:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000de0:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000de2:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de4:	bf54      	ite	pl
 8000de6:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000dea:	2408      	movmi	r4, #8
 8000dec:	4845      	ldr	r0, [pc, #276]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000dee:	068e      	lsls	r6, r1, #26
 8000df0:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df2:	bf54      	ite	pl
 8000df4:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000df8:	2410      	movmi	r4, #16
 8000dfa:	4842      	ldr	r0, [pc, #264]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000dfc:	06cd      	lsls	r5, r1, #27
 8000dfe:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e00:	bf54      	ite	pl
 8000e02:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	2420      	movmi	r4, #32
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e10:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e12:	bf54      	ite	pl
 8000e14:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000e18:	2440      	movmi	r4, #64	; 0x40
 8000e1a:	483a      	ldr	r0, [pc, #232]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000e1c:	f04f 0b02 	mov.w	fp, #2
 8000e20:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e22:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	bf54      	ite	pl
 8000e26:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	2480      	movmi	r4, #128	; 0x80
 8000e2c:	4835      	ldr	r0, [pc, #212]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e2e:	078f      	lsls	r7, r1, #30
 8000e30:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	bf54      	ite	pl
 8000e34:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000e38:	2010      	movmi	r0, #16
 8000e3a:	4933      	ldr	r1, [pc, #204]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e3c:	f01c 0f01 	tst.w	ip, #1
 8000e40:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e42:	bf0c      	ite	eq
 8000e44:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000e48:	2020      	movne	r0, #32
 8000e4a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000e4e:	492e      	ldr	r1, [pc, #184]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e50:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	482a      	ldr	r0, [pc, #168]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000e58:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000e5c:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e5e:	f8c0 b010 	str.w	fp, [r0, #16]
 8000e62:	f8c0 a010 	str.w	sl, [r0, #16]
 8000e66:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e72:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000e76:	f8c0 8010 	str.w	r8, [r0, #16]
 8000e7a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000e7e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e82:	4921      	ldr	r1, [pc, #132]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000e84:	4c1f      	ldr	r4, [pc, #124]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8a:	6125      	str	r5, [r4, #16]
 8000e8c:	6126      	str	r6, [r4, #16]
 8000e8e:	f8c1 e010 	str.w	lr, [r1, #16]
 8000e92:	610f      	str	r7, [r1, #16]
 8000e94:	610d      	str	r5, [r1, #16]
 8000e96:	610e      	str	r6, [r1, #16]
 8000e98:	6108      	str	r0, [r1, #16]
 8000e9a:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e9e:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000ea0:	bf16      	itet	ne
 8000ea2:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea4:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000ea8:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eaa:	bf54      	ite	pl
 8000eac:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000eb0:	2008      	movmi	r0, #8
 8000eb2:	4914      	ldr	r1, [pc, #80]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000eb4:	0695      	lsls	r5, r2, #26
 8000eb6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb8:	bf54      	ite	pl
 8000eba:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	2010      	movmi	r0, #16
 8000ec0:	4910      	ldr	r1, [pc, #64]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000ec2:	06d4      	lsls	r4, r2, #27
 8000ec4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec6:	bf54      	ite	pl
 8000ec8:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ecc:	2020      	movmi	r0, #32
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000ed4:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ed6:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed8:	bf54      	ite	pl
 8000eda:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	2040      	movmi	r0, #64	; 0x40
 8000ee0:	4908      	ldr	r1, [pc, #32]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000ee2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000ee6:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000ee8:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eea:	bf54      	ite	pl
 8000eec:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000ef0:	2080      	movmi	r0, #128	; 0x80
 8000ef2:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ef4:	0797      	lsls	r7, r2, #30
 8000ef6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef8:	bf58      	it	pl
 8000efa:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000efe:	e005      	b.n	8000f0c <LCD_Rect_Fill+0x2d8>
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000f0c:	bf48      	it	mi
 8000f0e:	2110      	movmi	r1, #16
 8000f10:	4aa9      	ldr	r2, [pc, #676]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f12:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f18:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000f1e:	07d6      	lsls	r6, r2, #31
 8000f20:	bf54      	ite	pl
 8000f22:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	2120      	movmi	r1, #32
 8000f28:	4aa3      	ldr	r2, [pc, #652]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f30:	49a2      	ldr	r1, [pc, #648]	; (80011bc <LCD_Rect_Fill+0x588>)
 8000f32:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000f36:	610c      	str	r4, [r1, #16]
 8000f38:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f3c:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f40:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	f8c1 a010 	str.w	sl, [r1, #16]
 8000f48:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	4a9a      	ldr	r2, [pc, #616]	; (80011b8 <LCD_Rect_Fill+0x584>)
 8000f4e:	489c      	ldr	r0, [pc, #624]	; (80011c0 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f54:	f8c1 8010 	str.w	r8, [r1, #16]
 8000f58:	6104      	str	r4, [r0, #16]
 8000f5a:	6105      	str	r5, [r0, #16]
 8000f5c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000f60:	6116      	str	r6, [r2, #16]
 8000f62:	6114      	str	r4, [r2, #16]
 8000f64:	6115      	str	r5, [r2, #16]
 8000f66:	f8c2 c010 	str.w	ip, [r2, #16]
 8000f6a:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f6c:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	f04f 0e02 	mov.w	lr, #2
 8000f72:	09d2      	lsrs	r2, r2, #7
 8000f74:	bf16      	itet	ne
 8000f76:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f7c:	065d      	lsls	r5, r3, #25
 8000f7e:	bf4c      	ite	mi
 8000f80:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000f86:	4a8e      	ldr	r2, [pc, #568]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f88:	069c      	lsls	r4, r3, #26
 8000f8a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f8c:	bf4c      	ite	mi
 8000f8e:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f90:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000f94:	4a8a      	ldr	r2, [pc, #552]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f96:	06d8      	lsls	r0, r3, #27
 8000f98:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	bf4c      	ite	mi
 8000f9c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000fa2:	4a87      	ldr	r2, [pc, #540]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 8000fa4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fa8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000faa:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000fac:	bf4c      	ite	mi
 8000fae:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000fb4:	4a82      	ldr	r2, [pc, #520]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 8000fb6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000fba:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000fbc:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	bf4c      	ite	mi
 8000fc0:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000fc6:	4a7e      	ldr	r2, [pc, #504]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000fc8:	079f      	lsls	r7, r3, #30
 8000fca:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fcc:	bf4c      	ite	mi
 8000fce:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000fd4:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fda:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000fdc:	9b03      	ldr	r3, [sp, #12]
 8000fde:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000fe2:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	bf14      	ite	ne
 8000fe8:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fea:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000fee:	4973      	ldr	r1, [pc, #460]	; (80011bc <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000ff0:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000ffc:	6108      	str	r0, [r1, #16]
 8000ffe:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8001002:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800100a:	f8c1 c010 	str.w	ip, [r1, #16]
 800100e:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001012:	610c      	str	r4, [r1, #16]
 8001014:	610f      	str	r7, [r1, #16]
 8001016:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <LCD_Rect_Fill+0x584>)
 800101c:	4a68      	ldr	r2, [pc, #416]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 800101e:	6110      	str	r0, [r2, #16]
 8001020:	6114      	str	r4, [r2, #16]
 8001022:	611d      	str	r5, [r3, #16]
 8001024:	611e      	str	r6, [r3, #16]
 8001026:	6118      	str	r0, [r3, #16]
 8001028:	611c      	str	r4, [r3, #16]
 800102a:	f8c3 a010 	str.w	sl, [r3, #16]
 800102e:	f8c3 b010 	str.w	fp, [r3, #16]
 8001032:	6116      	str	r6, [r2, #16]
 8001034:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001036:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103a:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800103c:	2740      	movs	r7, #64	; 0x40
 800103e:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8001044:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001046:	2720      	movs	r7, #32
 8001048:	f8c3 8010 	str.w	r8, [r3, #16]
 800104c:	611f      	str	r7, [r3, #16]
 800104e:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001050:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001052:	f8c1 e010 	str.w	lr, [r1, #16]
 8001056:	f8c1 c010 	str.w	ip, [r1, #16]
 800105a:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8001060:	610f      	str	r7, [r1, #16]
 8001062:	6110      	str	r0, [r2, #16]
 8001064:	6114      	str	r4, [r2, #16]
 8001066:	611d      	str	r5, [r3, #16]
 8001068:	611e      	str	r6, [r3, #16]
 800106a:	6118      	str	r0, [r3, #16]
 800106c:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 800106e:	9c02      	ldr	r4, [sp, #8]
 8001070:	f8c3 a010 	str.w	sl, [r3, #16]
 8001074:	f8c3 b010 	str.w	fp, [r3, #16]
 8001078:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800107a:	b2e4      	uxtb	r4, r4
 800107c:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800107e:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8001082:	bf18      	it	ne
 8001084:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8001086:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	bf14      	ite	ne
 800108e:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001092:	064e      	lsls	r6, r1, #25
 8001094:	bf54      	ite	pl
 8001096:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800109a:	2408      	movmi	r4, #8
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 800109e:	4608      	mov	r0, r1
 80010a0:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010a2:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a4:	bf54      	ite	pl
 80010a6:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	2410      	movmi	r4, #16
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 80010ae:	f04f 0b02 	mov.w	fp, #2
 80010b2:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010b4:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b6:	bf54      	ite	pl
 80010b8:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010bc:	2420      	movmi	r4, #32
 80010be:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80010c0:	070f      	lsls	r7, r1, #28
 80010c2:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010c4:	bf54      	ite	pl
 80010c6:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	2440      	movmi	r4, #64	; 0x40
 80010cc:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80010ce:	074e      	lsls	r6, r1, #29
 80010d0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	bf54      	ite	pl
 80010d4:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80010d8:	2480      	movmi	r4, #128	; 0x80
 80010da:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 80010dc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80010e0:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80010e2:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e4:	bf54      	ite	pl
 80010e6:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	2110      	movmi	r1, #16
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ee:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80010f4:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f6:	bf54      	ite	pl
 80010f8:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010fc:	2120      	movmi	r1, #32
 80010fe:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001100:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001104:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <LCD_Rect_Fill+0x588>)
 8001108:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800110c:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800110e:	f8c1 b010 	str.w	fp, [r1, #16]
 8001112:	f8c1 a010 	str.w	sl, [r1, #16]
 8001116:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800111e:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001122:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8001126:	f8c1 8010 	str.w	r8, [r1, #16]
 800112a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800112e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001132:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <LCD_Rect_Fill+0x584>)
 8001134:	4822      	ldr	r0, [pc, #136]	; (80011c0 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8001136:	fa5f f589 	uxtb.w	r5, r9
 800113a:	6104      	str	r4, [r0, #16]
 800113c:	6106      	str	r6, [r0, #16]
 800113e:	f8c2 e010 	str.w	lr, [r2, #16]
 8001142:	6117      	str	r7, [r2, #16]
 8001144:	6114      	str	r4, [r2, #16]
 8001146:	6116      	str	r6, [r2, #16]
 8001148:	6111      	str	r1, [r2, #16]
 800114a:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800114e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8001150:	bf16      	itet	ne
 8001152:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001154:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001156:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001158:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115c:	bf0c      	ite	eq
 800115e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8001162:	2108      	movne	r1, #8
 8001164:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001166:	f019 0f20 	tst.w	r9, #32
 800116a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116c:	bf0c      	ite	eq
 800116e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001172:	2110      	movne	r1, #16
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001176:	f019 0f10 	tst.w	r9, #16
 800117a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800117c:	bf0c      	ite	eq
 800117e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001182:	2120      	movne	r1, #32
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001186:	f019 0f08 	tst.w	r9, #8
 800118a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800118c:	bf0c      	ite	eq
 800118e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001192:	2140      	movne	r1, #64	; 0x40
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001196:	f019 0f04 	tst.w	r9, #4
 800119a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119c:	bf0c      	ite	eq
 800119e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	2180      	movne	r1, #128	; 0x80
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80011a6:	f019 0f02 	tst.w	r9, #2
 80011aa:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ac:	bf0c      	ite	eq
 80011ae:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	2110      	movne	r1, #16
 80011b4:	e006      	b.n	80011c4 <LCD_Rect_Fill+0x590>
 80011b6:	bf00      	nop
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40010800 	.word	0x40010800
 80011c4:	4ab5      	ldr	r2, [pc, #724]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80011cc:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ce:	bf54      	ite	pl
 80011d0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80011da:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80011de:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	f04f 0b02 	mov.w	fp, #2
 80011e6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80011ea:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80011f2:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80011f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	4aa8      	ldr	r2, [pc, #672]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fc:	48a8      	ldr	r0, [pc, #672]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001200:	49a8      	ldr	r1, [pc, #672]	; (80014a4 <LCD_Rect_Fill+0x870>)
 8001202:	4aa6      	ldr	r2, [pc, #664]	; (800149c <LCD_Rect_Fill+0x868>)
 8001204:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001206:	f8c1 b010 	str.w	fp, [r1, #16]
 800120a:	f8c1 a010 	str.w	sl, [r1, #16]
 800120e:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001212:	f8c1 8010 	str.w	r8, [r1, #16]
 8001216:	6104      	str	r4, [r0, #16]
 8001218:	6105      	str	r5, [r0, #16]
 800121a:	f8c2 e010 	str.w	lr, [r2, #16]
 800121e:	6116      	str	r6, [r2, #16]
 8001220:	6114      	str	r4, [r2, #16]
 8001222:	6115      	str	r5, [r2, #16]
 8001224:	f8c2 c010 	str.w	ip, [r2, #16]
 8001228:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800122a:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800122c:	f04f 0a02 	mov.w	sl, #2
 8001230:	0bd2      	lsrs	r2, r2, #15
 8001232:	bf16      	itet	ne
 8001234:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001236:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001238:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800123a:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800123c:	bf54      	ite	pl
 800123e:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8001242:	2108      	movmi	r1, #8
 8001244:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001246:	069e      	lsls	r6, r3, #26
 8001248:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800124a:	bf54      	ite	pl
 800124c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001250:	2110      	movmi	r1, #16
 8001252:	4a93      	ldr	r2, [pc, #588]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001254:	06dd      	lsls	r5, r3, #27
 8001256:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001258:	bf54      	ite	pl
 800125a:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800125e:	2120      	movmi	r1, #32
 8001260:	4a8f      	ldr	r2, [pc, #572]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001262:	071c      	lsls	r4, r3, #28
 8001264:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001266:	bf54      	ite	pl
 8001268:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800126c:	2140      	movmi	r1, #64	; 0x40
 800126e:	4a8c      	ldr	r2, [pc, #560]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001270:	0758      	lsls	r0, r3, #29
 8001272:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001274:	bf54      	ite	pl
 8001276:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800127a:	2180      	movmi	r1, #128	; 0x80
 800127c:	4a88      	ldr	r2, [pc, #544]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001282:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001284:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001286:	bf54      	ite	pl
 8001288:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800128c:	2210      	movmi	r2, #16
 800128e:	4b83      	ldr	r3, [pc, #524]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001290:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8001294:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001296:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001298:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800129c:	f013 0f01 	tst.w	r3, #1
 80012a0:	bf0c      	ite	eq
 80012a2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	2220      	movne	r2, #32
 80012a8:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80012ac:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b0:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 80012b4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80012b8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80012bc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80012c0:	4b76      	ldr	r3, [pc, #472]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c2:	4977      	ldr	r1, [pc, #476]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80012c4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c6:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <LCD_Rect_Fill+0x870>)
 80012c8:	4b74      	ldr	r3, [pc, #464]	; (800149c <LCD_Rect_Fill+0x868>)
 80012ca:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80012cc:	f8c2 a010 	str.w	sl, [r2, #16]
 80012d0:	f8c2 9010 	str.w	r9, [r2, #16]
 80012d4:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d8:	f8c2 e010 	str.w	lr, [r2, #16]
 80012dc:	6108      	str	r0, [r1, #16]
 80012de:	610c      	str	r4, [r1, #16]
 80012e0:	f8c3 c010 	str.w	ip, [r3, #16]
 80012e4:	611d      	str	r5, [r3, #16]
 80012e6:	6118      	str	r0, [r3, #16]
 80012e8:	611c      	str	r4, [r3, #16]
 80012ea:	611f      	str	r7, [r3, #16]
 80012ec:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80012ee:	9b03      	ldr	r3, [sp, #12]
 80012f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f4:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	bf1c      	itt	ne
 80012f8:	2304      	movne	r3, #4
 80012fa:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80012fc:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	bf08      	it	eq
 8001300:	610d      	streq	r5, [r1, #16]
 8001302:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 8001306:	bf14      	ite	ne
 8001308:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130a:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800130e:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <LCD_Rect_Fill+0x86c>)
 8001310:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001314:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001316:	9b02      	ldr	r3, [sp, #8]
 8001318:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800131c:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 8001320:	bf14      	ite	ne
 8001322:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001324:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001328:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <LCD_Rect_Fill+0x86c>)
 800132a:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132c:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800132e:	9b02      	ldr	r3, [sp, #8]
 8001330:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8001334:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8001338:	bf14      	ite	ne
 800133a:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001346:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001348:	9b02      	ldr	r3, [sp, #8]
 800134a:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 800134e:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 8001352:	bf14      	ite	ne
 8001354:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001356:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8001360:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001362:	9b02      	ldr	r3, [sp, #8]
 8001364:	494f      	ldr	r1, [pc, #316]	; (80014a4 <LCD_Rect_Fill+0x870>)
 8001366:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 800136a:	bf14      	ite	ne
 800136c:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136e:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001372:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001374:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001378:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800137a:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800137c:	f04f 0910 	mov.w	r9, #16
 8001380:	079a      	lsls	r2, r3, #30
 8001382:	bf4c      	ite	mi
 8001384:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001386:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 800138c:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001390:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001392:	9b03      	ldr	r3, [sp, #12]
 8001394:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8001396:	bf4c      	ite	mi
 8001398:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <LCD_Rect_Fill+0x868>)
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013a6:	6108      	str	r0, [r1, #16]
 80013a8:	4a3c      	ldr	r2, [pc, #240]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	610c      	str	r4, [r1, #16]
 80013ac:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ae:	f8c1 e010 	str.w	lr, [r1, #16]
 80013b2:	610b      	str	r3, [r1, #16]
 80013b4:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 80013b8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80013bc:	6118      	str	r0, [r3, #16]
 80013be:	f8c3 e010 	str.w	lr, [r3, #16]
 80013c2:	f8c2 c010 	str.w	ip, [r2, #16]
 80013c6:	6117      	str	r7, [r2, #16]
 80013c8:	6110      	str	r0, [r2, #16]
 80013ca:	f8c2 e010 	str.w	lr, [r2, #16]
 80013ce:	f8c2 b010 	str.w	fp, [r2, #16]
 80013d2:	f8c2 a010 	str.w	sl, [r2, #16]
 80013d6:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013d8:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013da:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013de:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e2:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013e4:	f8c3 8010 	str.w	r8, [r3, #16]
 80013e8:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ea:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80013ee:	6117      	str	r7, [r2, #16]
 80013f0:	6116      	str	r6, [r2, #16]
 80013f2:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013f4:	610c      	str	r4, [r1, #16]
 80013f6:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80013f8:	9d01      	ldr	r5, [sp, #4]
 80013fa:	2d00      	cmp	r5, #0
 80013fc:	f000 80c8 	beq.w	8001590 <LCD_Rect_Fill+0x95c>
 8001400:	2500      	movs	r5, #0
 8001402:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001404:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8001406:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800140a:	f3c7 2785 	ubfx	r7, r7, #10, #6
 800140e:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 8001412:	017f      	lsls	r7, r7, #5
 8001414:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 8001418:	f3c7 3880 	ubfx	r8, r7, #14, #1
 800141c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001420:	f8cd 8008 	str.w	r8, [sp, #8]
 8001424:	f3c7 3840 	ubfx	r8, r7, #13, #1
 8001428:	f8cd 800c 	str.w	r8, [sp, #12]
 800142c:	f3c7 3800 	ubfx	r8, r7, #12, #1
 8001430:	f3c9 1940 	ubfx	r9, r9, #5, #1
 8001434:	f8cd 8010 	str.w	r8, [sp, #16]
 8001438:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 800143c:	f8cd 8014 	str.w	r8, [sp, #20]
 8001440:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8001444:	f3c7 2880 	ubfx	r8, r7, #10, #1
 8001448:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800144c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001450:	f3c7 2840 	ubfx	r8, r7, #9, #1
 8001454:	f3c9 1900 	ubfx	r9, r9, #4, #1
 8001458:	f8cd 801c 	str.w	r8, [sp, #28]
 800145c:	f3c7 2800 	ubfx	r8, r7, #8, #1
 8001460:	f8cd 8020 	str.w	r8, [sp, #32]
 8001464:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800146c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001470:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8001474:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8001478:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 800147c:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001480:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8001484:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001488:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 800148c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001490:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8001494:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8001498:	e006      	b.n	80014a8 <LCD_Rect_Fill+0x874>
 800149a:	bf00      	nop
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a8:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80014ac:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ae:	610f      	str	r7, [r1, #16]
 80014b0:	f1bc 0f00 	cmp.w	ip, #0
 80014b4:	f000 80ac 	beq.w	8001610 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014b8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	611c      	str	r4, [r3, #16]
 80014bc:	2f00      	cmp	r7, #0
 80014be:	f000 80ac 	beq.w	800161a <LCD_Rect_Fill+0x9e6>
 80014c2:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	2f00      	cmp	r7, #0
 80014c8:	f000 809e 	beq.w	8001608 <LCD_Rect_Fill+0x9d4>
 80014cc:	f04f 0908 	mov.w	r9, #8
 80014d0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80014d4:	9f04      	ldr	r7, [sp, #16]
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	f000 8091 	beq.w	80015fe <LCD_Rect_Fill+0x9ca>
 80014dc:	f04f 0904 	mov.w	r9, #4
 80014e0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80014e4:	9f05      	ldr	r7, [sp, #20]
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	f000 8087 	beq.w	80015fa <LCD_Rect_Fill+0x9c6>
 80014ec:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80014ee:	9f06      	ldr	r7, [sp, #24]
 80014f0:	2f00      	cmp	r7, #0
 80014f2:	d07f      	beq.n	80015f4 <LCD_Rect_Fill+0x9c0>
 80014f4:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80014f6:	9f07      	ldr	r7, [sp, #28]
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	d076      	beq.n	80015ea <LCD_Rect_Fill+0x9b6>
 80014fc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001500:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001504:	9f08      	ldr	r7, [sp, #32]
 8001506:	2f00      	cmp	r7, #0
 8001508:	d06a      	beq.n	80015e0 <LCD_Rect_Fill+0x9ac>
 800150a:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 800150e:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001512:	f1ba 0f00 	cmp.w	sl, #0
 8001516:	d05e      	beq.n	80015d6 <LCD_Rect_Fill+0x9a2>
 8001518:	f04f 0904 	mov.w	r9, #4
 800151c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001520:	f1bb 0f00 	cmp.w	fp, #0
 8001524:	d053      	beq.n	80015ce <LCD_Rect_Fill+0x99a>
 8001526:	f04f 0908 	mov.w	r9, #8
 800152a:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800152e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001530:	2f00      	cmp	r7, #0
 8001532:	d047      	beq.n	80015c4 <LCD_Rect_Fill+0x990>
 8001534:	f04f 0910 	mov.w	r9, #16
 8001538:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800153c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800153e:	2f00      	cmp	r7, #0
 8001540:	d03b      	beq.n	80015ba <LCD_Rect_Fill+0x986>
 8001542:	f04f 0920 	mov.w	r9, #32
 8001546:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800154a:	f1b8 0f00 	cmp.w	r8, #0
 800154e:	d02f      	beq.n	80015b0 <LCD_Rect_Fill+0x97c>
 8001550:	f04f 0940 	mov.w	r9, #64	; 0x40
 8001554:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001558:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800155a:	b327      	cbz	r7, 80015a6 <LCD_Rect_Fill+0x972>
 800155c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001560:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001564:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001566:	b1cf      	cbz	r7, 800159c <LCD_Rect_Fill+0x968>
 8001568:	f04f 0910 	mov.w	r9, #16
 800156c:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001570:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001572:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001574:	b17f      	cbz	r7, 8001596 <LCD_Rect_Fill+0x962>
 8001576:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800157e:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001582:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001584:	6108      	str	r0, [r1, #16]
 8001586:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8001588:	610c      	str	r4, [r1, #16]
 800158a:	f8c1 9010 	str.w	r9, [r1, #16]
 800158e:	d18b      	bne.n	80014a8 <LCD_Rect_Fill+0x874>
}
 8001590:	b00f      	add	sp, #60	; 0x3c
 8001592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800159a:	e7ee      	b.n	800157a <LCD_Rect_Fill+0x946>
 800159c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 80015a0:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015a4:	e7e4      	b.n	8001570 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a6:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 80015aa:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015ae:	e7d9      	b.n	8001564 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b0:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 80015b4:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015b8:	e7ce      	b.n	8001558 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ba:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 80015be:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015c2:	e7c2      	b.n	800154a <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c4:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 80015c8:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015cc:	e7b6      	b.n	800153c <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ce:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80015d2:	611f      	str	r7, [r3, #16]
}
 80015d4:	e7ab      	b.n	800152e <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d6:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 80015da:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015de:	e79f      	b.n	8001520 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e0:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 80015e4:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015e8:	e793      	b.n	8001512 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ea:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80015ee:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015f2:	e787      	b.n	8001504 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015f4:	f8c2 e010 	str.w	lr, [r2, #16]
}
 80015f8:	e77d      	b.n	80014f6 <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fa:	6110      	str	r0, [r2, #16]
}
 80015fc:	e777      	b.n	80014ee <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fe:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001602:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001606:	e76d      	b.n	80014e4 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001608:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800160c:	6117      	str	r7, [r2, #16]
}
 800160e:	e761      	b.n	80014d4 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001610:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001612:	6118      	str	r0, [r3, #16]
 8001614:	2f00      	cmp	r7, #0
 8001616:	f47f af54 	bne.w	80014c2 <LCD_Rect_Fill+0x88e>
 800161a:	f8c3 e010 	str.w	lr, [r3, #16]
}
 800161e:	e751      	b.n	80014c4 <LCD_Rect_Fill+0x890>

08001620 <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8001624:	2601      	movs	r6, #1
 8001626:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001628:	b089      	sub	sp, #36	; 0x24
 800162a:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800162e:	4615      	mov	r5, r2
	P = 1 - radius;
 8001630:	1a32      	subs	r2, r6, r0
 8001632:	9304      	str	r3, [sp, #16]
 8001634:	9203      	str	r2, [sp, #12]
 8001636:	fa1f fb80 	uxth.w	fp, r0
 800163a:	1e73      	subs	r3, r6, #1
 800163c:	9307      	str	r3, [sp, #28]
	while (a_ <= b_)
	{
		if (fill == 1)
 800163e:	9b06      	ldr	r3, [sp, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d070      	beq.n	8001726 <LCD_Circle.constprop.0+0x106>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8001644:	2301      	movs	r3, #1
 8001646:	b2b4      	uxth	r4, r6
 8001648:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 800164c:	f10b 084b 	add.w	r8, fp, #75	; 0x4b
 8001650:	fa1f f989 	uxth.w	r9, r9
 8001654:	fa1f f888 	uxth.w	r8, r8
 8001658:	4641      	mov	r1, r8
 800165a:	4648      	mov	r0, r9
 800165c:	461a      	mov	r2, r3
 800165e:	9500      	str	r5, [sp, #0]
 8001660:	f7ff fae8 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8001664:	2301      	movs	r3, #1
 8001666:	f104 074a 	add.w	r7, r4, #74	; 0x4a
 800166a:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 800166e:	b2bf      	uxth	r7, r7
 8001670:	fa1f fa8a 	uxth.w	sl, sl
 8001674:	4639      	mov	r1, r7
 8001676:	461a      	mov	r2, r3
 8001678:	4650      	mov	r0, sl
 800167a:	9500      	str	r5, [sp, #0]
 800167c:	f7ff fada 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001680:	2301      	movs	r3, #1
 8001682:	4641      	mov	r1, r8
 8001684:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 8001688:	fa1f f888 	uxth.w	r8, r8
 800168c:	461a      	mov	r2, r3
 800168e:	4640      	mov	r0, r8
 8001690:	9500      	str	r5, [sp, #0]
 8001692:	f7ff facf 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001696:	2301      	movs	r3, #1
 8001698:	4639      	mov	r1, r7
 800169a:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 800169e:	b2bf      	uxth	r7, r7
 80016a0:	461a      	mov	r2, r3
 80016a2:	4638      	mov	r0, r7
 80016a4:	9500      	str	r5, [sp, #0]
 80016a6:	f7ff fac5 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80016aa:	2301      	movs	r3, #1
 80016ac:	f1c4 044c 	rsb	r4, r4, #76	; 0x4c
 80016b0:	b2a4      	uxth	r4, r4
 80016b2:	461a      	mov	r2, r3
 80016b4:	4650      	mov	r0, sl
 80016b6:	4621      	mov	r1, r4
 80016b8:	9500      	str	r5, [sp, #0]
 80016ba:	f7ff fabb 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80016be:	2301      	movs	r3, #1
 80016c0:	4648      	mov	r0, r9
 80016c2:	f1cb 094b 	rsb	r9, fp, #75	; 0x4b
 80016c6:	fa1f f989 	uxth.w	r9, r9
 80016ca:	461a      	mov	r2, r3
 80016cc:	4649      	mov	r1, r9
 80016ce:	9500      	str	r5, [sp, #0]
 80016d0:	f7ff fab0 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80016d4:	2301      	movs	r3, #1
 80016d6:	4649      	mov	r1, r9
 80016d8:	461a      	mov	r2, r3
 80016da:	4640      	mov	r0, r8
 80016dc:	9500      	str	r5, [sp, #0]
 80016de:	f7ff faa9 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80016e2:	2301      	movs	r3, #1
 80016e4:	4621      	mov	r1, r4
 80016e6:	461a      	mov	r2, r3
 80016e8:	4638      	mov	r0, r7
 80016ea:	9500      	str	r5, [sp, #0]
 80016ec:	f7ff faa2 	bl	8000c34 <LCD_Rect_Fill>
		}
		if (P < 0)
 80016f0:	9a03      	ldr	r2, [sp, #12]
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	db3a      	blt.n	800176c <LCD_Circle.constprop.0+0x14c>
 80016f6:	4611      	mov	r1, r2
			P = (P + 3) + (2 * a_);
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 80016f8:	9805      	ldr	r0, [sp, #20]
 80016fa:	1e73      	subs	r3, r6, #1
 80016fc:	1a1b      	subs	r3, r3, r0
 80016fe:	3105      	adds	r1, #5
 8001700:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001704:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8001706:	9b04      	ldr	r3, [sp, #16]
			a_++;
			b_--;
 8001708:	3801      	subs	r0, #1
	while (a_ <= b_)
 800170a:	3302      	adds	r3, #2
 800170c:	4286      	cmp	r6, r0
			b_--;
 800170e:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	f106 0601 	add.w	r6, r6, #1
 8001716:	dc35      	bgt.n	8001784 <LCD_Circle.constprop.0+0x164>
 8001718:	1e73      	subs	r3, r6, #1
 800171a:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 800171c:	9b06      	ldr	r3, [sp, #24]
 800171e:	fa1f fb80 	uxth.w	fp, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d18e      	bne.n	8001644 <LCD_Circle.constprop.0+0x24>
 8001726:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001728:	ea4f 044b 	mov.w	r4, fp, lsl #1
 800172c:	b2b7      	uxth	r7, r6
 800172e:	f103 0801 	add.w	r8, r3, #1
 8001732:	3401      	adds	r4, #1
 8001734:	fa1f f888 	uxth.w	r8, r8
 8001738:	b2a4      	uxth	r4, r4
 800173a:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 800173e:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 8001742:	4623      	mov	r3, r4
 8001744:	4642      	mov	r2, r8
 8001746:	b289      	uxth	r1, r1
 8001748:	b280      	uxth	r0, r0
 800174a:	9500      	str	r5, [sp, #0]
 800174c:	f7ff fa72 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8001750:	f1c7 014c 	rsb	r1, r7, #76	; 0x4c
 8001754:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 8001758:	4622      	mov	r2, r4
 800175a:	4643      	mov	r3, r8
 800175c:	9500      	str	r5, [sp, #0]
 800175e:	b289      	uxth	r1, r1
 8001760:	b280      	uxth	r0, r0
 8001762:	f7ff fa67 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 8001766:	9a03      	ldr	r2, [sp, #12]
 8001768:	2a00      	cmp	r2, #0
 800176a:	dac4      	bge.n	80016f6 <LCD_Circle.constprop.0+0xd6>
			P = (P + 3) + (2 * a_);
 800176c:	9904      	ldr	r1, [sp, #16]
 800176e:	3203      	adds	r2, #3
 8001770:	188a      	adds	r2, r1, r2
 8001772:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 8001774:	1c8a      	adds	r2, r1, #2
 8001776:	9204      	str	r2, [sp, #16]
 8001778:	9a05      	ldr	r2, [sp, #20]
 800177a:	4296      	cmp	r6, r2
 800177c:	f106 0601 	add.w	r6, r6, #1
 8001780:	f77f af5b 	ble.w	800163a <LCD_Circle.constprop.0+0x1a>
		}
	}
}
 8001784:	b009      	add	sp, #36	; 0x24
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178a:	bf00      	nop

0800178c <LCD_Circle.constprop.1>:
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 800178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	P = 1 - radius;
 8001790:	2601      	movs	r6, #1
 8001792:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001794:	b089      	sub	sp, #36	; 0x24
 8001796:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800179a:	4615      	mov	r5, r2
	P = 1 - radius;
 800179c:	1a32      	subs	r2, r6, r0
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	9203      	str	r2, [sp, #12]
 80017a2:	fa1f fb80 	uxth.w	fp, r0
 80017a6:	1e73      	subs	r3, r6, #1
 80017a8:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 80017aa:	9b06      	ldr	r3, [sp, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d070      	beq.n	8001892 <LCD_Circle.constprop.1+0x106>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80017b0:	2301      	movs	r3, #1
 80017b2:	b2b4      	uxth	r4, r6
 80017b4:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 80017b8:	f10b 0823 	add.w	r8, fp, #35	; 0x23
 80017bc:	fa1f f989 	uxth.w	r9, r9
 80017c0:	fa1f f888 	uxth.w	r8, r8
 80017c4:	4641      	mov	r1, r8
 80017c6:	4648      	mov	r0, r9
 80017c8:	461a      	mov	r2, r3
 80017ca:	9500      	str	r5, [sp, #0]
 80017cc:	f7ff fa32 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80017d0:	2301      	movs	r3, #1
 80017d2:	f104 0722 	add.w	r7, r4, #34	; 0x22
 80017d6:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 80017da:	b2bf      	uxth	r7, r7
 80017dc:	fa1f fa8a 	uxth.w	sl, sl
 80017e0:	4639      	mov	r1, r7
 80017e2:	461a      	mov	r2, r3
 80017e4:	4650      	mov	r0, sl
 80017e6:	9500      	str	r5, [sp, #0]
 80017e8:	f7ff fa24 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80017ec:	2301      	movs	r3, #1
 80017ee:	4641      	mov	r1, r8
 80017f0:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 80017f4:	fa1f f888 	uxth.w	r8, r8
 80017f8:	461a      	mov	r2, r3
 80017fa:	4640      	mov	r0, r8
 80017fc:	9500      	str	r5, [sp, #0]
 80017fe:	f7ff fa19 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001802:	2301      	movs	r3, #1
 8001804:	4639      	mov	r1, r7
 8001806:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 800180a:	b2bf      	uxth	r7, r7
 800180c:	461a      	mov	r2, r3
 800180e:	4638      	mov	r0, r7
 8001810:	9500      	str	r5, [sp, #0]
 8001812:	f7ff fa0f 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8001816:	2301      	movs	r3, #1
 8001818:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
 800181c:	b2a4      	uxth	r4, r4
 800181e:	461a      	mov	r2, r3
 8001820:	4650      	mov	r0, sl
 8001822:	4621      	mov	r1, r4
 8001824:	9500      	str	r5, [sp, #0]
 8001826:	f7ff fa05 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800182a:	2301      	movs	r3, #1
 800182c:	4648      	mov	r0, r9
 800182e:	f1cb 0923 	rsb	r9, fp, #35	; 0x23
 8001832:	fa1f f989 	uxth.w	r9, r9
 8001836:	461a      	mov	r2, r3
 8001838:	4649      	mov	r1, r9
 800183a:	9500      	str	r5, [sp, #0]
 800183c:	f7ff f9fa 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8001840:	2301      	movs	r3, #1
 8001842:	4649      	mov	r1, r9
 8001844:	461a      	mov	r2, r3
 8001846:	4640      	mov	r0, r8
 8001848:	9500      	str	r5, [sp, #0]
 800184a:	f7ff f9f3 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800184e:	2301      	movs	r3, #1
 8001850:	4621      	mov	r1, r4
 8001852:	461a      	mov	r2, r3
 8001854:	4638      	mov	r0, r7
 8001856:	9500      	str	r5, [sp, #0]
 8001858:	f7ff f9ec 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 800185c:	9a03      	ldr	r2, [sp, #12]
 800185e:	2a00      	cmp	r2, #0
 8001860:	db3a      	blt.n	80018d8 <LCD_Circle.constprop.1+0x14c>
 8001862:	4611      	mov	r1, r2
			P = (P + 5) + (2 * (a_ - b_));
 8001864:	9805      	ldr	r0, [sp, #20]
 8001866:	1e73      	subs	r3, r6, #1
 8001868:	1a1b      	subs	r3, r3, r0
 800186a:	3105      	adds	r1, #5
 800186c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001870:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8001872:	9b04      	ldr	r3, [sp, #16]
			b_--;
 8001874:	3801      	subs	r0, #1
	while (a_ <= b_)
 8001876:	3302      	adds	r3, #2
 8001878:	4286      	cmp	r6, r0
			b_--;
 800187a:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	f106 0601 	add.w	r6, r6, #1
 8001882:	dc35      	bgt.n	80018f0 <LCD_Circle.constprop.1+0x164>
 8001884:	1e73      	subs	r3, r6, #1
 8001886:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 8001888:	9b06      	ldr	r3, [sp, #24]
 800188a:	fa1f fb80 	uxth.w	fp, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d18e      	bne.n	80017b0 <LCD_Circle.constprop.1+0x24>
 8001892:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001894:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8001898:	b2b7      	uxth	r7, r6
 800189a:	f103 0801 	add.w	r8, r3, #1
 800189e:	3401      	adds	r4, #1
 80018a0:	fa1f f888 	uxth.w	r8, r8
 80018a4:	b2a4      	uxth	r4, r4
 80018a6:	f1cb 0123 	rsb	r1, fp, #35	; 0x23
 80018aa:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 80018ae:	4623      	mov	r3, r4
 80018b0:	4642      	mov	r2, r8
 80018b2:	b289      	uxth	r1, r1
 80018b4:	b280      	uxth	r0, r0
 80018b6:	9500      	str	r5, [sp, #0]
 80018b8:	f7ff f9bc 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80018bc:	f1c7 0124 	rsb	r1, r7, #36	; 0x24
 80018c0:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 80018c4:	4622      	mov	r2, r4
 80018c6:	4643      	mov	r3, r8
 80018c8:	9500      	str	r5, [sp, #0]
 80018ca:	b289      	uxth	r1, r1
 80018cc:	b280      	uxth	r0, r0
 80018ce:	f7ff f9b1 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 80018d2:	9a03      	ldr	r2, [sp, #12]
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	dac4      	bge.n	8001862 <LCD_Circle.constprop.1+0xd6>
			P = (P + 3) + (2 * a_);
 80018d8:	9904      	ldr	r1, [sp, #16]
 80018da:	3203      	adds	r2, #3
 80018dc:	188a      	adds	r2, r1, r2
 80018de:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 80018e0:	1c8a      	adds	r2, r1, #2
 80018e2:	9204      	str	r2, [sp, #16]
 80018e4:	9a05      	ldr	r2, [sp, #20]
 80018e6:	4296      	cmp	r6, r2
 80018e8:	f106 0601 	add.w	r6, r6, #1
 80018ec:	f77f af5b 	ble.w	80017a6 <LCD_Circle.constprop.1+0x1a>
}
 80018f0:	b009      	add	sp, #36	; 0x24
 80018f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f6:	bf00      	nop

080018f8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f8:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80018fe:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8001902:	2921      	cmp	r1, #33	; 0x21
 8001904:	d009      	beq.n	800191a <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001906:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001908:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 800190c:	2922      	cmp	r1, #34	; 0x22
 800190e:	d014      	beq.n	800193a <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001912:	f042 0210 	orr.w	r2, r2, #16
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001918:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800191a:	0600      	lsls	r0, r0, #24
 800191c:	d5f3      	bpl.n	8001906 <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 800191e:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001920:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001922:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001924:	68d1      	ldr	r1, [r2, #12]
 8001926:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800192a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800192c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001930:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001932:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001936:	2922      	cmp	r1, #34	; 0x22
 8001938:	d1ea      	bne.n	8001910 <UART_DMAError+0x18>
 800193a:	0641      	lsls	r1, r0, #25
 800193c:	d5e8      	bpl.n	8001910 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 800193e:	2100      	movs	r1, #0
 8001940:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001942:	68d1      	ldr	r1, [r2, #12]
 8001944:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001948:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800194a:	6951      	ldr	r1, [r2, #20]
 800194c:	f021 0101 	bic.w	r1, r1, #1
 8001950:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001954:	2901      	cmp	r1, #1
 8001956:	d103      	bne.n	8001960 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001958:	68d1      	ldr	r1, [r2, #12]
 800195a:	f021 0110 	bic.w	r1, r1, #16
 800195e:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001960:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001962:	2120      	movs	r1, #32
 8001964:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800196a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196c:	f042 0210 	orr.w	r2, r2, #16
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001972:	4770      	bx	lr

08001974 <HAL_DMA_Init.constprop.0>:
  *         parameters in the DMA_InitTypeDef and initialize the associated handle.
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8001974:	4603      	mov	r3, r0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001976:	f44f 7c80 	mov.w	ip, #256	; 0x100
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800197a:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	2500      	movs	r5, #0
  hdma->DmaBaseAddress = DMA1;
 800197e:	4c0f      	ldr	r4, [pc, #60]	; (80019bc <HAL_DMA_Init.constprop.0+0x48>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_DMA_Init.constprop.0+0x4c>)
  hdma->DmaBaseAddress = DMA1;
 8001982:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001984:	6804      	ldr	r4, [r0, #0]
 8001986:	490f      	ldr	r1, [pc, #60]	; (80019c4 <HAL_DMA_Init.constprop.0+0x50>)
 8001988:	4422      	add	r2, r4
 800198a:	fba1 1202 	umull	r1, r2, r1, r2
 800198e:	0912      	lsrs	r2, r2, #4
  tmp = hdma->Instance->CCR;
 8001990:	6821      	ldr	r1, [r4, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	6402      	str	r2, [r0, #64]	; 0x40
 8001996:	6842      	ldr	r2, [r0, #4]
 8001998:	6900      	ldr	r0, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800199a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800199e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80019a2:	4302      	orrs	r2, r0
 80019a4:	430a      	orrs	r2, r1
 80019a6:	6959      	ldr	r1, [r3, #20]

  return HAL_OK;
}
 80019a8:	4628      	mov	r0, r5
 80019aa:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Direction        |
 80019ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  hdma->Instance->CCR = tmp;
 80019b0:	6022      	str	r2, [r4, #0]
  hdma->Lock = HAL_UNLOCKED;
 80019b2:	f8a3 c020 	strh.w	ip, [r3, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b6:	639d      	str	r5, [r3, #56]	; 0x38
}
 80019b8:	bc30      	pop	{r4, r5}
 80019ba:	4770      	bx	lr
 80019bc:	40020000 	.word	0x40020000
 80019c0:	bffdfff8 	.word	0xbffdfff8
 80019c4:	cccccccd 	.word	0xcccccccd

080019c8 <HAL_GPIO_Init>:
{
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	680e      	ldr	r6, [r1, #0]
{
 80019ce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	2e00      	cmp	r6, #0
 80019d2:	f000 80b2 	beq.w	8001b3a <HAL_GPIO_Init+0x172>
 80019d6:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d8:	4f74      	ldr	r7, [pc, #464]	; (8001bac <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80019da:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80019dc:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019de:	4d74      	ldr	r5, [pc, #464]	; (8001bb0 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80019e0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001bb4 <HAL_GPIO_Init+0x1ec>
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x2c>
	position++;
 80019e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e8:	fa36 f403 	lsrs.w	r4, r6, r3
 80019ec:	f102 0204 	add.w	r2, r2, #4
 80019f0:	f000 80a3 	beq.w	8001b3a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80019f4:	2401      	movs	r4, #1
 80019f6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80019f8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001a00:	d1f1      	bne.n	80019e6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001a02:	684e      	ldr	r6, [r1, #4]
 8001a04:	2e12      	cmp	r6, #18
 8001a06:	f200 809b 	bhi.w	8001b40 <HAL_GPIO_Init+0x178>
 8001a0a:	2e12      	cmp	r6, #18
 8001a0c:	d81a      	bhi.n	8001a44 <HAL_GPIO_Init+0x7c>
 8001a0e:	e8df f006 	tbb	[pc, r6]
 8001a12:	baa4      	.short	0xbaa4
 8001a14:	1919c3b6 	.word	0x1919c3b6
 8001a18:	19191919 	.word	0x19191919
 8001a1c:	19191919 	.word	0x19191919
 8001a20:	ae191919 	.word	0xae191919
 8001a24:	b2          	.byte	0xb2
 8001a25:	00          	.byte	0x00
 8001a26:	f8df e190 	ldr.w	lr, [pc, #400]	; 8001bb8 <HAL_GPIO_Init+0x1f0>
 8001a2a:	4576      	cmp	r6, lr
 8001a2c:	f000 8095 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
 8001a30:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001a34:	4576      	cmp	r6, lr
 8001a36:	f000 8090 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
 8001a3a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001a3e:	4576      	cmp	r6, lr
 8001a40:	f000 808b 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001a48:	bf9c      	itt	ls
 8001a4a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a52:	bf84      	itt	hi
 8001a54:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a58:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	f8de 4000 	ldr.w	r4, [lr]
 8001a60:	fa0a f90b 	lsl.w	r9, sl, fp
 8001a64:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001a68:	ea24 040b 	bic.w	r4, r4, fp
 8001a6c:	ea44 0409 	orr.w	r4, r4, r9
 8001a70:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a74:	684c      	ldr	r4, [r1, #4]
 8001a76:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a7a:	d076      	beq.n	8001b6a <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a80:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a84:	f04e 0e01 	orr.w	lr, lr, #1
 8001a88:	f8c7 e018 	str.w	lr, [r7, #24]
 8001a8c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a90:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a94:	f00e 0e01 	and.w	lr, lr, #1
 8001a98:	f8cd e004 	str.w	lr, [sp, #4]
 8001a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	f023 0e03 	bic.w	lr, r3, #3
 8001aa4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001aa8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001aac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab0:	fa06 f609 	lsl.w	r6, r6, r9
 8001ab4:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	4e40      	ldr	r6, [pc, #256]	; (8001bbc <HAL_GPIO_Init+0x1f4>)
 8001aba:	42b0      	cmp	r0, r6
 8001abc:	d068      	beq.n	8001b90 <HAL_GPIO_Init+0x1c8>
 8001abe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ac2:	42b0      	cmp	r0, r6
 8001ac4:	d066      	beq.n	8001b94 <HAL_GPIO_Init+0x1cc>
 8001ac6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aca:	42b0      	cmp	r0, r6
 8001acc:	d05e      	beq.n	8001b8c <HAL_GPIO_Init+0x1c4>
 8001ace:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ad2:	42b0      	cmp	r0, r6
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2603      	moveq	r6, #3
 8001ad8:	2604      	movne	r6, #4
 8001ada:	fa06 f609 	lsl.w	r6, r6, r9
 8001ade:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	bf14      	ite	ne
 8001aee:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af2:	ea26 060c 	biceq.w	r6, r6, ip
 8001af6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001afe:	bf14      	ite	ne
 8001b00:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b04:	ea26 060c 	biceq.w	r6, r6, ip
 8001b08:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	bf14      	ite	ne
 8001b12:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b16:	ea26 060c 	biceq.w	r6, r6, ip
 8001b1a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b22:	d01f      	beq.n	8001b64 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	ea44 040c 	orr.w	r4, r4, ip
 8001b28:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	680e      	ldr	r6, [r1, #0]
	position++;
 8001b2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001b32:	f102 0204 	add.w	r2, r2, #4
 8001b36:	f47f af5d 	bne.w	80019f4 <HAL_GPIO_Init+0x2c>
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b40:	4546      	cmp	r6, r8
 8001b42:	d00a      	beq.n	8001b5a <HAL_GPIO_Init+0x192>
 8001b44:	f67f af6f 	bls.w	8001a26 <HAL_GPIO_Init+0x5e>
 8001b48:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001bc0 <HAL_GPIO_Init+0x1f8>
 8001b4c:	4576      	cmp	r6, lr
 8001b4e:	d004      	beq.n	8001b5a <HAL_GPIO_Init+0x192>
 8001b50:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001b54:	4576      	cmp	r6, lr
 8001b56:	f47f af75 	bne.w	8001a44 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	688e      	ldr	r6, [r1, #8]
 8001b5c:	b9fe      	cbnz	r6, 8001b9e <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	f04f 0a04 	mov.w	sl, #4
 8001b62:	e76f      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b64:	ea24 040c 	bic.w	r4, r4, ip
 8001b68:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	680e      	ldr	r6, [r1, #0]
 8001b6c:	e73b      	b.n	80019e6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6e:	68cc      	ldr	r4, [r1, #12]
 8001b70:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001b74:	e766      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b76:	68cc      	ldr	r4, [r1, #12]
 8001b78:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001b7c:	e762      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	68cc      	ldr	r4, [r1, #12]
 8001b80:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001b84:	e75e      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b86:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001b8a:	e75b      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b8c:	2602      	movs	r6, #2
 8001b8e:	e7a4      	b.n	8001ada <HAL_GPIO_Init+0x112>
 8001b90:	2600      	movs	r6, #0
 8001b92:	e7a2      	b.n	8001ada <HAL_GPIO_Init+0x112>
 8001b94:	2601      	movs	r6, #1
 8001b96:	e7a0      	b.n	8001ada <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001b98:	f04f 0a00 	mov.w	sl, #0
 8001b9c:	e752      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001ba4:	bf0c      	ite	eq
 8001ba6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001ba8:	6144      	strne	r4, [r0, #20]
 8001baa:	e74b      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	10310000 	.word	0x10310000

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4905      	ldr	r1, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bcc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	6810      	ldr	r0, [r2, #0]
}
 8001bd4:	40d8      	lsrs	r0, r3
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	0800d560 	.word	0x0800d560

08001be4 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be4:	6803      	ldr	r3, [r0, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f013 0320 	ands.w	r3, r3, #32
 8001bec:	d10a      	bne.n	8001c04 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf0:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 8001bf2:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf4:	6953      	ldr	r3, [r2, #20]
 8001bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bfa:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bfc:	68d3      	ldr	r3, [r2, #12]
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <UART_DMATxHalfCplt>:
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <HAL_RCC_OscConfig.constprop.0>:
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4a91      	ldr	r2, [pc, #580]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001c0e:	b470      	push	{r4, r5, r6}
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c10:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001c12:	b083      	sub	sp, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	f000 80ee 	beq.w	8001dfa <HAL_RCC_OscConfig.constprop.0+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1e:	6853      	ldr	r3, [r2, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	f000 80e4 	beq.w	8001df2 <HAL_RCC_OscConfig.constprop.0+0x1e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	498a      	ldr	r1, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c2e:	680a      	ldr	r2, [r1, #0]
 8001c30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c34:	600a      	str	r2, [r1, #0]
 8001c36:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	e003      	b.n	8001c42 <HAL_RCC_OscConfig.constprop.0+0x36>
 8001c3a:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	1b12      	subs	r2, r2, r4
 8001c3e:	2a64      	cmp	r2, #100	; 0x64
 8001c40:	d87a      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	680a      	ldr	r2, [r1, #0]
 8001c44:	0395      	lsls	r5, r2, #14
 8001c46:	d5f8      	bpl.n	8001c3a <HAL_RCC_OscConfig.constprop.0+0x2e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	0799      	lsls	r1, r3, #30
 8001c4c:	d525      	bpl.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	f012 0f0c 	tst.w	r2, #12
 8001c56:	f000 80a6 	beq.w	8001da6 <HAL_RCC_OscConfig.constprop.0+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	f002 020c 	and.w	r2, r2, #12
 8001c60:	2a08      	cmp	r2, #8
 8001c62:	f000 809c 	beq.w	8001d9e <HAL_RCC_OscConfig.constprop.0+0x192>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c66:	6902      	ldr	r2, [r0, #16]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	f000 80ea 	beq.w	8001e42 <HAL_RCC_OscConfig.constprop.0+0x236>
        __HAL_RCC_HSI_ENABLE();
 8001c6e:	2401      	movs	r4, #1
 8001c70:	4a7a      	ldr	r2, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c74:	6014      	str	r4, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4977      	ldr	r1, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	e003      	b.n	8001c84 <HAL_RCC_OscConfig.constprop.0+0x78>
 8001c7c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	1b12      	subs	r2, r2, r4
 8001c80:	2a02      	cmp	r2, #2
 8001c82:	d859      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	680a      	ldr	r2, [r1, #0]
 8001c86:	0796      	lsls	r6, r2, #30
 8001c88:	d5f8      	bpl.n	8001c7c <HAL_RCC_OscConfig.constprop.0+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	680b      	ldr	r3, [r1, #0]
 8001c8c:	6942      	ldr	r2, [r0, #20]
 8001c8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	071a      	lsls	r2, r3, #28
 8001c9c:	d520      	bpl.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0xd4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	6982      	ldr	r2, [r0, #24]
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	f000 8089 	beq.w	8001db8 <HAL_RCC_OscConfig.constprop.0+0x1ac>
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	2401      	movs	r4, #1
 8001ca8:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001caa:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001cac:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	4968      	ldr	r1, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001cb2:	681c      	ldr	r4, [r3, #0]
 8001cb4:	e003      	b.n	8001cbe <HAL_RCC_OscConfig.constprop.0+0xb2>
 8001cb6:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	1b12      	subs	r2, r2, r4
 8001cba:	2a02      	cmp	r2, #2
 8001cbc:	d83c      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001cc0:	0795      	lsls	r5, r2, #30
 8001cc2:	d5f8      	bpl.n	8001cb6 <HAL_RCC_OscConfig.constprop.0+0xaa>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001cc8:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig.constprop.0+0x254>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cd0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001cd2:	bf00      	nop
  }
  while (Delay --);
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_RCC_OscConfig.constprop.0+0xc6>
 8001cde:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	075e      	lsls	r6, r3, #29
 8001ce2:	d541      	bpl.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	00d6      	lsls	r6, r2, #3
 8001cea:	d577      	bpl.n	8001ddc <HAL_RCC_OscConfig.constprop.0+0x1d0>
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	495d      	ldr	r1, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig.constprop.0+0x258>)
 8001cf0:	680b      	ldr	r3, [r1, #0]
 8001cf2:	05dd      	lsls	r5, r3, #23
 8001cf4:	d513      	bpl.n	8001d1e <HAL_RCC_OscConfig.constprop.0+0x112>
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	68c2      	ldr	r2, [r0, #12]
 8001cfa:	2a01      	cmp	r2, #1
 8001cfc:	d020      	beq.n	8001d40 <HAL_RCC_OscConfig.constprop.0+0x134>
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	f000 8088 	beq.w	8001e14 <HAL_RCC_OscConfig.constprop.0+0x208>
 8001d04:	2a05      	cmp	r2, #5
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d08:	6a11      	ldr	r1, [r2, #32]
 8001d0a:	f000 80cb 	beq.w	8001ea4 <HAL_RCC_OscConfig.constprop.0+0x298>
 8001d0e:	f021 0101 	bic.w	r1, r1, #1
 8001d12:	6211      	str	r1, [r2, #32]
 8001d14:	6a11      	ldr	r1, [r2, #32]
 8001d16:	f021 0104 	bic.w	r1, r1, #4
 8001d1a:	6211      	str	r1, [r2, #32]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig.constprop.0+0x13e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	680a      	ldr	r2, [r1, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d26:	600a      	str	r2, [r1, #0]
 8001d28:	681d      	ldr	r5, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	680a      	ldr	r2, [r1, #0]
 8001d2c:	05d2      	lsls	r2, r2, #23
 8001d2e:	d4e3      	bmi.n	8001cf8 <HAL_RCC_OscConfig.constprop.0+0xec>
 8001d30:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	1b52      	subs	r2, r2, r5
 8001d34:	2a64      	cmp	r2, #100	; 0x64
 8001d36:	d9f8      	bls.n	8001d2a <HAL_RCC_OscConfig.constprop.0+0x11e>
            return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
}
 8001d3a:	b003      	add	sp, #12
 8001d3c:	bc70      	pop	{r4, r5, r6}
 8001d3e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	4944      	ldr	r1, [pc, #272]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d42:	6a0a      	ldr	r2, [r1, #32]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	620a      	str	r2, [r1, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f241 3c88 	movw	ip, #5000	; 0x1388
 8001d4e:	681d      	ldr	r5, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4940      	ldr	r1, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d52:	e003      	b.n	8001d5c <HAL_RCC_OscConfig.constprop.0+0x150>
 8001d54:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	1b52      	subs	r2, r2, r5
 8001d58:	4562      	cmp	r2, ip
 8001d5a:	d8ed      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	6a0a      	ldr	r2, [r1, #32]
 8001d5e:	0796      	lsls	r6, r2, #30
 8001d60:	d5f8      	bpl.n	8001d54 <HAL_RCC_OscConfig.constprop.0+0x148>
    if (pwrclkchanged == SET)
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	f040 8098 	bne.w	8001e98 <HAL_RCC_OscConfig.constprop.0+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	69c3      	ldr	r3, [r0, #28]
 8001d6a:	b1b3      	cbz	r3, 8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d6e:	684a      	ldr	r2, [r1, #4]
 8001d70:	f002 020c 	and.w	r2, r2, #12
 8001d74:	2a08      	cmp	r2, #8
 8001d76:	f000 8081 	beq.w	8001e7c <HAL_RCC_OscConfig.constprop.0+0x270>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f000 809c 	beq.w	8001eb8 <HAL_RCC_OscConfig.constprop.0+0x2ac>
        __HAL_RCC_PLL_DISABLE();
 8001d80:	2000      	movs	r0, #0
 8001d82:	4a36      	ldr	r2, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d86:	6610      	str	r0, [r2, #96]	; 0x60
 8001d88:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	e003      	b.n	8001d94 <HAL_RCC_OscConfig.constprop.0+0x188>
 8001d8c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	1a12      	subs	r2, r2, r0
 8001d90:	2a02      	cmp	r2, #2
 8001d92:	d8d1      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	680a      	ldr	r2, [r1, #0]
 8001d96:	0192      	lsls	r2, r2, #6
 8001d98:	d4f8      	bmi.n	8001d8c <HAL_RCC_OscConfig.constprop.0+0x180>
  return HAL_OK;
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	e7cd      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	03da      	lsls	r2, r3, #15
 8001da2:	f53f af60 	bmi.w	8001c66 <HAL_RCC_OscConfig.constprop.0+0x5a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	079b      	lsls	r3, r3, #30
 8001dac:	d528      	bpl.n	8001e00 <HAL_RCC_OscConfig.constprop.0+0x1f4>
 8001dae:	6903      	ldr	r3, [r0, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d025      	beq.n	8001e00 <HAL_RCC_OscConfig.constprop.0+0x1f4>
          return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7c0      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4928      	ldr	r1, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001dbc:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001dc4:	681c      	ldr	r4, [r3, #0]
 8001dc6:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001dca:	e003      	b.n	8001dd4 <HAL_RCC_OscConfig.constprop.0+0x1c8>
 8001dcc:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dce:	1b12      	subs	r2, r2, r4
 8001dd0:	2a02      	cmp	r2, #2
 8001dd2:	d8b1      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001dd6:	0792      	lsls	r2, r2, #30
 8001dd8:	d4f8      	bmi.n	8001dcc <HAL_RCC_OscConfig.constprop.0+0x1c0>
 8001dda:	e780      	b.n	8001cde <HAL_RCC_OscConfig.constprop.0+0xd2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001dde:	2401      	movs	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	9b00      	ldr	r3, [sp, #0]
 8001df0:	e77d      	b.n	8001cee <HAL_RCC_OscConfig.constprop.0+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df2:	6853      	ldr	r3, [r2, #4]
 8001df4:	03de      	lsls	r6, r3, #15
 8001df6:	f57f af18 	bpl.w	8001c2a <HAL_RCC_OscConfig.constprop.0+0x1e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e723      	b.n	8001c48 <HAL_RCC_OscConfig.constprop.0+0x3c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001e02:	6941      	ldr	r1, [r0, #20]
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	6803      	ldr	r3, [r0, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e742      	b.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	490f      	ldr	r1, [pc, #60]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1a:	6a0a      	ldr	r2, [r1, #32]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	620a      	str	r2, [r1, #32]
 8001e22:	6a0a      	ldr	r2, [r1, #32]
 8001e24:	f022 0204 	bic.w	r2, r2, #4
 8001e28:	620a      	str	r2, [r1, #32]
 8001e2a:	681e      	ldr	r6, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e003      	b.n	8001e36 <HAL_RCC_OscConfig.constprop.0+0x22a>
 8001e2e:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	1b92      	subs	r2, r2, r6
 8001e32:	42aa      	cmp	r2, r5
 8001e34:	d880      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	6a0a      	ldr	r2, [r1, #32]
 8001e38:	0792      	lsls	r2, r2, #30
 8001e3a:	d4f8      	bmi.n	8001e2e <HAL_RCC_OscConfig.constprop.0+0x222>
    if (pwrclkchanged == SET)
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d093      	beq.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
 8001e40:	e02a      	b.n	8001e98 <HAL_RCC_OscConfig.constprop.0+0x28c>
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4906      	ldr	r1, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001e46:	600a      	str	r2, [r1, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e48:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001e4c:	681c      	ldr	r4, [r3, #0]
 8001e4e:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001e52:	e00e      	b.n	8001e72 <HAL_RCC_OscConfig.constprop.0+0x266>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	20000200 	.word	0x20000200
 8001e5c:	42420000 	.word	0x42420000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	1b12      	subs	r2, r2, r4
 8001e6c:	2a02      	cmp	r2, #2
 8001e6e:	f63f af63 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	680a      	ldr	r2, [r1, #0]
 8001e74:	0795      	lsls	r5, r2, #30
 8001e76:	d4f7      	bmi.n	8001e68 <HAL_RCC_OscConfig.constprop.0+0x25c>
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	e70e      	b.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig.constprop.0+0x2a8>
        pll_config = RCC->CFGR;
 8001e80:	684b      	ldr	r3, [r1, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	6a02      	ldr	r2, [r0, #32]
 8001e84:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001e88:	4291      	cmp	r1, r2
 8001e8a:	d193      	bne.n	8001db4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
 8001e8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d081      	beq.n	8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001e96:	e78d      	b.n	8001db4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001e9a:	69d3      	ldr	r3, [r2, #28]
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	e761      	b.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	f041 0104 	orr.w	r1, r1, #4
 8001ea8:	6211      	str	r1, [r2, #32]
 8001eaa:	6a11      	ldr	r1, [r2, #32]
 8001eac:	f041 0101 	orr.w	r1, r1, #1
 8001eb0:	6211      	str	r1, [r2, #32]
 8001eb2:	e74a      	b.n	8001d4a <HAL_RCC_OscConfig.constprop.0+0x13e>
        return HAL_ERROR;
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	e740      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	2400      	movs	r4, #0
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_RCC_OscConfig.constprop.0+0x30c>)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig.constprop.0+0x310>)
 8001ebe:	6614      	str	r4, [r2, #96]	; 0x60
 8001ec0:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e004      	b.n	8001ece <HAL_RCC_OscConfig.constprop.0+0x2c2>
 8001ec4:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	1b12      	subs	r2, r2, r4
 8001ec8:	2a02      	cmp	r2, #2
 8001eca:	f63f af35 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	680a      	ldr	r2, [r1, #0]
 8001ed0:	0195      	lsls	r5, r2, #6
 8001ed2:	d4f7      	bmi.n	8001ec4 <HAL_RCC_OscConfig.constprop.0+0x2b8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed4:	6a02      	ldr	r2, [r0, #32]
 8001ed6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig.constprop.0+0x2dc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001edc:	684c      	ldr	r4, [r1, #4]
 8001ede:	6885      	ldr	r5, [r0, #8]
 8001ee0:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001ee4:	432c      	orrs	r4, r5
 8001ee6:	604c      	str	r4, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	490a      	ldr	r1, [pc, #40]	; (8001f14 <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001eec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001eee:	6848      	ldr	r0, [r1, #4]
 8001ef0:	4322      	orrs	r2, r4
 8001ef2:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4c08      	ldr	r4, [pc, #32]	; (8001f18 <HAL_RCC_OscConfig.constprop.0+0x30c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4302      	orrs	r2, r0
 8001efa:	604a      	str	r2, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001efc:	6625      	str	r5, [r4, #96]	; 0x60
 8001efe:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_OscConfig.constprop.0+0x300>
 8001f02:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	1a12      	subs	r2, r2, r0
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	f63f af16 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	680a      	ldr	r2, [r1, #0]
 8001f0e:	0194      	lsls	r4, r2, #6
 8001f10:	d5f7      	bpl.n	8001f02 <HAL_RCC_OscConfig.constprop.0+0x2f6>
 8001f12:	e742      	b.n	8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	20000200 	.word	0x20000200

08001f20 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <TIM_Base_SetConfig.constprop.0+0x8c>)
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
 8001f22:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001f26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	d02b      	beq.n	8001f82 <TIM_Base_SetConfig.constprop.0+0x62>
 8001f2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f2e:	d015      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001f30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d011      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d00d      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
 8001f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f46:	6f14      	ldr	r4, [r2, #112]	; 0x70

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	6e51      	ldr	r1, [r2, #100]	; 0x64

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f4c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001f4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f52:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	6143      	str	r3, [r0, #20]
}
 8001f5a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f62:	6e11      	ldr	r1, [r2, #96]	; 0x60
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f64:	6e94      	ldr	r4, [r2, #104]	; 0x68
    tmpcr1 |= Structure->CounterMode;
 8001f66:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	6f11      	ldr	r1, [r2, #112]	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f74:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f76:	6e51      	ldr	r1, [r2, #100]	; 0x64
  TIMx->PSC = Structure->Prescaler;
 8001f78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  TIMx->CR1 = tmpcr1;
 8001f7a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f7e:	6282      	str	r2, [r0, #40]	; 0x28
 8001f80:	e7e8      	b.n	8001f54 <TIM_Base_SetConfig.constprop.0+0x34>
    tmpcr1 |= Structure->CounterMode;
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f88:	6e14      	ldr	r4, [r2, #96]	; 0x60
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	6e91      	ldr	r1, [r2, #104]	; 0x68
    tmpcr1 |= Structure->CounterMode;
 8001f8c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001f9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001fa0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fa2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001fa4:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001fa8:	6303      	str	r3, [r0, #48]	; 0x30
 8001faa:	e7d3      	b.n	8001f54 <TIM_Base_SetConfig.constprop.0+0x34>
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	20000200 	.word	0x20000200

08001fb4 <HAL_TIM_MspPostInit.constprop.0>:

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2300      	movs	r3, #0
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001fb6:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001fb8:	4912      	ldr	r1, [pc, #72]	; (8002004 <HAL_TIM_MspPostInit.constprop.0+0x50>)
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_TIM_MspPostInit.constprop.0+0x54>)
 8001fbc:	6d89      	ldr	r1, [r1, #88]	; 0x58
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001fbe:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8001fc0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fc6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001fca:	d001      	beq.n	8001fd0 <HAL_TIM_MspPostInit.constprop.0+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fd0:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001fd4:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fe0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <HAL_TIM_MspPostInit.constprop.0+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff4:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f7ff fce4 	bl	80019c8 <HAL_GPIO_Init>
}
 8002000:	e7e4      	b.n	8001fcc <HAL_TIM_MspPostInit.constprop.0+0x18>
 8002002:	bf00      	nop
 8002004:	20000200 	.word	0x20000200
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40010800 	.word	0x40010800

08002010 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201e:	f1bc 0f04 	cmp.w	ip, #4
 8002022:	bf28      	it	cs
 8002024:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002028:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202a:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	bf98      	it	ls
 8002030:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002032:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	bf88      	it	hi
 8002038:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203a:	ea21 0102 	bic.w	r1, r1, r2
 800203e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002040:	1c43      	adds	r3, r0, #1
 8002042:	d008      	beq.n	8002056 <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	0109      	lsls	r1, r1, #4
 8002046:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800204a:	b2c9      	uxtb	r1, r1
 800204c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002050:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8002054:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8002058:	0109      	lsls	r1, r1, #4
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	b0a7      	sub	sp, #156	; 0x9c
 800206e:	460a      	mov	r2, r1
 8002070:	2301      	movs	r3, #1
 8002072:	9123      	str	r1, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8002074:	4601      	mov	r1, r0
 8002076:	9318      	str	r3, [sp, #96]	; 0x60
 8002078:	1a13      	subs	r3, r2, r0
	int signX = x1 < x2 ? 1 : -1;
 800207a:	428a      	cmp	r2, r1
 800207c:	bf8c      	ite	hi
 800207e:	2201      	movhi	r2, #1
 8002080:	f04f 32ff 	movls.w	r2, #4294967295
 8002084:	2600      	movs	r6, #0
	int error = deltaX - deltaY;
 8002086:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800208e:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8002092:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8002096:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800209a:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
	int signX = x1 < x2 ? 1 : -1;
 800209e:	9225      	str	r2, [sp, #148]	; 0x94
 80020a0:	0a0a      	lsrs	r2, r1, #8
 80020a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80020a4:	0bca      	lsrs	r2, r1, #15
 80020a6:	9216      	str	r2, [sp, #88]	; 0x58
 80020a8:	0b8a      	lsrs	r2, r1, #14
 80020aa:	9215      	str	r2, [sp, #84]	; 0x54
 80020ac:	0b4a      	lsrs	r2, r1, #13
 80020ae:	9214      	str	r2, [sp, #80]	; 0x50
 80020b0:	0b0a      	lsrs	r2, r1, #12
 80020b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80020b4:	0aca      	lsrs	r2, r1, #11
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80020b6:	900d      	str	r0, [sp, #52]	; 0x34
 80020b8:	9212      	str	r2, [sp, #72]	; 0x48
	int deltaX = abs(x2 - x1);
 80020ba:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80020be:	0a8a      	lsrs	r2, r1, #10
 80020c0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80020c4:	9211      	str	r2, [sp, #68]	; 0x44
 80020c6:	f001 0301 	and.w	r3, r1, #1
 80020ca:	0a4a      	lsrs	r2, r1, #9
 80020cc:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
 80020d0:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
 80020d4:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 80020d8:	9210      	str	r2, [sp, #64]	; 0x40
 80020da:	930e      	str	r3, [sp, #56]	; 0x38
 80020dc:	b2ca      	uxtb	r2, r1
	int error = deltaX - deltaY;
 80020de:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
 80020e2:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8002438 <LCD_Line.constprop.0+0x3d0>
 80020e6:	f8df a354 	ldr.w	sl, [pc, #852]	; 800243c <LCD_Line.constprop.0+0x3d4>
 80020ea:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8002440 <LCD_Line.constprop.0+0x3d8>
 80020ee:	9619      	str	r6, [sp, #100]	; 0x64
 80020f0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80020f4:	961a      	str	r6, [sp, #104]	; 0x68
 80020f6:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	int deltaX = abs(x2 - x1);
 80020fa:	9024      	str	r0, [sp, #144]	; 0x90
 80020fc:	9217      	str	r2, [sp, #92]	; 0x5c
	int error = deltaX - deltaY;
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002104:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8002106:	f8c8 5010 	str.w	r5, [r8, #16]
 800210a:	f8c8 e010 	str.w	lr, [r8, #16]
 800210e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002112:	f8ca 5010 	str.w	r5, [sl, #16]
 8002116:	f8c9 7010 	str.w	r7, [r9, #16]
 800211a:	f8c9 0010 	str.w	r0, [r9, #16]
 800211e:	b2b0      	uxth	r0, r6
 8002120:	f8c9 4010 	str.w	r4, [r9, #16]
 8002124:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002128:	f8c9 5010 	str.w	r5, [r9, #16]
 800212c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002130:	900c      	str	r0, [sp, #48]	; 0x30
 8002132:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	data[0] = x1 >> 8;
 8002136:	f8bd c064 	ldrh.w	ip, [sp, #100]	; 0x64
 800213a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800213e:	f8c9 1010 	str.w	r1, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002142:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002144:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002148:	2040      	movs	r0, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800214a:	f8ca 7010 	str.w	r7, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800214e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002152:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002156:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800215e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002162:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002166:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800216a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216c:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002170:	f8c8 3010 	str.w	r3, [r8, #16]
 8002174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002178:	f8c8 3010 	str.w	r3, [r8, #16]
 800217c:	2301      	movs	r3, #1
 800217e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002186:	f8c8 e010 	str.w	lr, [r8, #16]
 800218a:	f8ca 4010 	str.w	r4, [sl, #16]
 800218e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002192:	f8c9 7010 	str.w	r7, [r9, #16]
 8002196:	f8c9 3010 	str.w	r3, [r9, #16]
 800219a:	f8c9 4010 	str.w	r4, [r9, #16]
 800219e:	f8c9 5010 	str.w	r5, [r9, #16]
 80021a2:	f8c9 b010 	str.w	fp, [r9, #16]
 80021a6:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80021aa:	2e00      	cmp	r6, #0
 80021ac:	f000 8486 	beq.w	8002abc <LCD_Line.constprop.0+0xa54>
    GPIOx->BSRR = GPIO_Pin;
 80021b0:	2304      	movs	r3, #4
 80021b2:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80021b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80021b8:	f013 0001 	ands.w	r0, r3, #1
 80021bc:	bf1c      	itt	ne
 80021be:	2308      	movne	r3, #8
 80021c0:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80021c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c6:	bf08      	it	eq
 80021c8:	f8ca 7010 	streq.w	r7, [sl, #16]
 80021cc:	f013 0301 	ands.w	r3, r3, #1
 80021d0:	9307      	str	r3, [sp, #28]
 80021d2:	bf0c      	ite	eq
 80021d4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80021d8:	2310      	movne	r3, #16
 80021da:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80021de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80021e0:	f013 0301 	ands.w	r3, r3, #1
 80021e4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e6:	bf0c      	ite	eq
 80021e8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80021ec:	2320      	movne	r3, #32
 80021ee:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80021f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80021f4:	f013 0301 	ands.w	r3, r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021fa:	bf0c      	ite	eq
 80021fc:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002200:	2340      	movne	r3, #64	; 0x40
 8002202:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002206:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002208:	f013 0301 	ands.w	r3, r3, #1
 800220c:	9302      	str	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220e:	bf0c      	ite	eq
 8002210:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002214:	2380      	movne	r3, #128	; 0x80
 8002216:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800221a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800221c:	f013 0301 	ands.w	r3, r3, #1
 8002220:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002222:	bf0c      	ite	eq
 8002224:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002228:	2310      	movne	r3, #16
 800222a:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800222e:	f01c 0301 	ands.w	r3, ip, #1
 8002232:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002234:	bf0c      	ite	eq
 8002236:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800223a:	2320      	movne	r3, #32
 800223c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002240:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002242:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002246:	f8c8 3010 	str.w	r3, [r8, #16]
 800224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002252:	2301      	movs	r3, #1
 8002254:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800225c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002260:	f8ca 4010 	str.w	r4, [sl, #16]
 8002264:	f8ca 5010 	str.w	r5, [sl, #16]
 8002268:	f8c9 7010 	str.w	r7, [r9, #16]
 800226c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002274:	f8c9 4010 	str.w	r4, [r9, #16]
 8002278:	f8c9 5010 	str.w	r5, [r9, #16]
 800227c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002280:	f8c9 3010 	str.w	r3, [r9, #16]
 8002284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002286:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002288:	09d2      	lsrs	r2, r2, #7
 800228a:	9205      	str	r2, [sp, #20]
    GPIOx->BSRR = GPIO_Pin;
 800228c:	bf14      	ite	ne
 800228e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002290:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002294:	0659      	lsls	r1, r3, #25
 8002296:	f8ca 2010 	str.w	r2, [sl, #16]
 800229a:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800229e:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = GPIO_Pin;
 80022a0:	bf44      	itt	mi
 80022a2:	2208      	movmi	r2, #8
 80022a4:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80022a8:	f3c3 1240 	ubfx	r2, r3, #5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ac:	bf58      	it	pl
 80022ae:	f8ca 7010 	strpl.w	r7, [sl, #16]
 80022b2:	9209      	str	r2, [sp, #36]	; 0x24
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80022b4:	069a      	lsls	r2, r3, #26
 80022b6:	bf54      	ite	pl
 80022b8:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80022bc:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80022be:	06de      	lsls	r6, r3, #27
 80022c0:	f8ca 2010 	str.w	r2, [sl, #16]
 80022c4:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80022c8:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ca:	bf54      	ite	pl
 80022cc:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80022d0:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80022d2:	0719      	lsls	r1, r3, #28
 80022d4:	f8ca 2010 	str.w	r2, [sl, #16]
 80022d8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80022dc:	920a      	str	r2, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022de:	bf54      	ite	pl
 80022e0:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80022e4:	2240      	movmi	r2, #64	; 0x40
 80022e6:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80022ea:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ec:	bf54      	ite	pl
 80022ee:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80022f4:	079e      	lsls	r6, r3, #30
 80022f6:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80022fa:	f8ca 2010 	str.w	r2, [sl, #16]
 80022fe:	f3c3 0240 	ubfx	r2, r3, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002302:	bf54      	ite	pl
 8002304:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002308:	2310      	movmi	r3, #16
 800230a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800230c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002310:	b2b3      	uxth	r3, r6
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002312:	2e00      	cmp	r6, #0
 8002314:	f040 83cd 	bne.w	8002ab2 <LCD_Line.constprop.0+0xa4a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002318:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800231c:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002320:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002324:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002328:	f8c8 c010 	str.w	ip, [r8, #16]
 800232c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002330:	f8c8 c010 	str.w	ip, [r8, #16]
 8002334:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002338:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800233c:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002340:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8002344:	f8c8 e010 	str.w	lr, [r8, #16]
 8002348:	f8ca 4010 	str.w	r4, [sl, #16]
 800234c:	f8ca 5010 	str.w	r5, [sl, #16]
 8002350:	f8c9 7010 	str.w	r7, [r9, #16]
 8002354:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002358:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800235a:	f8c9 4010 	str.w	r4, [r9, #16]
 800235e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002362:	f8c9 b010 	str.w	fp, [r9, #16]
 8002366:	f8c9 c010 	str.w	ip, [r9, #16]
 800236a:	2e00      	cmp	r6, #0
 800236c:	f000 839c 	beq.w	8002aa8 <LCD_Line.constprop.0+0xa40>
    GPIOx->BSRR = GPIO_Pin;
 8002370:	f04f 0c04 	mov.w	ip, #4
 8002374:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002378:	2800      	cmp	r0, #0
 800237a:	f040 8391 	bne.w	8002aa0 <LCD_Line.constprop.0+0xa38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237e:	f8ca 7010 	str.w	r7, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002382:	9807      	ldr	r0, [sp, #28]
 8002384:	2800      	cmp	r0, #0
 8002386:	f040 8387 	bne.w	8002a98 <LCD_Line.constprop.0+0xa30>
 800238a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800238e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002392:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002394:	2800      	cmp	r0, #0
 8002396:	f040 837b 	bne.w	8002a90 <LCD_Line.constprop.0+0xa28>
 800239a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800239e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80023a2:	9801      	ldr	r0, [sp, #4]
 80023a4:	2800      	cmp	r0, #0
 80023a6:	f040 836f 	bne.w	8002a88 <LCD_Line.constprop.0+0xa20>
 80023aa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80023ae:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80023b2:	9802      	ldr	r0, [sp, #8]
 80023b4:	2800      	cmp	r0, #0
 80023b6:	f040 8363 	bne.w	8002a80 <LCD_Line.constprop.0+0xa18>
 80023ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80023be:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80023c2:	9803      	ldr	r0, [sp, #12]
 80023c4:	2800      	cmp	r0, #0
 80023c6:	f040 8357 	bne.w	8002a78 <LCD_Line.constprop.0+0xa10>
 80023ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80023ce:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80023d2:	9804      	ldr	r0, [sp, #16]
 80023d4:	2800      	cmp	r0, #0
 80023d6:	f040 834b 	bne.w	8002a70 <LCD_Line.constprop.0+0xa08>
 80023da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023de:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e4:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80023e8:	f8c8 0010 	str.w	r0, [r8, #16]
 80023ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023f0:	f8c8 0010 	str.w	r0, [r8, #16]
 80023f4:	2001      	movs	r0, #1
 80023f6:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80023fe:	f8c8 e010 	str.w	lr, [r8, #16]
 8002402:	f8ca 4010 	str.w	r4, [sl, #16]
 8002406:	f8ca 5010 	str.w	r5, [sl, #16]
 800240a:	f8c9 7010 	str.w	r7, [r9, #16]
 800240e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002412:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002416:	f8c9 4010 	str.w	r4, [r9, #16]
 800241a:	f8c9 5010 	str.w	r5, [r9, #16]
 800241e:	f8c9 b010 	str.w	fp, [r9, #16]
 8002422:	f8c9 0010 	str.w	r0, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002426:	9805      	ldr	r0, [sp, #20]
 8002428:	2800      	cmp	r0, #0
 800242a:	f000 831c 	beq.w	8002a66 <LCD_Line.constprop.0+0x9fe>
    GPIOx->BSRR = GPIO_Pin;
 800242e:	2004      	movs	r0, #4
 8002430:	f8ca 0010 	str.w	r0, [sl, #16]
 8002434:	e006      	b.n	8002444 <LCD_Line.constprop.0+0x3dc>
 8002436:	bf00      	nop
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40010800 	.word	0x40010800
 8002440:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002444:	9808      	ldr	r0, [sp, #32]
 8002446:	2800      	cmp	r0, #0
 8002448:	f040 8309 	bne.w	8002a5e <LCD_Line.constprop.0+0x9f6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244c:	f8ca 7010 	str.w	r7, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002452:	2800      	cmp	r0, #0
 8002454:	f040 82ff 	bne.w	8002a56 <LCD_Line.constprop.0+0x9ee>
 8002458:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800245c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002460:	9806      	ldr	r0, [sp, #24]
 8002462:	2800      	cmp	r0, #0
 8002464:	f040 82f3 	bne.w	8002a4e <LCD_Line.constprop.0+0x9e6>
 8002468:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800246c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002470:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002472:	2800      	cmp	r0, #0
 8002474:	f040 82e7 	bne.w	8002a46 <LCD_Line.constprop.0+0x9de>
 8002478:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800247c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002480:	2900      	cmp	r1, #0
 8002482:	f040 82dc 	bne.w	8002a3e <LCD_Line.constprop.0+0x9d6>
 8002486:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800248a:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800248e:	2a00      	cmp	r2, #0
 8002490:	f040 82d1 	bne.w	8002a36 <LCD_Line.constprop.0+0x9ce>
 8002494:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002498:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 82c6 	bne.w	8002a2e <LCD_Line.constprop.0+0x9c6>
 80024a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024a6:	f8c9 3010 	str.w	r3, [r9, #16]
	data[0] = y1 >> 8;
 80024aa:	f8bd c03c 	ldrh.w	ip, [sp, #60]	; 0x3c
 80024ae:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	f8cd c004 	str.w	ip, [sp, #4]
 80024ba:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024bc:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 80024c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024c4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
    GPIOx->BSRR = GPIO_Pin;
 80024c8:	2110      	movs	r1, #16
 80024ca:	960a      	str	r6, [sp, #40]	; 0x28
 80024cc:	f8c8 2010 	str.w	r2, [r8, #16]
 80024d0:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80024d8:	f8c8 e010 	str.w	lr, [r8, #16]
 80024dc:	f8ca 4010 	str.w	r4, [sl, #16]
 80024e0:	f8ca 5010 	str.w	r5, [sl, #16]
 80024e4:	f8c9 7010 	str.w	r7, [r9, #16]
 80024e8:	f8c9 c010 	str.w	ip, [r9, #16]
 80024ec:	f8c9 4010 	str.w	r4, [r9, #16]
 80024f0:	f8c9 5010 	str.w	r5, [r9, #16]
 80024f4:	f8c9 b010 	str.w	fp, [r9, #16]
 80024f8:	f8c9 0010 	str.w	r0, [r9, #16]
 80024fc:	f8ca c010 	str.w	ip, [sl, #16]
 8002500:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002504:	f8ca 7010 	str.w	r7, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002508:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800250c:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002510:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8002514:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002518:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800251c:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002520:	f8c9 1010 	str.w	r1, [r9, #16]
 8002524:	2120      	movs	r1, #32
 8002526:	f8c9 1010 	str.w	r1, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800252a:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800252e:	f8c8 2010 	str.w	r2, [r8, #16]
 8002532:	f8c8 3010 	str.w	r3, [r8, #16]
 8002536:	2301      	movs	r3, #1
 8002538:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800253c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002540:	f8c8 e010 	str.w	lr, [r8, #16]
 8002544:	f8ca 4010 	str.w	r4, [sl, #16]
 8002548:	f8ca 5010 	str.w	r5, [sl, #16]
 800254c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002550:	f8c9 3010 	str.w	r3, [r9, #16]
 8002554:	f8c9 4010 	str.w	r4, [r9, #16]
 8002558:	f8c9 5010 	str.w	r5, [r9, #16]
 800255c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002560:	f8c9 0010 	str.w	r0, [r9, #16]
 8002564:	2e00      	cmp	r6, #0
 8002566:	f000 825d 	beq.w	8002a24 <LCD_Line.constprop.0+0x9bc>
    GPIOx->BSRR = GPIO_Pin;
 800256a:	2304      	movs	r3, #4
 800256c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002572:	f013 0c01 	ands.w	ip, r3, #1
 8002576:	bf1c      	itt	ne
 8002578:	2308      	movne	r3, #8
 800257a:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800257e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002580:	bf08      	it	eq
 8002582:	f8ca 7010 	streq.w	r7, [sl, #16]
 8002586:	f013 0301 	ands.w	r3, r3, #1
 800258a:	9309      	str	r3, [sp, #36]	; 0x24
 800258c:	bf0c      	ite	eq
 800258e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002592:	2310      	movne	r3, #16
 8002594:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800259a:	f013 0301 	ands.w	r3, r3, #1
 800259e:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a0:	bf0c      	ite	eq
 80025a2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	2320      	movne	r3, #32
 80025a8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80025ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025ae:	f013 0301 	ands.w	r3, r3, #1
 80025b2:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025b4:	bf0c      	ite	eq
 80025b6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	2340      	movne	r3, #64	; 0x40
 80025bc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80025c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025c2:	f013 0301 	ands.w	r3, r3, #1
 80025c6:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c8:	bf0c      	ite	eq
 80025ca:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80025ce:	2380      	movne	r3, #128	; 0x80
 80025d0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80025d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025d6:	f013 0301 	ands.w	r3, r3, #1
 80025da:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025dc:	bf0c      	ite	eq
 80025de:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	2310      	movne	r3, #16
 80025e4:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80025e8:	9b01      	ldr	r3, [sp, #4]
 80025ea:	f013 0301 	ands.w	r3, r3, #1
 80025ee:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025f0:	bf0c      	ite	eq
 80025f2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80025f6:	2320      	movne	r3, #32
 80025f8:	f8c9 3010 	str.w	r3, [r9, #16]
 80025fc:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fe:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002602:	f8c8 3010 	str.w	r3, [r8, #16]
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	f8c8 3010 	str.w	r3, [r8, #16]
 800260e:	2301      	movs	r3, #1
 8002610:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002618:	f8c8 e010 	str.w	lr, [r8, #16]
 800261c:	f8ca 4010 	str.w	r4, [sl, #16]
 8002620:	f8ca 5010 	str.w	r5, [sl, #16]
 8002624:	f8c9 7010 	str.w	r7, [r9, #16]
 8002628:	f8c9 3010 	str.w	r3, [r9, #16]
 800262c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002630:	f8c9 4010 	str.w	r4, [r9, #16]
 8002634:	f8c9 5010 	str.w	r5, [r9, #16]
 8002638:	f8c9 b010 	str.w	fp, [r9, #16]
 800263c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800263e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002642:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002644:	09d2      	lsrs	r2, r2, #7
 8002646:	9203      	str	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8002648:	bf14      	ite	ne
 800264a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800264c:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8002650:	f8ca 2010 	str.w	r2, [sl, #16]
 8002654:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002658:	9202      	str	r2, [sp, #8]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800265a:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 800265c:	bf4a      	itet	mi
 800265e:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002660:	f8ca 7010 	strpl.w	r7, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002664:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8002668:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800266c:	069e      	lsls	r6, r3, #26
 800266e:	9201      	str	r2, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002670:	bf54      	ite	pl
 8002672:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002676:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002678:	06d8      	lsls	r0, r3, #27
 800267a:	f8ca 2010 	str.w	r2, [sl, #16]
 800267e:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002682:	4616      	mov	r6, r2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002684:	bf54      	ite	pl
 8002686:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800268a:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800268c:	0719      	lsls	r1, r3, #28
 800268e:	f8ca 2010 	str.w	r2, [sl, #16]
 8002692:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002696:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002698:	bf54      	ite	pl
 800269a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800269e:	2240      	movmi	r2, #64	; 0x40
 80026a0:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026a4:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026a6:	bf54      	ite	pl
 80026a8:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80026ac:	2280      	movmi	r2, #128	; 0x80
 80026ae:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80026b2:	f8ca 2010 	str.w	r2, [sl, #16]
 80026b6:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80026ba:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026bc:	bf54      	ite	pl
 80026be:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	2310      	movmi	r3, #16
 80026c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80026c6:	f8c9 3010 	str.w	r3, [r9, #16]
 80026ca:	b283      	uxth	r3, r0
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80026cc:	2800      	cmp	r0, #0
 80026ce:	f040 81a5 	bne.w	8002a1c <LCD_Line.constprop.0+0x9b4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026d6:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026da:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026dc:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026e0:	f8c8 0010 	str.w	r0, [r8, #16]
 80026e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026e8:	f8c8 0010 	str.w	r0, [r8, #16]
 80026ec:	2001      	movs	r0, #1
 80026ee:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80026f6:	f8c8 e010 	str.w	lr, [r8, #16]
 80026fa:	f8ca 4010 	str.w	r4, [sl, #16]
 80026fe:	f8ca 5010 	str.w	r5, [sl, #16]
 8002702:	f8c9 7010 	str.w	r7, [r9, #16]
 8002706:	f8c9 0010 	str.w	r0, [r9, #16]
 800270a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800270e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002712:	f8c9 5010 	str.w	r5, [r9, #16]
 8002716:	f8c9 b010 	str.w	fp, [r9, #16]
 800271a:	f8c9 0010 	str.w	r0, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800271e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002720:	2800      	cmp	r0, #0
 8002722:	f000 8176 	beq.w	8002a12 <LCD_Line.constprop.0+0x9aa>
    GPIOx->BSRR = GPIO_Pin;
 8002726:	2004      	movs	r0, #4
 8002728:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800272c:	f1bc 0f00 	cmp.w	ip, #0
 8002730:	f040 816b 	bne.w	8002a0a <LCD_Line.constprop.0+0x9a2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002734:	f8ca 7010 	str.w	r7, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800273a:	2800      	cmp	r0, #0
 800273c:	f040 8161 	bne.w	8002a02 <LCD_Line.constprop.0+0x99a>
 8002740:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002744:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002748:	9808      	ldr	r0, [sp, #32]
 800274a:	2800      	cmp	r0, #0
 800274c:	f040 8155 	bne.w	80029fa <LCD_Line.constprop.0+0x992>
 8002750:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002754:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002758:	9807      	ldr	r0, [sp, #28]
 800275a:	2800      	cmp	r0, #0
 800275c:	f040 8149 	bne.w	80029f2 <LCD_Line.constprop.0+0x98a>
 8002760:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002764:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002768:	9806      	ldr	r0, [sp, #24]
 800276a:	2800      	cmp	r0, #0
 800276c:	f040 813d 	bne.w	80029ea <LCD_Line.constprop.0+0x982>
 8002770:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002774:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002778:	9805      	ldr	r0, [sp, #20]
 800277a:	2800      	cmp	r0, #0
 800277c:	f040 8131 	bne.w	80029e2 <LCD_Line.constprop.0+0x97a>
 8002780:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002784:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002788:	9804      	ldr	r0, [sp, #16]
 800278a:	2800      	cmp	r0, #0
 800278c:	f040 8125 	bne.w	80029da <LCD_Line.constprop.0+0x972>
 8002790:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002794:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002798:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800279a:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800279e:	f8c8 0010 	str.w	r0, [r8, #16]
 80027a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027a6:	f8c8 0010 	str.w	r0, [r8, #16]
 80027aa:	2001      	movs	r0, #1
 80027ac:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80027b4:	f8c8 e010 	str.w	lr, [r8, #16]
 80027b8:	f8ca 4010 	str.w	r4, [sl, #16]
 80027bc:	f8ca 5010 	str.w	r5, [sl, #16]
 80027c0:	f8c9 7010 	str.w	r7, [r9, #16]
 80027c4:	f8c9 0010 	str.w	r0, [r9, #16]
 80027c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027cc:	f8c9 4010 	str.w	r4, [r9, #16]
 80027d0:	f8c9 5010 	str.w	r5, [r9, #16]
 80027d4:	f8c9 b010 	str.w	fp, [r9, #16]
 80027d8:	f8c9 0010 	str.w	r0, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027dc:	9803      	ldr	r0, [sp, #12]
 80027de:	2800      	cmp	r0, #0
 80027e0:	f000 80f6 	beq.w	80029d0 <LCD_Line.constprop.0+0x968>
    GPIOx->BSRR = GPIO_Pin;
 80027e4:	2004      	movs	r0, #4
 80027e6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027ea:	9802      	ldr	r0, [sp, #8]
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f040 80eb 	bne.w	80029c8 <LCD_Line.constprop.0+0x960>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f2:	f8ca 7010 	str.w	r7, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027f6:	9801      	ldr	r0, [sp, #4]
 80027f8:	2800      	cmp	r0, #0
 80027fa:	f040 80e1 	bne.w	80029c0 <LCD_Line.constprop.0+0x958>
 80027fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002802:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002806:	2e00      	cmp	r6, #0
 8002808:	f040 80d6 	bne.w	80029b8 <LCD_Line.constprop.0+0x950>
 800280c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002810:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002814:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002816:	2800      	cmp	r0, #0
 8002818:	f040 80ca 	bne.w	80029b0 <LCD_Line.constprop.0+0x948>
 800281c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002820:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002824:	2900      	cmp	r1, #0
 8002826:	f040 80bf 	bne.w	80029a8 <LCD_Line.constprop.0+0x940>
 800282a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800282e:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002832:	2a00      	cmp	r2, #0
 8002834:	f040 80ae 	bne.w	8002994 <LCD_Line.constprop.0+0x92c>
 8002838:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800283c:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80ad 	bne.w	80029a0 <LCD_Line.constprop.0+0x938>
 8002846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800284a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800284e:	2302      	movs	r3, #2
 8002850:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002854:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 8002858:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800285c:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002860:	2110      	movs	r1, #16
 8002862:	f8c8 3010 	str.w	r3, [r8, #16]
 8002866:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286a:	f8c8 5010 	str.w	r5, [r8, #16]
 800286e:	f8c8 e010 	str.w	lr, [r8, #16]
 8002872:	f8ca 4010 	str.w	r4, [sl, #16]
 8002876:	f8ca 5010 	str.w	r5, [sl, #16]
 800287a:	f8c9 7010 	str.w	r7, [r9, #16]
 800287e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002882:	f8c9 4010 	str.w	r4, [r9, #16]
 8002886:	f8c9 5010 	str.w	r5, [r9, #16]
 800288a:	f8c9 b010 	str.w	fp, [r9, #16]
 800288e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002892:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002896:	f8ca c010 	str.w	ip, [sl, #16]
 800289a:	f8ca 7010 	str.w	r7, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800289e:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	2640      	movs	r6, #64	; 0x40
 80028a8:	f8ca 6010 	str.w	r6, [sl, #16]
 80028ac:	2680      	movs	r6, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ae:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028b6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80028ba:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028be:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c0:	f8c9 6010 	str.w	r6, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028c4:	f04f 0c04 	mov.w	ip, #4
 80028c8:	2608      	movs	r6, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ca:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	f8c8 3010 	str.w	r3, [r8, #16]
 80028d2:	f8c8 0010 	str.w	r0, [r8, #16]
 80028d6:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028da:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028de:	f8ca 3010 	str.w	r3, [sl, #16]
 80028e2:	f8ca 2010 	str.w	r2, [sl, #16]
 80028e6:	f8c9 6010 	str.w	r6, [r9, #16]
 80028ea:	f8c9 c010 	str.w	ip, [r9, #16]
 80028ee:	f8c9 3010 	str.w	r3, [r9, #16]
 80028f2:	f8c9 2010 	str.w	r2, [r9, #16]
 80028f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028fa:	f8c9 2010 	str.w	r2, [r9, #16]
 80028fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002902:	f8c9 2010 	str.w	r2, [r9, #16]
 8002906:	f8ca c010 	str.w	ip, [sl, #16]
 800290a:	2220      	movs	r2, #32
 800290c:	f8ca 6010 	str.w	r6, [sl, #16]
 8002910:	2640      	movs	r6, #64	; 0x40
 8002912:	f8ca 1010 	str.w	r1, [sl, #16]
 8002916:	f8ca 2010 	str.w	r2, [sl, #16]
 800291a:	f8ca 6010 	str.w	r6, [sl, #16]
 800291e:	2680      	movs	r6, #128	; 0x80
 8002920:	f8ca 6010 	str.w	r6, [sl, #16]
 8002924:	f8c9 1010 	str.w	r1, [r9, #16]
 8002928:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800292c:	f8c8 4010 	str.w	r4, [r8, #16]
		if (x1 == x2 && y1 == y2)
 8002930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8002932:	f8c8 3010 	str.w	r3, [r8, #16]
 8002936:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002938:	f8c8 0010 	str.w	r0, [r8, #16]
 800293c:	4293      	cmp	r3, r2
 800293e:	f000 8100 	beq.w	8002b42 <LCD_Line.constprop.0+0xada>
		error2 = error * 2;
 8002942:	9900      	ldr	r1, [sp, #0]
 8002944:	004b      	lsls	r3, r1, #1
		if (error2 > -deltaY)
 8002946:	f113 0f7e 	cmn.w	r3, #126	; 0x7e
 800294a:	f2c0 80d3 	blt.w	8002af4 <LCD_Line.constprop.0+0xa8c>
			x1 += signX;
 800294e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			error -= deltaY;
 8002950:	397f      	subs	r1, #127	; 0x7f
			x1 += signX;
 8002952:	9825      	ldr	r0, [sp, #148]	; 0x94
			error -= deltaY;
 8002954:	9100      	str	r1, [sp, #0]
		if (error2 < deltaX)
 8002956:	9924      	ldr	r1, [sp, #144]	; 0x90
			x1 += signX;
 8002958:	4402      	add	r2, r0
 800295a:	b292      	uxth	r2, r2
		if (error2 < deltaX)
 800295c:	4299      	cmp	r1, r3
			x1 += signX;
 800295e:	920d      	str	r2, [sp, #52]	; 0x34
		if (error2 < deltaX)
 8002960:	f300 80b2 	bgt.w	8002ac8 <LCD_Line.constprop.0+0xa60>
 8002964:	4613      	mov	r3, r2
 8002966:	0a12      	lsrs	r2, r2, #8
 8002968:	920f      	str	r2, [sp, #60]	; 0x3c
 800296a:	0bda      	lsrs	r2, r3, #15
 800296c:	9216      	str	r2, [sp, #88]	; 0x58
 800296e:	0b9a      	lsrs	r2, r3, #14
 8002970:	9215      	str	r2, [sp, #84]	; 0x54
 8002972:	0b5a      	lsrs	r2, r3, #13
 8002974:	9214      	str	r2, [sp, #80]	; 0x50
 8002976:	0b1a      	lsrs	r2, r3, #12
 8002978:	9213      	str	r2, [sp, #76]	; 0x4c
 800297a:	0ada      	lsrs	r2, r3, #11
 800297c:	9212      	str	r2, [sp, #72]	; 0x48
 800297e:	0a9a      	lsrs	r2, r3, #10
 8002980:	9211      	str	r2, [sp, #68]	; 0x44
 8002982:	0a5a      	lsrs	r2, r3, #9
 8002984:	9210      	str	r2, [sp, #64]	; 0x40
 8002986:	b2da      	uxtb	r2, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	9217      	str	r2, [sp, #92]	; 0x5c
 800298e:	930e      	str	r3, [sp, #56]	; 0x38
 8002990:	f7ff bbb6 	b.w	8002100 <LCD_Line.constprop.0+0x98>
 8002994:	2210      	movs	r2, #16
 8002996:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800299a:	2b00      	cmp	r3, #0
 800299c:	f43f af53 	beq.w	8002846 <LCD_Line.constprop.0+0x7de>
 80029a0:	2320      	movs	r3, #32
 80029a2:	f8c9 3010 	str.w	r3, [r9, #16]
 80029a6:	e752      	b.n	800284e <LCD_Line.constprop.0+0x7e6>
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	f8ca 1010 	str.w	r1, [sl, #16]
 80029ae:	e740      	b.n	8002832 <LCD_Line.constprop.0+0x7ca>
 80029b0:	2040      	movs	r0, #64	; 0x40
 80029b2:	f8ca 0010 	str.w	r0, [sl, #16]
 80029b6:	e735      	b.n	8002824 <LCD_Line.constprop.0+0x7bc>
 80029b8:	2020      	movs	r0, #32
 80029ba:	f8ca 0010 	str.w	r0, [sl, #16]
 80029be:	e729      	b.n	8002814 <LCD_Line.constprop.0+0x7ac>
 80029c0:	2010      	movs	r0, #16
 80029c2:	f8ca 0010 	str.w	r0, [sl, #16]
 80029c6:	e71e      	b.n	8002806 <LCD_Line.constprop.0+0x79e>
 80029c8:	2008      	movs	r0, #8
 80029ca:	f8ca 0010 	str.w	r0, [sl, #16]
 80029ce:	e712      	b.n	80027f6 <LCD_Line.constprop.0+0x78e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029d4:	f8ca 0010 	str.w	r0, [sl, #16]
 80029d8:	e707      	b.n	80027ea <LCD_Line.constprop.0+0x782>
    GPIOx->BSRR = GPIO_Pin;
 80029da:	2020      	movs	r0, #32
 80029dc:	f8c9 0010 	str.w	r0, [r9, #16]
 80029e0:	e6da      	b.n	8002798 <LCD_Line.constprop.0+0x730>
 80029e2:	2010      	movs	r0, #16
 80029e4:	f8c9 0010 	str.w	r0, [r9, #16]
 80029e8:	e6ce      	b.n	8002788 <LCD_Line.constprop.0+0x720>
 80029ea:	2080      	movs	r0, #128	; 0x80
 80029ec:	f8ca 0010 	str.w	r0, [sl, #16]
 80029f0:	e6c2      	b.n	8002778 <LCD_Line.constprop.0+0x710>
 80029f2:	2040      	movs	r0, #64	; 0x40
 80029f4:	f8ca 0010 	str.w	r0, [sl, #16]
 80029f8:	e6b6      	b.n	8002768 <LCD_Line.constprop.0+0x700>
 80029fa:	2020      	movs	r0, #32
 80029fc:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a00:	e6aa      	b.n	8002758 <LCD_Line.constprop.0+0x6f0>
 8002a02:	2010      	movs	r0, #16
 8002a04:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a08:	e69e      	b.n	8002748 <LCD_Line.constprop.0+0x6e0>
 8002a0a:	2008      	movs	r0, #8
 8002a0c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a10:	e692      	b.n	8002738 <LCD_Line.constprop.0+0x6d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a16:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a1a:	e687      	b.n	800272c <LCD_Line.constprop.0+0x6c4>
    GPIOx->BSRR = GPIO_Pin;
 8002a1c:	2020      	movs	r0, #32
 8002a1e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a22:	e65a      	b.n	80026da <LCD_Line.constprop.0+0x672>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a28:	f8ca 3010 	str.w	r3, [sl, #16]
 8002a2c:	e5a0      	b.n	8002570 <LCD_Line.constprop.0+0x508>
    GPIOx->BSRR = GPIO_Pin;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a34:	e539      	b.n	80024aa <LCD_Line.constprop.0+0x442>
 8002a36:	2210      	movs	r2, #16
 8002a38:	f8c9 2010 	str.w	r2, [r9, #16]
 8002a3c:	e52e      	b.n	800249c <LCD_Line.constprop.0+0x434>
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	f8ca 1010 	str.w	r1, [sl, #16]
 8002a44:	e523      	b.n	800248e <LCD_Line.constprop.0+0x426>
 8002a46:	2040      	movs	r0, #64	; 0x40
 8002a48:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a4c:	e518      	b.n	8002480 <LCD_Line.constprop.0+0x418>
 8002a4e:	2020      	movs	r0, #32
 8002a50:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a54:	e50c      	b.n	8002470 <LCD_Line.constprop.0+0x408>
 8002a56:	2010      	movs	r0, #16
 8002a58:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a5c:	e500      	b.n	8002460 <LCD_Line.constprop.0+0x3f8>
 8002a5e:	2008      	movs	r0, #8
 8002a60:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a64:	e4f4      	b.n	8002450 <LCD_Line.constprop.0+0x3e8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a6a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a6e:	e4e9      	b.n	8002444 <LCD_Line.constprop.0+0x3dc>
    GPIOx->BSRR = GPIO_Pin;
 8002a70:	2020      	movs	r0, #32
 8002a72:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a76:	e4b4      	b.n	80023e2 <LCD_Line.constprop.0+0x37a>
 8002a78:	2010      	movs	r0, #16
 8002a7a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a7e:	e4a8      	b.n	80023d2 <LCD_Line.constprop.0+0x36a>
 8002a80:	2080      	movs	r0, #128	; 0x80
 8002a82:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a86:	e49c      	b.n	80023c2 <LCD_Line.constprop.0+0x35a>
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a8e:	e490      	b.n	80023b2 <LCD_Line.constprop.0+0x34a>
 8002a90:	2020      	movs	r0, #32
 8002a92:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a96:	e484      	b.n	80023a2 <LCD_Line.constprop.0+0x33a>
 8002a98:	2010      	movs	r0, #16
 8002a9a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a9e:	e478      	b.n	8002392 <LCD_Line.constprop.0+0x32a>
 8002aa0:	2008      	movs	r0, #8
 8002aa2:	f8ca 0010 	str.w	r0, [sl, #16]
 8002aa6:	e46c      	b.n	8002382 <LCD_Line.constprop.0+0x31a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa8:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8002aac:	f8ca 6010 	str.w	r6, [sl, #16]
 8002ab0:	e462      	b.n	8002378 <LCD_Line.constprop.0+0x310>
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	f04f 0c20 	mov.w	ip, #32
 8002ab6:	f8c9 c010 	str.w	ip, [r9, #16]
 8002aba:	e431      	b.n	8002320 <LCD_Line.constprop.0+0x2b8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ac0:	f8ca 3010 	str.w	r3, [sl, #16]
 8002ac4:	f7ff bb77 	b.w	80021b6 <LCD_Line.constprop.0+0x14e>
 8002ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aca:	0a1a      	lsrs	r2, r3, #8
 8002acc:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ace:	0bda      	lsrs	r2, r3, #15
 8002ad0:	9216      	str	r2, [sp, #88]	; 0x58
 8002ad2:	0b9a      	lsrs	r2, r3, #14
 8002ad4:	9215      	str	r2, [sp, #84]	; 0x54
 8002ad6:	0b5a      	lsrs	r2, r3, #13
 8002ad8:	9214      	str	r2, [sp, #80]	; 0x50
 8002ada:	0b1a      	lsrs	r2, r3, #12
 8002adc:	9213      	str	r2, [sp, #76]	; 0x4c
 8002ade:	0ada      	lsrs	r2, r3, #11
 8002ae0:	9212      	str	r2, [sp, #72]	; 0x48
 8002ae2:	0a9a      	lsrs	r2, r3, #10
 8002ae4:	9211      	str	r2, [sp, #68]	; 0x44
 8002ae6:	0a5a      	lsrs	r2, r3, #9
 8002ae8:	9210      	str	r2, [sp, #64]	; 0x40
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	9217      	str	r2, [sp, #92]	; 0x5c
 8002af2:	930e      	str	r3, [sp, #56]	; 0x38
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
			error += deltaX;
 8002af6:	9a00      	ldr	r2, [sp, #0]
 8002af8:	9924      	ldr	r1, [sp, #144]	; 0x90
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002afa:	3301      	adds	r3, #1
			error += deltaX;
 8002afc:	440a      	add	r2, r1
 8002afe:	9200      	str	r2, [sp, #0]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	9222      	str	r2, [sp, #136]	; 0x88
 8002b04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002b08:	9219      	str	r2, [sp, #100]	; 0x64
 8002b0a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002b0e:	9220      	str	r2, [sp, #128]	; 0x80
 8002b10:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002b14:	921f      	str	r2, [sp, #124]	; 0x7c
 8002b16:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002b1a:	921e      	str	r2, [sp, #120]	; 0x78
 8002b1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002b20:	921d      	str	r2, [sp, #116]	; 0x74
 8002b22:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002b26:	921c      	str	r2, [sp, #112]	; 0x70
 8002b28:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002b2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8002b2e:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002b32:	921a      	str	r2, [sp, #104]	; 0x68
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	9221      	str	r2, [sp, #132]	; 0x84
 8002b3c:	9318      	str	r3, [sp, #96]	; 0x60
 8002b3e:	f7ff badf 	b.w	8002100 <LCD_Line.constprop.0+0x98>
		if (x1 == x2 && y1 == y2)
 8002b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b44:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002b48:	f47f aefb 	bne.w	8002942 <LCD_Line.constprop.0+0x8da>
}
 8002b4c:	b027      	add	sp, #156	; 0x9c
 8002b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b52:	bf00      	nop

08002b54 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b58:	4686      	mov	lr, r0
 8002b5a:	b0bb      	sub	sp, #236	; 0xec
	int deltaX = abs(x2 - x1);
 8002b5c:	9202      	str	r2, [sp, #8]
 8002b5e:	eba2 020e 	sub.w	r2, r2, lr
 8002b62:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 8002b66:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 8002b6a:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002b6e:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 8002b70:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 8002b72:	460d      	mov	r5, r1
 8002b74:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8002b78:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 8002b7c:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 8002b7e:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 8002b80:	4572      	cmp	r2, lr
 8002b82:	bf8c      	ite	hi
 8002b84:	2201      	movhi	r2, #1
 8002b86:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8002b8a:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 8002b8e:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8002b90:	bf34      	ite	cc
 8002b92:	2201      	movcc	r2, #1
 8002b94:	f04f 32ff 	movcs.w	r2, #4294967295
 8002b98:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8002b9a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002b9e:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 8002ba2:	0152      	lsls	r2, r2, #5
 8002ba4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002ba8:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8002bac:	9136      	str	r1, [sp, #216]	; 0xd8
 8002bae:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8002bb2:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8002bb6:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8002bba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bbe:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8002bc2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	2602      	movs	r6, #2
 8002bc8:	9103      	str	r1, [sp, #12]
 8002bca:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8002bce:	9104      	str	r1, [sp, #16]
 8002bd0:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8002bd4:	9105      	str	r1, [sp, #20]
 8002bd6:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8002bda:	9106      	str	r1, [sp, #24]
 8002bdc:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8002be0:	9107      	str	r1, [sp, #28]
 8002be2:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8002be6:	9108      	str	r1, [sp, #32]
 8002be8:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8002bec:	9109      	str	r1, [sp, #36]	; 0x24
 8002bee:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8002bf2:	910a      	str	r1, [sp, #40]	; 0x28
 8002bf4:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8002bf8:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8002bfc:	920c      	str	r2, [sp, #48]	; 0x30
 8002bfe:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8002c02:	920d      	str	r2, [sp, #52]	; 0x34
 8002c04:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002c08:	920e      	str	r2, [sp, #56]	; 0x38
 8002c0a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002c0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002c10:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002c14:	9210      	str	r2, [sp, #64]	; 0x40
 8002c16:	0a2a      	lsrs	r2, r5, #8
 8002c18:	9225      	str	r2, [sp, #148]	; 0x94
 8002c1a:	0bea      	lsrs	r2, r5, #15
 8002c1c:	9233      	str	r2, [sp, #204]	; 0xcc
 8002c1e:	0baa      	lsrs	r2, r5, #14
 8002c20:	9231      	str	r2, [sp, #196]	; 0xc4
 8002c22:	0b6a      	lsrs	r2, r5, #13
 8002c24:	922f      	str	r2, [sp, #188]	; 0xbc
 8002c26:	0b2a      	lsrs	r2, r5, #12
 8002c28:	922d      	str	r2, [sp, #180]	; 0xb4
 8002c2a:	0aea      	lsrs	r2, r5, #11
 8002c2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c30:	922b      	str	r2, [sp, #172]	; 0xac
 8002c32:	0aaa      	lsrs	r2, r5, #10
 8002c34:	9311      	str	r3, [sp, #68]	; 0x44
 8002c36:	9229      	str	r2, [sp, #164]	; 0xa4
 8002c38:	f005 0301 	and.w	r3, r5, #1
 8002c3c:	0a6a      	lsrs	r2, r5, #9
 8002c3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c40:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 8002c42:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002c44:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c46:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8002c4a:	9324      	str	r3, [sp, #144]	; 0x90
 8002c4c:	ea4f 33de 	mov.w	r3, lr, lsr #15
 8002c50:	9332      	str	r3, [sp, #200]	; 0xc8
 8002c52:	ea4f 339e 	mov.w	r3, lr, lsr #14
 8002c56:	9330      	str	r3, [sp, #192]	; 0xc0
 8002c58:	ea4f 335e 	mov.w	r3, lr, lsr #13
 8002c5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8002c5e:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8002c62:	932c      	str	r3, [sp, #176]	; 0xb0
 8002c64:	ea4f 23de 	mov.w	r3, lr, lsr #11
 8002c68:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8002c6a:	932a      	str	r3, [sp, #168]	; 0xa8
 8002c6c:	ea4f 239e 	mov.w	r3, lr, lsr #10
 8002c70:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c72:	ea4f 235e 	mov.w	r3, lr, lsr #9
 8002c76:	1a52      	subs	r2, r2, r1
 8002c78:	9326      	str	r3, [sp, #152]	; 0x98
 8002c7a:	fa5f f38e 	uxtb.w	r3, lr
 8002c7e:	9212      	str	r2, [sp, #72]	; 0x48
 8002c80:	9320      	str	r3, [sp, #128]	; 0x80
 8002c82:	b2ea      	uxtb	r2, r5
 8002c84:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c88:	f8df a358 	ldr.w	sl, [pc, #856]	; 8002fe4 <LCD_Line.constprop.1+0x490>
 8002c8c:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8002fe8 <LCD_Line.constprop.1+0x494>
 8002c90:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8002fec <LCD_Line.constprop.1+0x498>
 8002c94:	9221      	str	r2, [sp, #132]	; 0x84
 8002c96:	9322      	str	r3, [sp, #136]	; 0x88
 8002c98:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 8002c9c:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8002ca0:	f8ca c010 	str.w	ip, [sl, #16]
 8002ca4:	f8ca b010 	str.w	fp, [sl, #16]
 8002ca8:	f8c9 0010 	str.w	r0, [r9, #16]
 8002cac:	f8c9 c010 	str.w	ip, [r9, #16]
 8002cb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8002cb4:	f8c8 7010 	str.w	r7, [r8, #16]
 8002cb8:	f8c8 0010 	str.w	r0, [r8, #16]
 8002cbc:	f8c8 c010 	str.w	ip, [r8, #16]
 8002cc0:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002cc2:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8002cc4:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002cc8:	b2ab      	uxth	r3, r5
 8002cca:	9315      	str	r3, [sp, #84]	; 0x54
 8002ccc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002cd0:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd6:	f8c8 e010 	str.w	lr, [r8, #16]
 8002cda:	f8c8 1010 	str.w	r1, [r8, #16]
 8002cde:	f8c9 7010 	str.w	r7, [r9, #16]
 8002ce2:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cea:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002cf8:	f8c9 3010 	str.w	r3, [r9, #16]
 8002cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002d00:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d04:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d0c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d10:	f8ca 6010 	str.w	r6, [sl, #16]
 8002d14:	f8ca 3010 	str.w	r3, [sl, #16]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d1e:	f8ca b010 	str.w	fp, [sl, #16]
 8002d22:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d26:	f8c9 c010 	str.w	ip, [r9, #16]
 8002d2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8002d2e:	f8c8 7010 	str.w	r7, [r8, #16]
 8002d32:	f8c8 0010 	str.w	r0, [r8, #16]
 8002d36:	f8c8 c010 	str.w	ip, [r8, #16]
 8002d3a:	f8c8 e010 	str.w	lr, [r8, #16]
 8002d3e:	f8c8 1010 	str.w	r1, [r8, #16]
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	f000 8560 	beq.w	8003808 <LCD_Line.constprop.1+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002d4e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002d50:	f013 0301 	ands.w	r3, r3, #1
 8002d54:	9316      	str	r3, [sp, #88]	; 0x58
 8002d56:	bf1c      	itt	ne
 8002d58:	2308      	movne	r3, #8
 8002d5a:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002d5e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d60:	bf08      	it	eq
 8002d62:	f8c9 4010 	streq.w	r4, [r9, #16]
 8002d66:	f013 0301 	ands.w	r3, r3, #1
 8002d6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8002d6c:	bf0c      	ite	eq
 8002d6e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	2310      	movne	r3, #16
 8002d74:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002d78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8002d7a:	f013 0301 	ands.w	r3, r3, #1
 8002d7e:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d80:	bf0c      	ite	eq
 8002d82:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	2320      	movne	r3, #32
 8002d88:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002d8c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002d8e:	f013 0301 	ands.w	r3, r3, #1
 8002d92:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d94:	bf0c      	ite	eq
 8002d96:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	2340      	movne	r3, #64	; 0x40
 8002d9c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002da0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002da2:	f013 0301 	ands.w	r3, r3, #1
 8002da6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da8:	bf0c      	ite	eq
 8002daa:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	2380      	movne	r3, #128	; 0x80
 8002db0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002db4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002db6:	f013 0301 	ands.w	r3, r3, #1
 8002dba:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dbc:	bf0c      	ite	eq
 8002dbe:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002dc2:	2310      	movne	r3, #16
 8002dc4:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002dca:	f013 0301 	ands.w	r3, r3, #1
 8002dce:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd0:	bf0c      	ite	eq
 8002dd2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	2320      	movne	r3, #32
 8002dd8:	f8c8 3010 	str.w	r3, [r8, #16]
 8002ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002de0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002de4:	f8ca 6010 	str.w	r6, [sl, #16]
 8002de8:	f8ca 3010 	str.w	r3, [sl, #16]
 8002dec:	2301      	movs	r3, #1
 8002dee:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002df2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002df6:	f8ca b010 	str.w	fp, [sl, #16]
 8002dfa:	f8c9 0010 	str.w	r0, [r9, #16]
 8002dfe:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e02:	f8c8 4010 	str.w	r4, [r8, #16]
 8002e06:	f8c8 7010 	str.w	r7, [r8, #16]
 8002e0a:	f8c8 0010 	str.w	r0, [r8, #16]
 8002e0e:	f8c8 c010 	str.w	ip, [r8, #16]
 8002e12:	f8c8 3010 	str.w	r3, [r8, #16]
 8002e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e1a:	f8c8 3010 	str.w	r3, [r8, #16]
 8002e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e20:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8002e22:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002e26:	09db      	lsrs	r3, r3, #7
 8002e28:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	bf16      	itet	ne
 8002e2c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e2e:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002e36:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002e3a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002e3e:	931d      	str	r3, [sp, #116]	; 0x74
 8002e40:	bf16      	itet	ne
 8002e42:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e44:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e48:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002e4c:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002e50:	f01e 0f20 	tst.w	lr, #32
 8002e54:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e56:	bf0c      	ite	eq
 8002e58:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002e5c:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002e5e:	f01e 0f10 	tst.w	lr, #16
 8002e62:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e66:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8002e6a:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e6c:	bf0c      	ite	eq
 8002e6e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002e74:	f01e 0f08 	tst.w	lr, #8
 8002e78:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e7c:	bf0c      	ite	eq
 8002e7e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002e84:	f01e 0f04 	tst.w	lr, #4
 8002e88:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e8c:	bf0c      	ite	eq
 8002e8e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002e94:	f01e 0f02 	tst.w	lr, #2
 8002e98:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8002e9c:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8002ea0:	f8c9 3010 	str.w	r3, [r9, #16]
 8002ea4:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ea8:	bf0c      	ite	eq
 8002eaa:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	f04f 0e10 	movne.w	lr, #16
 8002eb2:	f8c8 e010 	str.w	lr, [r8, #16]
 8002eb6:	fa1f fe85 	uxth.w	lr, r5
 8002eba:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	f040 849c 	bne.w	80037fc <LCD_Line.constprop.1+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ec4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002ec8:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ecc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002ed0:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ed8:	f8ca 6010 	str.w	r6, [sl, #16]
 8002edc:	f8ca 5010 	str.w	r5, [sl, #16]
 8002ee0:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ee4:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002ee8:	f8ca b010 	str.w	fp, [sl, #16]
 8002eec:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ef0:	f8c9 c010 	str.w	ip, [r9, #16]
 8002ef4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ef8:	f8c8 7010 	str.w	r7, [r8, #16]
 8002efc:	f8c8 0010 	str.w	r0, [r8, #16]
 8002f00:	f8c8 c010 	str.w	ip, [r8, #16]
 8002f04:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f08:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002f0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002f0e:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	f000 846e 	beq.w	80037f4 <LCD_Line.constprop.1+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8002f18:	f04f 0e04 	mov.w	lr, #4
 8002f1c:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002f20:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002f22:	2d00      	cmp	r5, #0
 8002f24:	f040 8460 	bne.w	80037e8 <LCD_Line.constprop.1+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f28:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002f2c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	f040 8454 	bne.w	80037dc <LCD_Line.constprop.1+0xc88>
 8002f34:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002f38:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002f3c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	f040 8446 	bne.w	80037d0 <LCD_Line.constprop.1+0xc7c>
 8002f44:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002f48:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002f4c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	f040 8438 	bne.w	80037c4 <LCD_Line.constprop.1+0xc70>
 8002f54:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8002f58:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002f5c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	f040 842a 	bne.w	80037b8 <LCD_Line.constprop.1+0xc64>
 8002f64:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8002f68:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002f6c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	f040 841c 	bne.w	80037ac <LCD_Line.constprop.1+0xc58>
 8002f74:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002f78:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002f7c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002f7e:	2d00      	cmp	r5, #0
 8002f80:	f040 840e 	bne.w	80037a0 <LCD_Line.constprop.1+0xc4c>
 8002f84:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002f88:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f8c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002f90:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f94:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f98:	f8ca 6010 	str.w	r6, [sl, #16]
 8002f9c:	f8ca 5010 	str.w	r5, [sl, #16]
 8002fa0:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fa4:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002fa8:	f8ca b010 	str.w	fp, [sl, #16]
 8002fac:	f8c9 0010 	str.w	r0, [r9, #16]
 8002fb0:	f8c9 c010 	str.w	ip, [r9, #16]
 8002fb4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002fb8:	f8c8 7010 	str.w	r7, [r8, #16]
 8002fbc:	f8c8 0010 	str.w	r0, [r8, #16]
 8002fc0:	f8c8 c010 	str.w	ip, [r8, #16]
 8002fc4:	f8c8 e010 	str.w	lr, [r8, #16]
 8002fc8:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002fcc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002fce:	f8c8 e010 	str.w	lr, [r8, #16]
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	f000 83e1 	beq.w	800379a <LCD_Line.constprop.1+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8002fd8:	f04f 0e04 	mov.w	lr, #4
 8002fdc:	f8c9 e010 	str.w	lr, [r9, #16]
 8002fe0:	e006      	b.n	8002ff0 <LCD_Line.constprop.1+0x49c>
 8002fe2:	bf00      	nop
 8002fe4:	40010c00 	.word	0x40010c00
 8002fe8:	40010800 	.word	0x40010800
 8002fec:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002ff0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002ff2:	2d00      	cmp	r5, #0
 8002ff4:	f040 83cc 	bne.w	8003790 <LCD_Line.constprop.1+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff8:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002ffc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	f040 83c1 	bne.w	8003786 <LCD_Line.constprop.1+0xc32>
 8003004:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8003008:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800300c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800300e:	2d00      	cmp	r5, #0
 8003010:	f040 83b4 	bne.w	800377c <LCD_Line.constprop.1+0xc28>
 8003014:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8003018:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800301c:	2900      	cmp	r1, #0
 800301e:	f040 83a9 	bne.w	8003774 <LCD_Line.constprop.1+0xc20>
 8003022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003026:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800302a:	2a00      	cmp	r2, #0
 800302c:	f040 839e 	bne.w	800376c <LCD_Line.constprop.1+0xc18>
 8003030:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003034:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 8393 	bne.w	8003764 <LCD_Line.constprop.1+0xc10>
 800303e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003042:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003046:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 8387 	bne.w	800375c <LCD_Line.constprop.1+0xc08>
 800304e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003052:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003056:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800305a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800305c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003060:	f8ca 6010 	str.w	r6, [sl, #16]
 8003064:	f8ca 3010 	str.w	r3, [sl, #16]
 8003068:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306a:	f8ca c010 	str.w	ip, [sl, #16]
 800306e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003072:	f8ca b010 	str.w	fp, [sl, #16]
 8003076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800307a:	f8c9 0010 	str.w	r0, [r9, #16]
 800307e:	f8c9 c010 	str.w	ip, [r9, #16]
 8003082:	f8c8 4010 	str.w	r4, [r8, #16]
 8003086:	f8c8 7010 	str.w	r7, [r8, #16]
 800308a:	f8c8 0010 	str.w	r0, [r8, #16]
 800308e:	f8c8 c010 	str.w	ip, [r8, #16]
 8003092:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8003094:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8003096:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800309a:	f8c8 1010 	str.w	r1, [r8, #16]
 800309e:	f8c8 2010 	str.w	r2, [r8, #16]
 80030a2:	f8c9 7010 	str.w	r7, [r9, #16]
 80030a6:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030aa:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030b2:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	2340      	movs	r3, #64	; 0x40
 80030b8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80030c0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030c4:	2310      	movs	r3, #16
 80030c6:	f8c8 3010 	str.w	r3, [r8, #16]
 80030ca:	2320      	movs	r3, #32
 80030cc:	f8c8 3010 	str.w	r3, [r8, #16]
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030d8:	f8ca 6010 	str.w	r6, [sl, #16]
 80030dc:	f8ca 3010 	str.w	r3, [sl, #16]
 80030e0:	2301      	movs	r3, #1
 80030e2:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030e6:	f8ca b010 	str.w	fp, [sl, #16]
 80030ea:	f8c9 0010 	str.w	r0, [r9, #16]
 80030ee:	f8c9 c010 	str.w	ip, [r9, #16]
 80030f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80030f6:	f8c8 7010 	str.w	r7, [r8, #16]
 80030fa:	f8c8 0010 	str.w	r0, [r8, #16]
 80030fe:	f8c8 c010 	str.w	ip, [r8, #16]
 8003102:	f8c8 1010 	str.w	r1, [r8, #16]
 8003106:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800310a:	2d00      	cmp	r5, #0
 800310c:	f000 8323 	beq.w	8003756 <LCD_Line.constprop.1+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8003110:	2304      	movs	r3, #4
 8003112:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003116:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003118:	f013 0301 	ands.w	r3, r3, #1
 800311c:	931b      	str	r3, [sp, #108]	; 0x6c
 800311e:	bf1c      	itt	ne
 8003120:	2308      	movne	r3, #8
 8003122:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003126:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003128:	bf08      	it	eq
 800312a:	f8c9 4010 	streq.w	r4, [r9, #16]
 800312e:	f013 0301 	ands.w	r3, r3, #1
 8003132:	931a      	str	r3, [sp, #104]	; 0x68
 8003134:	bf0c      	ite	eq
 8003136:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800313a:	2310      	movne	r3, #16
 800313c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003140:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8003142:	f013 0301 	ands.w	r3, r3, #1
 8003146:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003148:	bf0c      	ite	eq
 800314a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800314e:	2320      	movne	r3, #32
 8003150:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003154:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003156:	f013 0301 	ands.w	r3, r3, #1
 800315a:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800315c:	bf0c      	ite	eq
 800315e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003162:	2340      	movne	r3, #64	; 0x40
 8003164:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003168:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800316a:	f013 0301 	ands.w	r3, r3, #1
 800316e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003170:	bf0c      	ite	eq
 8003172:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003176:	2380      	movne	r3, #128	; 0x80
 8003178:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800317c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800317e:	f013 0301 	ands.w	r3, r3, #1
 8003182:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003184:	bf0c      	ite	eq
 8003186:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800318a:	2310      	movne	r3, #16
 800318c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003190:	f01e 0301 	ands.w	r3, lr, #1
 8003194:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003196:	bf0c      	ite	eq
 8003198:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800319c:	2320      	movne	r3, #32
 800319e:	f8c8 3010 	str.w	r3, [r8, #16]
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031a6:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	f8ca 6010 	str.w	r6, [sl, #16]
 80031ae:	f8ca 3010 	str.w	r3, [sl, #16]
 80031b2:	2301      	movs	r3, #1
 80031b4:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031bc:	f8ca b010 	str.w	fp, [sl, #16]
 80031c0:	f8c9 0010 	str.w	r0, [r9, #16]
 80031c4:	f8c9 c010 	str.w	ip, [r9, #16]
 80031c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80031cc:	f8c8 7010 	str.w	r7, [r8, #16]
 80031d0:	f8c8 0010 	str.w	r0, [r8, #16]
 80031d4:	f8c8 c010 	str.w	ip, [r8, #16]
 80031d8:	f8c8 3010 	str.w	r3, [r8, #16]
 80031dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031e0:	f8c8 3010 	str.w	r3, [r8, #16]
 80031e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031e6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80031e8:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80031ec:	09db      	lsrs	r3, r3, #7
 80031ee:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 80031f0:	bf16      	itet	ne
 80031f2:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031f4:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80031f8:	f8c9 3010 	strne.w	r3, [r9, #16]
 80031fc:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003200:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8003204:	9314      	str	r3, [sp, #80]	; 0x50
 8003206:	bf16      	itet	ne
 8003208:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320a:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800320e:	f8c9 3010 	strne.w	r3, [r9, #16]
 8003212:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003216:	f01e 0f20 	tst.w	lr, #32
 800321a:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321c:	bf0c      	ite	eq
 800321e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003222:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003224:	f01e 0f10 	tst.w	lr, #16
 8003228:	f8c9 3010 	str.w	r3, [r9, #16]
 800322c:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8003230:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003232:	bf0c      	ite	eq
 8003234:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003238:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800323a:	f01e 0f08 	tst.w	lr, #8
 800323e:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003242:	bf0c      	ite	eq
 8003244:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003248:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800324a:	f01e 0f04 	tst.w	lr, #4
 800324e:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003252:	bf0c      	ite	eq
 8003254:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003258:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800325a:	f01e 0f02 	tst.w	lr, #2
 800325e:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8003262:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8003266:	f8c9 3010 	str.w	r3, [r9, #16]
 800326a:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800326e:	bf0c      	ite	eq
 8003270:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003274:	f04f 0e10 	movne.w	lr, #16
 8003278:	f8c8 e010 	str.w	lr, [r8, #16]
 800327c:	fa1f fe85 	uxth.w	lr, r5
 8003280:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003284:	2d00      	cmp	r5, #0
 8003286:	f040 8261 	bne.w	800374c <LCD_Line.constprop.1+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800328e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003292:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003296:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800329a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800329e:	f8ca 6010 	str.w	r6, [sl, #16]
 80032a2:	f8ca 5010 	str.w	r5, [sl, #16]
 80032a6:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032aa:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80032ae:	f8ca b010 	str.w	fp, [sl, #16]
 80032b2:	f8c9 0010 	str.w	r0, [r9, #16]
 80032b6:	f8c9 c010 	str.w	ip, [r9, #16]
 80032ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80032be:	f8c8 7010 	str.w	r7, [r8, #16]
 80032c2:	f8c8 0010 	str.w	r0, [r8, #16]
 80032c6:	f8c8 c010 	str.w	ip, [r8, #16]
 80032ca:	f8c8 e010 	str.w	lr, [r8, #16]
 80032ce:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80032d2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80032d4:	f8c8 e010 	str.w	lr, [r8, #16]
 80032d8:	2d00      	cmp	r5, #0
 80032da:	f000 8234 	beq.w	8003746 <LCD_Line.constprop.1+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 80032de:	f04f 0e04 	mov.w	lr, #4
 80032e2:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80032e6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	f040 8227 	bne.w	800373c <LCD_Line.constprop.1+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032ee:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80032f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	f040 821c 	bne.w	8003732 <LCD_Line.constprop.1+0xbde>
 80032fa:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80032fe:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003302:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003304:	2d00      	cmp	r5, #0
 8003306:	f040 820f 	bne.w	8003728 <LCD_Line.constprop.1+0xbd4>
 800330a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800330e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003312:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8003314:	2d00      	cmp	r5, #0
 8003316:	f040 8202 	bne.w	800371e <LCD_Line.constprop.1+0xbca>
 800331a:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 800331e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003322:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003324:	2d00      	cmp	r5, #0
 8003326:	f040 81f5 	bne.w	8003714 <LCD_Line.constprop.1+0xbc0>
 800332a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 800332e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003332:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003334:	2d00      	cmp	r5, #0
 8003336:	f040 81e8 	bne.w	800370a <LCD_Line.constprop.1+0xbb6>
 800333a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800333e:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003342:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003344:	2d00      	cmp	r5, #0
 8003346:	f040 81db 	bne.w	8003700 <LCD_Line.constprop.1+0xbac>
 800334a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800334e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003352:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003356:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800335e:	f8ca 6010 	str.w	r6, [sl, #16]
 8003362:	f8ca 5010 	str.w	r5, [sl, #16]
 8003366:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800336a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800336e:	f8ca b010 	str.w	fp, [sl, #16]
 8003372:	f8c9 0010 	str.w	r0, [r9, #16]
 8003376:	f8c9 c010 	str.w	ip, [r9, #16]
 800337a:	f8c8 4010 	str.w	r4, [r8, #16]
 800337e:	f8c8 7010 	str.w	r7, [r8, #16]
 8003382:	f8c8 0010 	str.w	r0, [r8, #16]
 8003386:	f8c8 c010 	str.w	ip, [r8, #16]
 800338a:	f8c8 e010 	str.w	lr, [r8, #16]
 800338e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003392:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8003394:	f8c8 e010 	str.w	lr, [r8, #16]
 8003398:	2d00      	cmp	r5, #0
 800339a:	f000 81ae 	beq.w	80036fa <LCD_Line.constprop.1+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 800339e:	f04f 0e04 	mov.w	lr, #4
 80033a2:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80033a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	f040 81a1 	bne.w	80036f0 <LCD_Line.constprop.1+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ae:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80033b2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80033b4:	2d00      	cmp	r5, #0
 80033b6:	f040 8196 	bne.w	80036e6 <LCD_Line.constprop.1+0xb92>
 80033ba:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80033be:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80033c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	f040 8189 	bne.w	80036dc <LCD_Line.constprop.1+0xb88>
 80033ca:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80033ce:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80033d2:	2900      	cmp	r1, #0
 80033d4:	f040 817e 	bne.w	80036d4 <LCD_Line.constprop.1+0xb80>
 80033d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033dc:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	f040 8173 	bne.w	80036cc <LCD_Line.constprop.1+0xb78>
 80033e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033ea:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8168 	bne.w	80036c4 <LCD_Line.constprop.1+0xb70>
 80033f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f8:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80033fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 815c 	bne.w	80036bc <LCD_Line.constprop.1+0xb68>
 8003404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003408:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800340c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003410:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003414:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003418:	f8ca 6010 	str.w	r6, [sl, #16]
 800341c:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003420:	f8ca c010 	str.w	ip, [sl, #16]
 8003424:	f8ca b010 	str.w	fp, [sl, #16]
 8003428:	f8c9 0010 	str.w	r0, [r9, #16]
 800342c:	f8c9 c010 	str.w	ip, [r9, #16]
 8003430:	f8c8 4010 	str.w	r4, [r8, #16]
 8003434:	f8c8 7010 	str.w	r7, [r8, #16]
 8003438:	f8c8 0010 	str.w	r0, [r8, #16]
 800343c:	f8c8 c010 	str.w	ip, [r8, #16]
 8003440:	f8c8 2010 	str.w	r2, [r8, #16]
 8003444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003448:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800344c:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800344e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003452:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003456:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800345a:	f8c9 2010 	str.w	r2, [r9, #16]
 800345e:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003460:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003464:	f8c9 2010 	str.w	r2, [r9, #16]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800346e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003472:	f8c8 2010 	str.w	r2, [r8, #16]
 8003476:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800347a:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800347c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003480:	f8ca 6010 	str.w	r6, [sl, #16]
 8003484:	f8ca 1010 	str.w	r1, [sl, #16]
 8003488:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800348c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800348e:	f8ca b010 	str.w	fp, [sl, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 810f 	beq.w	80036b6 <LCD_Line.constprop.1+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8003498:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800349c:	9b03      	ldr	r3, [sp, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8106 	beq.w	80036b0 <LCD_Line.constprop.1+0xb5c>
 80034a4:	2301      	movs	r3, #1
 80034a6:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80034aa:	9b04      	ldr	r3, [sp, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80fc 	beq.w	80036aa <LCD_Line.constprop.1+0xb56>
 80034b2:	2308      	movs	r3, #8
 80034b4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80034b8:	9b05      	ldr	r3, [sp, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80f2 	beq.w	80036a4 <LCD_Line.constprop.1+0xb50>
 80034c0:	2304      	movs	r3, #4
 80034c2:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80034c6:	9b06      	ldr	r3, [sp, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80e8 	beq.w	800369e <LCD_Line.constprop.1+0xb4a>
 80034ce:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80034d2:	9b07      	ldr	r3, [sp, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80df 	beq.w	8003698 <LCD_Line.constprop.1+0xb44>
 80034da:	2301      	movs	r3, #1
 80034dc:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80034e0:	9b08      	ldr	r3, [sp, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80d3 	beq.w	800368e <LCD_Line.constprop.1+0xb3a>
 80034e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ec:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80034f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80c6 	beq.w	8003684 <LCD_Line.constprop.1+0xb30>
 80034f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034fc:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80bb 	beq.w	800367e <LCD_Line.constprop.1+0xb2a>
 8003508:	2304      	movs	r3, #4
 800350a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800350e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b1 	beq.w	8003678 <LCD_Line.constprop.1+0xb24>
 8003516:	2308      	movs	r3, #8
 8003518:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800351c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a5 	beq.w	800366e <LCD_Line.constprop.1+0xb1a>
 8003524:	2310      	movs	r3, #16
 8003526:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800352a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8099 	beq.w	8003664 <LCD_Line.constprop.1+0xb10>
 8003532:	2320      	movs	r3, #32
 8003534:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 808d 	beq.w	800365a <LCD_Line.constprop.1+0xb06>
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8081 	beq.w	8003650 <LCD_Line.constprop.1+0xafc>
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d075      	beq.n	8003646 <LCD_Line.constprop.1+0xaf2>
 800355a:	2310      	movs	r3, #16
 800355c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06a      	beq.n	800363c <LCD_Line.constprop.1+0xae8>
 8003566:	2320      	movs	r3, #32
 8003568:	f8c8 3010 	str.w	r3, [r8, #16]
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003570:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003574:	f8ca 6010 	str.w	r6, [sl, #16]
 8003578:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 800357c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003580:	4293      	cmp	r3, r2
 8003582:	f000 8145 	beq.w	8003810 <LCD_Line.constprop.1+0xcbc>
		if (error2 > -deltaY)
 8003586:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 8003588:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 800358a:	425b      	negs	r3, r3
 800358c:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8003590:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8003594:	da27      	bge.n	80035e6 <LCD_Line.constprop.1+0xa92>
			x1 += signX;
 8003596:	9d01      	ldr	r5, [sp, #4]
 8003598:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 800359c:	4475      	add	r5, lr
 800359e:	462b      	mov	r3, r5
			error -= deltaY;
 80035a0:	460d      	mov	r5, r1
 80035a2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80035a4:	1a69      	subs	r1, r5, r1
 80035a6:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 80035a8:	b299      	uxth	r1, r3
 80035aa:	9101      	str	r1, [sp, #4]
 80035ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80035b0:	9124      	str	r1, [sp, #144]	; 0x90
 80035b2:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80035b6:	9132      	str	r1, [sp, #200]	; 0xc8
 80035b8:	f3c3 3181 	ubfx	r1, r3, #14, #2
 80035bc:	9130      	str	r1, [sp, #192]	; 0xc0
 80035be:	f3c3 3142 	ubfx	r1, r3, #13, #3
 80035c2:	912e      	str	r1, [sp, #184]	; 0xb8
 80035c4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80035c8:	912c      	str	r1, [sp, #176]	; 0xb0
 80035ca:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 80035ce:	912a      	str	r1, [sp, #168]	; 0xa8
 80035d0:	f3c3 2185 	ubfx	r1, r3, #10, #6
 80035d4:	9128      	str	r1, [sp, #160]	; 0xa0
 80035d6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80035da:	9126      	str	r1, [sp, #152]	; 0x98
 80035dc:	b2d9      	uxtb	r1, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	9120      	str	r1, [sp, #128]	; 0x80
 80035e4:	9322      	str	r3, [sp, #136]	; 0x88
		if (error2 < deltaX)
 80035e6:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80035e8:	4291      	cmp	r1, r2
 80035ea:	f77f ab57 	ble.w	8002c9c <LCD_Line.constprop.1+0x148>
			y1 += signY;
 80035ee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80035f0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80035f2:	4413      	add	r3, r2
			error += deltaX;
 80035f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035f6:	440a      	add	r2, r1
 80035f8:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	9235      	str	r2, [sp, #212]	; 0xd4
 80035fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003602:	9225      	str	r2, [sp, #148]	; 0x94
 8003604:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003608:	9233      	str	r2, [sp, #204]	; 0xcc
 800360a:	f3c3 3281 	ubfx	r2, r3, #14, #2
 800360e:	9231      	str	r2, [sp, #196]	; 0xc4
 8003610:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8003614:	922f      	str	r2, [sp, #188]	; 0xbc
 8003616:	f3c3 3203 	ubfx	r2, r3, #12, #4
 800361a:	922d      	str	r2, [sp, #180]	; 0xb4
 800361c:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8003620:	922b      	str	r2, [sp, #172]	; 0xac
 8003622:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8003626:	9229      	str	r2, [sp, #164]	; 0xa4
 8003628:	f3c3 2246 	ubfx	r2, r3, #9, #7
 800362c:	9227      	str	r2, [sp, #156]	; 0x9c
 800362e:	b2da      	uxtb	r2, r3
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	9221      	str	r2, [sp, #132]	; 0x84
 8003636:	9323      	str	r3, [sp, #140]	; 0x8c
 8003638:	f7ff bb30 	b.w	8002c9c <LCD_Line.constprop.1+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800363c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003640:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8003644:	e792      	b.n	800356c <LCD_Line.constprop.1+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003646:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800364a:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800364e:	e787      	b.n	8003560 <LCD_Line.constprop.1+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003654:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003658:	e77c      	b.n	8003554 <LCD_Line.constprop.1+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800365a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800365e:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003662:	e770      	b.n	8003546 <LCD_Line.constprop.1+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003664:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003668:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800366c:	e764      	b.n	8003538 <LCD_Line.constprop.1+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800366e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003672:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003676:	e758      	b.n	800352a <LCD_Line.constprop.1+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003678:	f8c9 4010 	str.w	r4, [r9, #16]
}
 800367c:	e74e      	b.n	800351c <LCD_Line.constprop.1+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800367e:	f8c9 7010 	str.w	r7, [r9, #16]
}
 8003682:	e744      	b.n	800350e <LCD_Line.constprop.1+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003688:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800368c:	e738      	b.n	8003500 <LCD_Line.constprop.1+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800368e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003692:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8003696:	e72b      	b.n	80034f0 <LCD_Line.constprop.1+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003698:	f8c8 c010 	str.w	ip, [r8, #16]
}
 800369c:	e720      	b.n	80034e0 <LCD_Line.constprop.1+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800369e:	f8c8 0010 	str.w	r0, [r8, #16]
}
 80036a2:	e716      	b.n	80034d2 <LCD_Line.constprop.1+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a4:	f8c8 7010 	str.w	r7, [r8, #16]
}
 80036a8:	e70d      	b.n	80034c6 <LCD_Line.constprop.1+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036aa:	f8c8 4010 	str.w	r4, [r8, #16]
}
 80036ae:	e703      	b.n	80034b8 <LCD_Line.constprop.1+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036b0:	f8c9 c010 	str.w	ip, [r9, #16]
}
 80036b4:	e6f9      	b.n	80034aa <LCD_Line.constprop.1+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036b6:	f8c9 0010 	str.w	r0, [r9, #16]
}
 80036ba:	e6ef      	b.n	800349c <LCD_Line.constprop.1+0x948>
    GPIOx->BSRR = GPIO_Pin;
 80036bc:	2320      	movs	r3, #32
 80036be:	f8c8 3010 	str.w	r3, [r8, #16]
 80036c2:	e6a3      	b.n	800340c <LCD_Line.constprop.1+0x8b8>
 80036c4:	2310      	movs	r3, #16
 80036c6:	f8c8 3010 	str.w	r3, [r8, #16]
 80036ca:	e697      	b.n	80033fc <LCD_Line.constprop.1+0x8a8>
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	f8c9 2010 	str.w	r2, [r9, #16]
 80036d2:	e68c      	b.n	80033ee <LCD_Line.constprop.1+0x89a>
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	f8c9 1010 	str.w	r1, [r9, #16]
 80036da:	e681      	b.n	80033e0 <LCD_Line.constprop.1+0x88c>
 80036dc:	f04f 0e20 	mov.w	lr, #32
 80036e0:	f8c9 e010 	str.w	lr, [r9, #16]
 80036e4:	e675      	b.n	80033d2 <LCD_Line.constprop.1+0x87e>
 80036e6:	f04f 0e10 	mov.w	lr, #16
 80036ea:	f8c9 e010 	str.w	lr, [r9, #16]
 80036ee:	e668      	b.n	80033c2 <LCD_Line.constprop.1+0x86e>
 80036f0:	f04f 0e08 	mov.w	lr, #8
 80036f4:	f8c9 e010 	str.w	lr, [r9, #16]
 80036f8:	e65b      	b.n	80033b2 <LCD_Line.constprop.1+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036fa:	f8c9 7010 	str.w	r7, [r9, #16]
 80036fe:	e652      	b.n	80033a6 <LCD_Line.constprop.1+0x852>
    GPIOx->BSRR = GPIO_Pin;
 8003700:	f04f 0e20 	mov.w	lr, #32
 8003704:	f8c8 e010 	str.w	lr, [r8, #16]
 8003708:	e623      	b.n	8003352 <LCD_Line.constprop.1+0x7fe>
 800370a:	f04f 0e10 	mov.w	lr, #16
 800370e:	f8c8 e010 	str.w	lr, [r8, #16]
 8003712:	e616      	b.n	8003342 <LCD_Line.constprop.1+0x7ee>
 8003714:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8003718:	f8c9 e010 	str.w	lr, [r9, #16]
 800371c:	e609      	b.n	8003332 <LCD_Line.constprop.1+0x7de>
 800371e:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003722:	f8c9 e010 	str.w	lr, [r9, #16]
 8003726:	e5fc      	b.n	8003322 <LCD_Line.constprop.1+0x7ce>
 8003728:	f04f 0e20 	mov.w	lr, #32
 800372c:	f8c9 e010 	str.w	lr, [r9, #16]
 8003730:	e5ef      	b.n	8003312 <LCD_Line.constprop.1+0x7be>
 8003732:	f04f 0e10 	mov.w	lr, #16
 8003736:	f8c9 e010 	str.w	lr, [r9, #16]
 800373a:	e5e2      	b.n	8003302 <LCD_Line.constprop.1+0x7ae>
 800373c:	f04f 0e08 	mov.w	lr, #8
 8003740:	f8c9 e010 	str.w	lr, [r9, #16]
 8003744:	e5d5      	b.n	80032f2 <LCD_Line.constprop.1+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003746:	f8c9 7010 	str.w	r7, [r9, #16]
 800374a:	e5cc      	b.n	80032e6 <LCD_Line.constprop.1+0x792>
    GPIOx->BSRR = GPIO_Pin;
 800374c:	f04f 0e20 	mov.w	lr, #32
 8003750:	f8c8 e010 	str.w	lr, [r8, #16]
 8003754:	e59d      	b.n	8003292 <LCD_Line.constprop.1+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003756:	f8c9 7010 	str.w	r7, [r9, #16]
 800375a:	e4dc      	b.n	8003116 <LCD_Line.constprop.1+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 800375c:	2320      	movs	r3, #32
 800375e:	f8c8 3010 	str.w	r3, [r8, #16]
 8003762:	e478      	b.n	8003056 <LCD_Line.constprop.1+0x502>
 8003764:	2310      	movs	r3, #16
 8003766:	f8c8 3010 	str.w	r3, [r8, #16]
 800376a:	e46c      	b.n	8003046 <LCD_Line.constprop.1+0x4f2>
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	f8c9 2010 	str.w	r2, [r9, #16]
 8003772:	e461      	b.n	8003038 <LCD_Line.constprop.1+0x4e4>
 8003774:	2140      	movs	r1, #64	; 0x40
 8003776:	f8c9 1010 	str.w	r1, [r9, #16]
 800377a:	e456      	b.n	800302a <LCD_Line.constprop.1+0x4d6>
 800377c:	f04f 0e20 	mov.w	lr, #32
 8003780:	f8c9 e010 	str.w	lr, [r9, #16]
 8003784:	e44a      	b.n	800301c <LCD_Line.constprop.1+0x4c8>
 8003786:	f04f 0e10 	mov.w	lr, #16
 800378a:	f8c9 e010 	str.w	lr, [r9, #16]
 800378e:	e43d      	b.n	800300c <LCD_Line.constprop.1+0x4b8>
 8003790:	f04f 0e08 	mov.w	lr, #8
 8003794:	f8c9 e010 	str.w	lr, [r9, #16]
 8003798:	e430      	b.n	8002ffc <LCD_Line.constprop.1+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800379a:	f8c9 7010 	str.w	r7, [r9, #16]
 800379e:	e427      	b.n	8002ff0 <LCD_Line.constprop.1+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 80037a0:	f04f 0e20 	mov.w	lr, #32
 80037a4:	f8c8 e010 	str.w	lr, [r8, #16]
 80037a8:	f7ff bbf0 	b.w	8002f8c <LCD_Line.constprop.1+0x438>
 80037ac:	f04f 0e10 	mov.w	lr, #16
 80037b0:	f8c8 e010 	str.w	lr, [r8, #16]
 80037b4:	f7ff bbe2 	b.w	8002f7c <LCD_Line.constprop.1+0x428>
 80037b8:	f04f 0e80 	mov.w	lr, #128	; 0x80
 80037bc:	f8c9 e010 	str.w	lr, [r9, #16]
 80037c0:	f7ff bbd4 	b.w	8002f6c <LCD_Line.constprop.1+0x418>
 80037c4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80037c8:	f8c9 e010 	str.w	lr, [r9, #16]
 80037cc:	f7ff bbc6 	b.w	8002f5c <LCD_Line.constprop.1+0x408>
 80037d0:	f04f 0e20 	mov.w	lr, #32
 80037d4:	f8c9 e010 	str.w	lr, [r9, #16]
 80037d8:	f7ff bbb8 	b.w	8002f4c <LCD_Line.constprop.1+0x3f8>
 80037dc:	f04f 0e10 	mov.w	lr, #16
 80037e0:	f8c9 e010 	str.w	lr, [r9, #16]
 80037e4:	f7ff bbaa 	b.w	8002f3c <LCD_Line.constprop.1+0x3e8>
 80037e8:	f04f 0e08 	mov.w	lr, #8
 80037ec:	f8c9 e010 	str.w	lr, [r9, #16]
 80037f0:	f7ff bb9c 	b.w	8002f2c <LCD_Line.constprop.1+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f4:	f8c9 7010 	str.w	r7, [r9, #16]
 80037f8:	f7ff bb92 	b.w	8002f20 <LCD_Line.constprop.1+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 80037fc:	f04f 0e20 	mov.w	lr, #32
 8003800:	f8c8 e010 	str.w	lr, [r8, #16]
 8003804:	f7ff bb62 	b.w	8002ecc <LCD_Line.constprop.1+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003808:	f8c9 7010 	str.w	r7, [r9, #16]
 800380c:	f7ff ba9f 	b.w	8002d4e <LCD_Line.constprop.1+0x1fa>
		if (x1 == x2 && y1 == y2)
 8003810:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003812:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8003816:	f47f aeb6 	bne.w	8003586 <LCD_Line.constprop.1+0xa32>
}
 800381a:	b03b      	add	sp, #236	; 0xec
 800381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003820 <LCD_Line.constprop.2>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b0ab      	sub	sp, #172	; 0xac
 8003826:	9123      	str	r1, [sp, #140]	; 0x8c
 8003828:	4619      	mov	r1, r3
 800382a:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 800382c:	1a13      	subs	r3, r2, r0
 800382e:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 8003832:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 8003836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8003838:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003840:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003844:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 8003846:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 8003848:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 800384a:	4282      	cmp	r2, r0
 800384c:	bf8c      	ite	hi
 800384e:	2201      	movhi	r2, #1
 8003850:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8003854:	4299      	cmp	r1, r3
 8003856:	bf8c      	ite	hi
 8003858:	2101      	movhi	r1, #1
 800385a:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 800385e:	9227      	str	r2, [sp, #156]	; 0x9c
 8003860:	0a1a      	lsrs	r2, r3, #8
 8003862:	9214      	str	r2, [sp, #80]	; 0x50
 8003864:	0bda      	lsrs	r2, r3, #15
 8003866:	9201      	str	r2, [sp, #4]
 8003868:	0b9a      	lsrs	r2, r3, #14
 800386a:	9220      	str	r2, [sp, #128]	; 0x80
 800386c:	0b5a      	lsrs	r2, r3, #13
 800386e:	921e      	str	r2, [sp, #120]	; 0x78
 8003870:	0b1a      	lsrs	r2, r3, #12
 8003872:	921c      	str	r2, [sp, #112]	; 0x70
 8003874:	0ada      	lsrs	r2, r3, #11
 8003876:	921a      	str	r2, [sp, #104]	; 0x68
 8003878:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 800387a:	9128      	str	r1, [sp, #160]	; 0xa0
 800387c:	9218      	str	r2, [sp, #96]	; 0x60
 800387e:	b2d9      	uxtb	r1, r3
 8003880:	0a5a      	lsrs	r2, r3, #9
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	9312      	str	r3, [sp, #72]	; 0x48
 8003888:	f000 0301 	and.w	r3, r0, #1
 800388c:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 800388e:	4663      	mov	r3, ip
 8003890:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003894:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8003898:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800389c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80038a0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80038a4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80038a8:	9216      	str	r2, [sp, #88]	; 0x58
 80038aa:	0a02      	lsrs	r2, r0, #8
 80038ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80038ae:	0bc2      	lsrs	r2, r0, #15
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	0b82      	lsrs	r2, r0, #14
 80038b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80038b6:	0b42      	lsrs	r2, r0, #13
 80038b8:	921d      	str	r2, [sp, #116]	; 0x74
 80038ba:	0b02      	lsrs	r2, r0, #12
 80038bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80038be:	0ac2      	lsrs	r2, r0, #11
 80038c0:	9219      	str	r2, [sp, #100]	; 0x64
 80038c2:	0a82      	lsrs	r2, r0, #10
 80038c4:	9122      	str	r1, [sp, #136]	; 0x88
 80038c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80038c8:	b2c1      	uxtb	r1, r0
 80038ca:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80038cc:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 80038ce:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 80038d2:	9215      	str	r2, [sp, #84]	; 0x54
 80038d4:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 80038d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80038d8:	f8df b350 	ldr.w	fp, [pc, #848]	; 8003c2c <LCD_Line.constprop.2+0x40c>
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	f8df a350 	ldr.w	sl, [pc, #848]	; 8003c30 <LCD_Line.constprop.2+0x410>
 80038e2:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003c34 <LCD_Line.constprop.2+0x414>
 80038e6:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80038e8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80038ec:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038f0:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f2:	f8cb e010 	str.w	lr, [fp, #16]
 80038f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038fa:	f8ca 7010 	str.w	r7, [sl, #16]
 80038fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003902:	f8ca 4010 	str.w	r4, [sl, #16]
 8003906:	f8c9 6010 	str.w	r6, [r9, #16]
 800390a:	f8c9 5010 	str.w	r5, [r9, #16]
 800390e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003912:	f8c9 4010 	str.w	r4, [r9, #16]
 8003916:	f8c9 8010 	str.w	r8, [r9, #16]
 800391a:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 800391c:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 800391e:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003922:	f8c9 1010 	str.w	r1, [r9, #16]
 8003926:	f8ca 5010 	str.w	r5, [sl, #16]
 800392a:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800392e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003932:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003936:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800393a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800393e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003942:	f8c9 2010 	str.w	r2, [r9, #16]
 8003946:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003948:	f8c9 3010 	str.w	r3, [r9, #16]
 800394c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003950:	f8cb 2010 	str.w	r2, [fp, #16]
 8003954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003958:	f8cb 2010 	str.w	r2, [fp, #16]
 800395c:	2201      	movs	r2, #1
 800395e:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003962:	f8cb e010 	str.w	lr, [fp, #16]
 8003966:	f8ca 7010 	str.w	r7, [sl, #16]
 800396a:	f8ca 4010 	str.w	r4, [sl, #16]
 800396e:	f8c9 6010 	str.w	r6, [r9, #16]
 8003972:	f8c9 5010 	str.w	r5, [r9, #16]
 8003976:	f8c9 7010 	str.w	r7, [r9, #16]
 800397a:	f8c9 4010 	str.w	r4, [r9, #16]
 800397e:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003982:	9b01      	ldr	r3, [sp, #4]
 8003984:	f8c9 1010 	str.w	r1, [r9, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 849f 	beq.w	80042cc <LCD_Line.constprop.2+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 800398e:	2304      	movs	r3, #4
 8003990:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003994:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003996:	f013 0001 	ands.w	r0, r3, #1
 800399a:	bf1c      	itt	ne
 800399c:	2308      	movne	r3, #8
 800399e:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80039a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a4:	bf08      	it	eq
 80039a6:	f8ca 6010 	streq.w	r6, [sl, #16]
 80039aa:	f013 0301 	ands.w	r3, r3, #1
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	bf0c      	ite	eq
 80039b2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	2310      	movne	r3, #16
 80039b8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80039bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80039be:	f013 0301 	ands.w	r3, r3, #1
 80039c2:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039c4:	bf0c      	ite	eq
 80039c6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80039ca:	2320      	movne	r3, #32
 80039cc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80039d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80039d2:	f013 0301 	ands.w	r3, r3, #1
 80039d6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039d8:	bf0c      	ite	eq
 80039da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80039de:	2340      	movne	r3, #64	; 0x40
 80039e0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80039e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80039e6:	f013 0301 	ands.w	r3, r3, #1
 80039ea:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ec:	bf0c      	ite	eq
 80039ee:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	2380      	movne	r3, #128	; 0x80
 80039f4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80039f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80039fa:	f013 0301 	ands.w	r3, r3, #1
 80039fe:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a00:	bf0c      	ite	eq
 8003a02:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a06:	2310      	movne	r3, #16
 8003a08:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003a0c:	f01c 0301 	ands.w	r3, ip, #1
 8003a10:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a12:	bf0c      	ite	eq
 8003a14:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003a18:	2320      	movne	r3, #32
 8003a1a:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a1e:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a20:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003a24:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2c:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a30:	2301      	movs	r3, #1
 8003a32:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a3a:	f8cb e010 	str.w	lr, [fp, #16]
 8003a3e:	f8ca 7010 	str.w	r7, [sl, #16]
 8003a42:	f8ca 4010 	str.w	r4, [sl, #16]
 8003a46:	f8c9 6010 	str.w	r6, [r9, #16]
 8003a4a:	f8c9 5010 	str.w	r5, [r9, #16]
 8003a4e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003a52:	f8c9 4010 	str.w	r4, [r9, #16]
 8003a56:	f8c9 8010 	str.w	r8, [r9, #16]
 8003a5a:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a60:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003a62:	09d2      	lsrs	r2, r2, #7
 8003a64:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 8003a66:	bf1c      	itt	ne
 8003a68:	2204      	movne	r2, #4
 8003a6a:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003a6e:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a72:	bf08      	it	eq
 8003a74:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003a78:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003a7a:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003a7c:	bf4a      	itet	mi
 8003a7e:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a80:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003a84:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003a88:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003a8c:	0699      	lsls	r1, r3, #26
 8003a8e:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a90:	bf54      	ite	pl
 8003a92:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	2210      	movmi	r2, #16
 8003a98:	f8ca 2010 	str.w	r2, [sl, #16]
 8003a9c:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003aa0:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003aa2:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aa4:	bf54      	ite	pl
 8003aa6:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003aaa:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003aac:	0719      	lsls	r1, r3, #28
 8003aae:	f8ca 2010 	str.w	r2, [sl, #16]
 8003ab2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003ab6:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab8:	bf54      	ite	pl
 8003aba:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003abe:	2240      	movmi	r2, #64	; 0x40
 8003ac0:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003ac4:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ac6:	bf54      	ite	pl
 8003ac8:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003acc:	2280      	movmi	r2, #128	; 0x80
 8003ace:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003ad2:	f8ca 2010 	str.w	r2, [sl, #16]
 8003ad6:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003ada:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003adc:	bf54      	ite	pl
 8003ade:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003ae2:	2310      	movmi	r3, #16
 8003ae4:	f8c9 3010 	str.w	r3, [r9, #16]
 8003ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003aea:	fa1f fc83 	uxth.w	ip, r3
 8003aee:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 83e5 	bne.w	80042c2 <LCD_Line.constprop.2+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003af8:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003afc:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003b00:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b04:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003b08:	f8cb c010 	str.w	ip, [fp, #16]
 8003b0c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003b10:	f8cb c010 	str.w	ip, [fp, #16]
 8003b14:	f04f 0c01 	mov.w	ip, #1
 8003b18:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b1c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b22:	f8cb e010 	str.w	lr, [fp, #16]
 8003b26:	f8ca 7010 	str.w	r7, [sl, #16]
 8003b2a:	f8ca 4010 	str.w	r4, [sl, #16]
 8003b2e:	f8c9 6010 	str.w	r6, [r9, #16]
 8003b32:	f8c9 5010 	str.w	r5, [r9, #16]
 8003b36:	f8c9 7010 	str.w	r7, [r9, #16]
 8003b3a:	f8c9 4010 	str.w	r4, [r9, #16]
 8003b3e:	f8c9 8010 	str.w	r8, [r9, #16]
 8003b42:	f8c9 c010 	str.w	ip, [r9, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 83b8 	beq.w	80042bc <LCD_Line.constprop.2+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 8003b4c:	f04f 0c04 	mov.w	ip, #4
 8003b50:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f040 83ad 	bne.w	80042b4 <LCD_Line.constprop.2+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b5a:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 83a3 	bne.w	80042ac <LCD_Line.constprop.2+0xa8c>
 8003b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b6a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003b6e:	9b04      	ldr	r3, [sp, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8397 	bne.w	80042a4 <LCD_Line.constprop.2+0xa84>
 8003b76:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b7a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 838b 	bne.w	800429c <LCD_Line.constprop.2+0xa7c>
 8003b86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003b8a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 837f 	bne.w	8004294 <LCD_Line.constprop.2+0xa74>
 8003b96:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b9a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003b9e:	9b05      	ldr	r3, [sp, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 8373 	bne.w	800428c <LCD_Line.constprop.2+0xa6c>
 8003ba6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003baa:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003bae:	9b06      	ldr	r3, [sp, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8367 	bne.w	8004284 <LCD_Line.constprop.2+0xa64>
 8003bb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003bba:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bc0:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003bc4:	f8cb 0010 	str.w	r0, [fp, #16]
 8003bc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bcc:	f8cb 0010 	str.w	r0, [fp, #16]
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003bda:	9b07      	ldr	r3, [sp, #28]
 8003bdc:	f8cb e010 	str.w	lr, [fp, #16]
 8003be0:	f8ca 7010 	str.w	r7, [sl, #16]
 8003be4:	f8ca 4010 	str.w	r4, [sl, #16]
 8003be8:	f8c9 6010 	str.w	r6, [r9, #16]
 8003bec:	f8c9 5010 	str.w	r5, [r9, #16]
 8003bf0:	f8c9 7010 	str.w	r7, [r9, #16]
 8003bf4:	f8c9 4010 	str.w	r4, [r9, #16]
 8003bf8:	f8c9 8010 	str.w	r8, [r9, #16]
 8003bfc:	f8c9 0010 	str.w	r0, [r9, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 833c 	beq.w	800427e <LCD_Line.constprop.2+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	2004      	movs	r0, #4
 8003c08:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 8331 	bne.w	8004276 <LCD_Line.constprop.2+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c14:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003c18:	9b08      	ldr	r3, [sp, #32]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8327 	bne.w	800426e <LCD_Line.constprop.2+0xa4e>
 8003c20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c24:	f8ca 0010 	str.w	r0, [sl, #16]
 8003c28:	e006      	b.n	8003c38 <LCD_Line.constprop.2+0x418>
 8003c2a:	bf00      	nop
 8003c2c:	40010c00 	.word	0x40010c00
 8003c30:	40010800 	.word	0x40010800
 8003c34:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8313 	bne.w	8004266 <LCD_Line.constprop.2+0xa46>
 8003c40:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003c44:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8307 	bne.w	800425e <LCD_Line.constprop.2+0xa3e>
 8003c50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003c54:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	f040 82fc 	bne.w	8004256 <LCD_Line.constprop.2+0xa36>
 8003c5e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003c62:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	f040 82f1 	bne.w	800424e <LCD_Line.constprop.2+0xa2e>
 8003c6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c70:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 82e5 	bne.w	8004246 <LCD_Line.constprop.2+0xa26>
 8003c7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c80:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003c84:	f8bd 2000 	ldrh.w	r2, [sp]
 8003c88:	f8cb 7010 	str.w	r7, [fp, #16]
 8003c8c:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8003c90:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c98:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8003ca0:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003caa:	f8cb 4010 	str.w	r4, [fp, #16]
 8003cae:	f8cb e010 	str.w	lr, [fp, #16]
 8003cb2:	f8ca 7010 	str.w	r7, [sl, #16]
 8003cb6:	f8ca 4010 	str.w	r4, [sl, #16]
 8003cba:	f8c9 6010 	str.w	r6, [r9, #16]
 8003cbe:	f8c9 5010 	str.w	r5, [r9, #16]
 8003cc2:	f8c9 7010 	str.w	r7, [r9, #16]
 8003cc6:	f8c9 4010 	str.w	r4, [r9, #16]
 8003cca:	f8c9 8010 	str.w	r8, [r9, #16]
 8003cce:	f8c9 0010 	str.w	r0, [r9, #16]
 8003cd2:	f8ca 5010 	str.w	r5, [sl, #16]
 8003cd6:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cda:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cde:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003cec:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c9 1010 	str.w	r1, [r9, #16]
 8003cf6:	f8c9 2010 	str.w	r2, [r9, #16]
 8003cfa:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cfc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003d00:	f8cb 2010 	str.w	r2, [fp, #16]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8cb 3010 	str.w	r3, [fp, #16]
 8003d0a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d0e:	f8cb e010 	str.w	lr, [fp, #16]
 8003d12:	f8ca 7010 	str.w	r7, [sl, #16]
 8003d16:	f8ca 4010 	str.w	r4, [sl, #16]
 8003d1a:	f8c9 6010 	str.w	r6, [r9, #16]
 8003d1e:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003d22:	9b00      	ldr	r3, [sp, #0]
 8003d24:	f8c9 7010 	str.w	r7, [r9, #16]
 8003d28:	f8c9 4010 	str.w	r4, [r9, #16]
 8003d2c:	f8c9 8010 	str.w	r8, [r9, #16]
 8003d30:	f8c9 0010 	str.w	r0, [r9, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8283 	beq.w	8004240 <LCD_Line.constprop.2+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003d40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d42:	f013 0001 	ands.w	r0, r3, #1
 8003d46:	bf1c      	itt	ne
 8003d48:	2308      	movne	r3, #8
 8003d4a:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d50:	bf08      	it	eq
 8003d52:	f8ca 6010 	streq.w	r6, [sl, #16]
 8003d56:	f013 0301 	ands.w	r3, r3, #1
 8003d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8003d5c:	bf0c      	ite	eq
 8003d5e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003d62:	2310      	movne	r3, #16
 8003d64:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003d68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d6a:	f013 0301 	ands.w	r3, r3, #1
 8003d6e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d70:	bf0c      	ite	eq
 8003d72:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003d76:	2320      	movne	r3, #32
 8003d78:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d7e:	f013 0301 	ands.w	r3, r3, #1
 8003d82:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d84:	bf0c      	ite	eq
 8003d86:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	2340      	movne	r3, #64	; 0x40
 8003d8c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d92:	f013 0301 	ands.w	r3, r3, #1
 8003d96:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d98:	bf0c      	ite	eq
 8003d9a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003d9e:	2380      	movne	r3, #128	; 0x80
 8003da0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003da6:	f013 0301 	ands.w	r3, r3, #1
 8003daa:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dac:	bf0c      	ite	eq
 8003dae:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003db2:	2310      	movne	r3, #16
 8003db4:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003db8:	f01c 0301 	ands.w	r3, ip, #1
 8003dbc:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dbe:	bf0c      	ite	eq
 8003dc0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003dc4:	2320      	movne	r3, #32
 8003dc6:	f8c9 3010 	str.w	r3, [r9, #16]
 8003dca:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dcc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003dd0:	f8cb 3010 	str.w	r3, [fp, #16]
 8003dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd8:	f8cb 3010 	str.w	r3, [fp, #16]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003de6:	f8cb e010 	str.w	lr, [fp, #16]
 8003dea:	f8ca 7010 	str.w	r7, [sl, #16]
 8003dee:	f8ca 4010 	str.w	r4, [sl, #16]
 8003df2:	f8c9 6010 	str.w	r6, [r9, #16]
 8003df6:	f8c9 5010 	str.w	r5, [r9, #16]
 8003dfa:	f8c9 7010 	str.w	r7, [r9, #16]
 8003dfe:	f8c9 4010 	str.w	r4, [r9, #16]
 8003e02:	f8c9 8010 	str.w	r8, [r9, #16]
 8003e06:	f8c9 3010 	str.w	r3, [r9, #16]
 8003e0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e0c:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003e0e:	09d2      	lsrs	r2, r2, #7
 8003e10:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	bf1c      	itt	ne
 8003e14:	2204      	movne	r2, #4
 8003e16:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003e1a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e1e:	bf08      	it	eq
 8003e20:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003e24:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003e26:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003e28:	bf4a      	itet	mi
 8003e2a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e2c:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003e30:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003e34:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003e38:	0699      	lsls	r1, r3, #26
 8003e3a:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e3c:	bf54      	ite	pl
 8003e3e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003e42:	2210      	movmi	r2, #16
 8003e44:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e48:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003e4c:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003e4e:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e50:	bf54      	ite	pl
 8003e52:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003e56:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003e58:	0719      	lsls	r1, r3, #28
 8003e5a:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e5e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003e62:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e64:	bf54      	ite	pl
 8003e66:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003e6a:	2240      	movmi	r2, #64	; 0x40
 8003e6c:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003e70:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e72:	bf54      	ite	pl
 8003e74:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003e78:	2280      	movmi	r2, #128	; 0x80
 8003e7a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003e7e:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e82:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003e86:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e88:	bf54      	ite	pl
 8003e8a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003e8e:	2310      	movmi	r3, #16
 8003e90:	f8c9 3010 	str.w	r3, [r9, #16]
 8003e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e96:	fa1f fc83 	uxth.w	ip, r3
 8003e9a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 81c9 	bne.w	8004236 <LCD_Line.constprop.2+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ea4:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003ea8:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003eac:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eb0:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003eb4:	f8cb c010 	str.w	ip, [fp, #16]
 8003eb8:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003ebc:	f8cb c010 	str.w	ip, [fp, #16]
 8003ec0:	f04f 0c01 	mov.w	ip, #1
 8003ec4:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ec8:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ece:	f8cb e010 	str.w	lr, [fp, #16]
 8003ed2:	f8ca 7010 	str.w	r7, [sl, #16]
 8003ed6:	f8ca 4010 	str.w	r4, [sl, #16]
 8003eda:	f8c9 6010 	str.w	r6, [r9, #16]
 8003ede:	f8c9 5010 	str.w	r5, [r9, #16]
 8003ee2:	f8c9 7010 	str.w	r7, [r9, #16]
 8003ee6:	f8c9 4010 	str.w	r4, [r9, #16]
 8003eea:	f8c9 8010 	str.w	r8, [r9, #16]
 8003eee:	f8c9 c010 	str.w	ip, [r9, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 819c 	beq.w	8004230 <LCD_Line.constprop.2+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8003ef8:	f04f 0c04 	mov.w	ip, #4
 8003efc:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003f00:	2800      	cmp	r0, #0
 8003f02:	f040 8191 	bne.w	8004228 <LCD_Line.constprop.2+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f06:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 8187 	bne.w	8004220 <LCD_Line.constprop.2+0xa00>
 8003f12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f16:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 817b 	bne.w	8004218 <LCD_Line.constprop.2+0x9f8>
 8003f22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f26:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 816f 	bne.w	8004210 <LCD_Line.constprop.2+0x9f0>
 8003f32:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003f36:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8163 	bne.w	8004208 <LCD_Line.constprop.2+0x9e8>
 8003f42:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f46:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003f4a:	9b08      	ldr	r3, [sp, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8157 	bne.w	8004200 <LCD_Line.constprop.2+0x9e0>
 8003f52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f56:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003f5a:	9b07      	ldr	r3, [sp, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 814b 	bne.w	80041f8 <LCD_Line.constprop.2+0x9d8>
 8003f62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f66:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f6a:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f6c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f70:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f78:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003f86:	9b06      	ldr	r3, [sp, #24]
 8003f88:	f8cb e010 	str.w	lr, [fp, #16]
 8003f8c:	f8ca 7010 	str.w	r7, [sl, #16]
 8003f90:	f8ca 4010 	str.w	r4, [sl, #16]
 8003f94:	f8c9 6010 	str.w	r6, [r9, #16]
 8003f98:	f8c9 5010 	str.w	r5, [r9, #16]
 8003f9c:	f8c9 7010 	str.w	r7, [r9, #16]
 8003fa0:	f8c9 4010 	str.w	r4, [r9, #16]
 8003fa4:	f8c9 8010 	str.w	r8, [r9, #16]
 8003fa8:	f8c9 0010 	str.w	r0, [r9, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8120 	beq.w	80041f2 <LCD_Line.constprop.2+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8003fb2:	2004      	movs	r0, #4
 8003fb4:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003fb8:	9b05      	ldr	r3, [sp, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8115 	bne.w	80041ea <LCD_Line.constprop.2+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fc0:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003fc4:	9b04      	ldr	r3, [sp, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 810b 	bne.w	80041e2 <LCD_Line.constprop.2+0x9c2>
 8003fcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003fd0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 80ff 	bne.w	80041da <LCD_Line.constprop.2+0x9ba>
 8003fdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003fe0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 80f3 	bne.w	80041d2 <LCD_Line.constprop.2+0x9b2>
 8003fec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003ff0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	f040 80e8 	bne.w	80041ca <LCD_Line.constprop.2+0x9aa>
 8003ffa:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003ffe:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004002:	2a00      	cmp	r2, #0
 8004004:	f040 80dd 	bne.w	80041c2 <LCD_Line.constprop.2+0x9a2>
 8004008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800400c:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 80d1 	bne.w	80041ba <LCD_Line.constprop.2+0x99a>
 8004018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800401c:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004020:	2202      	movs	r2, #2
 8004022:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004026:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800402a:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800402e:	f8cb 2010 	str.w	r2, [fp, #16]
 8004032:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004036:	f8cb 4010 	str.w	r4, [fp, #16]
 800403a:	f8cb e010 	str.w	lr, [fp, #16]
 800403e:	f8ca 7010 	str.w	r7, [sl, #16]
 8004042:	f8ca 4010 	str.w	r4, [sl, #16]
 8004046:	f8c9 6010 	str.w	r6, [r9, #16]
 800404a:	f8c9 5010 	str.w	r5, [r9, #16]
 800404e:	f8c9 7010 	str.w	r7, [r9, #16]
 8004052:	f8c9 4010 	str.w	r4, [r9, #16]
 8004056:	f8c9 8010 	str.w	r8, [r9, #16]
 800405a:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800405e:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004060:	f8ca 5010 	str.w	r5, [sl, #16]
 8004064:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004068:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800406c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004070:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004074:	2040      	movs	r0, #64	; 0x40
 8004076:	f8ca 0010 	str.w	r0, [sl, #16]
 800407a:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800407c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004080:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004084:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004088:	f8c9 1010 	str.w	r1, [r9, #16]
 800408c:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004090:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004092:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004096:	f8cb 2010 	str.w	r2, [fp, #16]
 800409a:	f8cb 3010 	str.w	r3, [fp, #16]
 800409e:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80040a6:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040aa:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040ae:	f8ca 7010 	str.w	r7, [sl, #16]
 80040b2:	f8ca 4010 	str.w	r4, [sl, #16]
 80040b6:	f8c9 6010 	str.w	r6, [r9, #16]
 80040ba:	f8c9 5010 	str.w	r5, [r9, #16]
 80040be:	f8c9 7010 	str.w	r7, [r9, #16]
 80040c2:	f8c9 4010 	str.w	r4, [r9, #16]
 80040c6:	f8c9 8010 	str.w	r8, [r9, #16]
 80040ca:	f8c9 0010 	str.w	r0, [r9, #16]
 80040ce:	f8ca 5010 	str.w	r5, [sl, #16]
 80040d2:	f8ca 6010 	str.w	r6, [sl, #16]
 80040d6:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	f8ca c010 	str.w	ip, [sl, #16]
 80040e0:	2010      	movs	r0, #16
 80040e2:	f8ca 1010 	str.w	r1, [sl, #16]
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	f8ca 1010 	str.w	r1, [sl, #16]
 80040ec:	f8c9 0010 	str.w	r0, [r9, #16]
 80040f0:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040f4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040f8:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 80040fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040fe:	f8cb 3010 	str.w	r3, [fp, #16]
 8004102:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004104:	4293      	cmp	r3, r2
 8004106:	f000 80e5 	beq.w	80042d4 <LCD_Line.constprop.2+0xab4>
		if (error2 > -deltaY)
 800410a:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 800410c:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 800410e:	4243      	negs	r3, r0
 8004110:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8004114:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8004118:	da24      	bge.n	8004164 <LCD_Line.constprop.2+0x944>
			x1 += signX;
 800411a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800411c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8004120:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8004122:	4463      	add	r3, ip
			error -= deltaY;
 8004124:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8004126:	b299      	uxth	r1, r3
 8004128:	9110      	str	r1, [sp, #64]	; 0x40
 800412a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800412e:	9113      	str	r1, [sp, #76]	; 0x4c
 8004130:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8004134:	9100      	str	r1, [sp, #0]
 8004136:	f3c3 3181 	ubfx	r1, r3, #14, #2
 800413a:	911f      	str	r1, [sp, #124]	; 0x7c
 800413c:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8004140:	911d      	str	r1, [sp, #116]	; 0x74
 8004142:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8004146:	911b      	str	r1, [sp, #108]	; 0x6c
 8004148:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 800414c:	9119      	str	r1, [sp, #100]	; 0x64
 800414e:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8004152:	9117      	str	r1, [sp, #92]	; 0x5c
 8004154:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8004158:	9115      	str	r1, [sp, #84]	; 0x54
 800415a:	b2d9      	uxtb	r1, r3
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	9121      	str	r1, [sp, #132]	; 0x84
 8004162:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8004164:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004166:	4291      	cmp	r1, r2
 8004168:	f77f abbe 	ble.w	80038e8 <LCD_Line.constprop.2+0xc8>
			y1 += signY;
 800416c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800416e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004170:	4413      	add	r3, r2
			error += deltaX;
 8004172:	9a02      	ldr	r2, [sp, #8]
 8004174:	440a      	add	r2, r1
 8004176:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8004178:	b29a      	uxth	r2, r3
 800417a:	9223      	str	r2, [sp, #140]	; 0x8c
 800417c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004180:	9214      	str	r2, [sp, #80]	; 0x50
 8004182:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004186:	9201      	str	r2, [sp, #4]
 8004188:	f3c3 3281 	ubfx	r2, r3, #14, #2
 800418c:	9220      	str	r2, [sp, #128]	; 0x80
 800418e:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8004192:	921e      	str	r2, [sp, #120]	; 0x78
 8004194:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8004198:	921c      	str	r2, [sp, #112]	; 0x70
 800419a:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 800419e:	921a      	str	r2, [sp, #104]	; 0x68
 80041a0:	f3c3 2285 	ubfx	r2, r3, #10, #6
 80041a4:	9218      	str	r2, [sp, #96]	; 0x60
 80041a6:	f3c3 2246 	ubfx	r2, r3, #9, #7
 80041aa:	9216      	str	r2, [sp, #88]	; 0x58
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	9222      	str	r2, [sp, #136]	; 0x88
 80041b4:	9312      	str	r3, [sp, #72]	; 0x48
 80041b6:	f7ff bb97 	b.w	80038e8 <LCD_Line.constprop.2+0xc8>
 80041ba:	2320      	movs	r3, #32
 80041bc:	f8c9 3010 	str.w	r3, [r9, #16]
 80041c0:	e72e      	b.n	8004020 <LCD_Line.constprop.2+0x800>
 80041c2:	2210      	movs	r2, #16
 80041c4:	f8c9 2010 	str.w	r2, [r9, #16]
 80041c8:	e722      	b.n	8004010 <LCD_Line.constprop.2+0x7f0>
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	f8ca 1010 	str.w	r1, [sl, #16]
 80041d0:	e717      	b.n	8004002 <LCD_Line.constprop.2+0x7e2>
 80041d2:	2040      	movs	r0, #64	; 0x40
 80041d4:	f8ca 0010 	str.w	r0, [sl, #16]
 80041d8:	e70c      	b.n	8003ff4 <LCD_Line.constprop.2+0x7d4>
 80041da:	2020      	movs	r0, #32
 80041dc:	f8ca 0010 	str.w	r0, [sl, #16]
 80041e0:	e700      	b.n	8003fe4 <LCD_Line.constprop.2+0x7c4>
 80041e2:	2010      	movs	r0, #16
 80041e4:	f8ca 0010 	str.w	r0, [sl, #16]
 80041e8:	e6f4      	b.n	8003fd4 <LCD_Line.constprop.2+0x7b4>
 80041ea:	2008      	movs	r0, #8
 80041ec:	f8ca 0010 	str.w	r0, [sl, #16]
 80041f0:	e6e8      	b.n	8003fc4 <LCD_Line.constprop.2+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041f2:	f8ca 5010 	str.w	r5, [sl, #16]
 80041f6:	e6df      	b.n	8003fb8 <LCD_Line.constprop.2+0x798>
    GPIOx->BSRR = GPIO_Pin;
 80041f8:	2020      	movs	r0, #32
 80041fa:	f8c9 0010 	str.w	r0, [r9, #16]
 80041fe:	e6b4      	b.n	8003f6a <LCD_Line.constprop.2+0x74a>
 8004200:	2010      	movs	r0, #16
 8004202:	f8c9 0010 	str.w	r0, [r9, #16]
 8004206:	e6a8      	b.n	8003f5a <LCD_Line.constprop.2+0x73a>
 8004208:	2080      	movs	r0, #128	; 0x80
 800420a:	f8ca 0010 	str.w	r0, [sl, #16]
 800420e:	e69c      	b.n	8003f4a <LCD_Line.constprop.2+0x72a>
 8004210:	2040      	movs	r0, #64	; 0x40
 8004212:	f8ca 0010 	str.w	r0, [sl, #16]
 8004216:	e690      	b.n	8003f3a <LCD_Line.constprop.2+0x71a>
 8004218:	2020      	movs	r0, #32
 800421a:	f8ca 0010 	str.w	r0, [sl, #16]
 800421e:	e684      	b.n	8003f2a <LCD_Line.constprop.2+0x70a>
 8004220:	2010      	movs	r0, #16
 8004222:	f8ca 0010 	str.w	r0, [sl, #16]
 8004226:	e678      	b.n	8003f1a <LCD_Line.constprop.2+0x6fa>
 8004228:	2008      	movs	r0, #8
 800422a:	f8ca 0010 	str.w	r0, [sl, #16]
 800422e:	e66c      	b.n	8003f0a <LCD_Line.constprop.2+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004230:	f8ca 5010 	str.w	r5, [sl, #16]
 8004234:	e664      	b.n	8003f00 <LCD_Line.constprop.2+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8004236:	f04f 0c20 	mov.w	ip, #32
 800423a:	f8c9 c010 	str.w	ip, [r9, #16]
 800423e:	e635      	b.n	8003eac <LCD_Line.constprop.2+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004240:	f8ca 5010 	str.w	r5, [sl, #16]
 8004244:	e57c      	b.n	8003d40 <LCD_Line.constprop.2+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8004246:	2320      	movs	r3, #32
 8004248:	f8c9 3010 	str.w	r3, [r9, #16]
 800424c:	e51a      	b.n	8003c84 <LCD_Line.constprop.2+0x464>
 800424e:	2210      	movs	r2, #16
 8004250:	f8c9 2010 	str.w	r2, [r9, #16]
 8004254:	e50e      	b.n	8003c74 <LCD_Line.constprop.2+0x454>
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	f8ca 1010 	str.w	r1, [sl, #16]
 800425c:	e503      	b.n	8003c66 <LCD_Line.constprop.2+0x446>
 800425e:	2040      	movs	r0, #64	; 0x40
 8004260:	f8ca 0010 	str.w	r0, [sl, #16]
 8004264:	e4f8      	b.n	8003c58 <LCD_Line.constprop.2+0x438>
 8004266:	2020      	movs	r0, #32
 8004268:	f8ca 0010 	str.w	r0, [sl, #16]
 800426c:	e4ec      	b.n	8003c48 <LCD_Line.constprop.2+0x428>
 800426e:	2010      	movs	r0, #16
 8004270:	f8ca 0010 	str.w	r0, [sl, #16]
 8004274:	e4e0      	b.n	8003c38 <LCD_Line.constprop.2+0x418>
 8004276:	2008      	movs	r0, #8
 8004278:	f8ca 0010 	str.w	r0, [sl, #16]
 800427c:	e4cc      	b.n	8003c18 <LCD_Line.constprop.2+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800427e:	f8ca 5010 	str.w	r5, [sl, #16]
 8004282:	e4c3      	b.n	8003c0c <LCD_Line.constprop.2+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8004284:	2020      	movs	r0, #32
 8004286:	f8c9 0010 	str.w	r0, [r9, #16]
 800428a:	e498      	b.n	8003bbe <LCD_Line.constprop.2+0x39e>
 800428c:	2010      	movs	r0, #16
 800428e:	f8c9 0010 	str.w	r0, [r9, #16]
 8004292:	e48c      	b.n	8003bae <LCD_Line.constprop.2+0x38e>
 8004294:	2080      	movs	r0, #128	; 0x80
 8004296:	f8ca 0010 	str.w	r0, [sl, #16]
 800429a:	e480      	b.n	8003b9e <LCD_Line.constprop.2+0x37e>
 800429c:	2040      	movs	r0, #64	; 0x40
 800429e:	f8ca 0010 	str.w	r0, [sl, #16]
 80042a2:	e474      	b.n	8003b8e <LCD_Line.constprop.2+0x36e>
 80042a4:	2020      	movs	r0, #32
 80042a6:	f8ca 0010 	str.w	r0, [sl, #16]
 80042aa:	e468      	b.n	8003b7e <LCD_Line.constprop.2+0x35e>
 80042ac:	2010      	movs	r0, #16
 80042ae:	f8ca 0010 	str.w	r0, [sl, #16]
 80042b2:	e45c      	b.n	8003b6e <LCD_Line.constprop.2+0x34e>
 80042b4:	2008      	movs	r0, #8
 80042b6:	f8ca 0010 	str.w	r0, [sl, #16]
 80042ba:	e450      	b.n	8003b5e <LCD_Line.constprop.2+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042bc:	f8ca 5010 	str.w	r5, [sl, #16]
 80042c0:	e448      	b.n	8003b54 <LCD_Line.constprop.2+0x334>
    GPIOx->BSRR = GPIO_Pin;
 80042c2:	f04f 0c20 	mov.w	ip, #32
 80042c6:	f8c9 c010 	str.w	ip, [r9, #16]
 80042ca:	e419      	b.n	8003b00 <LCD_Line.constprop.2+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042cc:	f8ca 5010 	str.w	r5, [sl, #16]
 80042d0:	f7ff bb60 	b.w	8003994 <LCD_Line.constprop.2+0x174>
		if (x1 == x2 && y1 == y2)
 80042d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80042d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80042d8:	4293      	cmp	r3, r2
 80042da:	f47f af16 	bne.w	800410a <LCD_Line.constprop.2+0x8ea>
}
 80042de:	b02b      	add	sp, #172	; 0xac
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042e4 <LCD_Rect.constprop.0>:
	LCD_Line(x, y, x + w, y, size, color24);
 80042e4:	23be      	movs	r3, #190	; 0xbe
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80042e6:	b570      	push	{r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 80042e8:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 80042ec:	b2a4      	uxth	r4, r4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4622      	mov	r2, r4
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80042f2:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 80042f4:	f7ff fa94 	bl	8003820 <LCD_Line.constprop.2>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80042f8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80042fc:	4622      	mov	r2, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	4619      	mov	r1, r3
 8004302:	f7ff fa8d 	bl	8003820 <LCD_Line.constprop.2>
	LCD_Line(x, y, x, y + h, size, color24);
 8004306:	462a      	mov	r2, r5
 8004308:	4628      	mov	r0, r5
 800430a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800430e:	21be      	movs	r1, #190	; 0xbe
 8004310:	f7ff fa86 	bl	8003820 <LCD_Line.constprop.2>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004314:	4622      	mov	r2, r4
 8004316:	4620      	mov	r0, r4
}
 8004318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800431c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004320:	21be      	movs	r1, #190	; 0xbe
 8004322:	f7ff ba7d 	b.w	8003820 <LCD_Line.constprop.2>
 8004326:	bf00      	nop

08004328 <I2C_RequestMemoryWrite.constprop.0>:
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8004328:	b470      	push	{r4, r5, r6}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432a:	4c6c      	ldr	r4, [pc, #432]	; (80044dc <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 800432c:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432e:	6862      	ldr	r2, [r4, #4]
 8004330:	6813      	ldr	r3, [r2, #0]
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e003      	b.n	8004342 <I2C_RequestMemoryWrite.constprop.0+0x1a>
 800433a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	1a5b      	subs	r3, r3, r1
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d834      	bhi.n	80043ac <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004342:	6953      	ldr	r3, [r2, #20]
 8004344:	07db      	lsls	r3, r3, #31
 8004346:	d5f8      	bpl.n	800433a <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004348:	23ae      	movs	r3, #174	; 0xae
 800434a:	6113      	str	r3, [r2, #16]
 800434c:	e00a      	b.n	8004364 <I2C_RequestMemoryWrite.constprop.0+0x3c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434e:	6953      	ldr	r3, [r2, #20]
 8004350:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004354:	d157      	bne.n	8004406 <I2C_RequestMemoryWrite.constprop.0+0xde>
 8004356:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	eba5 0c01 	sub.w	ip, r5, r1
 800435c:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8004360:	f200 80a0 	bhi.w	80044a4 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004364:	6953      	ldr	r3, [r2, #20]
 8004366:	43db      	mvns	r3, r3
 8004368:	f013 0302 	ands.w	r3, r3, #2
 800436c:	d1ef      	bne.n	800434e <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	6953      	ldr	r3, [r2, #20]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	6993      	ldr	r3, [r2, #24]
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800437a:	6953      	ldr	r3, [r2, #20]
 800437c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004380:	d159      	bne.n	8004436 <I2C_RequestMemoryWrite.constprop.0+0x10e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004382:	6955      	ldr	r5, [r2, #20]
 8004384:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8004388:	d127      	bne.n	80043da <I2C_RequestMemoryWrite.constprop.0+0xb2>
 800438a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438c:	1a5b      	subs	r3, r3, r1
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d9f3      	bls.n	800437a <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004392:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004394:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004396:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800439a:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80043a0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	6463      	str	r3, [r4, #68]	; 0x44
 80043aa:	e025      	b.n	80043f8 <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043ac:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043b0:	6361      	str	r1, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80043b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80043bc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	f043 0320 	orr.w	r3, r3, #32
 80043c4:	6463      	str	r3, [r4, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	05da      	lsls	r2, r3, #23
 80043ca:	d54f      	bpl.n	800446c <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80043d0:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80043d4:	b003      	add	sp, #12
 80043d6:	bc70      	pop	{r4, r5, r6}
 80043d8:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80043e0:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80043ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f2:	f041 0104 	orr.w	r1, r1, #4
 80043f6:	6461      	str	r1, [r4, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d067      	beq.n	80044ce <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 80043fe:	2001      	movs	r0, #1
}
 8004400:	b003      	add	sp, #12
 8004402:	bc70      	pop	{r4, r5, r6}
 8004404:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800440c:	2520      	movs	r5, #32
    return HAL_ERROR;
 800440e:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004416:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800441a:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004424:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004426:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004430:	b003      	add	sp, #12
 8004432:	bc70      	pop	{r4, r5, r6}
 8004434:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004436:	0a03      	lsrs	r3, r0, #8
 8004438:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800443a:	6953      	ldr	r3, [r2, #20]
 800443c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004440:	d13f      	bne.n	80044c2 <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004442:	6955      	ldr	r5, [r2, #20]
 8004444:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8004448:	d114      	bne.n	8004474 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 800444a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	1a5b      	subs	r3, r3, r1
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d9f3      	bls.n	800443a <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004452:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004454:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800445a:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004460:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	f043 0320 	orr.w	r3, r3, #32
 8004468:	6463      	str	r3, [r4, #68]	; 0x44
 800446a:	e012      	b.n	8004492 <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 800446c:	2003      	movs	r0, #3
}
 800446e:	b003      	add	sp, #12
 8004470:	bc70      	pop	{r4, r5, r6}
 8004472:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004476:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800447a:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800447c:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004486:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004488:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448c:	f041 0104 	orr.w	r1, r1, #4
 8004490:	6461      	str	r1, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004494:	2b04      	cmp	r3, #4
 8004496:	d1b2      	bne.n	80043fe <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 800449a:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e7c5      	b.n	8004430 <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	2220      	movs	r2, #32
    return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80044aa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80044b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044b8:	4313      	orrs	r3, r2
 80044ba:	6463      	str	r3, [r4, #68]	; 0x44
}
 80044bc:	b003      	add	sp, #12
 80044be:	bc70      	pop	{r4, r5, r6}
 80044c0:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c2:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 80044c4:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c6:	6113      	str	r3, [r2, #16]
}
 80044c8:	b003      	add	sp, #12
 80044ca:	bc70      	pop	{r4, r5, r6}
 80044cc:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 80044d0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e7aa      	b.n	8004430 <I2C_RequestMemoryWrite.constprop.0+0x108>
 80044da:	bf00      	nop
 80044dc:	20000200 	.word	0x20000200

080044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80044e0:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80044e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e4:	4ba1      	ldr	r3, [pc, #644]	; (800476c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 80044e6:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80044e8:	9200      	str	r2, [sp, #0]
 80044ea:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80044f0:	2a20      	cmp	r2, #32
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 80044f4:	b007      	add	sp, #28
 80044f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	e003      	b.n	8004504 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 80044fc:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	2c19      	cmp	r4, #25
 8004502:	d86a      	bhi.n	80045da <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004504:	6994      	ldr	r4, [r2, #24]
 8004506:	ea6f 0c04 	mvn.w	ip, r4
 800450a:	f01c 0c02 	ands.w	ip, ip, #2
 800450e:	d0f5      	beq.n	80044fc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8004510:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8004514:	2c01      	cmp	r4, #1
 8004516:	d0ed      	beq.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8004518:	2401      	movs	r4, #1
 800451a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800451e:	6814      	ldr	r4, [r2, #0]
 8004520:	07e7      	lsls	r7, r4, #31
 8004522:	d555      	bpl.n	80045d0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004524:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004528:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800452e:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004530:	6814      	ldr	r4, [r2, #0]
 8004532:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8004536:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004538:	4c8d      	ldr	r4, [pc, #564]	; (8004770 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800453a:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453e:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004542:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004544:	85de      	strh	r6, [r3, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8004546:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8004548:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800454a:	631c      	str	r4, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454c:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800454e:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8004554:	8599      	strh	r1, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	6814      	ldr	r4, [r2, #0]
 800455a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	e003      	b.n	800456a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 8004562:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	2c64      	cmp	r4, #100	; 0x64
 8004568:	d85e      	bhi.n	8004628 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800456a:	6954      	ldr	r4, [r2, #20]
 800456c:	07e6      	lsls	r6, r4, #31
 800456e:	d5f8      	bpl.n	8004562 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004570:	24ae      	movs	r4, #174	; 0xae
 8004572:	6114      	str	r4, [r2, #16]
 8004574:	e008      	b.n	8004588 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004576:	6954      	ldr	r4, [r2, #20]
 8004578:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 800457c:	d169      	bne.n	8004652 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 800457e:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	1b76      	subs	r6, r6, r5
 8004582:	2e64      	cmp	r6, #100	; 0x64
 8004584:	f200 8089 	bhi.w	800469a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004588:	6954      	ldr	r4, [r2, #20]
 800458a:	43e4      	mvns	r4, r4
 800458c:	f014 0402 	ands.w	r4, r4, #2
 8004590:	d1f1      	bne.n	8004576 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	9405      	str	r4, [sp, #20]
 8004594:	6954      	ldr	r4, [r2, #20]
 8004596:	9405      	str	r4, [sp, #20]
 8004598:	6994      	ldr	r4, [r2, #24]
 800459a:	9405      	str	r4, [sp, #20]
 800459c:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459e:	6954      	ldr	r4, [r2, #20]
 80045a0:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80045a4:	d16a      	bne.n	800467c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a6:	6956      	ldr	r6, [r2, #20]
 80045a8:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80045ac:	d124      	bne.n	80045f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80045ae:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	2c64      	cmp	r4, #100	; 0x64
 80045b4:	d9f3      	bls.n	800459e <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b6:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045b8:	635e      	str	r6, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80045ba:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045be:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80045c4:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	f041 0120 	orr.w	r1, r1, #32
 80045cc:	6459      	str	r1, [r3, #68]	; 0x44
 80045ce:	e022      	b.n	8004616 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80045d0:	6814      	ldr	r4, [r2, #0]
 80045d2:	f044 0401 	orr.w	r4, r4, #1
 80045d6:	6014      	str	r4, [r2, #0]
 80045d8:	e7a4      	b.n	8004524 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045da:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045dc:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e4:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80045ea:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80045f4:	b007      	add	sp, #28
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80045fe:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004600:	635c      	str	r4, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8004602:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004606:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800460c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004610:	f041 0104 	orr.w	r1, r1, #4
 8004614:	6459      	str	r1, [r3, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	2b04      	cmp	r3, #4
 800461a:	f47f af6b 	bne.w	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e765      	b.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004628:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800462a:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800462c:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800462e:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004632:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004638:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	f041 0120 	orr.w	r1, r1, #32
 8004640:	6459      	str	r1, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	05d5      	lsls	r5, r2, #23
 8004646:	f57f af55 	bpl.w	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
 8004650:	e750      	b.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004654:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	6810      	ldr	r0, [r2, #0]
 800465c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004660:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004662:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004664:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004670:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004674:	f042 0204 	orr.w	r2, r2, #4
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
 800467a:	e73b      	b.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800467c:	0a04      	lsrs	r4, r0, #8
 800467e:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004680:	6954      	ldr	r4, [r2, #20]
 8004682:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 8004686:	d115      	bne.n	80046b4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004688:	6956      	ldr	r6, [r2, #20]
 800468a:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 800468e:	d1b3      	bne.n	80045f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 8004690:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	2c64      	cmp	r4, #100	; 0x64
 8004696:	d9f3      	bls.n	8004680 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 8004698:	e78d      	b.n	80045b6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 800469a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800469c:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a2:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046a8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	f042 0220 	orr.w	r2, r2, #32
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
 80046b2:	e71f      	b.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b4:	b2c0      	uxtb	r0, r0
 80046b6:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b8:	6950      	ldr	r0, [r2, #20]
 80046ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046be:	d124      	bne.n	800470a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c0:	6954      	ldr	r4, [r2, #20]
 80046c2:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80046c6:	d110      	bne.n	80046ea <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80046c8:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	1b40      	subs	r0, r0, r5
 80046cc:	2864      	cmp	r0, #100	; 0x64
 80046ce:	d9f3      	bls.n	80046b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80046d0:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046d2:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80046d4:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046d8:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046de:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046e2:	f041 0120 	orr.w	r1, r1, #32
 80046e6:	6459      	str	r1, [r3, #68]	; 0x44
 80046e8:	e795      	b.n	8004616 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ea:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ec:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 80046f0:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	6358      	str	r0, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80046fe:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004702:	f041 0104 	orr.w	r1, r1, #4
 8004706:	6459      	str	r1, [r3, #68]	; 0x44
 8004708:	e785      	b.n	8004616 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470a:	6810      	ldr	r0, [r2, #0]
 800470c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e003      	b.n	800471c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8004714:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	1b40      	subs	r0, r0, r5
 8004718:	2864      	cmp	r0, #100	; 0x64
 800471a:	d885      	bhi.n	8004628 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471c:	6950      	ldr	r0, [r2, #20]
 800471e:	07c4      	lsls	r4, r0, #31
 8004720:	d5f8      	bpl.n	8004714 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004722:	20af      	movs	r0, #175	; 0xaf
 8004724:	6110      	str	r0, [r2, #16]
 8004726:	e007      	b.n	8004738 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004728:	6950      	ldr	r0, [r2, #20]
 800472a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800472e:	d190      	bne.n	8004652 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8004730:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	1b64      	subs	r4, r4, r5
 8004734:	2c64      	cmp	r4, #100	; 0x64
 8004736:	d81d      	bhi.n	8004774 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004738:	6950      	ldr	r0, [r2, #20]
 800473a:	43c0      	mvns	r0, r0
 800473c:	f010 0002 	ands.w	r0, r0, #2
 8004740:	d1f2      	bne.n	8004728 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 8004742:	bb29      	cbnz	r1, 8004790 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004744:	9104      	str	r1, [sp, #16]
 8004746:	6951      	ldr	r1, [r2, #20]
 8004748:	9104      	str	r1, [sp, #16]
 800474a:	6991      	ldr	r1, [r2, #24]
 800474c:	9104      	str	r1, [sp, #16]
 800474e:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	6811      	ldr	r1, [r2, #0]
 8004752:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004756:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800475a:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004760:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8004768:	e6c4      	b.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800476a:	bf00      	nop
 800476c:	20000200 	.word	0x20000200
 8004770:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8004774:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004776:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800477c:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004782:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	f042 0220 	orr.w	r2, r2, #32
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800478c:	b007      	add	sp, #28
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8004790:	2901      	cmp	r1, #1
 8004792:	f000 80d8 	beq.w	8004946 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 8004796:	2902      	cmp	r1, #2
 8004798:	f000 80ec 	beq.w	8004974 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479c:	6814      	ldr	r4, [r2, #0]
 800479e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80047a2:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a4:	9001      	str	r0, [sp, #4]
 80047a6:	6950      	ldr	r0, [r2, #20]
 80047a8:	9001      	str	r0, [sp, #4]
 80047aa:	6990      	ldr	r0, [r2, #24]
 80047ac:	9001      	str	r0, [sp, #4]
 80047ae:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b0:	4e79      	ldr	r6, [pc, #484]	; (8004998 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80047b2:	4c7a      	ldr	r4, [pc, #488]	; (800499c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80047b4:	2903      	cmp	r1, #3
 80047b6:	d83c      	bhi.n	8004832 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80047b8:	2901      	cmp	r1, #1
 80047ba:	f000 809a 	beq.w	80048f2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80047be:	2902      	cmp	r1, #2
 80047c0:	d005      	beq.n	80047ce <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80047c2:	e053      	b.n	800486c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80047c4:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c6:	1b49      	subs	r1, r1, r5
 80047c8:	2964      	cmp	r1, #100	; 0x64
 80047ca:	f200 8097 	bhi.w	80048fc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ce:	6951      	ldr	r1, [r2, #20]
 80047d0:	0748      	lsls	r0, r1, #29
 80047d2:	d5f7      	bpl.n	80047c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d4:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	6811      	ldr	r1, [r2, #0]
 80047dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80047e0:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	6912      	ldr	r2, [r2, #16]
 80047e4:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80047e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e8:	3201      	adds	r2, #1
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80047ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ee:	3a01      	subs	r2, #1
 80047f0:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 80047f2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80047f4:	3a01      	subs	r2, #1
 80047f6:	b292      	uxth	r2, r2
 80047f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 80047fa:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	6911      	ldr	r1, [r2, #16]
 8004800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004802:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8004804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004806:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004808:	3201      	adds	r2, #1
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
          hi2c->XferSize--;
 800480e:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8004810:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8004812:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8004814:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8004816:	8599      	strh	r1, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004818:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 800481a:	2900      	cmp	r1, #0
 800481c:	d09c      	beq.n	8004758 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	e7c8      	b.n	80047b4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004822:	6950      	ldr	r0, [r2, #20]
 8004824:	f010 0010 	ands.w	r0, r0, #16
 8004828:	d177      	bne.n	800491a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 800482a:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	1b49      	subs	r1, r1, r5
 800482e:	2964      	cmp	r1, #100	; 0x64
 8004830:	d8a0      	bhi.n	8004774 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004832:	6951      	ldr	r1, [r2, #20]
 8004834:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8004838:	d0f3      	beq.n	8004822 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	6911      	ldr	r1, [r2, #16]
 800483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483e:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8004840:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8004842:	6a98      	ldr	r0, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004844:	3a01      	subs	r2, #1
 8004846:	b292      	uxth	r2, r2
 8004848:	85da      	strh	r2, [r3, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800484a:	685a      	ldr	r2, [r3, #4]
        hi2c->XferSize--;
 800484c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 800484e:	1c47      	adds	r7, r0, #1
 8004850:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004852:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8004854:	3901      	subs	r1, #1
 8004856:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004858:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 800485a:	8599      	strh	r1, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800485c:	d5dd      	bpl.n	800481a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	6912      	ldr	r2, [r2, #16]
 8004860:	7042      	strb	r2, [r0, #1]
 8004862:	e7cf      	b.n	8004804 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8004864:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	1b49      	subs	r1, r1, r5
 8004868:	2964      	cmp	r1, #100	; 0x64
 800486a:	d847      	bhi.n	80048fc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800486c:	6951      	ldr	r1, [r2, #20]
 800486e:	0749      	lsls	r1, r1, #29
 8004870:	d5f8      	bpl.n	8004864 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	6811      	ldr	r1, [r2, #0]
 8004874:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004878:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800487a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	08d2      	lsrs	r2, r2, #3
 8004884:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800488a:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488c:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 800488e:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004890:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8004894:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004896:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 800489a:	b289      	uxth	r1, r1
 800489c:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800489e:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80048a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80048a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80048a4:	3a01      	subs	r2, #1
 80048a6:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80048a8:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048aa:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28
 80048ae:	e002      	b.n	80048b6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048b0:	694a      	ldr	r2, [r1, #20]
 80048b2:	0752      	lsls	r2, r2, #29
 80048b4:	d440      	bmi.n	8004938 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80048b6:	9a00      	ldr	r2, [sp, #0]
 80048b8:	3a01      	subs	r2, #1
 80048ba:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80048bc:	9a00      	ldr	r2, [sp, #0]
 80048be:	2a00      	cmp	r2, #0
 80048c0:	d1f6      	bne.n	80048b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80048c2:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80048c6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80048d0:	f041 0120 	orr.w	r1, r1, #32
 80048d4:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80048d6:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048dc:	b007      	add	sp, #28
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048e0:	6950      	ldr	r0, [r2, #20]
 80048e2:	f010 0010 	ands.w	r0, r0, #16
 80048e6:	d118      	bne.n	800491a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 80048e8:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	1b49      	subs	r1, r1, r5
 80048ec:	2964      	cmp	r1, #100	; 0x64
 80048ee:	f63f af41 	bhi.w	8004774 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f2:	6951      	ldr	r1, [r2, #20]
 80048f4:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 80048f8:	d0f2      	beq.n	80048e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 80048fa:	e780      	b.n	80047fe <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048fc:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fe:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004900:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004906:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800490c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	f042 0220 	orr.w	r2, r2, #32
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004916:	b007      	add	sp, #28
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491a:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004920:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800492e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004934:	b007      	add	sp, #28
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	680a      	ldr	r2, [r1, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493e:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	690a      	ldr	r2, [r1, #16]
 8004942:	7042      	strb	r2, [r0, #1]
 8004944:	e74f      	b.n	80047e6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	6811      	ldr	r1, [r2, #0]
 8004948:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800494c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800494e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	9003      	str	r0, [sp, #12]
 8004954:	6951      	ldr	r1, [r2, #20]
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	6991      	ldr	r1, [r2, #24]
 800495a:	9103      	str	r1, [sp, #12]
 800495c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495e:	6811      	ldr	r1, [r2, #0]
 8004960:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004964:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004966:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004968:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800496a:	2900      	cmp	r1, #0
 800496c:	f43f aef4 	beq.w	8004758 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	e71d      	b.n	80047b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800497a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800497c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	9002      	str	r0, [sp, #8]
 8004982:	6951      	ldr	r1, [r2, #20]
 8004984:	9102      	str	r1, [sp, #8]
 8004986:	6991      	ldr	r1, [r2, #24]
 8004988:	9102      	str	r1, [sp, #8]
 800498a:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004992:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004994:	b662      	cpsie	i
}
 8004996:	e7e7      	b.n	8004968 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 8004998:	20000000 	.word	0x20000000
 800499c:	14f8b589 	.word	0x14f8b589

080049a0 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80049a0:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 80049a2:	b500      	push	{lr}
 80049a4:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049a6:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049a8:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049ac:	f7ff fd98 	bl	80044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 80049b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80049b4:	b003      	add	sp, #12
 80049b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ba:	bf00      	nop

080049bc <AT24XX_Update>:
    uint16_t dt[1] = {0};
 80049bc:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	460d      	mov	r5, r1
 80049c2:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049c4:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049c6:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80049ca:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049cc:	f7ff fd88 	bl	80044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80049d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80049d4:	429d      	cmp	r5, r3
 80049d6:	d101      	bne.n	80049dc <AT24XX_Update+0x20>
}
 80049d8:	b003      	add	sp, #12
 80049da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049dc:	4c61      	ldr	r4, [pc, #388]	; (8004b64 <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80049de:	f88d 5004 	strb.w	r5, [sp, #4]
 80049e2:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d1f5      	bne.n	80049d8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ec:	6861      	ldr	r1, [r4, #4]
 80049ee:	e004      	b.n	80049fa <AT24XX_Update+0x3e>
 80049f0:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	1b52      	subs	r2, r2, r5
 80049f4:	2a19      	cmp	r2, #25
 80049f6:	f200 80a7 	bhi.w	8004b48 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049fa:	698b      	ldr	r3, [r1, #24]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	f013 0302 	ands.w	r3, r3, #2
 8004a02:	d0f5      	beq.n	80049f0 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8004a04:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d0e5      	beq.n	80049d8 <AT24XX_Update+0x1c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	680b      	ldr	r3, [r1, #0]
 8004a14:	07da      	lsls	r2, r3, #31
 8004a16:	d403      	bmi.n	8004a20 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004a18:	680b      	ldr	r3, [r1, #0]
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8004a20:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a22:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a24:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a28:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2a:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2c:	680b      	ldr	r3, [r1, #0]
 8004a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a32:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a34:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8004a38:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a3a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004a40:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8004a42:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8004a44:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a46:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a48:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8004a4a:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a4c:	6323      	str	r3, [r4, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4e:	f7ff fc6b 	bl	8004328 <I2C_RequestMemoryWrite.constprop.0>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d1c0      	bne.n	80049d8 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8004a56:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f000 8081 	beq.w	8004b60 <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5e:	6861      	ldr	r1, [r4, #4]
 8004a60:	694b      	ldr	r3, [r1, #20]
 8004a62:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004a66:	d114      	bne.n	8004a92 <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a68:	694a      	ldr	r2, [r1, #20]
 8004a6a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004a6e:	d130      	bne.n	8004ad2 <AT24XX_Update+0x116>
 8004a70:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	1b5b      	subs	r3, r3, r5
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d9f3      	bls.n	8004a60 <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a78:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7a:	6362      	str	r2, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	f043 0320 	orr.w	r3, r3, #32
 8004a8e:	6463      	str	r3, [r4, #68]	; 0x44
 8004a90:	e02e      	b.n	8004af0 <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      hi2c->XferSize--;
 8004a94:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a96:	4633      	mov	r3, r6
 8004a98:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8004a9c:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9e:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8004aa0:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004aa2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 8004aa4:	85a2      	strh	r2, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aac:	694b      	ldr	r3, [r1, #20]
 8004aae:	075b      	lsls	r3, r3, #29
 8004ab0:	d427      	bmi.n	8004b02 <AT24XX_Update+0x146>
      hi2c->XferSize--;
 8004ab2:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d1d3      	bne.n	8004a60 <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab8:	694b      	ldr	r3, [r1, #20]
 8004aba:	f013 0304 	ands.w	r3, r3, #4
 8004abe:	d130      	bne.n	8004b22 <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac0:	694a      	ldr	r2, [r1, #20]
 8004ac2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004ac6:	d104      	bne.n	8004ad2 <AT24XX_Update+0x116>
 8004ac8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	1b5b      	subs	r3, r3, r5
 8004acc:	2b64      	cmp	r3, #100	; 0x64
 8004ace:	d9f3      	bls.n	8004ab8 <AT24XX_Update+0xfc>
 8004ad0:	e7d2      	b.n	8004a78 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad2:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004ad8:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ada:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004ae6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aea:	f042 0204 	orr.w	r2, r2, #4
 8004aee:	6462      	str	r2, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	f47f af70 	bne.w	80049d8 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af8:	680b      	ldr	r3, [r1, #0]
 8004afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afe:	600b      	str	r3, [r1, #0]
 8004b00:	e76a      	b.n	80049d8 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	d0d8      	beq.n	8004ab8 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b06:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8004b08:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0a:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8004b0c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 8004b0e:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8004b10:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004b12:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8004b14:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004b16:	62a6      	str	r6, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8004b18:	85a0      	strh	r0, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8004b1a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d19f      	bne.n	8004a60 <AT24XX_Update+0xa4>
 8004b20:	e7ca      	b.n	8004ab8 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	680b      	ldr	r3, [r1, #0]
 8004b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2c:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004b36:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d9fb      	bls.n	8004b3c <AT24XX_Update+0x180>
}
 8004b44:	b003      	add	sp, #12
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b48:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b4a:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b4c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004b54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	6463      	str	r3, [r4, #68]	; 0x44
 8004b5e:	e73b      	b.n	80049d8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b60:	6861      	ldr	r1, [r4, #4]
 8004b62:	e7a9      	b.n	8004ab8 <AT24XX_Update+0xfc>
 8004b64:	20000200 	.word	0x20000200
 8004b68:	ffff0000 	.word	0xffff0000

08004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004b6e:	2400      	movs	r4, #0
  return uwTick;
 8004b70:	4b8b      	ldr	r3, [pc, #556]	; (8004da0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004b72:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8004b74:	9400      	str	r4, [sp, #0]
 8004b76:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b78:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8004b7c:	2c20      	cmp	r4, #32
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8004b80:	b007      	add	sp, #28
 8004b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b84:	685c      	ldr	r4, [r3, #4]
 8004b86:	e004      	b.n	8004b92 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8004b88:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	1bad      	subs	r5, r5, r6
 8004b8c:	2d19      	cmp	r5, #25
 8004b8e:	f200 80b3 	bhi.w	8004cf8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b92:	69a5      	ldr	r5, [r4, #24]
 8004b94:	ea6f 0c05 	mvn.w	ip, r5
 8004b98:	f01c 0c02 	ands.w	ip, ip, #2
 8004b9c:	d0f4      	beq.n	8004b88 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8004b9e:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8004ba2:	2d01      	cmp	r5, #1
 8004ba4:	d0ec      	beq.n	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 8004ba6:	2501      	movs	r5, #1
 8004ba8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bac:	6825      	ldr	r5, [r4, #0]
 8004bae:	07ed      	lsls	r5, r5, #31
 8004bb0:	d55d      	bpl.n	8004c6e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bb2:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bb6:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bba:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbc:	6825      	ldr	r5, [r4, #0]
 8004bbe:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004bc2:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8004bc4:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc6:	4977      	ldr	r1, [pc, #476]	; (8004da4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bc8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bcc:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bd0:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004bd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8004bd4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd6:	6319      	str	r1, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bda:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8004bdc:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004be2:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 8004be4:	859a      	strh	r2, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004be8:	d007      	beq.n	8004bfa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 8004bea:	2d01      	cmp	r5, #1
 8004bec:	d005      	beq.n	8004bfa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 8004bee:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004bf2:	d002      	beq.n	8004bfa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bf6:	2911      	cmp	r1, #17
 8004bf8:	d109      	bne.n	8004c0e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfa:	6821      	ldr	r1, [r4, #0]
 8004bfc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004c00:	6021      	str	r1, [r4, #0]
 8004c02:	e004      	b.n	8004c0e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 8004c04:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	1b89      	subs	r1, r1, r6
 8004c08:	2964      	cmp	r1, #100	; 0x64
 8004c0a:	f200 8084 	bhi.w	8004d16 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0e:	6961      	ldr	r1, [r4, #20]
 8004c10:	07cf      	lsls	r7, r1, #31
 8004c12:	d5f7      	bpl.n	8004c04 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c14:	6959      	ldr	r1, [r3, #20]
 8004c16:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004c1a:	d12d      	bne.n	8004c78 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c1c:	f040 0001 	orr.w	r0, r0, #1
 8004c20:	b2c0      	uxtb	r0, r0
 8004c22:	6120      	str	r0, [r4, #16]
 8004c24:	e008      	b.n	8004c38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c26:	6961      	ldr	r1, [r4, #20]
 8004c28:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c2c:	f040 8088 	bne.w	8004d40 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004c30:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	1b80      	subs	r0, r0, r6
 8004c34:	2864      	cmp	r0, #100	; 0x64
 8004c36:	d851      	bhi.n	8004cdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c38:	6961      	ldr	r1, [r4, #20]
 8004c3a:	43c9      	mvns	r1, r1
 8004c3c:	f011 0102 	ands.w	r1, r1, #2
 8004c40:	d1f1      	bne.n	8004c26 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 8004c42:	2a00      	cmp	r2, #0
 8004c44:	f040 8092 	bne.w	8004d6c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c48:	9204      	str	r2, [sp, #16]
 8004c4a:	6962      	ldr	r2, [r4, #20]
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	69a2      	ldr	r2, [r4, #24]
 8004c50:	9204      	str	r2, [sp, #16]
 8004c52:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8004c6c:	e788      	b.n	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	f045 0501 	orr.w	r5, r5, #1
 8004c74:	6025      	str	r5, [r4, #0]
 8004c76:	e79c      	b.n	8004bb2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c78:	21f0      	movs	r1, #240	; 0xf0
 8004c7a:	6121      	str	r1, [r4, #16]
 8004c7c:	e007      	b.n	8004c8e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7e:	6961      	ldr	r1, [r4, #20]
 8004c80:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c84:	d15c      	bne.n	8004d40 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004c86:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c88:	1bad      	subs	r5, r5, r6
 8004c8a:	2d64      	cmp	r5, #100	; 0x64
 8004c8c:	d826      	bhi.n	8004cdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c8e:	6961      	ldr	r1, [r4, #20]
 8004c90:	070d      	lsls	r5, r1, #28
 8004c92:	d5f4      	bpl.n	8004c7e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c94:	6120      	str	r0, [r4, #16]
 8004c96:	e007      	b.n	8004ca8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c98:	6961      	ldr	r1, [r4, #20]
 8004c9a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c9e:	d14f      	bne.n	8004d40 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004ca0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	1b80      	subs	r0, r0, r6
 8004ca4:	2864      	cmp	r0, #100	; 0x64
 8004ca6:	d819      	bhi.n	8004cdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca8:	6961      	ldr	r1, [r4, #20]
 8004caa:	43c9      	mvns	r1, r1
 8004cac:	f011 0102 	ands.w	r1, r1, #2
 8004cb0:	d1f2      	bne.n	8004c98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb2:	9105      	str	r1, [sp, #20]
 8004cb4:	6961      	ldr	r1, [r4, #20]
 8004cb6:	9105      	str	r1, [sp, #20]
 8004cb8:	69a1      	ldr	r1, [r4, #24]
 8004cba:	9105      	str	r1, [sp, #20]
 8004cbc:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	e003      	b.n	8004cd0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 8004cc8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cca:	1b89      	subs	r1, r1, r6
 8004ccc:	2964      	cmp	r1, #100	; 0x64
 8004cce:	d822      	bhi.n	8004d16 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd0:	6961      	ldr	r1, [r4, #20]
 8004cd2:	07c9      	lsls	r1, r1, #31
 8004cd4:	d5f8      	bpl.n	8004cc8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004cd6:	21f1      	movs	r1, #241	; 0xf1
 8004cd8:	6121      	str	r1, [r4, #16]
 8004cda:	e7ad      	b.n	8004c38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cdc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cde:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce4:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004cea:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004cf4:	b007      	add	sp, #28
 8004cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cfa:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d02:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004d08:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d0c:	f042 0220 	orr.w	r2, r2, #32
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004d12:	b007      	add	sp, #28
 8004d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d16:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d18:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d1a:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d20:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004d26:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	f042 0220 	orr.w	r2, r2, #32
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	05d0      	lsls	r0, r2, #23
 8004d34:	f57f af24 	bpl.w	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d3e:	e71f      	b.n	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d40:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d46:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d50:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d54:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004d5e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d62:	f042 0204 	orr.w	r2, r2, #4
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004d68:	b007      	add	sp, #28
 8004d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8004d6c:	2a01      	cmp	r2, #1
 8004d6e:	f000 80fc 	beq.w	8004f6a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 8004d72:	2a02      	cmp	r2, #2
 8004d74:	f000 80be 	beq.w	8004ef4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8004d7e:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d80:	9101      	str	r1, [sp, #4]
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	9101      	str	r1, [sp, #4]
 8004d86:	69a1      	ldr	r1, [r4, #24]
 8004d88:	9101      	str	r1, [sp, #4]
 8004d8a:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d8c:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 8004d90:	2a03      	cmp	r2, #3
 8004d92:	d847      	bhi.n	8004e24 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	f000 80a5 	beq.w	8004ee4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 8004d9a:	2a02      	cmp	r2, #2
 8004d9c:	d00d      	beq.n	8004dba <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 8004d9e:	e05e      	b.n	8004e5e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 8004da0:	20000200 	.word	0x20000200
 8004da4:	ffff0000 	.word	0xffff0000
 8004da8:	20000000 	.word	0x20000000
 8004dac:	14f8b589 	.word	0x14f8b589
 8004db0:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	1b92      	subs	r2, r2, r6
 8004db4:	2a64      	cmp	r2, #100	; 0x64
 8004db6:	f200 80b4 	bhi.w	8004f22 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dba:	6962      	ldr	r2, [r4, #20]
 8004dbc:	0757      	lsls	r7, r2, #29
 8004dbe:	d5f7      	bpl.n	8004db0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	6811      	ldr	r1, [r2, #0]
 8004dc8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004dcc:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	6912      	ldr	r2, [r2, #16]
 8004dd0:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 8004dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd4:	3201      	adds	r2, #1
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004dde:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8004de0:	3a01      	subs	r2, #1
 8004de2:	b292      	uxth	r2, r2
 8004de4:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8004de6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	6911      	ldr	r1, [r2, #16]
 8004dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dee:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8004df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          hi2c->pBuffPtr++;
 8004df4:	3201      	adds	r2, #1
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004df8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004dfa:	3901      	subs	r1, #1
          hi2c->XferSize--;
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004e00:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8004e02:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004e04:	85d9      	strh	r1, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	f43f af28 	beq.w	8004c5c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e0c:	685c      	ldr	r4, [r3, #4]
 8004e0e:	e7bf      	b.n	8004d90 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e10:	6961      	ldr	r1, [r4, #20]
 8004e12:	f011 0110 	ands.w	r1, r1, #16
 8004e16:	f040 8093 	bne.w	8004f40 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8004e1a:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	1b92      	subs	r2, r2, r6
 8004e1e:	2a64      	cmp	r2, #100	; 0x64
 8004e20:	f63f af5c 	bhi.w	8004cdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e24:	6962      	ldr	r2, [r4, #20]
 8004e26:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004e2a:	d0f1      	beq.n	8004e10 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	6921      	ldr	r1, [r4, #16]
 8004e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e30:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8004e32:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8004e34:	6a99      	ldr	r1, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e36:	3a01      	subs	r2, #1
 8004e38:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e3a:	685c      	ldr	r4, [r3, #4]
        hi2c->XferCount--;
 8004e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8004e3e:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8004e40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 8004e42:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e44:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8004e46:	3a01      	subs	r2, #1
 8004e48:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e4a:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8004e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e4e:	d5da      	bpl.n	8004e06 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	704a      	strb	r2, [r1, #1]
 8004e54:	e7cc      	b.n	8004df0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8004e56:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	1b92      	subs	r2, r2, r6
 8004e5a:	2a64      	cmp	r2, #100	; 0x64
 8004e5c:	d861      	bhi.n	8004f22 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5e:	6962      	ldr	r2, [r4, #20]
 8004e60:	0751      	lsls	r1, r2, #29
 8004e62:	d5f8      	bpl.n	8004e56 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e6c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e72:	682a      	ldr	r2, [r5, #0]
 8004e74:	08d2      	lsrs	r2, r2, #3
 8004e76:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e7c:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8004e80:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8004e86:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e88:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8004e8c:	b289      	uxth	r1, r1
 8004e8e:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e90:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 8004e92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004e94:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004e96:	3a01      	subs	r2, #1
 8004e98:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004e9a:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e9c:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea0:	e002      	b.n	8004ea8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ea2:	694a      	ldr	r2, [r1, #20]
 8004ea4:	0752      	lsls	r2, r2, #29
 8004ea6:	d459      	bmi.n	8004f5c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 8004ea8:	9a00      	ldr	r2, [sp, #0]
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8004eae:	9a00      	ldr	r2, [sp, #0]
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d1f6      	bne.n	8004ea2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 8004eb8:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004ec2:	f041 0120 	orr.w	r1, r1, #32
 8004ec6:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004ece:	b007      	add	sp, #28
 8004ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ed2:	6961      	ldr	r1, [r4, #20]
 8004ed4:	f011 0110 	ands.w	r1, r1, #16
 8004ed8:	d132      	bne.n	8004f40 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8004eda:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	1b92      	subs	r2, r2, r6
 8004ede:	2a64      	cmp	r2, #100	; 0x64
 8004ee0:	f63f aefc 	bhi.w	8004cdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee4:	6962      	ldr	r2, [r4, #20]
 8004ee6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004eea:	d0f2      	beq.n	8004ed2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	6921      	ldr	r1, [r4, #16]
 8004eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef0:	7011      	strb	r1, [r2, #0]
 8004ef2:	e77d      	b.n	8004df0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efa:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004efc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	9102      	str	r1, [sp, #8]
 8004f02:	6951      	ldr	r1, [r2, #20]
 8004f04:	9102      	str	r1, [sp, #8]
 8004f06:	6991      	ldr	r1, [r2, #24]
 8004f08:	9102      	str	r1, [sp, #8]
 8004f0a:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004f12:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f14:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	f43f ae9f 	beq.w	8004c5c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1e:	685c      	ldr	r4, [r3, #4]
 8004f20:	e734      	b.n	8004d8c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f22:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f24:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f26:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f2c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004f32:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	f042 0220 	orr.w	r2, r2, #32
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004f3c:	b007      	add	sp, #28
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f40:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f42:	f06f 0010 	mvn.w	r0, #16
 8004f46:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f4a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f52:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f58:	6459      	str	r1, [r3, #68]	; 0x44
 8004f5a:	e611      	b.n	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	680a      	ldr	r2, [r1, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	690a      	ldr	r2, [r1, #16]
 8004f66:	7062      	strb	r2, [r4, #1]
 8004f68:	e733      	b.n	8004dd2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f70:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f72:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	9103      	str	r1, [sp, #12]
 8004f78:	6951      	ldr	r1, [r2, #20]
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	6991      	ldr	r1, [r2, #24]
 8004f7e:	9103      	str	r1, [sp, #12]
 8004f80:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f88:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f8a:	b662      	cpsie	i
}
 8004f8c:	e7c3      	b.n	8004f16 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8004f8e:	bf00      	nop

08004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	4b97      	ldr	r3, [pc, #604]	; (80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8004f94:	b083      	sub	sp, #12
 8004f96:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f98:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8004f9c:	2c20      	cmp	r4, #32
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8004fa0:	b003      	add	sp, #12
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa4:	685c      	ldr	r4, [r3, #4]
 8004fa6:	e004      	b.n	8004fb2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8004fa8:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	1bad      	subs	r5, r5, r6
 8004fac:	2d19      	cmp	r5, #25
 8004fae:	f200 80cc 	bhi.w	800514a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb2:	69a5      	ldr	r5, [r4, #24]
 8004fb4:	ea6f 0c05 	mvn.w	ip, r5
 8004fb8:	f01c 0c02 	ands.w	ip, ip, #2
 8004fbc:	d0f4      	beq.n	8004fa8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8004fbe:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8004fc2:	2d01      	cmp	r5, #1
 8004fc4:	d0ec      	beq.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8004fc6:	2501      	movs	r5, #1
 8004fc8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	07ed      	lsls	r5, r5, #31
 8004fd0:	f140 80a7 	bpl.w	8005122 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fd4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fd8:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fdc:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004fe4:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fe6:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fea:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fee:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff2:	4a80      	ldr	r2, [pc, #512]	; (80051f4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8004ff4:	8ddd      	ldrh	r5, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hi2c->XferSize    = hi2c->XferCount;
 8004ffa:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffc:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8004ffe:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8005000:	859d      	strh	r5, [r3, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005002:	d007      	beq.n	8005014 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8005004:	2a01      	cmp	r2, #1
 8005006:	d005      	beq.n	8005014 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8005008:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800500c:	d002      	beq.n	8005014 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800500e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005010:	2a12      	cmp	r2, #18
 8005012:	d109      	bne.n	8005028 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	e004      	b.n	8005028 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 800501e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005020:	1b92      	subs	r2, r2, r6
 8005022:	2a64      	cmp	r2, #100	; 0x64
 8005024:	f200 80a0 	bhi.w	8005168 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005028:	6962      	ldr	r2, [r4, #20]
 800502a:	07d2      	lsls	r2, r2, #31
 800502c:	d5f7      	bpl.n	800501e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005034:	d17a      	bne.n	800512c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005036:	6120      	str	r0, [r4, #16]
 8005038:	e009      	b.n	800504e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800503a:	6962      	ldr	r2, [r4, #20]
 800503c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8005040:	f040 80a7 	bne.w	8005192 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8005044:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	1b89      	subs	r1, r1, r6
 8005048:	2964      	cmp	r1, #100	; 0x64
 800504a:	f200 80b8 	bhi.w	80051be <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504e:	6962      	ldr	r2, [r4, #20]
 8005050:	43d2      	mvns	r2, r2
 8005052:	f012 0202 	ands.w	r2, r2, #2
 8005056:	d1f0      	bne.n	800503a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005058:	9201      	str	r2, [sp, #4]
 800505a:	6962      	ldr	r2, [r4, #20]
 800505c:	9201      	str	r2, [sp, #4]
 800505e:	69a2      	ldr	r2, [r4, #24]
 8005060:	9201      	str	r2, [sp, #4]
 8005062:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8005064:	2d00      	cmp	r5, #0
 8005066:	f000 80b6 	beq.w	80051d6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506a:	6962      	ldr	r2, [r4, #20]
 800506c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8005070:	d12c      	bne.n	80050cc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005072:	6961      	ldr	r1, [r4, #20]
 8005074:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8005078:	d110      	bne.n	800509c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 800507a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507c:	1b92      	subs	r2, r2, r6
 800507e:	2a64      	cmp	r2, #100	; 0x64
 8005080:	d9f3      	bls.n	800506a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005082:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005084:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800508a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800508e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005090:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	f042 0220 	orr.w	r2, r2, #32
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
 800509a:	e00e      	b.n	80050ba <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 800509c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80050a2:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80050a6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050b4:	f041 0104 	orr.w	r1, r1, #4
 80050b8:	6459      	str	r1, [r3, #68]	; 0x44
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	2b04      	cmp	r3, #4
 80050be:	f47f af6f 	bne.w	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	e769      	b.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050cc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
      hi2c->XferSize--;
 80050ce:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d0:	4638      	mov	r0, r7
 80050d2:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 80050d6:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d8:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 80050da:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
      hi2c->pBuffPtr++;
 80050dc:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050de:	3901      	subs	r1, #1
 80050e0:	b289      	uxth	r1, r1
 80050e2:	85d9      	strh	r1, [r3, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e4:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 80050e6:	859a      	strh	r2, [r3, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e8:	0749      	lsls	r1, r1, #29
 80050ea:	d518      	bpl.n	800511e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 80050ec:	b1ba      	cbz	r2, 800511e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ee:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 80050f0:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f2:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 80050f4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->XferSize--;
 80050f6:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 80050f8:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 80050fa:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80050fc:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80050fe:	629f      	str	r7, [r3, #40]	; 0x28
        hi2c->XferSize--;
 8005100:	859d      	strh	r5, [r3, #44]	; 0x2c
        hi2c->XferCount--;
 8005102:	85da      	strh	r2, [r3, #46]	; 0x2e
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005104:	6962      	ldr	r2, [r4, #20]
 8005106:	f012 0204 	ands.w	r2, r2, #4
 800510a:	d1ab      	bne.n	8005064 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800510c:	6961      	ldr	r1, [r4, #20]
 800510e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8005112:	d1c3      	bne.n	800509c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8005114:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	1b92      	subs	r2, r2, r6
 8005118:	2a64      	cmp	r2, #100	; 0x64
 800511a:	d9f3      	bls.n	8005104 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 800511c:	e7b1      	b.n	8005082 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 800511e:	4615      	mov	r5, r2
 8005120:	e7f0      	b.n	8005104 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	f045 0501 	orr.w	r5, r5, #1
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	e753      	b.n	8004fd4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800512c:	22f0      	movs	r2, #240	; 0xf0
 800512e:	6122      	str	r2, [r4, #16]
 8005130:	e007      	b.n	8005142 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005132:	6962      	ldr	r2, [r4, #20]
 8005134:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8005138:	d12b      	bne.n	8005192 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 800513a:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	1b89      	subs	r1, r1, r6
 800513e:	2964      	cmp	r1, #100	; 0x64
 8005140:	d83d      	bhi.n	80051be <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005142:	6962      	ldr	r2, [r4, #20]
 8005144:	0717      	lsls	r7, r2, #28
 8005146:	d5f4      	bpl.n	8005132 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8005148:	e775      	b.n	8005036 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 800514a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800514c:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005154:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800515a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	f042 0220 	orr.w	r2, r2, #32
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005164:	b003      	add	sp, #12
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005168:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800516a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800516c:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005172:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005178:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	f042 0220 	orr.w	r2, r2, #32
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	05d1      	lsls	r1, r2, #23
 8005186:	f57f af0b 	bpl.w	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800518a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
 8005190:	e706      	b.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005194:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a2:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051aa:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80051b0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b4:	f042 0204 	orr.w	r2, r2, #4
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
}
 80051ba:	b003      	add	sp, #12
 80051bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80051c2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d0:	430a      	orrs	r2, r1
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44
 80051d4:	e6e4      	b.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051e6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ea:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    return HAL_OK;
 80051ee:	e6d7      	b.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 80051f0:	20000200 	.word	0x20000200
 80051f4:	ffff0000 	.word	0xffff0000

080051f8 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 80051f8:	2300      	movs	r3, #0
void DS3231_Update(void) {
 80051fa:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80051fc:	4c0f      	ldr	r4, [pc, #60]	; (800523c <DS3231_Update+0x44>)
void DS3231_Update(void) {
 80051fe:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8005200:	f10d 0107 	add.w	r1, sp, #7
 8005204:	2201      	movs	r2, #1
 8005206:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8005208:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800520c:	f7ff fec0 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8005210:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8005214:	2213      	movs	r2, #19
 8005216:	20d0      	movs	r0, #208	; 0xd0
 8005218:	f7ff fca8 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 800521c:	e9d4 0229 	ldrd	r0, r2, [r4, #164]	; 0xa4
 8005220:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8005224:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005228:	f8c4 00b9 	str.w	r0, [r4, #185]	; 0xb9
 800522c:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
 8005230:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
 8005234:	f8c4 30c1 	str.w	r3, [r4, #193]	; 0xc1
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8005238:	b002      	add	sp, #8
 800523a:	bd10      	pop	{r4, pc}
 800523c:	20000200 	.word	0x20000200

08005240 <LCD_Char.constprop.0.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005246:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8005248:	b085      	sub	sp, #20
 800524a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 800524e:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005252:	b38b      	cbz	r3, 80052b8 <LCD_Char.constprop.0.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8005254:	2600      	movs	r6, #0
 8005256:	4691      	mov	r9, r2
 8005258:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800525a:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800525c:	f899 1002 	ldrb.w	r1, [r9, #2]
 8005260:	b351      	cbz	r1, 80052b8 <LCD_Char.constprop.0.isra.0+0x78>
 8005262:	2400      	movs	r4, #0
 8005264:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8005266:	2e00      	cmp	r6, #0
 8005268:	d045      	beq.n	80052f6 <LCD_Char.constprop.0.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 800526a:	4633      	mov	r3, r6
 800526c:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 800526e:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8005272:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8005276:	d022      	beq.n	80052be <LCD_Char.constprop.0.isra.0+0x7e>
				set_pixels++;
 8005278:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800527a:	3401      	adds	r4, #1
 800527c:	b2e4      	uxtb	r4, r4
 800527e:	42a1      	cmp	r1, r4
 8005280:	d8f1      	bhi.n	8005266 <LCD_Char.constprop.0.isra.0+0x26>
		}
		if (set_pixels > 0)
 8005282:	b18a      	cbz	r2, 80052a8 <LCD_Char.constprop.0.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	f999 0005 	ldrsb.w	r0, [r9, #5]
 800528c:	9b02      	ldr	r3, [sp, #8]
 800528e:	4420      	add	r0, r4
 8005290:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8005294:	1a80      	subs	r0, r0, r2
 8005296:	4418      	add	r0, r3
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	4451      	add	r1, sl
 800529c:	4419      	add	r1, r3
 800529e:	b280      	uxth	r0, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	b289      	uxth	r1, r1
 80052a4:	f7fb fcc6 	bl	8000c34 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80052a8:	f899 3003 	ldrb.w	r3, [r9, #3]
 80052ac:	f10a 0a01 	add.w	sl, sl, #1
 80052b0:	fa5f fa8a 	uxtb.w	sl, sl
 80052b4:	459a      	cmp	sl, r3
 80052b6:	d3d1      	bcc.n	800525c <LCD_Char.constprop.0.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 80052b8:	b005      	add	sp, #20
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d0db      	beq.n	800527a <LCD_Char.constprop.0.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80052c2:	f999 1006 	ldrsb.w	r1, [r9, #6]
 80052c6:	f999 0005 	ldrsb.w	r0, [r9, #5]
 80052ca:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80052ce:	4451      	add	r1, sl
 80052d0:	4461      	add	r1, ip
 80052d2:	4420      	add	r0, r4
 80052d4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80052d8:	1a80      	subs	r0, r0, r2
 80052da:	4460      	add	r0, ip
 80052dc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80052e0:	b289      	uxth	r1, r1
 80052e2:	2301      	movs	r3, #1
 80052e4:	f8cd c000 	str.w	ip, [sp]
 80052e8:	b280      	uxth	r0, r0
 80052ea:	f7fb fca3 	bl	8000c34 <LCD_Rect_Fill>
				set_pixels = 0;
 80052ee:	462a      	mov	r2, r5
 80052f0:	f899 1002 	ldrb.w	r1, [r9, #2]
 80052f4:	e7c1      	b.n	800527a <LCD_Char.constprop.0.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80052f6:	f108 0001 	add.w	r0, r8, #1
 80052fa:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 80052fe:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005300:	2640      	movs	r6, #64	; 0x40
 8005302:	fa1f f880 	uxth.w	r8, r0
 8005306:	e7b2      	b.n	800526e <LCD_Char.constprop.0.isra.0+0x2e>

08005308 <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8005308:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530c:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530e:	4c32      	ldr	r4, [pc, #200]	; (80053d8 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005310:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005318:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531c:	f884 5105 	strb.w	r5, [r4, #261]	; 0x105
    huart->TxXferSize = Size;
 8005320:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8005324:	4605      	mov	r5, r0
 8005326:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 8005328:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532c:	d049      	beq.n	80053c2 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 800532e:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 8005330:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8005332:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    __HAL_UNLOCK(huart);
 8005336:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    while (huart->TxXferCount > 0U)
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d047      	beq.n	80053d0 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005340:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8005344:	e003      	b.n	800534e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 8005346:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005348:	1a12      	subs	r2, r2, r0
 800534a:	2a64      	cmp	r2, #100	; 0x64
 800534c:	d823      	bhi.n	8005396 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534e:	680b      	ldr	r3, [r1, #0]
 8005350:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005354:	d0f7      	beq.n	8005346 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 8005356:	b37d      	cbz	r5, 80053b8 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005358:	f815 3b01 	ldrb.w	r3, [r5], #1
 800535c:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 800535e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 8005362:	3b01      	subs	r3, #1
 8005364:	b29b      	uxth	r3, r3
 8005366:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    while (huart->TxXferCount > 0U)
 800536a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ec      	bne.n	800534e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005374:	680b      	ldr	r3, [r1, #0]
 8005376:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800537a:	d107      	bne.n	800538c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 800537c:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800537e:	1a12      	subs	r2, r2, r0
 8005380:	2a64      	cmp	r2, #100	; 0x64
 8005382:	d808      	bhi.n	8005396 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	680b      	ldr	r3, [r1, #0]
 8005386:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800538a:	d0f7      	beq.n	800537c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800538c:	2320      	movs	r3, #32
 800538e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
}
 8005392:	bc30      	pop	{r4, r5}
 8005394:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 8005396:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005398:	68ca      	ldr	r2, [r1, #12]
 800539a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800539e:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a0:	694a      	ldr	r2, [r1, #20]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80053a8:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
        __HAL_UNLOCK(huart);
 80053ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        huart->RxState = HAL_UART_STATE_READY;
 80053b0:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
}
 80053b4:	bc30      	pop	{r4, r5}
 80053b6:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b8:	f83c 3b02 	ldrh.w	r3, [ip], #2
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c0:	e7cc      	b.n	800535c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d1b1      	bne.n	800532e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 80053ca:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 80053cc:	4615      	mov	r5, r2
 80053ce:	e7af      	b.n	8005330 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80053d4:	e7d6      	b.n	8005384 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 80053d6:	bf00      	nop
 80053d8:	20000200 	.word	0x20000200

080053dc <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80053dc:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053de:	4d10      	ldr	r5, [pc, #64]	; (8005420 <HAL_InitTick.isra.0+0x44>)
 80053e0:	4a10      	ldr	r2, [pc, #64]	; (8005424 <HAL_InitTick.isra.0+0x48>)
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053f0:	d20e      	bcs.n	8005410 <HAL_InitTick.isra.0+0x34>
 80053f2:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053fe:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005400:	4e09      	ldr	r6, [pc, #36]	; (8005428 <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005402:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005404:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005406:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800540a:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800540c:	6111      	str	r1, [r2, #16]
 800540e:	d900      	bls.n	8005412 <HAL_InitTick.isra.0+0x36>
}
 8005410:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005412:	4621      	mov	r1, r4
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	f7fc fdfa 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 800541c:	606c      	str	r4, [r5, #4]
}
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	20000000 	.word	0x20000000
 8005424:	10624dd3 	.word	0x10624dd3
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <HAL_TIM_PWM_ConfigChannel.constprop.0>:
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
 800542c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800542e:	4c1f      	ldr	r4, [pc, #124]	; (80054ac <HAL_TIM_PWM_ConfigChannel.constprop.0+0x80>)
 8005430:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005434:	2b01      	cmp	r3, #1
 8005436:	d036      	beq.n	80054a6 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x7a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	6da3      	ldr	r3, [r4, #88]	; 0x58

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543a:	6806      	ldr	r6, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005444:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005446:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005448:	6999      	ldr	r1, [r3, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800544a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800544e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005452:	4331      	orrs	r1, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005454:	6886      	ldr	r6, [r0, #8]
 8005456:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005458:	4e15      	ldr	r6, [pc, #84]	; (80054b0 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x84>)
 800545a:	42b3      	cmp	r3, r6
 800545c:	d016      	beq.n	800548c <HAL_TIM_PWM_ConfigChannel.constprop.0+0x60>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	605d      	str	r5, [r3, #4]
  __HAL_UNLOCK(htim);
 8005460:	2500      	movs	r5, #0

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005462:	6199      	str	r1, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005464:	6841      	ldr	r1, [r0, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005466:	6900      	ldr	r0, [r0, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8005468:	6359      	str	r1, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	f041 0108 	orr.w	r1, r1, #8
 8005472:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	f021 0104 	bic.w	r1, r1, #4
 800547a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	4302      	orrs	r2, r0
  return HAL_OK;
 8005480:	4628      	mov	r0, r5
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005482:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005484:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
}
 8005488:	bcf0      	pop	{r4, r5, r6, r7}
 800548a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800548c:	68c6      	ldr	r6, [r0, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800548e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005492:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005494:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005498:	e9d0 6705 	ldrd	r6, r7, [r0, #20]
 800549c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800549e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a2:	4335      	orrs	r5, r6
 80054a4:	e7db      	b.n	800545e <HAL_TIM_PWM_ConfigChannel.constprop.0+0x32>
  __HAL_LOCK(htim);
 80054a6:	2002      	movs	r0, #2
 80054a8:	e7ee      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x5c>
 80054aa:	bf00      	nop
 80054ac:	20000200 	.word	0x20000200
 80054b0:	40012c00 	.word	0x40012c00

080054b4 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 80054b8:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054bc:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054be:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054c0:	460d      	mov	r5, r1
 80054c2:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054c4:	f000 fc84 	bl	8005dd0 <strlen>
 80054c8:	b3b8      	cbz	r0, 800553a <LCD_Font.constprop.0+0x86>
 80054ca:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80054cc:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80054ce:	2691      	movs	r6, #145	; 0x91
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054d0:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054d2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005540 <LCD_Font.constprop.0+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <LCD_Font.constprop.0+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054d8:	f10d 0b08 	add.w	fp, sp, #8
 80054dc:	e01d      	b.n	800551a <LCD_Font.constprop.0+0x66>
 80054de:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80054e2:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054e4:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 80054e8:	d812      	bhi.n	8005510 <LCD_Font.constprop.0+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054ea:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054ee:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054f2:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054f4:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054f8:	4638      	mov	r0, r7
 80054fa:	4631      	mov	r1, r6
 80054fc:	f7ff fea0 	bl	8005240 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005500:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005504:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8005506:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005508:	f000 fc62 	bl	8005dd0 <strlen>
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <LCD_Font.constprop.0+0x90>)
			cursor_x += glyph.xAdvance * size;
 800550e:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005510:	3401      	adds	r4, #1
 8005512:	b2a4      	uxth	r4, r4
 8005514:	4284      	cmp	r4, r0
 8005516:	4622      	mov	r2, r4
 8005518:	d20f      	bcs.n	800553a <LCD_Font.constprop.0+0x86>
		char c = text[text_pos];
 800551a:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800551e:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8005522:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005526:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005528:	d1d9      	bne.n	80054de <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800552a:	3401      	adds	r4, #1
 800552c:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800552e:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005530:	4284      	cmp	r4, r0
			cursor_x = x;
 8005532:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005534:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005536:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005538:	d3ef      	bcc.n	800551a <LCD_Font.constprop.0+0x66>
		}
	}
}
 800553a:	b005      	add	sp, #20
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	0800d560 	.word	0x0800d560
 8005544:	0801cab8 	.word	0x0801cab8

08005548 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800554c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005550:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005552:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005554:	460d      	mov	r5, r1
 8005556:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005558:	f000 fc3a 	bl	8005dd0 <strlen>
 800555c:	b3b8      	cbz	r0, 80055ce <LCD_Font.constprop.1+0x86>
 800555e:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005560:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8005562:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005564:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005566:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80055d4 <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800556c:	f10d 0b08 	add.w	fp, sp, #8
 8005570:	e01d      	b.n	80055ae <LCD_Font.constprop.1+0x66>
 8005572:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8005576:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005578:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
		else if(c >= font.first && c <= font.last && c != '\r')
 800557c:	d812      	bhi.n	80055a4 <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800557e:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005582:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005586:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005588:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800558c:	4638      	mov	r0, r7
 800558e:	4631      	mov	r1, r6
 8005590:	f7ff fe56 	bl	8005240 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005594:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005598:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 800559a:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800559c:	f000 fc18 	bl	8005dd0 <strlen>
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 80055a2:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055a4:	3401      	adds	r4, #1
 80055a6:	b2a4      	uxth	r4, r4
 80055a8:	4284      	cmp	r4, r0
 80055aa:	4622      	mov	r2, r4
 80055ac:	d20f      	bcs.n	80055ce <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 80055ae:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80055b2:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 80055b6:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80055ba:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 80055bc:	d1d9      	bne.n	8005572 <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055be:	3401      	adds	r4, #1
 80055c0:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80055c2:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c4:	4284      	cmp	r4, r0
			cursor_x = x;
 80055c6:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c8:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80055ca:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055cc:	d3ef      	bcc.n	80055ae <LCD_Font.constprop.1+0x66>
}
 80055ce:	b005      	add	sp, #20
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d4:	0800d560 	.word	0x0800d560
 80055d8:	0800dba4 	.word	0x0800dba4

080055dc <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80055e0:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055e4:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e6:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055e8:	4616      	mov	r6, r2
 80055ea:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 80055ec:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ee:	f000 fbef 	bl	8005dd0 <strlen>
 80055f2:	b3b0      	cbz	r0, 8005662 <LCD_Font.constprop.2+0x86>
 80055f4:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80055f6:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055f8:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055fa:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005668 <LCD_Font.constprop.2+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <LCD_Font.constprop.2+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005600:	f10d 0b08 	add.w	fp, sp, #8
 8005604:	e01d      	b.n	8005642 <LCD_Font.constprop.2+0x66>
 8005606:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800560a:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800560c:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 8005610:	d812      	bhi.n	8005638 <LCD_Font.constprop.2+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005612:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005616:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800561a:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800561c:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005620:	4638      	mov	r0, r7
 8005622:	4629      	mov	r1, r5
 8005624:	f7ff fe0c 	bl	8005240 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005628:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800562c:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 800562e:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005630:	f000 fbce 	bl	8005dd0 <strlen>
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <LCD_Font.constprop.2+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005636:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005638:	3401      	adds	r4, #1
 800563a:	b2a4      	uxth	r4, r4
 800563c:	4284      	cmp	r4, r0
 800563e:	4622      	mov	r2, r4
 8005640:	d20f      	bcs.n	8005662 <LCD_Font.constprop.2+0x86>
		char c = text[text_pos];
 8005642:	f816 c002 	ldrb.w	ip, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005646:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800564a:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800564e:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005650:	d1d9      	bne.n	8005606 <LCD_Font.constprop.2+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005652:	3401      	adds	r4, #1
 8005654:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005656:	3539      	adds	r5, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005658:	4284      	cmp	r4, r0
			cursor_x = x;
 800565a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800565c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800565e:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005660:	d3ef      	bcc.n	8005642 <LCD_Font.constprop.2+0x66>
}
 8005662:	b005      	add	sp, #20
 8005664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005668:	0800d560 	.word	0x0800d560
 800566c:	0801cab8 	.word	0x0801cab8

08005670 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005670:	e7fe      	b.n	8005670 <NMI_Handler>
 8005672:	bf00      	nop

08005674 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <HardFault_Handler>
 8005676:	bf00      	nop

08005678 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <MemManage_Handler>
 800567a:	bf00      	nop

0800567c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800567c:	e7fe      	b.n	800567c <BusFault_Handler>
 800567e:	bf00      	nop

08005680 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005680:	e7fe      	b.n	8005680 <UsageFault_Handler>
 8005682:	bf00      	nop

08005684 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <DebugMon_Handler>:
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <PendSV_Handler>:
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop

08005690 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005690:	4a02      	ldr	r2, [pc, #8]	; (800569c <SysTick_Handler+0xc>)
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000200 	.word	0x20000200

080056a0 <DMA1_Channel2_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056a0:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056a2:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <DMA1_Channel2_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80056a4:	b470      	push	{r4, r5, r6}
 80056a6:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056aa:	f8d3 025c 	ldr.w	r0, [r3, #604]	; 0x25c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056ae:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80056b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056b4:	4081      	lsls	r1, r0
 80056b6:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 80056b8:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056ba:	d01f      	beq.n	80056fc <DMA1_Channel2_IRQHandler+0x5c>
 80056bc:	0769      	lsls	r1, r5, #29
 80056be:	d51d      	bpl.n	80056fc <DMA1_Channel2_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c0:	6811      	ldr	r1, [r2, #0]
 80056c2:	0688      	lsls	r0, r1, #26
 80056c4:	d403      	bmi.n	80056ce <DMA1_Channel2_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056c6:	6811      	ldr	r1, [r2, #0]
 80056c8:	f021 0104 	bic.w	r1, r1, #4
 80056cc:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80056ce:	4943      	ldr	r1, [pc, #268]	; (80057dc <DMA1_Channel2_IRQHandler+0x13c>)
 80056d0:	428a      	cmp	r2, r1
 80056d2:	d060      	beq.n	8005796 <DMA1_Channel2_IRQHandler+0xf6>
 80056d4:	3114      	adds	r1, #20
 80056d6:	428a      	cmp	r2, r1
 80056d8:	d067      	beq.n	80057aa <DMA1_Channel2_IRQHandler+0x10a>
 80056da:	3114      	adds	r1, #20
 80056dc:	428a      	cmp	r2, r1
 80056de:	d06e      	beq.n	80057be <DMA1_Channel2_IRQHandler+0x11e>
 80056e0:	3114      	adds	r1, #20
 80056e2:	428a      	cmp	r2, r1
 80056e4:	d071      	beq.n	80057ca <DMA1_Channel2_IRQHandler+0x12a>
 80056e6:	3114      	adds	r1, #20
 80056e8:	428a      	cmp	r2, r1
 80056ea:	d063      	beq.n	80057b4 <DMA1_Channel2_IRQHandler+0x114>
 80056ec:	3114      	adds	r1, #20
 80056ee:	428a      	cmp	r2, r1
 80056f0:	bf0c      	ite	eq
 80056f2:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80056f6:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80056fa:	e04d      	b.n	8005798 <DMA1_Channel2_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80056fc:	2102      	movs	r1, #2
 80056fe:	4081      	lsls	r1, r0
 8005700:	4221      	tst	r1, r4
 8005702:	d022      	beq.n	800574a <DMA1_Channel2_IRQHandler+0xaa>
 8005704:	07a9      	lsls	r1, r5, #30
 8005706:	d520      	bpl.n	800574a <DMA1_Channel2_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005708:	6811      	ldr	r1, [r2, #0]
 800570a:	0688      	lsls	r0, r1, #26
 800570c:	d406      	bmi.n	800571c <DMA1_Channel2_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800570e:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005710:	6811      	ldr	r1, [r2, #0]
 8005712:	f021 010a 	bic.w	r1, r1, #10
 8005716:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005718:	f883 023d 	strb.w	r0, [r3, #573]	; 0x23d
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800571c:	492f      	ldr	r1, [pc, #188]	; (80057dc <DMA1_Channel2_IRQHandler+0x13c>)
 800571e:	428a      	cmp	r2, r1
 8005720:	d02d      	beq.n	800577e <DMA1_Channel2_IRQHandler+0xde>
 8005722:	3114      	adds	r1, #20
 8005724:	428a      	cmp	r2, r1
 8005726:	d048      	beq.n	80057ba <DMA1_Channel2_IRQHandler+0x11a>
 8005728:	3114      	adds	r1, #20
 800572a:	428a      	cmp	r2, r1
 800572c:	d04a      	beq.n	80057c4 <DMA1_Channel2_IRQHandler+0x124>
 800572e:	3114      	adds	r1, #20
 8005730:	428a      	cmp	r2, r1
 8005732:	d03c      	beq.n	80057ae <DMA1_Channel2_IRQHandler+0x10e>
 8005734:	3114      	adds	r1, #20
 8005736:	428a      	cmp	r2, r1
 8005738:	d04a      	beq.n	80057d0 <DMA1_Channel2_IRQHandler+0x130>
 800573a:	3114      	adds	r1, #20
 800573c:	428a      	cmp	r2, r1
 800573e:	bf0c      	ite	eq
 8005740:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005744:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005748:	e01a      	b.n	8005780 <DMA1_Channel2_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800574a:	2108      	movs	r1, #8
 800574c:	4081      	lsls	r1, r0
 800574e:	4221      	tst	r1, r4
 8005750:	d01f      	beq.n	8005792 <DMA1_Channel2_IRQHandler+0xf2>
 8005752:	0729      	lsls	r1, r5, #28
 8005754:	d51d      	bpl.n	8005792 <DMA1_Channel2_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005756:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005758:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800575c:	f021 010e 	bic.w	r1, r1, #14
 8005760:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005762:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 8005764:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005768:	fa02 f000 	lsl.w	r0, r2, r0
 800576c:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800576e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    __HAL_UNLOCK(hdma);
 8005772:	f8a3 423c 	strh.w	r4, [r3, #572]	; 0x23c
    if (hdma->XferErrorCallback != NULL)
 8005776:	b161      	cbz	r1, 8005792 <DMA1_Channel2_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005778:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800577a:	4819      	ldr	r0, [pc, #100]	; (80057e0 <DMA1_Channel2_IRQHandler+0x140>)
 800577c:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800577e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005780:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005782:	4c18      	ldr	r4, [pc, #96]	; (80057e4 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005784:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005788:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800578a:	f883 023c 	strb.w	r0, [r3, #572]	; 0x23c
    if(hdma->XferCpltCallback != NULL)
 800578e:	2900      	cmp	r1, #0
 8005790:	d1f2      	bne.n	8005778 <DMA1_Channel2_IRQHandler+0xd8>
 8005792:	bc70      	pop	{r4, r5, r6}
 8005794:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005796:	2204      	movs	r2, #4
 8005798:	4912      	ldr	r1, [pc, #72]	; (80057e4 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 800579a:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800579e:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f6      	beq.n	8005792 <DMA1_Channel2_IRQHandler+0xf2>
 80057a4:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 80057a6:	480e      	ldr	r0, [pc, #56]	; (80057e0 <DMA1_Channel2_IRQHandler+0x140>)
 80057a8:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	e7f4      	b.n	8005798 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057b2:	e7e5      	b.n	8005780 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80057b8:	e7ee      	b.n	8005798 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057ba:	2220      	movs	r2, #32
 80057bc:	e7e0      	b.n	8005780 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057c2:	e7e9      	b.n	8005798 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	e7da      	b.n	8005780 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057ce:	e7e3      	b.n	8005798 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057d4:	e7d4      	b.n	8005780 <DMA1_Channel2_IRQHandler+0xe0>
 80057d6:	bf00      	nop
 80057d8:	20000200 	.word	0x20000200
 80057dc:	40020008 	.word	0x40020008
 80057e0:	2000041c 	.word	0x2000041c
 80057e4:	40020000 	.word	0x40020000

080057e8 <DMA1_Channel4_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057e8:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057ea:	4b4d      	ldr	r3, [pc, #308]	; (8005920 <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80057ec:	b470      	push	{r4, r5, r6}
 80057ee:	f8d3 61d0 	ldr.w	r6, [r3, #464]	; 0x1d0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057f2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057f6:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80057f8:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057fc:	4081      	lsls	r1, r0
 80057fe:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005800:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005802:	d01f      	beq.n	8005844 <DMA1_Channel4_IRQHandler+0x5c>
 8005804:	0769      	lsls	r1, r5, #29
 8005806:	d51d      	bpl.n	8005844 <DMA1_Channel4_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005808:	6811      	ldr	r1, [r2, #0]
 800580a:	0688      	lsls	r0, r1, #26
 800580c:	d403      	bmi.n	8005816 <DMA1_Channel4_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800580e:	6811      	ldr	r1, [r2, #0]
 8005810:	f021 0104 	bic.w	r1, r1, #4
 8005814:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005816:	4943      	ldr	r1, [pc, #268]	; (8005924 <DMA1_Channel4_IRQHandler+0x13c>)
 8005818:	428a      	cmp	r2, r1
 800581a:	d060      	beq.n	80058de <DMA1_Channel4_IRQHandler+0xf6>
 800581c:	3114      	adds	r1, #20
 800581e:	428a      	cmp	r2, r1
 8005820:	d067      	beq.n	80058f2 <DMA1_Channel4_IRQHandler+0x10a>
 8005822:	3114      	adds	r1, #20
 8005824:	428a      	cmp	r2, r1
 8005826:	d06e      	beq.n	8005906 <DMA1_Channel4_IRQHandler+0x11e>
 8005828:	3114      	adds	r1, #20
 800582a:	428a      	cmp	r2, r1
 800582c:	d071      	beq.n	8005912 <DMA1_Channel4_IRQHandler+0x12a>
 800582e:	3114      	adds	r1, #20
 8005830:	428a      	cmp	r2, r1
 8005832:	d063      	beq.n	80058fc <DMA1_Channel4_IRQHandler+0x114>
 8005834:	3114      	adds	r1, #20
 8005836:	428a      	cmp	r2, r1
 8005838:	bf0c      	ite	eq
 800583a:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 800583e:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005842:	e04d      	b.n	80058e0 <DMA1_Channel4_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005844:	2102      	movs	r1, #2
 8005846:	4081      	lsls	r1, r0
 8005848:	4221      	tst	r1, r4
 800584a:	d022      	beq.n	8005892 <DMA1_Channel4_IRQHandler+0xaa>
 800584c:	07a9      	lsls	r1, r5, #30
 800584e:	d520      	bpl.n	8005892 <DMA1_Channel4_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005850:	6811      	ldr	r1, [r2, #0]
 8005852:	0688      	lsls	r0, r1, #26
 8005854:	d406      	bmi.n	8005864 <DMA1_Channel4_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005856:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	f021 010a 	bic.w	r1, r1, #10
 800585e:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005860:	f883 01b5 	strb.w	r0, [r3, #437]	; 0x1b5
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005864:	492f      	ldr	r1, [pc, #188]	; (8005924 <DMA1_Channel4_IRQHandler+0x13c>)
 8005866:	428a      	cmp	r2, r1
 8005868:	d02d      	beq.n	80058c6 <DMA1_Channel4_IRQHandler+0xde>
 800586a:	3114      	adds	r1, #20
 800586c:	428a      	cmp	r2, r1
 800586e:	d048      	beq.n	8005902 <DMA1_Channel4_IRQHandler+0x11a>
 8005870:	3114      	adds	r1, #20
 8005872:	428a      	cmp	r2, r1
 8005874:	d04a      	beq.n	800590c <DMA1_Channel4_IRQHandler+0x124>
 8005876:	3114      	adds	r1, #20
 8005878:	428a      	cmp	r2, r1
 800587a:	d03c      	beq.n	80058f6 <DMA1_Channel4_IRQHandler+0x10e>
 800587c:	3114      	adds	r1, #20
 800587e:	428a      	cmp	r2, r1
 8005880:	d04a      	beq.n	8005918 <DMA1_Channel4_IRQHandler+0x130>
 8005882:	3114      	adds	r1, #20
 8005884:	428a      	cmp	r2, r1
 8005886:	bf0c      	ite	eq
 8005888:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800588c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005890:	e01a      	b.n	80058c8 <DMA1_Channel4_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005892:	2108      	movs	r1, #8
 8005894:	4081      	lsls	r1, r0
 8005896:	4221      	tst	r1, r4
 8005898:	d01f      	beq.n	80058da <DMA1_Channel4_IRQHandler+0xf2>
 800589a:	0729      	lsls	r1, r5, #28
 800589c:	d51d      	bpl.n	80058da <DMA1_Channel4_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800589e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 80058a0:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a4:	f021 010e 	bic.w	r1, r1, #14
 80058a8:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058aa:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80058ac:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058b0:	fa02 f000 	lsl.w	r0, r2, r0
 80058b4:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058b6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    __HAL_UNLOCK(hdma);
 80058ba:	f8a3 41b4 	strh.w	r4, [r3, #436]	; 0x1b4
    if (hdma->XferErrorCallback != NULL)
 80058be:	b161      	cbz	r1, 80058da <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80058c0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80058c2:	4819      	ldr	r0, [pc, #100]	; (8005928 <DMA1_Channel4_IRQHandler+0x140>)
 80058c4:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058c6:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80058c8:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058ca:	4c18      	ldr	r4, [pc, #96]	; (800592c <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 80058cc:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058d0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80058d2:	f883 01b4 	strb.w	r0, [r3, #436]	; 0x1b4
    if(hdma->XferCpltCallback != NULL)
 80058d6:	2900      	cmp	r1, #0
 80058d8:	d1f2      	bne.n	80058c0 <DMA1_Channel4_IRQHandler+0xd8>
 80058da:	bc70      	pop	{r4, r5, r6}
 80058dc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058de:	2204      	movs	r2, #4
 80058e0:	4912      	ldr	r1, [pc, #72]	; (800592c <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 80058e2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058e6:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f6      	beq.n	80058da <DMA1_Channel4_IRQHandler+0xf2>
 80058ec:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 80058ee:	480e      	ldr	r0, [pc, #56]	; (8005928 <DMA1_Channel4_IRQHandler+0x140>)
 80058f0:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	e7f4      	b.n	80058e0 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058fa:	e7e5      	b.n	80058c8 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005900:	e7ee      	b.n	80058e0 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005902:	2220      	movs	r2, #32
 8005904:	e7e0      	b.n	80058c8 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800590a:	e7e9      	b.n	80058e0 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800590c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005910:	e7da      	b.n	80058c8 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005916:	e7e3      	b.n	80058e0 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800591c:	e7d4      	b.n	80058c8 <DMA1_Channel4_IRQHandler+0xe0>
 800591e:	bf00      	nop
 8005920:	20000200 	.word	0x20000200
 8005924:	40020008 	.word	0x40020008
 8005928:	20000394 	.word	0x20000394
 800592c:	40020000 	.word	0x40020000

08005930 <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005930:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005932:	4b4d      	ldr	r3, [pc, #308]	; (8005a68 <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005934:	b470      	push	{r4, r5, r6}
 8005936:	f8d3 6214 	ldr.w	r6, [r3, #532]	; 0x214
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800593a:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800593e:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005940:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005944:	4081      	lsls	r1, r0
 8005946:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005948:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800594a:	d01f      	beq.n	800598c <DMA1_Channel5_IRQHandler+0x5c>
 800594c:	0769      	lsls	r1, r5, #29
 800594e:	d51d      	bpl.n	800598c <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005950:	6811      	ldr	r1, [r2, #0]
 8005952:	0688      	lsls	r0, r1, #26
 8005954:	d403      	bmi.n	800595e <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005956:	6811      	ldr	r1, [r2, #0]
 8005958:	f021 0104 	bic.w	r1, r1, #4
 800595c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800595e:	4943      	ldr	r1, [pc, #268]	; (8005a6c <DMA1_Channel5_IRQHandler+0x13c>)
 8005960:	428a      	cmp	r2, r1
 8005962:	d060      	beq.n	8005a26 <DMA1_Channel5_IRQHandler+0xf6>
 8005964:	3114      	adds	r1, #20
 8005966:	428a      	cmp	r2, r1
 8005968:	d067      	beq.n	8005a3a <DMA1_Channel5_IRQHandler+0x10a>
 800596a:	3114      	adds	r1, #20
 800596c:	428a      	cmp	r2, r1
 800596e:	d06e      	beq.n	8005a4e <DMA1_Channel5_IRQHandler+0x11e>
 8005970:	3114      	adds	r1, #20
 8005972:	428a      	cmp	r2, r1
 8005974:	d071      	beq.n	8005a5a <DMA1_Channel5_IRQHandler+0x12a>
 8005976:	3114      	adds	r1, #20
 8005978:	428a      	cmp	r2, r1
 800597a:	d063      	beq.n	8005a44 <DMA1_Channel5_IRQHandler+0x114>
 800597c:	3114      	adds	r1, #20
 800597e:	428a      	cmp	r2, r1
 8005980:	bf0c      	ite	eq
 8005982:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005986:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800598a:	e04d      	b.n	8005a28 <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800598c:	2102      	movs	r1, #2
 800598e:	4081      	lsls	r1, r0
 8005990:	4221      	tst	r1, r4
 8005992:	d022      	beq.n	80059da <DMA1_Channel5_IRQHandler+0xaa>
 8005994:	07a9      	lsls	r1, r5, #30
 8005996:	d520      	bpl.n	80059da <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	0688      	lsls	r0, r1, #26
 800599c:	d406      	bmi.n	80059ac <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 800599e:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80059a0:	6811      	ldr	r1, [r2, #0]
 80059a2:	f021 010a 	bic.w	r1, r1, #10
 80059a6:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80059a8:	f883 01f9 	strb.w	r0, [r3, #505]	; 0x1f9
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80059ac:	492f      	ldr	r1, [pc, #188]	; (8005a6c <DMA1_Channel5_IRQHandler+0x13c>)
 80059ae:	428a      	cmp	r2, r1
 80059b0:	d02d      	beq.n	8005a0e <DMA1_Channel5_IRQHandler+0xde>
 80059b2:	3114      	adds	r1, #20
 80059b4:	428a      	cmp	r2, r1
 80059b6:	d048      	beq.n	8005a4a <DMA1_Channel5_IRQHandler+0x11a>
 80059b8:	3114      	adds	r1, #20
 80059ba:	428a      	cmp	r2, r1
 80059bc:	d04a      	beq.n	8005a54 <DMA1_Channel5_IRQHandler+0x124>
 80059be:	3114      	adds	r1, #20
 80059c0:	428a      	cmp	r2, r1
 80059c2:	d03c      	beq.n	8005a3e <DMA1_Channel5_IRQHandler+0x10e>
 80059c4:	3114      	adds	r1, #20
 80059c6:	428a      	cmp	r2, r1
 80059c8:	d04a      	beq.n	8005a60 <DMA1_Channel5_IRQHandler+0x130>
 80059ca:	3114      	adds	r1, #20
 80059cc:	428a      	cmp	r2, r1
 80059ce:	bf0c      	ite	eq
 80059d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80059d4:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80059d8:	e01a      	b.n	8005a10 <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059da:	2108      	movs	r1, #8
 80059dc:	4081      	lsls	r1, r0
 80059de:	4221      	tst	r1, r4
 80059e0:	d01f      	beq.n	8005a22 <DMA1_Channel5_IRQHandler+0xf2>
 80059e2:	0729      	lsls	r1, r5, #28
 80059e4:	d51d      	bpl.n	8005a22 <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e6:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 80059e8:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ec:	f021 010e 	bic.w	r1, r1, #14
 80059f0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059f2:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80059f4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059f8:	fa02 f000 	lsl.w	r0, r2, r0
 80059fc:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    __HAL_UNLOCK(hdma);
 8005a02:	f8a3 41f8 	strh.w	r4, [r3, #504]	; 0x1f8
    if (hdma->XferErrorCallback != NULL)
 8005a06:	b161      	cbz	r1, 8005a22 <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005a08:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005a0a:	4819      	ldr	r0, [pc, #100]	; (8005a70 <DMA1_Channel5_IRQHandler+0x140>)
 8005a0c:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a0e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005a10:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a12:	4c18      	ldr	r4, [pc, #96]	; (8005a74 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005a14:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a18:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005a1a:	f883 01f8 	strb.w	r0, [r3, #504]	; 0x1f8
    if(hdma->XferCpltCallback != NULL)
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	d1f2      	bne.n	8005a08 <DMA1_Channel5_IRQHandler+0xd8>
 8005a22:	bc70      	pop	{r4, r5, r6}
 8005a24:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a26:	2204      	movs	r2, #4
 8005a28:	4912      	ldr	r1, [pc, #72]	; (8005a74 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005a2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a2e:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f6      	beq.n	8005a22 <DMA1_Channel5_IRQHandler+0xf2>
 8005a34:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005a36:	480e      	ldr	r0, [pc, #56]	; (8005a70 <DMA1_Channel5_IRQHandler+0x140>)
 8005a38:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	e7f4      	b.n	8005a28 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a42:	e7e5      	b.n	8005a10 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005a48:	e7ee      	b.n	8005a28 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	e7e0      	b.n	8005a10 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a52:	e7e9      	b.n	8005a28 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a58:	e7da      	b.n	8005a10 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a5e:	e7e3      	b.n	8005a28 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a64:	e7d4      	b.n	8005a10 <DMA1_Channel5_IRQHandler+0xe0>
 8005a66:	bf00      	nop
 8005a68:	20000200 	.word	0x20000200
 8005a6c:	40020008 	.word	0x40020008
 8005a70:	200003d8 	.word	0x200003d8
 8005a74:	40020000 	.word	0x40020000

08005a78 <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a78:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a7a:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005a7c:	b470      	push	{r4, r5, r6}
 8005a7e:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a82:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a86:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005a88:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a8c:	4081      	lsls	r1, r0
 8005a8e:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005a90:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a92:	d01f      	beq.n	8005ad4 <DMA1_Channel6_IRQHandler+0x5c>
 8005a94:	0769      	lsls	r1, r5, #29
 8005a96:	d51d      	bpl.n	8005ad4 <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a98:	6811      	ldr	r1, [r2, #0]
 8005a9a:	0688      	lsls	r0, r1, #26
 8005a9c:	d403      	bmi.n	8005aa6 <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a9e:	6811      	ldr	r1, [r2, #0]
 8005aa0:	f021 0104 	bic.w	r1, r1, #4
 8005aa4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005aa6:	4943      	ldr	r1, [pc, #268]	; (8005bb4 <DMA1_Channel6_IRQHandler+0x13c>)
 8005aa8:	428a      	cmp	r2, r1
 8005aaa:	d060      	beq.n	8005b6e <DMA1_Channel6_IRQHandler+0xf6>
 8005aac:	3114      	adds	r1, #20
 8005aae:	428a      	cmp	r2, r1
 8005ab0:	d067      	beq.n	8005b82 <DMA1_Channel6_IRQHandler+0x10a>
 8005ab2:	3114      	adds	r1, #20
 8005ab4:	428a      	cmp	r2, r1
 8005ab6:	d06e      	beq.n	8005b96 <DMA1_Channel6_IRQHandler+0x11e>
 8005ab8:	3114      	adds	r1, #20
 8005aba:	428a      	cmp	r2, r1
 8005abc:	d071      	beq.n	8005ba2 <DMA1_Channel6_IRQHandler+0x12a>
 8005abe:	3114      	adds	r1, #20
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	d063      	beq.n	8005b8c <DMA1_Channel6_IRQHandler+0x114>
 8005ac4:	3114      	adds	r1, #20
 8005ac6:	428a      	cmp	r2, r1
 8005ac8:	bf0c      	ite	eq
 8005aca:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005ace:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005ad2:	e04d      	b.n	8005b70 <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	4081      	lsls	r1, r0
 8005ad8:	4221      	tst	r1, r4
 8005ada:	d022      	beq.n	8005b22 <DMA1_Channel6_IRQHandler+0xaa>
 8005adc:	07a9      	lsls	r1, r5, #30
 8005ade:	d520      	bpl.n	8005b22 <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ae0:	6811      	ldr	r1, [r2, #0]
 8005ae2:	0688      	lsls	r0, r1, #26
 8005ae4:	d406      	bmi.n	8005af4 <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005ae8:	6811      	ldr	r1, [r2, #0]
 8005aea:	f021 010a 	bic.w	r1, r1, #10
 8005aee:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005af0:	f883 012d 	strb.w	r0, [r3, #301]	; 0x12d
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005af4:	492f      	ldr	r1, [pc, #188]	; (8005bb4 <DMA1_Channel6_IRQHandler+0x13c>)
 8005af6:	428a      	cmp	r2, r1
 8005af8:	d02d      	beq.n	8005b56 <DMA1_Channel6_IRQHandler+0xde>
 8005afa:	3114      	adds	r1, #20
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d048      	beq.n	8005b92 <DMA1_Channel6_IRQHandler+0x11a>
 8005b00:	3114      	adds	r1, #20
 8005b02:	428a      	cmp	r2, r1
 8005b04:	d04a      	beq.n	8005b9c <DMA1_Channel6_IRQHandler+0x124>
 8005b06:	3114      	adds	r1, #20
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	d03c      	beq.n	8005b86 <DMA1_Channel6_IRQHandler+0x10e>
 8005b0c:	3114      	adds	r1, #20
 8005b0e:	428a      	cmp	r2, r1
 8005b10:	d04a      	beq.n	8005ba8 <DMA1_Channel6_IRQHandler+0x130>
 8005b12:	3114      	adds	r1, #20
 8005b14:	428a      	cmp	r2, r1
 8005b16:	bf0c      	ite	eq
 8005b18:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005b1c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005b20:	e01a      	b.n	8005b58 <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b22:	2108      	movs	r1, #8
 8005b24:	4081      	lsls	r1, r0
 8005b26:	4221      	tst	r1, r4
 8005b28:	d01f      	beq.n	8005b6a <DMA1_Channel6_IRQHandler+0xf2>
 8005b2a:	0729      	lsls	r1, r5, #28
 8005b2c:	d51d      	bpl.n	8005b6a <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005b30:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b34:	f021 010e 	bic.w	r1, r1, #14
 8005b38:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b3a:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005b3c:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b40:	fa02 f000 	lsl.w	r0, r2, r0
 8005b44:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b46:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    __HAL_UNLOCK(hdma);
 8005b4a:	f8a3 412c 	strh.w	r4, [r3, #300]	; 0x12c
    if (hdma->XferErrorCallback != NULL)
 8005b4e:	b161      	cbz	r1, 8005b6a <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b50:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005b52:	4819      	ldr	r0, [pc, #100]	; (8005bb8 <DMA1_Channel6_IRQHandler+0x140>)
 8005b54:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b56:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005b58:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b5a:	4c18      	ldr	r4, [pc, #96]	; (8005bbc <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005b5c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b60:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005b62:	f883 012c 	strb.w	r0, [r3, #300]	; 0x12c
    if(hdma->XferCpltCallback != NULL)
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d1f2      	bne.n	8005b50 <DMA1_Channel6_IRQHandler+0xd8>
 8005b6a:	bc70      	pop	{r4, r5, r6}
 8005b6c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b6e:	2204      	movs	r2, #4
 8005b70:	4912      	ldr	r1, [pc, #72]	; (8005bbc <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005b72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b76:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f6      	beq.n	8005b6a <DMA1_Channel6_IRQHandler+0xf2>
 8005b7c:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005b7e:	480e      	ldr	r0, [pc, #56]	; (8005bb8 <DMA1_Channel6_IRQHandler+0x140>)
 8005b80:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b82:	2240      	movs	r2, #64	; 0x40
 8005b84:	e7f4      	b.n	8005b70 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b8a:	e7e5      	b.n	8005b58 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b90:	e7ee      	b.n	8005b70 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b92:	2220      	movs	r2, #32
 8005b94:	e7e0      	b.n	8005b58 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b9a:	e7e9      	b.n	8005b70 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba0:	e7da      	b.n	8005b58 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ba6:	e7e3      	b.n	8005b70 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bac:	e7d4      	b.n	8005b58 <DMA1_Channel6_IRQHandler+0xe0>
 8005bae:	bf00      	nop
 8005bb0:	20000200 	.word	0x20000200
 8005bb4:	40020008 	.word	0x40020008
 8005bb8:	2000030c 	.word	0x2000030c
 8005bbc:	40020000 	.word	0x40020000

08005bc0 <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bc0:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bc2:	4b4d      	ldr	r3, [pc, #308]	; (8005cf8 <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005bc4:	b470      	push	{r4, r5, r6}
 8005bc6:	f8d3 618c 	ldr.w	r6, [r3, #396]	; 0x18c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bca:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bce:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005bd0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bd4:	4081      	lsls	r1, r0
 8005bd6:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005bd8:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bda:	d01f      	beq.n	8005c1c <DMA1_Channel7_IRQHandler+0x5c>
 8005bdc:	0769      	lsls	r1, r5, #29
 8005bde:	d51d      	bpl.n	8005c1c <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	0688      	lsls	r0, r1, #26
 8005be4:	d403      	bmi.n	8005bee <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be6:	6811      	ldr	r1, [r2, #0]
 8005be8:	f021 0104 	bic.w	r1, r1, #4
 8005bec:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005bee:	4943      	ldr	r1, [pc, #268]	; (8005cfc <DMA1_Channel7_IRQHandler+0x13c>)
 8005bf0:	428a      	cmp	r2, r1
 8005bf2:	d060      	beq.n	8005cb6 <DMA1_Channel7_IRQHandler+0xf6>
 8005bf4:	3114      	adds	r1, #20
 8005bf6:	428a      	cmp	r2, r1
 8005bf8:	d067      	beq.n	8005cca <DMA1_Channel7_IRQHandler+0x10a>
 8005bfa:	3114      	adds	r1, #20
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	d06e      	beq.n	8005cde <DMA1_Channel7_IRQHandler+0x11e>
 8005c00:	3114      	adds	r1, #20
 8005c02:	428a      	cmp	r2, r1
 8005c04:	d071      	beq.n	8005cea <DMA1_Channel7_IRQHandler+0x12a>
 8005c06:	3114      	adds	r1, #20
 8005c08:	428a      	cmp	r2, r1
 8005c0a:	d063      	beq.n	8005cd4 <DMA1_Channel7_IRQHandler+0x114>
 8005c0c:	3114      	adds	r1, #20
 8005c0e:	428a      	cmp	r2, r1
 8005c10:	bf0c      	ite	eq
 8005c12:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005c16:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005c1a:	e04d      	b.n	8005cb8 <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	4081      	lsls	r1, r0
 8005c20:	4221      	tst	r1, r4
 8005c22:	d022      	beq.n	8005c6a <DMA1_Channel7_IRQHandler+0xaa>
 8005c24:	07a9      	lsls	r1, r5, #30
 8005c26:	d520      	bpl.n	8005c6a <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c28:	6811      	ldr	r1, [r2, #0]
 8005c2a:	0688      	lsls	r0, r1, #26
 8005c2c:	d406      	bmi.n	8005c3c <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	f021 010a 	bic.w	r1, r1, #10
 8005c36:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005c38:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c3c:	492f      	ldr	r1, [pc, #188]	; (8005cfc <DMA1_Channel7_IRQHandler+0x13c>)
 8005c3e:	428a      	cmp	r2, r1
 8005c40:	d02d      	beq.n	8005c9e <DMA1_Channel7_IRQHandler+0xde>
 8005c42:	3114      	adds	r1, #20
 8005c44:	428a      	cmp	r2, r1
 8005c46:	d048      	beq.n	8005cda <DMA1_Channel7_IRQHandler+0x11a>
 8005c48:	3114      	adds	r1, #20
 8005c4a:	428a      	cmp	r2, r1
 8005c4c:	d04a      	beq.n	8005ce4 <DMA1_Channel7_IRQHandler+0x124>
 8005c4e:	3114      	adds	r1, #20
 8005c50:	428a      	cmp	r2, r1
 8005c52:	d03c      	beq.n	8005cce <DMA1_Channel7_IRQHandler+0x10e>
 8005c54:	3114      	adds	r1, #20
 8005c56:	428a      	cmp	r2, r1
 8005c58:	d04a      	beq.n	8005cf0 <DMA1_Channel7_IRQHandler+0x130>
 8005c5a:	3114      	adds	r1, #20
 8005c5c:	428a      	cmp	r2, r1
 8005c5e:	bf0c      	ite	eq
 8005c60:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005c64:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005c68:	e01a      	b.n	8005ca0 <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c6a:	2108      	movs	r1, #8
 8005c6c:	4081      	lsls	r1, r0
 8005c6e:	4221      	tst	r1, r4
 8005c70:	d01f      	beq.n	8005cb2 <DMA1_Channel7_IRQHandler+0xf2>
 8005c72:	0729      	lsls	r1, r5, #28
 8005c74:	d51d      	bpl.n	8005cb2 <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c76:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005c78:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7c:	f021 010e 	bic.w	r1, r1, #14
 8005c80:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c82:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005c84:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c88:	fa02 f000 	lsl.w	r0, r2, r0
 8005c8c:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c8e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    __HAL_UNLOCK(hdma);
 8005c92:	f8a3 4170 	strh.w	r4, [r3, #368]	; 0x170
    if (hdma->XferErrorCallback != NULL)
 8005c96:	b161      	cbz	r1, 8005cb2 <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005c98:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005c9a:	4819      	ldr	r0, [pc, #100]	; (8005d00 <DMA1_Channel7_IRQHandler+0x140>)
 8005c9c:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c9e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005ca0:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ca2:	4c18      	ldr	r4, [pc, #96]	; (8005d04 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005ca4:	f8d3 1178 	ldr.w	r1, [r3, #376]	; 0x178
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ca8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005caa:	f883 0170 	strb.w	r0, [r3, #368]	; 0x170
    if(hdma->XferCpltCallback != NULL)
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	d1f2      	bne.n	8005c98 <DMA1_Channel7_IRQHandler+0xd8>
 8005cb2:	bc70      	pop	{r4, r5, r6}
 8005cb4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	4912      	ldr	r1, [pc, #72]	; (8005d04 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005cba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cbe:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f6      	beq.n	8005cb2 <DMA1_Channel7_IRQHandler+0xf2>
 8005cc4:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005cc6:	480e      	ldr	r0, [pc, #56]	; (8005d00 <DMA1_Channel7_IRQHandler+0x140>)
 8005cc8:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cca:	2240      	movs	r2, #64	; 0x40
 8005ccc:	e7f4      	b.n	8005cb8 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cd2:	e7e5      	b.n	8005ca0 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cd4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005cd8:	e7ee      	b.n	8005cb8 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cda:	2220      	movs	r2, #32
 8005cdc:	e7e0      	b.n	8005ca0 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ce2:	e7e9      	b.n	8005cb8 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce8:	e7da      	b.n	8005ca0 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cee:	e7e3      	b.n	8005cb8 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cf4:	e7d4      	b.n	8005ca0 <DMA1_Channel7_IRQHandler+0xe0>
 8005cf6:	bf00      	nop
 8005cf8:	20000200 	.word	0x20000200
 8005cfc:	40020008 	.word	0x40020008
 8005d00:	20000350 	.word	0x20000350
 8005d04:	40020000 	.word	0x40020000

08005d08 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005d08:	2001      	movs	r0, #1
 8005d0a:	4770      	bx	lr

08005d0c <_kill>:

int _kill(int pid, int sig)
{
 8005d0c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d0e:	f002 ff31 	bl	8008b74 <__errno>
 8005d12:	2216      	movs	r2, #22
 8005d14:	4603      	mov	r3, r0
	return -1;
}
 8005d16:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	bd08      	pop	{r3, pc}
 8005d1e:	bf00      	nop

08005d20 <_exit>:

void _exit (int status)
{
 8005d20:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d22:	f002 ff27 	bl	8008b74 <__errno>
 8005d26:	2316      	movs	r3, #22
 8005d28:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005d2a:	e7fe      	b.n	8005d2a <_exit+0xa>

08005d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d2c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d2e:	1e16      	subs	r6, r2, #0
 8005d30:	dd07      	ble.n	8005d42 <_read+0x16>
 8005d32:	460c      	mov	r4, r1
 8005d34:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005d36:	f3af 8000 	nop.w
 8005d3a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d3e:	42a5      	cmp	r5, r4
 8005d40:	d1f9      	bne.n	8005d36 <_read+0xa>
	}

return len;
}
 8005d42:	4630      	mov	r0, r6
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	bf00      	nop

08005d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d4a:	1e16      	subs	r6, r2, #0
 8005d4c:	dd07      	ble.n	8005d5e <_write+0x16>
 8005d4e:	460c      	mov	r4, r1
 8005d50:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005d52:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d5a:	42ac      	cmp	r4, r5
 8005d5c:	d1f9      	bne.n	8005d52 <_write+0xa>
	}
	return len;
}
 8005d5e:	4630      	mov	r0, r6
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	bf00      	nop

08005d64 <_close>:

int _close(int file)
{
	return -1;
}
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop

08005d6c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005d70:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005d72:	604b      	str	r3, [r1, #4]
}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005d78:	2001      	movs	r0, #1
 8005d7a:	4770      	bx	lr

08005d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	4770      	bx	lr

08005d80 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d80:	490e      	ldr	r1, [pc, #56]	; (8005dbc <_sbrk+0x3c>)
{
 8005d82:	4603      	mov	r3, r0
 8005d84:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <_sbrk+0x40>)
 8005d88:	4c0e      	ldr	r4, [pc, #56]	; (8005dc4 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 8005d8a:	f8d1 076c 	ldr.w	r0, [r1, #1900]	; 0x76c
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d8e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005d90:	b128      	cbz	r0, 8005d9e <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d92:	4403      	add	r3, r0
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d809      	bhi.n	8005dac <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005d98:	f8c1 376c 	str.w	r3, [r1, #1900]	; 0x76c

  return (void *)prev_heap_end;
}
 8005d9c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005d9e:	4c0a      	ldr	r4, [pc, #40]	; (8005dc8 <_sbrk+0x48>)
 8005da0:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8005da2:	4403      	add	r3, r0
 8005da4:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8005da6:	f8c1 476c 	str.w	r4, [r1, #1900]	; 0x76c
  if (__sbrk_heap_end + incr > max_heap)
 8005daa:	d9f5      	bls.n	8005d98 <_sbrk+0x18>
    errno = ENOMEM;
 8005dac:	f002 fee2 	bl	8008b74 <__errno>
 8005db0:	220c      	movs	r2, #12
 8005db2:	4603      	mov	r3, r0
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	601a      	str	r2, [r3, #0]
}
 8005dba:	bd10      	pop	{r4, pc}
 8005dbc:	20000200 	.word	0x20000200
 8005dc0:	20005000 	.word	0x20005000
 8005dc4:	00000400 	.word	0x00000400
 8005dc8:	20000980 	.word	0x20000980

08005dcc <SystemInit>:
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <strlen>:
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d1fb      	bne.n	8005dd2 <strlen+0x2>
 8005dda:	1a18      	subs	r0, r3, r0
 8005ddc:	3801      	subs	r0, #1
 8005dde:	4770      	bx	lr

08005de0 <__aeabi_drsub>:
 8005de0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005de4:	e002      	b.n	8005dec <__adddf3>
 8005de6:	bf00      	nop

08005de8 <__aeabi_dsub>:
 8005de8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005dec <__adddf3>:
 8005dec:	b530      	push	{r4, r5, lr}
 8005dee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005df2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005df6:	ea94 0f05 	teq	r4, r5
 8005dfa:	bf08      	it	eq
 8005dfc:	ea90 0f02 	teqeq	r0, r2
 8005e00:	bf1f      	itttt	ne
 8005e02:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005e06:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005e0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005e0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e12:	f000 80e2 	beq.w	8005fda <__adddf3+0x1ee>
 8005e16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005e1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e1e:	bfb8      	it	lt
 8005e20:	426d      	neglt	r5, r5
 8005e22:	dd0c      	ble.n	8005e3e <__adddf3+0x52>
 8005e24:	442c      	add	r4, r5
 8005e26:	ea80 0202 	eor.w	r2, r0, r2
 8005e2a:	ea81 0303 	eor.w	r3, r1, r3
 8005e2e:	ea82 0000 	eor.w	r0, r2, r0
 8005e32:	ea83 0101 	eor.w	r1, r3, r1
 8005e36:	ea80 0202 	eor.w	r2, r0, r2
 8005e3a:	ea81 0303 	eor.w	r3, r1, r3
 8005e3e:	2d36      	cmp	r5, #54	; 0x36
 8005e40:	bf88      	it	hi
 8005e42:	bd30      	pophi	{r4, r5, pc}
 8005e44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e54:	d002      	beq.n	8005e5c <__adddf3+0x70>
 8005e56:	4240      	negs	r0, r0
 8005e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e68:	d002      	beq.n	8005e70 <__adddf3+0x84>
 8005e6a:	4252      	negs	r2, r2
 8005e6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e70:	ea94 0f05 	teq	r4, r5
 8005e74:	f000 80a7 	beq.w	8005fc6 <__adddf3+0x1da>
 8005e78:	f1a4 0401 	sub.w	r4, r4, #1
 8005e7c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e80:	db0d      	blt.n	8005e9e <__adddf3+0xb2>
 8005e82:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e86:	fa22 f205 	lsr.w	r2, r2, r5
 8005e8a:	1880      	adds	r0, r0, r2
 8005e8c:	f141 0100 	adc.w	r1, r1, #0
 8005e90:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e94:	1880      	adds	r0, r0, r2
 8005e96:	fa43 f305 	asr.w	r3, r3, r5
 8005e9a:	4159      	adcs	r1, r3
 8005e9c:	e00e      	b.n	8005ebc <__adddf3+0xd0>
 8005e9e:	f1a5 0520 	sub.w	r5, r5, #32
 8005ea2:	f10e 0e20 	add.w	lr, lr, #32
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005eac:	bf28      	it	cs
 8005eae:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005eb2:	fa43 f305 	asr.w	r3, r3, r5
 8005eb6:	18c0      	adds	r0, r0, r3
 8005eb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ec0:	d507      	bpl.n	8005ed2 <__adddf3+0xe6>
 8005ec2:	f04f 0e00 	mov.w	lr, #0
 8005ec6:	f1dc 0c00 	rsbs	ip, ip, #0
 8005eca:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005ece:	eb6e 0101 	sbc.w	r1, lr, r1
 8005ed2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005ed6:	d31b      	bcc.n	8005f10 <__adddf3+0x124>
 8005ed8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005edc:	d30c      	bcc.n	8005ef8 <__adddf3+0x10c>
 8005ede:	0849      	lsrs	r1, r1, #1
 8005ee0:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ee4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ee8:	f104 0401 	add.w	r4, r4, #1
 8005eec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ef0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ef4:	f080 809a 	bcs.w	800602c <__adddf3+0x240>
 8005ef8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005efc:	bf08      	it	eq
 8005efe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005f02:	f150 0000 	adcs.w	r0, r0, #0
 8005f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005f0a:	ea41 0105 	orr.w	r1, r1, r5
 8005f0e:	bd30      	pop	{r4, r5, pc}
 8005f10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005f14:	4140      	adcs	r0, r0
 8005f16:	eb41 0101 	adc.w	r1, r1, r1
 8005f1a:	3c01      	subs	r4, #1
 8005f1c:	bf28      	it	cs
 8005f1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005f22:	d2e9      	bcs.n	8005ef8 <__adddf3+0x10c>
 8005f24:	f091 0f00 	teq	r1, #0
 8005f28:	bf04      	itt	eq
 8005f2a:	4601      	moveq	r1, r0
 8005f2c:	2000      	moveq	r0, #0
 8005f2e:	fab1 f381 	clz	r3, r1
 8005f32:	bf08      	it	eq
 8005f34:	3320      	addeq	r3, #32
 8005f36:	f1a3 030b 	sub.w	r3, r3, #11
 8005f3a:	f1b3 0220 	subs.w	r2, r3, #32
 8005f3e:	da0c      	bge.n	8005f5a <__adddf3+0x16e>
 8005f40:	320c      	adds	r2, #12
 8005f42:	dd08      	ble.n	8005f56 <__adddf3+0x16a>
 8005f44:	f102 0c14 	add.w	ip, r2, #20
 8005f48:	f1c2 020c 	rsb	r2, r2, #12
 8005f4c:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f50:	fa21 f102 	lsr.w	r1, r1, r2
 8005f54:	e00c      	b.n	8005f70 <__adddf3+0x184>
 8005f56:	f102 0214 	add.w	r2, r2, #20
 8005f5a:	bfd8      	it	le
 8005f5c:	f1c2 0c20 	rsble	ip, r2, #32
 8005f60:	fa01 f102 	lsl.w	r1, r1, r2
 8005f64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f68:	bfdc      	itt	le
 8005f6a:	ea41 010c 	orrle.w	r1, r1, ip
 8005f6e:	4090      	lslle	r0, r2
 8005f70:	1ae4      	subs	r4, r4, r3
 8005f72:	bfa2      	ittt	ge
 8005f74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f78:	4329      	orrge	r1, r5
 8005f7a:	bd30      	popge	{r4, r5, pc}
 8005f7c:	ea6f 0404 	mvn.w	r4, r4
 8005f80:	3c1f      	subs	r4, #31
 8005f82:	da1c      	bge.n	8005fbe <__adddf3+0x1d2>
 8005f84:	340c      	adds	r4, #12
 8005f86:	dc0e      	bgt.n	8005fa6 <__adddf3+0x1ba>
 8005f88:	f104 0414 	add.w	r4, r4, #20
 8005f8c:	f1c4 0220 	rsb	r2, r4, #32
 8005f90:	fa20 f004 	lsr.w	r0, r0, r4
 8005f94:	fa01 f302 	lsl.w	r3, r1, r2
 8005f98:	ea40 0003 	orr.w	r0, r0, r3
 8005f9c:	fa21 f304 	lsr.w	r3, r1, r4
 8005fa0:	ea45 0103 	orr.w	r1, r5, r3
 8005fa4:	bd30      	pop	{r4, r5, pc}
 8005fa6:	f1c4 040c 	rsb	r4, r4, #12
 8005faa:	f1c4 0220 	rsb	r2, r4, #32
 8005fae:	fa20 f002 	lsr.w	r0, r0, r2
 8005fb2:	fa01 f304 	lsl.w	r3, r1, r4
 8005fb6:	ea40 0003 	orr.w	r0, r0, r3
 8005fba:	4629      	mov	r1, r5
 8005fbc:	bd30      	pop	{r4, r5, pc}
 8005fbe:	fa21 f004 	lsr.w	r0, r1, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	bd30      	pop	{r4, r5, pc}
 8005fc6:	f094 0f00 	teq	r4, #0
 8005fca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005fce:	bf06      	itte	eq
 8005fd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005fd4:	3401      	addeq	r4, #1
 8005fd6:	3d01      	subne	r5, #1
 8005fd8:	e74e      	b.n	8005e78 <__adddf3+0x8c>
 8005fda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fde:	bf18      	it	ne
 8005fe0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fe4:	d029      	beq.n	800603a <__adddf3+0x24e>
 8005fe6:	ea94 0f05 	teq	r4, r5
 8005fea:	bf08      	it	eq
 8005fec:	ea90 0f02 	teqeq	r0, r2
 8005ff0:	d005      	beq.n	8005ffe <__adddf3+0x212>
 8005ff2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ff6:	bf04      	itt	eq
 8005ff8:	4619      	moveq	r1, r3
 8005ffa:	4610      	moveq	r0, r2
 8005ffc:	bd30      	pop	{r4, r5, pc}
 8005ffe:	ea91 0f03 	teq	r1, r3
 8006002:	bf1e      	ittt	ne
 8006004:	2100      	movne	r1, #0
 8006006:	2000      	movne	r0, #0
 8006008:	bd30      	popne	{r4, r5, pc}
 800600a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800600e:	d105      	bne.n	800601c <__adddf3+0x230>
 8006010:	0040      	lsls	r0, r0, #1
 8006012:	4149      	adcs	r1, r1
 8006014:	bf28      	it	cs
 8006016:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800601a:	bd30      	pop	{r4, r5, pc}
 800601c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006020:	bf3c      	itt	cc
 8006022:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006026:	bd30      	popcc	{r4, r5, pc}
 8006028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800602c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006030:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	bd30      	pop	{r4, r5, pc}
 800603a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800603e:	bf1a      	itte	ne
 8006040:	4619      	movne	r1, r3
 8006042:	4610      	movne	r0, r2
 8006044:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006048:	bf1c      	itt	ne
 800604a:	460b      	movne	r3, r1
 800604c:	4602      	movne	r2, r0
 800604e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006052:	bf06      	itte	eq
 8006054:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006058:	ea91 0f03 	teqeq	r1, r3
 800605c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006060:	bd30      	pop	{r4, r5, pc}
 8006062:	bf00      	nop

08006064 <__aeabi_ui2d>:
 8006064:	f090 0f00 	teq	r0, #0
 8006068:	bf04      	itt	eq
 800606a:	2100      	moveq	r1, #0
 800606c:	4770      	bxeq	lr
 800606e:	b530      	push	{r4, r5, lr}
 8006070:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006074:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006078:	f04f 0500 	mov.w	r5, #0
 800607c:	f04f 0100 	mov.w	r1, #0
 8006080:	e750      	b.n	8005f24 <__adddf3+0x138>
 8006082:	bf00      	nop

08006084 <__aeabi_i2d>:
 8006084:	f090 0f00 	teq	r0, #0
 8006088:	bf04      	itt	eq
 800608a:	2100      	moveq	r1, #0
 800608c:	4770      	bxeq	lr
 800608e:	b530      	push	{r4, r5, lr}
 8006090:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006094:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006098:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800609c:	bf48      	it	mi
 800609e:	4240      	negmi	r0, r0
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	e73e      	b.n	8005f24 <__adddf3+0x138>
 80060a6:	bf00      	nop

080060a8 <__aeabi_f2d>:
 80060a8:	0042      	lsls	r2, r0, #1
 80060aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80060ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80060b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80060b6:	bf1f      	itttt	ne
 80060b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80060bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80060c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80060c4:	4770      	bxne	lr
 80060c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80060ca:	bf08      	it	eq
 80060cc:	4770      	bxeq	lr
 80060ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80060d2:	bf04      	itt	eq
 80060d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80060d8:	4770      	bxeq	lr
 80060da:	b530      	push	{r4, r5, lr}
 80060dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80060e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80060e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80060e8:	e71c      	b.n	8005f24 <__adddf3+0x138>
 80060ea:	bf00      	nop

080060ec <__aeabi_ul2d>:
 80060ec:	ea50 0201 	orrs.w	r2, r0, r1
 80060f0:	bf08      	it	eq
 80060f2:	4770      	bxeq	lr
 80060f4:	b530      	push	{r4, r5, lr}
 80060f6:	f04f 0500 	mov.w	r5, #0
 80060fa:	e00a      	b.n	8006112 <__aeabi_l2d+0x16>

080060fc <__aeabi_l2d>:
 80060fc:	ea50 0201 	orrs.w	r2, r0, r1
 8006100:	bf08      	it	eq
 8006102:	4770      	bxeq	lr
 8006104:	b530      	push	{r4, r5, lr}
 8006106:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800610a:	d502      	bpl.n	8006112 <__aeabi_l2d+0x16>
 800610c:	4240      	negs	r0, r0
 800610e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006112:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006116:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800611a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800611e:	f43f aed8 	beq.w	8005ed2 <__adddf3+0xe6>
 8006122:	f04f 0203 	mov.w	r2, #3
 8006126:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800612a:	bf18      	it	ne
 800612c:	3203      	addne	r2, #3
 800612e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006132:	bf18      	it	ne
 8006134:	3203      	addne	r2, #3
 8006136:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800613a:	f1c2 0320 	rsb	r3, r2, #32
 800613e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006142:	fa20 f002 	lsr.w	r0, r0, r2
 8006146:	fa01 fe03 	lsl.w	lr, r1, r3
 800614a:	ea40 000e 	orr.w	r0, r0, lr
 800614e:	fa21 f102 	lsr.w	r1, r1, r2
 8006152:	4414      	add	r4, r2
 8006154:	e6bd      	b.n	8005ed2 <__adddf3+0xe6>
 8006156:	bf00      	nop

08006158 <__aeabi_dmul>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800615e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006162:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006166:	bf1d      	ittte	ne
 8006168:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800616c:	ea94 0f0c 	teqne	r4, ip
 8006170:	ea95 0f0c 	teqne	r5, ip
 8006174:	f000 f8de 	bleq	8006334 <__aeabi_dmul+0x1dc>
 8006178:	442c      	add	r4, r5
 800617a:	ea81 0603 	eor.w	r6, r1, r3
 800617e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006182:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006186:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800618a:	bf18      	it	ne
 800618c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006190:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006198:	d038      	beq.n	800620c <__aeabi_dmul+0xb4>
 800619a:	fba0 ce02 	umull	ip, lr, r0, r2
 800619e:	f04f 0500 	mov.w	r5, #0
 80061a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80061a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80061aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80061ae:	f04f 0600 	mov.w	r6, #0
 80061b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80061b6:	f09c 0f00 	teq	ip, #0
 80061ba:	bf18      	it	ne
 80061bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80061c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80061c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80061c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80061cc:	d204      	bcs.n	80061d8 <__aeabi_dmul+0x80>
 80061ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80061d2:	416d      	adcs	r5, r5
 80061d4:	eb46 0606 	adc.w	r6, r6, r6
 80061d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80061dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80061e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80061e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80061e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80061ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80061f0:	bf88      	it	hi
 80061f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80061f6:	d81e      	bhi.n	8006236 <__aeabi_dmul+0xde>
 80061f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80061fc:	bf08      	it	eq
 80061fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006202:	f150 0000 	adcs.w	r0, r0, #0
 8006206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006210:	ea46 0101 	orr.w	r1, r6, r1
 8006214:	ea40 0002 	orr.w	r0, r0, r2
 8006218:	ea81 0103 	eor.w	r1, r1, r3
 800621c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006220:	bfc2      	ittt	gt
 8006222:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006226:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800622a:	bd70      	popgt	{r4, r5, r6, pc}
 800622c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006230:	f04f 0e00 	mov.w	lr, #0
 8006234:	3c01      	subs	r4, #1
 8006236:	f300 80ab 	bgt.w	8006390 <__aeabi_dmul+0x238>
 800623a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800623e:	bfde      	ittt	le
 8006240:	2000      	movle	r0, #0
 8006242:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006246:	bd70      	pople	{r4, r5, r6, pc}
 8006248:	f1c4 0400 	rsb	r4, r4, #0
 800624c:	3c20      	subs	r4, #32
 800624e:	da35      	bge.n	80062bc <__aeabi_dmul+0x164>
 8006250:	340c      	adds	r4, #12
 8006252:	dc1b      	bgt.n	800628c <__aeabi_dmul+0x134>
 8006254:	f104 0414 	add.w	r4, r4, #20
 8006258:	f1c4 0520 	rsb	r5, r4, #32
 800625c:	fa00 f305 	lsl.w	r3, r0, r5
 8006260:	fa20 f004 	lsr.w	r0, r0, r4
 8006264:	fa01 f205 	lsl.w	r2, r1, r5
 8006268:	ea40 0002 	orr.w	r0, r0, r2
 800626c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006274:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006278:	fa21 f604 	lsr.w	r6, r1, r4
 800627c:	eb42 0106 	adc.w	r1, r2, r6
 8006280:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006284:	bf08      	it	eq
 8006286:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f1c4 040c 	rsb	r4, r4, #12
 8006290:	f1c4 0520 	rsb	r5, r4, #32
 8006294:	fa00 f304 	lsl.w	r3, r0, r4
 8006298:	fa20 f005 	lsr.w	r0, r0, r5
 800629c:	fa01 f204 	lsl.w	r2, r1, r4
 80062a0:	ea40 0002 	orr.w	r0, r0, r2
 80062a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062ac:	f141 0100 	adc.w	r1, r1, #0
 80062b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062b4:	bf08      	it	eq
 80062b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	f1c4 0520 	rsb	r5, r4, #32
 80062c0:	fa00 f205 	lsl.w	r2, r0, r5
 80062c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80062c8:	fa20 f304 	lsr.w	r3, r0, r4
 80062cc:	fa01 f205 	lsl.w	r2, r1, r5
 80062d0:	ea43 0302 	orr.w	r3, r3, r2
 80062d4:	fa21 f004 	lsr.w	r0, r1, r4
 80062d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062dc:	fa21 f204 	lsr.w	r2, r1, r4
 80062e0:	ea20 0002 	bic.w	r0, r0, r2
 80062e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80062e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062ec:	bf08      	it	eq
 80062ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	f094 0f00 	teq	r4, #0
 80062f8:	d10f      	bne.n	800631a <__aeabi_dmul+0x1c2>
 80062fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80062fe:	0040      	lsls	r0, r0, #1
 8006300:	eb41 0101 	adc.w	r1, r1, r1
 8006304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006308:	bf08      	it	eq
 800630a:	3c01      	subeq	r4, #1
 800630c:	d0f7      	beq.n	80062fe <__aeabi_dmul+0x1a6>
 800630e:	ea41 0106 	orr.w	r1, r1, r6
 8006312:	f095 0f00 	teq	r5, #0
 8006316:	bf18      	it	ne
 8006318:	4770      	bxne	lr
 800631a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800631e:	0052      	lsls	r2, r2, #1
 8006320:	eb43 0303 	adc.w	r3, r3, r3
 8006324:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006328:	bf08      	it	eq
 800632a:	3d01      	subeq	r5, #1
 800632c:	d0f7      	beq.n	800631e <__aeabi_dmul+0x1c6>
 800632e:	ea43 0306 	orr.w	r3, r3, r6
 8006332:	4770      	bx	lr
 8006334:	ea94 0f0c 	teq	r4, ip
 8006338:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800633c:	bf18      	it	ne
 800633e:	ea95 0f0c 	teqne	r5, ip
 8006342:	d00c      	beq.n	800635e <__aeabi_dmul+0x206>
 8006344:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006348:	bf18      	it	ne
 800634a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800634e:	d1d1      	bne.n	80062f4 <__aeabi_dmul+0x19c>
 8006350:	ea81 0103 	eor.w	r1, r1, r3
 8006354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006358:	f04f 0000 	mov.w	r0, #0
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006362:	bf06      	itte	eq
 8006364:	4610      	moveq	r0, r2
 8006366:	4619      	moveq	r1, r3
 8006368:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800636c:	d019      	beq.n	80063a2 <__aeabi_dmul+0x24a>
 800636e:	ea94 0f0c 	teq	r4, ip
 8006372:	d102      	bne.n	800637a <__aeabi_dmul+0x222>
 8006374:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006378:	d113      	bne.n	80063a2 <__aeabi_dmul+0x24a>
 800637a:	ea95 0f0c 	teq	r5, ip
 800637e:	d105      	bne.n	800638c <__aeabi_dmul+0x234>
 8006380:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006384:	bf1c      	itt	ne
 8006386:	4610      	movne	r0, r2
 8006388:	4619      	movne	r1, r3
 800638a:	d10a      	bne.n	80063a2 <__aeabi_dmul+0x24a>
 800638c:	ea81 0103 	eor.w	r1, r1, r3
 8006390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006394:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639c:	f04f 0000 	mov.w	r0, #0
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
 80063a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80063aa:	bd70      	pop	{r4, r5, r6, pc}

080063ac <__aeabi_ddiv>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80063b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80063b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80063ba:	bf1d      	ittte	ne
 80063bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80063c0:	ea94 0f0c 	teqne	r4, ip
 80063c4:	ea95 0f0c 	teqne	r5, ip
 80063c8:	f000 f8a7 	bleq	800651a <__aeabi_ddiv+0x16e>
 80063cc:	eba4 0405 	sub.w	r4, r4, r5
 80063d0:	ea81 0e03 	eor.w	lr, r1, r3
 80063d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80063d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063dc:	f000 8088 	beq.w	80064f0 <__aeabi_ddiv+0x144>
 80063e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80063e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80063ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80063f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80063f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80063f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80063fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006400:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006404:	429d      	cmp	r5, r3
 8006406:	bf08      	it	eq
 8006408:	4296      	cmpeq	r6, r2
 800640a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800640e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006412:	d202      	bcs.n	800641a <__aeabi_ddiv+0x6e>
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	ea4f 0232 	mov.w	r2, r2, rrx
 800641a:	1ab6      	subs	r6, r6, r2
 800641c:	eb65 0503 	sbc.w	r5, r5, r3
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	ea4f 0232 	mov.w	r2, r2, rrx
 8006426:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800642a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800642e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006432:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006436:	bf22      	ittt	cs
 8006438:	1ab6      	subcs	r6, r6, r2
 800643a:	4675      	movcs	r5, lr
 800643c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	ea4f 0232 	mov.w	r2, r2, rrx
 8006446:	ebb6 0e02 	subs.w	lr, r6, r2
 800644a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800644e:	bf22      	ittt	cs
 8006450:	1ab6      	subcs	r6, r6, r2
 8006452:	4675      	movcs	r5, lr
 8006454:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	ea4f 0232 	mov.w	r2, r2, rrx
 800645e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006462:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006466:	bf22      	ittt	cs
 8006468:	1ab6      	subcs	r6, r6, r2
 800646a:	4675      	movcs	r5, lr
 800646c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	ea4f 0232 	mov.w	r2, r2, rrx
 8006476:	ebb6 0e02 	subs.w	lr, r6, r2
 800647a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800647e:	bf22      	ittt	cs
 8006480:	1ab6      	subcs	r6, r6, r2
 8006482:	4675      	movcs	r5, lr
 8006484:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006488:	ea55 0e06 	orrs.w	lr, r5, r6
 800648c:	d018      	beq.n	80064c0 <__aeabi_ddiv+0x114>
 800648e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006492:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006496:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800649a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800649e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80064a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80064a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80064aa:	d1c0      	bne.n	800642e <__aeabi_ddiv+0x82>
 80064ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064b0:	d10b      	bne.n	80064ca <__aeabi_ddiv+0x11e>
 80064b2:	ea41 0100 	orr.w	r1, r1, r0
 80064b6:	f04f 0000 	mov.w	r0, #0
 80064ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80064be:	e7b6      	b.n	800642e <__aeabi_ddiv+0x82>
 80064c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064c4:	bf04      	itt	eq
 80064c6:	4301      	orreq	r1, r0
 80064c8:	2000      	moveq	r0, #0
 80064ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80064ce:	bf88      	it	hi
 80064d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80064d4:	f63f aeaf 	bhi.w	8006236 <__aeabi_dmul+0xde>
 80064d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80064dc:	bf04      	itt	eq
 80064de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80064e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064e6:	f150 0000 	adcs.w	r0, r0, #0
 80064ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80064f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80064f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80064fc:	bfc2      	ittt	gt
 80064fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006502:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006506:	bd70      	popgt	{r4, r5, r6, pc}
 8006508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800650c:	f04f 0e00 	mov.w	lr, #0
 8006510:	3c01      	subs	r4, #1
 8006512:	e690      	b.n	8006236 <__aeabi_dmul+0xde>
 8006514:	ea45 0e06 	orr.w	lr, r5, r6
 8006518:	e68d      	b.n	8006236 <__aeabi_dmul+0xde>
 800651a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800651e:	ea94 0f0c 	teq	r4, ip
 8006522:	bf08      	it	eq
 8006524:	ea95 0f0c 	teqeq	r5, ip
 8006528:	f43f af3b 	beq.w	80063a2 <__aeabi_dmul+0x24a>
 800652c:	ea94 0f0c 	teq	r4, ip
 8006530:	d10a      	bne.n	8006548 <__aeabi_ddiv+0x19c>
 8006532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006536:	f47f af34 	bne.w	80063a2 <__aeabi_dmul+0x24a>
 800653a:	ea95 0f0c 	teq	r5, ip
 800653e:	f47f af25 	bne.w	800638c <__aeabi_dmul+0x234>
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	e72c      	b.n	80063a2 <__aeabi_dmul+0x24a>
 8006548:	ea95 0f0c 	teq	r5, ip
 800654c:	d106      	bne.n	800655c <__aeabi_ddiv+0x1b0>
 800654e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006552:	f43f aefd 	beq.w	8006350 <__aeabi_dmul+0x1f8>
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	e722      	b.n	80063a2 <__aeabi_dmul+0x24a>
 800655c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006560:	bf18      	it	ne
 8006562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006566:	f47f aec5 	bne.w	80062f4 <__aeabi_dmul+0x19c>
 800656a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800656e:	f47f af0d 	bne.w	800638c <__aeabi_dmul+0x234>
 8006572:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006576:	f47f aeeb 	bne.w	8006350 <__aeabi_dmul+0x1f8>
 800657a:	e712      	b.n	80063a2 <__aeabi_dmul+0x24a>

0800657c <__gedf2>:
 800657c:	f04f 3cff 	mov.w	ip, #4294967295
 8006580:	e006      	b.n	8006590 <__cmpdf2+0x4>
 8006582:	bf00      	nop

08006584 <__ledf2>:
 8006584:	f04f 0c01 	mov.w	ip, #1
 8006588:	e002      	b.n	8006590 <__cmpdf2+0x4>
 800658a:	bf00      	nop

0800658c <__cmpdf2>:
 800658c:	f04f 0c01 	mov.w	ip, #1
 8006590:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800659c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065a0:	bf18      	it	ne
 80065a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80065a6:	d01b      	beq.n	80065e0 <__cmpdf2+0x54>
 80065a8:	b001      	add	sp, #4
 80065aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80065ae:	bf0c      	ite	eq
 80065b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80065b4:	ea91 0f03 	teqne	r1, r3
 80065b8:	bf02      	ittt	eq
 80065ba:	ea90 0f02 	teqeq	r0, r2
 80065be:	2000      	moveq	r0, #0
 80065c0:	4770      	bxeq	lr
 80065c2:	f110 0f00 	cmn.w	r0, #0
 80065c6:	ea91 0f03 	teq	r1, r3
 80065ca:	bf58      	it	pl
 80065cc:	4299      	cmppl	r1, r3
 80065ce:	bf08      	it	eq
 80065d0:	4290      	cmpeq	r0, r2
 80065d2:	bf2c      	ite	cs
 80065d4:	17d8      	asrcs	r0, r3, #31
 80065d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80065da:	f040 0001 	orr.w	r0, r0, #1
 80065de:	4770      	bx	lr
 80065e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065e8:	d102      	bne.n	80065f0 <__cmpdf2+0x64>
 80065ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80065ee:	d107      	bne.n	8006600 <__cmpdf2+0x74>
 80065f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065f8:	d1d6      	bne.n	80065a8 <__cmpdf2+0x1c>
 80065fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80065fe:	d0d3      	beq.n	80065a8 <__cmpdf2+0x1c>
 8006600:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <__aeabi_cdrcmple>:
 8006608:	4684      	mov	ip, r0
 800660a:	4610      	mov	r0, r2
 800660c:	4662      	mov	r2, ip
 800660e:	468c      	mov	ip, r1
 8006610:	4619      	mov	r1, r3
 8006612:	4663      	mov	r3, ip
 8006614:	e000      	b.n	8006618 <__aeabi_cdcmpeq>
 8006616:	bf00      	nop

08006618 <__aeabi_cdcmpeq>:
 8006618:	b501      	push	{r0, lr}
 800661a:	f7ff ffb7 	bl	800658c <__cmpdf2>
 800661e:	2800      	cmp	r0, #0
 8006620:	bf48      	it	mi
 8006622:	f110 0f00 	cmnmi.w	r0, #0
 8006626:	bd01      	pop	{r0, pc}

08006628 <__aeabi_dcmpeq>:
 8006628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800662c:	f7ff fff4 	bl	8006618 <__aeabi_cdcmpeq>
 8006630:	bf0c      	ite	eq
 8006632:	2001      	moveq	r0, #1
 8006634:	2000      	movne	r0, #0
 8006636:	f85d fb08 	ldr.w	pc, [sp], #8
 800663a:	bf00      	nop

0800663c <__aeabi_dcmplt>:
 800663c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006640:	f7ff ffea 	bl	8006618 <__aeabi_cdcmpeq>
 8006644:	bf34      	ite	cc
 8006646:	2001      	movcc	r0, #1
 8006648:	2000      	movcs	r0, #0
 800664a:	f85d fb08 	ldr.w	pc, [sp], #8
 800664e:	bf00      	nop

08006650 <__aeabi_dcmple>:
 8006650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006654:	f7ff ffe0 	bl	8006618 <__aeabi_cdcmpeq>
 8006658:	bf94      	ite	ls
 800665a:	2001      	movls	r0, #1
 800665c:	2000      	movhi	r0, #0
 800665e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006662:	bf00      	nop

08006664 <__aeabi_dcmpge>:
 8006664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006668:	f7ff ffce 	bl	8006608 <__aeabi_cdrcmple>
 800666c:	bf94      	ite	ls
 800666e:	2001      	movls	r0, #1
 8006670:	2000      	movhi	r0, #0
 8006672:	f85d fb08 	ldr.w	pc, [sp], #8
 8006676:	bf00      	nop

08006678 <__aeabi_dcmpgt>:
 8006678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800667c:	f7ff ffc4 	bl	8006608 <__aeabi_cdrcmple>
 8006680:	bf34      	ite	cc
 8006682:	2001      	movcc	r0, #1
 8006684:	2000      	movcs	r0, #0
 8006686:	f85d fb08 	ldr.w	pc, [sp], #8
 800668a:	bf00      	nop

0800668c <__aeabi_dcmpun>:
 800668c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006694:	d102      	bne.n	800669c <__aeabi_dcmpun+0x10>
 8006696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800669a:	d10a      	bne.n	80066b2 <__aeabi_dcmpun+0x26>
 800669c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80066a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80066a4:	d102      	bne.n	80066ac <__aeabi_dcmpun+0x20>
 80066a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80066aa:	d102      	bne.n	80066b2 <__aeabi_dcmpun+0x26>
 80066ac:	f04f 0000 	mov.w	r0, #0
 80066b0:	4770      	bx	lr
 80066b2:	f04f 0001 	mov.w	r0, #1
 80066b6:	4770      	bx	lr

080066b8 <__aeabi_d2iz>:
 80066b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80066bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80066c0:	d215      	bcs.n	80066ee <__aeabi_d2iz+0x36>
 80066c2:	d511      	bpl.n	80066e8 <__aeabi_d2iz+0x30>
 80066c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80066c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066cc:	d912      	bls.n	80066f4 <__aeabi_d2iz+0x3c>
 80066ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80066da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80066de:	fa23 f002 	lsr.w	r0, r3, r2
 80066e2:	bf18      	it	ne
 80066e4:	4240      	negne	r0, r0
 80066e6:	4770      	bx	lr
 80066e8:	f04f 0000 	mov.w	r0, #0
 80066ec:	4770      	bx	lr
 80066ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80066f2:	d105      	bne.n	8006700 <__aeabi_d2iz+0x48>
 80066f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80066f8:	bf08      	it	eq
 80066fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80066fe:	4770      	bx	lr
 8006700:	f04f 0000 	mov.w	r0, #0
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop

08006708 <__aeabi_d2uiz>:
 8006708:	004a      	lsls	r2, r1, #1
 800670a:	d211      	bcs.n	8006730 <__aeabi_d2uiz+0x28>
 800670c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006710:	d211      	bcs.n	8006736 <__aeabi_d2uiz+0x2e>
 8006712:	d50d      	bpl.n	8006730 <__aeabi_d2uiz+0x28>
 8006714:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006718:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800671c:	d40e      	bmi.n	800673c <__aeabi_d2uiz+0x34>
 800671e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006726:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800672a:	fa23 f002 	lsr.w	r0, r3, r2
 800672e:	4770      	bx	lr
 8006730:	f04f 0000 	mov.w	r0, #0
 8006734:	4770      	bx	lr
 8006736:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800673a:	d102      	bne.n	8006742 <__aeabi_d2uiz+0x3a>
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	4770      	bx	lr
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	4770      	bx	lr

08006748 <__aeabi_d2f>:
 8006748:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800674c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006750:	bf24      	itt	cs
 8006752:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006756:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800675a:	d90d      	bls.n	8006778 <__aeabi_d2f+0x30>
 800675c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006760:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006764:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006768:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800676c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006770:	bf08      	it	eq
 8006772:	f020 0001 	biceq.w	r0, r0, #1
 8006776:	4770      	bx	lr
 8006778:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800677c:	d121      	bne.n	80067c2 <__aeabi_d2f+0x7a>
 800677e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006782:	bfbc      	itt	lt
 8006784:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006788:	4770      	bxlt	lr
 800678a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800678e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006792:	f1c2 0218 	rsb	r2, r2, #24
 8006796:	f1c2 0c20 	rsb	ip, r2, #32
 800679a:	fa10 f30c 	lsls.w	r3, r0, ip
 800679e:	fa20 f002 	lsr.w	r0, r0, r2
 80067a2:	bf18      	it	ne
 80067a4:	f040 0001 	orrne.w	r0, r0, #1
 80067a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80067ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80067b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80067b4:	ea40 000c 	orr.w	r0, r0, ip
 80067b8:	fa23 f302 	lsr.w	r3, r3, r2
 80067bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067c0:	e7cc      	b.n	800675c <__aeabi_d2f+0x14>
 80067c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80067c6:	d107      	bne.n	80067d8 <__aeabi_d2f+0x90>
 80067c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80067cc:	bf1e      	ittt	ne
 80067ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80067d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80067d6:	4770      	bxne	lr
 80067d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80067dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80067e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <__gesf2>:
 80067e8:	f04f 3cff 	mov.w	ip, #4294967295
 80067ec:	e006      	b.n	80067fc <__cmpsf2+0x4>
 80067ee:	bf00      	nop

080067f0 <__lesf2>:
 80067f0:	f04f 0c01 	mov.w	ip, #1
 80067f4:	e002      	b.n	80067fc <__cmpsf2+0x4>
 80067f6:	bf00      	nop

080067f8 <__cmpsf2>:
 80067f8:	f04f 0c01 	mov.w	ip, #1
 80067fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006800:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006804:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006808:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800680c:	bf18      	it	ne
 800680e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006812:	d011      	beq.n	8006838 <__cmpsf2+0x40>
 8006814:	b001      	add	sp, #4
 8006816:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800681a:	bf18      	it	ne
 800681c:	ea90 0f01 	teqne	r0, r1
 8006820:	bf58      	it	pl
 8006822:	ebb2 0003 	subspl.w	r0, r2, r3
 8006826:	bf88      	it	hi
 8006828:	17c8      	asrhi	r0, r1, #31
 800682a:	bf38      	it	cc
 800682c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8006830:	bf18      	it	ne
 8006832:	f040 0001 	orrne.w	r0, r0, #1
 8006836:	4770      	bx	lr
 8006838:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800683c:	d102      	bne.n	8006844 <__cmpsf2+0x4c>
 800683e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8006842:	d105      	bne.n	8006850 <__cmpsf2+0x58>
 8006844:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006848:	d1e4      	bne.n	8006814 <__cmpsf2+0x1c>
 800684a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800684e:	d0e1      	beq.n	8006814 <__cmpsf2+0x1c>
 8006850:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop

08006858 <__aeabi_cfrcmple>:
 8006858:	4684      	mov	ip, r0
 800685a:	4608      	mov	r0, r1
 800685c:	4661      	mov	r1, ip
 800685e:	e7ff      	b.n	8006860 <__aeabi_cfcmpeq>

08006860 <__aeabi_cfcmpeq>:
 8006860:	b50f      	push	{r0, r1, r2, r3, lr}
 8006862:	f7ff ffc9 	bl	80067f8 <__cmpsf2>
 8006866:	2800      	cmp	r0, #0
 8006868:	bf48      	it	mi
 800686a:	f110 0f00 	cmnmi.w	r0, #0
 800686e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08006870 <__aeabi_fcmpeq>:
 8006870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006874:	f7ff fff4 	bl	8006860 <__aeabi_cfcmpeq>
 8006878:	bf0c      	ite	eq
 800687a:	2001      	moveq	r0, #1
 800687c:	2000      	movne	r0, #0
 800687e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006882:	bf00      	nop

08006884 <__aeabi_fcmplt>:
 8006884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006888:	f7ff ffea 	bl	8006860 <__aeabi_cfcmpeq>
 800688c:	bf34      	ite	cc
 800688e:	2001      	movcc	r0, #1
 8006890:	2000      	movcs	r0, #0
 8006892:	f85d fb08 	ldr.w	pc, [sp], #8
 8006896:	bf00      	nop

08006898 <__aeabi_fcmple>:
 8006898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800689c:	f7ff ffe0 	bl	8006860 <__aeabi_cfcmpeq>
 80068a0:	bf94      	ite	ls
 80068a2:	2001      	movls	r0, #1
 80068a4:	2000      	movhi	r0, #0
 80068a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80068aa:	bf00      	nop

080068ac <__aeabi_fcmpge>:
 80068ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068b0:	f7ff ffd2 	bl	8006858 <__aeabi_cfrcmple>
 80068b4:	bf94      	ite	ls
 80068b6:	2001      	movls	r0, #1
 80068b8:	2000      	movhi	r0, #0
 80068ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80068be:	bf00      	nop

080068c0 <__aeabi_fcmpgt>:
 80068c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068c4:	f7ff ffc8 	bl	8006858 <__aeabi_cfrcmple>
 80068c8:	bf34      	ite	cc
 80068ca:	2001      	movcc	r0, #1
 80068cc:	2000      	movcs	r0, #0
 80068ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80068d2:	bf00      	nop

080068d4 <__aeabi_d2lz>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4605      	mov	r5, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4628      	mov	r0, r5
 80068e0:	4621      	mov	r1, r4
 80068e2:	f7ff feab 	bl	800663c <__aeabi_dcmplt>
 80068e6:	b928      	cbnz	r0, 80068f4 <__aeabi_d2lz+0x20>
 80068e8:	4628      	mov	r0, r5
 80068ea:	4621      	mov	r1, r4
 80068ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f0:	f000 b80a 	b.w	8006908 <__aeabi_d2ulz>
 80068f4:	4628      	mov	r0, r5
 80068f6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80068fa:	f000 f805 	bl	8006908 <__aeabi_d2ulz>
 80068fe:	4240      	negs	r0, r0
 8006900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	bf00      	nop

08006908 <__aeabi_d2ulz>:
 8006908:	b5d0      	push	{r4, r6, r7, lr}
 800690a:	2200      	movs	r2, #0
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <__aeabi_d2ulz+0x34>)
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	f7ff fc21 	bl	8006158 <__aeabi_dmul>
 8006916:	f7ff fef7 	bl	8006708 <__aeabi_d2uiz>
 800691a:	4604      	mov	r4, r0
 800691c:	f7ff fba2 	bl	8006064 <__aeabi_ui2d>
 8006920:	2200      	movs	r2, #0
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <__aeabi_d2ulz+0x38>)
 8006924:	f7ff fc18 	bl	8006158 <__aeabi_dmul>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4630      	mov	r0, r6
 800692e:	4639      	mov	r1, r7
 8006930:	f7ff fa5a 	bl	8005de8 <__aeabi_dsub>
 8006934:	f7ff fee8 	bl	8006708 <__aeabi_d2uiz>
 8006938:	4621      	mov	r1, r4
 800693a:	bdd0      	pop	{r4, r6, r7, pc}
 800693c:	3df00000 	.word	0x3df00000
 8006940:	41f00000 	.word	0x41f00000

08006944 <__aeabi_fmul>:
 8006944:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006948:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800694c:	bf1e      	ittt	ne
 800694e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006952:	ea92 0f0c 	teqne	r2, ip
 8006956:	ea93 0f0c 	teqne	r3, ip
 800695a:	d06f      	beq.n	8006a3c <__aeabi_fmul+0xf8>
 800695c:	441a      	add	r2, r3
 800695e:	ea80 0c01 	eor.w	ip, r0, r1
 8006962:	0240      	lsls	r0, r0, #9
 8006964:	bf18      	it	ne
 8006966:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800696a:	d01e      	beq.n	80069aa <__aeabi_fmul+0x66>
 800696c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006970:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006974:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006978:	fba0 3101 	umull	r3, r1, r0, r1
 800697c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006980:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006984:	bf3e      	ittt	cc
 8006986:	0049      	lslcc	r1, r1, #1
 8006988:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800698c:	005b      	lslcc	r3, r3, #1
 800698e:	ea40 0001 	orr.w	r0, r0, r1
 8006992:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006996:	2afd      	cmp	r2, #253	; 0xfd
 8006998:	d81d      	bhi.n	80069d6 <__aeabi_fmul+0x92>
 800699a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800699e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80069a2:	bf08      	it	eq
 80069a4:	f020 0001 	biceq.w	r0, r0, #1
 80069a8:	4770      	bx	lr
 80069aa:	f090 0f00 	teq	r0, #0
 80069ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80069b2:	bf08      	it	eq
 80069b4:	0249      	lsleq	r1, r1, #9
 80069b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80069ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80069be:	3a7f      	subs	r2, #127	; 0x7f
 80069c0:	bfc2      	ittt	gt
 80069c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80069c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80069ca:	4770      	bxgt	lr
 80069cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	3a01      	subs	r2, #1
 80069d6:	dc5d      	bgt.n	8006a94 <__aeabi_fmul+0x150>
 80069d8:	f112 0f19 	cmn.w	r2, #25
 80069dc:	bfdc      	itt	le
 80069de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80069e2:	4770      	bxle	lr
 80069e4:	f1c2 0200 	rsb	r2, r2, #0
 80069e8:	0041      	lsls	r1, r0, #1
 80069ea:	fa21 f102 	lsr.w	r1, r1, r2
 80069ee:	f1c2 0220 	rsb	r2, r2, #32
 80069f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80069f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80069fa:	f140 0000 	adc.w	r0, r0, #0
 80069fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006a02:	bf08      	it	eq
 8006a04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006a08:	4770      	bx	lr
 8006a0a:	f092 0f00 	teq	r2, #0
 8006a0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006a12:	bf02      	ittt	eq
 8006a14:	0040      	lsleq	r0, r0, #1
 8006a16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006a1a:	3a01      	subeq	r2, #1
 8006a1c:	d0f9      	beq.n	8006a12 <__aeabi_fmul+0xce>
 8006a1e:	ea40 000c 	orr.w	r0, r0, ip
 8006a22:	f093 0f00 	teq	r3, #0
 8006a26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006a2a:	bf02      	ittt	eq
 8006a2c:	0049      	lsleq	r1, r1, #1
 8006a2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006a32:	3b01      	subeq	r3, #1
 8006a34:	d0f9      	beq.n	8006a2a <__aeabi_fmul+0xe6>
 8006a36:	ea41 010c 	orr.w	r1, r1, ip
 8006a3a:	e78f      	b.n	800695c <__aeabi_fmul+0x18>
 8006a3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006a40:	ea92 0f0c 	teq	r2, ip
 8006a44:	bf18      	it	ne
 8006a46:	ea93 0f0c 	teqne	r3, ip
 8006a4a:	d00a      	beq.n	8006a62 <__aeabi_fmul+0x11e>
 8006a4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006a50:	bf18      	it	ne
 8006a52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006a56:	d1d8      	bne.n	8006a0a <__aeabi_fmul+0xc6>
 8006a58:	ea80 0001 	eor.w	r0, r0, r1
 8006a5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006a60:	4770      	bx	lr
 8006a62:	f090 0f00 	teq	r0, #0
 8006a66:	bf17      	itett	ne
 8006a68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006a6c:	4608      	moveq	r0, r1
 8006a6e:	f091 0f00 	teqne	r1, #0
 8006a72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006a76:	d014      	beq.n	8006aa2 <__aeabi_fmul+0x15e>
 8006a78:	ea92 0f0c 	teq	r2, ip
 8006a7c:	d101      	bne.n	8006a82 <__aeabi_fmul+0x13e>
 8006a7e:	0242      	lsls	r2, r0, #9
 8006a80:	d10f      	bne.n	8006aa2 <__aeabi_fmul+0x15e>
 8006a82:	ea93 0f0c 	teq	r3, ip
 8006a86:	d103      	bne.n	8006a90 <__aeabi_fmul+0x14c>
 8006a88:	024b      	lsls	r3, r1, #9
 8006a8a:	bf18      	it	ne
 8006a8c:	4608      	movne	r0, r1
 8006a8e:	d108      	bne.n	8006aa2 <__aeabi_fmul+0x15e>
 8006a90:	ea80 0001 	eor.w	r0, r0, r1
 8006a94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006aa0:	4770      	bx	lr
 8006aa2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006aa6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006aaa:	4770      	bx	lr

08006aac <__aeabi_frsub>:
 8006aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006ab0:	e002      	b.n	8006ab8 <__addsf3>
 8006ab2:	bf00      	nop

08006ab4 <__aeabi_fsub>:
 8006ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006ab8 <__addsf3>:
 8006ab8:	0042      	lsls	r2, r0, #1
 8006aba:	bf1f      	itttt	ne
 8006abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006ac0:	ea92 0f03 	teqne	r2, r3
 8006ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006acc:	d06a      	beq.n	8006ba4 <__addsf3+0xec>
 8006ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006ad6:	bfc1      	itttt	gt
 8006ad8:	18d2      	addgt	r2, r2, r3
 8006ada:	4041      	eorgt	r1, r0
 8006adc:	4048      	eorgt	r0, r1
 8006ade:	4041      	eorgt	r1, r0
 8006ae0:	bfb8      	it	lt
 8006ae2:	425b      	neglt	r3, r3
 8006ae4:	2b19      	cmp	r3, #25
 8006ae6:	bf88      	it	hi
 8006ae8:	4770      	bxhi	lr
 8006aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8006aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006af6:	bf18      	it	ne
 8006af8:	4240      	negne	r0, r0
 8006afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006b06:	bf18      	it	ne
 8006b08:	4249      	negne	r1, r1
 8006b0a:	ea92 0f03 	teq	r2, r3
 8006b0e:	d03f      	beq.n	8006b90 <__addsf3+0xd8>
 8006b10:	f1a2 0201 	sub.w	r2, r2, #1
 8006b14:	fa41 fc03 	asr.w	ip, r1, r3
 8006b18:	eb10 000c 	adds.w	r0, r0, ip
 8006b1c:	f1c3 0320 	rsb	r3, r3, #32
 8006b20:	fa01 f103 	lsl.w	r1, r1, r3
 8006b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006b28:	d502      	bpl.n	8006b30 <__addsf3+0x78>
 8006b2a:	4249      	negs	r1, r1
 8006b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006b34:	d313      	bcc.n	8006b5e <__addsf3+0xa6>
 8006b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006b3a:	d306      	bcc.n	8006b4a <__addsf3+0x92>
 8006b3c:	0840      	lsrs	r0, r0, #1
 8006b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006b42:	f102 0201 	add.w	r2, r2, #1
 8006b46:	2afe      	cmp	r2, #254	; 0xfe
 8006b48:	d251      	bcs.n	8006bee <__addsf3+0x136>
 8006b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006b52:	bf08      	it	eq
 8006b54:	f020 0001 	biceq.w	r0, r0, #1
 8006b58:	ea40 0003 	orr.w	r0, r0, r3
 8006b5c:	4770      	bx	lr
 8006b5e:	0049      	lsls	r1, r1, #1
 8006b60:	eb40 0000 	adc.w	r0, r0, r0
 8006b64:	3a01      	subs	r2, #1
 8006b66:	bf28      	it	cs
 8006b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8006b6c:	d2ed      	bcs.n	8006b4a <__addsf3+0x92>
 8006b6e:	fab0 fc80 	clz	ip, r0
 8006b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8006b76:	ebb2 020c 	subs.w	r2, r2, ip
 8006b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8006b7e:	bfaa      	itet	ge
 8006b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006b84:	4252      	neglt	r2, r2
 8006b86:	4318      	orrge	r0, r3
 8006b88:	bfbc      	itt	lt
 8006b8a:	40d0      	lsrlt	r0, r2
 8006b8c:	4318      	orrlt	r0, r3
 8006b8e:	4770      	bx	lr
 8006b90:	f092 0f00 	teq	r2, #0
 8006b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006b98:	bf06      	itte	eq
 8006b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8006b9e:	3201      	addeq	r2, #1
 8006ba0:	3b01      	subne	r3, #1
 8006ba2:	e7b5      	b.n	8006b10 <__addsf3+0x58>
 8006ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006bac:	bf18      	it	ne
 8006bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006bb2:	d021      	beq.n	8006bf8 <__addsf3+0x140>
 8006bb4:	ea92 0f03 	teq	r2, r3
 8006bb8:	d004      	beq.n	8006bc4 <__addsf3+0x10c>
 8006bba:	f092 0f00 	teq	r2, #0
 8006bbe:	bf08      	it	eq
 8006bc0:	4608      	moveq	r0, r1
 8006bc2:	4770      	bx	lr
 8006bc4:	ea90 0f01 	teq	r0, r1
 8006bc8:	bf1c      	itt	ne
 8006bca:	2000      	movne	r0, #0
 8006bcc:	4770      	bxne	lr
 8006bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006bd2:	d104      	bne.n	8006bde <__addsf3+0x126>
 8006bd4:	0040      	lsls	r0, r0, #1
 8006bd6:	bf28      	it	cs
 8006bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006bdc:	4770      	bx	lr
 8006bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006be2:	bf3c      	itt	cc
 8006be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006be8:	4770      	bxcc	lr
 8006bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006bf6:	4770      	bx	lr
 8006bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006bfc:	bf16      	itet	ne
 8006bfe:	4608      	movne	r0, r1
 8006c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006c04:	4601      	movne	r1, r0
 8006c06:	0242      	lsls	r2, r0, #9
 8006c08:	bf06      	itte	eq
 8006c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8006c0e:	ea90 0f01 	teqeq	r0, r1
 8006c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006c16:	4770      	bx	lr

08006c18 <__aeabi_ui2f>:
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e004      	b.n	8006c28 <__aeabi_i2f+0x8>
 8006c1e:	bf00      	nop

08006c20 <__aeabi_i2f>:
 8006c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006c24:	bf48      	it	mi
 8006c26:	4240      	negmi	r0, r0
 8006c28:	ea5f 0c00 	movs.w	ip, r0
 8006c2c:	bf08      	it	eq
 8006c2e:	4770      	bxeq	lr
 8006c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006c34:	4601      	mov	r1, r0
 8006c36:	f04f 0000 	mov.w	r0, #0
 8006c3a:	e01c      	b.n	8006c76 <__aeabi_l2f+0x2a>

08006c3c <__aeabi_ul2f>:
 8006c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8006c40:	bf08      	it	eq
 8006c42:	4770      	bxeq	lr
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e00a      	b.n	8006c60 <__aeabi_l2f+0x14>
 8006c4a:	bf00      	nop

08006c4c <__aeabi_l2f>:
 8006c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8006c50:	bf08      	it	eq
 8006c52:	4770      	bxeq	lr
 8006c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8006c58:	d502      	bpl.n	8006c60 <__aeabi_l2f+0x14>
 8006c5a:	4240      	negs	r0, r0
 8006c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c60:	ea5f 0c01 	movs.w	ip, r1
 8006c64:	bf02      	ittt	eq
 8006c66:	4684      	moveq	ip, r0
 8006c68:	4601      	moveq	r1, r0
 8006c6a:	2000      	moveq	r0, #0
 8006c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8006c70:	bf08      	it	eq
 8006c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006c7a:	fabc f28c 	clz	r2, ip
 8006c7e:	3a08      	subs	r2, #8
 8006c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006c84:	db10      	blt.n	8006ca8 <__aeabi_l2f+0x5c>
 8006c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8006c8a:	4463      	add	r3, ip
 8006c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8006c90:	f1c2 0220 	rsb	r2, r2, #32
 8006c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006c98:	fa20 f202 	lsr.w	r2, r0, r2
 8006c9c:	eb43 0002 	adc.w	r0, r3, r2
 8006ca0:	bf08      	it	eq
 8006ca2:	f020 0001 	biceq.w	r0, r0, #1
 8006ca6:	4770      	bx	lr
 8006ca8:	f102 0220 	add.w	r2, r2, #32
 8006cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8006cb0:	f1c2 0220 	rsb	r2, r2, #32
 8006cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8006cbc:	eb43 0002 	adc.w	r0, r3, r2
 8006cc0:	bf08      	it	eq
 8006cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006cc6:	4770      	bx	lr

08006cc8 <__aeabi_f2uiz>:
 8006cc8:	0042      	lsls	r2, r0, #1
 8006cca:	d20e      	bcs.n	8006cea <__aeabi_f2uiz+0x22>
 8006ccc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006cd0:	d30b      	bcc.n	8006cea <__aeabi_f2uiz+0x22>
 8006cd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8006cd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8006cda:	d409      	bmi.n	8006cf0 <__aeabi_f2uiz+0x28>
 8006cdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	fa23 f002 	lsr.w	r0, r3, r2
 8006ce8:	4770      	bx	lr
 8006cea:	f04f 0000 	mov.w	r0, #0
 8006cee:	4770      	bx	lr
 8006cf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006cf4:	d101      	bne.n	8006cfa <__aeabi_f2uiz+0x32>
 8006cf6:	0242      	lsls	r2, r0, #9
 8006cf8:	d102      	bne.n	8006d00 <__aeabi_f2uiz+0x38>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	4770      	bx	lr
 8006d00:	f04f 0000 	mov.w	r0, #0
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop

08006d08 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d08:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d0c:	4c39      	ldr	r4, [pc, #228]	; (8006df4 <main+0xec>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d0e:	493a      	ldr	r1, [pc, #232]	; (8006df8 <main+0xf0>)
 8006d10:	6822      	ldr	r2, [r4, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006d12:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006d16:	f042 0210 	orr.w	r2, r2, #16
 8006d1a:	6022      	str	r2, [r4, #0]
 8006d1c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <main+0xf4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d20:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b0a7      	sub	sp, #156	; 0x9c
  SCB->AIRCR =  reg_value;
 8006d26:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d28:	200f      	movs	r0, #15
 8006d2a:	f7fe fb57 	bl	80053dc <HAL_InitTick.isra.0>
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d2e:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <main+0xf8>)
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006d30:	4934      	ldr	r1, [pc, #208]	; (8006e04 <main+0xfc>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d32:	699a      	ldr	r2, [r3, #24]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d34:	2001      	movs	r0, #1
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	619a      	str	r2, [r3, #24]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	f002 0201 	and.w	r2, r2, #1
 8006d42:	920c      	str	r2, [sp, #48]	; 0x30
 8006d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	69db      	ldr	r3, [r3, #28]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d50:	2200      	movs	r2, #0
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006d5a:	684b      	ldr	r3, [r1, #4]
 8006d5c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d64:	604b      	str	r3, [r1, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006d6a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d6e:	f44f 10e0 	mov.w	r0, #1835008	; 0x1c0000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d72:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d78:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 8006d7c:	e9cd 2221 	strd	r2, r2, [sp, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d80:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d82:	9025      	str	r0, [sp, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d84:	a81c      	add	r0, sp, #112	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d86:	9120      	str	r1, [sp, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d88:	9223      	str	r2, [sp, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d8a:	9324      	str	r3, [sp, #144]	; 0x90
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d8c:	f7fa ff3e 	bl	8001c0c <HAL_RCC_OscConfig.constprop.0>
 8006d90:	b108      	cbz	r0, 8006d96 <main+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 8006d92:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006d94:	e7fe      	b.n	8006d94 <main+0x8c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f013 0f06 	tst.w	r3, #6
 8006d9c:	d10c      	bne.n	8006db8 <main+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	6023      	str	r3, [r4, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d001      	beq.n	8006db8 <main+0xb0>
 8006db4:	b672      	cpsid	i
 8006db6:	e7fe      	b.n	8006db6 <main+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006db8:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <main+0xf8>)
 8006dba:	6853      	ldr	r3, [r2, #4]
 8006dbc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dc0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc2:	6853      	ldr	r3, [r2, #4]
 8006dc4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dc8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dca:	6853      	ldr	r3, [r2, #4]
 8006dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd0:	6053      	str	r3, [r2, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	0199      	lsls	r1, r3, #6
 8006dd6:	d5ed      	bpl.n	8006db4 <main+0xac>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd8:	6853      	ldr	r3, [r2, #4]
  return uwTick;
 8006dda:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8006e08 <main+0x100>
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	6053      	str	r3, [r2, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dec:	f8db 0000 	ldr.w	r0, [fp]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df0:	e011      	b.n	8006e16 <main+0x10e>
 8006df2:	bf00      	nop
 8006df4:	40022000 	.word	0x40022000
 8006df8:	e000ed00 	.word	0xe000ed00
 8006dfc:	05fa0300 	.word	0x05fa0300
 8006e00:	40021000 	.word	0x40021000
 8006e04:	40010000 	.word	0x40010000
 8006e08:	20000200 	.word	0x20000200
 8006e0c:	f8db 3000 	ldr.w	r3, [fp]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	1a1b      	subs	r3, r3, r0
 8006e12:	428b      	cmp	r3, r1
 8006e14:	d8ce      	bhi.n	8006db4 <main+0xac>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	6853      	ldr	r3, [r2, #4]
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d1f5      	bne.n	8006e0c <main+0x104>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4ab3      	ldr	r2, [pc, #716]	; (80070f0 <main+0x3e8>)
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d90a      	bls.n	8006e42 <main+0x13a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	f043 0302 	orr.w	r3, r3, #2
 8006e36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d1b8      	bne.n	8006db4 <main+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e42:	4cac      	ldr	r4, [pc, #688]	; (80070f4 <main+0x3ec>)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e44:	4aac      	ldr	r2, [pc, #688]	; (80070f8 <main+0x3f0>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e46:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e48:	ad18      	add	r5, sp, #96	; 0x60
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e52:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e5a:	6063      	str	r3, [r4, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e5c:	f240 2301 	movw	r3, #513	; 0x201
 8006e60:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e64:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006e66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8006e6a:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006e6c:	f003 020c 	and.w	r2, r3, #12
 8006e70:	2a08      	cmp	r2, #8
 8006e72:	f000 8258 	beq.w	8007326 <main+0x61e>
      sysclockfreq = HSE_VALUE;
 8006e76:	4ea1      	ldr	r6, [pc, #644]	; (80070fc <main+0x3f4>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e78:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e7a:	4c9e      	ldr	r4, [pc, #632]	; (80070f4 <main+0x3ec>)
 8006e7c:	4aa0      	ldr	r2, [pc, #640]	; (8007100 <main+0x3f8>)
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	4fa0      	ldr	r7, [pc, #640]	; (8007104 <main+0x3fc>)
 8006e82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e86:	4413      	add	r3, r2
 8006e88:	f893 35e8 	ldrb.w	r3, [r3, #1512]	; 0x5e8
 8006e8c:	f8df a278 	ldr.w	sl, [pc, #632]	; 8007108 <main+0x400>
 8006e90:	40de      	lsrs	r6, r3
 8006e92:	4b9e      	ldr	r3, [pc, #632]	; (800710c <main+0x404>)
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006e94:	f04f 0903 	mov.w	r9, #3
  HAL_InitTick(uwTickPrio);
 8006e98:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e9a:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006e9c:	f7fe fa9e 	bl	80053dc <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea0:	951e      	str	r5, [sp, #120]	; 0x78
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006ea2:	69a3      	ldr	r3, [r4, #24]
 8006ea4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006ea8:	f043 0310 	orr.w	r3, r3, #16
 8006eac:	61a3      	str	r3, [r4, #24]
 8006eae:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb0:	2202      	movs	r2, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006eba:	69a3      	ldr	r3, [r4, #24]
 8006ebc:	4894      	ldr	r0, [pc, #592]	; (8007110 <main+0x408>)
 8006ebe:	f043 0320 	orr.w	r3, r3, #32
 8006ec2:	61a3      	str	r3, [r4, #24]
 8006ec4:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006ec6:	f04f 0800 	mov.w	r8, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed2:	69a3      	ldr	r3, [r4, #24]
 8006ed4:	f043 0304 	orr.w	r3, r3, #4
 8006ed8:	61a3      	str	r3, [r4, #24]
 8006eda:	69a3      	ldr	r3, [r4, #24]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006ee4:	69a3      	ldr	r3, [r4, #24]
 8006ee6:	f043 0308 	orr.w	r3, r3, #8
 8006eea:	61a3      	str	r3, [r4, #24]
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	4b87      	ldr	r3, [pc, #540]	; (8007114 <main+0x40c>)
 8006ef8:	6103      	str	r3, [r0, #16]
 8006efa:	4b87      	ldr	r3, [pc, #540]	; (8007118 <main+0x410>)
 8006efc:	f8ca 1010 	str.w	r1, [sl, #16]
 8006f00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_Pin;
 8006f02:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f04:	921f      	str	r2, [sp, #124]	; 0x7c
	GPIO_InitStruct.Pin = LED_Pin;
 8006f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006f0a:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LED_Pin;
 8006f0c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006f10:	f7fa fd5a 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006f14:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8006f1e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f22:	f7fa fd51 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2a:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006f2c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8006f30:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f34:	f7fa fd48 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006f38:	f640 4203 	movw	r2, #3075	; 0xc03
 8006f3c:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f3e:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006f40:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8006f44:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f48:	f7fa fd3e 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2204      	movs	r2, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f50:	951e      	str	r5, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006f52:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8006f56:	f7fa fd37 	bl	80019c8 <HAL_GPIO_Init>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 400000;
 8006f5e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800711c <main+0x414>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f62:	f8cb 3014 	str.w	r3, [fp, #20]
	hi2c1.Init.ClockSpeed = 400000;
 8006f66:	4b6e      	ldr	r3, [pc, #440]	; (8007120 <main+0x418>)
	hi2c1.Init.OwnAddress1 = 0;
 8006f68:	e9cb 5503 	strd	r5, r5, [fp, #12]
	hi2c1.Init.ClockSpeed = 400000;
 8006f6c:	e9cb 9301 	strd	r9, r3, [fp, #4]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f70:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
	hi2c1.Init.OwnAddress2 = 0;
 8006f74:	e9cb 5506 	strd	r5, r5, [fp, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f78:	e9cb 5508 	strd	r5, r5, [fp, #32]
 8006f7c:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 81e6 	beq.w	8007352 <main+0x64a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f86:	2324      	movs	r3, #36	; 0x24
 8006f88:	f88b 3041 	strb.w	r3, [fp, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006f8c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fa6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fa fe0c 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fac:	4b5d      	ldr	r3, [pc, #372]	; (8007124 <main+0x41c>)
 8006fae:	f8db 5008 	ldr.w	r5, [fp, #8]
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	bf94      	ite	ls
 8006fb6:	4b5c      	ldrls	r3, [pc, #368]	; (8007128 <main+0x420>)
 8006fb8:	4b5c      	ldrhi	r3, [pc, #368]	; (800712c <main+0x424>)
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	bf8c      	ite	hi
 8006fbe:	2300      	movhi	r3, #0
 8006fc0:	2301      	movls	r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 81ad 	bne.w	8007322 <main+0x61a>
  freqrange = I2C_FREQRANGE(pclk1);
 8006fc8:	4c59      	ldr	r4, [pc, #356]	; (8007130 <main+0x428>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fca:	f8db 2004 	ldr.w	r2, [fp, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006fce:	fbb0 f4f4 	udiv	r4, r0, r4
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fd2:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fd4:	4f53      	ldr	r7, [pc, #332]	; (8007124 <main+0x41c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fda:	4323      	orrs	r3, r4
 8006fdc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fde:	6a11      	ldr	r1, [r2, #32]
 8006fe0:	42bd      	cmp	r5, r7
 8006fe2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006fe6:	f200 8203 	bhi.w	80073f0 <main+0x6e8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fea:	1e43      	subs	r3, r0, #1
 8006fec:	006d      	lsls	r5, r5, #1
 8006fee:	fbb3 f3f5 	udiv	r3, r3, r5
 8006ff2:	f640 70fc 	movw	r0, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ff6:	3401      	adds	r4, #1
 8006ff8:	4321      	orrs	r1, r4
 8006ffa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ffc:	69d1      	ldr	r1, [r2, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007004:	4203      	tst	r3, r0
 8007006:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800700a:	f040 8221 	bne.w	8007450 <main+0x748>
 800700e:	2304      	movs	r3, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007010:	2400      	movs	r4, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8007012:	2020      	movs	r0, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007014:	430b      	orrs	r3, r1
 8007016:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007018:	6815      	ldr	r5, [r2, #0]
 800701a:	e9db 3108 	ldrd	r3, r1, [fp, #32]
 800701e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8007022:	430b      	orrs	r3, r1
 8007024:	432b      	orrs	r3, r5
 8007026:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007028:	6895      	ldr	r5, [r2, #8]
 800702a:	e9db 1304 	ldrd	r1, r3, [fp, #16]
 800702e:	f425 4503 	bic.w	r5, r5, #33536	; 0x8300
 8007032:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007036:	430b      	orrs	r3, r1
 8007038:	432b      	orrs	r3, r5
 800703a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800703c:	68d5      	ldr	r5, [r2, #12]
 800703e:	e9db 3106 	ldrd	r3, r1, [fp, #24]
 8007042:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007046:	430b      	orrs	r3, r1
 8007048:	432b      	orrs	r3, r5
 800704a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800704c:	6813      	ldr	r3, [r2, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800704e:	4f29      	ldr	r7, [pc, #164]	; (80070f4 <main+0x3ec>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007056:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800705a:	f88b 0041 	strb.w	r0, [fp, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800705e:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007062:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
 8007066:	697b      	ldr	r3, [r7, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007068:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007072:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	9306      	str	r3, [sp, #24]
 800707a:	9b06      	ldr	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800707c:	f7fa ffc8 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007084:	4d2b      	ldr	r5, [pc, #172]	; (8007134 <main+0x42c>)
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007086:	4621      	mov	r1, r4
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	200e      	movs	r0, #14
 800708c:	f7fa ffc0 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 8007090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007094:	4621      	mov	r1, r4
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	200f      	movs	r0, #15
 800709a:	f7fa ffb9 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80070a2:	4621      	mov	r1, r4
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	2010      	movs	r0, #16
 80070a8:	f7fa ffb2 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 80070ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80070b0:	4621      	mov	r1, r4
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	2011      	movs	r0, #17
 80070b6:	f7fa ffab 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 80070ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	huart1.Init.StopBits = UART_STOPBITS_1;
 80070be:	e9cb 4434 	strd	r4, r4, [fp, #208]	; 0xd0
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070c2:	e9cb 4438 	strd	r4, r4, [fp, #224]	; 0xe0
	huart1.Init.Parity = UART_PARITY_NONE;
 80070c6:	f8cb 40d8 	str.w	r4, [fp, #216]	; 0xd8
 80070ca:	602b      	str	r3, [r5, #0]
	huart1.Init.BaudRate = 115200;
 80070cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80070d0:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
	huart1.Init.Mode = UART_MODE_TX_RX;
 80070d4:	230c      	movs	r3, #12
 80070d6:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
	huart1.Instance = USART1;
 80070da:	4b17      	ldr	r3, [pc, #92]	; (8007138 <main+0x430>)
 80070dc:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
  if (huart->gState == HAL_UART_STATE_RESET)
 80070e0:	f89b 3105 	ldrb.w	r3, [fp, #261]	; 0x105
 80070e4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 81d7 	beq.w	800749c <main+0x794>
 80070ee:	e025      	b.n	800713c <main+0x434>
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40021000 	.word	0x40021000
 80070f8:	0801eda0 	.word	0x0801eda0
 80070fc:	007a1200 	.word	0x007a1200
 8007100:	0800d560 	.word	0x0800d560
 8007104:	40010c00 	.word	0x40010c00
 8007108:	40010800 	.word	0x40010800
 800710c:	20000000 	.word	0x20000000
 8007110:	40011000 	.word	0x40011000
 8007114:	e03f0000 	.word	0xe03f0000
 8007118:	0c030000 	.word	0x0c030000
 800711c:	40005400 	.word	0x40005400
 8007120:	00061a80 	.word	0x00061a80
 8007124:	000186a0 	.word	0x000186a0
 8007128:	001e847f 	.word	0x001e847f
 800712c:	003d08ff 	.word	0x003d08ff
 8007130:	000f4240 	.word	0x000f4240
 8007134:	e000e100 	.word	0xe000e100
 8007138:	40013800 	.word	0x40013800
  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	2324      	movs	r3, #36	; 0x24
 800713e:	f88b 3105 	strb.w	r3, [fp, #261]	; 0x105
  __HAL_UART_DISABLE(huart);
 8007142:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007146:	f8db 10d4 	ldr.w	r1, [fp, #212]	; 0xd4
  __HAL_UART_DISABLE(huart);
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007150:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007152:	691a      	ldr	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007154:	f8db 00d8 	ldr.w	r0, [fp, #216]	; 0xd8
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007158:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800715c:	430a      	orrs	r2, r1
 800715e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007160:	f8db 20d0 	ldr.w	r2, [fp, #208]	; 0xd0
  MODIFY_REG(huart->Instance->CR1,
 8007164:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007166:	4302      	orrs	r2, r0
 8007168:	f8db 00dc 	ldr.w	r0, [fp, #220]	; 0xdc
  MODIFY_REG(huart->Instance->CR1,
 800716c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007170:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007174:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007176:	430a      	orrs	r2, r1
 8007178:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	f8db 10e0 	ldr.w	r1, [fp, #224]	; 0xe0
 8007180:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007184:	430a      	orrs	r2, r1
 8007186:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007188:	4abc      	ldr	r2, [pc, #752]	; (800747c <main+0x774>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f000 81db 	beq.w	8007546 <main+0x83e>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fa fd18 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8007194:	4606      	mov	r6, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007196:	2319      	movs	r3, #25
 8007198:	fb03 f606 	mul.w	r6, r3, r6
 800719c:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	2200      	movs	r2, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	fbb6 f3f3 	udiv	r3, r6, r3
 80071a8:	2664      	movs	r6, #100	; 0x64
	htim1.Instance = TIM1;
 80071aa:	4db5      	ldr	r5, [pc, #724]	; (8007480 <main+0x778>)
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	2020      	movs	r0, #32
	htim1.Init.Prescaler = 0;
 80071ae:	e9cb 5216 	strd	r5, r2, [fp, #88]	; 0x58
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b2:	fbb3 f5f6 	udiv	r5, r3, r6
 80071b6:	fb06 3315 	mls	r3, r6, r5, r3
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	3332      	adds	r3, #50	; 0x32
 80071be:	fbb3 f3f6 	udiv	r3, r3, r6
	htim1.Init.Period = 65535;
 80071c2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80071c6:	f8db 10c8 	ldr.w	r1, [fp, #200]	; 0xc8
 80071ca:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80071ce:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d0:	690b      	ldr	r3, [r1, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071d2:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 80071d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80071da:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071dc:	694b      	ldr	r3, [r1, #20]
 80071de:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80071e2:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80071e4:	68cb      	ldr	r3, [r1, #12]
 80071e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071ea:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->gState = HAL_UART_STATE_READY;
 80071f0:	f88b 0105 	strb.w	r0, [fp, #261]	; 0x105
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  if (htim->State == HAL_TIM_STATE_RESET)
 80071f8:	f89b 3095 	ldrb.w	r3, [fp, #149]	; 0x95
	TIM_OC_InitTypeDef sConfigOC = {0};
 80071fc:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 8007200:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 8007204:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
	htim1.Init.RepetitionCounter = 0;
 8007208:	e9cb 221a 	strd	r2, r2, [fp, #104]	; 0x68
	htim1.Init.Period = 65535;
 800720c:	f8cb 4064 	str.w	r4, [fp, #100]	; 0x64
	TIM_OC_InitTypeDef sConfigOC = {0};
 8007210:	9222      	str	r2, [sp, #136]	; 0x88
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007212:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
 8007216:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 81a6 	beq.w	800756c <main+0x864>
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	2602      	movs	r6, #2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007222:	2401      	movs	r4, #1
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007224:	4d96      	ldr	r5, [pc, #600]	; (8007480 <main+0x778>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722a:	4628      	mov	r0, r5
 800722c:	f7fa fe78 	bl	8001f20 <TIM_Base_SetConfig.constprop.0>
  __HAL_LOCK(htim);
 8007230:	f89b 3094 	ldrb.w	r3, [fp, #148]	; 0x94
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007234:	f88b 409e 	strb.w	r4, [fp, #158]	; 0x9e
  __HAL_LOCK(htim);
 8007238:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723a:	f88b 4096 	strb.w	r4, [fp, #150]	; 0x96
 800723e:	f88b 4097 	strb.w	r4, [fp, #151]	; 0x97
 8007242:	f88b 4098 	strb.w	r4, [fp, #152]	; 0x98
 8007246:	f88b 4099 	strb.w	r4, [fp, #153]	; 0x99
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	f88b 409a 	strb.w	r4, [fp, #154]	; 0x9a
 800724e:	f88b 409b 	strb.w	r4, [fp, #155]	; 0x9b
 8007252:	f88b 409c 	strb.w	r4, [fp, #156]	; 0x9c
 8007256:	f88b 409d 	strb.w	r4, [fp, #157]	; 0x9d
  htim->State = HAL_TIM_STATE_READY;
 800725a:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
  __HAL_LOCK(htim);
 800725e:	f000 81bb 	beq.w	80075d8 <main+0x8d0>
  __HAL_UNLOCK(htim);
 8007262:	2200      	movs	r2, #0
  tmpsmcr = htim->Instance->SMCR;
 8007264:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  tmpsmcr = htim->Instance->SMCR;
 800726c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007276:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007278:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
  if (htim->State == HAL_TIM_STATE_RESET)
 800727c:	f89b 3095 	ldrb.w	r3, [fp, #149]	; 0x95
  __HAL_UNLOCK(htim);
 8007280:	f88b 2094 	strb.w	r2, [fp, #148]	; 0x94
  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	f7fa fe4a 	bl	8001f20 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800728c:	f89b 3094 	ldrb.w	r3, [fp, #148]	; 0x94
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007290:	f88b 409e 	strb.w	r4, [fp, #158]	; 0x9e
 8007294:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	f88b 4096 	strb.w	r4, [fp, #150]	; 0x96
 800729a:	f88b 4097 	strb.w	r4, [fp, #151]	; 0x97
 800729e:	f88b 4098 	strb.w	r4, [fp, #152]	; 0x98
 80072a2:	f88b 4099 	strb.w	r4, [fp, #153]	; 0x99
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	f88b 409a 	strb.w	r4, [fp, #154]	; 0x9a
 80072aa:	f88b 409b 	strb.w	r4, [fp, #155]	; 0x9b
 80072ae:	f88b 409c 	strb.w	r4, [fp, #156]	; 0x9c
 80072b2:	f88b 409d 	strb.w	r4, [fp, #157]	; 0x9d
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
 80072ba:	f000 8197 	beq.w	80075ec <main+0x8e4>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072be:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  htim->State = HAL_TIM_STATE_BUSY;
 80072c2:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  tmpcr2 = htim->Instance->CR2;
 80072c6:	6859      	ldr	r1, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c8:	42ab      	cmp	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 80072ce:	689a      	ldr	r2, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80072d0:	6059      	str	r1, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d2:	f000 8187 	beq.w	80075e4 <main+0x8dc>
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	f000 8183 	beq.w	80075e4 <main+0x8dc>
 80072de:	4969      	ldr	r1, [pc, #420]	; (8007484 <main+0x77c>)
 80072e0:	428b      	cmp	r3, r1
 80072e2:	f000 817f 	beq.w	80075e4 <main+0x8dc>
 80072e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072ea:	428b      	cmp	r3, r1
 80072ec:	f000 817a 	beq.w	80075e4 <main+0x8dc>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80072f0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80072f4:	f88b 3094 	strb.w	r3, [fp, #148]	; 0x94
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	f88b 2095 	strb.w	r2, [fp, #149]	; 0x95
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80072fc:	9322      	str	r3, [sp, #136]	; 0x88
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007306:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800730a:	2260      	movs	r2, #96	; 0x60
 800730c:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800730e:	a81c      	add	r0, sp, #112	; 0x70
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007310:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007314:	f7fe f88a 	bl	800542c <HAL_TIM_PWM_ConfigChannel.constprop.0>
 8007318:	2800      	cmp	r0, #0
 800731a:	f000 817b 	beq.w	8007614 <main+0x90c>
 800731e:	b672      	cpsid	i
	while (1)
 8007320:	e7fe      	b.n	8007320 <main+0x618>
 8007322:	b672      	cpsid	i
 8007324:	e7fe      	b.n	8007324 <main+0x61c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007326:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800732a:	3298      	adds	r2, #152	; 0x98
 800732c:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800732e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007330:	f812 6c38 	ldrb.w	r6, [r2, #-56]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007334:	f140 8088 	bpl.w	8007448 <main+0x740>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007338:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800733a:	4a53      	ldr	r2, [pc, #332]	; (8007488 <main+0x780>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800733c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007340:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007344:	3398      	adds	r3, #152	; 0x98
 8007346:	446b      	add	r3, sp
 8007348:	f813 3c44 	ldrb.w	r3, [r3, #-68]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800734c:	fbb6 f6f3 	udiv	r6, r6, r3
 8007350:	e592      	b.n	8006e78 <main+0x170>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007352:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007354:	971e      	str	r7, [sp, #120]	; 0x78
    hi2c->Lock = HAL_UNLOCKED;
 8007356:	f88b 7040 	strb.w	r7, [fp, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735a:	69a3      	ldr	r3, [r4, #24]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800735c:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	61a3      	str	r3, [r4, #24]
 8007364:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007366:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800736e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007372:	2312      	movs	r3, #18
 8007374:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007378:	f7fa fb26 	bl	80019c8 <HAL_GPIO_Init>
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800737c:	2310      	movs	r3, #16
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800737e:	e9cb 7545 	strd	r7, r5, [fp, #276]	; 0x114
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007382:	e9cb 7747 	strd	r7, r7, [fp, #284]	; 0x11c
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007386:	e9cb 7749 	strd	r7, r7, [fp, #292]	; 0x124
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800738a:	f8cb 3110 	str.w	r3, [fp, #272]	; 0x110
    __HAL_RCC_I2C1_CLK_ENABLE();
 800738e:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007390:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800748c <main+0x784>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007398:	61e3      	str	r3, [r4, #28]
 800739a:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800739c:	4640      	mov	r0, r8
    __HAL_RCC_I2C1_CLK_ENABLE();
 800739e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a2:	930d      	str	r3, [sp, #52]	; 0x34
 80073a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80073a6:	4b3a      	ldr	r3, [pc, #232]	; (8007490 <main+0x788>)
 80073a8:	f8cb 310c 	str.w	r3, [fp, #268]	; 0x10c
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80073ac:	f7fa fae2 	bl	8001974 <HAL_DMA_Init.constprop.0>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d15e      	bne.n	8007472 <main+0x76a>
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80073b4:	4b37      	ldr	r3, [pc, #220]	; (8007494 <main+0x78c>)
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073b6:	f8cb 515c 	str.w	r5, [fp, #348]	; 0x15c
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073ba:	f108 0544 	add.w	r5, r8, #68	; 0x44
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073be:	e9cb 0055 	strd	r0, r0, [fp, #340]	; 0x154
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073c2:	e9cb 0058 	strd	r0, r0, [fp, #352]	; 0x160
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80073c6:	e9cb 005a 	strd	r0, r0, [fp, #360]	; 0x168
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073ca:	f5a8 7484 	sub.w	r4, r8, #264	; 0x108
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073ce:	4628      	mov	r0, r5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073d0:	f8cb 8038 	str.w	r8, [fp, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80073d4:	f8cb 3150 	str.w	r3, [fp, #336]	; 0x150
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073d8:	f8cb 4130 	str.w	r4, [fp, #304]	; 0x130
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073dc:	f7fa faca 	bl	8001974 <HAL_DMA_Init.constprop.0>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f040 83c4 	bne.w	8007b6e <main+0xe66>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80073e6:	f8cb 503c 	str.w	r5, [fp, #60]	; 0x3c
 80073ea:	f8cb 4174 	str.w	r4, [fp, #372]	; 0x174
}
 80073ee:	e5ca      	b.n	8006f86 <main+0x27e>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80073f4:	fb04 f303 	mul.w	r3, r4, r3
 80073f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80073fc:	fbb3 f3f4 	udiv	r3, r3, r4
 8007400:	3301      	adds	r3, #1
 8007402:	430b      	orrs	r3, r1
 8007404:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007406:	69d1      	ldr	r1, [r2, #28]
 8007408:	f8db 700c 	ldr.w	r7, [fp, #12]
 800740c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007410:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007414:	b9ff      	cbnz	r7, 8007456 <main+0x74e>
 8007416:	3801      	subs	r0, #1
 8007418:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800741c:	fbb0 f4f4 	udiv	r4, r0, r4
 8007420:	0524      	lsls	r4, r4, #20
 8007422:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007426:	bf14      	ite	ne
 8007428:	2400      	movne	r4, #0
 800742a:	2401      	moveq	r4, #1
 800742c:	006b      	lsls	r3, r5, #1
 800742e:	bb14      	cbnz	r4, 8007476 <main+0x76e>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f040 8090 	bne.w	8007556 <main+0x84e>
 8007436:	442b      	add	r3, r5
 8007438:	fbb0 f3f3 	udiv	r3, r0, r3
 800743c:	3301      	adds	r3, #1
 800743e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	e5e3      	b.n	8007010 <main+0x308>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007448:	4b13      	ldr	r3, [pc, #76]	; (8007498 <main+0x790>)
 800744a:	fb03 f606 	mul.w	r6, r3, r6
 800744e:	e513      	b.n	8006e78 <main+0x170>
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	e5dc      	b.n	8007010 <main+0x308>
 8007456:	2419      	movs	r4, #25
 8007458:	fb05 f404 	mul.w	r4, r5, r4
 800745c:	3801      	subs	r0, #1
 800745e:	fbb0 f4f4 	udiv	r4, r0, r4
 8007462:	0524      	lsls	r4, r4, #20
 8007464:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007468:	bf14      	ite	ne
 800746a:	2400      	movne	r4, #0
 800746c:	2401      	moveq	r4, #1
 800746e:	006b      	lsls	r3, r5, #1
 8007470:	e7dd      	b.n	800742e <main+0x726>
 8007472:	b672      	cpsid	i
 8007474:	e7fe      	b.n	8007474 <main+0x76c>
 8007476:	2301      	movs	r3, #1
 8007478:	e5ca      	b.n	8007010 <main+0x308>
 800747a:	bf00      	nop
 800747c:	40013800 	.word	0x40013800
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40000400 	.word	0x40000400
 8007488:	007a1200 	.word	0x007a1200
 800748c:	2000030c 	.word	0x2000030c
 8007490:	4002006c 	.word	0x4002006c
 8007494:	40020080 	.word	0x40020080
 8007498:	003d0900 	.word	0x003d0900
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800749c:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749e:	951e      	str	r5, [sp, #120]	; 0x78
    huart->Lock = HAL_UNLOCKED;
 80074a0:	f88b 5104 	strb.w	r5, [fp, #260]	; 0x104
    __HAL_RCC_USART1_CLK_ENABLE();
 80074a4:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a6:	4852      	ldr	r0, [pc, #328]	; (80075f0 <main+0x8e8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80074a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b0:	a91c      	add	r1, sp, #112	; 0x70
    __HAL_RCC_USART1_CLK_ENABLE();
 80074b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b6:	9310      	str	r3, [sp, #64]	; 0x40
 80074b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ba:	69bb      	ldr	r3, [r7, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074bc:	2480      	movs	r4, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	f043 0304 	orr.w	r3, r3, #4
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074c6:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074d4:	2302      	movs	r3, #2
 80074d6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074da:	f7fa fa75 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074de:	2300      	movs	r3, #0
 80074e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074e6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	f7fa fa6d 	bl	80019c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074ee:	e9cb 5467 	strd	r5, r4, [fp, #412]	; 0x19c
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074f2:	e9cb 5569 	strd	r5, r5, [fp, #420]	; 0x1a4
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074f6:	e9cb 556b 	strd	r5, r5, [fp, #428]	; 0x1ac
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80074fa:	2510      	movs	r5, #16
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80074fc:	4f3d      	ldr	r7, [pc, #244]	; (80075f4 <main+0x8ec>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80074fe:	4b3e      	ldr	r3, [pc, #248]	; (80075f8 <main+0x8f0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007500:	4638      	mov	r0, r7
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007502:	e9cb 3565 	strd	r3, r5, [fp, #404]	; 0x194
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007506:	f7fa fa35 	bl	8001974 <HAL_DMA_Init.constprop.0>
 800750a:	2800      	cmp	r0, #0
 800750c:	d168      	bne.n	80075e0 <main+0x8d8>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800750e:	4b3b      	ldr	r3, [pc, #236]	; (80075fc <main+0x8f4>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007510:	f8cb 41e4 	str.w	r4, [fp, #484]	; 0x1e4
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007514:	f107 0444 	add.w	r4, r7, #68	; 0x44
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007518:	e9cb 0077 	strd	r0, r0, [fp, #476]	; 0x1dc
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800751c:	e9cb 007a 	strd	r0, r0, [fp, #488]	; 0x1e8
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007520:	e9cb 007c 	strd	r0, r0, [fp, #496]	; 0x1f0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007524:	f8cb 70fc 	str.w	r7, [fp, #252]	; 0xfc
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007528:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800752a:	3fcc      	subs	r7, #204	; 0xcc
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800752c:	f8cb 31d8 	str.w	r3, [fp, #472]	; 0x1d8
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007530:	f8cb 71b8 	str.w	r7, [fp, #440]	; 0x1b8
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007534:	f7fa fa1e 	bl	8001974 <HAL_DMA_Init.constprop.0>
 8007538:	2800      	cmp	r0, #0
 800753a:	d14f      	bne.n	80075dc <main+0x8d4>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800753c:	f8cb 4100 	str.w	r4, [fp, #256]	; 0x100
 8007540:	f8cb 71fc 	str.w	r7, [fp, #508]	; 0x1fc
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007544:	e5fa      	b.n	800713c <main+0x434>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007546:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <main+0x8f8>)
 8007548:	4a2e      	ldr	r2, [pc, #184]	; (8007604 <main+0x8fc>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007550:	5cd3      	ldrb	r3, [r2, r3]
 8007552:	40de      	lsrs	r6, r3
 8007554:	e61f      	b.n	8007196 <main+0x48e>
 8007556:	2319      	movs	r3, #25
 8007558:	fb05 f303 	mul.w	r3, r5, r3
 800755c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007560:	3301      	adds	r3, #1
 8007562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800756a:	e551      	b.n	8007010 <main+0x308>
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800756c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007570:	2280      	movs	r2, #128	; 0x80
  hdma->Lock = HAL_UNLOCKED;
 8007572:	f8ab 323c 	strh.w	r3, [fp, #572]	; 0x23c
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007576:	e9cb 238a 	strd	r2, r3, [fp, #552]	; 0x228
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800757a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800757e:	f8cb 3230 	str.w	r3, [fp, #560]	; 0x230
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007582:	2304      	movs	r3, #4
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007584:	e9cb 0088 	strd	r0, r0, [fp, #544]	; 0x220
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007588:	e9cb 008d 	strd	r0, r0, [fp, #564]	; 0x234
 800758c:	f8cb 325c 	str.w	r3, [fp, #604]	; 0x25c
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007590:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <main+0x8f8>)
    htim->Lock = HAL_UNLOCKED;
 8007592:	f88b 0094 	strb.w	r0, [fp, #148]	; 0x94
 8007596:	6999      	ldr	r1, [r3, #24]
  hdma->DmaBaseAddress = DMA1;
 8007598:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <main+0x900>)
 800759a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800759e:	f8cb 2258 	str.w	r2, [fp, #600]	; 0x258
 80075a2:	6199      	str	r1, [r3, #24]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075aa:	9311      	str	r3, [sp, #68]	; 0x44
 80075ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  tmp = hdma->Instance->CCR;
 80075ae:	69d3      	ldr	r3, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80075b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80075b8:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 80075bc:	61d3      	str	r3, [r2, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <main+0x904>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075c0:	f8cb 0254 	str.w	r0, [fp, #596]	; 0x254
 80075c4:	f8cb 307c 	str.w	r3, [fp, #124]	; 0x7c
 80075c8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80075cc:	f8cb 3240 	str.w	r3, [fp, #576]	; 0x240
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <main+0x908>)
 80075d2:	f8cb 321c 	str.w	r3, [fp, #540]	; 0x21c
}
 80075d6:	e623      	b.n	8007220 <main+0x518>
 80075d8:	b672      	cpsid	i
 80075da:	e7fe      	b.n	80075da <main+0x8d2>
 80075dc:	b672      	cpsid	i
 80075de:	e7fe      	b.n	80075de <main+0x8d6>
 80075e0:	b672      	cpsid	i
 80075e2:	e7fe      	b.n	80075e2 <main+0x8da>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    htim->Instance->SMCR = tmpsmcr;
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	e681      	b.n	80072f0 <main+0x5e8>
 80075ec:	b672      	cpsid	i
 80075ee:	e7fe      	b.n	80075ee <main+0x8e6>
 80075f0:	40010800 	.word	0x40010800
 80075f4:	20000394 	.word	0x20000394
 80075f8:	40020044 	.word	0x40020044
 80075fc:	40020058 	.word	0x40020058
 8007600:	40021000 	.word	0x40021000
 8007604:	0800d560 	.word	0x0800d560
 8007608:	40020000 	.word	0x40020000
 800760c:	2000041c 	.word	0x2000041c
 8007610:	4002001c 	.word	0x4002001c
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007614:	f89b 2094 	ldrb.w	r2, [fp, #148]	; 0x94
 8007618:	2a01      	cmp	r2, #1
 800761a:	f000 82aa 	beq.w	8007b72 <main+0xe6a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800761e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007622:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58

  __HAL_UNLOCK(htim);
 8007626:	f88b 0094 	strb.w	r0, [fp, #148]	; 0x94
  htim->Instance->BDTR = tmpbdtr;
 800762a:	645a      	str	r2, [r3, #68]	; 0x44
	HAL_TIM_MspPostInit(&htim1);
 800762c:	f7fa fcc2 	bl	8001fb4 <HAL_TIM_MspPostInit.constprop.0>
 8007630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007634:	4bd6      	ldr	r3, [pc, #856]	; (8007990 <main+0xc88>)
 8007636:	611a      	str	r2, [r3, #16]
 8007638:	f8db 2000 	ldr.w	r2, [fp]
 800763c:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	2bc8      	cmp	r3, #200	; 0xc8
 8007644:	d9fa      	bls.n	800763c <main+0x934>
    GPIOx->BSRR = GPIO_Pin;
 8007646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800764a:	4cd1      	ldr	r4, [pc, #836]	; (8007990 <main+0xc88>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 800764c:	2011      	movs	r0, #17
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	f7f8 fe34 	bl	80002bc <LCD_Send_Cmd>
  HAL_Delay(120);
 8007654:	2078      	movs	r0, #120	; 0x78
 8007656:	f7f8 fd7b 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 800765a:	203a      	movs	r0, #58	; 0x3a
 800765c:	f7f8 fe2e 	bl	80002bc <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8007660:	2055      	movs	r0, #85	; 0x55
 8007662:	f7f8 fe8b 	bl	800037c <LCD_Send_Dat>
  HAL_Delay(5);
 8007666:	2005      	movs	r0, #5
 8007668:	f7f8 fd72 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 800766c:	2029      	movs	r0, #41	; 0x29
 800766e:	f7f8 fe25 	bl	80002bc <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8007672:	2036      	movs	r0, #54	; 0x36
 8007674:	f7f8 fe22 	bl	80002bc <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8007678:	2008      	movs	r0, #8
 800767a:	f7f8 fe7f 	bl	800037c <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800767e:	2100      	movs	r1, #0
 8007680:	f240 13df 	movw	r3, #479	; 0x1df
 8007684:	f240 123f 	movw	r2, #319	; 0x13f
 8007688:	4608      	mov	r0, r1
 800768a:	f44f 3516 	mov.w	r5, #153600	; 0x25800
 800768e:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007690:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8007694:	f7f8 fefa 	bl	800048c <LCD_Window>
    GPIOx->BSRR = GPIO_Pin;
 8007698:	6127      	str	r7, [r4, #16]
	LCD_Bus(dat);
 800769a:	201f      	movs	r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800769c:	6126      	str	r6, [r4, #16]
 800769e:	f7f8 fd95 	bl	80001cc <LCD_Bus>
 80076a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076a6:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076a8:	2302      	movs	r3, #2
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80076b0:	3d01      	subs	r5, #1
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	d1f0      	bne.n	8007698 <main+0x990>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 80076b6:	2101      	movs	r1, #1
 80076b8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80076bc:	4608      	mov	r0, r1
 80076be:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80076c2:	9500      	str	r5, [sp, #0]
 80076c4:	f7f9 fab6 	bl	8000c34 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 80076c8:	217f      	movs	r1, #127	; 0x7f
 80076ca:	2014      	movs	r0, #20
 80076cc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80076d0:	4ab0      	ldr	r2, [pc, #704]	; (8007994 <main+0xc8c>)
 80076d2:	f7fd ff83 	bl	80055dc <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 80076d6:	462b      	mov	r3, r5
 80076d8:	217f      	movs	r1, #127	; 0x7f
 80076da:	2014      	movs	r0, #20
 80076dc:	4aad      	ldr	r2, [pc, #692]	; (8007994 <main+0xc8c>)
 80076de:	f7fd ff7d 	bl	80055dc <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80076e2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80076e6:	217f      	movs	r1, #127	; 0x7f
 80076e8:	2014      	movs	r0, #20
 80076ea:	4aab      	ldr	r2, [pc, #684]	; (8007998 <main+0xc90>)
 80076ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80076f0:	4eaa      	ldr	r6, [pc, #680]	; (800799c <main+0xc94>)
 80076f2:	f7fd ff73 	bl	80055dc <LCD_Font.constprop.2>
	for (uint16_t i = 0; i <= 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7fd f952 	bl	80049a0 <AT24XX_Read>
 80076fc:	4605      	mov	r5, r0
 80076fe:	1c60      	adds	r0, r4, #1
 8007700:	b280      	uxth	r0, r0
 8007702:	f7fd f94d 	bl	80049a0 <AT24XX_Read>
 8007706:	3402      	adds	r4, #2
 8007708:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 800770a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i <= 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800770e:	f5b4 6fa4 	cmp.w	r4, #1312	; 0x520
 8007712:	f826 5b02 	strh.w	r5, [r6], #2
 8007716:	d1ee      	bne.n	80076f6 <main+0x9ee>
 8007718:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    uint16_t dt[1] = {0};
 800771c:	2700      	movs	r7, #0
	for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800771e:	f640 1608 	movw	r6, #2312	; 0x908
	for (uint16_t i = 0; i <= 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007722:	4d9f      	ldr	r5, [pc, #636]	; (80079a0 <main+0xc98>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007724:	4620      	mov	r0, r4
 8007726:	a91c      	add	r1, sp, #112	; 0x70
    uint16_t dt[1] = {0};
 8007728:	f8ad 7070 	strh.w	r7, [sp, #112]	; 0x70
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800772c:	f7fc fed8 	bl	80044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>
	for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007730:	1c60      	adds	r0, r4, #1
 8007732:	b280      	uxth	r0, r0
    return dt[0];
 8007734:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8007738:	f7fd f932 	bl	80049a0 <AT24XX_Read>
 800773c:	3402      	adds	r4, #2
	return (byteH << 8) | byteL;
 800773e:	fa5f f888 	uxtb.w	r8, r8
	for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007742:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007744:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
	for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007748:	42b4      	cmp	r4, r6
 800774a:	f825 8b02 	strh.w	r8, [r5], #2
 800774e:	d1e9      	bne.n	8007724 <main+0xa1c>
 8007750:	f640 34b8 	movw	r4, #3000	; 0xbb8
    uint16_t dt[1] = {0};
 8007754:	2500      	movs	r5, #0
 8007756:	4f93      	ldr	r7, [pc, #588]	; (80079a4 <main+0xc9c>)
	for (uint16_t i = 0; i <= 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007758:	4620      	mov	r0, r4
 800775a:	f7fd f921 	bl	80049a0 <AT24XX_Read>
 800775e:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007760:	1c60      	adds	r0, r4, #1
 8007762:	b280      	uxth	r0, r0
 8007764:	a91c      	add	r1, sp, #112	; 0x70
    uint16_t dt[1] = {0};
 8007766:	f8ad 5070 	strh.w	r5, [sp, #112]	; 0x70
 800776a:	3402      	adds	r4, #2
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800776c:	f7fc feb8 	bl	80044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007770:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8007774:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007776:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (uint16_t i = 0; i <= 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800777a:	f5b4 6f4f 	cmp.w	r4, #3312	; 0xcf0
 800777e:	f827 6b02 	strh.w	r6, [r7], #2
 8007782:	d1e9      	bne.n	8007758 <main+0xa50>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8007784:	2300      	movs	r3, #0
 8007786:	217f      	movs	r1, #127	; 0x7f
 8007788:	2014      	movs	r0, #20
 800778a:	4a83      	ldr	r2, [pc, #524]	; (8007998 <main+0xc90>)
 800778c:	f7fd ff26 	bl	80055dc <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8007790:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007794:	2202      	movs	r2, #2
 8007796:	20ec      	movs	r0, #236	; 0xec
 8007798:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF2; // ctrl_hum
 800779a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800779e:	f7fd fbf7 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 80077a2:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077a6:	2202      	movs	r2, #2
 80077a8:	20ec      	movs	r0, #236	; 0xec
 80077aa:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF4; // ctrl_meas
 80077ac:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077b0:	f7fd fbee 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 80077b4:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077b8:	2202      	movs	r2, #2
 80077ba:	20ec      	movs	r0, #236	; 0xec
 80077bc:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF5; // config
 80077be:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077c2:	f7fd fbe5 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 80077c6:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077c8:	2201      	movs	r2, #1
 80077ca:	20ec      	movs	r0, #236	; 0xec
 80077cc:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0x88; // read dig_T regs
 80077ce:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077d2:	f7fd fbdd 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80077d6:	2206      	movs	r2, #6
 80077d8:	20ec      	movs	r0, #236	; 0xec
 80077da:	a91c      	add	r1, sp, #112	; 0x70
 80077dc:	f7fd f9c6 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 80077e0:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80077e2:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0x8E; // read dig_P regs
 80077e6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_T2 = (cmd[3] << 8) | cmd[2];
 80077ea:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077ee:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 80077f0:	f8ab 360a 	strh.w	r3, [fp, #1546]	; 0x60a
    dig_T3 = (cmd[5] << 8) | cmd[4];
 80077f4:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80077f8:	f8ab 2608 	strh.w	r2, [fp, #1544]	; 0x608
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077fc:	a91c      	add	r1, sp, #112	; 0x70
 80077fe:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007800:	f8ab 360c 	strh.w	r3, [fp, #1548]	; 0x60c
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007804:	f7fd fbc4 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8007808:	2212      	movs	r2, #18
 800780a:	20ec      	movs	r0, #236	; 0xec
 800780c:	a91c      	add	r1, sp, #112	; 0x70
 800780e:	f7fd f9ad 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8007812:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007814:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0xA1; // read dig_H regs
 8007818:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800781c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007820:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8007822:	f8ab 3610 	strh.w	r3, [fp, #1552]	; 0x610
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8007826:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800782a:	f8ab 260e 	strh.w	r2, [fp, #1550]	; 0x60e
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800782e:	f8ab 3612 	strh.w	r3, [fp, #1554]	; 0x612
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007832:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007836:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007838:	f8ab 3614 	strh.w	r3, [fp, #1556]	; 0x614
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800783c:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007840:	a91c      	add	r1, sp, #112	; 0x70
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8007842:	f8ab 3616 	strh.w	r3, [fp, #1558]	; 0x616
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8007846:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800784a:	f8ab 3618 	strh.w	r3, [fp, #1560]	; 0x618
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800784e:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007852:	f8ab 361a 	strh.w	r3, [fp, #1562]	; 0x61a
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8007856:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
 800785a:	f8ab 361c 	strh.w	r3, [fp, #1564]	; 0x61c
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800785e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8007862:	f8ab 361e 	strh.w	r3, [fp, #1566]	; 0x61e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007866:	f7fd fb93 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800786a:	2201      	movs	r2, #1
 800786c:	20ec      	movs	r0, #236	; 0xec
 800786e:	a91c      	add	r1, sp, #112	; 0x70
 8007870:	f7fd f97c 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8007874:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007876:	2201      	movs	r2, #1
 8007878:	20ec      	movs	r0, #236	; 0xec
 800787a:	f10d 0171 	add.w	r1, sp, #113	; 0x71
    cmd[1] = 0xE1; // read dig_H regs
 800787e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007882:	f7fd fb85 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8007886:	2207      	movs	r2, #7
 8007888:	20ec      	movs	r0, #236	; 0xec
 800788a:	f10d 0171 	add.w	r1, sp, #113	; 0x71
 800788e:	f7fd f96d 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8007892:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007896:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
    dig_H1 = cmd[0];
 800789a:	f8ab 2620 	strh.w	r2, [fp, #1568]	; 0x620
    dig_H2 = (cmd[2] << 8) | cmd[1];
 800789e:	f8bd 2071 	ldrh.w	r2, [sp, #113]	; 0x71
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078a2:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80078a6:	f8ab 2622 	strh.w	r2, [fp, #1570]	; 0x622
    dig_H3 = cmd[3];
 80078aa:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078ae:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
    dig_H3 = cmd[3];
 80078b2:	f8ab 2624 	strh.w	r2, [fp, #1572]	; 0x624
    dig_H6 = cmd[7];
 80078b6:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 80078ba:	f8ab 262a 	strh.w	r2, [fp, #1578]	; 0x62a
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078be:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078c8:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078cc:	f8ab 3628 	strh.w	r3, [fp, #1576]	; 0x628
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078d0:	f8ab 2626 	strh.w	r2, [fp, #1574]	; 0x626
	DS3231_Update();
 80078d4:	f7fd fc90 	bl	80051f8 <DS3231_Update>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078d8:	f89b 3096 	ldrb.w	r3, [fp, #150]	; 0x96
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d121      	bne.n	8007924 <main+0xc1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e0:	2302      	movs	r3, #2
 80078e2:	f88b 3096 	strb.w	r3, [fp, #150]	; 0x96
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078e6:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ea:	492f      	ldr	r1, [pc, #188]	; (80079a8 <main+0xca0>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ec:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ee:	428b      	cmp	r3, r1
  TIMx->CCER &= ~tmp;
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078fe:	f001 8096 	beq.w	8008a2e <main+0x1d26>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007906:	f001 8096 	beq.w	8008a36 <main+0x1d2e>
 800790a:	4a28      	ldr	r2, [pc, #160]	; (80079ac <main+0xca4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	f001 8092 	beq.w	8008a36 <main+0x1d2e>
 8007912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007916:	4293      	cmp	r3, r2
 8007918:	f001 808d 	beq.w	8008a36 <main+0x1d2e>
    __HAL_TIM_ENABLE(htim);
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]
  if (huart->RxState == HAL_UART_STATE_READY)
 8007924:	f89b 3106 	ldrb.w	r3, [fp, #262]	; 0x106
 8007928:	2b20      	cmp	r3, #32
 800792a:	d122      	bne.n	8007972 <main+0xc6a>
    __HAL_LOCK(huart);
 800792c:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8007930:	2b01      	cmp	r3, #1
 8007932:	d01e      	beq.n	8007972 <main+0xc6a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007934:	2200      	movs	r2, #0
  huart->RxXferSize = Size;
 8007936:	2101      	movs	r1, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007938:	2022      	movs	r0, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800793a:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	f8cb 20f8 	str.w	r2, [fp, #248]	; 0xf8
  __HAL_UNLOCK(huart);
 8007942:	f88b 2104 	strb.w	r2, [fp, #260]	; 0x104
  huart->RxXferCount = Size;
 8007946:	f8ab 10f6 	strh.w	r1, [fp, #246]	; 0xf6
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794a:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800794e:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007952:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 8007954:	4c16      	ldr	r4, [pc, #88]	; (80079b0 <main+0xca8>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 800795a:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
  huart->RxXferSize = Size;
 800795e:	f8ab 10f4 	strh.w	r1, [fp, #244]	; 0xf4
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007962:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	430a      	orrs	r2, r1
 8007968:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	f042 0220 	orr.w	r2, r2, #32
 8007970:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <main+0xcac>)
 8007974:	ab12      	add	r3, sp, #72	; 0x48
 8007976:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8007978:	f89b 4105 	ldrb.w	r4, [fp, #261]	; 0x105
 800797c:	c303      	stmia	r3!, {r0, r1}
 800797e:	2c20      	cmp	r4, #32
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	d11d      	bne.n	80079c0 <main+0xcb8>
    __HAL_LOCK(huart);
 8007984:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8007988:	2b01      	cmp	r3, #1
 800798a:	d019      	beq.n	80079c0 <main+0xcb8>
 800798c:	e014      	b.n	80079b8 <main+0xcb0>
 800798e:	bf00      	nop
 8007990:	40010c00 	.word	0x40010c00
 8007994:	0801ed44 	.word	0x0801ed44
 8007998:	0801ed54 	.word	0x0801ed54
 800799c:	20000460 	.word	0x20000460
 80079a0:	20000598 	.word	0x20000598
 80079a4:	200006d0 	.word	0x200006d0
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40000400 	.word	0x40000400
 80079b0:	2000082c 	.word	0x2000082c
 80079b4:	0801edb4 	.word	0x0801edb4
 80079b8:	210a      	movs	r1, #10
 80079ba:	a812      	add	r0, sp, #72	; 0x48
 80079bc:	f7fd fca4 	bl	8005308 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 80079c0:	4ba6      	ldr	r3, [pc, #664]	; (8007c5c <main+0xf54>)
 80079c2:	ac18      	add	r4, sp, #96	; 0x60
 80079c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079c6:	c407      	stmia	r4!, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 80079c8:	f89b 5105 	ldrb.w	r5, [fp, #261]	; 0x105
 80079cc:	8023      	strh	r3, [r4, #0]
 80079ce:	2d20      	cmp	r5, #32
 80079d0:	d154      	bne.n	8007a7c <main+0xd74>
    __HAL_LOCK(huart);
 80079d2:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d050      	beq.n	8007a7c <main+0xd74>
    huart->TxXferSize = Size;
 80079da:	200e      	movs	r0, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079dc:	2100      	movs	r1, #0
    __HAL_LOCK(huart);
 80079de:	2401      	movs	r4, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079e0:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->pTxBuffPtr = pData;
 80079e4:	ab18      	add	r3, sp, #96	; 0x60
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079e6:	4d9e      	ldr	r5, [pc, #632]	; (8007c60 <main+0xf58>)
    huart->pTxBuffPtr = pData;
 80079e8:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079ec:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
    huart->TxXferCount = Size;
 80079f0:	f8ab 00ee 	strh.w	r0, [fp, #238]	; 0xee
    __HAL_LOCK(huart);
 80079f4:	f88b 4104 	strb.w	r4, [fp, #260]	; 0x104
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	f8cb 1108 	str.w	r1, [fp, #264]	; 0x108
    huart->TxXferSize = Size;
 80079fc:	f8ab 00ec 	strh.w	r0, [fp, #236]	; 0xec
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a00:	f88b c105 	strb.w	ip, [fp, #261]	; 0x105
    huart->hdmatx->XferAbortCallback = NULL;
 8007a04:	e9c3 510c 	strd	r5, r1, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 8007a08:	f893 5020 	ldrb.w	r5, [r3, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a0c:	4f95      	ldr	r7, [pc, #596]	; (8007c64 <main+0xf5c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a0e:	4e96      	ldr	r6, [pc, #600]	; (8007c68 <main+0xf60>)
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	e9c3 760a 	strd	r7, r6, [r3, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a16:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 8007a1a:	d025      	beq.n	8007a68 <main+0xd60>
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a1c:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007a20:	f883 4020 	strb.w	r4, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a24:	42a5      	cmp	r5, r4
 8007a26:	f041 800e 	bne.w	8008a46 <main+0x1d3e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a2a:	6399      	str	r1, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a2c:	2102      	movs	r1, #2
    __HAL_DMA_DISABLE(hdma);
 8007a2e:	681c      	ldr	r4, [r3, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a30:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a36:	408d      	lsls	r5, r1
    __HAL_DMA_DISABLE(hdma);
 8007a38:	6821      	ldr	r1, [r4, #0]
 8007a3a:	f021 0101 	bic.w	r1, r1, #1
 8007a3e:	6021      	str	r1, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a42:	604d      	str	r5, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	1d13      	adds	r3, r2, #4
 8007a48:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 8007a4a:	6060      	str	r0, [r4, #4]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007a4c:	bf13      	iteet	ne
 8007a4e:	a918      	addne	r1, sp, #96	; 0x60
    hdma->Instance->CPAR = DstAddress;
 8007a50:	60a3      	streq	r3, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007a52:	ab18      	addeq	r3, sp, #96	; 0x60
    hdma->Instance->CPAR = SrcAddress;
 8007a54:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007a56:	60e3      	str	r3, [r4, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	f043 030e 	orr.w	r3, r3, #14
 8007a5e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	6023      	str	r3, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a68:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8007a6c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f88b 3104 	strb.w	r3, [fp, #260]	; 0x104
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a74:	6953      	ldr	r3, [r2, #20]
 8007a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7a:	6153      	str	r3, [r2, #20]
 8007a7c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8007c6c <main+0xf64>
		if (rx_index != 0) {
 8007a80:	f89b 362d 	ldrb.w	r3, [fp, #1581]	; 0x62d
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 80bd 	bne.w	8007c04 <main+0xefc>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
 8007a8a:	f7fd fbb5 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8007a8e:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
		if (rtcSecLast != rtcSec) {
 8007a92:	4a77      	ldr	r2, [pc, #476]	; (8007c70 <main+0xf68>)
    return ((val / 16 * 10) + (val % 16));
 8007a94:	091c      	lsrs	r4, r3, #4
 8007a96:	7a11      	ldrb	r1, [r2, #8]
 8007a98:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007a9c:	f003 040f 	and.w	r4, r3, #15
 8007aa0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8007aa4:	b2e4      	uxtb	r4, r4
 8007aa6:	42a1      	cmp	r1, r4
		rtcSec = DS3231_getSec();
 8007aa8:	f88b 462e 	strb.w	r4, [fp, #1582]	; 0x62e
		if (rtcSecLast != rtcSec) {
 8007aac:	d0e8      	beq.n	8007a80 <main+0xd78>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 8007aae:	f7fd fba3 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8007ab2:	f89b 30a1 	ldrb.w	r3, [fp, #161]	; 0xa1
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8007ab6:	2100      	movs	r1, #0
    return ((val / 16 * 10) + (val % 16));
 8007ab8:	091a      	lsrs	r2, r3, #4
 8007aba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2008      	movs	r0, #8
 8007aca:	4a6a      	ldr	r2, [pc, #424]	; (8007c74 <main+0xf6c>)
 8007acc:	9302      	str	r3, [sp, #8]
			rtcMin = DS3231_getMin();
 8007ace:	f88b 3730 	strb.w	r3, [fp, #1840]	; 0x730
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8007ad2:	f7f9 fe5b 	bl	800178c <LCD_Circle.constprop.1>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 8007ad6:	4a67      	ldr	r2, [pc, #412]	; (8007c74 <main+0xf6c>)
 8007ad8:	2100      	movs	r1, #0
 8007ada:	2008      	movs	r0, #8
 8007adc:	f7f9 fda0 	bl	8001620 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 8007ae0:	f014 0201 	ands.w	r2, r4, #1
 8007ae4:	d047      	beq.n	8007b76 <main+0xe6e>
 8007ae6:	f04f 0900 	mov.w	r9, #0
 8007aea:	2501      	movs	r5, #1
	P = 1 - radius;
 8007aec:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 8007af0:	f04f 0807 	mov.w	r8, #7
 8007af4:	e00f      	b.n	8007b16 <main+0xe0e>
			P = (P + 5) + (2 * (a_ - b_));
 8007af6:	1e6b      	subs	r3, r5, #1
 8007af8:	eba3 0308 	sub.w	r3, r3, r8
 8007afc:	3405      	adds	r4, #5
 8007afe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8007b02:	462b      	mov	r3, r5
			b_--;
 8007b04:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007b08:	4598      	cmp	r8, r3
 8007b0a:	f105 0501 	add.w	r5, r5, #1
 8007b0e:	f109 0902 	add.w	r9, r9, #2
 8007b12:	f2c0 879c 	blt.w	8008a4e <main+0x1d46>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007b16:	4b57      	ldr	r3, [pc, #348]	; (8007c74 <main+0xf6c>)
 8007b18:	b2ae      	uxth	r6, r5
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	fa1f f388 	uxth.w	r3, r8
 8007b20:	005f      	lsls	r7, r3, #1
 8007b22:	3701      	adds	r7, #1
 8007b24:	b2bf      	uxth	r7, r7
 8007b26:	f1c3 0123 	rsb	r1, r3, #35	; 0x23
 8007b2a:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 8007b2e:	f109 0201 	add.w	r2, r9, #1
 8007b32:	b292      	uxth	r2, r2
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	b289      	uxth	r1, r1
 8007b38:	463b      	mov	r3, r7
 8007b3a:	b280      	uxth	r0, r0
 8007b3c:	9205      	str	r2, [sp, #20]
 8007b3e:	f7f9 f879 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	f1c6 0124 	rsb	r1, r6, #36	; 0x24
 8007b4a:	4e4a      	ldr	r6, [pc, #296]	; (8007c74 <main+0xf6c>)
 8007b4c:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 8007b50:	9600      	str	r6, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	b289      	uxth	r1, r1
 8007b56:	463a      	mov	r2, r7
 8007b58:	b280      	uxth	r0, r0
 8007b5a:	f7f9 f86b 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 8007b5e:	2c00      	cmp	r4, #0
			P = (P + 3) + (2 * a_);
 8007b60:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 8007b64:	dac7      	bge.n	8007af6 <main+0xdee>
			P = (P + 3) + (2 * a_);
 8007b66:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	e7cc      	b.n	8007b08 <main+0xe00>
 8007b6e:	b672      	cpsid	i
	while (1)
 8007b70:	e7fe      	b.n	8007b70 <main+0xe68>
 8007b72:	b672      	cpsid	i
 8007b74:	e7fe      	b.n	8007b74 <main+0xe6c>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 8007b76:	2101      	movs	r1, #1
 8007b78:	2007      	movs	r0, #7
 8007b7a:	4690      	mov	r8, r2
 8007b7c:	2501      	movs	r5, #1
 8007b7e:	f7f9 fe05 	bl	800178c <LCD_Circle.constprop.1>
	P = 1 - radius;
 8007b82:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 8007b86:	f04f 0907 	mov.w	r9, #7
 8007b8a:	e00f      	b.n	8007bac <main+0xea4>
			P = (P + 5) + (2 * (a_ - b_));
 8007b8c:	1e6b      	subs	r3, r5, #1
 8007b8e:	eba3 0309 	sub.w	r3, r3, r9
 8007b92:	3405      	adds	r4, #5
 8007b94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8007b98:	462b      	mov	r3, r5
			b_--;
 8007b9a:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8007b9e:	454b      	cmp	r3, r9
 8007ba0:	f105 0501 	add.w	r5, r5, #1
 8007ba4:	f108 0802 	add.w	r8, r8, #2
 8007ba8:	f300 80f4 	bgt.w	8007d94 <main+0x108c>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007bac:	2300      	movs	r3, #0
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	fa1f f389 	uxth.w	r3, r9
 8007bb4:	005f      	lsls	r7, r3, #1
 8007bb6:	b2ae      	uxth	r6, r5
 8007bb8:	3701      	adds	r7, #1
 8007bba:	b2bf      	uxth	r7, r7
 8007bbc:	f1c3 014b 	rsb	r1, r3, #75	; 0x4b
 8007bc0:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 8007bc4:	f108 0201 	add.w	r2, r8, #1
 8007bc8:	b292      	uxth	r2, r2
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	b289      	uxth	r1, r1
 8007bce:	463b      	mov	r3, r7
 8007bd0:	b280      	uxth	r0, r0
 8007bd2:	9205      	str	r2, [sp, #20]
 8007bd4:	f7f9 f82e 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007bd8:	f1c6 014c 	rsb	r1, r6, #76	; 0x4c
 8007bdc:	2600      	movs	r6, #0
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	9a05      	ldr	r2, [sp, #20]
 8007be2:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 8007be6:	9600      	str	r6, [sp, #0]
 8007be8:	4613      	mov	r3, r2
 8007bea:	b289      	uxth	r1, r1
 8007bec:	463a      	mov	r2, r7
 8007bee:	b280      	uxth	r0, r0
 8007bf0:	f7f9 f820 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 8007bf4:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 8007bf6:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 8007bfa:	dac7      	bge.n	8007b8c <main+0xe84>
			P = (P + 3) + (2 * a_);
 8007bfc:	eb08 0403 	add.w	r4, r8, r3
			a_++;
 8007c00:	462b      	mov	r3, r5
 8007c02:	e7cc      	b.n	8007b9e <main+0xe96>
  return uwTick;
 8007c04:	f8db 2000 	ldr.w	r2, [fp]
 8007c08:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	2bc8      	cmp	r3, #200	; 0xc8
 8007c10:	d9fa      	bls.n	8007c08 <main+0xf00>
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8007c12:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 8007c16:	2600      	movs	r6, #0
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8007c18:	f8bb 2630 	ldrh.w	r2, [fp, #1584]	; 0x630
			rx_index = 0;
 8007c1c:	f88b 662d 	strb.w	r6, [fp, #1581]	; 0x62d
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8007c20:	429a      	cmp	r2, r3
 8007c22:	f040 80a5 	bne.w	8007d70 <main+0x1068>
    __HAL_LOCK(hi2c);
 8007c26:	2401      	movs	r4, #1
    uint16_t dt[1] = {0};
 8007c28:	4637      	mov	r7, r6
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c2a:	4d13      	ldr	r5, [pc, #76]	; (8007c78 <main+0xf70>)
 8007c2c:	fa1f f986 	uxth.w	r9, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c30:	4648      	mov	r0, r9
 8007c32:	a91c      	add	r1, sp, #112	; 0x70
    uint16_t dt[1] = {0};
 8007c34:	f8ad 7070 	strh.w	r7, [sp, #112]	; 0x70
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007c38:	f7fc fc52 	bl	80044e0 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007c3c:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d07e      	beq.n	8007d42 <main+0x103a>
  return uwTick;
 8007c44:	f8db 8000 	ldr.w	r8, [fp]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c48:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
    uint8_t save[] = {val};
 8007c4c:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d176      	bne.n	8007d42 <main+0x103a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c54:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007c58:	e017      	b.n	8007c8a <main+0xf82>
 8007c5a:	bf00      	nop
 8007c5c:	0801edc0 	.word	0x0801edc0
 8007c60:	080018f9 	.word	0x080018f9
 8007c64:	08001be5 	.word	0x08001be5
 8007c68:	08001c09 	.word	0x08001c09
 8007c6c:	20000940 	.word	0x20000940
 8007c70:	20000000 	.word	0x20000000
 8007c74:	00ffa500 	.word	0x00ffa500
 8007c78:	ffff0000 	.word	0xffff0000
 8007c7c:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c80:	eba1 0108 	sub.w	r1, r1, r8
 8007c84:	2919      	cmp	r1, #25
 8007c86:	f200 85cf 	bhi.w	8008828 <main+0x1b20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c8a:	6993      	ldr	r3, [r2, #24]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	f013 0302 	ands.w	r3, r3, #2
 8007c92:	d0f3      	beq.n	8007c7c <main+0xf74>
    __HAL_LOCK(hi2c);
 8007c94:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d052      	beq.n	8007d42 <main+0x103a>
 8007c9c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ca0:	6813      	ldr	r3, [r2, #0]
 8007ca2:	07d8      	lsls	r0, r3, #31
 8007ca4:	d403      	bmi.n	8007cae <main+0xfa6>
      __HAL_I2C_ENABLE(hi2c);
 8007ca6:	6813      	ldr	r3, [r2, #0]
 8007ca8:	f043 0301 	orr.w	r3, r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cae:	2140      	movs	r1, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cb0:	f04f 0c21 	mov.w	ip, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cb4:	6813      	ldr	r3, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cb6:	4648      	mov	r0, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cbc:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cbe:	f88b c041 	strb.w	ip, [fp, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8007cc2:	ab1c      	add	r3, sp, #112	; 0x70
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cc4:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc8:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
    hi2c->XferCount   = Size;
 8007ccc:	f8ab 402e 	strh.w	r4, [fp, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8007cd0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8007cd4:	f8bb 302e 	ldrh.w	r3, [fp, #46]	; 0x2e
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cd8:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 8007cda:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cde:	f8cb 5030 	str.w	r5, [fp, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ce2:	f7fc fb21 	bl	8004328 <I2C_RequestMemoryWrite.constprop.0>
 8007ce6:	bb60      	cbnz	r0, 8007d42 <main+0x103a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ce8:	f8db 3004 	ldr.w	r3, [fp, #4]
    while (hi2c->XferSize > 0U)
 8007cec:	f8bb 002c 	ldrh.w	r0, [fp, #44]	; 0x2c
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	f000 8534 	beq.w	800875e <main+0x1a56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8007cfc:	f040 853f 	bne.w	800877e <main+0x1a76>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d00:	695a      	ldr	r2, [r3, #20]
 8007d02:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8007d06:	f040 8567 	bne.w	80087d8 <main+0x1ad0>
 8007d0a:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0e:	eba1 0108 	sub.w	r1, r1, r8
 8007d12:	2964      	cmp	r1, #100	; 0x64
 8007d14:	d9ef      	bls.n	8007cf6 <main+0xfee>
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d16:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d18:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d1c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d20:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007d24:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d28:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d32:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8007d36:	2a04      	cmp	r2, #4
 8007d38:	d103      	bne.n	8007d42 <main+0x103a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d40:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8007d42:	3601      	adds	r6, #1
 8007d44:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8007d48:	f47f af70 	bne.w	8007c2c <main+0xf24>
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8007d4c:	4d0f      	ldr	r5, [pc, #60]	; (8007d8c <main+0x1084>)
 8007d4e:	ac1c      	add	r4, sp, #112	; 0x70
 8007d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 8007d54:	f89b 6105 	ldrb.w	r6, [fp, #261]	; 0x105
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	2e20      	cmp	r6, #32
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	d107      	bne.n	8007d70 <main+0x1068>
    __HAL_LOCK(huart);
 8007d60:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d003      	beq.n	8007d70 <main+0x1068>
 8007d68:	2114      	movs	r1, #20
 8007d6a:	a81c      	add	r0, sp, #112	; 0x70
 8007d6c:	f7fd facc 	bl	8005308 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	if (memcmp(rx_buffer, "RT", 2) == 0) {
 8007d70:	f245 4352 	movw	r3, #21586	; 0x5452
 8007d74:	f8bb 2630 	ldrh.w	r2, [fp, #1584]	; 0x630
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	f000 8573 	beq.w	8008864 <main+0x1b5c>
	for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8007d7e:	22ff      	movs	r2, #255	; 0xff
 8007d80:	2100      	movs	r1, #0
 8007d82:	4803      	ldr	r0, [pc, #12]	; (8007d90 <main+0x1088>)
 8007d84:	f000 ff20 	bl	8008bc8 <memset>
 8007d88:	e67f      	b.n	8007a8a <main+0xd82>
 8007d8a:	bf00      	nop
 8007d8c:	0801edd0 	.word	0x0801edd0
 8007d90:	20000830 	.word	0x20000830
 8007d94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d98:	4bd7      	ldr	r3, [pc, #860]	; (80080f8 <main+0x13f0>)
 8007d9a:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 8007d9c:	4dd7      	ldr	r5, [pc, #860]	; (80080fc <main+0x13f4>)
 8007d9e:	9b02      	ldr	r3, [sp, #8]
 8007da0:	7a6c      	ldrb	r4, [r5, #9]
 8007da2:	429c      	cmp	r4, r3
 8007da4:	f000 825d 	beq.w	8008262 <main+0x155a>
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 8007da8:	f7fd fa26 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8007dac:	f89b 30a2 	ldrb.w	r3, [fp, #162]	; 0xa2
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007db0:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 8007db2:	0918      	lsrs	r0, r3, #4
 8007db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007dc0:	49cf      	ldr	r1, [pc, #828]	; (8008100 <main+0x13f8>)
 8007dc2:	a81c      	add	r0, sp, #112	; 0x70
				rtcHrs = DS3231_getHrs();
 8007dc4:	f88b 3731 	strb.w	r3, [fp, #1841]	; 0x731
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007dc8:	f001 fd78 	bl	80098bc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	20b4      	movs	r0, #180	; 0xb4
 8007dd0:	a91c      	add	r1, sp, #112	; 0x70
 8007dd2:	f7fd fbb9 	bl	8005548 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007dd6:	f89b 2730 	ldrb.w	r2, [fp, #1840]	; 0x730
 8007dda:	49c9      	ldr	r1, [pc, #804]	; (8008100 <main+0x13f8>)
 8007ddc:	a81c      	add	r0, sp, #112	; 0x70
 8007dde:	f001 fd6d 	bl	80098bc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007de2:	20b4      	movs	r0, #180	; 0xb4
 8007de4:	4ac7      	ldr	r2, [pc, #796]	; (8008104 <main+0x13fc>)
 8007de6:	a91c      	add	r1, sp, #112	; 0x70
 8007de8:	f7fd fbae 	bl	8005548 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 8007dec:	7aac      	ldrb	r4, [r5, #10]
 8007dee:	f89b 3731 	ldrb.w	r3, [fp, #1841]	; 0x731
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	f040 83b8 	bne.w	8008568 <main+0x1860>
    cmd[0] = 0xFA; // temp_msb
 8007df8:	23fa      	movs	r3, #250	; 0xfa
				rtcMinLast = rtcMin;
 8007dfa:	4ac0      	ldr	r2, [pc, #768]	; (80080fc <main+0x13f4>)
 8007dfc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8007e00:	f89b 3730 	ldrb.w	r3, [fp, #1840]	; 0x730
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007e04:	20ec      	movs	r0, #236	; 0xec
 8007e06:	7253      	strb	r3, [r2, #9]
 8007e08:	a915      	add	r1, sp, #84	; 0x54
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f7fd f8c0 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8007e10:	2203      	movs	r2, #3
 8007e12:	20ec      	movs	r0, #236	; 0xec
 8007e14:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007e18:	f7fc fea8 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007e1c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8007e20:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007e2a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007e2e:	f8bb 2608 	ldrh.w	r2, [fp, #1544]	; 0x608
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007e32:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007e36:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 8007e3a:	fb03 f303 	mul.w	r3, r3, r3
 8007e3e:	0b1c      	lsrs	r4, r3, #12
 8007e40:	f9bb 360c 	ldrsh.w	r3, [fp, #1548]	; 0x60c
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007e44:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007e46:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007e4a:	f9bb 360a 	ldrsh.w	r3, [fp, #1546]	; 0x60a
 8007e4e:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007e56:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007e58:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8007e5c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8007e60:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 8007e62:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 8007e64:	f8cb 473c 	str.w	r4, [fp, #1852]	; 0x73c
    tempf = (float) temp;
 8007e68:	f7fe feda 	bl	8006c20 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8007e6c:	49a6      	ldr	r1, [pc, #664]	; (8008108 <main+0x1400>)
 8007e6e:	f7fe fd69 	bl	8006944 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8007e72:	f7fe f919 	bl	80060a8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8007e76:	2200      	movs	r2, #0
 8007e78:	4ba4      	ldr	r3, [pc, #656]	; (800810c <main+0x1404>)
 8007e7a:	f7fe f96d 	bl	8006158 <__aeabi_dmul>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4ba3      	ldr	r3, [pc, #652]	; (8008110 <main+0x1408>)
 8007e82:	f7fd ffb3 	bl	8005dec <__adddf3>
 8007e86:	f005 fae3 	bl	800d450 <floor>
 8007e8a:	a399      	add	r3, pc, #612	; (adr r3, 80080f0 <main+0x13e8>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7fe f962 	bl	8006158 <__aeabi_dmul>
 8007e94:	f7fe fc58 	bl	8006748 <__aeabi_d2f>
 8007e98:	4606      	mov	r6, r0
				temperature = BME280_getTemperature(-1);
 8007e9a:	f7fe f905 	bl	80060a8 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 8007e9e:	23fd      	movs	r3, #253	; 0xfd
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	4688      	mov	r8, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	20ec      	movs	r0, #236	; 0xec
 8007ea8:	a915      	add	r1, sp, #84	; 0x54
 8007eaa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007eae:	e9ca 7800 	strd	r7, r8, [sl]
    cmd[0] = 0xFD; // hum_msb
 8007eb2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007eb6:	f7fd f86b 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8007eba:	2202      	movs	r2, #2
 8007ebc:	20ec      	movs	r0, #236	; 0xec
 8007ebe:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007ec2:	f7fc fe53 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007ec6:	f8bb 3624 	ldrh.w	r3, [fp, #1572]	; 0x624
    v_x1 = t_fine - 76800;
 8007eca:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007ece:	f9bb 262a 	ldrsh.w	r2, [fp, #1578]	; 0x62a
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007ed6:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007eda:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007edc:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007ede:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007ee6:	f8bd 2055 	ldrh.w	r2, [sp, #85]	; 0x55
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007eea:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007eec:	ba52      	rev16	r2, r2
 8007eee:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007ef0:	f9bb 2626 	ldrsh.w	r2, [fp, #1574]	; 0x626
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007ef4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007ef8:	0512      	lsls	r2, r2, #20
 8007efa:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007efe:	f9bb 0622 	ldrsh.w	r0, [fp, #1570]	; 0x622
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007f02:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007f06:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007f0a:	f9bb 0628 	ldrsh.w	r0, [fp, #1576]	; 0x628
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007f0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007f12:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007f16:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007f18:	0bd2      	lsrs	r2, r2, #15
 8007f1a:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8007f1e:	13da      	asrs	r2, r3, #15
 8007f20:	fb02 f202 	mul.w	r2, r2, r2
 8007f24:	f8bb 1620 	ldrh.w	r1, [fp, #1568]	; 0x620
 8007f28:	11d0      	asrs	r0, r2, #7
 8007f2a:	fb01 f000 	mul.w	r0, r1, r0
 8007f2e:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8007f32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8007f36:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8007f3a:	bfa8      	it	ge
 8007f3c:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8007f40:	1300      	asrs	r0, r0, #12
 8007f42:	f7fe fe6d 	bl	8006c20 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8007f46:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8007f4a:	f7fe fcfb 	bl	8006944 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8007f4e:	f7fe f8ab 	bl	80060a8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8007f52:	2200      	movs	r2, #0
 8007f54:	4b6d      	ldr	r3, [pc, #436]	; (800810c <main+0x1404>)
 8007f56:	f7fe f8ff 	bl	8006158 <__aeabi_dmul>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4b6c      	ldr	r3, [pc, #432]	; (8008110 <main+0x1408>)
 8007f5e:	f7fd ff45 	bl	8005dec <__adddf3>
 8007f62:	f005 fa75 	bl	800d450 <floor>
 8007f66:	a362      	add	r3, pc, #392	; (adr r3, 80080f0 <main+0x13e8>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7fe f8f4 	bl	8006158 <__aeabi_dmul>
 8007f70:	f7fe fbea 	bl	8006748 <__aeabi_d2f>
 8007f74:	4605      	mov	r5, r0
				humidity = BME280_getHumidity(-1);
 8007f76:	f7fe f897 	bl	80060a8 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8007f7a:	23f7      	movs	r3, #247	; 0xf7
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	4688      	mov	r8, r1
 8007f80:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8007f84:	4b63      	ldr	r3, [pc, #396]	; (8008114 <main+0x140c>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007f86:	2201      	movs	r2, #1
 8007f88:	20ec      	movs	r0, #236	; 0xec
 8007f8a:	a915      	add	r1, sp, #84	; 0x54
 8007f8c:	e943 7802 	strd	r7, r8, [r3, #-8]
 8007f90:	f7fc fffe 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8007f94:	2203      	movs	r2, #3
 8007f96:	20ec      	movs	r0, #236	; 0xec
 8007f98:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007f9c:	f7fc fde6 	bl	8004b6c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 8007fa0:	1061      	asrs	r1, r4, #1
 8007fa2:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007fa6:	1088      	asrs	r0, r1, #2
 8007fa8:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8007fac:	f9bb 3610 	ldrsh.w	r3, [fp, #1552]	; 0x610
 8007fb0:	f9bb 2612 	ldrsh.w	r2, [fp, #1554]	; 0x612
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	1344      	asrs	r4, r0, #13
 8007fba:	fb04 f202 	mul.w	r2, r4, r2
 8007fbe:	105b      	asrs	r3, r3, #1
 8007fc0:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8007fc4:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8007fc6:	f8bb 260e 	ldrh.w	r2, [fp, #1550]	; 0x60e
 8007fca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 8007fd2:	13da      	asrs	r2, r3, #15
 8007fd4:	f000 856f 	beq.w	8008ab6 <main+0x1dae>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007fd8:	f9bb 3616 	ldrsh.w	r3, [fp, #1558]	; 0x616
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007fdc:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007fe2:	f9bb 1618 	ldrsh.w	r1, [fp, #1560]	; 0x618
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	fb01 3000 	mla	r0, r1, r0, r3
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007fec:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8007ff0:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8007ffa:	f9bb 1614 	ldrsh.w	r1, [fp, #1556]	; 0x614
 8007ffe:	0409      	lsls	r1, r1, #16
 8008000:	eb01 01a0 	add.w	r1, r1, r0, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008004:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8008008:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 800800c:	eb03 3321 	add.w	r3, r3, r1, asr #12
 8008010:	4941      	ldr	r1, [pc, #260]	; (8008118 <main+0x1410>)
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800801a:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 800801e:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 8008020:	bfb3      	iteet	lt
 8008022:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8008026:	005b      	lslge	r3, r3, #1
 8008028:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 800802c:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800802e:	08da      	lsrs	r2, r3, #3
 8008030:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8008034:	f9bb 161c 	ldrsh.w	r1, [fp, #1564]	; 0x61c
 8008038:	0898      	lsrs	r0, r3, #2
 800803a:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800803e:	f9bb 161e 	ldrsh.w	r1, [fp, #1566]	; 0x61e
 8008042:	0b52      	lsrs	r2, r2, #13
 8008044:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8008048:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 800804a:	eb00 3022 	add.w	r0, r0, r2, asr #12
 800804e:	f9bb 261a 	ldrsh.w	r2, [fp, #1562]	; 0x61a
 8008052:	4410      	add	r0, r2
    pressf = (float) press;
 8008054:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8008058:	f7fe fdde 	bl	8006c18 <__aeabi_ui2f>
    return (pressf / 100.0f);
 800805c:	492a      	ldr	r1, [pc, #168]	; (8008108 <main+0x1400>)
 800805e:	f7fe fc71 	bl	8006944 <__aeabi_fmul>
				pressure = (uint16_t)BME280_getPressure();
 8008062:	f7fe fe31 	bl	8006cc8 <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008066:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 800806a:	f240 321e 	movw	r2, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 800806e:	b283      	uxth	r3, r0
 8008070:	f8ab 3750 	strh.w	r3, [fp, #1872]	; 0x750
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008074:	440b      	add	r3, r1
 8008076:	b29b      	uxth	r3, r3
 8008078:	4293      	cmp	r3, r2
 800807a:	f200 80f2 	bhi.w	8008262 <main+0x155a>
 800807e:	4630      	mov	r0, r6
 8008080:	4926      	ldr	r1, [pc, #152]	; (800811c <main+0x1414>)
 8008082:	f7fe fbff 	bl	8006884 <__aeabi_fcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	f000 80eb 	beq.w	8008262 <main+0x155a>
 800808c:	4630      	mov	r0, r6
 800808e:	4924      	ldr	r1, [pc, #144]	; (8008120 <main+0x1418>)
 8008090:	f7fe fc16 	bl	80068c0 <__aeabi_fcmpgt>
 8008094:	2800      	cmp	r0, #0
 8008096:	f000 80e4 	beq.w	8008262 <main+0x155a>
 800809a:	4628      	mov	r0, r5
 800809c:	2100      	movs	r1, #0
 800809e:	f7fe fc0f 	bl	80068c0 <__aeabi_fcmpgt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f000 80dd 	beq.w	8008262 <main+0x155a>
 80080a8:	4628      	mov	r0, r5
 80080aa:	491e      	ldr	r1, [pc, #120]	; (8008124 <main+0x141c>)
 80080ac:	f7fe fbea 	bl	8006884 <__aeabi_fcmplt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f000 80d6 	beq.w	8008262 <main+0x155a>
					if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 80080b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <main+0x1420>)
 80080bc:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80080c0:	4622      	mov	r2, r4
 80080c2:	462b      	mov	r3, r5
 80080c4:	f7fe fab0 	bl	8006628 <__aeabi_dcmpeq>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f040 846f 	bne.w	80089ac <main+0x1ca4>
 80080ce:	4630      	mov	r0, r6
 80080d0:	4916      	ldr	r1, [pc, #88]	; (800812c <main+0x1424>)
 80080d2:	f7fe fbe1 	bl	8006898 <__aeabi_fcmple>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f000 8468 	beq.w	80089ac <main+0x1ca4>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80080dc:	2200      	movs	r2, #0
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <main+0x1404>)
 80080e4:	f7fe fabe 	bl	8006664 <__aeabi_dcmpge>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f040 84e8 	bne.w	8008abe <main+0x1db6>
 80080ee:	e01f      	b.n	8008130 <main+0x1428>
 80080f0:	9999999a 	.word	0x9999999a
 80080f4:	3fb99999 	.word	0x3fb99999
 80080f8:	40011000 	.word	0x40011000
 80080fc:	20000000 	.word	0x20000000
 8008100:	0801ed64 	.word	0x0801ed64
 8008104:	00ffa500 	.word	0x00ffa500
 8008108:	3c23d70a 	.word	0x3c23d70a
 800810c:	40240000 	.word	0x40240000
 8008110:	3fe00000 	.word	0x3fe00000
 8008114:	20000950 	.word	0x20000950
 8008118:	fffff3cb 	.word	0xfffff3cb
 800811c:	42aa0000 	.word	0x42aa0000
 8008120:	c2200000 	.word	0xc2200000
 8008124:	42c80000 	.word	0x42c80000
 8008128:	20000960 	.word	0x20000960
 800812c:	42200000 	.word	0x42200000
 8008130:	2200      	movs	r2, #0
 8008132:	2300      	movs	r3, #0
 8008134:	4620      	mov	r0, r4
 8008136:	4629      	mov	r1, r5
 8008138:	f7fe fa80 	bl	800663c <__aeabi_dcmplt>
 800813c:	2200      	movs	r2, #0
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 849a 	bne.w	8008a78 <main+0x1d70>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8008144:	2300      	movs	r3, #0
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7fe fa95 	bl	8006678 <__aeabi_dcmpgt>
 800814e:	2800      	cmp	r0, #0
 8008150:	f040 84bc 	bne.w	8008acc <main+0x1dc4>
						else if (temperatureLast <= -10) {
 8008154:	2200      	movs	r2, #0
 8008156:	4620      	mov	r0, r4
 8008158:	4629      	mov	r1, r5
 800815a:	4b44      	ldr	r3, [pc, #272]	; (800826c <main+0x1564>)
 800815c:	f7fe fa78 	bl	8006650 <__aeabi_dcmple>
 8008160:	2800      	cmp	r0, #0
 8008162:	f040 8496 	bne.w	8008a92 <main+0x1d8a>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8008166:	e9da 4500 	ldrd	r4, r5, [sl]
 800816a:	2200      	movs	r2, #0
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	4b3f      	ldr	r3, [pc, #252]	; (8008270 <main+0x1568>)
 8008172:	f7fe fa77 	bl	8006664 <__aeabi_dcmpge>
 8008176:	2800      	cmp	r0, #0
 8008178:	f040 84b6 	bne.w	8008ae8 <main+0x1de0>
 800817c:	2200      	movs	r2, #0
 800817e:	2300      	movs	r3, #0
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7fe fa5a 	bl	800663c <__aeabi_dcmplt>
 8008188:	2200      	movs	r2, #0
 800818a:	2800      	cmp	r0, #0
 800818c:	f040 81a4 	bne.w	80084d8 <main+0x17d0>
						else if (temperature < 10 && temperature > 0) {
 8008190:	2300      	movs	r3, #0
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	f7fe fa6f 	bl	8006678 <__aeabi_dcmpgt>
 800819a:	2800      	cmp	r0, #0
 800819c:	f040 81bc 	bne.w	8008518 <main+0x1810>
						else if (temperature <= -10) {
 80081a0:	2200      	movs	r2, #0
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	4b31      	ldr	r3, [pc, #196]	; (800826c <main+0x1564>)
 80081a8:	f7fe fa52 	bl	8006650 <__aeabi_dcmple>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f040 81a2 	bne.w	80084f6 <main+0x17ee>
						temperatureLast = temperature;
 80081b2:	e9da 8900 	ldrd	r8, r9, [sl]
					if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <main+0x156c>)
 80081b8:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 80081bc:	f103 0c10 	add.w	ip, r3, #16
 80081c0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
						temperatureLast = temperature;
 80081cc:	e94c 8902 	strd	r8, r9, [ip, #-8]
					if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80081d0:	f7fe fa2a 	bl	8006628 <__aeabi_dcmpeq>
 80081d4:	b978      	cbnz	r0, 80081f6 <main+0x14ee>
 80081d6:	2200      	movs	r2, #0
 80081d8:	2300      	movs	r3, #0
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	f7fe fa41 	bl	8006664 <__aeabi_dcmpge>
 80081e2:	b140      	cbz	r0, 80081f6 <main+0x14ee>
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <main+0x1570>)
 80081ec:	f7fe fa26 	bl	800663c <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f040 83e7 	bne.w	80089c4 <main+0x1cbc>
					if (pressureLast != pressure) {
 80081f6:	f8bb 2768 	ldrh.w	r2, [fp, #1896]	; 0x768
 80081fa:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 80081fe:	4293      	cmp	r3, r2
 8008200:	d023      	beq.n	800824a <main+0x1542>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8008202:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008206:	bf2c      	ite	cs
 8008208:	491c      	ldrcs	r1, [pc, #112]	; (800827c <main+0x1574>)
						else sprintf(weatherPrintP, " %02d", pressureLast);
 800820a:	491d      	ldrcc	r1, [pc, #116]	; (8008280 <main+0x1578>)
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 800820c:	a815      	add	r0, sp, #84	; 0x54
						else sprintf(weatherPrintP, " %02d", pressureLast);
 800820e:	f001 fb55 	bl	80098bc <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8008212:	21bb      	movs	r1, #187	; 0xbb
 8008214:	2300      	movs	r3, #0
 8008216:	f240 1041 	movw	r0, #321	; 0x141
 800821a:	aa15      	add	r2, sp, #84	; 0x54
 800821c:	f7fd f9de 	bl	80055dc <LCD_Font.constprop.2>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8008220:	f8bb 2750 	ldrh.w	r2, [fp, #1872]	; 0x750
 8008224:	a815      	add	r0, sp, #84	; 0x54
 8008226:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800822a:	bf2c      	ite	cs
 800822c:	4913      	ldrcs	r1, [pc, #76]	; (800827c <main+0x1574>)
						else sprintf(weatherPrintP, " %02d", pressure);
 800822e:	4914      	ldrcc	r1, [pc, #80]	; (8008280 <main+0x1578>)
 8008230:	f001 fb44 	bl	80098bc <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GRAY);
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <main+0x157c>)
 8008236:	21bb      	movs	r1, #187	; 0xbb
 8008238:	f240 1041 	movw	r0, #321	; 0x141
 800823c:	aa15      	add	r2, sp, #84	; 0x54
 800823e:	f7fd f9cd 	bl	80055dc <LCD_Font.constprop.2>
						pressureLast = pressure;
 8008242:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 8008246:	f8ab 3768 	strh.w	r3, [fp, #1896]	; 0x768
					if (AT24XX_Read(0) != rtcHrs) {
 800824a:	2000      	movs	r0, #0
 800824c:	f7fc fba8 	bl	80049a0 <AT24XX_Read>
 8008250:	f89b 1731 	ldrb.w	r1, [fp, #1841]	; 0x731
 8008254:	4288      	cmp	r0, r1
 8008256:	d119      	bne.n	800828c <main+0x1584>
					if (!viewGraphs) {
 8008258:	f89b 376a 	ldrb.w	r3, [fp, #1898]	; 0x76a
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80bc 	beq.w	80083da <main+0x16d2>
			rtcSecLast = rtcSec;
 8008262:	f89b 362e 	ldrb.w	r3, [fp, #1582]	; 0x62e
 8008266:	4a08      	ldr	r2, [pc, #32]	; (8008288 <main+0x1580>)
 8008268:	7213      	strb	r3, [r2, #8]
	{
 800826a:	e409      	b.n	8007a80 <main+0xd78>
 800826c:	c0240000 	.word	0xc0240000
 8008270:	40240000 	.word	0x40240000
 8008274:	20000950 	.word	0x20000950
 8008278:	40590000 	.word	0x40590000
 800827c:	0801ed64 	.word	0x0801ed64
 8008280:	0801ed98 	.word	0x0801ed98
 8008284:	007f7f7f 	.word	0x007f7f7f
 8008288:	20000000 	.word	0x20000000
						AT24XX_Update(0, rtcHrs);
 800828c:	2000      	movs	r0, #0
 800828e:	f7fc fb95 	bl	80049bc <AT24XX_Update>
 8008292:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008296:	4ea7      	ldr	r6, [pc, #668]	; (8008534 <main+0x182c>)
						for (uint16_t i = 0; i <= 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8008298:	4620      	mov	r0, r4
 800829a:	f7fc fb81 	bl	80049a0 <AT24XX_Read>
 800829e:	4605      	mov	r5, r0
 80082a0:	1c60      	adds	r0, r4, #1
 80082a2:	b280      	uxth	r0, r0
 80082a4:	f7fc fb7c 	bl	80049a0 <AT24XX_Read>
 80082a8:	3402      	adds	r4, #2
 80082aa:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 80082ac:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i <= 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80082b0:	f5b4 6fa4 	cmp.w	r4, #1312	; 0x520
 80082b4:	f826 5b02 	strh.w	r5, [r6], #2
 80082b8:	d1ee      	bne.n	8008298 <main+0x1590>
						for (uint16_t i = 1; i <= 154; i++) hT[i] = hT[i + 1];
 80082ba:	499f      	ldr	r1, [pc, #636]	; (8008538 <main+0x1830>)
 80082bc:	f44f 729a 	mov.w	r2, #308	; 0x134
 80082c0:	1e88      	subs	r0, r1, #2
 80082c2:	f004 fb3b 	bl	800c93c <memmove>
						hT[155] = (uint16_t) (temperature * 10);
 80082c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80082ca:	2200      	movs	r2, #0
 80082cc:	4b9b      	ldr	r3, [pc, #620]	; (800853c <main+0x1834>)
 80082ce:	f7fd ff43 	bl	8006158 <__aeabi_dmul>
 80082d2:	f7fe fa19 	bl	8006708 <__aeabi_d2uiz>
 80082d6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80082da:	4d96      	ldr	r5, [pc, #600]	; (8008534 <main+0x182c>)
 80082dc:	f8ab 0396 	strh.w	r0, [fp, #918]	; 0x396
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80082e0:	f935 6b02 	ldrsh.w	r6, [r5], #2
 80082e4:	4620      	mov	r0, r4
 80082e6:	b2f1      	uxtb	r1, r6
 80082e8:	f7fc fb68 	bl	80049bc <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80082ec:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i <= 155; i++) {
 80082ee:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80082f0:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80082f4:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i <= 155; i++) {
 80082f6:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80082f8:	f7fc fb60 	bl	80049bc <AT24XX_Update>
						for (uint16_t i = 0; i <= 155; i++) {
 80082fc:	f5b4 6fa4 	cmp.w	r4, #1312	; 0x520
 8008300:	d1ee      	bne.n	80082e0 <main+0x15d8>
 8008302:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008306:	f640 1708 	movw	r7, #2312	; 0x908
 800830a:	4e8d      	ldr	r6, [pc, #564]	; (8008540 <main+0x1838>)
 800830c:	4620      	mov	r0, r4
 800830e:	f7fc fb47 	bl	80049a0 <AT24XX_Read>
 8008312:	4605      	mov	r5, r0
 8008314:	1c60      	adds	r0, r4, #1
 8008316:	b280      	uxth	r0, r0
 8008318:	f7fc fb42 	bl	80049a0 <AT24XX_Read>
 800831c:	3402      	adds	r4, #2
 800831e:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008320:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i <= 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008324:	42bc      	cmp	r4, r7
 8008326:	f826 5b02 	strh.w	r5, [r6], #2
 800832a:	d1ef      	bne.n	800830c <main+0x1604>
						for (uint16_t i = 1; i <= 154; i++) hH[i] = hH[i + 1];
 800832c:	4985      	ldr	r1, [pc, #532]	; (8008544 <main+0x183c>)
						hH[155] = (uint16_t) (humidity * 10);
 800832e:	4d84      	ldr	r5, [pc, #528]	; (8008540 <main+0x1838>)
						for (uint16_t i = 1; i <= 154; i++) hH[i] = hH[i + 1];
 8008330:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008334:	1e88      	subs	r0, r1, #2
 8008336:	f004 fb01 	bl	800c93c <memmove>
						hH[155] = (uint16_t) (humidity * 10);
 800833a:	e9d5 01ec 	ldrd	r0, r1, [r5, #944]	; 0x3b0
 800833e:	2200      	movs	r2, #0
 8008340:	4b7e      	ldr	r3, [pc, #504]	; (800853c <main+0x1834>)
 8008342:	f7fd ff09 	bl	8006158 <__aeabi_dmul>
 8008346:	f7fe f9df 	bl	8006708 <__aeabi_d2uiz>
 800834a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i <= 155; i++) {
 800834e:	f640 1708 	movw	r7, #2312	; 0x908
						hH[155] = (uint16_t) (humidity * 10);
 8008352:	f8ab 04ce 	strh.w	r0, [fp, #1230]	; 0x4ce
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8008356:	f935 6b02 	ldrsh.w	r6, [r5], #2
 800835a:	4620      	mov	r0, r4
 800835c:	b2f1      	uxtb	r1, r6
 800835e:	f7fc fb2d 	bl	80049bc <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8008362:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i <= 155; i++) {
 8008364:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8008366:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800836a:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i <= 155; i++) {
 800836c:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 800836e:	f7fc fb25 	bl	80049bc <AT24XX_Update>
						for (uint16_t i = 0; i <= 155; i++) {
 8008372:	42bc      	cmp	r4, r7
 8008374:	d1ef      	bne.n	8008356 <main+0x164e>
 8008376:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800837a:	4e73      	ldr	r6, [pc, #460]	; (8008548 <main+0x1840>)
						for (uint16_t i = 0; i <= 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800837c:	4620      	mov	r0, r4
 800837e:	f7fc fb0f 	bl	80049a0 <AT24XX_Read>
 8008382:	4605      	mov	r5, r0
 8008384:	1c60      	adds	r0, r4, #1
 8008386:	b280      	uxth	r0, r0
 8008388:	f7fc fb0a 	bl	80049a0 <AT24XX_Read>
 800838c:	3402      	adds	r4, #2
 800838e:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008390:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i <= 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8008394:	f5b4 6f4f 	cmp.w	r4, #3312	; 0xcf0
 8008398:	f826 5b02 	strh.w	r5, [r6], #2
 800839c:	d1ee      	bne.n	800837c <main+0x1674>
						hP[155] = (uint16_t)pressure;
 800839e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80083a2:	4d69      	ldr	r5, [pc, #420]	; (8008548 <main+0x1840>)
						for (uint16_t i = 1; i <= 154; i++) hP[i] = hP[i + 1];
 80083a4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80083a8:	1d29      	adds	r1, r5, #4
 80083aa:	1e88      	subs	r0, r1, #2
 80083ac:	f004 fac6 	bl	800c93c <memmove>
						hP[155] = (uint16_t)pressure;
 80083b0:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 80083b4:	f8ab 3606 	strh.w	r3, [fp, #1542]	; 0x606
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80083b8:	f935 6b02 	ldrsh.w	r6, [r5], #2
 80083bc:	4620      	mov	r0, r4
 80083be:	b2f1      	uxtb	r1, r6
 80083c0:	f7fc fafc 	bl	80049bc <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80083c4:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i <= 155; i++) {
 80083c6:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80083c8:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80083cc:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i <= 155; i++) {
 80083ce:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80083d0:	f7fc faf4 	bl	80049bc <AT24XX_Update>
						for (uint16_t i = 0; i <= 155; i++) {
 80083d4:	f5b4 6f4f 	cmp.w	r4, #3312	; 0xcf0
 80083d8:	d1ee      	bne.n	80083b8 <main+0x16b0>
						LCD_Rect(2, 190, 157, 128, 1, BLUE);
 80083da:	2002      	movs	r0, #2
 80083dc:	f7fb ff82 	bl	80042e4 <LCD_Rect.constprop.0>
 80083e0:	279e      	movs	r7, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80083e2:	2650      	movs	r6, #80	; 0x50
 80083e4:	4d59      	ldr	r5, [pc, #356]	; (800854c <main+0x1844>)
 80083e6:	f835 3902 	ldrh.w	r3, [r5], #-2
							LCD_Line(3 + i, 191, 3 + i, 318, 1, WHITE);
 80083ea:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80083ec:	3bd2      	subs	r3, #210	; 0xd2
 80083ee:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 80083f2:	fb93 f4f6 	sdiv	r4, r3, r6
 80083f6:	b224      	sxth	r4, r4
							LCD_Line(3 + i, 191, 3 + i, 318, 1, WHITE);
 80083f8:	4638      	mov	r0, r7
 80083fa:	f384 0407 	usat	r4, #7, r4
 80083fe:	f7f9 fe33 	bl	8002068 <LCD_Line.constprop.0>
							LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8008402:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800840a:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 800840e:	4638      	mov	r0, r7
 8008410:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8008414:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8008418:	463a      	mov	r2, r7
						for (uint16_t i = 155; i > 0 ; i--) {
 800841a:	3f01      	subs	r7, #1
							LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800841c:	b289      	uxth	r1, r1
						for (uint16_t i = 155; i > 0 ; i--) {
 800841e:	b2bf      	uxth	r7, r7
							LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8008420:	f7fa fb98 	bl	8002b54 <LCD_Line.constprop.1>
						for (uint16_t i = 155; i > 0 ; i--) {
 8008424:	2f03      	cmp	r7, #3
 8008426:	d1de      	bne.n	80083e6 <main+0x16de>
						LCD_Rect(161, 190, 157, 128, 1, BLUE);
 8008428:	20a1      	movs	r0, #161	; 0xa1
 800842a:	f7fb ff5b 	bl	80042e4 <LCD_Rect.constprop.0>
 800842e:	f240 173d 	movw	r7, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008432:	f44f 7620 	mov.w	r6, #640	; 0x280
 8008436:	4d46      	ldr	r5, [pc, #280]	; (8008550 <main+0x1848>)
 8008438:	f835 3902 	ldrh.w	r3, [r5], #-2
							LCD_Line(162 + i, 191, 162 + i, 318, 1, WHITE);
 800843c:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800843e:	3b64      	subs	r3, #100	; 0x64
 8008440:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8008444:	fb93 f4f6 	sdiv	r4, r3, r6
 8008448:	b224      	sxth	r4, r4
							LCD_Line(162 + i, 191, 162 + i, 318, 1, WHITE);
 800844a:	4638      	mov	r0, r7
 800844c:	f384 0407 	usat	r4, #7, r4
 8008450:	f7f9 fe0a 	bl	8002068 <LCD_Line.constprop.0>
							LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8008454:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8008460:	4638      	mov	r0, r7
 8008462:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8008466:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 800846a:	463a      	mov	r2, r7
						for (uint16_t i = 155; i > 0 ; i--) {
 800846c:	3f01      	subs	r7, #1
							LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800846e:	b289      	uxth	r1, r1
						for (uint16_t i = 155; i > 0 ; i--) {
 8008470:	b2bf      	uxth	r7, r7
							LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8008472:	f7fa fb6f 	bl	8002b54 <LCD_Line.constprop.1>
						for (uint16_t i = 155; i > 0 ; i--) {
 8008476:	2fa2      	cmp	r7, #162	; 0xa2
 8008478:	d1de      	bne.n	8008438 <main+0x1730>
						LCD_Rect(320, 190, 157, 128, 1, BLUE);
 800847a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800847e:	f7fb ff31 	bl	80042e4 <LCD_Rect.constprop.0>
 8008482:	f44f 77ee 	mov.w	r7, #476	; 0x1dc
						for (uint16_t i = 155; i > 0 ; i--) {
 8008486:	f240 1641 	movw	r6, #321	; 0x141
 800848a:	4d32      	ldr	r5, [pc, #200]	; (8008554 <main+0x184c>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800848c:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
 8008490:	f835 3902 	ldrh.w	r3, [r5], #-2
							LCD_Line(321 + i, 191, 321 + i, 318, 1, WHITE);
 8008494:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008496:	4413      	add	r3, r2
 8008498:	ebd3 13c3 	rsbs	r3, r3, r3, lsl #7
 800849c:	bf48      	it	mi
 800849e:	337f      	addmi	r3, #127	; 0x7f
 80084a0:	f343 13cf 	sbfx	r3, r3, #7, #16
 80084a4:	2b7f      	cmp	r3, #127	; 0x7f
 80084a6:	bfa8      	it	ge
 80084a8:	237f      	movge	r3, #127	; 0x7f
 80084aa:	461c      	mov	r4, r3
							LCD_Line(321 + i, 191, 321 + i, 318, 1, WHITE);
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7f9 fddb 	bl	8002068 <LCD_Line.constprop.0>
							LCD_Line(321 + i, 191 + (127 - val), 321 + i, 318, 1, RED/*RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2)))*/);
 80084b2:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80084b6:	463a      	mov	r2, r7
 80084b8:	4638      	mov	r0, r7
 80084ba:	f5c1 719f 	rsb	r1, r1, #318	; 0x13e
						for (uint16_t i = 155; i > 0 ; i--) {
 80084be:	3f01      	subs	r7, #1
							LCD_Line(321 + i, 191 + (127 - val), 321 + i, 318, 1, RED/*RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2)))*/);
 80084c0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80084c4:	b289      	uxth	r1, r1
						for (uint16_t i = 155; i > 0 ; i--) {
 80084c6:	b2bf      	uxth	r7, r7
							LCD_Line(321 + i, 191 + (127 - val), 321 + i, 318, 1, RED/*RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2)))*/);
 80084c8:	f7fa fb44 	bl	8002b54 <LCD_Line.constprop.1>
						for (uint16_t i = 155; i > 0 ; i--) {
 80084cc:	42b7      	cmp	r7, r6
 80084ce:	d1dd      	bne.n	800848c <main+0x1784>
						viewGraphs = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f88b 376a 	strb.w	r3, [fp, #1898]	; 0x76a
 80084d6:	e6c4      	b.n	8008262 <main+0x155a>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <main+0x1850>)
 80084de:	f7fe f8cb 	bl	8006678 <__aeabi_dcmpgt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f040 8300 	bne.w	8008ae8 <main+0x1de0>
						else if (temperature < 10 && temperature > 0) {
 80084e8:	2200      	movs	r2, #0
 80084ea:	2300      	movs	r3, #0
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7fe f8c2 	bl	8006678 <__aeabi_dcmpgt>
 80084f4:	b980      	cbnz	r0, 8008518 <main+0x1810>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80084f6:	4629      	mov	r1, r5
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7fe f8dd 	bl	80066b8 <__aeabi_d2iz>
 80084fe:	4602      	mov	r2, r0
 8008500:	4916      	ldr	r1, [pc, #88]	; (800855c <main+0x1854>)
 8008502:	a815      	add	r0, sp, #84	; 0x54
 8008504:	b252      	sxtb	r2, r2
 8008506:	f001 f9d9 	bl	80098bc <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800850a:	21bb      	movs	r1, #187	; 0xbb
 800850c:	2001      	movs	r0, #1
 800850e:	4b14      	ldr	r3, [pc, #80]	; (8008560 <main+0x1858>)
 8008510:	aa15      	add	r2, sp, #84	; 0x54
 8008512:	f7fd f863 	bl	80055dc <LCD_Font.constprop.2>
 8008516:	e64c      	b.n	80081b2 <main+0x14aa>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	4911      	ldr	r1, [pc, #68]	; (8008564 <main+0x185c>)
 800851e:	a815      	add	r0, sp, #84	; 0x54
 8008520:	f001 f9cc 	bl	80098bc <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8008524:	21bb      	movs	r1, #187	; 0xbb
 8008526:	201b      	movs	r0, #27
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <main+0x1858>)
 800852a:	aa15      	add	r2, sp, #84	; 0x54
 800852c:	f7fd f856 	bl	80055dc <LCD_Font.constprop.2>
 8008530:	e63f      	b.n	80081b2 <main+0x14aa>
 8008532:	bf00      	nop
 8008534:	20000460 	.word	0x20000460
 8008538:	20000464 	.word	0x20000464
 800853c:	40240000 	.word	0x40240000
 8008540:	20000598 	.word	0x20000598
 8008544:	2000059c 	.word	0x2000059c
 8008548:	200006d0 	.word	0x200006d0
 800854c:	20000596 	.word	0x20000596
 8008550:	200006ce 	.word	0x200006ce
 8008554:	20000806 	.word	0x20000806
 8008558:	c0240000 	.word	0xc0240000
 800855c:	0801ed88 	.word	0x0801ed88
 8008560:	00ffa500 	.word	0x00ffa500
 8008564:	0801ed80 	.word	0x0801ed80
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 8008568:	f7fc fe46 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 800856c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    return ((val / 16 * 10) + (val % 16));
 8008570:	091a      	lsrs	r2, r3, #4
 8008572:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 800857e:	f88b 3732 	strb.w	r3, [fp, #1842]	; 0x732
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 8008582:	f7fc fe39 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8008586:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
    return ((val / 16 * 10) + (val % 16));
 800858a:	091a      	lsrs	r2, r3, #4
 800858c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 8008598:	f88b 3733 	strb.w	r3, [fp, #1843]	; 0x733
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 800859c:	f7fc fe2c 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 80085a0:	f89b 30a5 	ldrb.w	r3, [fp, #165]	; 0xa5
    return ((val / 16 * 10) + (val % 16));
 80085a4:	091a      	lsrs	r2, r3, #4
 80085a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 80085b2:	f88b 3734 	strb.w	r3, [fp, #1844]	; 0x734
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 80085b6:	f7fc fe1f 	bl	80051f8 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 80085ba:	f89b 30a6 	ldrb.w	r3, [fp, #166]	; 0xa6
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80085be:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 80085c0:	0918      	lsrs	r0, r3, #4
 80085c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80085ce:	499e      	ldr	r1, [pc, #632]	; (8008848 <main+0x1b40>)
 80085d0:	a81c      	add	r0, sp, #112	; 0x70
					rtcYear = DS3231_getYear();
 80085d2:	f88b 3735 	strb.w	r3, [fp, #1845]	; 0x735
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80085d6:	f001 f971 	bl	80098bc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80085da:	2200      	movs	r2, #0
 80085dc:	a91c      	add	r1, sp, #112	; 0x70
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fc ffb2 	bl	8005548 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 80085e4:	f89b 2731 	ldrb.w	r2, [fp, #1841]	; 0x731
 80085e8:	4997      	ldr	r1, [pc, #604]	; (8008848 <main+0x1b40>)
 80085ea:	a81c      	add	r0, sp, #112	; 0x70
 80085ec:	f001 f966 	bl	80098bc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80085f0:	4a96      	ldr	r2, [pc, #600]	; (800884c <main+0x1b44>)
 80085f2:	2000      	movs	r0, #0
 80085f4:	a91c      	add	r1, sp, #112	; 0x70
 80085f6:	f7fc ffa7 	bl	8005548 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 80085fa:	f89b 2736 	ldrb.w	r2, [fp, #1846]	; 0x736
 80085fe:	f89b 3732 	ldrb.w	r3, [fp, #1842]	; 0x732
 8008602:	429a      	cmp	r2, r3
 8008604:	f000 808e 	beq.w	8008724 <main+0x1a1c>
						sprintf(clockPrint, "%02d", rtcDateLast);
 8008608:	f89b 2737 	ldrb.w	r2, [fp, #1847]	; 0x737
 800860c:	498e      	ldr	r1, [pc, #568]	; (8008848 <main+0x1b40>)
 800860e:	a81c      	add	r0, sp, #112	; 0x70
 8008610:	f001 f954 	bl	80098bc <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8008614:	2300      	movs	r3, #0
 8008616:	2128      	movs	r1, #40	; 0x28
 8008618:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800861c:	aa1c      	add	r2, sp, #112	; 0x70
 800861e:	f7fc ffdd 	bl	80055dc <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d", rtcDate);
 8008622:	f89b 2733 	ldrb.w	r2, [fp, #1843]	; 0x733
 8008626:	4988      	ldr	r1, [pc, #544]	; (8008848 <main+0x1b40>)
 8008628:	a81c      	add	r0, sp, #112	; 0x70
 800862a:	f001 f947 	bl	80098bc <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 800862e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008632:	2128      	movs	r1, #40	; 0x28
 8008634:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008638:	aa1c      	add	r2, sp, #112	; 0x70
 800863a:	f7fc ffcf 	bl	80055dc <LCD_Font.constprop.2>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 800863e:	f89b 3733 	ldrb.w	r3, [fp, #1843]	; 0x733
 8008642:	2b09      	cmp	r3, #9
 8008644:	f240 8083 	bls.w	800874e <main+0x1a46>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8008648:	250c      	movs	r5, #12
 800864a:	f89b 6734 	ldrb.w	r6, [fp, #1844]	; 0x734
 800864e:	2300      	movs	r3, #0
 8008650:	f106 020a 	add.w	r2, r6, #10
 8008654:	fbb2 f7f5 	udiv	r7, r2, r5
 8008658:	fb05 2217 	mls	r2, r5, r7, r2
 800865c:	4f7c      	ldr	r7, [pc, #496]	; (8008850 <main+0x1b48>)
 800865e:	215a      	movs	r1, #90	; 0x5a
 8008660:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008664:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8008668:	f8d2 25f8 	ldr.w	r2, [r2, #1528]	; 0x5f8
 800866c:	f7fc ffb6 	bl	80055dc <LCD_Font.constprop.2>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008670:	f106 030b 	add.w	r3, r6, #11
 8008674:	fbb3 f2f5 	udiv	r2, r3, r5
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8008678:	2407      	movs	r4, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800867a:	fb05 3312 	mls	r3, r5, r2, r3
 800867e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008682:	f8d3 25f8 	ldr.w	r2, [r3, #1528]	; 0x5f8
 8008686:	215a      	movs	r1, #90	; 0x5a
 8008688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800868c:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8008690:	f7fc ffa4 	bl	80055dc <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 8008694:	f89b 3739 	ldrb.w	r3, [fp, #1849]	; 0x739
 8008698:	f89b 2737 	ldrb.w	r2, [fp, #1847]	; 0x737
 800869c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80086a0:	496c      	ldr	r1, [pc, #432]	; (8008854 <main+0x1b4c>)
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	a81c      	add	r0, sp, #112	; 0x70
 80086a6:	f89b 3738 	ldrb.w	r3, [fp, #1848]	; 0x738
 80086aa:	f001 f907 	bl	80098bc <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80086ae:	2200      	movs	r2, #0
 80086b0:	20b4      	movs	r0, #180	; 0xb4
 80086b2:	a91c      	add	r1, sp, #112	; 0x70
 80086b4:	f7fc fefe 	bl	80054b4 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 80086b8:	f89b 3735 	ldrb.w	r3, [fp, #1845]	; 0x735
 80086bc:	f89b 2733 	ldrb.w	r2, [fp, #1843]	; 0x733
 80086c0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80086c4:	4963      	ldr	r1, [pc, #396]	; (8008854 <main+0x1b4c>)
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	a81c      	add	r0, sp, #112	; 0x70
 80086ca:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
 80086ce:	f001 f8f5 	bl	80098bc <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 80086d2:	22ff      	movs	r2, #255	; 0xff
 80086d4:	20b4      	movs	r0, #180	; 0xb4
 80086d6:	a91c      	add	r1, sp, #112	; 0x70
 80086d8:	f7fc feec 	bl	80054b4 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80086dc:	f89b 5732 	ldrb.w	r5, [fp, #1842]	; 0x732
 80086e0:	2200      	movs	r2, #0
 80086e2:	1d6b      	adds	r3, r5, #5
 80086e4:	fbb3 f1f4 	udiv	r1, r3, r4
 80086e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80086ec:	1a5b      	subs	r3, r3, r1
 80086ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80086f2:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 80086f6:	2014      	movs	r0, #20
 80086f8:	f7fc fedc 	bl	80054b4 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80086fc:	1da9      	adds	r1, r5, #6
 80086fe:	fbb1 f3f4 	udiv	r3, r1, r4
 8008702:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008706:	1acb      	subs	r3, r1, r3
 8008708:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800870c:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	2014      	movs	r0, #20
 8008714:	f7fc fece 	bl	80054b4 <LCD_Font.constprop.0>
						rtcDateLast = rtcDate;
 8008718:	f89b 3733 	ldrb.w	r3, [fp, #1843]	; 0x733
						rtcDayLast = rtcDay;
 800871c:	f88b 5736 	strb.w	r5, [fp, #1846]	; 0x736
						rtcDateLast = rtcDate;
 8008720:	f88b 3737 	strb.w	r3, [fp, #1847]	; 0x737
	b_ = radius;
 8008724:	2300      	movs	r3, #0
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8008726:	4a4c      	ldr	r2, [pc, #304]	; (8008858 <main+0x1b50>)
 8008728:	6353      	str	r3, [r2, #52]	; 0x34
 800872a:	3301      	adds	r3, #1
 800872c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008730:	d1fa      	bne.n	8008728 <main+0x1a20>
					rtcMonthLast = rtcMonth;
 8008732:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
					rtcHrsLast = rtcHrs;
 8008736:	4a49      	ldr	r2, [pc, #292]	; (800885c <main+0x1b54>)
					rtcMonthLast = rtcMonth;
 8008738:	f88b 3738 	strb.w	r3, [fp, #1848]	; 0x738
					rtcYearLast = rtcYear;
 800873c:	f89b 3735 	ldrb.w	r3, [fp, #1845]	; 0x735
 8008740:	f88b 3739 	strb.w	r3, [fp, #1849]	; 0x739
					rtcHrsLast = rtcHrs;
 8008744:	f89b 3731 	ldrb.w	r3, [fp, #1841]	; 0x731
 8008748:	7293      	strb	r3, [r2, #10]
 800874a:	f7ff bb55 	b.w	8007df8 <main+0x10f0>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 800874e:	2300      	movs	r3, #0
 8008750:	2128      	movs	r1, #40	; 0x28
 8008752:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008756:	4a42      	ldr	r2, [pc, #264]	; (8008860 <main+0x1b58>)
 8008758:	f7fc ff40 	bl	80055dc <LCD_Font.constprop.2>
 800875c:	e774      	b.n	8008648 <main+0x1940>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800875e:	6959      	ldr	r1, [r3, #20]
 8008760:	f011 0104 	ands.w	r1, r1, #4
 8008764:	d14c      	bne.n	8008800 <main+0x1af8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800876c:	d134      	bne.n	80087d8 <main+0x1ad0>
 800876e:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	eba1 0108 	sub.w	r1, r1, r8
 8008776:	2964      	cmp	r1, #100	; 0x64
 8008778:	d9f1      	bls.n	800875e <main+0x1a56>
 800877a:	f7ff bacc 	b.w	8007d16 <main+0x100e>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800877e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
      hi2c->XferSize--;
 8008782:	f100 3cff 	add.w	ip, r0, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008786:	4611      	mov	r1, r2
 8008788:	f811 eb01 	ldrb.w	lr, [r1], #1
      hi2c->XferSize--;
 800878c:	fa1f fc8c 	uxth.w	ip, ip
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008790:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 8008794:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8008798:	f8bb 102e 	ldrh.w	r1, [fp, #46]	; 0x2e
      hi2c->XferSize--;
 800879c:	f8ab c02c 	strh.w	ip, [fp, #44]	; 0x2c
      hi2c->XferCount--;
 80087a0:	3901      	subs	r1, #1
 80087a2:	b289      	uxth	r1, r1
 80087a4:	f8ab 102e 	strh.w	r1, [fp, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087a8:	6959      	ldr	r1, [r3, #20]
 80087aa:	0749      	lsls	r1, r1, #29
 80087ac:	f57f aa9e 	bpl.w	8007cec <main+0xfe4>
 80087b0:	f1bc 0f00 	cmp.w	ip, #0
 80087b4:	f43f aa9a 	beq.w	8007cec <main+0xfe4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087b8:	7851      	ldrb	r1, [r2, #1]
        hi2c->pBuffPtr++;
 80087ba:	3202      	adds	r2, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087bc:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 80087be:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
        hi2c->XferCount--;
 80087c2:	f8bb 202e 	ldrh.w	r2, [fp, #46]	; 0x2e
        hi2c->XferSize--;
 80087c6:	3802      	subs	r0, #2
        hi2c->XferCount--;
 80087c8:	3a01      	subs	r2, #1
 80087ca:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80087cc:	f8ab 002c 	strh.w	r0, [fp, #44]	; 0x2c
        hi2c->XferCount--;
 80087d0:	f8ab 202e 	strh.w	r2, [fp, #46]	; 0x2e
 80087d4:	f7ff ba8a 	b.w	8007cec <main+0xfe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087dc:	615a      	str	r2, [r3, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 80087de:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80087e0:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80087e4:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e8:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087ec:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80087f0:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087f4:	f042 0204 	orr.w	r2, r2, #4
 80087f8:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 80087fc:	f7ff ba99 	b.w	8007d32 <main+0x102a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008800:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008808:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800880a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800880e:	f88b 7042 	strb.w	r7, [fp, #66]	; 0x42
 8008812:	f8db 2000 	ldr.w	r2, [fp]
    __HAL_UNLOCK(hi2c);
 8008816:	f88b 7040 	strb.w	r7, [fp, #64]	; 0x40
 800881a:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	2b05      	cmp	r3, #5
 8008822:	d9fa      	bls.n	800881a <main+0x1b12>
 8008824:	f7ff ba8d 	b.w	8007d42 <main+0x103a>
        hi2c->State             = HAL_I2C_STATE_READY;
 8008828:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800882a:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800882e:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008832:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8008836:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800883a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800883e:	4313      	orrs	r3, r2
 8008840:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
 8008844:	f7ff ba7d 	b.w	8007d42 <main+0x103a>
 8008848:	0801ed64 	.word	0x0801ed64
 800884c:	00ffa500 	.word	0x00ffa500
 8008850:	0800d560 	.word	0x0800d560
 8008854:	0801ed70 	.word	0x0801ed70
 8008858:	40012c00 	.word	0x40012c00
 800885c:	20000000 	.word	0x20000000
 8008860:	0801ed6c 	.word	0x0801ed6c
		val[0] = rx_buffer[2];
 8008864:	f8bb 3632 	ldrh.w	r3, [fp, #1586]	; 0x632
		DS3231_setHrs(atoi(val));
 8008868:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[2];
 800886a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setHrs(atoi(val));
 800886e:	f000 f97c 	bl	8008b6a <atoi>
    return ((val / 10 * 16) + (val % 10));
 8008872:	240a      	movs	r4, #10
 8008874:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 8008876:	f7fc fcbf 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800887a:	fbb5 f6f4 	udiv	r6, r5, r4
 800887e:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008882:	2211      	movs	r2, #17
 8008884:	499c      	ldr	r1, [pc, #624]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 8008886:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800888a:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 800888c:	f88b 30b7 	strb.w	r3, [fp, #183]	; 0xb7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008890:	f7fc fb7e 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[4];
 8008894:	f8bb 3634 	ldrh.w	r3, [fp, #1588]	; 0x634
		DS3231_setMin(atoi(val));
 8008898:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[4];
 800889a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMin(atoi(val));
 800889e:	f000 f964 	bl	8008b6a <atoi>
 80088a2:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80088a4:	f7fc fca8 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088a8:	fbb5 f6f4 	udiv	r6, r5, r4
 80088ac:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088b0:	2211      	movs	r2, #17
 80088b2:	4991      	ldr	r1, [pc, #580]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 80088b4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088b8:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 80088ba:	f88b 30b6 	strb.w	r3, [fp, #182]	; 0xb6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088be:	f7fc fb67 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[6];
 80088c2:	f8bb 3636 	ldrh.w	r3, [fp, #1590]	; 0x636
		DS3231_setSec(atoi(val));
 80088c6:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[6];
 80088c8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setSec(atoi(val));
 80088cc:	f000 f94d 	bl	8008b6a <atoi>
 80088d0:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80088d2:	f7fc fc91 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088d6:	fbb5 f6f4 	udiv	r6, r5, r4
 80088da:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088de:	2211      	movs	r2, #17
 80088e0:	4985      	ldr	r1, [pc, #532]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 80088e2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088e6:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 80088e8:	f88b 30b5 	strb.w	r3, [fp, #181]	; 0xb5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088ec:	f7fc fb50 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[8];
 80088f0:	f8bb 3638 	ldrh.w	r3, [fp, #1592]	; 0x638
		DS3231_setDate(atoi(val));
 80088f4:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[8];
 80088f6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setDate(atoi(val));
 80088fa:	f000 f936 	bl	8008b6a <atoi>
 80088fe:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8008900:	f7fc fc7a 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008904:	fbb5 f6f4 	udiv	r6, r5, r4
 8008908:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800890c:	2211      	movs	r2, #17
 800890e:	497a      	ldr	r1, [pc, #488]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 8008910:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008914:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8008916:	f88b 30b9 	strb.w	r3, [fp, #185]	; 0xb9
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800891a:	f7fc fb39 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[10];
 800891e:	f8bb 363a 	ldrh.w	r3, [fp, #1594]	; 0x63a
		DS3231_setMonth(atoi(val));
 8008922:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[10];
 8008924:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMonth(atoi(val));
 8008928:	f000 f91f 	bl	8008b6a <atoi>
 800892c:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 800892e:	f7fc fc63 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008932:	fbb5 f6f4 	udiv	r6, r5, r4
 8008936:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800893a:	2211      	movs	r2, #17
 800893c:	496e      	ldr	r1, [pc, #440]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 800893e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008942:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8008944:	f88b 30ba 	strb.w	r3, [fp, #186]	; 0xba
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008948:	f7fc fb22 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[12];
 800894c:	f8bb 363c 	ldrh.w	r3, [fp, #1596]	; 0x63c
		DS3231_setYear(atoi(val));
 8008950:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[12];
 8008952:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setYear(atoi(val));
 8008956:	f000 f908 	bl	8008b6a <atoi>
 800895a:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 800895c:	f7fc fc4c 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008960:	fbb5 f6f4 	udiv	r6, r5, r4
 8008964:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008968:	2211      	movs	r2, #17
 800896a:	4963      	ldr	r1, [pc, #396]	; (8008af8 <main+0x1df0>)
    return ((val / 10 * 16) + (val % 10));
 800896c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008970:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 8008972:	f88b 30bb 	strb.w	r3, [fp, #187]	; 0xbb
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008976:	f7fc fb0b 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[1] = rx_buffer[14];
 800897a:	f89b 363e 	ldrb.w	r3, [fp, #1598]	; 0x63e
		DS3231_setDay(atoi(val));
 800897e:	a81c      	add	r0, sp, #112	; 0x70
		val[1] = rx_buffer[14];
 8008980:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
		DS3231_setDay(atoi(val));
 8008984:	f000 f8f1 	bl	8008b6a <atoi>
 8008988:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 800898a:	f7fc fc35 	bl	80051f8 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800898e:	fbb5 f2f4 	udiv	r2, r5, r4
 8008992:	fb04 5312 	mls	r3, r4, r2, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008996:	20d0      	movs	r0, #208	; 0xd0
    return ((val / 10 * 16) + (val % 10));
 8008998:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800899c:	4956      	ldr	r1, [pc, #344]	; (8008af8 <main+0x1df0>)
 800899e:	2211      	movs	r2, #17
    rtcBufferSet[4] = decToBcd(value);
 80089a0:	f88b 30b8 	strb.w	r3, [fp, #184]	; 0xb8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089a4:	f7fc faf4 	bl	8004f90 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 80089a8:	f7ff b9e9 	b.w	8007d7e <main+0x1076>
					if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80089ac:	4b53      	ldr	r3, [pc, #332]	; (8008afc <main+0x1df4>)
 80089ae:	4638      	mov	r0, r7
 80089b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089b4:	4641      	mov	r1, r8
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	f7fd fe35 	bl	8006628 <__aeabi_dcmpeq>
 80089be:	2800      	cmp	r0, #0
 80089c0:	f47f ac19 	bne.w	80081f6 <main+0x14ee>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80089c4:	4622      	mov	r2, r4
 80089c6:	462b      	mov	r3, r5
 80089c8:	494d      	ldr	r1, [pc, #308]	; (8008b00 <main+0x1df8>)
 80089ca:	a815      	add	r0, sp, #84	; 0x54
 80089cc:	f000 ff76 	bl	80098bc <siprintf>
						if (humidityLast >= 10)
 80089d0:	494a      	ldr	r1, [pc, #296]	; (8008afc <main+0x1df4>)
 80089d2:	4b4c      	ldr	r3, [pc, #304]	; (8008b04 <main+0x1dfc>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089da:	f7fd fe43 	bl	8006664 <__aeabi_dcmpge>
 80089de:	4603      	mov	r3, r0
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d043      	beq.n	8008a6c <main+0x1d64>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80089e4:	2300      	movs	r3, #0
 80089e6:	21bb      	movs	r1, #187	; 0xbb
 80089e8:	20a0      	movs	r0, #160	; 0xa0
 80089ea:	aa15      	add	r2, sp, #84	; 0x54
 80089ec:	f7fc fdf6 	bl	80055dc <LCD_Font.constprop.2>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 80089f0:	4b45      	ldr	r3, [pc, #276]	; (8008b08 <main+0x1e00>)
 80089f2:	4943      	ldr	r1, [pc, #268]	; (8008b00 <main+0x1df8>)
 80089f4:	461c      	mov	r4, r3
 80089f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089fa:	a815      	add	r0, sp, #84	; 0x54
 80089fc:	f000 ff5e 	bl	80098bc <siprintf>
						if (humidity >= 10)
 8008a00:	f1a4 0508 	sub.w	r5, r4, #8
 8008a04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4b3d      	ldr	r3, [pc, #244]	; (8008b04 <main+0x1dfc>)
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7fd fe28 	bl	8006664 <__aeabi_dcmpge>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a18:	21bb      	movs	r1, #187	; 0xbb
 8008a1a:	aa15      	add	r2, sp, #84	; 0x54
						if (humidity >= 10)
 8008a1c:	b310      	cbz	r0, 8008a64 <main+0x1d5c>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008a1e:	20a0      	movs	r0, #160	; 0xa0
 8008a20:	f7fc fddc 	bl	80055dc <LCD_Font.constprop.2>
						humidityLast = humidity;
 8008a24:	4b35      	ldr	r3, [pc, #212]	; (8008afc <main+0x1df4>)
 8008a26:	e9c3 4500 	strd	r4, r5, [r3]
 8008a2a:	f7ff bbe4 	b.w	80081f6 <main+0x14ee>
    __HAL_TIM_MOE_ENABLE(htim);
 8008a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3c:	2a06      	cmp	r2, #6
 8008a3e:	f47e af6d 	bne.w	800791c <main+0xc14>
 8008a42:	f7fe bf6f 	b.w	8007924 <main+0xc1c>
    __HAL_UNLOCK(hdma); 
 8008a46:	f883 1020 	strb.w	r1, [r3, #32]
 8008a4a:	f7ff b80d 	b.w	8007a68 <main+0xd60>
				LCD_Circle(172, 75, 7, 1, 1, ORANGE);
 8008a4e:	4a2f      	ldr	r2, [pc, #188]	; (8008b0c <main+0x1e04>)
 8008a50:	2101      	movs	r1, #1
 8008a52:	2007      	movs	r0, #7
 8008a54:	f7f8 fde4 	bl	8001620 <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008a5c:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <main+0x1e08>)
 8008a5e:	611a      	str	r2, [r3, #16]
 8008a60:	f7ff b99c 	b.w	8007d9c <main+0x1094>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008a64:	20ba      	movs	r0, #186	; 0xba
 8008a66:	f7fc fdb9 	bl	80055dc <LCD_Font.constprop.2>
 8008a6a:	e7db      	b.n	8008a24 <main+0x1d1c>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8008a6c:	21bb      	movs	r1, #187	; 0xbb
 8008a6e:	20ba      	movs	r0, #186	; 0xba
 8008a70:	aa15      	add	r2, sp, #84	; 0x54
 8008a72:	f7fc fdb3 	bl	80055dc <LCD_Font.constprop.2>
 8008a76:	e7bb      	b.n	80089f0 <main+0x1ce8>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4b25      	ldr	r3, [pc, #148]	; (8008b14 <main+0x1e0c>)
 8008a7e:	f7fd fdfb 	bl	8006678 <__aeabi_dcmpgt>
 8008a82:	b9e0      	cbnz	r0, 8008abe <main+0x1db6>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f7fd fdf4 	bl	8006678 <__aeabi_dcmpgt>
 8008a90:	b9e0      	cbnz	r0, 8008acc <main+0x1dc4>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8008a92:	4629      	mov	r1, r5
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7fd fe0f 	bl	80066b8 <__aeabi_d2iz>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	491e      	ldr	r1, [pc, #120]	; (8008b18 <main+0x1e10>)
 8008a9e:	a815      	add	r0, sp, #84	; 0x54
 8008aa0:	b252      	sxtb	r2, r2
 8008aa2:	f000 ff0b 	bl	80098bc <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	21bb      	movs	r1, #187	; 0xbb
 8008aaa:	2001      	movs	r0, #1
 8008aac:	aa15      	add	r2, sp, #84	; 0x54
 8008aae:	f7fc fd95 	bl	80055dc <LCD_Font.constprop.2>
 8008ab2:	f7ff bb58 	b.w	8008166 <main+0x145e>
				pressure = (uint16_t)BME280_getPressure();
 8008ab6:	f8ab 2750 	strh.w	r2, [fp, #1872]	; 0x750
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008aba:	f7ff bbd2 	b.w	8008262 <main+0x155a>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8008abe:	4622      	mov	r2, r4
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	4916      	ldr	r1, [pc, #88]	; (8008b1c <main+0x1e14>)
 8008ac4:	a815      	add	r0, sp, #84	; 0x54
 8008ac6:	f000 fef9 	bl	80098bc <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008aca:	e7ec      	b.n	8008aa6 <main+0x1d9e>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	4912      	ldr	r1, [pc, #72]	; (8008b1c <main+0x1e14>)
 8008ad2:	a815      	add	r0, sp, #84	; 0x54
 8008ad4:	f000 fef2 	bl	80098bc <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	21bb      	movs	r1, #187	; 0xbb
 8008adc:	201b      	movs	r0, #27
 8008ade:	aa15      	add	r2, sp, #84	; 0x54
 8008ae0:	f7fc fd7c 	bl	80055dc <LCD_Font.constprop.2>
 8008ae4:	f7ff bb3f 	b.w	8008166 <main+0x145e>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8008ae8:	4622      	mov	r2, r4
 8008aea:	462b      	mov	r3, r5
 8008aec:	490b      	ldr	r1, [pc, #44]	; (8008b1c <main+0x1e14>)
 8008aee:	a815      	add	r0, sp, #84	; 0x54
 8008af0:	f000 fee4 	bl	80098bc <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8008af4:	e509      	b.n	800850a <main+0x1802>
 8008af6:	bf00      	nop
 8008af8:	200002b4 	.word	0x200002b4
 8008afc:	20000960 	.word	0x20000960
 8008b00:	0801ed90 	.word	0x0801ed90
 8008b04:	40240000 	.word	0x40240000
 8008b08:	20000950 	.word	0x20000950
 8008b0c:	00ffa500 	.word	0x00ffa500
 8008b10:	40011000 	.word	0x40011000
 8008b14:	c0240000 	.word	0xc0240000
 8008b18:	0801ed88 	.word	0x0801ed88
 8008b1c:	0801ed80 	.word	0x0801ed80

08008b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b20:	480c      	ldr	r0, [pc, #48]	; (8008b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b22:	490d      	ldr	r1, [pc, #52]	; (8008b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b24:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b28:	e002      	b.n	8008b30 <LoopCopyDataInit>

08008b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b2e:	3304      	adds	r3, #4

08008b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b34:	d3f9      	bcc.n	8008b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b38:	4c0a      	ldr	r4, [pc, #40]	; (8008b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b3c:	e001      	b.n	8008b42 <LoopFillZerobss>

08008b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b40:	3204      	adds	r2, #4

08008b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b44:	d3fb      	bcc.n	8008b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b46:	f7fd f941 	bl	8005dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b4a:	f000 f819 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008b4e:	f7fe f8db 	bl	8006d08 <main>
  bx lr
 8008b52:	4770      	bx	lr
  ldr r0, =_sdata
 8008b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b58:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8008b5c:	0801f344 	.word	0x0801f344
  ldr r2, =_sbss
 8008b60:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008b64:	20000980 	.word	0x20000980

08008b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b68:	e7fe      	b.n	8008b68 <ADC1_2_IRQHandler>

08008b6a <atoi>:
 8008b6a:	220a      	movs	r2, #10
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	f001 bd53 	b.w	800a618 <strtol>
	...

08008b74 <__errno>:
 8008b74:	4b01      	ldr	r3, [pc, #4]	; (8008b7c <__errno+0x8>)
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	2000000c 	.word	0x2000000c

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	2600      	movs	r6, #0
 8008b84:	4d0c      	ldr	r5, [pc, #48]	; (8008bb8 <__libc_init_array+0x38>)
 8008b86:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b88:	1b64      	subs	r4, r4, r5
 8008b8a:	10a4      	asrs	r4, r4, #2
 8008b8c:	42a6      	cmp	r6, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	f004 fcda 	bl	800d548 <_init>
 8008b94:	2600      	movs	r6, #0
 8008b96:	4d0a      	ldr	r5, [pc, #40]	; (8008bc0 <__libc_init_array+0x40>)
 8008b98:	4c0a      	ldr	r4, [pc, #40]	; (8008bc4 <__libc_init_array+0x44>)
 8008b9a:	1b64      	subs	r4, r4, r5
 8008b9c:	10a4      	asrs	r4, r4, #2
 8008b9e:	42a6      	cmp	r6, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba8:	4798      	blx	r3
 8008baa:	3601      	adds	r6, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb2:	4798      	blx	r3
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	0801f33c 	.word	0x0801f33c
 8008bbc:	0801f33c 	.word	0x0801f33c
 8008bc0:	0801f33c 	.word	0x0801f33c
 8008bc4:	0801f340 	.word	0x0801f340

08008bc8 <memset>:
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4402      	add	r2, r0
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d100      	bne.n	8008bd2 <memset+0xa>
 8008bd0:	4770      	bx	lr
 8008bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd6:	e7f9      	b.n	8008bcc <memset+0x4>

08008bd8 <__cvt>:
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bde:	461f      	mov	r7, r3
 8008be0:	bfbb      	ittet	lt
 8008be2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008be6:	461f      	movlt	r7, r3
 8008be8:	2300      	movge	r3, #0
 8008bea:	232d      	movlt	r3, #45	; 0x2d
 8008bec:	b088      	sub	sp, #32
 8008bee:	4614      	mov	r4, r2
 8008bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008bf4:	7013      	strb	r3, [r2, #0]
 8008bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bf8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008bfc:	f023 0820 	bic.w	r8, r3, #32
 8008c00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c04:	d005      	beq.n	8008c12 <__cvt+0x3a>
 8008c06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c0a:	d100      	bne.n	8008c0e <__cvt+0x36>
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e000      	b.n	8008c14 <__cvt+0x3c>
 8008c12:	2303      	movs	r3, #3
 8008c14:	aa07      	add	r2, sp, #28
 8008c16:	9204      	str	r2, [sp, #16]
 8008c18:	aa06      	add	r2, sp, #24
 8008c1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c1e:	e9cd 3500 	strd	r3, r5, [sp]
 8008c22:	4622      	mov	r2, r4
 8008c24:	463b      	mov	r3, r7
 8008c26:	f001 fd8f 	bl	800a748 <_dtoa_r>
 8008c2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c2e:	4606      	mov	r6, r0
 8008c30:	d102      	bne.n	8008c38 <__cvt+0x60>
 8008c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c34:	07db      	lsls	r3, r3, #31
 8008c36:	d522      	bpl.n	8008c7e <__cvt+0xa6>
 8008c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c3c:	eb06 0905 	add.w	r9, r6, r5
 8008c40:	d110      	bne.n	8008c64 <__cvt+0x8c>
 8008c42:	7833      	ldrb	r3, [r6, #0]
 8008c44:	2b30      	cmp	r3, #48	; 0x30
 8008c46:	d10a      	bne.n	8008c5e <__cvt+0x86>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7fd fcea 	bl	8006628 <__aeabi_dcmpeq>
 8008c54:	b918      	cbnz	r0, 8008c5e <__cvt+0x86>
 8008c56:	f1c5 0501 	rsb	r5, r5, #1
 8008c5a:	f8ca 5000 	str.w	r5, [sl]
 8008c5e:	f8da 3000 	ldr.w	r3, [sl]
 8008c62:	4499      	add	r9, r3
 8008c64:	2200      	movs	r2, #0
 8008c66:	2300      	movs	r3, #0
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7fd fcdc 	bl	8006628 <__aeabi_dcmpeq>
 8008c70:	b108      	cbz	r0, 8008c76 <__cvt+0x9e>
 8008c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c76:	2230      	movs	r2, #48	; 0x30
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	454b      	cmp	r3, r9
 8008c7c:	d307      	bcc.n	8008c8e <__cvt+0xb6>
 8008c7e:	4630      	mov	r0, r6
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	b008      	add	sp, #32
 8008c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8e:	1c59      	adds	r1, r3, #1
 8008c90:	9107      	str	r1, [sp, #28]
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e7f0      	b.n	8008c78 <__cvt+0xa0>

08008c96 <__exponent>:
 8008c96:	4603      	mov	r3, r0
 8008c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c9a:	2900      	cmp	r1, #0
 8008c9c:	f803 2b02 	strb.w	r2, [r3], #2
 8008ca0:	bfb6      	itet	lt
 8008ca2:	222d      	movlt	r2, #45	; 0x2d
 8008ca4:	222b      	movge	r2, #43	; 0x2b
 8008ca6:	4249      	neglt	r1, r1
 8008ca8:	2909      	cmp	r1, #9
 8008caa:	7042      	strb	r2, [r0, #1]
 8008cac:	dd2b      	ble.n	8008d06 <__exponent+0x70>
 8008cae:	f10d 0407 	add.w	r4, sp, #7
 8008cb2:	46a4      	mov	ip, r4
 8008cb4:	270a      	movs	r7, #10
 8008cb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008cba:	460a      	mov	r2, r1
 8008cbc:	46a6      	mov	lr, r4
 8008cbe:	fb07 1516 	mls	r5, r7, r6, r1
 8008cc2:	2a63      	cmp	r2, #99	; 0x63
 8008cc4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008cc8:	4631      	mov	r1, r6
 8008cca:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cd2:	dcf0      	bgt.n	8008cb6 <__exponent+0x20>
 8008cd4:	3130      	adds	r1, #48	; 0x30
 8008cd6:	f1ae 0502 	sub.w	r5, lr, #2
 8008cda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cde:	4629      	mov	r1, r5
 8008ce0:	1c44      	adds	r4, r0, #1
 8008ce2:	4561      	cmp	r1, ip
 8008ce4:	d30a      	bcc.n	8008cfc <__exponent+0x66>
 8008ce6:	f10d 0209 	add.w	r2, sp, #9
 8008cea:	eba2 020e 	sub.w	r2, r2, lr
 8008cee:	4565      	cmp	r5, ip
 8008cf0:	bf88      	it	hi
 8008cf2:	2200      	movhi	r2, #0
 8008cf4:	4413      	add	r3, r2
 8008cf6:	1a18      	subs	r0, r3, r0
 8008cf8:	b003      	add	sp, #12
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d04:	e7ed      	b.n	8008ce2 <__exponent+0x4c>
 8008d06:	2330      	movs	r3, #48	; 0x30
 8008d08:	3130      	adds	r1, #48	; 0x30
 8008d0a:	7083      	strb	r3, [r0, #2]
 8008d0c:	70c1      	strb	r1, [r0, #3]
 8008d0e:	1d03      	adds	r3, r0, #4
 8008d10:	e7f1      	b.n	8008cf6 <__exponent+0x60>
	...

08008d14 <_printf_float>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	b091      	sub	sp, #68	; 0x44
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008d20:	4616      	mov	r6, r2
 8008d22:	461f      	mov	r7, r3
 8008d24:	4605      	mov	r5, r0
 8008d26:	f002 fe63 	bl	800b9f0 <_localeconv_r>
 8008d2a:	6803      	ldr	r3, [r0, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d30:	f7fd f84e 	bl	8005dd0 <strlen>
 8008d34:	2300      	movs	r3, #0
 8008d36:	930e      	str	r3, [sp, #56]	; 0x38
 8008d38:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3c:	900a      	str	r0, [sp, #40]	; 0x28
 8008d3e:	3307      	adds	r3, #7
 8008d40:	f023 0307 	bic.w	r3, r3, #7
 8008d44:	f103 0208 	add.w	r2, r3, #8
 8008d48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d50:	f8c8 2000 	str.w	r2, [r8]
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008d60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4b9c      	ldr	r3, [pc, #624]	; (8008fe0 <_printf_float+0x2cc>)
 8008d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d70:	f7fd fc8c 	bl	800668c <__aeabi_dcmpun>
 8008d74:	bb70      	cbnz	r0, 8008dd4 <_printf_float+0xc0>
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4b98      	ldr	r3, [pc, #608]	; (8008fe0 <_printf_float+0x2cc>)
 8008d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d80:	f7fd fc66 	bl	8006650 <__aeabi_dcmple>
 8008d84:	bb30      	cbnz	r0, 8008dd4 <_printf_float+0xc0>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4651      	mov	r1, sl
 8008d8e:	f7fd fc55 	bl	800663c <__aeabi_dcmplt>
 8008d92:	b110      	cbz	r0, 8008d9a <_printf_float+0x86>
 8008d94:	232d      	movs	r3, #45	; 0x2d
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9a:	4b92      	ldr	r3, [pc, #584]	; (8008fe4 <_printf_float+0x2d0>)
 8008d9c:	4892      	ldr	r0, [pc, #584]	; (8008fe8 <_printf_float+0x2d4>)
 8008d9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008da2:	bf94      	ite	ls
 8008da4:	4698      	movls	r8, r3
 8008da6:	4680      	movhi	r8, r0
 8008da8:	2303      	movs	r3, #3
 8008daa:	f04f 0a00 	mov.w	sl, #0
 8008dae:	6123      	str	r3, [r4, #16]
 8008db0:	f02b 0304 	bic.w	r3, fp, #4
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	4633      	mov	r3, r6
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	9700      	str	r7, [sp, #0]
 8008dbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8008dc0:	f000 f9d4 	bl	800916c <_printf_common>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f040 8090 	bne.w	8008eea <_printf_float+0x1d6>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	b011      	add	sp, #68	; 0x44
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	4653      	mov	r3, sl
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4651      	mov	r1, sl
 8008ddc:	f7fd fc56 	bl	800668c <__aeabi_dcmpun>
 8008de0:	b148      	cbz	r0, 8008df6 <_printf_float+0xe2>
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	bfb8      	it	lt
 8008de8:	232d      	movlt	r3, #45	; 0x2d
 8008dea:	4880      	ldr	r0, [pc, #512]	; (8008fec <_printf_float+0x2d8>)
 8008dec:	bfb8      	it	lt
 8008dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008df2:	4b7f      	ldr	r3, [pc, #508]	; (8008ff0 <_printf_float+0x2dc>)
 8008df4:	e7d3      	b.n	8008d9e <_printf_float+0x8a>
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	d142      	bne.n	8008e86 <_printf_float+0x172>
 8008e00:	2306      	movs	r3, #6
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	9206      	str	r2, [sp, #24]
 8008e08:	aa0e      	add	r2, sp, #56	; 0x38
 8008e0a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008e0e:	aa0d      	add	r2, sp, #52	; 0x34
 8008e10:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008e14:	9203      	str	r2, [sp, #12]
 8008e16:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008e1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	4642      	mov	r2, r8
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4628      	mov	r0, r5
 8008e28:	4653      	mov	r3, sl
 8008e2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e2c:	f7ff fed4 	bl	8008bd8 <__cvt>
 8008e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e32:	4680      	mov	r8, r0
 8008e34:	2947      	cmp	r1, #71	; 0x47
 8008e36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e38:	d108      	bne.n	8008e4c <_printf_float+0x138>
 8008e3a:	1cc8      	adds	r0, r1, #3
 8008e3c:	db02      	blt.n	8008e44 <_printf_float+0x130>
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	4299      	cmp	r1, r3
 8008e42:	dd40      	ble.n	8008ec6 <_printf_float+0x1b2>
 8008e44:	f1a9 0902 	sub.w	r9, r9, #2
 8008e48:	fa5f f989 	uxtb.w	r9, r9
 8008e4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e50:	d81f      	bhi.n	8008e92 <_printf_float+0x17e>
 8008e52:	464a      	mov	r2, r9
 8008e54:	3901      	subs	r1, #1
 8008e56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e5c:	f7ff ff1b 	bl	8008c96 <__exponent>
 8008e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e62:	4682      	mov	sl, r0
 8008e64:	1813      	adds	r3, r2, r0
 8008e66:	2a01      	cmp	r2, #1
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	dc02      	bgt.n	8008e72 <_printf_float+0x15e>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	d501      	bpl.n	8008e76 <_printf_float+0x162>
 8008e72:	3301      	adds	r3, #1
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d09b      	beq.n	8008db6 <_printf_float+0xa2>
 8008e7e:	232d      	movs	r3, #45	; 0x2d
 8008e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e84:	e797      	b.n	8008db6 <_printf_float+0xa2>
 8008e86:	2947      	cmp	r1, #71	; 0x47
 8008e88:	d1bc      	bne.n	8008e04 <_printf_float+0xf0>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1ba      	bne.n	8008e04 <_printf_float+0xf0>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7b7      	b.n	8008e02 <_printf_float+0xee>
 8008e92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e96:	d118      	bne.n	8008eca <_printf_float+0x1b6>
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	dd0b      	ble.n	8008eb6 <_printf_float+0x1a2>
 8008e9e:	6121      	str	r1, [r4, #16]
 8008ea0:	b913      	cbnz	r3, 8008ea8 <_printf_float+0x194>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	07d0      	lsls	r0, r2, #31
 8008ea6:	d502      	bpl.n	8008eae <_printf_float+0x19a>
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	440b      	add	r3, r1
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	f04f 0a00 	mov.w	sl, #0
 8008eb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008eb4:	e7df      	b.n	8008e76 <_printf_float+0x162>
 8008eb6:	b913      	cbnz	r3, 8008ebe <_printf_float+0x1aa>
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	07d2      	lsls	r2, r2, #31
 8008ebc:	d501      	bpl.n	8008ec2 <_printf_float+0x1ae>
 8008ebe:	3302      	adds	r3, #2
 8008ec0:	e7f4      	b.n	8008eac <_printf_float+0x198>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7f2      	b.n	8008eac <_printf_float+0x198>
 8008ec6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ecc:	4299      	cmp	r1, r3
 8008ece:	db05      	blt.n	8008edc <_printf_float+0x1c8>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	6121      	str	r1, [r4, #16]
 8008ed4:	07d8      	lsls	r0, r3, #31
 8008ed6:	d5ea      	bpl.n	8008eae <_printf_float+0x19a>
 8008ed8:	1c4b      	adds	r3, r1, #1
 8008eda:	e7e7      	b.n	8008eac <_printf_float+0x198>
 8008edc:	2900      	cmp	r1, #0
 8008ede:	bfcc      	ite	gt
 8008ee0:	2201      	movgt	r2, #1
 8008ee2:	f1c1 0202 	rsble	r2, r1, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	e7e0      	b.n	8008eac <_printf_float+0x198>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	055a      	lsls	r2, r3, #21
 8008eee:	d407      	bmi.n	8008f00 <_printf_float+0x1ec>
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	d12b      	bne.n	8008f56 <_printf_float+0x242>
 8008efe:	e764      	b.n	8008dca <_printf_float+0xb6>
 8008f00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f04:	f240 80dd 	bls.w	80090c2 <_printf_float+0x3ae>
 8008f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f7fd fb8a 	bl	8006628 <__aeabi_dcmpeq>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d033      	beq.n	8008f80 <_printf_float+0x26c>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	4a35      	ldr	r2, [pc, #212]	; (8008ff4 <_printf_float+0x2e0>)
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f af51 	beq.w	8008dca <_printf_float+0xb6>
 8008f28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	db02      	blt.n	8008f36 <_printf_float+0x222>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	07d8      	lsls	r0, r3, #31
 8008f34:	d50f      	bpl.n	8008f56 <_printf_float+0x242>
 8008f36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	f43f af42 	beq.w	8008dca <_printf_float+0xb6>
 8008f46:	f04f 0800 	mov.w	r8, #0
 8008f4a:	f104 091a 	add.w	r9, r4, #26
 8008f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4543      	cmp	r3, r8
 8008f54:	dc09      	bgt.n	8008f6a <_printf_float+0x256>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	079b      	lsls	r3, r3, #30
 8008f5a:	f100 8102 	bmi.w	8009162 <_printf_float+0x44e>
 8008f5e:	68e0      	ldr	r0, [r4, #12]
 8008f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f62:	4298      	cmp	r0, r3
 8008f64:	bfb8      	it	lt
 8008f66:	4618      	movlt	r0, r3
 8008f68:	e731      	b.n	8008dce <_printf_float+0xba>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	464a      	mov	r2, r9
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	f43f af28 	beq.w	8008dca <_printf_float+0xb6>
 8008f7a:	f108 0801 	add.w	r8, r8, #1
 8008f7e:	e7e6      	b.n	8008f4e <_printf_float+0x23a>
 8008f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc38      	bgt.n	8008ff8 <_printf_float+0x2e4>
 8008f86:	2301      	movs	r3, #1
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <_printf_float+0x2e0>)
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f af1a 	beq.w	8008dca <_printf_float+0xb6>
 8008f96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d102      	bne.n	8008fa4 <_printf_float+0x290>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	07d9      	lsls	r1, r3, #31
 8008fa2:	d5d8      	bpl.n	8008f56 <_printf_float+0x242>
 8008fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f af0b 	beq.w	8008dca <_printf_float+0xb6>
 8008fb4:	f04f 0900 	mov.w	r9, #0
 8008fb8:	f104 0a1a 	add.w	sl, r4, #26
 8008fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbe:	425b      	negs	r3, r3
 8008fc0:	454b      	cmp	r3, r9
 8008fc2:	dc01      	bgt.n	8008fc8 <_printf_float+0x2b4>
 8008fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc6:	e794      	b.n	8008ef2 <_printf_float+0x1de>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4652      	mov	r2, sl
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	f43f aef9 	beq.w	8008dca <_printf_float+0xb6>
 8008fd8:	f109 0901 	add.w	r9, r9, #1
 8008fdc:	e7ee      	b.n	8008fbc <_printf_float+0x2a8>
 8008fde:	bf00      	nop
 8008fe0:	7fefffff 	.word	0x7fefffff
 8008fe4:	0801ee34 	.word	0x0801ee34
 8008fe8:	0801ee38 	.word	0x0801ee38
 8008fec:	0801ee40 	.word	0x0801ee40
 8008ff0:	0801ee3c 	.word	0x0801ee3c
 8008ff4:	0801ee44 	.word	0x0801ee44
 8008ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	bfa8      	it	ge
 8009000:	461a      	movge	r2, r3
 8009002:	2a00      	cmp	r2, #0
 8009004:	4691      	mov	r9, r2
 8009006:	dc37      	bgt.n	8009078 <_printf_float+0x364>
 8009008:	f04f 0b00 	mov.w	fp, #0
 800900c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009010:	f104 021a 	add.w	r2, r4, #26
 8009014:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009018:	ebaa 0309 	sub.w	r3, sl, r9
 800901c:	455b      	cmp	r3, fp
 800901e:	dc33      	bgt.n	8009088 <_printf_float+0x374>
 8009020:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009024:	429a      	cmp	r2, r3
 8009026:	db3b      	blt.n	80090a0 <_printf_float+0x38c>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	07da      	lsls	r2, r3, #31
 800902c:	d438      	bmi.n	80090a0 <_printf_float+0x38c>
 800902e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009030:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009032:	eba3 020a 	sub.w	r2, r3, sl
 8009036:	eba3 0901 	sub.w	r9, r3, r1
 800903a:	4591      	cmp	r9, r2
 800903c:	bfa8      	it	ge
 800903e:	4691      	movge	r9, r2
 8009040:	f1b9 0f00 	cmp.w	r9, #0
 8009044:	dc34      	bgt.n	80090b0 <_printf_float+0x39c>
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800904e:	f104 0a1a 	add.w	sl, r4, #26
 8009052:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	eba3 0309 	sub.w	r3, r3, r9
 800905c:	4543      	cmp	r3, r8
 800905e:	f77f af7a 	ble.w	8008f56 <_printf_float+0x242>
 8009062:	2301      	movs	r3, #1
 8009064:	4652      	mov	r2, sl
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	f43f aeac 	beq.w	8008dca <_printf_float+0xb6>
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	e7ec      	b.n	8009052 <_printf_float+0x33e>
 8009078:	4613      	mov	r3, r2
 800907a:	4631      	mov	r1, r6
 800907c:	4642      	mov	r2, r8
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	d1c0      	bne.n	8009008 <_printf_float+0x2f4>
 8009086:	e6a0      	b.n	8008dca <_printf_float+0xb6>
 8009088:	2301      	movs	r3, #1
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f ae99 	beq.w	8008dca <_printf_float+0xb6>
 8009098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909a:	f10b 0b01 	add.w	fp, fp, #1
 800909e:	e7b9      	b.n	8009014 <_printf_float+0x300>
 80090a0:	4631      	mov	r1, r6
 80090a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b8      	blx	r7
 80090aa:	3001      	adds	r0, #1
 80090ac:	d1bf      	bne.n	800902e <_printf_float+0x31a>
 80090ae:	e68c      	b.n	8008dca <_printf_float+0xb6>
 80090b0:	464b      	mov	r3, r9
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	eb08 020a 	add.w	r2, r8, sl
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	d1c2      	bne.n	8009046 <_printf_float+0x332>
 80090c0:	e683      	b.n	8008dca <_printf_float+0xb6>
 80090c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c4:	2a01      	cmp	r2, #1
 80090c6:	dc01      	bgt.n	80090cc <_printf_float+0x3b8>
 80090c8:	07db      	lsls	r3, r3, #31
 80090ca:	d537      	bpl.n	800913c <_printf_float+0x428>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4642      	mov	r2, r8
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f ae77 	beq.w	8008dca <_printf_float+0xb6>
 80090dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f ae6f 	beq.w	8008dca <_printf_float+0xb6>
 80090ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090f0:	2200      	movs	r2, #0
 80090f2:	2300      	movs	r3, #0
 80090f4:	f7fd fa98 	bl	8006628 <__aeabi_dcmpeq>
 80090f8:	b9d8      	cbnz	r0, 8009132 <_printf_float+0x41e>
 80090fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090fc:	f108 0201 	add.w	r2, r8, #1
 8009100:	3b01      	subs	r3, #1
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	d10e      	bne.n	800912a <_printf_float+0x416>
 800910c:	e65d      	b.n	8008dca <_printf_float+0xb6>
 800910e:	2301      	movs	r3, #1
 8009110:	464a      	mov	r2, r9
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	f43f ae56 	beq.w	8008dca <_printf_float+0xb6>
 800911e:	f108 0801 	add.w	r8, r8, #1
 8009122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009124:	3b01      	subs	r3, #1
 8009126:	4543      	cmp	r3, r8
 8009128:	dcf1      	bgt.n	800910e <_printf_float+0x3fa>
 800912a:	4653      	mov	r3, sl
 800912c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009130:	e6e0      	b.n	8008ef4 <_printf_float+0x1e0>
 8009132:	f04f 0800 	mov.w	r8, #0
 8009136:	f104 091a 	add.w	r9, r4, #26
 800913a:	e7f2      	b.n	8009122 <_printf_float+0x40e>
 800913c:	2301      	movs	r3, #1
 800913e:	4642      	mov	r2, r8
 8009140:	e7df      	b.n	8009102 <_printf_float+0x3ee>
 8009142:	2301      	movs	r3, #1
 8009144:	464a      	mov	r2, r9
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f ae3c 	beq.w	8008dca <_printf_float+0xb6>
 8009152:	f108 0801 	add.w	r8, r8, #1
 8009156:	68e3      	ldr	r3, [r4, #12]
 8009158:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800915a:	1a5b      	subs	r3, r3, r1
 800915c:	4543      	cmp	r3, r8
 800915e:	dcf0      	bgt.n	8009142 <_printf_float+0x42e>
 8009160:	e6fd      	b.n	8008f5e <_printf_float+0x24a>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	f104 0919 	add.w	r9, r4, #25
 800916a:	e7f4      	b.n	8009156 <_printf_float+0x442>

0800916c <_printf_common>:
 800916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	4616      	mov	r6, r2
 8009172:	4699      	mov	r9, r3
 8009174:	688a      	ldr	r2, [r1, #8]
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	4607      	mov	r7, r0
 800917a:	4293      	cmp	r3, r2
 800917c:	bfb8      	it	lt
 800917e:	4613      	movlt	r3, r2
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009186:	460c      	mov	r4, r1
 8009188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800918c:	b10a      	cbz	r2, 8009192 <_printf_common+0x26>
 800918e:	3301      	adds	r3, #1
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	0699      	lsls	r1, r3, #26
 8009196:	bf42      	ittt	mi
 8009198:	6833      	ldrmi	r3, [r6, #0]
 800919a:	3302      	addmi	r3, #2
 800919c:	6033      	strmi	r3, [r6, #0]
 800919e:	6825      	ldr	r5, [r4, #0]
 80091a0:	f015 0506 	ands.w	r5, r5, #6
 80091a4:	d106      	bne.n	80091b4 <_printf_common+0x48>
 80091a6:	f104 0a19 	add.w	sl, r4, #25
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	6832      	ldr	r2, [r6, #0]
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	42ab      	cmp	r3, r5
 80091b2:	dc28      	bgt.n	8009206 <_printf_common+0x9a>
 80091b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b8:	1e13      	subs	r3, r2, #0
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	bf18      	it	ne
 80091be:	2301      	movne	r3, #1
 80091c0:	0692      	lsls	r2, r2, #26
 80091c2:	d42d      	bmi.n	8009220 <_printf_common+0xb4>
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091cc:	47c0      	blx	r8
 80091ce:	3001      	adds	r0, #1
 80091d0:	d020      	beq.n	8009214 <_printf_common+0xa8>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	68e5      	ldr	r5, [r4, #12]
 80091d6:	f003 0306 	and.w	r3, r3, #6
 80091da:	2b04      	cmp	r3, #4
 80091dc:	bf18      	it	ne
 80091de:	2500      	movne	r5, #0
 80091e0:	6832      	ldr	r2, [r6, #0]
 80091e2:	f04f 0600 	mov.w	r6, #0
 80091e6:	68a3      	ldr	r3, [r4, #8]
 80091e8:	bf08      	it	eq
 80091ea:	1aad      	subeq	r5, r5, r2
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	bf08      	it	eq
 80091f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f4:	4293      	cmp	r3, r2
 80091f6:	bfc4      	itt	gt
 80091f8:	1a9b      	subgt	r3, r3, r2
 80091fa:	18ed      	addgt	r5, r5, r3
 80091fc:	341a      	adds	r4, #26
 80091fe:	42b5      	cmp	r5, r6
 8009200:	d11a      	bne.n	8009238 <_printf_common+0xcc>
 8009202:	2000      	movs	r0, #0
 8009204:	e008      	b.n	8009218 <_printf_common+0xac>
 8009206:	2301      	movs	r3, #1
 8009208:	4652      	mov	r2, sl
 800920a:	4649      	mov	r1, r9
 800920c:	4638      	mov	r0, r7
 800920e:	47c0      	blx	r8
 8009210:	3001      	adds	r0, #1
 8009212:	d103      	bne.n	800921c <_printf_common+0xb0>
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921c:	3501      	adds	r5, #1
 800921e:	e7c4      	b.n	80091aa <_printf_common+0x3e>
 8009220:	2030      	movs	r0, #48	; 0x30
 8009222:	18e1      	adds	r1, r4, r3
 8009224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800922e:	4422      	add	r2, r4
 8009230:	3302      	adds	r3, #2
 8009232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009236:	e7c5      	b.n	80091c4 <_printf_common+0x58>
 8009238:	2301      	movs	r3, #1
 800923a:	4622      	mov	r2, r4
 800923c:	4649      	mov	r1, r9
 800923e:	4638      	mov	r0, r7
 8009240:	47c0      	blx	r8
 8009242:	3001      	adds	r0, #1
 8009244:	d0e6      	beq.n	8009214 <_printf_common+0xa8>
 8009246:	3601      	adds	r6, #1
 8009248:	e7d9      	b.n	80091fe <_printf_common+0x92>
	...

0800924c <_printf_i>:
 800924c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009250:	7e0f      	ldrb	r7, [r1, #24]
 8009252:	4691      	mov	r9, r2
 8009254:	2f78      	cmp	r7, #120	; 0x78
 8009256:	4680      	mov	r8, r0
 8009258:	460c      	mov	r4, r1
 800925a:	469a      	mov	sl, r3
 800925c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800925e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009262:	d807      	bhi.n	8009274 <_printf_i+0x28>
 8009264:	2f62      	cmp	r7, #98	; 0x62
 8009266:	d80a      	bhi.n	800927e <_printf_i+0x32>
 8009268:	2f00      	cmp	r7, #0
 800926a:	f000 80d9 	beq.w	8009420 <_printf_i+0x1d4>
 800926e:	2f58      	cmp	r7, #88	; 0x58
 8009270:	f000 80a4 	beq.w	80093bc <_printf_i+0x170>
 8009274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800927c:	e03a      	b.n	80092f4 <_printf_i+0xa8>
 800927e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009282:	2b15      	cmp	r3, #21
 8009284:	d8f6      	bhi.n	8009274 <_printf_i+0x28>
 8009286:	a101      	add	r1, pc, #4	; (adr r1, 800928c <_printf_i+0x40>)
 8009288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092f9 	.word	0x080092f9
 8009294:	08009275 	.word	0x08009275
 8009298:	08009275 	.word	0x08009275
 800929c:	08009275 	.word	0x08009275
 80092a0:	08009275 	.word	0x08009275
 80092a4:	080092f9 	.word	0x080092f9
 80092a8:	08009275 	.word	0x08009275
 80092ac:	08009275 	.word	0x08009275
 80092b0:	08009275 	.word	0x08009275
 80092b4:	08009275 	.word	0x08009275
 80092b8:	08009407 	.word	0x08009407
 80092bc:	08009329 	.word	0x08009329
 80092c0:	080093e9 	.word	0x080093e9
 80092c4:	08009275 	.word	0x08009275
 80092c8:	08009275 	.word	0x08009275
 80092cc:	08009429 	.word	0x08009429
 80092d0:	08009275 	.word	0x08009275
 80092d4:	08009329 	.word	0x08009329
 80092d8:	08009275 	.word	0x08009275
 80092dc:	08009275 	.word	0x08009275
 80092e0:	080093f1 	.word	0x080093f1
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	602a      	str	r2, [r5, #0]
 80092ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0a4      	b.n	8009442 <_printf_i+0x1f6>
 80092f8:	6820      	ldr	r0, [r4, #0]
 80092fa:	6829      	ldr	r1, [r5, #0]
 80092fc:	0606      	lsls	r6, r0, #24
 80092fe:	f101 0304 	add.w	r3, r1, #4
 8009302:	d50a      	bpl.n	800931a <_printf_i+0xce>
 8009304:	680e      	ldr	r6, [r1, #0]
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	2e00      	cmp	r6, #0
 800930a:	da03      	bge.n	8009314 <_printf_i+0xc8>
 800930c:	232d      	movs	r3, #45	; 0x2d
 800930e:	4276      	negs	r6, r6
 8009310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009314:	230a      	movs	r3, #10
 8009316:	485e      	ldr	r0, [pc, #376]	; (8009490 <_printf_i+0x244>)
 8009318:	e019      	b.n	800934e <_printf_i+0x102>
 800931a:	680e      	ldr	r6, [r1, #0]
 800931c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	bf18      	it	ne
 8009324:	b236      	sxthne	r6, r6
 8009326:	e7ef      	b.n	8009308 <_printf_i+0xbc>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	6820      	ldr	r0, [r4, #0]
 800932c:	1d19      	adds	r1, r3, #4
 800932e:	6029      	str	r1, [r5, #0]
 8009330:	0601      	lsls	r1, r0, #24
 8009332:	d501      	bpl.n	8009338 <_printf_i+0xec>
 8009334:	681e      	ldr	r6, [r3, #0]
 8009336:	e002      	b.n	800933e <_printf_i+0xf2>
 8009338:	0646      	lsls	r6, r0, #25
 800933a:	d5fb      	bpl.n	8009334 <_printf_i+0xe8>
 800933c:	881e      	ldrh	r6, [r3, #0]
 800933e:	2f6f      	cmp	r7, #111	; 0x6f
 8009340:	bf0c      	ite	eq
 8009342:	2308      	moveq	r3, #8
 8009344:	230a      	movne	r3, #10
 8009346:	4852      	ldr	r0, [pc, #328]	; (8009490 <_printf_i+0x244>)
 8009348:	2100      	movs	r1, #0
 800934a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800934e:	6865      	ldr	r5, [r4, #4]
 8009350:	2d00      	cmp	r5, #0
 8009352:	bfa8      	it	ge
 8009354:	6821      	ldrge	r1, [r4, #0]
 8009356:	60a5      	str	r5, [r4, #8]
 8009358:	bfa4      	itt	ge
 800935a:	f021 0104 	bicge.w	r1, r1, #4
 800935e:	6021      	strge	r1, [r4, #0]
 8009360:	b90e      	cbnz	r6, 8009366 <_printf_i+0x11a>
 8009362:	2d00      	cmp	r5, #0
 8009364:	d04d      	beq.n	8009402 <_printf_i+0x1b6>
 8009366:	4615      	mov	r5, r2
 8009368:	fbb6 f1f3 	udiv	r1, r6, r3
 800936c:	fb03 6711 	mls	r7, r3, r1, r6
 8009370:	5dc7      	ldrb	r7, [r0, r7]
 8009372:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009376:	4637      	mov	r7, r6
 8009378:	42bb      	cmp	r3, r7
 800937a:	460e      	mov	r6, r1
 800937c:	d9f4      	bls.n	8009368 <_printf_i+0x11c>
 800937e:	2b08      	cmp	r3, #8
 8009380:	d10b      	bne.n	800939a <_printf_i+0x14e>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	07de      	lsls	r6, r3, #31
 8009386:	d508      	bpl.n	800939a <_printf_i+0x14e>
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	6861      	ldr	r1, [r4, #4]
 800938c:	4299      	cmp	r1, r3
 800938e:	bfde      	ittt	le
 8009390:	2330      	movle	r3, #48	; 0x30
 8009392:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009396:	f105 35ff 	addle.w	r5, r5, #4294967295
 800939a:	1b52      	subs	r2, r2, r5
 800939c:	6122      	str	r2, [r4, #16]
 800939e:	464b      	mov	r3, r9
 80093a0:	4621      	mov	r1, r4
 80093a2:	4640      	mov	r0, r8
 80093a4:	f8cd a000 	str.w	sl, [sp]
 80093a8:	aa03      	add	r2, sp, #12
 80093aa:	f7ff fedf 	bl	800916c <_printf_common>
 80093ae:	3001      	adds	r0, #1
 80093b0:	d14c      	bne.n	800944c <_printf_i+0x200>
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295
 80093b6:	b004      	add	sp, #16
 80093b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093bc:	4834      	ldr	r0, [pc, #208]	; (8009490 <_printf_i+0x244>)
 80093be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093c2:	6829      	ldr	r1, [r5, #0]
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80093ca:	6029      	str	r1, [r5, #0]
 80093cc:	061d      	lsls	r5, r3, #24
 80093ce:	d514      	bpl.n	80093fa <_printf_i+0x1ae>
 80093d0:	07df      	lsls	r7, r3, #31
 80093d2:	bf44      	itt	mi
 80093d4:	f043 0320 	orrmi.w	r3, r3, #32
 80093d8:	6023      	strmi	r3, [r4, #0]
 80093da:	b91e      	cbnz	r6, 80093e4 <_printf_i+0x198>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	f023 0320 	bic.w	r3, r3, #32
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	2310      	movs	r3, #16
 80093e6:	e7af      	b.n	8009348 <_printf_i+0xfc>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	f043 0320 	orr.w	r3, r3, #32
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	2378      	movs	r3, #120	; 0x78
 80093f2:	4828      	ldr	r0, [pc, #160]	; (8009494 <_printf_i+0x248>)
 80093f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093f8:	e7e3      	b.n	80093c2 <_printf_i+0x176>
 80093fa:	0659      	lsls	r1, r3, #25
 80093fc:	bf48      	it	mi
 80093fe:	b2b6      	uxthmi	r6, r6
 8009400:	e7e6      	b.n	80093d0 <_printf_i+0x184>
 8009402:	4615      	mov	r5, r2
 8009404:	e7bb      	b.n	800937e <_printf_i+0x132>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	6826      	ldr	r6, [r4, #0]
 800940a:	1d18      	adds	r0, r3, #4
 800940c:	6961      	ldr	r1, [r4, #20]
 800940e:	6028      	str	r0, [r5, #0]
 8009410:	0635      	lsls	r5, r6, #24
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	d501      	bpl.n	800941a <_printf_i+0x1ce>
 8009416:	6019      	str	r1, [r3, #0]
 8009418:	e002      	b.n	8009420 <_printf_i+0x1d4>
 800941a:	0670      	lsls	r0, r6, #25
 800941c:	d5fb      	bpl.n	8009416 <_printf_i+0x1ca>
 800941e:	8019      	strh	r1, [r3, #0]
 8009420:	2300      	movs	r3, #0
 8009422:	4615      	mov	r5, r2
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	e7ba      	b.n	800939e <_printf_i+0x152>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	2100      	movs	r1, #0
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	602a      	str	r2, [r5, #0]
 8009430:	681d      	ldr	r5, [r3, #0]
 8009432:	6862      	ldr	r2, [r4, #4]
 8009434:	4628      	mov	r0, r5
 8009436:	f002 faf9 	bl	800ba2c <memchr>
 800943a:	b108      	cbz	r0, 8009440 <_printf_i+0x1f4>
 800943c:	1b40      	subs	r0, r0, r5
 800943e:	6060      	str	r0, [r4, #4]
 8009440:	6863      	ldr	r3, [r4, #4]
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	2300      	movs	r3, #0
 8009446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944a:	e7a8      	b.n	800939e <_printf_i+0x152>
 800944c:	462a      	mov	r2, r5
 800944e:	4649      	mov	r1, r9
 8009450:	4640      	mov	r0, r8
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	47d0      	blx	sl
 8009456:	3001      	adds	r0, #1
 8009458:	d0ab      	beq.n	80093b2 <_printf_i+0x166>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	079b      	lsls	r3, r3, #30
 800945e:	d413      	bmi.n	8009488 <_printf_i+0x23c>
 8009460:	68e0      	ldr	r0, [r4, #12]
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	4298      	cmp	r0, r3
 8009466:	bfb8      	it	lt
 8009468:	4618      	movlt	r0, r3
 800946a:	e7a4      	b.n	80093b6 <_printf_i+0x16a>
 800946c:	2301      	movs	r3, #1
 800946e:	4632      	mov	r2, r6
 8009470:	4649      	mov	r1, r9
 8009472:	4640      	mov	r0, r8
 8009474:	47d0      	blx	sl
 8009476:	3001      	adds	r0, #1
 8009478:	d09b      	beq.n	80093b2 <_printf_i+0x166>
 800947a:	3501      	adds	r5, #1
 800947c:	68e3      	ldr	r3, [r4, #12]
 800947e:	9903      	ldr	r1, [sp, #12]
 8009480:	1a5b      	subs	r3, r3, r1
 8009482:	42ab      	cmp	r3, r5
 8009484:	dcf2      	bgt.n	800946c <_printf_i+0x220>
 8009486:	e7eb      	b.n	8009460 <_printf_i+0x214>
 8009488:	2500      	movs	r5, #0
 800948a:	f104 0619 	add.w	r6, r4, #25
 800948e:	e7f5      	b.n	800947c <_printf_i+0x230>
 8009490:	0801ee46 	.word	0x0801ee46
 8009494:	0801ee57 	.word	0x0801ee57

08009498 <_scanf_float>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	b087      	sub	sp, #28
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	688b      	ldr	r3, [r1, #8]
 80094a2:	4617      	mov	r7, r2
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094aa:	bf85      	ittet	hi
 80094ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094b0:	195b      	addhi	r3, r3, r5
 80094b2:	2300      	movls	r3, #0
 80094b4:	9302      	strhi	r3, [sp, #8]
 80094b6:	bf88      	it	hi
 80094b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80094bc:	468b      	mov	fp, r1
 80094be:	f04f 0500 	mov.w	r5, #0
 80094c2:	bf8c      	ite	hi
 80094c4:	608b      	strhi	r3, [r1, #8]
 80094c6:	9302      	strls	r3, [sp, #8]
 80094c8:	680b      	ldr	r3, [r1, #0]
 80094ca:	4680      	mov	r8, r0
 80094cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80094d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80094d4:	460c      	mov	r4, r1
 80094d6:	465e      	mov	r6, fp
 80094d8:	46aa      	mov	sl, r5
 80094da:	46a9      	mov	r9, r5
 80094dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094e0:	9501      	str	r5, [sp, #4]
 80094e2:	68a2      	ldr	r2, [r4, #8]
 80094e4:	b152      	cbz	r2, 80094fc <_scanf_float+0x64>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b4e      	cmp	r3, #78	; 0x4e
 80094ec:	d864      	bhi.n	80095b8 <_scanf_float+0x120>
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d83c      	bhi.n	800956c <_scanf_float+0xd4>
 80094f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094f6:	b2c8      	uxtb	r0, r1
 80094f8:	280e      	cmp	r0, #14
 80094fa:	d93a      	bls.n	8009572 <_scanf_float+0xda>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	d003      	beq.n	800950a <_scanf_float+0x72>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950e:	f1ba 0f01 	cmp.w	sl, #1
 8009512:	f200 8113 	bhi.w	800973c <_scanf_float+0x2a4>
 8009516:	455e      	cmp	r6, fp
 8009518:	f200 8105 	bhi.w	8009726 <_scanf_float+0x28e>
 800951c:	2501      	movs	r5, #1
 800951e:	4628      	mov	r0, r5
 8009520:	b007      	add	sp, #28
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800952a:	2a0d      	cmp	r2, #13
 800952c:	d8e6      	bhi.n	80094fc <_scanf_float+0x64>
 800952e:	a101      	add	r1, pc, #4	; (adr r1, 8009534 <_scanf_float+0x9c>)
 8009530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009534:	08009673 	.word	0x08009673
 8009538:	080094fd 	.word	0x080094fd
 800953c:	080094fd 	.word	0x080094fd
 8009540:	080094fd 	.word	0x080094fd
 8009544:	080096d3 	.word	0x080096d3
 8009548:	080096ab 	.word	0x080096ab
 800954c:	080094fd 	.word	0x080094fd
 8009550:	080094fd 	.word	0x080094fd
 8009554:	08009681 	.word	0x08009681
 8009558:	080094fd 	.word	0x080094fd
 800955c:	080094fd 	.word	0x080094fd
 8009560:	080094fd 	.word	0x080094fd
 8009564:	080094fd 	.word	0x080094fd
 8009568:	08009639 	.word	0x08009639
 800956c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009570:	e7db      	b.n	800952a <_scanf_float+0x92>
 8009572:	290e      	cmp	r1, #14
 8009574:	d8c2      	bhi.n	80094fc <_scanf_float+0x64>
 8009576:	a001      	add	r0, pc, #4	; (adr r0, 800957c <_scanf_float+0xe4>)
 8009578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800957c:	0800962b 	.word	0x0800962b
 8009580:	080094fd 	.word	0x080094fd
 8009584:	0800962b 	.word	0x0800962b
 8009588:	080096bf 	.word	0x080096bf
 800958c:	080094fd 	.word	0x080094fd
 8009590:	080095d9 	.word	0x080095d9
 8009594:	08009615 	.word	0x08009615
 8009598:	08009615 	.word	0x08009615
 800959c:	08009615 	.word	0x08009615
 80095a0:	08009615 	.word	0x08009615
 80095a4:	08009615 	.word	0x08009615
 80095a8:	08009615 	.word	0x08009615
 80095ac:	08009615 	.word	0x08009615
 80095b0:	08009615 	.word	0x08009615
 80095b4:	08009615 	.word	0x08009615
 80095b8:	2b6e      	cmp	r3, #110	; 0x6e
 80095ba:	d809      	bhi.n	80095d0 <_scanf_float+0x138>
 80095bc:	2b60      	cmp	r3, #96	; 0x60
 80095be:	d8b2      	bhi.n	8009526 <_scanf_float+0x8e>
 80095c0:	2b54      	cmp	r3, #84	; 0x54
 80095c2:	d077      	beq.n	80096b4 <_scanf_float+0x21c>
 80095c4:	2b59      	cmp	r3, #89	; 0x59
 80095c6:	d199      	bne.n	80094fc <_scanf_float+0x64>
 80095c8:	2d07      	cmp	r5, #7
 80095ca:	d197      	bne.n	80094fc <_scanf_float+0x64>
 80095cc:	2508      	movs	r5, #8
 80095ce:	e029      	b.n	8009624 <_scanf_float+0x18c>
 80095d0:	2b74      	cmp	r3, #116	; 0x74
 80095d2:	d06f      	beq.n	80096b4 <_scanf_float+0x21c>
 80095d4:	2b79      	cmp	r3, #121	; 0x79
 80095d6:	e7f6      	b.n	80095c6 <_scanf_float+0x12e>
 80095d8:	6821      	ldr	r1, [r4, #0]
 80095da:	05c8      	lsls	r0, r1, #23
 80095dc:	d51a      	bpl.n	8009614 <_scanf_float+0x17c>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80095e4:	6021      	str	r1, [r4, #0]
 80095e6:	f109 0901 	add.w	r9, r9, #1
 80095ea:	b11b      	cbz	r3, 80095f4 <_scanf_float+0x15c>
 80095ec:	3b01      	subs	r3, #1
 80095ee:	3201      	adds	r2, #1
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	60a2      	str	r2, [r4, #8]
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	3301      	adds	r3, #1
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3b01      	subs	r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	607b      	str	r3, [r7, #4]
 8009608:	f340 8084 	ble.w	8009714 <_scanf_float+0x27c>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	e766      	b.n	80094e2 <_scanf_float+0x4a>
 8009614:	eb1a 0f05 	cmn.w	sl, r5
 8009618:	f47f af70 	bne.w	80094fc <_scanf_float+0x64>
 800961c:	6822      	ldr	r2, [r4, #0]
 800961e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009622:	6022      	str	r2, [r4, #0]
 8009624:	f806 3b01 	strb.w	r3, [r6], #1
 8009628:	e7e4      	b.n	80095f4 <_scanf_float+0x15c>
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	0610      	lsls	r0, r2, #24
 800962e:	f57f af65 	bpl.w	80094fc <_scanf_float+0x64>
 8009632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009636:	e7f4      	b.n	8009622 <_scanf_float+0x18a>
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d10e      	bne.n	800965c <_scanf_float+0x1c4>
 800963e:	f1b9 0f00 	cmp.w	r9, #0
 8009642:	d10e      	bne.n	8009662 <_scanf_float+0x1ca>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800964a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800964e:	d108      	bne.n	8009662 <_scanf_float+0x1ca>
 8009650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009654:	f04f 0a01 	mov.w	sl, #1
 8009658:	6022      	str	r2, [r4, #0]
 800965a:	e7e3      	b.n	8009624 <_scanf_float+0x18c>
 800965c:	f1ba 0f02 	cmp.w	sl, #2
 8009660:	d055      	beq.n	800970e <_scanf_float+0x276>
 8009662:	2d01      	cmp	r5, #1
 8009664:	d002      	beq.n	800966c <_scanf_float+0x1d4>
 8009666:	2d04      	cmp	r5, #4
 8009668:	f47f af48 	bne.w	80094fc <_scanf_float+0x64>
 800966c:	3501      	adds	r5, #1
 800966e:	b2ed      	uxtb	r5, r5
 8009670:	e7d8      	b.n	8009624 <_scanf_float+0x18c>
 8009672:	f1ba 0f01 	cmp.w	sl, #1
 8009676:	f47f af41 	bne.w	80094fc <_scanf_float+0x64>
 800967a:	f04f 0a02 	mov.w	sl, #2
 800967e:	e7d1      	b.n	8009624 <_scanf_float+0x18c>
 8009680:	b97d      	cbnz	r5, 80096a2 <_scanf_float+0x20a>
 8009682:	f1b9 0f00 	cmp.w	r9, #0
 8009686:	f47f af3c 	bne.w	8009502 <_scanf_float+0x6a>
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009690:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009694:	f47f af39 	bne.w	800950a <_scanf_float+0x72>
 8009698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800969c:	2501      	movs	r5, #1
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	e7c0      	b.n	8009624 <_scanf_float+0x18c>
 80096a2:	2d03      	cmp	r5, #3
 80096a4:	d0e2      	beq.n	800966c <_scanf_float+0x1d4>
 80096a6:	2d05      	cmp	r5, #5
 80096a8:	e7de      	b.n	8009668 <_scanf_float+0x1d0>
 80096aa:	2d02      	cmp	r5, #2
 80096ac:	f47f af26 	bne.w	80094fc <_scanf_float+0x64>
 80096b0:	2503      	movs	r5, #3
 80096b2:	e7b7      	b.n	8009624 <_scanf_float+0x18c>
 80096b4:	2d06      	cmp	r5, #6
 80096b6:	f47f af21 	bne.w	80094fc <_scanf_float+0x64>
 80096ba:	2507      	movs	r5, #7
 80096bc:	e7b2      	b.n	8009624 <_scanf_float+0x18c>
 80096be:	6822      	ldr	r2, [r4, #0]
 80096c0:	0591      	lsls	r1, r2, #22
 80096c2:	f57f af1b 	bpl.w	80094fc <_scanf_float+0x64>
 80096c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80096ca:	6022      	str	r2, [r4, #0]
 80096cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80096d0:	e7a8      	b.n	8009624 <_scanf_float+0x18c>
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80096d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80096dc:	d006      	beq.n	80096ec <_scanf_float+0x254>
 80096de:	0550      	lsls	r0, r2, #21
 80096e0:	f57f af0c 	bpl.w	80094fc <_scanf_float+0x64>
 80096e4:	f1b9 0f00 	cmp.w	r9, #0
 80096e8:	f43f af0f 	beq.w	800950a <_scanf_float+0x72>
 80096ec:	0591      	lsls	r1, r2, #22
 80096ee:	bf58      	it	pl
 80096f0:	9901      	ldrpl	r1, [sp, #4]
 80096f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096f6:	bf58      	it	pl
 80096f8:	eba9 0101 	subpl.w	r1, r9, r1
 80096fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009700:	f04f 0900 	mov.w	r9, #0
 8009704:	bf58      	it	pl
 8009706:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	e78a      	b.n	8009624 <_scanf_float+0x18c>
 800970e:	f04f 0a03 	mov.w	sl, #3
 8009712:	e787      	b.n	8009624 <_scanf_float+0x18c>
 8009714:	4639      	mov	r1, r7
 8009716:	4640      	mov	r0, r8
 8009718:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800971c:	4798      	blx	r3
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f aedf 	beq.w	80094e2 <_scanf_float+0x4a>
 8009724:	e6ea      	b.n	80094fc <_scanf_float+0x64>
 8009726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800972a:	463a      	mov	r2, r7
 800972c:	4640      	mov	r0, r8
 800972e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009732:	4798      	blx	r3
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	3b01      	subs	r3, #1
 8009738:	6123      	str	r3, [r4, #16]
 800973a:	e6ec      	b.n	8009516 <_scanf_float+0x7e>
 800973c:	1e6b      	subs	r3, r5, #1
 800973e:	2b06      	cmp	r3, #6
 8009740:	d825      	bhi.n	800978e <_scanf_float+0x2f6>
 8009742:	2d02      	cmp	r5, #2
 8009744:	d836      	bhi.n	80097b4 <_scanf_float+0x31c>
 8009746:	455e      	cmp	r6, fp
 8009748:	f67f aee8 	bls.w	800951c <_scanf_float+0x84>
 800974c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009750:	463a      	mov	r2, r7
 8009752:	4640      	mov	r0, r8
 8009754:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009758:	4798      	blx	r3
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	3b01      	subs	r3, #1
 800975e:	6123      	str	r3, [r4, #16]
 8009760:	e7f1      	b.n	8009746 <_scanf_float+0x2ae>
 8009762:	9802      	ldr	r0, [sp, #8]
 8009764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009768:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800976c:	463a      	mov	r2, r7
 800976e:	9002      	str	r0, [sp, #8]
 8009770:	4640      	mov	r0, r8
 8009772:	4798      	blx	r3
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	3b01      	subs	r3, #1
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800977e:	fa5f fa8a 	uxtb.w	sl, sl
 8009782:	f1ba 0f02 	cmp.w	sl, #2
 8009786:	d1ec      	bne.n	8009762 <_scanf_float+0x2ca>
 8009788:	3d03      	subs	r5, #3
 800978a:	b2ed      	uxtb	r5, r5
 800978c:	1b76      	subs	r6, r6, r5
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	05da      	lsls	r2, r3, #23
 8009792:	d52f      	bpl.n	80097f4 <_scanf_float+0x35c>
 8009794:	055b      	lsls	r3, r3, #21
 8009796:	d510      	bpl.n	80097ba <_scanf_float+0x322>
 8009798:	455e      	cmp	r6, fp
 800979a:	f67f aebf 	bls.w	800951c <_scanf_float+0x84>
 800979e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a2:	463a      	mov	r2, r7
 80097a4:	4640      	mov	r0, r8
 80097a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097aa:	4798      	blx	r3
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	e7f1      	b.n	8009798 <_scanf_float+0x300>
 80097b4:	46aa      	mov	sl, r5
 80097b6:	9602      	str	r6, [sp, #8]
 80097b8:	e7df      	b.n	800977a <_scanf_float+0x2e2>
 80097ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	2965      	cmp	r1, #101	; 0x65
 80097c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80097c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	d00c      	beq.n	80097e8 <_scanf_float+0x350>
 80097ce:	2945      	cmp	r1, #69	; 0x45
 80097d0:	d00a      	beq.n	80097e8 <_scanf_float+0x350>
 80097d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097d6:	463a      	mov	r2, r7
 80097d8:	4640      	mov	r0, r8
 80097da:	4798      	blx	r3
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	1eb5      	subs	r5, r6, #2
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	463a      	mov	r2, r7
 80097ea:	4640      	mov	r0, r8
 80097ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097f0:	4798      	blx	r3
 80097f2:	462e      	mov	r6, r5
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	f015 0510 	ands.w	r5, r5, #16
 80097fa:	d155      	bne.n	80098a8 <_scanf_float+0x410>
 80097fc:	7035      	strb	r5, [r6, #0]
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009808:	d11b      	bne.n	8009842 <_scanf_float+0x3aa>
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	454b      	cmp	r3, r9
 800980e:	eba3 0209 	sub.w	r2, r3, r9
 8009812:	d123      	bne.n	800985c <_scanf_float+0x3c4>
 8009814:	2200      	movs	r2, #0
 8009816:	4659      	mov	r1, fp
 8009818:	4640      	mov	r0, r8
 800981a:	f000 fe79 	bl	800a510 <_strtod_r>
 800981e:	6822      	ldr	r2, [r4, #0]
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	f012 0f02 	tst.w	r2, #2
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	d021      	beq.n	8009872 <_scanf_float+0x3da>
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	9903      	ldr	r1, [sp, #12]
 8009832:	600a      	str	r2, [r1, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	e9c3 6700 	strd	r6, r7, [r3]
 800983a:	68e3      	ldr	r3, [r4, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60e3      	str	r3, [r4, #12]
 8009840:	e66d      	b.n	800951e <_scanf_float+0x86>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0e5      	beq.n	8009814 <_scanf_float+0x37c>
 8009848:	9905      	ldr	r1, [sp, #20]
 800984a:	230a      	movs	r3, #10
 800984c:	462a      	mov	r2, r5
 800984e:	4640      	mov	r0, r8
 8009850:	3101      	adds	r1, #1
 8009852:	f000 fedf 	bl	800a614 <_strtol_r>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	9e05      	ldr	r6, [sp, #20]
 800985a:	1ac2      	subs	r2, r0, r3
 800985c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009860:	429e      	cmp	r6, r3
 8009862:	bf28      	it	cs
 8009864:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009868:	4630      	mov	r0, r6
 800986a:	4910      	ldr	r1, [pc, #64]	; (80098ac <_scanf_float+0x414>)
 800986c:	f000 f826 	bl	80098bc <siprintf>
 8009870:	e7d0      	b.n	8009814 <_scanf_float+0x37c>
 8009872:	f012 0f04 	tst.w	r2, #4
 8009876:	f103 0204 	add.w	r2, r3, #4
 800987a:	d1d9      	bne.n	8009830 <_scanf_float+0x398>
 800987c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009880:	f8cc 2000 	str.w	r2, [ip]
 8009884:	f8d3 8000 	ldr.w	r8, [r3]
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	f7fc fefe 	bl	800668c <__aeabi_dcmpun>
 8009890:	b128      	cbz	r0, 800989e <_scanf_float+0x406>
 8009892:	4807      	ldr	r0, [pc, #28]	; (80098b0 <_scanf_float+0x418>)
 8009894:	f000 f80e 	bl	80098b4 <nanf>
 8009898:	f8c8 0000 	str.w	r0, [r8]
 800989c:	e7cd      	b.n	800983a <_scanf_float+0x3a2>
 800989e:	4630      	mov	r0, r6
 80098a0:	4639      	mov	r1, r7
 80098a2:	f7fc ff51 	bl	8006748 <__aeabi_d2f>
 80098a6:	e7f7      	b.n	8009898 <_scanf_float+0x400>
 80098a8:	2500      	movs	r5, #0
 80098aa:	e638      	b.n	800951e <_scanf_float+0x86>
 80098ac:	0801ee68 	.word	0x0801ee68
 80098b0:	0801f2d8 	.word	0x0801f2d8

080098b4 <nanf>:
 80098b4:	4800      	ldr	r0, [pc, #0]	; (80098b8 <nanf+0x4>)
 80098b6:	4770      	bx	lr
 80098b8:	7fc00000 	.word	0x7fc00000

080098bc <siprintf>:
 80098bc:	b40e      	push	{r1, r2, r3}
 80098be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c2:	b500      	push	{lr}
 80098c4:	b09c      	sub	sp, #112	; 0x70
 80098c6:	ab1d      	add	r3, sp, #116	; 0x74
 80098c8:	9002      	str	r0, [sp, #8]
 80098ca:	9006      	str	r0, [sp, #24]
 80098cc:	9107      	str	r1, [sp, #28]
 80098ce:	9104      	str	r1, [sp, #16]
 80098d0:	4808      	ldr	r0, [pc, #32]	; (80098f4 <siprintf+0x38>)
 80098d2:	4909      	ldr	r1, [pc, #36]	; (80098f8 <siprintf+0x3c>)
 80098d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	6800      	ldr	r0, [r0, #0]
 80098dc:	a902      	add	r1, sp, #8
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	f002 fec4 	bl	800c66c <_svfiprintf_r>
 80098e4:	2200      	movs	r2, #0
 80098e6:	9b02      	ldr	r3, [sp, #8]
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	b01c      	add	sp, #112	; 0x70
 80098ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f0:	b003      	add	sp, #12
 80098f2:	4770      	bx	lr
 80098f4:	2000000c 	.word	0x2000000c
 80098f8:	ffff0208 	.word	0xffff0208

080098fc <sulp>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	460f      	mov	r7, r1
 8009902:	4690      	mov	r8, r2
 8009904:	f002 fc1e 	bl	800c144 <__ulp>
 8009908:	4604      	mov	r4, r0
 800990a:	460d      	mov	r5, r1
 800990c:	f1b8 0f00 	cmp.w	r8, #0
 8009910:	d011      	beq.n	8009936 <sulp+0x3a>
 8009912:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009916:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800991a:	2b00      	cmp	r3, #0
 800991c:	dd0b      	ble.n	8009936 <sulp+0x3a>
 800991e:	2400      	movs	r4, #0
 8009920:	051b      	lsls	r3, r3, #20
 8009922:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009926:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800992a:	4622      	mov	r2, r4
 800992c:	462b      	mov	r3, r5
 800992e:	f7fc fc13 	bl	8006158 <__aeabi_dmul>
 8009932:	4604      	mov	r4, r0
 8009934:	460d      	mov	r5, r1
 8009936:	4620      	mov	r0, r4
 8009938:	4629      	mov	r1, r5
 800993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009940 <_strtod_l>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	469b      	mov	fp, r3
 8009946:	2300      	movs	r3, #0
 8009948:	b09f      	sub	sp, #124	; 0x7c
 800994a:	931a      	str	r3, [sp, #104]	; 0x68
 800994c:	4b9e      	ldr	r3, [pc, #632]	; (8009bc8 <_strtod_l+0x288>)
 800994e:	4682      	mov	sl, r0
 8009950:	681f      	ldr	r7, [r3, #0]
 8009952:	460e      	mov	r6, r1
 8009954:	4638      	mov	r0, r7
 8009956:	9215      	str	r2, [sp, #84]	; 0x54
 8009958:	f7fc fa3a 	bl	8005dd0 <strlen>
 800995c:	f04f 0800 	mov.w	r8, #0
 8009960:	4604      	mov	r4, r0
 8009962:	f04f 0900 	mov.w	r9, #0
 8009966:	9619      	str	r6, [sp, #100]	; 0x64
 8009968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800996a:	781a      	ldrb	r2, [r3, #0]
 800996c:	2a2b      	cmp	r2, #43	; 0x2b
 800996e:	d04c      	beq.n	8009a0a <_strtod_l+0xca>
 8009970:	d83a      	bhi.n	80099e8 <_strtod_l+0xa8>
 8009972:	2a0d      	cmp	r2, #13
 8009974:	d833      	bhi.n	80099de <_strtod_l+0x9e>
 8009976:	2a08      	cmp	r2, #8
 8009978:	d833      	bhi.n	80099e2 <_strtod_l+0xa2>
 800997a:	2a00      	cmp	r2, #0
 800997c:	d03d      	beq.n	80099fa <_strtod_l+0xba>
 800997e:	2300      	movs	r3, #0
 8009980:	930a      	str	r3, [sp, #40]	; 0x28
 8009982:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009984:	782b      	ldrb	r3, [r5, #0]
 8009986:	2b30      	cmp	r3, #48	; 0x30
 8009988:	f040 80aa 	bne.w	8009ae0 <_strtod_l+0x1a0>
 800998c:	786b      	ldrb	r3, [r5, #1]
 800998e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009992:	2b58      	cmp	r3, #88	; 0x58
 8009994:	d166      	bne.n	8009a64 <_strtod_l+0x124>
 8009996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009998:	4650      	mov	r0, sl
 800999a:	9301      	str	r3, [sp, #4]
 800999c:	ab1a      	add	r3, sp, #104	; 0x68
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	4a8a      	ldr	r2, [pc, #552]	; (8009bcc <_strtod_l+0x28c>)
 80099a2:	f8cd b008 	str.w	fp, [sp, #8]
 80099a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80099a8:	a919      	add	r1, sp, #100	; 0x64
 80099aa:	f001 fd23 	bl	800b3f4 <__gethex>
 80099ae:	f010 0607 	ands.w	r6, r0, #7
 80099b2:	4604      	mov	r4, r0
 80099b4:	d005      	beq.n	80099c2 <_strtod_l+0x82>
 80099b6:	2e06      	cmp	r6, #6
 80099b8:	d129      	bne.n	8009a0e <_strtod_l+0xce>
 80099ba:	2300      	movs	r3, #0
 80099bc:	3501      	adds	r5, #1
 80099be:	9519      	str	r5, [sp, #100]	; 0x64
 80099c0:	930a      	str	r3, [sp, #40]	; 0x28
 80099c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 858a 	bne.w	800a4de <_strtod_l+0xb9e>
 80099ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099cc:	b1d3      	cbz	r3, 8009a04 <_strtod_l+0xc4>
 80099ce:	4642      	mov	r2, r8
 80099d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099d4:	4610      	mov	r0, r2
 80099d6:	4619      	mov	r1, r3
 80099d8:	b01f      	add	sp, #124	; 0x7c
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	2a20      	cmp	r2, #32
 80099e0:	d1cd      	bne.n	800997e <_strtod_l+0x3e>
 80099e2:	3301      	adds	r3, #1
 80099e4:	9319      	str	r3, [sp, #100]	; 0x64
 80099e6:	e7bf      	b.n	8009968 <_strtod_l+0x28>
 80099e8:	2a2d      	cmp	r2, #45	; 0x2d
 80099ea:	d1c8      	bne.n	800997e <_strtod_l+0x3e>
 80099ec:	2201      	movs	r2, #1
 80099ee:	920a      	str	r2, [sp, #40]	; 0x28
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	9219      	str	r2, [sp, #100]	; 0x64
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1c3      	bne.n	8009982 <_strtod_l+0x42>
 80099fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099fc:	9619      	str	r6, [sp, #100]	; 0x64
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 856b 	bne.w	800a4da <_strtod_l+0xb9a>
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	e7e4      	b.n	80099d4 <_strtod_l+0x94>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	e7ef      	b.n	80099ee <_strtod_l+0xae>
 8009a0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a10:	b13a      	cbz	r2, 8009a22 <_strtod_l+0xe2>
 8009a12:	2135      	movs	r1, #53	; 0x35
 8009a14:	a81c      	add	r0, sp, #112	; 0x70
 8009a16:	f002 fc99 	bl	800c34c <__copybits>
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a1e:	f002 f861 	bl	800bae4 <_Bfree>
 8009a22:	3e01      	subs	r6, #1
 8009a24:	2e04      	cmp	r6, #4
 8009a26:	d806      	bhi.n	8009a36 <_strtod_l+0xf6>
 8009a28:	e8df f006 	tbb	[pc, r6]
 8009a2c:	1714030a 	.word	0x1714030a
 8009a30:	0a          	.byte	0x0a
 8009a31:	00          	.byte	0x00
 8009a32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009a36:	0721      	lsls	r1, r4, #28
 8009a38:	d5c3      	bpl.n	80099c2 <_strtod_l+0x82>
 8009a3a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009a3e:	e7c0      	b.n	80099c2 <_strtod_l+0x82>
 8009a40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a42:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009a46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a52:	e7f0      	b.n	8009a36 <_strtod_l+0xf6>
 8009a54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009bd0 <_strtod_l+0x290>
 8009a58:	e7ed      	b.n	8009a36 <_strtod_l+0xf6>
 8009a5a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8009a62:	e7e8      	b.n	8009a36 <_strtod_l+0xf6>
 8009a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	9219      	str	r2, [sp, #100]	; 0x64
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d0f9      	beq.n	8009a64 <_strtod_l+0x124>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0a6      	beq.n	80099c2 <_strtod_l+0x82>
 8009a74:	2301      	movs	r3, #1
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a7a:	220a      	movs	r2, #10
 8009a7c:	9308      	str	r3, [sp, #32]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	469b      	mov	fp, r3
 8009a82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009a86:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009a88:	7805      	ldrb	r5, [r0, #0]
 8009a8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009a8e:	b2d9      	uxtb	r1, r3
 8009a90:	2909      	cmp	r1, #9
 8009a92:	d927      	bls.n	8009ae4 <_strtod_l+0x1a4>
 8009a94:	4622      	mov	r2, r4
 8009a96:	4639      	mov	r1, r7
 8009a98:	f002 fefe 	bl	800c898 <strncmp>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d033      	beq.n	8009b08 <_strtod_l+0x1c8>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	465c      	mov	r4, fp
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	9004      	str	r0, [sp, #16]
 8009aaa:	2a65      	cmp	r2, #101	; 0x65
 8009aac:	d001      	beq.n	8009ab2 <_strtod_l+0x172>
 8009aae:	2a45      	cmp	r2, #69	; 0x45
 8009ab0:	d114      	bne.n	8009adc <_strtod_l+0x19c>
 8009ab2:	b91c      	cbnz	r4, 8009abc <_strtod_l+0x17c>
 8009ab4:	9a07      	ldr	r2, [sp, #28]
 8009ab6:	4302      	orrs	r2, r0
 8009ab8:	d09f      	beq.n	80099fa <_strtod_l+0xba>
 8009aba:	2400      	movs	r4, #0
 8009abc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009abe:	1c72      	adds	r2, r6, #1
 8009ac0:	9219      	str	r2, [sp, #100]	; 0x64
 8009ac2:	7872      	ldrb	r2, [r6, #1]
 8009ac4:	2a2b      	cmp	r2, #43	; 0x2b
 8009ac6:	d079      	beq.n	8009bbc <_strtod_l+0x27c>
 8009ac8:	2a2d      	cmp	r2, #45	; 0x2d
 8009aca:	f000 8083 	beq.w	8009bd4 <_strtod_l+0x294>
 8009ace:	2700      	movs	r7, #0
 8009ad0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ad4:	2909      	cmp	r1, #9
 8009ad6:	f240 8083 	bls.w	8009be0 <_strtod_l+0x2a0>
 8009ada:	9619      	str	r6, [sp, #100]	; 0x64
 8009adc:	2500      	movs	r5, #0
 8009ade:	e09f      	b.n	8009c20 <_strtod_l+0x2e0>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e7c8      	b.n	8009a76 <_strtod_l+0x136>
 8009ae4:	f1bb 0f08 	cmp.w	fp, #8
 8009ae8:	bfd5      	itete	le
 8009aea:	9906      	ldrle	r1, [sp, #24]
 8009aec:	9905      	ldrgt	r1, [sp, #20]
 8009aee:	fb02 3301 	mlale	r3, r2, r1, r3
 8009af2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009af6:	f100 0001 	add.w	r0, r0, #1
 8009afa:	bfd4      	ite	le
 8009afc:	9306      	strle	r3, [sp, #24]
 8009afe:	9305      	strgt	r3, [sp, #20]
 8009b00:	f10b 0b01 	add.w	fp, fp, #1
 8009b04:	9019      	str	r0, [sp, #100]	; 0x64
 8009b06:	e7be      	b.n	8009a86 <_strtod_l+0x146>
 8009b08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b0a:	191a      	adds	r2, r3, r4
 8009b0c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b0e:	5d1a      	ldrb	r2, [r3, r4]
 8009b10:	f1bb 0f00 	cmp.w	fp, #0
 8009b14:	d036      	beq.n	8009b84 <_strtod_l+0x244>
 8009b16:	465c      	mov	r4, fp
 8009b18:	9004      	str	r0, [sp, #16]
 8009b1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b1e:	2b09      	cmp	r3, #9
 8009b20:	d912      	bls.n	8009b48 <_strtod_l+0x208>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7c1      	b.n	8009aaa <_strtod_l+0x16a>
 8009b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b28:	3001      	adds	r0, #1
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b2e:	785a      	ldrb	r2, [r3, #1]
 8009b30:	2a30      	cmp	r2, #48	; 0x30
 8009b32:	d0f8      	beq.n	8009b26 <_strtod_l+0x1e6>
 8009b34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	f200 84d5 	bhi.w	800a4e8 <_strtod_l+0xba8>
 8009b3e:	9004      	str	r0, [sp, #16]
 8009b40:	2000      	movs	r0, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b46:	9308      	str	r3, [sp, #32]
 8009b48:	3a30      	subs	r2, #48	; 0x30
 8009b4a:	f100 0301 	add.w	r3, r0, #1
 8009b4e:	d013      	beq.n	8009b78 <_strtod_l+0x238>
 8009b50:	9904      	ldr	r1, [sp, #16]
 8009b52:	1905      	adds	r5, r0, r4
 8009b54:	4419      	add	r1, r3
 8009b56:	9104      	str	r1, [sp, #16]
 8009b58:	4623      	mov	r3, r4
 8009b5a:	210a      	movs	r1, #10
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	d113      	bne.n	8009b88 <_strtod_l+0x248>
 8009b60:	1823      	adds	r3, r4, r0
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	f104 0401 	add.w	r4, r4, #1
 8009b68:	4404      	add	r4, r0
 8009b6a:	dc1b      	bgt.n	8009ba4 <_strtod_l+0x264>
 8009b6c:	230a      	movs	r3, #10
 8009b6e:	9906      	ldr	r1, [sp, #24]
 8009b70:	fb03 2301 	mla	r3, r3, r1, r2
 8009b74:	9306      	str	r3, [sp, #24]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	1c51      	adds	r1, r2, #1
 8009b7e:	9119      	str	r1, [sp, #100]	; 0x64
 8009b80:	7852      	ldrb	r2, [r2, #1]
 8009b82:	e7ca      	b.n	8009b1a <_strtod_l+0x1da>
 8009b84:	4658      	mov	r0, fp
 8009b86:	e7d3      	b.n	8009b30 <_strtod_l+0x1f0>
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	dc04      	bgt.n	8009b96 <_strtod_l+0x256>
 8009b8c:	9f06      	ldr	r7, [sp, #24]
 8009b8e:	434f      	muls	r7, r1
 8009b90:	9706      	str	r7, [sp, #24]
 8009b92:	3301      	adds	r3, #1
 8009b94:	e7e2      	b.n	8009b5c <_strtod_l+0x21c>
 8009b96:	1c5f      	adds	r7, r3, #1
 8009b98:	2f10      	cmp	r7, #16
 8009b9a:	bfde      	ittt	le
 8009b9c:	9f05      	ldrle	r7, [sp, #20]
 8009b9e:	434f      	mulle	r7, r1
 8009ba0:	9705      	strle	r7, [sp, #20]
 8009ba2:	e7f6      	b.n	8009b92 <_strtod_l+0x252>
 8009ba4:	2c10      	cmp	r4, #16
 8009ba6:	bfdf      	itttt	le
 8009ba8:	230a      	movle	r3, #10
 8009baa:	9905      	ldrle	r1, [sp, #20]
 8009bac:	fb03 2301 	mlale	r3, r3, r1, r2
 8009bb0:	9305      	strle	r3, [sp, #20]
 8009bb2:	e7e0      	b.n	8009b76 <_strtod_l+0x236>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e77b      	b.n	8009ab4 <_strtod_l+0x174>
 8009bbc:	2700      	movs	r7, #0
 8009bbe:	1cb2      	adds	r2, r6, #2
 8009bc0:	9219      	str	r2, [sp, #100]	; 0x64
 8009bc2:	78b2      	ldrb	r2, [r6, #2]
 8009bc4:	e784      	b.n	8009ad0 <_strtod_l+0x190>
 8009bc6:	bf00      	nop
 8009bc8:	0801f0fc 	.word	0x0801f0fc
 8009bcc:	0801ee70 	.word	0x0801ee70
 8009bd0:	7ff00000 	.word	0x7ff00000
 8009bd4:	2701      	movs	r7, #1
 8009bd6:	e7f2      	b.n	8009bbe <_strtod_l+0x27e>
 8009bd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bda:	1c51      	adds	r1, r2, #1
 8009bdc:	9119      	str	r1, [sp, #100]	; 0x64
 8009bde:	7852      	ldrb	r2, [r2, #1]
 8009be0:	2a30      	cmp	r2, #48	; 0x30
 8009be2:	d0f9      	beq.n	8009bd8 <_strtod_l+0x298>
 8009be4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009be8:	2908      	cmp	r1, #8
 8009bea:	f63f af77 	bhi.w	8009adc <_strtod_l+0x19c>
 8009bee:	f04f 0e0a 	mov.w	lr, #10
 8009bf2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009bf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bfc:	1c51      	adds	r1, r2, #1
 8009bfe:	9119      	str	r1, [sp, #100]	; 0x64
 8009c00:	7852      	ldrb	r2, [r2, #1]
 8009c02:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009c06:	2d09      	cmp	r5, #9
 8009c08:	d935      	bls.n	8009c76 <_strtod_l+0x336>
 8009c0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c0c:	1b49      	subs	r1, r1, r5
 8009c0e:	2908      	cmp	r1, #8
 8009c10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009c14:	dc02      	bgt.n	8009c1c <_strtod_l+0x2dc>
 8009c16:	4565      	cmp	r5, ip
 8009c18:	bfa8      	it	ge
 8009c1a:	4665      	movge	r5, ip
 8009c1c:	b107      	cbz	r7, 8009c20 <_strtod_l+0x2e0>
 8009c1e:	426d      	negs	r5, r5
 8009c20:	2c00      	cmp	r4, #0
 8009c22:	d14c      	bne.n	8009cbe <_strtod_l+0x37e>
 8009c24:	9907      	ldr	r1, [sp, #28]
 8009c26:	4301      	orrs	r1, r0
 8009c28:	f47f aecb 	bne.w	80099c2 <_strtod_l+0x82>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f47f aee4 	bne.w	80099fa <_strtod_l+0xba>
 8009c32:	2a69      	cmp	r2, #105	; 0x69
 8009c34:	d026      	beq.n	8009c84 <_strtod_l+0x344>
 8009c36:	dc23      	bgt.n	8009c80 <_strtod_l+0x340>
 8009c38:	2a49      	cmp	r2, #73	; 0x49
 8009c3a:	d023      	beq.n	8009c84 <_strtod_l+0x344>
 8009c3c:	2a4e      	cmp	r2, #78	; 0x4e
 8009c3e:	f47f aedc 	bne.w	80099fa <_strtod_l+0xba>
 8009c42:	499d      	ldr	r1, [pc, #628]	; (8009eb8 <_strtod_l+0x578>)
 8009c44:	a819      	add	r0, sp, #100	; 0x64
 8009c46:	f001 fe23 	bl	800b890 <__match>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f aed5 	beq.w	80099fa <_strtod_l+0xba>
 8009c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b28      	cmp	r3, #40	; 0x28
 8009c56:	d12c      	bne.n	8009cb2 <_strtod_l+0x372>
 8009c58:	4998      	ldr	r1, [pc, #608]	; (8009ebc <_strtod_l+0x57c>)
 8009c5a:	aa1c      	add	r2, sp, #112	; 0x70
 8009c5c:	a819      	add	r0, sp, #100	; 0x64
 8009c5e:	f001 fe2b 	bl	800b8b8 <__hexnan>
 8009c62:	2805      	cmp	r0, #5
 8009c64:	d125      	bne.n	8009cb2 <_strtod_l+0x372>
 8009c66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009c6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009c70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009c74:	e6a5      	b.n	80099c2 <_strtod_l+0x82>
 8009c76:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009c7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009c7e:	e7bc      	b.n	8009bfa <_strtod_l+0x2ba>
 8009c80:	2a6e      	cmp	r2, #110	; 0x6e
 8009c82:	e7dc      	b.n	8009c3e <_strtod_l+0x2fe>
 8009c84:	498e      	ldr	r1, [pc, #568]	; (8009ec0 <_strtod_l+0x580>)
 8009c86:	a819      	add	r0, sp, #100	; 0x64
 8009c88:	f001 fe02 	bl	800b890 <__match>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f43f aeb4 	beq.w	80099fa <_strtod_l+0xba>
 8009c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c94:	498b      	ldr	r1, [pc, #556]	; (8009ec4 <_strtod_l+0x584>)
 8009c96:	3b01      	subs	r3, #1
 8009c98:	a819      	add	r0, sp, #100	; 0x64
 8009c9a:	9319      	str	r3, [sp, #100]	; 0x64
 8009c9c:	f001 fdf8 	bl	800b890 <__match>
 8009ca0:	b910      	cbnz	r0, 8009ca8 <_strtod_l+0x368>
 8009ca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	9319      	str	r3, [sp, #100]	; 0x64
 8009ca8:	f04f 0800 	mov.w	r8, #0
 8009cac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009ec8 <_strtod_l+0x588>
 8009cb0:	e687      	b.n	80099c2 <_strtod_l+0x82>
 8009cb2:	4886      	ldr	r0, [pc, #536]	; (8009ecc <_strtod_l+0x58c>)
 8009cb4:	f002 fdda 	bl	800c86c <nan>
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	e681      	b.n	80099c2 <_strtod_l+0x82>
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	f1bb 0f00 	cmp.w	fp, #0
 8009cc4:	bf08      	it	eq
 8009cc6:	46a3      	moveq	fp, r4
 8009cc8:	1aeb      	subs	r3, r5, r3
 8009cca:	2c10      	cmp	r4, #16
 8009ccc:	9806      	ldr	r0, [sp, #24]
 8009cce:	4626      	mov	r6, r4
 8009cd0:	9307      	str	r3, [sp, #28]
 8009cd2:	bfa8      	it	ge
 8009cd4:	2610      	movge	r6, #16
 8009cd6:	f7fc f9c5 	bl	8006064 <__aeabi_ui2d>
 8009cda:	2c09      	cmp	r4, #9
 8009cdc:	4680      	mov	r8, r0
 8009cde:	4689      	mov	r9, r1
 8009ce0:	dd13      	ble.n	8009d0a <_strtod_l+0x3ca>
 8009ce2:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <_strtod_l+0x590>)
 8009ce4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ce8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cec:	f7fc fa34 	bl	8006158 <__aeabi_dmul>
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	9805      	ldr	r0, [sp, #20]
 8009cf4:	4689      	mov	r9, r1
 8009cf6:	f7fc f9b5 	bl	8006064 <__aeabi_ui2d>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4640      	mov	r0, r8
 8009d00:	4649      	mov	r1, r9
 8009d02:	f7fc f873 	bl	8005dec <__adddf3>
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	2c0f      	cmp	r4, #15
 8009d0c:	dc36      	bgt.n	8009d7c <_strtod_l+0x43c>
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f43f ae56 	beq.w	80099c2 <_strtod_l+0x82>
 8009d16:	dd22      	ble.n	8009d5e <_strtod_l+0x41e>
 8009d18:	2b16      	cmp	r3, #22
 8009d1a:	dc09      	bgt.n	8009d30 <_strtod_l+0x3f0>
 8009d1c:	496c      	ldr	r1, [pc, #432]	; (8009ed0 <_strtod_l+0x590>)
 8009d1e:	4642      	mov	r2, r8
 8009d20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d24:	464b      	mov	r3, r9
 8009d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d2a:	f7fc fa15 	bl	8006158 <__aeabi_dmul>
 8009d2e:	e7c3      	b.n	8009cb8 <_strtod_l+0x378>
 8009d30:	9a07      	ldr	r2, [sp, #28]
 8009d32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009d36:	4293      	cmp	r3, r2
 8009d38:	db20      	blt.n	8009d7c <_strtod_l+0x43c>
 8009d3a:	4d65      	ldr	r5, [pc, #404]	; (8009ed0 <_strtod_l+0x590>)
 8009d3c:	f1c4 040f 	rsb	r4, r4, #15
 8009d40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009d44:	4642      	mov	r2, r8
 8009d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f7fc fa04 	bl	8006158 <__aeabi_dmul>
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	1b1c      	subs	r4, r3, r4
 8009d54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d5c:	e7e5      	b.n	8009d2a <_strtod_l+0x3ea>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	3316      	adds	r3, #22
 8009d62:	db0b      	blt.n	8009d7c <_strtod_l+0x43c>
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	4640      	mov	r0, r8
 8009d68:	1b5d      	subs	r5, r3, r5
 8009d6a:	4b59      	ldr	r3, [pc, #356]	; (8009ed0 <_strtod_l+0x590>)
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d76:	f7fc fb19 	bl	80063ac <__aeabi_ddiv>
 8009d7a:	e79d      	b.n	8009cb8 <_strtod_l+0x378>
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	1ba6      	subs	r6, r4, r6
 8009d80:	441e      	add	r6, r3
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	dd74      	ble.n	8009e70 <_strtod_l+0x530>
 8009d86:	f016 030f 	ands.w	r3, r6, #15
 8009d8a:	d00a      	beq.n	8009da2 <_strtod_l+0x462>
 8009d8c:	4950      	ldr	r1, [pc, #320]	; (8009ed0 <_strtod_l+0x590>)
 8009d8e:	4642      	mov	r2, r8
 8009d90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d98:	464b      	mov	r3, r9
 8009d9a:	f7fc f9dd 	bl	8006158 <__aeabi_dmul>
 8009d9e:	4680      	mov	r8, r0
 8009da0:	4689      	mov	r9, r1
 8009da2:	f036 060f 	bics.w	r6, r6, #15
 8009da6:	d052      	beq.n	8009e4e <_strtod_l+0x50e>
 8009da8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009dac:	dd27      	ble.n	8009dfe <_strtod_l+0x4be>
 8009dae:	f04f 0b00 	mov.w	fp, #0
 8009db2:	f8cd b010 	str.w	fp, [sp, #16]
 8009db6:	f8cd b020 	str.w	fp, [sp, #32]
 8009dba:	f8cd b018 	str.w	fp, [sp, #24]
 8009dbe:	2322      	movs	r3, #34	; 0x22
 8009dc0:	f04f 0800 	mov.w	r8, #0
 8009dc4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009ec8 <_strtod_l+0x588>
 8009dc8:	f8ca 3000 	str.w	r3, [sl]
 8009dcc:	9b08      	ldr	r3, [sp, #32]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f43f adf7 	beq.w	80099c2 <_strtod_l+0x82>
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009dd8:	f001 fe84 	bl	800bae4 <_Bfree>
 8009ddc:	4650      	mov	r0, sl
 8009dde:	9906      	ldr	r1, [sp, #24]
 8009de0:	f001 fe80 	bl	800bae4 <_Bfree>
 8009de4:	4650      	mov	r0, sl
 8009de6:	9904      	ldr	r1, [sp, #16]
 8009de8:	f001 fe7c 	bl	800bae4 <_Bfree>
 8009dec:	4650      	mov	r0, sl
 8009dee:	9908      	ldr	r1, [sp, #32]
 8009df0:	f001 fe78 	bl	800bae4 <_Bfree>
 8009df4:	4659      	mov	r1, fp
 8009df6:	4650      	mov	r0, sl
 8009df8:	f001 fe74 	bl	800bae4 <_Bfree>
 8009dfc:	e5e1      	b.n	80099c2 <_strtod_l+0x82>
 8009dfe:	4b35      	ldr	r3, [pc, #212]	; (8009ed4 <_strtod_l+0x594>)
 8009e00:	4640      	mov	r0, r8
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	2300      	movs	r3, #0
 8009e06:	4649      	mov	r1, r9
 8009e08:	461f      	mov	r7, r3
 8009e0a:	1136      	asrs	r6, r6, #4
 8009e0c:	2e01      	cmp	r6, #1
 8009e0e:	dc21      	bgt.n	8009e54 <_strtod_l+0x514>
 8009e10:	b10b      	cbz	r3, 8009e16 <_strtod_l+0x4d6>
 8009e12:	4680      	mov	r8, r0
 8009e14:	4689      	mov	r9, r1
 8009e16:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <_strtod_l+0x594>)
 8009e18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009e1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e20:	4642      	mov	r2, r8
 8009e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e26:	464b      	mov	r3, r9
 8009e28:	f7fc f996 	bl	8006158 <__aeabi_dmul>
 8009e2c:	4b26      	ldr	r3, [pc, #152]	; (8009ec8 <_strtod_l+0x588>)
 8009e2e:	460a      	mov	r2, r1
 8009e30:	400b      	ands	r3, r1
 8009e32:	4929      	ldr	r1, [pc, #164]	; (8009ed8 <_strtod_l+0x598>)
 8009e34:	4680      	mov	r8, r0
 8009e36:	428b      	cmp	r3, r1
 8009e38:	d8b9      	bhi.n	8009dae <_strtod_l+0x46e>
 8009e3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e3e:	428b      	cmp	r3, r1
 8009e40:	bf86      	itte	hi
 8009e42:	f04f 38ff 	movhi.w	r8, #4294967295
 8009e46:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009edc <_strtod_l+0x59c>
 8009e4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9305      	str	r3, [sp, #20]
 8009e52:	e07f      	b.n	8009f54 <_strtod_l+0x614>
 8009e54:	07f2      	lsls	r2, r6, #31
 8009e56:	d505      	bpl.n	8009e64 <_strtod_l+0x524>
 8009e58:	9b05      	ldr	r3, [sp, #20]
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7fc f97b 	bl	8006158 <__aeabi_dmul>
 8009e62:	2301      	movs	r3, #1
 8009e64:	9a05      	ldr	r2, [sp, #20]
 8009e66:	3701      	adds	r7, #1
 8009e68:	3208      	adds	r2, #8
 8009e6a:	1076      	asrs	r6, r6, #1
 8009e6c:	9205      	str	r2, [sp, #20]
 8009e6e:	e7cd      	b.n	8009e0c <_strtod_l+0x4cc>
 8009e70:	d0ed      	beq.n	8009e4e <_strtod_l+0x50e>
 8009e72:	4276      	negs	r6, r6
 8009e74:	f016 020f 	ands.w	r2, r6, #15
 8009e78:	d00a      	beq.n	8009e90 <_strtod_l+0x550>
 8009e7a:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <_strtod_l+0x590>)
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e82:	4649      	mov	r1, r9
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7fc fa90 	bl	80063ac <__aeabi_ddiv>
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	4689      	mov	r9, r1
 8009e90:	1136      	asrs	r6, r6, #4
 8009e92:	d0dc      	beq.n	8009e4e <_strtod_l+0x50e>
 8009e94:	2e1f      	cmp	r6, #31
 8009e96:	dd23      	ble.n	8009ee0 <_strtod_l+0x5a0>
 8009e98:	f04f 0b00 	mov.w	fp, #0
 8009e9c:	f8cd b010 	str.w	fp, [sp, #16]
 8009ea0:	f8cd b020 	str.w	fp, [sp, #32]
 8009ea4:	f8cd b018 	str.w	fp, [sp, #24]
 8009ea8:	2322      	movs	r3, #34	; 0x22
 8009eaa:	f04f 0800 	mov.w	r8, #0
 8009eae:	f04f 0900 	mov.w	r9, #0
 8009eb2:	f8ca 3000 	str.w	r3, [sl]
 8009eb6:	e789      	b.n	8009dcc <_strtod_l+0x48c>
 8009eb8:	0801ee41 	.word	0x0801ee41
 8009ebc:	0801ee84 	.word	0x0801ee84
 8009ec0:	0801ee39 	.word	0x0801ee39
 8009ec4:	0801efc4 	.word	0x0801efc4
 8009ec8:	7ff00000 	.word	0x7ff00000
 8009ecc:	0801f2d8 	.word	0x0801f2d8
 8009ed0:	0801f1b8 	.word	0x0801f1b8
 8009ed4:	0801f190 	.word	0x0801f190
 8009ed8:	7ca00000 	.word	0x7ca00000
 8009edc:	7fefffff 	.word	0x7fefffff
 8009ee0:	f016 0310 	ands.w	r3, r6, #16
 8009ee4:	bf18      	it	ne
 8009ee6:	236a      	movne	r3, #106	; 0x6a
 8009ee8:	4640      	mov	r0, r8
 8009eea:	9305      	str	r3, [sp, #20]
 8009eec:	4649      	mov	r1, r9
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4fb0      	ldr	r7, [pc, #704]	; (800a1b4 <_strtod_l+0x874>)
 8009ef2:	07f2      	lsls	r2, r6, #31
 8009ef4:	d504      	bpl.n	8009f00 <_strtod_l+0x5c0>
 8009ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efa:	f7fc f92d 	bl	8006158 <__aeabi_dmul>
 8009efe:	2301      	movs	r3, #1
 8009f00:	1076      	asrs	r6, r6, #1
 8009f02:	f107 0708 	add.w	r7, r7, #8
 8009f06:	d1f4      	bne.n	8009ef2 <_strtod_l+0x5b2>
 8009f08:	b10b      	cbz	r3, 8009f0e <_strtod_l+0x5ce>
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	9b05      	ldr	r3, [sp, #20]
 8009f10:	b1c3      	cbz	r3, 8009f44 <_strtod_l+0x604>
 8009f12:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009f16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	dd11      	ble.n	8009f44 <_strtod_l+0x604>
 8009f20:	2b1f      	cmp	r3, #31
 8009f22:	f340 8127 	ble.w	800a174 <_strtod_l+0x834>
 8009f26:	2b34      	cmp	r3, #52	; 0x34
 8009f28:	bfd8      	it	le
 8009f2a:	f04f 33ff 	movle.w	r3, #4294967295
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	bfcf      	iteee	gt
 8009f34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009f38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f3c:	fa03 f202 	lslle.w	r2, r3, r2
 8009f40:	ea02 0901 	andle.w	r9, r2, r1
 8009f44:	2200      	movs	r2, #0
 8009f46:	2300      	movs	r3, #0
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	f7fc fb6c 	bl	8006628 <__aeabi_dcmpeq>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d1a1      	bne.n	8009e98 <_strtod_l+0x558>
 8009f54:	9b06      	ldr	r3, [sp, #24]
 8009f56:	465a      	mov	r2, fp
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	9908      	ldr	r1, [sp, #32]
 8009f60:	f001 fe28 	bl	800bbb4 <__s2b>
 8009f64:	9008      	str	r0, [sp, #32]
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f af21 	beq.w	8009dae <_strtod_l+0x46e>
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	f04f 0b00 	mov.w	fp, #0
 8009f72:	1b5d      	subs	r5, r3, r5
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	f8cd b010 	str.w	fp, [sp, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bfb4      	ite	lt
 8009f7e:	462b      	movlt	r3, r5
 8009f80:	2300      	movge	r3, #0
 8009f82:	930e      	str	r3, [sp, #56]	; 0x38
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f8a:	9314      	str	r3, [sp, #80]	; 0x50
 8009f8c:	9b08      	ldr	r3, [sp, #32]
 8009f8e:	4650      	mov	r0, sl
 8009f90:	6859      	ldr	r1, [r3, #4]
 8009f92:	f001 fd67 	bl	800ba64 <_Balloc>
 8009f96:	9006      	str	r0, [sp, #24]
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f43f af10 	beq.w	8009dbe <_strtod_l+0x47e>
 8009f9e:	9b08      	ldr	r3, [sp, #32]
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	f103 010c 	add.w	r1, r3, #12
 8009fa8:	3202      	adds	r2, #2
 8009faa:	0092      	lsls	r2, r2, #2
 8009fac:	f001 fd4c 	bl	800ba48 <memcpy>
 8009fb0:	ab1c      	add	r3, sp, #112	; 0x70
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	ab1b      	add	r3, sp, #108	; 0x6c
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4642      	mov	r2, r8
 8009fba:	464b      	mov	r3, r9
 8009fbc:	4650      	mov	r0, sl
 8009fbe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009fc2:	f002 f939 	bl	800c238 <__d2b>
 8009fc6:	901a      	str	r0, [sp, #104]	; 0x68
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f43f aef8 	beq.w	8009dbe <_strtod_l+0x47e>
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	f001 fe87 	bl	800bce4 <__i2b>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	9004      	str	r0, [sp, #16]
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f43f aeef 	beq.w	8009dbe <_strtod_l+0x47e>
 8009fe0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009fe2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009fe4:	2d00      	cmp	r5, #0
 8009fe6:	bfab      	itete	ge
 8009fe8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009fea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009fec:	18ee      	addge	r6, r5, r3
 8009fee:	1b5c      	sublt	r4, r3, r5
 8009ff0:	9b05      	ldr	r3, [sp, #20]
 8009ff2:	bfa8      	it	ge
 8009ff4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009ff6:	eba5 0503 	sub.w	r5, r5, r3
 8009ffa:	4415      	add	r5, r2
 8009ffc:	4b6e      	ldr	r3, [pc, #440]	; (800a1b8 <_strtod_l+0x878>)
 8009ffe:	f105 35ff 	add.w	r5, r5, #4294967295
 800a002:	bfb8      	it	lt
 800a004:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a006:	429d      	cmp	r5, r3
 800a008:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a00c:	f280 80c4 	bge.w	800a198 <_strtod_l+0x858>
 800a010:	1b5b      	subs	r3, r3, r5
 800a012:	2b1f      	cmp	r3, #31
 800a014:	f04f 0701 	mov.w	r7, #1
 800a018:	eba2 0203 	sub.w	r2, r2, r3
 800a01c:	f300 80b1 	bgt.w	800a182 <_strtod_l+0x842>
 800a020:	2500      	movs	r5, #0
 800a022:	fa07 f303 	lsl.w	r3, r7, r3
 800a026:	930f      	str	r3, [sp, #60]	; 0x3c
 800a028:	18b7      	adds	r7, r6, r2
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	42be      	cmp	r6, r7
 800a02e:	4414      	add	r4, r2
 800a030:	441c      	add	r4, r3
 800a032:	4633      	mov	r3, r6
 800a034:	bfa8      	it	ge
 800a036:	463b      	movge	r3, r7
 800a038:	42a3      	cmp	r3, r4
 800a03a:	bfa8      	it	ge
 800a03c:	4623      	movge	r3, r4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfc2      	ittt	gt
 800a042:	1aff      	subgt	r7, r7, r3
 800a044:	1ae4      	subgt	r4, r4, r3
 800a046:	1af6      	subgt	r6, r6, r3
 800a048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd17      	ble.n	800a07e <_strtod_l+0x73e>
 800a04e:	461a      	mov	r2, r3
 800a050:	4650      	mov	r0, sl
 800a052:	9904      	ldr	r1, [sp, #16]
 800a054:	f001 ff04 	bl	800be60 <__pow5mult>
 800a058:	9004      	str	r0, [sp, #16]
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f43f aeaf 	beq.w	8009dbe <_strtod_l+0x47e>
 800a060:	4601      	mov	r1, r0
 800a062:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a064:	4650      	mov	r0, sl
 800a066:	f001 fe53 	bl	800bd10 <__multiply>
 800a06a:	9009      	str	r0, [sp, #36]	; 0x24
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f43f aea6 	beq.w	8009dbe <_strtod_l+0x47e>
 800a072:	4650      	mov	r0, sl
 800a074:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a076:	f001 fd35 	bl	800bae4 <_Bfree>
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	931a      	str	r3, [sp, #104]	; 0x68
 800a07e:	2f00      	cmp	r7, #0
 800a080:	f300 808e 	bgt.w	800a1a0 <_strtod_l+0x860>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	2b00      	cmp	r3, #0
 800a088:	dd08      	ble.n	800a09c <_strtod_l+0x75c>
 800a08a:	4650      	mov	r0, sl
 800a08c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a08e:	9906      	ldr	r1, [sp, #24]
 800a090:	f001 fee6 	bl	800be60 <__pow5mult>
 800a094:	9006      	str	r0, [sp, #24]
 800a096:	2800      	cmp	r0, #0
 800a098:	f43f ae91 	beq.w	8009dbe <_strtod_l+0x47e>
 800a09c:	2c00      	cmp	r4, #0
 800a09e:	dd08      	ble.n	800a0b2 <_strtod_l+0x772>
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	9906      	ldr	r1, [sp, #24]
 800a0a6:	f001 ff35 	bl	800bf14 <__lshift>
 800a0aa:	9006      	str	r0, [sp, #24]
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f43f ae86 	beq.w	8009dbe <_strtod_l+0x47e>
 800a0b2:	2e00      	cmp	r6, #0
 800a0b4:	dd08      	ble.n	800a0c8 <_strtod_l+0x788>
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	9904      	ldr	r1, [sp, #16]
 800a0bc:	f001 ff2a 	bl	800bf14 <__lshift>
 800a0c0:	9004      	str	r0, [sp, #16]
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f43f ae7b 	beq.w	8009dbe <_strtod_l+0x47e>
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	9a06      	ldr	r2, [sp, #24]
 800a0cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0ce:	f001 ffad 	bl	800c02c <__mdiff>
 800a0d2:	4683      	mov	fp, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f43f ae72 	beq.w	8009dbe <_strtod_l+0x47e>
 800a0da:	2400      	movs	r4, #0
 800a0dc:	68c3      	ldr	r3, [r0, #12]
 800a0de:	9904      	ldr	r1, [sp, #16]
 800a0e0:	60c4      	str	r4, [r0, #12]
 800a0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e4:	f001 ff86 	bl	800bff4 <__mcmp>
 800a0e8:	42a0      	cmp	r0, r4
 800a0ea:	da6b      	bge.n	800a1c4 <_strtod_l+0x884>
 800a0ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ee:	ea53 0308 	orrs.w	r3, r3, r8
 800a0f2:	f040 8091 	bne.w	800a218 <_strtod_l+0x8d8>
 800a0f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f040 808c 	bne.w	800a218 <_strtod_l+0x8d8>
 800a100:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a104:	0d1b      	lsrs	r3, r3, #20
 800a106:	051b      	lsls	r3, r3, #20
 800a108:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a10c:	f240 8084 	bls.w	800a218 <_strtod_l+0x8d8>
 800a110:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a114:	b91b      	cbnz	r3, 800a11e <_strtod_l+0x7de>
 800a116:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	dd7c      	ble.n	800a218 <_strtod_l+0x8d8>
 800a11e:	4659      	mov	r1, fp
 800a120:	2201      	movs	r2, #1
 800a122:	4650      	mov	r0, sl
 800a124:	f001 fef6 	bl	800bf14 <__lshift>
 800a128:	9904      	ldr	r1, [sp, #16]
 800a12a:	4683      	mov	fp, r0
 800a12c:	f001 ff62 	bl	800bff4 <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	dd71      	ble.n	800a218 <_strtod_l+0x8d8>
 800a134:	9905      	ldr	r1, [sp, #20]
 800a136:	464b      	mov	r3, r9
 800a138:	4a20      	ldr	r2, [pc, #128]	; (800a1bc <_strtod_l+0x87c>)
 800a13a:	2900      	cmp	r1, #0
 800a13c:	f000 808c 	beq.w	800a258 <_strtod_l+0x918>
 800a140:	ea02 0109 	and.w	r1, r2, r9
 800a144:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a148:	f300 8086 	bgt.w	800a258 <_strtod_l+0x918>
 800a14c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a150:	f77f aeaa 	ble.w	8009ea8 <_strtod_l+0x568>
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	4b19      	ldr	r3, [pc, #100]	; (800a1c0 <_strtod_l+0x880>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	f7fb fffc 	bl	8006158 <__aeabi_dmul>
 800a160:	460b      	mov	r3, r1
 800a162:	4303      	orrs	r3, r0
 800a164:	bf08      	it	eq
 800a166:	2322      	moveq	r3, #34	; 0x22
 800a168:	4680      	mov	r8, r0
 800a16a:	4689      	mov	r9, r1
 800a16c:	bf08      	it	eq
 800a16e:	f8ca 3000 	streq.w	r3, [sl]
 800a172:	e62f      	b.n	8009dd4 <_strtod_l+0x494>
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	ea03 0808 	and.w	r8, r3, r8
 800a180:	e6e0      	b.n	8009f44 <_strtod_l+0x604>
 800a182:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a186:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a18a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a18e:	35e2      	adds	r5, #226	; 0xe2
 800a190:	fa07 f505 	lsl.w	r5, r7, r5
 800a194:	970f      	str	r7, [sp, #60]	; 0x3c
 800a196:	e747      	b.n	800a028 <_strtod_l+0x6e8>
 800a198:	2301      	movs	r3, #1
 800a19a:	2500      	movs	r5, #0
 800a19c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a19e:	e743      	b.n	800a028 <_strtod_l+0x6e8>
 800a1a0:	463a      	mov	r2, r7
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1a6:	f001 feb5 	bl	800bf14 <__lshift>
 800a1aa:	901a      	str	r0, [sp, #104]	; 0x68
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f47f af69 	bne.w	800a084 <_strtod_l+0x744>
 800a1b2:	e604      	b.n	8009dbe <_strtod_l+0x47e>
 800a1b4:	0801ee98 	.word	0x0801ee98
 800a1b8:	fffffc02 	.word	0xfffffc02
 800a1bc:	7ff00000 	.word	0x7ff00000
 800a1c0:	39500000 	.word	0x39500000
 800a1c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1c8:	d165      	bne.n	800a296 <_strtod_l+0x956>
 800a1ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1d0:	b35a      	cbz	r2, 800a22a <_strtod_l+0x8ea>
 800a1d2:	4a99      	ldr	r2, [pc, #612]	; (800a438 <_strtod_l+0xaf8>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d12b      	bne.n	800a230 <_strtod_l+0x8f0>
 800a1d8:	9b05      	ldr	r3, [sp, #20]
 800a1da:	4641      	mov	r1, r8
 800a1dc:	b303      	cbz	r3, 800a220 <_strtod_l+0x8e0>
 800a1de:	464a      	mov	r2, r9
 800a1e0:	4b96      	ldr	r3, [pc, #600]	; (800a43c <_strtod_l+0xafc>)
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	d81b      	bhi.n	800a226 <_strtod_l+0x8e6>
 800a1ee:	0d1b      	lsrs	r3, r3, #20
 800a1f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d119      	bne.n	800a230 <_strtod_l+0x8f0>
 800a1fc:	4b90      	ldr	r3, [pc, #576]	; (800a440 <_strtod_l+0xb00>)
 800a1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a200:	429a      	cmp	r2, r3
 800a202:	d102      	bne.n	800a20a <_strtod_l+0x8ca>
 800a204:	3101      	adds	r1, #1
 800a206:	f43f adda 	beq.w	8009dbe <_strtod_l+0x47e>
 800a20a:	f04f 0800 	mov.w	r8, #0
 800a20e:	4b8b      	ldr	r3, [pc, #556]	; (800a43c <_strtod_l+0xafc>)
 800a210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a212:	401a      	ands	r2, r3
 800a214:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a218:	9b05      	ldr	r3, [sp, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d19a      	bne.n	800a154 <_strtod_l+0x814>
 800a21e:	e5d9      	b.n	8009dd4 <_strtod_l+0x494>
 800a220:	f04f 33ff 	mov.w	r3, #4294967295
 800a224:	e7e8      	b.n	800a1f8 <_strtod_l+0x8b8>
 800a226:	4613      	mov	r3, r2
 800a228:	e7e6      	b.n	800a1f8 <_strtod_l+0x8b8>
 800a22a:	ea53 0308 	orrs.w	r3, r3, r8
 800a22e:	d081      	beq.n	800a134 <_strtod_l+0x7f4>
 800a230:	b1e5      	cbz	r5, 800a26c <_strtod_l+0x92c>
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	421d      	tst	r5, r3
 800a236:	d0ef      	beq.n	800a218 <_strtod_l+0x8d8>
 800a238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23a:	4640      	mov	r0, r8
 800a23c:	4649      	mov	r1, r9
 800a23e:	9a05      	ldr	r2, [sp, #20]
 800a240:	b1c3      	cbz	r3, 800a274 <_strtod_l+0x934>
 800a242:	f7ff fb5b 	bl	80098fc <sulp>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a24e:	f7fb fdcd 	bl	8005dec <__adddf3>
 800a252:	4680      	mov	r8, r0
 800a254:	4689      	mov	r9, r1
 800a256:	e7df      	b.n	800a218 <_strtod_l+0x8d8>
 800a258:	4013      	ands	r3, r2
 800a25a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a25e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a262:	f04f 38ff 	mov.w	r8, #4294967295
 800a266:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a26a:	e7d5      	b.n	800a218 <_strtod_l+0x8d8>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26e:	ea13 0f08 	tst.w	r3, r8
 800a272:	e7e0      	b.n	800a236 <_strtod_l+0x8f6>
 800a274:	f7ff fb42 	bl	80098fc <sulp>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a280:	f7fb fdb2 	bl	8005de8 <__aeabi_dsub>
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	4680      	mov	r8, r0
 800a28a:	4689      	mov	r9, r1
 800a28c:	f7fc f9cc 	bl	8006628 <__aeabi_dcmpeq>
 800a290:	2800      	cmp	r0, #0
 800a292:	d0c1      	beq.n	800a218 <_strtod_l+0x8d8>
 800a294:	e608      	b.n	8009ea8 <_strtod_l+0x568>
 800a296:	4658      	mov	r0, fp
 800a298:	9904      	ldr	r1, [sp, #16]
 800a29a:	f002 f829 	bl	800c2f0 <__ratio>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	f7fc f9d2 	bl	8006650 <__aeabi_dcmple>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d070      	beq.n	800a392 <_strtod_l+0xa52>
 800a2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d042      	beq.n	800a33c <_strtod_l+0x9fc>
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	4f62      	ldr	r7, [pc, #392]	; (800a444 <_strtod_l+0xb04>)
 800a2ba:	4d62      	ldr	r5, [pc, #392]	; (800a444 <_strtod_l+0xb04>)
 800a2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2c2:	0d1b      	lsrs	r3, r3, #20
 800a2c4:	051b      	lsls	r3, r3, #20
 800a2c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ca:	4b5f      	ldr	r3, [pc, #380]	; (800a448 <_strtod_l+0xb08>)
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	f040 80c3 	bne.w	800a458 <_strtod_l+0xb18>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a2da:	4649      	mov	r1, r9
 800a2dc:	f001 ff32 	bl	800c144 <__ulp>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7fb ff36 	bl	8006158 <__aeabi_dmul>
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	f7fb fd7c 	bl	8005dec <__adddf3>
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4951      	ldr	r1, [pc, #324]	; (800a43c <_strtod_l+0xafc>)
 800a2f8:	4a54      	ldr	r2, [pc, #336]	; (800a44c <_strtod_l+0xb0c>)
 800a2fa:	4019      	ands	r1, r3
 800a2fc:	4291      	cmp	r1, r2
 800a2fe:	4680      	mov	r8, r0
 800a300:	d95d      	bls.n	800a3be <_strtod_l+0xa7e>
 800a302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a304:	4b4e      	ldr	r3, [pc, #312]	; (800a440 <_strtod_l+0xb00>)
 800a306:	429a      	cmp	r2, r3
 800a308:	d103      	bne.n	800a312 <_strtod_l+0x9d2>
 800a30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a30c:	3301      	adds	r3, #1
 800a30e:	f43f ad56 	beq.w	8009dbe <_strtod_l+0x47e>
 800a312:	f04f 38ff 	mov.w	r8, #4294967295
 800a316:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a440 <_strtod_l+0xb00>
 800a31a:	4650      	mov	r0, sl
 800a31c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a31e:	f001 fbe1 	bl	800bae4 <_Bfree>
 800a322:	4650      	mov	r0, sl
 800a324:	9906      	ldr	r1, [sp, #24]
 800a326:	f001 fbdd 	bl	800bae4 <_Bfree>
 800a32a:	4650      	mov	r0, sl
 800a32c:	9904      	ldr	r1, [sp, #16]
 800a32e:	f001 fbd9 	bl	800bae4 <_Bfree>
 800a332:	4659      	mov	r1, fp
 800a334:	4650      	mov	r0, sl
 800a336:	f001 fbd5 	bl	800bae4 <_Bfree>
 800a33a:	e627      	b.n	8009f8c <_strtod_l+0x64c>
 800a33c:	f1b8 0f00 	cmp.w	r8, #0
 800a340:	d119      	bne.n	800a376 <_strtod_l+0xa36>
 800a342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a348:	b9e3      	cbnz	r3, 800a384 <_strtod_l+0xa44>
 800a34a:	2200      	movs	r2, #0
 800a34c:	4630      	mov	r0, r6
 800a34e:	4639      	mov	r1, r7
 800a350:	4b3c      	ldr	r3, [pc, #240]	; (800a444 <_strtod_l+0xb04>)
 800a352:	f7fc f973 	bl	800663c <__aeabi_dcmplt>
 800a356:	b9c8      	cbnz	r0, 800a38c <_strtod_l+0xa4c>
 800a358:	2200      	movs	r2, #0
 800a35a:	4630      	mov	r0, r6
 800a35c:	4639      	mov	r1, r7
 800a35e:	4b3c      	ldr	r3, [pc, #240]	; (800a450 <_strtod_l+0xb10>)
 800a360:	f7fb fefa 	bl	8006158 <__aeabi_dmul>
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a36c:	9416      	str	r4, [sp, #88]	; 0x58
 800a36e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a370:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a374:	e7a2      	b.n	800a2bc <_strtod_l+0x97c>
 800a376:	f1b8 0f01 	cmp.w	r8, #1
 800a37a:	d103      	bne.n	800a384 <_strtod_l+0xa44>
 800a37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f43f ad92 	beq.w	8009ea8 <_strtod_l+0x568>
 800a384:	2600      	movs	r6, #0
 800a386:	2400      	movs	r4, #0
 800a388:	4f32      	ldr	r7, [pc, #200]	; (800a454 <_strtod_l+0xb14>)
 800a38a:	e796      	b.n	800a2ba <_strtod_l+0x97a>
 800a38c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a38e:	4d30      	ldr	r5, [pc, #192]	; (800a450 <_strtod_l+0xb10>)
 800a390:	e7ea      	b.n	800a368 <_strtod_l+0xa28>
 800a392:	4b2f      	ldr	r3, [pc, #188]	; (800a450 <_strtod_l+0xb10>)
 800a394:	2200      	movs	r2, #0
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7fb fedd 	bl	8006158 <__aeabi_dmul>
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	b933      	cbnz	r3, 800a3b4 <_strtod_l+0xa74>
 800a3a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3aa:	9010      	str	r0, [sp, #64]	; 0x40
 800a3ac:	9311      	str	r3, [sp, #68]	; 0x44
 800a3ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a3b2:	e783      	b.n	800a2bc <_strtod_l+0x97c>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a3bc:	e7f7      	b.n	800a3ae <_strtod_l+0xa6e>
 800a3be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a3c2:	9b05      	ldr	r3, [sp, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1a8      	bne.n	800a31a <_strtod_l+0x9da>
 800a3c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3ce:	0d1b      	lsrs	r3, r3, #20
 800a3d0:	051b      	lsls	r3, r3, #20
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d1a1      	bne.n	800a31a <_strtod_l+0x9da>
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7fc fa7b 	bl	80068d4 <__aeabi_d2lz>
 800a3de:	f7fb fe8d 	bl	80060fc <__aeabi_l2d>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7fb fcfd 	bl	8005de8 <__aeabi_dsub>
 800a3ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3f4:	ea43 0308 	orr.w	r3, r3, r8
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	d066      	beq.n	800a4ce <_strtod_l+0xb8e>
 800a400:	a309      	add	r3, pc, #36	; (adr r3, 800a428 <_strtod_l+0xae8>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7fc f919 	bl	800663c <__aeabi_dcmplt>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f47f ace2 	bne.w	8009dd4 <_strtod_l+0x494>
 800a410:	a307      	add	r3, pc, #28	; (adr r3, 800a430 <_strtod_l+0xaf0>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7fc f92d 	bl	8006678 <__aeabi_dcmpgt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f43f af7b 	beq.w	800a31a <_strtod_l+0x9da>
 800a424:	e4d6      	b.n	8009dd4 <_strtod_l+0x494>
 800a426:	bf00      	nop
 800a428:	94a03595 	.word	0x94a03595
 800a42c:	3fdfffff 	.word	0x3fdfffff
 800a430:	35afe535 	.word	0x35afe535
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	000fffff 	.word	0x000fffff
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	7fefffff 	.word	0x7fefffff
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	7fe00000 	.word	0x7fe00000
 800a44c:	7c9fffff 	.word	0x7c9fffff
 800a450:	3fe00000 	.word	0x3fe00000
 800a454:	bff00000 	.word	0xbff00000
 800a458:	9b05      	ldr	r3, [sp, #20]
 800a45a:	b313      	cbz	r3, 800a4a2 <_strtod_l+0xb62>
 800a45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a45e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a462:	d81e      	bhi.n	800a4a2 <_strtod_l+0xb62>
 800a464:	a326      	add	r3, pc, #152	; (adr r3, 800a500 <_strtod_l+0xbc0>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	4620      	mov	r0, r4
 800a46c:	4629      	mov	r1, r5
 800a46e:	f7fc f8ef 	bl	8006650 <__aeabi_dcmple>
 800a472:	b190      	cbz	r0, 800a49a <_strtod_l+0xb5a>
 800a474:	4629      	mov	r1, r5
 800a476:	4620      	mov	r0, r4
 800a478:	f7fc f946 	bl	8006708 <__aeabi_d2uiz>
 800a47c:	2801      	cmp	r0, #1
 800a47e:	bf38      	it	cc
 800a480:	2001      	movcc	r0, #1
 800a482:	f7fb fdef 	bl	8006064 <__aeabi_ui2d>
 800a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	b9d3      	cbnz	r3, 800a4c4 <_strtod_l+0xb84>
 800a48e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a492:	9012      	str	r0, [sp, #72]	; 0x48
 800a494:	9313      	str	r3, [sp, #76]	; 0x4c
 800a496:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a49a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a49c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a4a0:	1a9f      	subs	r7, r3, r2
 800a4a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4a6:	f001 fe4d 	bl	800c144 <__ulp>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	f7fb fe51 	bl	8006158 <__aeabi_dmul>
 800a4b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4ba:	f7fb fc97 	bl	8005dec <__adddf3>
 800a4be:	4680      	mov	r8, r0
 800a4c0:	4689      	mov	r9, r1
 800a4c2:	e77e      	b.n	800a3c2 <_strtod_l+0xa82>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a4cc:	e7e3      	b.n	800a496 <_strtod_l+0xb56>
 800a4ce:	a30e      	add	r3, pc, #56	; (adr r3, 800a508 <_strtod_l+0xbc8>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7fc f8b2 	bl	800663c <__aeabi_dcmplt>
 800a4d8:	e7a1      	b.n	800a41e <_strtod_l+0xade>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a4de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	f7ff ba71 	b.w	80099ca <_strtod_l+0x8a>
 800a4e8:	2a65      	cmp	r2, #101	; 0x65
 800a4ea:	f43f ab63 	beq.w	8009bb4 <_strtod_l+0x274>
 800a4ee:	2a45      	cmp	r2, #69	; 0x45
 800a4f0:	f43f ab60 	beq.w	8009bb4 <_strtod_l+0x274>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f7ff bb95 	b.w	8009c24 <_strtod_l+0x2e4>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	ffc00000 	.word	0xffc00000
 800a504:	41dfffff 	.word	0x41dfffff
 800a508:	94a03595 	.word	0x94a03595
 800a50c:	3fcfffff 	.word	0x3fcfffff

0800a510 <_strtod_r>:
 800a510:	4b01      	ldr	r3, [pc, #4]	; (800a518 <_strtod_r+0x8>)
 800a512:	f7ff ba15 	b.w	8009940 <_strtod_l>
 800a516:	bf00      	nop
 800a518:	20000074 	.word	0x20000074

0800a51c <_strtol_l.constprop.0>:
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a522:	4680      	mov	r8, r0
 800a524:	d001      	beq.n	800a52a <_strtol_l.constprop.0+0xe>
 800a526:	2b24      	cmp	r3, #36	; 0x24
 800a528:	d906      	bls.n	800a538 <_strtol_l.constprop.0+0x1c>
 800a52a:	f7fe fb23 	bl	8008b74 <__errno>
 800a52e:	2316      	movs	r3, #22
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	2000      	movs	r0, #0
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a538:	460d      	mov	r5, r1
 800a53a:	4f35      	ldr	r7, [pc, #212]	; (800a610 <_strtol_l.constprop.0+0xf4>)
 800a53c:	4628      	mov	r0, r5
 800a53e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a542:	5de6      	ldrb	r6, [r4, r7]
 800a544:	f016 0608 	ands.w	r6, r6, #8
 800a548:	d1f8      	bne.n	800a53c <_strtol_l.constprop.0+0x20>
 800a54a:	2c2d      	cmp	r4, #45	; 0x2d
 800a54c:	d12f      	bne.n	800a5ae <_strtol_l.constprop.0+0x92>
 800a54e:	2601      	movs	r6, #1
 800a550:	782c      	ldrb	r4, [r5, #0]
 800a552:	1c85      	adds	r5, r0, #2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d057      	beq.n	800a608 <_strtol_l.constprop.0+0xec>
 800a558:	2b10      	cmp	r3, #16
 800a55a:	d109      	bne.n	800a570 <_strtol_l.constprop.0+0x54>
 800a55c:	2c30      	cmp	r4, #48	; 0x30
 800a55e:	d107      	bne.n	800a570 <_strtol_l.constprop.0+0x54>
 800a560:	7828      	ldrb	r0, [r5, #0]
 800a562:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a566:	2858      	cmp	r0, #88	; 0x58
 800a568:	d149      	bne.n	800a5fe <_strtol_l.constprop.0+0xe2>
 800a56a:	2310      	movs	r3, #16
 800a56c:	786c      	ldrb	r4, [r5, #1]
 800a56e:	3502      	adds	r5, #2
 800a570:	2700      	movs	r7, #0
 800a572:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a576:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a57a:	fbbe f9f3 	udiv	r9, lr, r3
 800a57e:	4638      	mov	r0, r7
 800a580:	fb03 ea19 	mls	sl, r3, r9, lr
 800a584:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a588:	f1bc 0f09 	cmp.w	ip, #9
 800a58c:	d814      	bhi.n	800a5b8 <_strtol_l.constprop.0+0x9c>
 800a58e:	4664      	mov	r4, ip
 800a590:	42a3      	cmp	r3, r4
 800a592:	dd22      	ble.n	800a5da <_strtol_l.constprop.0+0xbe>
 800a594:	2f00      	cmp	r7, #0
 800a596:	db1d      	blt.n	800a5d4 <_strtol_l.constprop.0+0xb8>
 800a598:	4581      	cmp	r9, r0
 800a59a:	d31b      	bcc.n	800a5d4 <_strtol_l.constprop.0+0xb8>
 800a59c:	d101      	bne.n	800a5a2 <_strtol_l.constprop.0+0x86>
 800a59e:	45a2      	cmp	sl, r4
 800a5a0:	db18      	blt.n	800a5d4 <_strtol_l.constprop.0+0xb8>
 800a5a2:	2701      	movs	r7, #1
 800a5a4:	fb00 4003 	mla	r0, r0, r3, r4
 800a5a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5ac:	e7ea      	b.n	800a584 <_strtol_l.constprop.0+0x68>
 800a5ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a5b0:	bf04      	itt	eq
 800a5b2:	782c      	ldrbeq	r4, [r5, #0]
 800a5b4:	1c85      	addeq	r5, r0, #2
 800a5b6:	e7cd      	b.n	800a554 <_strtol_l.constprop.0+0x38>
 800a5b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a5bc:	f1bc 0f19 	cmp.w	ip, #25
 800a5c0:	d801      	bhi.n	800a5c6 <_strtol_l.constprop.0+0xaa>
 800a5c2:	3c37      	subs	r4, #55	; 0x37
 800a5c4:	e7e4      	b.n	800a590 <_strtol_l.constprop.0+0x74>
 800a5c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a5ca:	f1bc 0f19 	cmp.w	ip, #25
 800a5ce:	d804      	bhi.n	800a5da <_strtol_l.constprop.0+0xbe>
 800a5d0:	3c57      	subs	r4, #87	; 0x57
 800a5d2:	e7dd      	b.n	800a590 <_strtol_l.constprop.0+0x74>
 800a5d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a5d8:	e7e6      	b.n	800a5a8 <_strtol_l.constprop.0+0x8c>
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	da07      	bge.n	800a5ee <_strtol_l.constprop.0+0xd2>
 800a5de:	2322      	movs	r3, #34	; 0x22
 800a5e0:	4670      	mov	r0, lr
 800a5e2:	f8c8 3000 	str.w	r3, [r8]
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d0a4      	beq.n	800a534 <_strtol_l.constprop.0+0x18>
 800a5ea:	1e69      	subs	r1, r5, #1
 800a5ec:	e005      	b.n	800a5fa <_strtol_l.constprop.0+0xde>
 800a5ee:	b106      	cbz	r6, 800a5f2 <_strtol_l.constprop.0+0xd6>
 800a5f0:	4240      	negs	r0, r0
 800a5f2:	2a00      	cmp	r2, #0
 800a5f4:	d09e      	beq.n	800a534 <_strtol_l.constprop.0+0x18>
 800a5f6:	2f00      	cmp	r7, #0
 800a5f8:	d1f7      	bne.n	800a5ea <_strtol_l.constprop.0+0xce>
 800a5fa:	6011      	str	r1, [r2, #0]
 800a5fc:	e79a      	b.n	800a534 <_strtol_l.constprop.0+0x18>
 800a5fe:	2430      	movs	r4, #48	; 0x30
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1b5      	bne.n	800a570 <_strtol_l.constprop.0+0x54>
 800a604:	2308      	movs	r3, #8
 800a606:	e7b3      	b.n	800a570 <_strtol_l.constprop.0+0x54>
 800a608:	2c30      	cmp	r4, #48	; 0x30
 800a60a:	d0a9      	beq.n	800a560 <_strtol_l.constprop.0+0x44>
 800a60c:	230a      	movs	r3, #10
 800a60e:	e7af      	b.n	800a570 <_strtol_l.constprop.0+0x54>
 800a610:	0801eec1 	.word	0x0801eec1

0800a614 <_strtol_r>:
 800a614:	f7ff bf82 	b.w	800a51c <_strtol_l.constprop.0>

0800a618 <strtol>:
 800a618:	4613      	mov	r3, r2
 800a61a:	460a      	mov	r2, r1
 800a61c:	4601      	mov	r1, r0
 800a61e:	4802      	ldr	r0, [pc, #8]	; (800a628 <strtol+0x10>)
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	f7ff bf7b 	b.w	800a51c <_strtol_l.constprop.0>
 800a626:	bf00      	nop
 800a628:	2000000c 	.word	0x2000000c

0800a62c <quorem>:
 800a62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	6903      	ldr	r3, [r0, #16]
 800a632:	690c      	ldr	r4, [r1, #16]
 800a634:	4607      	mov	r7, r0
 800a636:	42a3      	cmp	r3, r4
 800a638:	f2c0 8082 	blt.w	800a740 <quorem+0x114>
 800a63c:	3c01      	subs	r4, #1
 800a63e:	f100 0514 	add.w	r5, r0, #20
 800a642:	f101 0814 	add.w	r8, r1, #20
 800a646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a654:	3301      	adds	r3, #1
 800a656:	429a      	cmp	r2, r3
 800a658:	fbb2 f6f3 	udiv	r6, r2, r3
 800a65c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a660:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a664:	d331      	bcc.n	800a6ca <quorem+0x9e>
 800a666:	f04f 0e00 	mov.w	lr, #0
 800a66a:	4640      	mov	r0, r8
 800a66c:	46ac      	mov	ip, r5
 800a66e:	46f2      	mov	sl, lr
 800a670:	f850 2b04 	ldr.w	r2, [r0], #4
 800a674:	b293      	uxth	r3, r2
 800a676:	fb06 e303 	mla	r3, r6, r3, lr
 800a67a:	0c12      	lsrs	r2, r2, #16
 800a67c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a680:	b29b      	uxth	r3, r3
 800a682:	fb06 e202 	mla	r2, r6, r2, lr
 800a686:	ebaa 0303 	sub.w	r3, sl, r3
 800a68a:	f8dc a000 	ldr.w	sl, [ip]
 800a68e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a692:	fa1f fa8a 	uxth.w	sl, sl
 800a696:	4453      	add	r3, sl
 800a698:	f8dc a000 	ldr.w	sl, [ip]
 800a69c:	b292      	uxth	r2, r2
 800a69e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ac:	4581      	cmp	r9, r0
 800a6ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a6b6:	d2db      	bcs.n	800a670 <quorem+0x44>
 800a6b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6bc:	b92b      	cbnz	r3, 800a6ca <quorem+0x9e>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	429d      	cmp	r5, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	d32f      	bcc.n	800a728 <quorem+0xfc>
 800a6c8:	613c      	str	r4, [r7, #16]
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f001 fc92 	bl	800bff4 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	db25      	blt.n	800a720 <quorem+0xf4>
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f04f 0c00 	mov.w	ip, #0
 800a6da:	3601      	adds	r6, #1
 800a6dc:	f858 1b04 	ldr.w	r1, [r8], #4
 800a6e0:	f8d0 e000 	ldr.w	lr, [r0]
 800a6e4:	b28b      	uxth	r3, r1
 800a6e6:	ebac 0303 	sub.w	r3, ip, r3
 800a6ea:	fa1f f28e 	uxth.w	r2, lr
 800a6ee:	4413      	add	r3, r2
 800a6f0:	0c0a      	lsrs	r2, r1, #16
 800a6f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a700:	45c1      	cmp	r9, r8
 800a702:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a706:	f840 3b04 	str.w	r3, [r0], #4
 800a70a:	d2e7      	bcs.n	800a6dc <quorem+0xb0>
 800a70c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a710:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a714:	b922      	cbnz	r2, 800a720 <quorem+0xf4>
 800a716:	3b04      	subs	r3, #4
 800a718:	429d      	cmp	r5, r3
 800a71a:	461a      	mov	r2, r3
 800a71c:	d30a      	bcc.n	800a734 <quorem+0x108>
 800a71e:	613c      	str	r4, [r7, #16]
 800a720:	4630      	mov	r0, r6
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	6812      	ldr	r2, [r2, #0]
 800a72a:	3b04      	subs	r3, #4
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	d1cb      	bne.n	800a6c8 <quorem+0x9c>
 800a730:	3c01      	subs	r4, #1
 800a732:	e7c6      	b.n	800a6c2 <quorem+0x96>
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	3b04      	subs	r3, #4
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d1f0      	bne.n	800a71e <quorem+0xf2>
 800a73c:	3c01      	subs	r4, #1
 800a73e:	e7eb      	b.n	800a718 <quorem+0xec>
 800a740:	2000      	movs	r0, #0
 800a742:	e7ee      	b.n	800a722 <quorem+0xf6>
 800a744:	0000      	movs	r0, r0
	...

0800a748 <_dtoa_r>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	4616      	mov	r6, r2
 800a74e:	461f      	mov	r7, r3
 800a750:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a752:	b099      	sub	sp, #100	; 0x64
 800a754:	4605      	mov	r5, r0
 800a756:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a75a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a75e:	b974      	cbnz	r4, 800a77e <_dtoa_r+0x36>
 800a760:	2010      	movs	r0, #16
 800a762:	f001 f949 	bl	800b9f8 <malloc>
 800a766:	4602      	mov	r2, r0
 800a768:	6268      	str	r0, [r5, #36]	; 0x24
 800a76a:	b920      	cbnz	r0, 800a776 <_dtoa_r+0x2e>
 800a76c:	21ea      	movs	r1, #234	; 0xea
 800a76e:	4ba8      	ldr	r3, [pc, #672]	; (800aa10 <_dtoa_r+0x2c8>)
 800a770:	48a8      	ldr	r0, [pc, #672]	; (800aa14 <_dtoa_r+0x2cc>)
 800a772:	f002 f8b3 	bl	800c8dc <__assert_func>
 800a776:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a77a:	6004      	str	r4, [r0, #0]
 800a77c:	60c4      	str	r4, [r0, #12]
 800a77e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a780:	6819      	ldr	r1, [r3, #0]
 800a782:	b151      	cbz	r1, 800a79a <_dtoa_r+0x52>
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	2301      	movs	r3, #1
 800a788:	4093      	lsls	r3, r2
 800a78a:	604a      	str	r2, [r1, #4]
 800a78c:	608b      	str	r3, [r1, #8]
 800a78e:	4628      	mov	r0, r5
 800a790:	f001 f9a8 	bl	800bae4 <_Bfree>
 800a794:	2200      	movs	r2, #0
 800a796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	1e3b      	subs	r3, r7, #0
 800a79c:	bfaf      	iteee	ge
 800a79e:	2300      	movge	r3, #0
 800a7a0:	2201      	movlt	r2, #1
 800a7a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7a6:	9305      	strlt	r3, [sp, #20]
 800a7a8:	bfa8      	it	ge
 800a7aa:	f8c8 3000 	strge.w	r3, [r8]
 800a7ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a7b2:	4b99      	ldr	r3, [pc, #612]	; (800aa18 <_dtoa_r+0x2d0>)
 800a7b4:	bfb8      	it	lt
 800a7b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a7ba:	ea33 0309 	bics.w	r3, r3, r9
 800a7be:	d119      	bne.n	800a7f4 <_dtoa_r+0xac>
 800a7c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7cc:	4333      	orrs	r3, r6
 800a7ce:	f000 857f 	beq.w	800b2d0 <_dtoa_r+0xb88>
 800a7d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7d4:	b953      	cbnz	r3, 800a7ec <_dtoa_r+0xa4>
 800a7d6:	4b91      	ldr	r3, [pc, #580]	; (800aa1c <_dtoa_r+0x2d4>)
 800a7d8:	e022      	b.n	800a820 <_dtoa_r+0xd8>
 800a7da:	4b91      	ldr	r3, [pc, #580]	; (800aa20 <_dtoa_r+0x2d8>)
 800a7dc:	9303      	str	r3, [sp, #12]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	9803      	ldr	r0, [sp, #12]
 800a7e6:	b019      	add	sp, #100	; 0x64
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	4b8b      	ldr	r3, [pc, #556]	; (800aa1c <_dtoa_r+0x2d4>)
 800a7ee:	9303      	str	r3, [sp, #12]
 800a7f0:	3303      	adds	r3, #3
 800a7f2:	e7f5      	b.n	800a7e0 <_dtoa_r+0x98>
 800a7f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a7fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a800:	2200      	movs	r2, #0
 800a802:	2300      	movs	r3, #0
 800a804:	f7fb ff10 	bl	8006628 <__aeabi_dcmpeq>
 800a808:	4680      	mov	r8, r0
 800a80a:	b158      	cbz	r0, 800a824 <_dtoa_r+0xdc>
 800a80c:	2301      	movs	r3, #1
 800a80e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 8558 	beq.w	800b2ca <_dtoa_r+0xb82>
 800a81a:	4882      	ldr	r0, [pc, #520]	; (800aa24 <_dtoa_r+0x2dc>)
 800a81c:	6018      	str	r0, [r3, #0]
 800a81e:	1e43      	subs	r3, r0, #1
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	e7df      	b.n	800a7e4 <_dtoa_r+0x9c>
 800a824:	ab16      	add	r3, sp, #88	; 0x58
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	ab17      	add	r3, sp, #92	; 0x5c
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4628      	mov	r0, r5
 800a82e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a832:	f001 fd01 	bl	800c238 <__d2b>
 800a836:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a83a:	4683      	mov	fp, r0
 800a83c:	2c00      	cmp	r4, #0
 800a83e:	d07f      	beq.n	800a940 <_dtoa_r+0x1f8>
 800a840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a846:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a84a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a84e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a852:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a856:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a85a:	2200      	movs	r2, #0
 800a85c:	4b72      	ldr	r3, [pc, #456]	; (800aa28 <_dtoa_r+0x2e0>)
 800a85e:	f7fb fac3 	bl	8005de8 <__aeabi_dsub>
 800a862:	a365      	add	r3, pc, #404	; (adr r3, 800a9f8 <_dtoa_r+0x2b0>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7fb fc76 	bl	8006158 <__aeabi_dmul>
 800a86c:	a364      	add	r3, pc, #400	; (adr r3, 800aa00 <_dtoa_r+0x2b8>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f7fb fabb 	bl	8005dec <__adddf3>
 800a876:	4606      	mov	r6, r0
 800a878:	4620      	mov	r0, r4
 800a87a:	460f      	mov	r7, r1
 800a87c:	f7fb fc02 	bl	8006084 <__aeabi_i2d>
 800a880:	a361      	add	r3, pc, #388	; (adr r3, 800aa08 <_dtoa_r+0x2c0>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f7fb fc67 	bl	8006158 <__aeabi_dmul>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7fb faab 	bl	8005dec <__adddf3>
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	f7fb ff0d 	bl	80066b8 <__aeabi_d2iz>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7fb fec8 	bl	800663c <__aeabi_dcmplt>
 800a8ac:	b148      	cbz	r0, 800a8c2 <_dtoa_r+0x17a>
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f7fb fbe8 	bl	8006084 <__aeabi_i2d>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	f7fb feb6 	bl	8006628 <__aeabi_dcmpeq>
 800a8bc:	b908      	cbnz	r0, 800a8c2 <_dtoa_r+0x17a>
 800a8be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8c2:	f1ba 0f16 	cmp.w	sl, #22
 800a8c6:	d858      	bhi.n	800a97a <_dtoa_r+0x232>
 800a8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8cc:	4b57      	ldr	r3, [pc, #348]	; (800aa2c <_dtoa_r+0x2e4>)
 800a8ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7fb feb1 	bl	800663c <__aeabi_dcmplt>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d04f      	beq.n	800a97e <_dtoa_r+0x236>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8e8:	1b1c      	subs	r4, r3, r4
 800a8ea:	1e63      	subs	r3, r4, #1
 800a8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ee:	bf49      	itett	mi
 800a8f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a8f4:	2300      	movpl	r3, #0
 800a8f6:	9306      	strmi	r3, [sp, #24]
 800a8f8:	2300      	movmi	r3, #0
 800a8fa:	bf54      	ite	pl
 800a8fc:	9306      	strpl	r3, [sp, #24]
 800a8fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a900:	f1ba 0f00 	cmp.w	sl, #0
 800a904:	db3d      	blt.n	800a982 <_dtoa_r+0x23a>
 800a906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a908:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a90c:	4453      	add	r3, sl
 800a90e:	9309      	str	r3, [sp, #36]	; 0x24
 800a910:	2300      	movs	r3, #0
 800a912:	930a      	str	r3, [sp, #40]	; 0x28
 800a914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a916:	2b09      	cmp	r3, #9
 800a918:	f200 808c 	bhi.w	800aa34 <_dtoa_r+0x2ec>
 800a91c:	2b05      	cmp	r3, #5
 800a91e:	bfc4      	itt	gt
 800a920:	3b04      	subgt	r3, #4
 800a922:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a926:	bfc8      	it	gt
 800a928:	2400      	movgt	r4, #0
 800a92a:	f1a3 0302 	sub.w	r3, r3, #2
 800a92e:	bfd8      	it	le
 800a930:	2401      	movle	r4, #1
 800a932:	2b03      	cmp	r3, #3
 800a934:	f200 808a 	bhi.w	800aa4c <_dtoa_r+0x304>
 800a938:	e8df f003 	tbb	[pc, r3]
 800a93c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a940:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a944:	441c      	add	r4, r3
 800a946:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	bfc3      	ittte	gt
 800a94e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a952:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a956:	fa09 f303 	lslgt.w	r3, r9, r3
 800a95a:	f1c3 0320 	rsble	r3, r3, #32
 800a95e:	bfc6      	itte	gt
 800a960:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a964:	4318      	orrgt	r0, r3
 800a966:	fa06 f003 	lslle.w	r0, r6, r3
 800a96a:	f7fb fb7b 	bl	8006064 <__aeabi_ui2d>
 800a96e:	2301      	movs	r3, #1
 800a970:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a974:	3c01      	subs	r4, #1
 800a976:	9313      	str	r3, [sp, #76]	; 0x4c
 800a978:	e76f      	b.n	800a85a <_dtoa_r+0x112>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e7b2      	b.n	800a8e4 <_dtoa_r+0x19c>
 800a97e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a980:	e7b1      	b.n	800a8e6 <_dtoa_r+0x19e>
 800a982:	9b06      	ldr	r3, [sp, #24]
 800a984:	eba3 030a 	sub.w	r3, r3, sl
 800a988:	9306      	str	r3, [sp, #24]
 800a98a:	f1ca 0300 	rsb	r3, sl, #0
 800a98e:	930a      	str	r3, [sp, #40]	; 0x28
 800a990:	2300      	movs	r3, #0
 800a992:	930e      	str	r3, [sp, #56]	; 0x38
 800a994:	e7be      	b.n	800a914 <_dtoa_r+0x1cc>
 800a996:	2300      	movs	r3, #0
 800a998:	930b      	str	r3, [sp, #44]	; 0x2c
 800a99a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dc58      	bgt.n	800aa52 <_dtoa_r+0x30a>
 800a9a0:	f04f 0901 	mov.w	r9, #1
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a9b2:	6042      	str	r2, [r0, #4]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	f102 0614 	add.w	r6, r2, #20
 800a9ba:	429e      	cmp	r6, r3
 800a9bc:	6841      	ldr	r1, [r0, #4]
 800a9be:	d94e      	bls.n	800aa5e <_dtoa_r+0x316>
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f001 f84f 	bl	800ba64 <_Balloc>
 800a9c6:	9003      	str	r0, [sp, #12]
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d14c      	bne.n	800aa66 <_dtoa_r+0x31e>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9d2:	4b17      	ldr	r3, [pc, #92]	; (800aa30 <_dtoa_r+0x2e8>)
 800a9d4:	e6cc      	b.n	800a770 <_dtoa_r+0x28>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7de      	b.n	800a998 <_dtoa_r+0x250>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9e0:	eb0a 0903 	add.w	r9, sl, r3
 800a9e4:	f109 0301 	add.w	r3, r9, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	9308      	str	r3, [sp, #32]
 800a9ec:	bfb8      	it	lt
 800a9ee:	2301      	movlt	r3, #1
 800a9f0:	e7dd      	b.n	800a9ae <_dtoa_r+0x266>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f2      	b.n	800a9dc <_dtoa_r+0x294>
 800a9f6:	bf00      	nop
 800a9f8:	636f4361 	.word	0x636f4361
 800a9fc:	3fd287a7 	.word	0x3fd287a7
 800aa00:	8b60c8b3 	.word	0x8b60c8b3
 800aa04:	3fc68a28 	.word	0x3fc68a28
 800aa08:	509f79fb 	.word	0x509f79fb
 800aa0c:	3fd34413 	.word	0x3fd34413
 800aa10:	0801efce 	.word	0x0801efce
 800aa14:	0801efe5 	.word	0x0801efe5
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0801efca 	.word	0x0801efca
 800aa20:	0801efc1 	.word	0x0801efc1
 800aa24:	0801ee45 	.word	0x0801ee45
 800aa28:	3ff80000 	.word	0x3ff80000
 800aa2c:	0801f1b8 	.word	0x0801f1b8
 800aa30:	0801f063 	.word	0x0801f063
 800aa34:	2401      	movs	r4, #1
 800aa36:	2300      	movs	r3, #0
 800aa38:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa3a:	9322      	str	r3, [sp, #136]	; 0x88
 800aa3c:	f04f 39ff 	mov.w	r9, #4294967295
 800aa40:	2200      	movs	r2, #0
 800aa42:	2312      	movs	r3, #18
 800aa44:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa48:	9223      	str	r2, [sp, #140]	; 0x8c
 800aa4a:	e7b0      	b.n	800a9ae <_dtoa_r+0x266>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa50:	e7f4      	b.n	800aa3c <_dtoa_r+0x2f4>
 800aa52:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800aa56:	464b      	mov	r3, r9
 800aa58:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa5c:	e7a7      	b.n	800a9ae <_dtoa_r+0x266>
 800aa5e:	3101      	adds	r1, #1
 800aa60:	6041      	str	r1, [r0, #4]
 800aa62:	0052      	lsls	r2, r2, #1
 800aa64:	e7a7      	b.n	800a9b6 <_dtoa_r+0x26e>
 800aa66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa68:	9a03      	ldr	r2, [sp, #12]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	9b08      	ldr	r3, [sp, #32]
 800aa6e:	2b0e      	cmp	r3, #14
 800aa70:	f200 80a8 	bhi.w	800abc4 <_dtoa_r+0x47c>
 800aa74:	2c00      	cmp	r4, #0
 800aa76:	f000 80a5 	beq.w	800abc4 <_dtoa_r+0x47c>
 800aa7a:	f1ba 0f00 	cmp.w	sl, #0
 800aa7e:	dd34      	ble.n	800aaea <_dtoa_r+0x3a2>
 800aa80:	4a9a      	ldr	r2, [pc, #616]	; (800acec <_dtoa_r+0x5a4>)
 800aa82:	f00a 030f 	and.w	r3, sl, #15
 800aa86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa8a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa96:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aa9a:	d016      	beq.n	800aaca <_dtoa_r+0x382>
 800aa9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaa0:	4b93      	ldr	r3, [pc, #588]	; (800acf0 <_dtoa_r+0x5a8>)
 800aaa2:	2703      	movs	r7, #3
 800aaa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaa8:	f7fb fc80 	bl	80063ac <__aeabi_ddiv>
 800aaac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aab0:	f004 040f 	and.w	r4, r4, #15
 800aab4:	4e8e      	ldr	r6, [pc, #568]	; (800acf0 <_dtoa_r+0x5a8>)
 800aab6:	b954      	cbnz	r4, 800aace <_dtoa_r+0x386>
 800aab8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aabc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac0:	f7fb fc74 	bl	80063ac <__aeabi_ddiv>
 800aac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aac8:	e029      	b.n	800ab1e <_dtoa_r+0x3d6>
 800aaca:	2702      	movs	r7, #2
 800aacc:	e7f2      	b.n	800aab4 <_dtoa_r+0x36c>
 800aace:	07e1      	lsls	r1, r4, #31
 800aad0:	d508      	bpl.n	800aae4 <_dtoa_r+0x39c>
 800aad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aad6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aada:	f7fb fb3d 	bl	8006158 <__aeabi_dmul>
 800aade:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aae2:	3701      	adds	r7, #1
 800aae4:	1064      	asrs	r4, r4, #1
 800aae6:	3608      	adds	r6, #8
 800aae8:	e7e5      	b.n	800aab6 <_dtoa_r+0x36e>
 800aaea:	f000 80a5 	beq.w	800ac38 <_dtoa_r+0x4f0>
 800aaee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaf2:	f1ca 0400 	rsb	r4, sl, #0
 800aaf6:	4b7d      	ldr	r3, [pc, #500]	; (800acec <_dtoa_r+0x5a4>)
 800aaf8:	f004 020f 	and.w	r2, r4, #15
 800aafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7fb fb28 	bl	8006158 <__aeabi_dmul>
 800ab08:	2702      	movs	r7, #2
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab10:	4e77      	ldr	r6, [pc, #476]	; (800acf0 <_dtoa_r+0x5a8>)
 800ab12:	1124      	asrs	r4, r4, #4
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	f040 8084 	bne.w	800ac22 <_dtoa_r+0x4da>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1d2      	bne.n	800aac4 <_dtoa_r+0x37c>
 800ab1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 808b 	beq.w	800ac3c <_dtoa_r+0x4f4>
 800ab26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ab2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ab2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab32:	2200      	movs	r2, #0
 800ab34:	4b6f      	ldr	r3, [pc, #444]	; (800acf4 <_dtoa_r+0x5ac>)
 800ab36:	f7fb fd81 	bl	800663c <__aeabi_dcmplt>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d07e      	beq.n	800ac3c <_dtoa_r+0x4f4>
 800ab3e:	9b08      	ldr	r3, [sp, #32]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d07b      	beq.n	800ac3c <_dtoa_r+0x4f4>
 800ab44:	f1b9 0f00 	cmp.w	r9, #0
 800ab48:	dd38      	ble.n	800abbc <_dtoa_r+0x474>
 800ab4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b69      	ldr	r3, [pc, #420]	; (800acf8 <_dtoa_r+0x5b0>)
 800ab52:	f7fb fb01 	bl	8006158 <__aeabi_dmul>
 800ab56:	464c      	mov	r4, r9
 800ab58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ab60:	3701      	adds	r7, #1
 800ab62:	4638      	mov	r0, r7
 800ab64:	f7fb fa8e 	bl	8006084 <__aeabi_i2d>
 800ab68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab6c:	f7fb faf4 	bl	8006158 <__aeabi_dmul>
 800ab70:	2200      	movs	r2, #0
 800ab72:	4b62      	ldr	r3, [pc, #392]	; (800acfc <_dtoa_r+0x5b4>)
 800ab74:	f7fb f93a 	bl	8005dec <__adddf3>
 800ab78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ab7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab80:	9611      	str	r6, [sp, #68]	; 0x44
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	d15d      	bne.n	800ac42 <_dtoa_r+0x4fa>
 800ab86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4b5c      	ldr	r3, [pc, #368]	; (800ad00 <_dtoa_r+0x5b8>)
 800ab8e:	f7fb f92b 	bl	8005de8 <__aeabi_dsub>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab9a:	4633      	mov	r3, r6
 800ab9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab9e:	f7fb fd6b 	bl	8006678 <__aeabi_dcmpgt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	f040 829c 	bne.w	800b0e0 <_dtoa_r+0x998>
 800aba8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800abb2:	f7fb fd43 	bl	800663c <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f040 8290 	bne.w	800b0dc <_dtoa_r+0x994>
 800abbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800abc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800abc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f2c0 8152 	blt.w	800ae70 <_dtoa_r+0x728>
 800abcc:	f1ba 0f0e 	cmp.w	sl, #14
 800abd0:	f300 814e 	bgt.w	800ae70 <_dtoa_r+0x728>
 800abd4:	4b45      	ldr	r3, [pc, #276]	; (800acec <_dtoa_r+0x5a4>)
 800abd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abda:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800abe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f280 80db 	bge.w	800ada0 <_dtoa_r+0x658>
 800abea:	9b08      	ldr	r3, [sp, #32]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f300 80d7 	bgt.w	800ada0 <_dtoa_r+0x658>
 800abf2:	f040 8272 	bne.w	800b0da <_dtoa_r+0x992>
 800abf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abfa:	2200      	movs	r2, #0
 800abfc:	4b40      	ldr	r3, [pc, #256]	; (800ad00 <_dtoa_r+0x5b8>)
 800abfe:	f7fb faab 	bl	8006158 <__aeabi_dmul>
 800ac02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac06:	f7fb fd2d 	bl	8006664 <__aeabi_dcmpge>
 800ac0a:	9c08      	ldr	r4, [sp, #32]
 800ac0c:	4626      	mov	r6, r4
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f040 8248 	bne.w	800b0a4 <_dtoa_r+0x95c>
 800ac14:	2331      	movs	r3, #49	; 0x31
 800ac16:	9f03      	ldr	r7, [sp, #12]
 800ac18:	f10a 0a01 	add.w	sl, sl, #1
 800ac1c:	f807 3b01 	strb.w	r3, [r7], #1
 800ac20:	e244      	b.n	800b0ac <_dtoa_r+0x964>
 800ac22:	07e2      	lsls	r2, r4, #31
 800ac24:	d505      	bpl.n	800ac32 <_dtoa_r+0x4ea>
 800ac26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac2a:	f7fb fa95 	bl	8006158 <__aeabi_dmul>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	3701      	adds	r7, #1
 800ac32:	1064      	asrs	r4, r4, #1
 800ac34:	3608      	adds	r6, #8
 800ac36:	e76d      	b.n	800ab14 <_dtoa_r+0x3cc>
 800ac38:	2702      	movs	r7, #2
 800ac3a:	e770      	b.n	800ab1e <_dtoa_r+0x3d6>
 800ac3c:	46d0      	mov	r8, sl
 800ac3e:	9c08      	ldr	r4, [sp, #32]
 800ac40:	e78f      	b.n	800ab62 <_dtoa_r+0x41a>
 800ac42:	9903      	ldr	r1, [sp, #12]
 800ac44:	4b29      	ldr	r3, [pc, #164]	; (800acec <_dtoa_r+0x5a4>)
 800ac46:	4421      	add	r1, r4
 800ac48:	9112      	str	r1, [sp, #72]	; 0x48
 800ac4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ac54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac58:	2900      	cmp	r1, #0
 800ac5a:	d055      	beq.n	800ad08 <_dtoa_r+0x5c0>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	4929      	ldr	r1, [pc, #164]	; (800ad04 <_dtoa_r+0x5bc>)
 800ac60:	f7fb fba4 	bl	80063ac <__aeabi_ddiv>
 800ac64:	463b      	mov	r3, r7
 800ac66:	4632      	mov	r2, r6
 800ac68:	f7fb f8be 	bl	8005de8 <__aeabi_dsub>
 800ac6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac70:	9f03      	ldr	r7, [sp, #12]
 800ac72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac76:	f7fb fd1f 	bl	80066b8 <__aeabi_d2iz>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	f7fb fa02 	bl	8006084 <__aeabi_i2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac88:	f7fb f8ae 	bl	8005de8 <__aeabi_dsub>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	3430      	adds	r4, #48	; 0x30
 800ac92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac9a:	f807 4b01 	strb.w	r4, [r7], #1
 800ac9e:	f7fb fccd 	bl	800663c <__aeabi_dcmplt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d174      	bne.n	800ad90 <_dtoa_r+0x648>
 800aca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acaa:	2000      	movs	r0, #0
 800acac:	4911      	ldr	r1, [pc, #68]	; (800acf4 <_dtoa_r+0x5ac>)
 800acae:	f7fb f89b 	bl	8005de8 <__aeabi_dsub>
 800acb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acb6:	f7fb fcc1 	bl	800663c <__aeabi_dcmplt>
 800acba:	2800      	cmp	r0, #0
 800acbc:	f040 80b7 	bne.w	800ae2e <_dtoa_r+0x6e6>
 800acc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acc2:	429f      	cmp	r7, r3
 800acc4:	f43f af7a 	beq.w	800abbc <_dtoa_r+0x474>
 800acc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800accc:	2200      	movs	r2, #0
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <_dtoa_r+0x5b0>)
 800acd0:	f7fb fa42 	bl	8006158 <__aeabi_dmul>
 800acd4:	2200      	movs	r2, #0
 800acd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <_dtoa_r+0x5b0>)
 800ace0:	f7fb fa3a 	bl	8006158 <__aeabi_dmul>
 800ace4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ace8:	e7c3      	b.n	800ac72 <_dtoa_r+0x52a>
 800acea:	bf00      	nop
 800acec:	0801f1b8 	.word	0x0801f1b8
 800acf0:	0801f190 	.word	0x0801f190
 800acf4:	3ff00000 	.word	0x3ff00000
 800acf8:	40240000 	.word	0x40240000
 800acfc:	401c0000 	.word	0x401c0000
 800ad00:	40140000 	.word	0x40140000
 800ad04:	3fe00000 	.word	0x3fe00000
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7fb fa24 	bl	8006158 <__aeabi_dmul>
 800ad10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad16:	9c03      	ldr	r4, [sp, #12]
 800ad18:	9314      	str	r3, [sp, #80]	; 0x50
 800ad1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad1e:	f7fb fccb 	bl	80066b8 <__aeabi_d2iz>
 800ad22:	9015      	str	r0, [sp, #84]	; 0x54
 800ad24:	f7fb f9ae 	bl	8006084 <__aeabi_i2d>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad30:	f7fb f85a 	bl	8005de8 <__aeabi_dsub>
 800ad34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad36:	4606      	mov	r6, r0
 800ad38:	3330      	adds	r3, #48	; 0x30
 800ad3a:	f804 3b01 	strb.w	r3, [r4], #1
 800ad3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad40:	460f      	mov	r7, r1
 800ad42:	429c      	cmp	r4, r3
 800ad44:	f04f 0200 	mov.w	r2, #0
 800ad48:	d124      	bne.n	800ad94 <_dtoa_r+0x64c>
 800ad4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad4e:	4bb0      	ldr	r3, [pc, #704]	; (800b010 <_dtoa_r+0x8c8>)
 800ad50:	f7fb f84c 	bl	8005dec <__adddf3>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7fb fc8c 	bl	8006678 <__aeabi_dcmpgt>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d163      	bne.n	800ae2c <_dtoa_r+0x6e4>
 800ad64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad68:	2000      	movs	r0, #0
 800ad6a:	49a9      	ldr	r1, [pc, #676]	; (800b010 <_dtoa_r+0x8c8>)
 800ad6c:	f7fb f83c 	bl	8005de8 <__aeabi_dsub>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7fb fc60 	bl	800663c <__aeabi_dcmplt>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f43f af1d 	beq.w	800abbc <_dtoa_r+0x474>
 800ad82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ad84:	1e7b      	subs	r3, r7, #1
 800ad86:	9314      	str	r3, [sp, #80]	; 0x50
 800ad88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ad8c:	2b30      	cmp	r3, #48	; 0x30
 800ad8e:	d0f8      	beq.n	800ad82 <_dtoa_r+0x63a>
 800ad90:	46c2      	mov	sl, r8
 800ad92:	e03b      	b.n	800ae0c <_dtoa_r+0x6c4>
 800ad94:	4b9f      	ldr	r3, [pc, #636]	; (800b014 <_dtoa_r+0x8cc>)
 800ad96:	f7fb f9df 	bl	8006158 <__aeabi_dmul>
 800ad9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad9e:	e7bc      	b.n	800ad1a <_dtoa_r+0x5d2>
 800ada0:	9f03      	ldr	r7, [sp, #12]
 800ada2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ada6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7fb fafd 	bl	80063ac <__aeabi_ddiv>
 800adb2:	f7fb fc81 	bl	80066b8 <__aeabi_d2iz>
 800adb6:	4604      	mov	r4, r0
 800adb8:	f7fb f964 	bl	8006084 <__aeabi_i2d>
 800adbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adc0:	f7fb f9ca 	bl	8006158 <__aeabi_dmul>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4640      	mov	r0, r8
 800adca:	4649      	mov	r1, r9
 800adcc:	f7fb f80c 	bl	8005de8 <__aeabi_dsub>
 800add0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800add4:	f807 6b01 	strb.w	r6, [r7], #1
 800add8:	9e03      	ldr	r6, [sp, #12]
 800adda:	f8dd c020 	ldr.w	ip, [sp, #32]
 800adde:	1bbe      	subs	r6, r7, r6
 800ade0:	45b4      	cmp	ip, r6
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	d136      	bne.n	800ae56 <_dtoa_r+0x70e>
 800ade8:	f7fb f800 	bl	8005dec <__adddf3>
 800adec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adf0:	4680      	mov	r8, r0
 800adf2:	4689      	mov	r9, r1
 800adf4:	f7fb fc40 	bl	8006678 <__aeabi_dcmpgt>
 800adf8:	bb58      	cbnz	r0, 800ae52 <_dtoa_r+0x70a>
 800adfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7fb fc11 	bl	8006628 <__aeabi_dcmpeq>
 800ae06:	b108      	cbz	r0, 800ae0c <_dtoa_r+0x6c4>
 800ae08:	07e1      	lsls	r1, r4, #31
 800ae0a:	d422      	bmi.n	800ae52 <_dtoa_r+0x70a>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	4659      	mov	r1, fp
 800ae10:	f000 fe68 	bl	800bae4 <_Bfree>
 800ae14:	2300      	movs	r3, #0
 800ae16:	703b      	strb	r3, [r7, #0]
 800ae18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae1a:	f10a 0001 	add.w	r0, sl, #1
 800ae1e:	6018      	str	r0, [r3, #0]
 800ae20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f43f acde 	beq.w	800a7e4 <_dtoa_r+0x9c>
 800ae28:	601f      	str	r7, [r3, #0]
 800ae2a:	e4db      	b.n	800a7e4 <_dtoa_r+0x9c>
 800ae2c:	4627      	mov	r7, r4
 800ae2e:	463b      	mov	r3, r7
 800ae30:	461f      	mov	r7, r3
 800ae32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae36:	2a39      	cmp	r2, #57	; 0x39
 800ae38:	d107      	bne.n	800ae4a <_dtoa_r+0x702>
 800ae3a:	9a03      	ldr	r2, [sp, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d1f7      	bne.n	800ae30 <_dtoa_r+0x6e8>
 800ae40:	2230      	movs	r2, #48	; 0x30
 800ae42:	9903      	ldr	r1, [sp, #12]
 800ae44:	f108 0801 	add.w	r8, r8, #1
 800ae48:	700a      	strb	r2, [r1, #0]
 800ae4a:	781a      	ldrb	r2, [r3, #0]
 800ae4c:	3201      	adds	r2, #1
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	e79e      	b.n	800ad90 <_dtoa_r+0x648>
 800ae52:	46d0      	mov	r8, sl
 800ae54:	e7eb      	b.n	800ae2e <_dtoa_r+0x6e6>
 800ae56:	2200      	movs	r2, #0
 800ae58:	4b6e      	ldr	r3, [pc, #440]	; (800b014 <_dtoa_r+0x8cc>)
 800ae5a:	f7fb f97d 	bl	8006158 <__aeabi_dmul>
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2300      	movs	r3, #0
 800ae62:	4680      	mov	r8, r0
 800ae64:	4689      	mov	r9, r1
 800ae66:	f7fb fbdf 	bl	8006628 <__aeabi_dcmpeq>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d09b      	beq.n	800ada6 <_dtoa_r+0x65e>
 800ae6e:	e7cd      	b.n	800ae0c <_dtoa_r+0x6c4>
 800ae70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	f000 80d0 	beq.w	800b018 <_dtoa_r+0x8d0>
 800ae78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae7a:	2a01      	cmp	r2, #1
 800ae7c:	f300 80ae 	bgt.w	800afdc <_dtoa_r+0x894>
 800ae80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae82:	2a00      	cmp	r2, #0
 800ae84:	f000 80a6 	beq.w	800afd4 <_dtoa_r+0x88c>
 800ae88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae8e:	9f06      	ldr	r7, [sp, #24]
 800ae90:	9a06      	ldr	r2, [sp, #24]
 800ae92:	2101      	movs	r1, #1
 800ae94:	441a      	add	r2, r3
 800ae96:	9206      	str	r2, [sp, #24]
 800ae98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	441a      	add	r2, r3
 800ae9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aea0:	f000 ff20 	bl	800bce4 <__i2b>
 800aea4:	4606      	mov	r6, r0
 800aea6:	2f00      	cmp	r7, #0
 800aea8:	dd0c      	ble.n	800aec4 <_dtoa_r+0x77c>
 800aeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dd09      	ble.n	800aec4 <_dtoa_r+0x77c>
 800aeb0:	42bb      	cmp	r3, r7
 800aeb2:	bfa8      	it	ge
 800aeb4:	463b      	movge	r3, r7
 800aeb6:	9a06      	ldr	r2, [sp, #24]
 800aeb8:	1aff      	subs	r7, r7, r3
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	9206      	str	r2, [sp, #24]
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	9309      	str	r3, [sp, #36]	; 0x24
 800aec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec6:	b1f3      	cbz	r3, 800af06 <_dtoa_r+0x7be>
 800aec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80a8 	beq.w	800b020 <_dtoa_r+0x8d8>
 800aed0:	2c00      	cmp	r4, #0
 800aed2:	dd10      	ble.n	800aef6 <_dtoa_r+0x7ae>
 800aed4:	4631      	mov	r1, r6
 800aed6:	4622      	mov	r2, r4
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 ffc1 	bl	800be60 <__pow5mult>
 800aede:	465a      	mov	r2, fp
 800aee0:	4601      	mov	r1, r0
 800aee2:	4606      	mov	r6, r0
 800aee4:	4628      	mov	r0, r5
 800aee6:	f000 ff13 	bl	800bd10 <__multiply>
 800aeea:	4680      	mov	r8, r0
 800aeec:	4659      	mov	r1, fp
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 fdf8 	bl	800bae4 <_Bfree>
 800aef4:	46c3      	mov	fp, r8
 800aef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef8:	1b1a      	subs	r2, r3, r4
 800aefa:	d004      	beq.n	800af06 <_dtoa_r+0x7be>
 800aefc:	4659      	mov	r1, fp
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 ffae 	bl	800be60 <__pow5mult>
 800af04:	4683      	mov	fp, r0
 800af06:	2101      	movs	r1, #1
 800af08:	4628      	mov	r0, r5
 800af0a:	f000 feeb 	bl	800bce4 <__i2b>
 800af0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af10:	4604      	mov	r4, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	f340 8086 	ble.w	800b024 <_dtoa_r+0x8dc>
 800af18:	461a      	mov	r2, r3
 800af1a:	4601      	mov	r1, r0
 800af1c:	4628      	mov	r0, r5
 800af1e:	f000 ff9f 	bl	800be60 <__pow5mult>
 800af22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af24:	4604      	mov	r4, r0
 800af26:	2b01      	cmp	r3, #1
 800af28:	dd7f      	ble.n	800b02a <_dtoa_r+0x8e2>
 800af2a:	f04f 0800 	mov.w	r8, #0
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af34:	6918      	ldr	r0, [r3, #16]
 800af36:	f000 fe87 	bl	800bc48 <__hi0bits>
 800af3a:	f1c0 0020 	rsb	r0, r0, #32
 800af3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af40:	4418      	add	r0, r3
 800af42:	f010 001f 	ands.w	r0, r0, #31
 800af46:	f000 8092 	beq.w	800b06e <_dtoa_r+0x926>
 800af4a:	f1c0 0320 	rsb	r3, r0, #32
 800af4e:	2b04      	cmp	r3, #4
 800af50:	f340 808a 	ble.w	800b068 <_dtoa_r+0x920>
 800af54:	f1c0 001c 	rsb	r0, r0, #28
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	4407      	add	r7, r0
 800af5c:	4403      	add	r3, r0
 800af5e:	9306      	str	r3, [sp, #24]
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	4403      	add	r3, r0
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	9b06      	ldr	r3, [sp, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd05      	ble.n	800af78 <_dtoa_r+0x830>
 800af6c:	4659      	mov	r1, fp
 800af6e:	461a      	mov	r2, r3
 800af70:	4628      	mov	r0, r5
 800af72:	f000 ffcf 	bl	800bf14 <__lshift>
 800af76:	4683      	mov	fp, r0
 800af78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dd05      	ble.n	800af8a <_dtoa_r+0x842>
 800af7e:	4621      	mov	r1, r4
 800af80:	461a      	mov	r2, r3
 800af82:	4628      	mov	r0, r5
 800af84:	f000 ffc6 	bl	800bf14 <__lshift>
 800af88:	4604      	mov	r4, r0
 800af8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d070      	beq.n	800b072 <_dtoa_r+0x92a>
 800af90:	4621      	mov	r1, r4
 800af92:	4658      	mov	r0, fp
 800af94:	f001 f82e 	bl	800bff4 <__mcmp>
 800af98:	2800      	cmp	r0, #0
 800af9a:	da6a      	bge.n	800b072 <_dtoa_r+0x92a>
 800af9c:	2300      	movs	r3, #0
 800af9e:	4659      	mov	r1, fp
 800afa0:	220a      	movs	r2, #10
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 fdc0 	bl	800bb28 <__multadd>
 800afa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afaa:	4683      	mov	fp, r0
 800afac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8194 	beq.w	800b2de <_dtoa_r+0xb96>
 800afb6:	4631      	mov	r1, r6
 800afb8:	2300      	movs	r3, #0
 800afba:	220a      	movs	r2, #10
 800afbc:	4628      	mov	r0, r5
 800afbe:	f000 fdb3 	bl	800bb28 <__multadd>
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	4606      	mov	r6, r0
 800afc8:	f300 8093 	bgt.w	800b0f2 <_dtoa_r+0x9aa>
 800afcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afce:	2b02      	cmp	r3, #2
 800afd0:	dc57      	bgt.n	800b082 <_dtoa_r+0x93a>
 800afd2:	e08e      	b.n	800b0f2 <_dtoa_r+0x9aa>
 800afd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800afd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afda:	e757      	b.n	800ae8c <_dtoa_r+0x744>
 800afdc:	9b08      	ldr	r3, [sp, #32]
 800afde:	1e5c      	subs	r4, r3, #1
 800afe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	bfb7      	itett	lt
 800afe6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afe8:	1b1c      	subge	r4, r3, r4
 800afea:	1ae2      	sublt	r2, r4, r3
 800afec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800afee:	bfbe      	ittt	lt
 800aff0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aff2:	189b      	addlt	r3, r3, r2
 800aff4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aff6:	9b08      	ldr	r3, [sp, #32]
 800aff8:	bfb8      	it	lt
 800affa:	2400      	movlt	r4, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	bfbb      	ittet	lt
 800b000:	9b06      	ldrlt	r3, [sp, #24]
 800b002:	9a08      	ldrlt	r2, [sp, #32]
 800b004:	9f06      	ldrge	r7, [sp, #24]
 800b006:	1a9f      	sublt	r7, r3, r2
 800b008:	bfac      	ite	ge
 800b00a:	9b08      	ldrge	r3, [sp, #32]
 800b00c:	2300      	movlt	r3, #0
 800b00e:	e73f      	b.n	800ae90 <_dtoa_r+0x748>
 800b010:	3fe00000 	.word	0x3fe00000
 800b014:	40240000 	.word	0x40240000
 800b018:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b01a:	9f06      	ldr	r7, [sp, #24]
 800b01c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b01e:	e742      	b.n	800aea6 <_dtoa_r+0x75e>
 800b020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b022:	e76b      	b.n	800aefc <_dtoa_r+0x7b4>
 800b024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b026:	2b01      	cmp	r3, #1
 800b028:	dc19      	bgt.n	800b05e <_dtoa_r+0x916>
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	b9bb      	cbnz	r3, 800b05e <_dtoa_r+0x916>
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b034:	b99b      	cbnz	r3, 800b05e <_dtoa_r+0x916>
 800b036:	9b05      	ldr	r3, [sp, #20]
 800b038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b03c:	0d1b      	lsrs	r3, r3, #20
 800b03e:	051b      	lsls	r3, r3, #20
 800b040:	b183      	cbz	r3, 800b064 <_dtoa_r+0x91c>
 800b042:	f04f 0801 	mov.w	r8, #1
 800b046:	9b06      	ldr	r3, [sp, #24]
 800b048:	3301      	adds	r3, #1
 800b04a:	9306      	str	r3, [sp, #24]
 800b04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04e:	3301      	adds	r3, #1
 800b050:	9309      	str	r3, [sp, #36]	; 0x24
 800b052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	f47f af6a 	bne.w	800af2e <_dtoa_r+0x7e6>
 800b05a:	2001      	movs	r0, #1
 800b05c:	e76f      	b.n	800af3e <_dtoa_r+0x7f6>
 800b05e:	f04f 0800 	mov.w	r8, #0
 800b062:	e7f6      	b.n	800b052 <_dtoa_r+0x90a>
 800b064:	4698      	mov	r8, r3
 800b066:	e7f4      	b.n	800b052 <_dtoa_r+0x90a>
 800b068:	f43f af7d 	beq.w	800af66 <_dtoa_r+0x81e>
 800b06c:	4618      	mov	r0, r3
 800b06e:	301c      	adds	r0, #28
 800b070:	e772      	b.n	800af58 <_dtoa_r+0x810>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	2b00      	cmp	r3, #0
 800b076:	dc36      	bgt.n	800b0e6 <_dtoa_r+0x99e>
 800b078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	dd33      	ble.n	800b0e6 <_dtoa_r+0x99e>
 800b07e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b082:	f1b9 0f00 	cmp.w	r9, #0
 800b086:	d10d      	bne.n	800b0a4 <_dtoa_r+0x95c>
 800b088:	4621      	mov	r1, r4
 800b08a:	464b      	mov	r3, r9
 800b08c:	2205      	movs	r2, #5
 800b08e:	4628      	mov	r0, r5
 800b090:	f000 fd4a 	bl	800bb28 <__multadd>
 800b094:	4601      	mov	r1, r0
 800b096:	4604      	mov	r4, r0
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 ffab 	bl	800bff4 <__mcmp>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f73f adb8 	bgt.w	800ac14 <_dtoa_r+0x4cc>
 800b0a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0a6:	9f03      	ldr	r7, [sp, #12]
 800b0a8:	ea6f 0a03 	mvn.w	sl, r3
 800b0ac:	f04f 0800 	mov.w	r8, #0
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 fd16 	bl	800bae4 <_Bfree>
 800b0b8:	2e00      	cmp	r6, #0
 800b0ba:	f43f aea7 	beq.w	800ae0c <_dtoa_r+0x6c4>
 800b0be:	f1b8 0f00 	cmp.w	r8, #0
 800b0c2:	d005      	beq.n	800b0d0 <_dtoa_r+0x988>
 800b0c4:	45b0      	cmp	r8, r6
 800b0c6:	d003      	beq.n	800b0d0 <_dtoa_r+0x988>
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f000 fd0a 	bl	800bae4 <_Bfree>
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f000 fd06 	bl	800bae4 <_Bfree>
 800b0d8:	e698      	b.n	800ae0c <_dtoa_r+0x6c4>
 800b0da:	2400      	movs	r4, #0
 800b0dc:	4626      	mov	r6, r4
 800b0de:	e7e1      	b.n	800b0a4 <_dtoa_r+0x95c>
 800b0e0:	46c2      	mov	sl, r8
 800b0e2:	4626      	mov	r6, r4
 800b0e4:	e596      	b.n	800ac14 <_dtoa_r+0x4cc>
 800b0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 80fd 	beq.w	800b2ec <_dtoa_r+0xba4>
 800b0f2:	2f00      	cmp	r7, #0
 800b0f4:	dd05      	ble.n	800b102 <_dtoa_r+0x9ba>
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	463a      	mov	r2, r7
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 ff0a 	bl	800bf14 <__lshift>
 800b100:	4606      	mov	r6, r0
 800b102:	f1b8 0f00 	cmp.w	r8, #0
 800b106:	d05c      	beq.n	800b1c2 <_dtoa_r+0xa7a>
 800b108:	4628      	mov	r0, r5
 800b10a:	6871      	ldr	r1, [r6, #4]
 800b10c:	f000 fcaa 	bl	800ba64 <_Balloc>
 800b110:	4607      	mov	r7, r0
 800b112:	b928      	cbnz	r0, 800b120 <_dtoa_r+0x9d8>
 800b114:	4602      	mov	r2, r0
 800b116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b11a:	4b7f      	ldr	r3, [pc, #508]	; (800b318 <_dtoa_r+0xbd0>)
 800b11c:	f7ff bb28 	b.w	800a770 <_dtoa_r+0x28>
 800b120:	6932      	ldr	r2, [r6, #16]
 800b122:	f106 010c 	add.w	r1, r6, #12
 800b126:	3202      	adds	r2, #2
 800b128:	0092      	lsls	r2, r2, #2
 800b12a:	300c      	adds	r0, #12
 800b12c:	f000 fc8c 	bl	800ba48 <memcpy>
 800b130:	2201      	movs	r2, #1
 800b132:	4639      	mov	r1, r7
 800b134:	4628      	mov	r0, r5
 800b136:	f000 feed 	bl	800bf14 <__lshift>
 800b13a:	46b0      	mov	r8, r6
 800b13c:	4606      	mov	r6, r0
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	444b      	add	r3, r9
 800b148:	930a      	str	r3, [sp, #40]	; 0x28
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	9309      	str	r3, [sp, #36]	; 0x24
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	4621      	mov	r1, r4
 800b156:	3b01      	subs	r3, #1
 800b158:	4658      	mov	r0, fp
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	f7ff fa66 	bl	800a62c <quorem>
 800b160:	4603      	mov	r3, r0
 800b162:	4641      	mov	r1, r8
 800b164:	3330      	adds	r3, #48	; 0x30
 800b166:	9006      	str	r0, [sp, #24]
 800b168:	4658      	mov	r0, fp
 800b16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16c:	f000 ff42 	bl	800bff4 <__mcmp>
 800b170:	4632      	mov	r2, r6
 800b172:	4681      	mov	r9, r0
 800b174:	4621      	mov	r1, r4
 800b176:	4628      	mov	r0, r5
 800b178:	f000 ff58 	bl	800c02c <__mdiff>
 800b17c:	68c2      	ldr	r2, [r0, #12]
 800b17e:	4607      	mov	r7, r0
 800b180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b182:	bb02      	cbnz	r2, 800b1c6 <_dtoa_r+0xa7e>
 800b184:	4601      	mov	r1, r0
 800b186:	4658      	mov	r0, fp
 800b188:	f000 ff34 	bl	800bff4 <__mcmp>
 800b18c:	4602      	mov	r2, r0
 800b18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b190:	4639      	mov	r1, r7
 800b192:	4628      	mov	r0, r5
 800b194:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b198:	f000 fca4 	bl	800bae4 <_Bfree>
 800b19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b19e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a0:	9f08      	ldr	r7, [sp, #32]
 800b1a2:	ea43 0102 	orr.w	r1, r3, r2
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ac:	d10d      	bne.n	800b1ca <_dtoa_r+0xa82>
 800b1ae:	2b39      	cmp	r3, #57	; 0x39
 800b1b0:	d029      	beq.n	800b206 <_dtoa_r+0xabe>
 800b1b2:	f1b9 0f00 	cmp.w	r9, #0
 800b1b6:	dd01      	ble.n	800b1bc <_dtoa_r+0xa74>
 800b1b8:	9b06      	ldr	r3, [sp, #24]
 800b1ba:	3331      	adds	r3, #49	; 0x31
 800b1bc:	9a04      	ldr	r2, [sp, #16]
 800b1be:	7013      	strb	r3, [r2, #0]
 800b1c0:	e776      	b.n	800b0b0 <_dtoa_r+0x968>
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	e7b9      	b.n	800b13a <_dtoa_r+0x9f2>
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	e7e2      	b.n	800b190 <_dtoa_r+0xa48>
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	db06      	blt.n	800b1de <_dtoa_r+0xa96>
 800b1d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b1d2:	ea41 0909 	orr.w	r9, r1, r9
 800b1d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1d8:	ea59 0101 	orrs.w	r1, r9, r1
 800b1dc:	d120      	bne.n	800b220 <_dtoa_r+0xad8>
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	ddec      	ble.n	800b1bc <_dtoa_r+0xa74>
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	f000 fe93 	bl	800bf14 <__lshift>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4683      	mov	fp, r0
 800b1f2:	f000 feff 	bl	800bff4 <__mcmp>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	dc02      	bgt.n	800b202 <_dtoa_r+0xaba>
 800b1fc:	d1de      	bne.n	800b1bc <_dtoa_r+0xa74>
 800b1fe:	07da      	lsls	r2, r3, #31
 800b200:	d5dc      	bpl.n	800b1bc <_dtoa_r+0xa74>
 800b202:	2b39      	cmp	r3, #57	; 0x39
 800b204:	d1d8      	bne.n	800b1b8 <_dtoa_r+0xa70>
 800b206:	2339      	movs	r3, #57	; 0x39
 800b208:	9a04      	ldr	r2, [sp, #16]
 800b20a:	7013      	strb	r3, [r2, #0]
 800b20c:	463b      	mov	r3, r7
 800b20e:	461f      	mov	r7, r3
 800b210:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b214:	3b01      	subs	r3, #1
 800b216:	2a39      	cmp	r2, #57	; 0x39
 800b218:	d050      	beq.n	800b2bc <_dtoa_r+0xb74>
 800b21a:	3201      	adds	r2, #1
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e747      	b.n	800b0b0 <_dtoa_r+0x968>
 800b220:	2a00      	cmp	r2, #0
 800b222:	dd03      	ble.n	800b22c <_dtoa_r+0xae4>
 800b224:	2b39      	cmp	r3, #57	; 0x39
 800b226:	d0ee      	beq.n	800b206 <_dtoa_r+0xabe>
 800b228:	3301      	adds	r3, #1
 800b22a:	e7c7      	b.n	800b1bc <_dtoa_r+0xa74>
 800b22c:	9a08      	ldr	r2, [sp, #32]
 800b22e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b230:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b234:	428a      	cmp	r2, r1
 800b236:	d02a      	beq.n	800b28e <_dtoa_r+0xb46>
 800b238:	4659      	mov	r1, fp
 800b23a:	2300      	movs	r3, #0
 800b23c:	220a      	movs	r2, #10
 800b23e:	4628      	mov	r0, r5
 800b240:	f000 fc72 	bl	800bb28 <__multadd>
 800b244:	45b0      	cmp	r8, r6
 800b246:	4683      	mov	fp, r0
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	f04f 020a 	mov.w	r2, #10
 800b250:	4641      	mov	r1, r8
 800b252:	4628      	mov	r0, r5
 800b254:	d107      	bne.n	800b266 <_dtoa_r+0xb1e>
 800b256:	f000 fc67 	bl	800bb28 <__multadd>
 800b25a:	4680      	mov	r8, r0
 800b25c:	4606      	mov	r6, r0
 800b25e:	9b08      	ldr	r3, [sp, #32]
 800b260:	3301      	adds	r3, #1
 800b262:	9308      	str	r3, [sp, #32]
 800b264:	e775      	b.n	800b152 <_dtoa_r+0xa0a>
 800b266:	f000 fc5f 	bl	800bb28 <__multadd>
 800b26a:	4631      	mov	r1, r6
 800b26c:	4680      	mov	r8, r0
 800b26e:	2300      	movs	r3, #0
 800b270:	220a      	movs	r2, #10
 800b272:	4628      	mov	r0, r5
 800b274:	f000 fc58 	bl	800bb28 <__multadd>
 800b278:	4606      	mov	r6, r0
 800b27a:	e7f0      	b.n	800b25e <_dtoa_r+0xb16>
 800b27c:	f1b9 0f00 	cmp.w	r9, #0
 800b280:	bfcc      	ite	gt
 800b282:	464f      	movgt	r7, r9
 800b284:	2701      	movle	r7, #1
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	9a03      	ldr	r2, [sp, #12]
 800b28c:	4417      	add	r7, r2
 800b28e:	4659      	mov	r1, fp
 800b290:	2201      	movs	r2, #1
 800b292:	4628      	mov	r0, r5
 800b294:	9308      	str	r3, [sp, #32]
 800b296:	f000 fe3d 	bl	800bf14 <__lshift>
 800b29a:	4621      	mov	r1, r4
 800b29c:	4683      	mov	fp, r0
 800b29e:	f000 fea9 	bl	800bff4 <__mcmp>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	dcb2      	bgt.n	800b20c <_dtoa_r+0xac4>
 800b2a6:	d102      	bne.n	800b2ae <_dtoa_r+0xb66>
 800b2a8:	9b08      	ldr	r3, [sp, #32]
 800b2aa:	07db      	lsls	r3, r3, #31
 800b2ac:	d4ae      	bmi.n	800b20c <_dtoa_r+0xac4>
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	461f      	mov	r7, r3
 800b2b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2b6:	2a30      	cmp	r2, #48	; 0x30
 800b2b8:	d0fa      	beq.n	800b2b0 <_dtoa_r+0xb68>
 800b2ba:	e6f9      	b.n	800b0b0 <_dtoa_r+0x968>
 800b2bc:	9a03      	ldr	r2, [sp, #12]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d1a5      	bne.n	800b20e <_dtoa_r+0xac6>
 800b2c2:	2331      	movs	r3, #49	; 0x31
 800b2c4:	f10a 0a01 	add.w	sl, sl, #1
 800b2c8:	e779      	b.n	800b1be <_dtoa_r+0xa76>
 800b2ca:	4b14      	ldr	r3, [pc, #80]	; (800b31c <_dtoa_r+0xbd4>)
 800b2cc:	f7ff baa8 	b.w	800a820 <_dtoa_r+0xd8>
 800b2d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f47f aa81 	bne.w	800a7da <_dtoa_r+0x92>
 800b2d8:	4b11      	ldr	r3, [pc, #68]	; (800b320 <_dtoa_r+0xbd8>)
 800b2da:	f7ff baa1 	b.w	800a820 <_dtoa_r+0xd8>
 800b2de:	f1b9 0f00 	cmp.w	r9, #0
 800b2e2:	dc03      	bgt.n	800b2ec <_dtoa_r+0xba4>
 800b2e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	f73f aecb 	bgt.w	800b082 <_dtoa_r+0x93a>
 800b2ec:	9f03      	ldr	r7, [sp, #12]
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4658      	mov	r0, fp
 800b2f2:	f7ff f99b 	bl	800a62c <quorem>
 800b2f6:	9a03      	ldr	r2, [sp, #12]
 800b2f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2fc:	f807 3b01 	strb.w	r3, [r7], #1
 800b300:	1aba      	subs	r2, r7, r2
 800b302:	4591      	cmp	r9, r2
 800b304:	ddba      	ble.n	800b27c <_dtoa_r+0xb34>
 800b306:	4659      	mov	r1, fp
 800b308:	2300      	movs	r3, #0
 800b30a:	220a      	movs	r2, #10
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 fc0b 	bl	800bb28 <__multadd>
 800b312:	4683      	mov	fp, r0
 800b314:	e7eb      	b.n	800b2ee <_dtoa_r+0xba6>
 800b316:	bf00      	nop
 800b318:	0801f063 	.word	0x0801f063
 800b31c:	0801ee44 	.word	0x0801ee44
 800b320:	0801efc1 	.word	0x0801efc1

0800b324 <rshift>:
 800b324:	6903      	ldr	r3, [r0, #16]
 800b326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b32a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b32e:	f100 0414 	add.w	r4, r0, #20
 800b332:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b336:	dd46      	ble.n	800b3c6 <rshift+0xa2>
 800b338:	f011 011f 	ands.w	r1, r1, #31
 800b33c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b340:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b344:	d10c      	bne.n	800b360 <rshift+0x3c>
 800b346:	4629      	mov	r1, r5
 800b348:	f100 0710 	add.w	r7, r0, #16
 800b34c:	42b1      	cmp	r1, r6
 800b34e:	d335      	bcc.n	800b3bc <rshift+0x98>
 800b350:	1a9b      	subs	r3, r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	1eea      	subs	r2, r5, #3
 800b356:	4296      	cmp	r6, r2
 800b358:	bf38      	it	cc
 800b35a:	2300      	movcc	r3, #0
 800b35c:	4423      	add	r3, r4
 800b35e:	e015      	b.n	800b38c <rshift+0x68>
 800b360:	46a1      	mov	r9, r4
 800b362:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b366:	f1c1 0820 	rsb	r8, r1, #32
 800b36a:	40cf      	lsrs	r7, r1
 800b36c:	f105 0e04 	add.w	lr, r5, #4
 800b370:	4576      	cmp	r6, lr
 800b372:	46f4      	mov	ip, lr
 800b374:	d816      	bhi.n	800b3a4 <rshift+0x80>
 800b376:	1a9a      	subs	r2, r3, r2
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	3a04      	subs	r2, #4
 800b37c:	3501      	adds	r5, #1
 800b37e:	42ae      	cmp	r6, r5
 800b380:	bf38      	it	cc
 800b382:	2200      	movcc	r2, #0
 800b384:	18a3      	adds	r3, r4, r2
 800b386:	50a7      	str	r7, [r4, r2]
 800b388:	b107      	cbz	r7, 800b38c <rshift+0x68>
 800b38a:	3304      	adds	r3, #4
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	eba3 0204 	sub.w	r2, r3, r4
 800b392:	bf08      	it	eq
 800b394:	2300      	moveq	r3, #0
 800b396:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b39a:	6102      	str	r2, [r0, #16]
 800b39c:	bf08      	it	eq
 800b39e:	6143      	streq	r3, [r0, #20]
 800b3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a4:	f8dc c000 	ldr.w	ip, [ip]
 800b3a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3ac:	ea4c 0707 	orr.w	r7, ip, r7
 800b3b0:	f849 7b04 	str.w	r7, [r9], #4
 800b3b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3b8:	40cf      	lsrs	r7, r1
 800b3ba:	e7d9      	b.n	800b370 <rshift+0x4c>
 800b3bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3c4:	e7c2      	b.n	800b34c <rshift+0x28>
 800b3c6:	4623      	mov	r3, r4
 800b3c8:	e7e0      	b.n	800b38c <rshift+0x68>

0800b3ca <__hexdig_fun>:
 800b3ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b3ce:	2b09      	cmp	r3, #9
 800b3d0:	d802      	bhi.n	800b3d8 <__hexdig_fun+0xe>
 800b3d2:	3820      	subs	r0, #32
 800b3d4:	b2c0      	uxtb	r0, r0
 800b3d6:	4770      	bx	lr
 800b3d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3dc:	2b05      	cmp	r3, #5
 800b3de:	d801      	bhi.n	800b3e4 <__hexdig_fun+0x1a>
 800b3e0:	3847      	subs	r0, #71	; 0x47
 800b3e2:	e7f7      	b.n	800b3d4 <__hexdig_fun+0xa>
 800b3e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3e8:	2b05      	cmp	r3, #5
 800b3ea:	d801      	bhi.n	800b3f0 <__hexdig_fun+0x26>
 800b3ec:	3827      	subs	r0, #39	; 0x27
 800b3ee:	e7f1      	b.n	800b3d4 <__hexdig_fun+0xa>
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	4770      	bx	lr

0800b3f4 <__gethex>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	b08b      	sub	sp, #44	; 0x2c
 800b3fa:	9305      	str	r3, [sp, #20]
 800b3fc:	4bb2      	ldr	r3, [pc, #712]	; (800b6c8 <__gethex+0x2d4>)
 800b3fe:	9002      	str	r0, [sp, #8]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	468b      	mov	fp, r1
 800b404:	4618      	mov	r0, r3
 800b406:	4690      	mov	r8, r2
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	f7fa fce1 	bl	8005dd0 <strlen>
 800b40e:	4682      	mov	sl, r0
 800b410:	9b03      	ldr	r3, [sp, #12]
 800b412:	f8db 2000 	ldr.w	r2, [fp]
 800b416:	4403      	add	r3, r0
 800b418:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b41c:	9306      	str	r3, [sp, #24]
 800b41e:	1c93      	adds	r3, r2, #2
 800b420:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b424:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b428:	32fe      	adds	r2, #254	; 0xfe
 800b42a:	18d1      	adds	r1, r2, r3
 800b42c:	461f      	mov	r7, r3
 800b42e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b432:	9101      	str	r1, [sp, #4]
 800b434:	2830      	cmp	r0, #48	; 0x30
 800b436:	d0f8      	beq.n	800b42a <__gethex+0x36>
 800b438:	f7ff ffc7 	bl	800b3ca <__hexdig_fun>
 800b43c:	4604      	mov	r4, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d13a      	bne.n	800b4b8 <__gethex+0xc4>
 800b442:	4652      	mov	r2, sl
 800b444:	4638      	mov	r0, r7
 800b446:	9903      	ldr	r1, [sp, #12]
 800b448:	f001 fa26 	bl	800c898 <strncmp>
 800b44c:	4605      	mov	r5, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	d166      	bne.n	800b520 <__gethex+0x12c>
 800b452:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b456:	eb07 060a 	add.w	r6, r7, sl
 800b45a:	f7ff ffb6 	bl	800b3ca <__hexdig_fun>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d060      	beq.n	800b524 <__gethex+0x130>
 800b462:	4633      	mov	r3, r6
 800b464:	7818      	ldrb	r0, [r3, #0]
 800b466:	461f      	mov	r7, r3
 800b468:	2830      	cmp	r0, #48	; 0x30
 800b46a:	f103 0301 	add.w	r3, r3, #1
 800b46e:	d0f9      	beq.n	800b464 <__gethex+0x70>
 800b470:	f7ff ffab 	bl	800b3ca <__hexdig_fun>
 800b474:	2301      	movs	r3, #1
 800b476:	fab0 f480 	clz	r4, r0
 800b47a:	4635      	mov	r5, r6
 800b47c:	0964      	lsrs	r4, r4, #5
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	463a      	mov	r2, r7
 800b482:	4616      	mov	r6, r2
 800b484:	7830      	ldrb	r0, [r6, #0]
 800b486:	3201      	adds	r2, #1
 800b488:	f7ff ff9f 	bl	800b3ca <__hexdig_fun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1f8      	bne.n	800b482 <__gethex+0x8e>
 800b490:	4652      	mov	r2, sl
 800b492:	4630      	mov	r0, r6
 800b494:	9903      	ldr	r1, [sp, #12]
 800b496:	f001 f9ff 	bl	800c898 <strncmp>
 800b49a:	b980      	cbnz	r0, 800b4be <__gethex+0xca>
 800b49c:	b94d      	cbnz	r5, 800b4b2 <__gethex+0xbe>
 800b49e:	eb06 050a 	add.w	r5, r6, sl
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4616      	mov	r6, r2
 800b4a6:	7830      	ldrb	r0, [r6, #0]
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	f7ff ff8e 	bl	800b3ca <__hexdig_fun>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1f8      	bne.n	800b4a4 <__gethex+0xb0>
 800b4b2:	1bad      	subs	r5, r5, r6
 800b4b4:	00ad      	lsls	r5, r5, #2
 800b4b6:	e004      	b.n	800b4c2 <__gethex+0xce>
 800b4b8:	2400      	movs	r4, #0
 800b4ba:	4625      	mov	r5, r4
 800b4bc:	e7e0      	b.n	800b480 <__gethex+0x8c>
 800b4be:	2d00      	cmp	r5, #0
 800b4c0:	d1f7      	bne.n	800b4b2 <__gethex+0xbe>
 800b4c2:	7833      	ldrb	r3, [r6, #0]
 800b4c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4c8:	2b50      	cmp	r3, #80	; 0x50
 800b4ca:	d139      	bne.n	800b540 <__gethex+0x14c>
 800b4cc:	7873      	ldrb	r3, [r6, #1]
 800b4ce:	2b2b      	cmp	r3, #43	; 0x2b
 800b4d0:	d02a      	beq.n	800b528 <__gethex+0x134>
 800b4d2:	2b2d      	cmp	r3, #45	; 0x2d
 800b4d4:	d02c      	beq.n	800b530 <__gethex+0x13c>
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	1c71      	adds	r1, r6, #1
 800b4dc:	7808      	ldrb	r0, [r1, #0]
 800b4de:	f7ff ff74 	bl	800b3ca <__hexdig_fun>
 800b4e2:	1e43      	subs	r3, r0, #1
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b18      	cmp	r3, #24
 800b4e8:	d82a      	bhi.n	800b540 <__gethex+0x14c>
 800b4ea:	f1a0 0210 	sub.w	r2, r0, #16
 800b4ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4f2:	f7ff ff6a 	bl	800b3ca <__hexdig_fun>
 800b4f6:	1e43      	subs	r3, r0, #1
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b18      	cmp	r3, #24
 800b4fc:	d91b      	bls.n	800b536 <__gethex+0x142>
 800b4fe:	f1b9 0f00 	cmp.w	r9, #0
 800b502:	d000      	beq.n	800b506 <__gethex+0x112>
 800b504:	4252      	negs	r2, r2
 800b506:	4415      	add	r5, r2
 800b508:	f8cb 1000 	str.w	r1, [fp]
 800b50c:	b1d4      	cbz	r4, 800b544 <__gethex+0x150>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bf14      	ite	ne
 800b514:	2700      	movne	r7, #0
 800b516:	2706      	moveq	r7, #6
 800b518:	4638      	mov	r0, r7
 800b51a:	b00b      	add	sp, #44	; 0x2c
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	463e      	mov	r6, r7
 800b522:	4625      	mov	r5, r4
 800b524:	2401      	movs	r4, #1
 800b526:	e7cc      	b.n	800b4c2 <__gethex+0xce>
 800b528:	f04f 0900 	mov.w	r9, #0
 800b52c:	1cb1      	adds	r1, r6, #2
 800b52e:	e7d5      	b.n	800b4dc <__gethex+0xe8>
 800b530:	f04f 0901 	mov.w	r9, #1
 800b534:	e7fa      	b.n	800b52c <__gethex+0x138>
 800b536:	230a      	movs	r3, #10
 800b538:	fb03 0202 	mla	r2, r3, r2, r0
 800b53c:	3a10      	subs	r2, #16
 800b53e:	e7d6      	b.n	800b4ee <__gethex+0xfa>
 800b540:	4631      	mov	r1, r6
 800b542:	e7e1      	b.n	800b508 <__gethex+0x114>
 800b544:	4621      	mov	r1, r4
 800b546:	1bf3      	subs	r3, r6, r7
 800b548:	3b01      	subs	r3, #1
 800b54a:	2b07      	cmp	r3, #7
 800b54c:	dc0a      	bgt.n	800b564 <__gethex+0x170>
 800b54e:	9802      	ldr	r0, [sp, #8]
 800b550:	f000 fa88 	bl	800ba64 <_Balloc>
 800b554:	4604      	mov	r4, r0
 800b556:	b940      	cbnz	r0, 800b56a <__gethex+0x176>
 800b558:	4602      	mov	r2, r0
 800b55a:	21de      	movs	r1, #222	; 0xde
 800b55c:	4b5b      	ldr	r3, [pc, #364]	; (800b6cc <__gethex+0x2d8>)
 800b55e:	485c      	ldr	r0, [pc, #368]	; (800b6d0 <__gethex+0x2dc>)
 800b560:	f001 f9bc 	bl	800c8dc <__assert_func>
 800b564:	3101      	adds	r1, #1
 800b566:	105b      	asrs	r3, r3, #1
 800b568:	e7ef      	b.n	800b54a <__gethex+0x156>
 800b56a:	f04f 0b00 	mov.w	fp, #0
 800b56e:	f100 0914 	add.w	r9, r0, #20
 800b572:	f1ca 0301 	rsb	r3, sl, #1
 800b576:	f8cd 9010 	str.w	r9, [sp, #16]
 800b57a:	f8cd b004 	str.w	fp, [sp, #4]
 800b57e:	9308      	str	r3, [sp, #32]
 800b580:	42b7      	cmp	r7, r6
 800b582:	d33f      	bcc.n	800b604 <__gethex+0x210>
 800b584:	9f04      	ldr	r7, [sp, #16]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	f847 3b04 	str.w	r3, [r7], #4
 800b58c:	eba7 0709 	sub.w	r7, r7, r9
 800b590:	10bf      	asrs	r7, r7, #2
 800b592:	6127      	str	r7, [r4, #16]
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fb57 	bl	800bc48 <__hi0bits>
 800b59a:	017f      	lsls	r7, r7, #5
 800b59c:	f8d8 6000 	ldr.w	r6, [r8]
 800b5a0:	1a3f      	subs	r7, r7, r0
 800b5a2:	42b7      	cmp	r7, r6
 800b5a4:	dd62      	ble.n	800b66c <__gethex+0x278>
 800b5a6:	1bbf      	subs	r7, r7, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fef1 	bl	800c392 <__any_on>
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	b1a8      	cbz	r0, 800b5e0 <__gethex+0x1ec>
 800b5b4:	f04f 0a01 	mov.w	sl, #1
 800b5b8:	1e7b      	subs	r3, r7, #1
 800b5ba:	1159      	asrs	r1, r3, #5
 800b5bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b5c0:	f003 021f 	and.w	r2, r3, #31
 800b5c4:	fa0a f202 	lsl.w	r2, sl, r2
 800b5c8:	420a      	tst	r2, r1
 800b5ca:	d009      	beq.n	800b5e0 <__gethex+0x1ec>
 800b5cc:	4553      	cmp	r3, sl
 800b5ce:	dd05      	ble.n	800b5dc <__gethex+0x1e8>
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	1eb9      	subs	r1, r7, #2
 800b5d4:	f000 fedd 	bl	800c392 <__any_on>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d144      	bne.n	800b666 <__gethex+0x272>
 800b5dc:	f04f 0a02 	mov.w	sl, #2
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7ff fe9e 	bl	800b324 <rshift>
 800b5e8:	443d      	add	r5, r7
 800b5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5ee:	42ab      	cmp	r3, r5
 800b5f0:	da4a      	bge.n	800b688 <__gethex+0x294>
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	9802      	ldr	r0, [sp, #8]
 800b5f6:	f000 fa75 	bl	800bae4 <_Bfree>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5fe:	27a3      	movs	r7, #163	; 0xa3
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	e789      	b.n	800b518 <__gethex+0x124>
 800b604:	1e73      	subs	r3, r6, #1
 800b606:	9a06      	ldr	r2, [sp, #24]
 800b608:	9307      	str	r3, [sp, #28]
 800b60a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b60e:	4293      	cmp	r3, r2
 800b610:	d019      	beq.n	800b646 <__gethex+0x252>
 800b612:	f1bb 0f20 	cmp.w	fp, #32
 800b616:	d107      	bne.n	800b628 <__gethex+0x234>
 800b618:	9b04      	ldr	r3, [sp, #16]
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	f843 2b04 	str.w	r2, [r3], #4
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	2300      	movs	r3, #0
 800b624:	469b      	mov	fp, r3
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b62c:	f7ff fecd 	bl	800b3ca <__hexdig_fun>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	f000 000f 	and.w	r0, r0, #15
 800b636:	fa00 f00b 	lsl.w	r0, r0, fp
 800b63a:	4303      	orrs	r3, r0
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f10b 0b04 	add.w	fp, fp, #4
 800b642:	9b07      	ldr	r3, [sp, #28]
 800b644:	e00d      	b.n	800b662 <__gethex+0x26e>
 800b646:	9a08      	ldr	r2, [sp, #32]
 800b648:	1e73      	subs	r3, r6, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	42bb      	cmp	r3, r7
 800b64e:	d3e0      	bcc.n	800b612 <__gethex+0x21e>
 800b650:	4618      	mov	r0, r3
 800b652:	4652      	mov	r2, sl
 800b654:	9903      	ldr	r1, [sp, #12]
 800b656:	9309      	str	r3, [sp, #36]	; 0x24
 800b658:	f001 f91e 	bl	800c898 <strncmp>
 800b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65e:	2800      	cmp	r0, #0
 800b660:	d1d7      	bne.n	800b612 <__gethex+0x21e>
 800b662:	461e      	mov	r6, r3
 800b664:	e78c      	b.n	800b580 <__gethex+0x18c>
 800b666:	f04f 0a03 	mov.w	sl, #3
 800b66a:	e7b9      	b.n	800b5e0 <__gethex+0x1ec>
 800b66c:	da09      	bge.n	800b682 <__gethex+0x28e>
 800b66e:	1bf7      	subs	r7, r6, r7
 800b670:	4621      	mov	r1, r4
 800b672:	463a      	mov	r2, r7
 800b674:	9802      	ldr	r0, [sp, #8]
 800b676:	f000 fc4d 	bl	800bf14 <__lshift>
 800b67a:	4604      	mov	r4, r0
 800b67c:	1bed      	subs	r5, r5, r7
 800b67e:	f100 0914 	add.w	r9, r0, #20
 800b682:	f04f 0a00 	mov.w	sl, #0
 800b686:	e7b0      	b.n	800b5ea <__gethex+0x1f6>
 800b688:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b68c:	42a8      	cmp	r0, r5
 800b68e:	dd72      	ble.n	800b776 <__gethex+0x382>
 800b690:	1b45      	subs	r5, r0, r5
 800b692:	42ae      	cmp	r6, r5
 800b694:	dc35      	bgt.n	800b702 <__gethex+0x30e>
 800b696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d029      	beq.n	800b6f2 <__gethex+0x2fe>
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d02b      	beq.n	800b6fa <__gethex+0x306>
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d11c      	bne.n	800b6e0 <__gethex+0x2ec>
 800b6a6:	42ae      	cmp	r6, r5
 800b6a8:	d11a      	bne.n	800b6e0 <__gethex+0x2ec>
 800b6aa:	2e01      	cmp	r6, #1
 800b6ac:	d112      	bne.n	800b6d4 <__gethex+0x2e0>
 800b6ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6b2:	9a05      	ldr	r2, [sp, #20]
 800b6b4:	2762      	movs	r7, #98	; 0x62
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	f8c9 3000 	str.w	r3, [r9]
 800b6c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6c2:	601c      	str	r4, [r3, #0]
 800b6c4:	e728      	b.n	800b518 <__gethex+0x124>
 800b6c6:	bf00      	nop
 800b6c8:	0801f0fc 	.word	0x0801f0fc
 800b6cc:	0801f063 	.word	0x0801f063
 800b6d0:	0801f074 	.word	0x0801f074
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	1e71      	subs	r1, r6, #1
 800b6d8:	f000 fe5b 	bl	800c392 <__any_on>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d1e6      	bne.n	800b6ae <__gethex+0x2ba>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	9802      	ldr	r0, [sp, #8]
 800b6e4:	f000 f9fe 	bl	800bae4 <_Bfree>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6ec:	2750      	movs	r7, #80	; 0x50
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	e712      	b.n	800b518 <__gethex+0x124>
 800b6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1f3      	bne.n	800b6e0 <__gethex+0x2ec>
 800b6f8:	e7d9      	b.n	800b6ae <__gethex+0x2ba>
 800b6fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1d6      	bne.n	800b6ae <__gethex+0x2ba>
 800b700:	e7ee      	b.n	800b6e0 <__gethex+0x2ec>
 800b702:	1e6f      	subs	r7, r5, #1
 800b704:	f1ba 0f00 	cmp.w	sl, #0
 800b708:	d132      	bne.n	800b770 <__gethex+0x37c>
 800b70a:	b127      	cbz	r7, 800b716 <__gethex+0x322>
 800b70c:	4639      	mov	r1, r7
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 fe3f 	bl	800c392 <__any_on>
 800b714:	4682      	mov	sl, r0
 800b716:	2101      	movs	r1, #1
 800b718:	117b      	asrs	r3, r7, #5
 800b71a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b71e:	f007 071f 	and.w	r7, r7, #31
 800b722:	fa01 f707 	lsl.w	r7, r1, r7
 800b726:	421f      	tst	r7, r3
 800b728:	f04f 0702 	mov.w	r7, #2
 800b72c:	4629      	mov	r1, r5
 800b72e:	4620      	mov	r0, r4
 800b730:	bf18      	it	ne
 800b732:	f04a 0a02 	orrne.w	sl, sl, #2
 800b736:	1b76      	subs	r6, r6, r5
 800b738:	f7ff fdf4 	bl	800b324 <rshift>
 800b73c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b740:	f1ba 0f00 	cmp.w	sl, #0
 800b744:	d048      	beq.n	800b7d8 <__gethex+0x3e4>
 800b746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d015      	beq.n	800b77a <__gethex+0x386>
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d017      	beq.n	800b782 <__gethex+0x38e>
 800b752:	2b01      	cmp	r3, #1
 800b754:	d109      	bne.n	800b76a <__gethex+0x376>
 800b756:	f01a 0f02 	tst.w	sl, #2
 800b75a:	d006      	beq.n	800b76a <__gethex+0x376>
 800b75c:	f8d9 0000 	ldr.w	r0, [r9]
 800b760:	ea4a 0a00 	orr.w	sl, sl, r0
 800b764:	f01a 0f01 	tst.w	sl, #1
 800b768:	d10e      	bne.n	800b788 <__gethex+0x394>
 800b76a:	f047 0710 	orr.w	r7, r7, #16
 800b76e:	e033      	b.n	800b7d8 <__gethex+0x3e4>
 800b770:	f04f 0a01 	mov.w	sl, #1
 800b774:	e7cf      	b.n	800b716 <__gethex+0x322>
 800b776:	2701      	movs	r7, #1
 800b778:	e7e2      	b.n	800b740 <__gethex+0x34c>
 800b77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b77c:	f1c3 0301 	rsb	r3, r3, #1
 800b780:	9315      	str	r3, [sp, #84]	; 0x54
 800b782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0f0      	beq.n	800b76a <__gethex+0x376>
 800b788:	f04f 0c00 	mov.w	ip, #0
 800b78c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b790:	f104 0314 	add.w	r3, r4, #20
 800b794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b7a6:	d01c      	beq.n	800b7e2 <__gethex+0x3ee>
 800b7a8:	3201      	adds	r2, #1
 800b7aa:	6002      	str	r2, [r0, #0]
 800b7ac:	2f02      	cmp	r7, #2
 800b7ae:	f104 0314 	add.w	r3, r4, #20
 800b7b2:	d13d      	bne.n	800b830 <__gethex+0x43c>
 800b7b4:	f8d8 2000 	ldr.w	r2, [r8]
 800b7b8:	3a01      	subs	r2, #1
 800b7ba:	42b2      	cmp	r2, r6
 800b7bc:	d10a      	bne.n	800b7d4 <__gethex+0x3e0>
 800b7be:	2201      	movs	r2, #1
 800b7c0:	1171      	asrs	r1, r6, #5
 800b7c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7c6:	f006 061f 	and.w	r6, r6, #31
 800b7ca:	fa02 f606 	lsl.w	r6, r2, r6
 800b7ce:	421e      	tst	r6, r3
 800b7d0:	bf18      	it	ne
 800b7d2:	4617      	movne	r7, r2
 800b7d4:	f047 0720 	orr.w	r7, r7, #32
 800b7d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7da:	601c      	str	r4, [r3, #0]
 800b7dc:	9b05      	ldr	r3, [sp, #20]
 800b7de:	601d      	str	r5, [r3, #0]
 800b7e0:	e69a      	b.n	800b518 <__gethex+0x124>
 800b7e2:	4299      	cmp	r1, r3
 800b7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e8:	d8d8      	bhi.n	800b79c <__gethex+0x3a8>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	459b      	cmp	fp, r3
 800b7ee:	db17      	blt.n	800b820 <__gethex+0x42c>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	9802      	ldr	r0, [sp, #8]
 800b7f4:	3101      	adds	r1, #1
 800b7f6:	f000 f935 	bl	800ba64 <_Balloc>
 800b7fa:	4681      	mov	r9, r0
 800b7fc:	b918      	cbnz	r0, 800b806 <__gethex+0x412>
 800b7fe:	4602      	mov	r2, r0
 800b800:	2184      	movs	r1, #132	; 0x84
 800b802:	4b19      	ldr	r3, [pc, #100]	; (800b868 <__gethex+0x474>)
 800b804:	e6ab      	b.n	800b55e <__gethex+0x16a>
 800b806:	6922      	ldr	r2, [r4, #16]
 800b808:	f104 010c 	add.w	r1, r4, #12
 800b80c:	3202      	adds	r2, #2
 800b80e:	0092      	lsls	r2, r2, #2
 800b810:	300c      	adds	r0, #12
 800b812:	f000 f919 	bl	800ba48 <memcpy>
 800b816:	4621      	mov	r1, r4
 800b818:	9802      	ldr	r0, [sp, #8]
 800b81a:	f000 f963 	bl	800bae4 <_Bfree>
 800b81e:	464c      	mov	r4, r9
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	6122      	str	r2, [r4, #16]
 800b826:	2201      	movs	r2, #1
 800b828:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b82c:	615a      	str	r2, [r3, #20]
 800b82e:	e7bd      	b.n	800b7ac <__gethex+0x3b8>
 800b830:	6922      	ldr	r2, [r4, #16]
 800b832:	455a      	cmp	r2, fp
 800b834:	dd0b      	ble.n	800b84e <__gethex+0x45a>
 800b836:	2101      	movs	r1, #1
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff fd73 	bl	800b324 <rshift>
 800b83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b842:	3501      	adds	r5, #1
 800b844:	42ab      	cmp	r3, r5
 800b846:	f6ff aed4 	blt.w	800b5f2 <__gethex+0x1fe>
 800b84a:	2701      	movs	r7, #1
 800b84c:	e7c2      	b.n	800b7d4 <__gethex+0x3e0>
 800b84e:	f016 061f 	ands.w	r6, r6, #31
 800b852:	d0fa      	beq.n	800b84a <__gethex+0x456>
 800b854:	4453      	add	r3, sl
 800b856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b85a:	f000 f9f5 	bl	800bc48 <__hi0bits>
 800b85e:	f1c6 0620 	rsb	r6, r6, #32
 800b862:	42b0      	cmp	r0, r6
 800b864:	dbe7      	blt.n	800b836 <__gethex+0x442>
 800b866:	e7f0      	b.n	800b84a <__gethex+0x456>
 800b868:	0801f063 	.word	0x0801f063

0800b86c <L_shift>:
 800b86c:	f1c2 0208 	rsb	r2, r2, #8
 800b870:	0092      	lsls	r2, r2, #2
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	f1c2 0620 	rsb	r6, r2, #32
 800b878:	6843      	ldr	r3, [r0, #4]
 800b87a:	6804      	ldr	r4, [r0, #0]
 800b87c:	fa03 f506 	lsl.w	r5, r3, r6
 800b880:	432c      	orrs	r4, r5
 800b882:	40d3      	lsrs	r3, r2
 800b884:	6004      	str	r4, [r0, #0]
 800b886:	f840 3f04 	str.w	r3, [r0, #4]!
 800b88a:	4288      	cmp	r0, r1
 800b88c:	d3f4      	bcc.n	800b878 <L_shift+0xc>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}

0800b890 <__match>:
 800b890:	b530      	push	{r4, r5, lr}
 800b892:	6803      	ldr	r3, [r0, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b89a:	b914      	cbnz	r4, 800b8a2 <__match+0x12>
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	2001      	movs	r0, #1
 800b8a0:	bd30      	pop	{r4, r5, pc}
 800b8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8aa:	2d19      	cmp	r5, #25
 800b8ac:	bf98      	it	ls
 800b8ae:	3220      	addls	r2, #32
 800b8b0:	42a2      	cmp	r2, r4
 800b8b2:	d0f0      	beq.n	800b896 <__match+0x6>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e7f3      	b.n	800b8a0 <__match+0x10>

0800b8b8 <__hexnan>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	2500      	movs	r5, #0
 800b8be:	680b      	ldr	r3, [r1, #0]
 800b8c0:	4682      	mov	sl, r0
 800b8c2:	115e      	asrs	r6, r3, #5
 800b8c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8c8:	f013 031f 	ands.w	r3, r3, #31
 800b8cc:	bf18      	it	ne
 800b8ce:	3604      	addne	r6, #4
 800b8d0:	1f37      	subs	r7, r6, #4
 800b8d2:	46b9      	mov	r9, r7
 800b8d4:	463c      	mov	r4, r7
 800b8d6:	46ab      	mov	fp, r5
 800b8d8:	b087      	sub	sp, #28
 800b8da:	4690      	mov	r8, r2
 800b8dc:	6802      	ldr	r2, [r0, #0]
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8e4:	9502      	str	r5, [sp, #8]
 800b8e6:	7851      	ldrb	r1, [r2, #1]
 800b8e8:	1c53      	adds	r3, r2, #1
 800b8ea:	9303      	str	r3, [sp, #12]
 800b8ec:	b341      	cbz	r1, 800b940 <__hexnan+0x88>
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	9205      	str	r2, [sp, #20]
 800b8f2:	9104      	str	r1, [sp, #16]
 800b8f4:	f7ff fd69 	bl	800b3ca <__hexdig_fun>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d14f      	bne.n	800b99c <__hexnan+0xe4>
 800b8fc:	9904      	ldr	r1, [sp, #16]
 800b8fe:	9a05      	ldr	r2, [sp, #20]
 800b900:	2920      	cmp	r1, #32
 800b902:	d818      	bhi.n	800b936 <__hexnan+0x7e>
 800b904:	9b02      	ldr	r3, [sp, #8]
 800b906:	459b      	cmp	fp, r3
 800b908:	dd13      	ble.n	800b932 <__hexnan+0x7a>
 800b90a:	454c      	cmp	r4, r9
 800b90c:	d206      	bcs.n	800b91c <__hexnan+0x64>
 800b90e:	2d07      	cmp	r5, #7
 800b910:	dc04      	bgt.n	800b91c <__hexnan+0x64>
 800b912:	462a      	mov	r2, r5
 800b914:	4649      	mov	r1, r9
 800b916:	4620      	mov	r0, r4
 800b918:	f7ff ffa8 	bl	800b86c <L_shift>
 800b91c:	4544      	cmp	r4, r8
 800b91e:	d950      	bls.n	800b9c2 <__hexnan+0x10a>
 800b920:	2300      	movs	r3, #0
 800b922:	f1a4 0904 	sub.w	r9, r4, #4
 800b926:	f844 3c04 	str.w	r3, [r4, #-4]
 800b92a:	461d      	mov	r5, r3
 800b92c:	464c      	mov	r4, r9
 800b92e:	f8cd b008 	str.w	fp, [sp, #8]
 800b932:	9a03      	ldr	r2, [sp, #12]
 800b934:	e7d7      	b.n	800b8e6 <__hexnan+0x2e>
 800b936:	2929      	cmp	r1, #41	; 0x29
 800b938:	d156      	bne.n	800b9e8 <__hexnan+0x130>
 800b93a:	3202      	adds	r2, #2
 800b93c:	f8ca 2000 	str.w	r2, [sl]
 800b940:	f1bb 0f00 	cmp.w	fp, #0
 800b944:	d050      	beq.n	800b9e8 <__hexnan+0x130>
 800b946:	454c      	cmp	r4, r9
 800b948:	d206      	bcs.n	800b958 <__hexnan+0xa0>
 800b94a:	2d07      	cmp	r5, #7
 800b94c:	dc04      	bgt.n	800b958 <__hexnan+0xa0>
 800b94e:	462a      	mov	r2, r5
 800b950:	4649      	mov	r1, r9
 800b952:	4620      	mov	r0, r4
 800b954:	f7ff ff8a 	bl	800b86c <L_shift>
 800b958:	4544      	cmp	r4, r8
 800b95a:	d934      	bls.n	800b9c6 <__hexnan+0x10e>
 800b95c:	4623      	mov	r3, r4
 800b95e:	f1a8 0204 	sub.w	r2, r8, #4
 800b962:	f853 1b04 	ldr.w	r1, [r3], #4
 800b966:	429f      	cmp	r7, r3
 800b968:	f842 1f04 	str.w	r1, [r2, #4]!
 800b96c:	d2f9      	bcs.n	800b962 <__hexnan+0xaa>
 800b96e:	1b3b      	subs	r3, r7, r4
 800b970:	f023 0303 	bic.w	r3, r3, #3
 800b974:	3304      	adds	r3, #4
 800b976:	3401      	adds	r4, #1
 800b978:	3e03      	subs	r6, #3
 800b97a:	42b4      	cmp	r4, r6
 800b97c:	bf88      	it	hi
 800b97e:	2304      	movhi	r3, #4
 800b980:	2200      	movs	r2, #0
 800b982:	4443      	add	r3, r8
 800b984:	f843 2b04 	str.w	r2, [r3], #4
 800b988:	429f      	cmp	r7, r3
 800b98a:	d2fb      	bcs.n	800b984 <__hexnan+0xcc>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	b91b      	cbnz	r3, 800b998 <__hexnan+0xe0>
 800b990:	4547      	cmp	r7, r8
 800b992:	d127      	bne.n	800b9e4 <__hexnan+0x12c>
 800b994:	2301      	movs	r3, #1
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	2005      	movs	r0, #5
 800b99a:	e026      	b.n	800b9ea <__hexnan+0x132>
 800b99c:	3501      	adds	r5, #1
 800b99e:	2d08      	cmp	r5, #8
 800b9a0:	f10b 0b01 	add.w	fp, fp, #1
 800b9a4:	dd06      	ble.n	800b9b4 <__hexnan+0xfc>
 800b9a6:	4544      	cmp	r4, r8
 800b9a8:	d9c3      	bls.n	800b932 <__hexnan+0x7a>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2501      	movs	r5, #1
 800b9ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9b2:	3c04      	subs	r4, #4
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	f000 000f 	and.w	r0, r0, #15
 800b9ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b9be:	6022      	str	r2, [r4, #0]
 800b9c0:	e7b7      	b.n	800b932 <__hexnan+0x7a>
 800b9c2:	2508      	movs	r5, #8
 800b9c4:	e7b5      	b.n	800b932 <__hexnan+0x7a>
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0df      	beq.n	800b98c <__hexnan+0xd4>
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d0:	f1c3 0320 	rsb	r3, r3, #32
 800b9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9dc:	401a      	ands	r2, r3
 800b9de:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9e2:	e7d3      	b.n	800b98c <__hexnan+0xd4>
 800b9e4:	3f04      	subs	r7, #4
 800b9e6:	e7d1      	b.n	800b98c <__hexnan+0xd4>
 800b9e8:	2004      	movs	r0, #4
 800b9ea:	b007      	add	sp, #28
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9f0 <_localeconv_r>:
 800b9f0:	4800      	ldr	r0, [pc, #0]	; (800b9f4 <_localeconv_r+0x4>)
 800b9f2:	4770      	bx	lr
 800b9f4:	20000164 	.word	0x20000164

0800b9f8 <malloc>:
 800b9f8:	4b02      	ldr	r3, [pc, #8]	; (800ba04 <malloc+0xc>)
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f000 bd65 	b.w	800c4cc <_malloc_r>
 800ba02:	bf00      	nop
 800ba04:	2000000c 	.word	0x2000000c

0800ba08 <__ascii_mbtowc>:
 800ba08:	b082      	sub	sp, #8
 800ba0a:	b901      	cbnz	r1, 800ba0e <__ascii_mbtowc+0x6>
 800ba0c:	a901      	add	r1, sp, #4
 800ba0e:	b142      	cbz	r2, 800ba22 <__ascii_mbtowc+0x1a>
 800ba10:	b14b      	cbz	r3, 800ba26 <__ascii_mbtowc+0x1e>
 800ba12:	7813      	ldrb	r3, [r2, #0]
 800ba14:	600b      	str	r3, [r1, #0]
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	1e10      	subs	r0, r2, #0
 800ba1a:	bf18      	it	ne
 800ba1c:	2001      	movne	r0, #1
 800ba1e:	b002      	add	sp, #8
 800ba20:	4770      	bx	lr
 800ba22:	4610      	mov	r0, r2
 800ba24:	e7fb      	b.n	800ba1e <__ascii_mbtowc+0x16>
 800ba26:	f06f 0001 	mvn.w	r0, #1
 800ba2a:	e7f8      	b.n	800ba1e <__ascii_mbtowc+0x16>

0800ba2c <memchr>:
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	b510      	push	{r4, lr}
 800ba30:	b2c9      	uxtb	r1, r1
 800ba32:	4402      	add	r2, r0
 800ba34:	4293      	cmp	r3, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	d101      	bne.n	800ba3e <memchr+0x12>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	e003      	b.n	800ba46 <memchr+0x1a>
 800ba3e:	7804      	ldrb	r4, [r0, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	428c      	cmp	r4, r1
 800ba44:	d1f6      	bne.n	800ba34 <memchr+0x8>
 800ba46:	bd10      	pop	{r4, pc}

0800ba48 <memcpy>:
 800ba48:	440a      	add	r2, r1
 800ba4a:	4291      	cmp	r1, r2
 800ba4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba50:	d100      	bne.n	800ba54 <memcpy+0xc>
 800ba52:	4770      	bx	lr
 800ba54:	b510      	push	{r4, lr}
 800ba56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba5a:	4291      	cmp	r1, r2
 800ba5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba60:	d1f9      	bne.n	800ba56 <memcpy+0xe>
 800ba62:	bd10      	pop	{r4, pc}

0800ba64 <_Balloc>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	b976      	cbnz	r6, 800ba8c <_Balloc+0x28>
 800ba6e:	2010      	movs	r0, #16
 800ba70:	f7ff ffc2 	bl	800b9f8 <malloc>
 800ba74:	4602      	mov	r2, r0
 800ba76:	6260      	str	r0, [r4, #36]	; 0x24
 800ba78:	b920      	cbnz	r0, 800ba84 <_Balloc+0x20>
 800ba7a:	2166      	movs	r1, #102	; 0x66
 800ba7c:	4b17      	ldr	r3, [pc, #92]	; (800badc <_Balloc+0x78>)
 800ba7e:	4818      	ldr	r0, [pc, #96]	; (800bae0 <_Balloc+0x7c>)
 800ba80:	f000 ff2c 	bl	800c8dc <__assert_func>
 800ba84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba88:	6006      	str	r6, [r0, #0]
 800ba8a:	60c6      	str	r6, [r0, #12]
 800ba8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba8e:	68f3      	ldr	r3, [r6, #12]
 800ba90:	b183      	cbz	r3, 800bab4 <_Balloc+0x50>
 800ba92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba9a:	b9b8      	cbnz	r0, 800bacc <_Balloc+0x68>
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	fa01 f605 	lsl.w	r6, r1, r5
 800baa2:	1d72      	adds	r2, r6, #5
 800baa4:	4620      	mov	r0, r4
 800baa6:	0092      	lsls	r2, r2, #2
 800baa8:	f000 fc94 	bl	800c3d4 <_calloc_r>
 800baac:	b160      	cbz	r0, 800bac8 <_Balloc+0x64>
 800baae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bab2:	e00e      	b.n	800bad2 <_Balloc+0x6e>
 800bab4:	2221      	movs	r2, #33	; 0x21
 800bab6:	2104      	movs	r1, #4
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 fc8b 	bl	800c3d4 <_calloc_r>
 800babe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bac0:	60f0      	str	r0, [r6, #12]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e4      	bne.n	800ba92 <_Balloc+0x2e>
 800bac8:	2000      	movs	r0, #0
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	6802      	ldr	r2, [r0, #0]
 800bace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bad2:	2300      	movs	r3, #0
 800bad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bad8:	e7f7      	b.n	800baca <_Balloc+0x66>
 800bada:	bf00      	nop
 800badc:	0801efce 	.word	0x0801efce
 800bae0:	0801f110 	.word	0x0801f110

0800bae4 <_Bfree>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bae8:	4605      	mov	r5, r0
 800baea:	460c      	mov	r4, r1
 800baec:	b976      	cbnz	r6, 800bb0c <_Bfree+0x28>
 800baee:	2010      	movs	r0, #16
 800baf0:	f7ff ff82 	bl	800b9f8 <malloc>
 800baf4:	4602      	mov	r2, r0
 800baf6:	6268      	str	r0, [r5, #36]	; 0x24
 800baf8:	b920      	cbnz	r0, 800bb04 <_Bfree+0x20>
 800bafa:	218a      	movs	r1, #138	; 0x8a
 800bafc:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <_Bfree+0x3c>)
 800bafe:	4809      	ldr	r0, [pc, #36]	; (800bb24 <_Bfree+0x40>)
 800bb00:	f000 feec 	bl	800c8dc <__assert_func>
 800bb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb08:	6006      	str	r6, [r0, #0]
 800bb0a:	60c6      	str	r6, [r0, #12]
 800bb0c:	b13c      	cbz	r4, 800bb1e <_Bfree+0x3a>
 800bb0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb10:	6862      	ldr	r2, [r4, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb18:	6021      	str	r1, [r4, #0]
 800bb1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	0801efce 	.word	0x0801efce
 800bb24:	0801f110 	.word	0x0801f110

0800bb28 <__multadd>:
 800bb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	461e      	mov	r6, r3
 800bb32:	2000      	movs	r0, #0
 800bb34:	690d      	ldr	r5, [r1, #16]
 800bb36:	f101 0c14 	add.w	ip, r1, #20
 800bb3a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb3e:	3001      	adds	r0, #1
 800bb40:	b299      	uxth	r1, r3
 800bb42:	fb02 6101 	mla	r1, r2, r1, r6
 800bb46:	0c1e      	lsrs	r6, r3, #16
 800bb48:	0c0b      	lsrs	r3, r1, #16
 800bb4a:	fb02 3306 	mla	r3, r2, r6, r3
 800bb4e:	b289      	uxth	r1, r1
 800bb50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb54:	4285      	cmp	r5, r0
 800bb56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb5a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb5e:	dcec      	bgt.n	800bb3a <__multadd+0x12>
 800bb60:	b30e      	cbz	r6, 800bba6 <__multadd+0x7e>
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	42ab      	cmp	r3, r5
 800bb66:	dc19      	bgt.n	800bb9c <__multadd+0x74>
 800bb68:	6861      	ldr	r1, [r4, #4]
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	3101      	adds	r1, #1
 800bb6e:	f7ff ff79 	bl	800ba64 <_Balloc>
 800bb72:	4680      	mov	r8, r0
 800bb74:	b928      	cbnz	r0, 800bb82 <__multadd+0x5a>
 800bb76:	4602      	mov	r2, r0
 800bb78:	21b5      	movs	r1, #181	; 0xb5
 800bb7a:	4b0c      	ldr	r3, [pc, #48]	; (800bbac <__multadd+0x84>)
 800bb7c:	480c      	ldr	r0, [pc, #48]	; (800bbb0 <__multadd+0x88>)
 800bb7e:	f000 fead 	bl	800c8dc <__assert_func>
 800bb82:	6922      	ldr	r2, [r4, #16]
 800bb84:	f104 010c 	add.w	r1, r4, #12
 800bb88:	3202      	adds	r2, #2
 800bb8a:	0092      	lsls	r2, r2, #2
 800bb8c:	300c      	adds	r0, #12
 800bb8e:	f7ff ff5b 	bl	800ba48 <memcpy>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4638      	mov	r0, r7
 800bb96:	f7ff ffa5 	bl	800bae4 <_Bfree>
 800bb9a:	4644      	mov	r4, r8
 800bb9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bba0:	3501      	adds	r5, #1
 800bba2:	615e      	str	r6, [r3, #20]
 800bba4:	6125      	str	r5, [r4, #16]
 800bba6:	4620      	mov	r0, r4
 800bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbac:	0801f063 	.word	0x0801f063
 800bbb0:	0801f110 	.word	0x0801f110

0800bbb4 <__s2b>:
 800bbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb8:	4615      	mov	r5, r2
 800bbba:	2209      	movs	r2, #9
 800bbbc:	461f      	mov	r7, r3
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	2201      	movs	r2, #1
 800bbca:	2100      	movs	r1, #0
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	db09      	blt.n	800bbe4 <__s2b+0x30>
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7ff ff47 	bl	800ba64 <_Balloc>
 800bbd6:	b940      	cbnz	r0, 800bbea <__s2b+0x36>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	21ce      	movs	r1, #206	; 0xce
 800bbdc:	4b18      	ldr	r3, [pc, #96]	; (800bc40 <__s2b+0x8c>)
 800bbde:	4819      	ldr	r0, [pc, #100]	; (800bc44 <__s2b+0x90>)
 800bbe0:	f000 fe7c 	bl	800c8dc <__assert_func>
 800bbe4:	0052      	lsls	r2, r2, #1
 800bbe6:	3101      	adds	r1, #1
 800bbe8:	e7f0      	b.n	800bbcc <__s2b+0x18>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	2d09      	cmp	r5, #9
 800bbee:	6143      	str	r3, [r0, #20]
 800bbf0:	f04f 0301 	mov.w	r3, #1
 800bbf4:	6103      	str	r3, [r0, #16]
 800bbf6:	dd16      	ble.n	800bc26 <__s2b+0x72>
 800bbf8:	f104 0909 	add.w	r9, r4, #9
 800bbfc:	46c8      	mov	r8, r9
 800bbfe:	442c      	add	r4, r5
 800bc00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc04:	4601      	mov	r1, r0
 800bc06:	220a      	movs	r2, #10
 800bc08:	4630      	mov	r0, r6
 800bc0a:	3b30      	subs	r3, #48	; 0x30
 800bc0c:	f7ff ff8c 	bl	800bb28 <__multadd>
 800bc10:	45a0      	cmp	r8, r4
 800bc12:	d1f5      	bne.n	800bc00 <__s2b+0x4c>
 800bc14:	f1a5 0408 	sub.w	r4, r5, #8
 800bc18:	444c      	add	r4, r9
 800bc1a:	1b2d      	subs	r5, r5, r4
 800bc1c:	1963      	adds	r3, r4, r5
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	db04      	blt.n	800bc2c <__s2b+0x78>
 800bc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc26:	2509      	movs	r5, #9
 800bc28:	340a      	adds	r4, #10
 800bc2a:	e7f6      	b.n	800bc1a <__s2b+0x66>
 800bc2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc30:	4601      	mov	r1, r0
 800bc32:	220a      	movs	r2, #10
 800bc34:	4630      	mov	r0, r6
 800bc36:	3b30      	subs	r3, #48	; 0x30
 800bc38:	f7ff ff76 	bl	800bb28 <__multadd>
 800bc3c:	e7ee      	b.n	800bc1c <__s2b+0x68>
 800bc3e:	bf00      	nop
 800bc40:	0801f063 	.word	0x0801f063
 800bc44:	0801f110 	.word	0x0801f110

0800bc48 <__hi0bits>:
 800bc48:	0c02      	lsrs	r2, r0, #16
 800bc4a:	0412      	lsls	r2, r2, #16
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	b9ca      	cbnz	r2, 800bc84 <__hi0bits+0x3c>
 800bc50:	0403      	lsls	r3, r0, #16
 800bc52:	2010      	movs	r0, #16
 800bc54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc58:	bf04      	itt	eq
 800bc5a:	021b      	lsleq	r3, r3, #8
 800bc5c:	3008      	addeq	r0, #8
 800bc5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc62:	bf04      	itt	eq
 800bc64:	011b      	lsleq	r3, r3, #4
 800bc66:	3004      	addeq	r0, #4
 800bc68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc6c:	bf04      	itt	eq
 800bc6e:	009b      	lsleq	r3, r3, #2
 800bc70:	3002      	addeq	r0, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	db05      	blt.n	800bc82 <__hi0bits+0x3a>
 800bc76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc7a:	f100 0001 	add.w	r0, r0, #1
 800bc7e:	bf08      	it	eq
 800bc80:	2020      	moveq	r0, #32
 800bc82:	4770      	bx	lr
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7e5      	b.n	800bc54 <__hi0bits+0xc>

0800bc88 <__lo0bits>:
 800bc88:	6803      	ldr	r3, [r0, #0]
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	f013 0007 	ands.w	r0, r3, #7
 800bc90:	d00b      	beq.n	800bcaa <__lo0bits+0x22>
 800bc92:	07d9      	lsls	r1, r3, #31
 800bc94:	d421      	bmi.n	800bcda <__lo0bits+0x52>
 800bc96:	0798      	lsls	r0, r3, #30
 800bc98:	bf49      	itett	mi
 800bc9a:	085b      	lsrmi	r3, r3, #1
 800bc9c:	089b      	lsrpl	r3, r3, #2
 800bc9e:	2001      	movmi	r0, #1
 800bca0:	6013      	strmi	r3, [r2, #0]
 800bca2:	bf5c      	itt	pl
 800bca4:	2002      	movpl	r0, #2
 800bca6:	6013      	strpl	r3, [r2, #0]
 800bca8:	4770      	bx	lr
 800bcaa:	b299      	uxth	r1, r3
 800bcac:	b909      	cbnz	r1, 800bcb2 <__lo0bits+0x2a>
 800bcae:	2010      	movs	r0, #16
 800bcb0:	0c1b      	lsrs	r3, r3, #16
 800bcb2:	b2d9      	uxtb	r1, r3
 800bcb4:	b909      	cbnz	r1, 800bcba <__lo0bits+0x32>
 800bcb6:	3008      	adds	r0, #8
 800bcb8:	0a1b      	lsrs	r3, r3, #8
 800bcba:	0719      	lsls	r1, r3, #28
 800bcbc:	bf04      	itt	eq
 800bcbe:	091b      	lsreq	r3, r3, #4
 800bcc0:	3004      	addeq	r0, #4
 800bcc2:	0799      	lsls	r1, r3, #30
 800bcc4:	bf04      	itt	eq
 800bcc6:	089b      	lsreq	r3, r3, #2
 800bcc8:	3002      	addeq	r0, #2
 800bcca:	07d9      	lsls	r1, r3, #31
 800bccc:	d403      	bmi.n	800bcd6 <__lo0bits+0x4e>
 800bcce:	085b      	lsrs	r3, r3, #1
 800bcd0:	f100 0001 	add.w	r0, r0, #1
 800bcd4:	d003      	beq.n	800bcde <__lo0bits+0x56>
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	4770      	bx	lr
 800bcda:	2000      	movs	r0, #0
 800bcdc:	4770      	bx	lr
 800bcde:	2020      	movs	r0, #32
 800bce0:	4770      	bx	lr
	...

0800bce4 <__i2b>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	460c      	mov	r4, r1
 800bce8:	2101      	movs	r1, #1
 800bcea:	f7ff febb 	bl	800ba64 <_Balloc>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	b928      	cbnz	r0, 800bcfe <__i2b+0x1a>
 800bcf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcf6:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <__i2b+0x24>)
 800bcf8:	4804      	ldr	r0, [pc, #16]	; (800bd0c <__i2b+0x28>)
 800bcfa:	f000 fdef 	bl	800c8dc <__assert_func>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	6144      	str	r4, [r0, #20]
 800bd02:	6103      	str	r3, [r0, #16]
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	bf00      	nop
 800bd08:	0801f063 	.word	0x0801f063
 800bd0c:	0801f110 	.word	0x0801f110

0800bd10 <__multiply>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	4691      	mov	r9, r2
 800bd16:	690a      	ldr	r2, [r1, #16]
 800bd18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	bfbe      	ittt	lt
 800bd22:	460b      	movlt	r3, r1
 800bd24:	464c      	movlt	r4, r9
 800bd26:	4699      	movlt	r9, r3
 800bd28:	6927      	ldr	r7, [r4, #16]
 800bd2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	6861      	ldr	r1, [r4, #4]
 800bd32:	eb07 060a 	add.w	r6, r7, sl
 800bd36:	42b3      	cmp	r3, r6
 800bd38:	b085      	sub	sp, #20
 800bd3a:	bfb8      	it	lt
 800bd3c:	3101      	addlt	r1, #1
 800bd3e:	f7ff fe91 	bl	800ba64 <_Balloc>
 800bd42:	b930      	cbnz	r0, 800bd52 <__multiply+0x42>
 800bd44:	4602      	mov	r2, r0
 800bd46:	f240 115d 	movw	r1, #349	; 0x15d
 800bd4a:	4b43      	ldr	r3, [pc, #268]	; (800be58 <__multiply+0x148>)
 800bd4c:	4843      	ldr	r0, [pc, #268]	; (800be5c <__multiply+0x14c>)
 800bd4e:	f000 fdc5 	bl	800c8dc <__assert_func>
 800bd52:	f100 0514 	add.w	r5, r0, #20
 800bd56:	462b      	mov	r3, r5
 800bd58:	2200      	movs	r2, #0
 800bd5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd5e:	4543      	cmp	r3, r8
 800bd60:	d321      	bcc.n	800bda6 <__multiply+0x96>
 800bd62:	f104 0314 	add.w	r3, r4, #20
 800bd66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd6a:	f109 0314 	add.w	r3, r9, #20
 800bd6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd72:	9202      	str	r2, [sp, #8]
 800bd74:	1b3a      	subs	r2, r7, r4
 800bd76:	3a15      	subs	r2, #21
 800bd78:	f022 0203 	bic.w	r2, r2, #3
 800bd7c:	3204      	adds	r2, #4
 800bd7e:	f104 0115 	add.w	r1, r4, #21
 800bd82:	428f      	cmp	r7, r1
 800bd84:	bf38      	it	cc
 800bd86:	2204      	movcc	r2, #4
 800bd88:	9201      	str	r2, [sp, #4]
 800bd8a:	9a02      	ldr	r2, [sp, #8]
 800bd8c:	9303      	str	r3, [sp, #12]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d80c      	bhi.n	800bdac <__multiply+0x9c>
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	dd03      	ble.n	800bd9e <__multiply+0x8e>
 800bd96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d059      	beq.n	800be52 <__multiply+0x142>
 800bd9e:	6106      	str	r6, [r0, #16]
 800bda0:	b005      	add	sp, #20
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	f843 2b04 	str.w	r2, [r3], #4
 800bdaa:	e7d8      	b.n	800bd5e <__multiply+0x4e>
 800bdac:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdb0:	f1ba 0f00 	cmp.w	sl, #0
 800bdb4:	d023      	beq.n	800bdfe <__multiply+0xee>
 800bdb6:	46a9      	mov	r9, r5
 800bdb8:	f04f 0c00 	mov.w	ip, #0
 800bdbc:	f104 0e14 	add.w	lr, r4, #20
 800bdc0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdc4:	f8d9 1000 	ldr.w	r1, [r9]
 800bdc8:	fa1f fb82 	uxth.w	fp, r2
 800bdcc:	b289      	uxth	r1, r1
 800bdce:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdd2:	4461      	add	r1, ip
 800bdd4:	f8d9 c000 	ldr.w	ip, [r9]
 800bdd8:	0c12      	lsrs	r2, r2, #16
 800bdda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bdde:	fb0a c202 	mla	r2, sl, r2, ip
 800bde2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bde6:	b289      	uxth	r1, r1
 800bde8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdec:	4577      	cmp	r7, lr
 800bdee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdf2:	f849 1b04 	str.w	r1, [r9], #4
 800bdf6:	d8e3      	bhi.n	800bdc0 <__multiply+0xb0>
 800bdf8:	9a01      	ldr	r2, [sp, #4]
 800bdfa:	f845 c002 	str.w	ip, [r5, r2]
 800bdfe:	9a03      	ldr	r2, [sp, #12]
 800be00:	3304      	adds	r3, #4
 800be02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be06:	f1b9 0f00 	cmp.w	r9, #0
 800be0a:	d020      	beq.n	800be4e <__multiply+0x13e>
 800be0c:	46ae      	mov	lr, r5
 800be0e:	f04f 0a00 	mov.w	sl, #0
 800be12:	6829      	ldr	r1, [r5, #0]
 800be14:	f104 0c14 	add.w	ip, r4, #20
 800be18:	f8bc b000 	ldrh.w	fp, [ip]
 800be1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be20:	b289      	uxth	r1, r1
 800be22:	fb09 220b 	mla	r2, r9, fp, r2
 800be26:	4492      	add	sl, r2
 800be28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be2c:	f84e 1b04 	str.w	r1, [lr], #4
 800be30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be34:	f8be 1000 	ldrh.w	r1, [lr]
 800be38:	0c12      	lsrs	r2, r2, #16
 800be3a:	fb09 1102 	mla	r1, r9, r2, r1
 800be3e:	4567      	cmp	r7, ip
 800be40:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be48:	d8e6      	bhi.n	800be18 <__multiply+0x108>
 800be4a:	9a01      	ldr	r2, [sp, #4]
 800be4c:	50a9      	str	r1, [r5, r2]
 800be4e:	3504      	adds	r5, #4
 800be50:	e79b      	b.n	800bd8a <__multiply+0x7a>
 800be52:	3e01      	subs	r6, #1
 800be54:	e79d      	b.n	800bd92 <__multiply+0x82>
 800be56:	bf00      	nop
 800be58:	0801f063 	.word	0x0801f063
 800be5c:	0801f110 	.word	0x0801f110

0800be60 <__pow5mult>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4615      	mov	r5, r2
 800be66:	f012 0203 	ands.w	r2, r2, #3
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	d007      	beq.n	800be80 <__pow5mult+0x20>
 800be70:	4c25      	ldr	r4, [pc, #148]	; (800bf08 <__pow5mult+0xa8>)
 800be72:	3a01      	subs	r2, #1
 800be74:	2300      	movs	r3, #0
 800be76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be7a:	f7ff fe55 	bl	800bb28 <__multadd>
 800be7e:	4607      	mov	r7, r0
 800be80:	10ad      	asrs	r5, r5, #2
 800be82:	d03d      	beq.n	800bf00 <__pow5mult+0xa0>
 800be84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be86:	b97c      	cbnz	r4, 800bea8 <__pow5mult+0x48>
 800be88:	2010      	movs	r0, #16
 800be8a:	f7ff fdb5 	bl	800b9f8 <malloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	6270      	str	r0, [r6, #36]	; 0x24
 800be92:	b928      	cbnz	r0, 800bea0 <__pow5mult+0x40>
 800be94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be98:	4b1c      	ldr	r3, [pc, #112]	; (800bf0c <__pow5mult+0xac>)
 800be9a:	481d      	ldr	r0, [pc, #116]	; (800bf10 <__pow5mult+0xb0>)
 800be9c:	f000 fd1e 	bl	800c8dc <__assert_func>
 800bea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bea4:	6004      	str	r4, [r0, #0]
 800bea6:	60c4      	str	r4, [r0, #12]
 800bea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800beac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800beb0:	b94c      	cbnz	r4, 800bec6 <__pow5mult+0x66>
 800beb2:	f240 2171 	movw	r1, #625	; 0x271
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7ff ff14 	bl	800bce4 <__i2b>
 800bebc:	2300      	movs	r3, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bec4:	6003      	str	r3, [r0, #0]
 800bec6:	f04f 0900 	mov.w	r9, #0
 800beca:	07eb      	lsls	r3, r5, #31
 800becc:	d50a      	bpl.n	800bee4 <__pow5mult+0x84>
 800bece:	4639      	mov	r1, r7
 800bed0:	4622      	mov	r2, r4
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7ff ff1c 	bl	800bd10 <__multiply>
 800bed8:	4680      	mov	r8, r0
 800beda:	4639      	mov	r1, r7
 800bedc:	4630      	mov	r0, r6
 800bede:	f7ff fe01 	bl	800bae4 <_Bfree>
 800bee2:	4647      	mov	r7, r8
 800bee4:	106d      	asrs	r5, r5, #1
 800bee6:	d00b      	beq.n	800bf00 <__pow5mult+0xa0>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	b938      	cbnz	r0, 800befc <__pow5mult+0x9c>
 800beec:	4622      	mov	r2, r4
 800beee:	4621      	mov	r1, r4
 800bef0:	4630      	mov	r0, r6
 800bef2:	f7ff ff0d 	bl	800bd10 <__multiply>
 800bef6:	6020      	str	r0, [r4, #0]
 800bef8:	f8c0 9000 	str.w	r9, [r0]
 800befc:	4604      	mov	r4, r0
 800befe:	e7e4      	b.n	800beca <__pow5mult+0x6a>
 800bf00:	4638      	mov	r0, r7
 800bf02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf06:	bf00      	nop
 800bf08:	0801f280 	.word	0x0801f280
 800bf0c:	0801efce 	.word	0x0801efce
 800bf10:	0801f110 	.word	0x0801f110

0800bf14 <__lshift>:
 800bf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf18:	460c      	mov	r4, r1
 800bf1a:	4607      	mov	r7, r0
 800bf1c:	4691      	mov	r9, r2
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	6849      	ldr	r1, [r1, #4]
 800bf22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf2c:	f108 0601 	add.w	r6, r8, #1
 800bf30:	42b3      	cmp	r3, r6
 800bf32:	db0b      	blt.n	800bf4c <__lshift+0x38>
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7ff fd95 	bl	800ba64 <_Balloc>
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	b948      	cbnz	r0, 800bf52 <__lshift+0x3e>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf44:	4b29      	ldr	r3, [pc, #164]	; (800bfec <__lshift+0xd8>)
 800bf46:	482a      	ldr	r0, [pc, #168]	; (800bff0 <__lshift+0xdc>)
 800bf48:	f000 fcc8 	bl	800c8dc <__assert_func>
 800bf4c:	3101      	adds	r1, #1
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	e7ee      	b.n	800bf30 <__lshift+0x1c>
 800bf52:	2300      	movs	r3, #0
 800bf54:	f100 0114 	add.w	r1, r0, #20
 800bf58:	f100 0210 	add.w	r2, r0, #16
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	4553      	cmp	r3, sl
 800bf60:	db37      	blt.n	800bfd2 <__lshift+0xbe>
 800bf62:	6920      	ldr	r0, [r4, #16]
 800bf64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf68:	f104 0314 	add.w	r3, r4, #20
 800bf6c:	f019 091f 	ands.w	r9, r9, #31
 800bf70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf78:	d02f      	beq.n	800bfda <__lshift+0xc6>
 800bf7a:	468a      	mov	sl, r1
 800bf7c:	f04f 0c00 	mov.w	ip, #0
 800bf80:	f1c9 0e20 	rsb	lr, r9, #32
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	fa02 f209 	lsl.w	r2, r2, r9
 800bf8a:	ea42 020c 	orr.w	r2, r2, ip
 800bf8e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf96:	4298      	cmp	r0, r3
 800bf98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf9c:	d8f2      	bhi.n	800bf84 <__lshift+0x70>
 800bf9e:	1b03      	subs	r3, r0, r4
 800bfa0:	3b15      	subs	r3, #21
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	f104 0215 	add.w	r2, r4, #21
 800bfac:	4290      	cmp	r0, r2
 800bfae:	bf38      	it	cc
 800bfb0:	2304      	movcc	r3, #4
 800bfb2:	f841 c003 	str.w	ip, [r1, r3]
 800bfb6:	f1bc 0f00 	cmp.w	ip, #0
 800bfba:	d001      	beq.n	800bfc0 <__lshift+0xac>
 800bfbc:	f108 0602 	add.w	r6, r8, #2
 800bfc0:	3e01      	subs	r6, #1
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	612e      	str	r6, [r5, #16]
 800bfc8:	f7ff fd8c 	bl	800bae4 <_Bfree>
 800bfcc:	4628      	mov	r0, r5
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	e7c1      	b.n	800bf5e <__lshift+0x4a>
 800bfda:	3904      	subs	r1, #4
 800bfdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe0:	4298      	cmp	r0, r3
 800bfe2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfe6:	d8f9      	bhi.n	800bfdc <__lshift+0xc8>
 800bfe8:	e7ea      	b.n	800bfc0 <__lshift+0xac>
 800bfea:	bf00      	nop
 800bfec:	0801f063 	.word	0x0801f063
 800bff0:	0801f110 	.word	0x0801f110

0800bff4 <__mcmp>:
 800bff4:	4603      	mov	r3, r0
 800bff6:	690a      	ldr	r2, [r1, #16]
 800bff8:	6900      	ldr	r0, [r0, #16]
 800bffa:	b530      	push	{r4, r5, lr}
 800bffc:	1a80      	subs	r0, r0, r2
 800bffe:	d10d      	bne.n	800c01c <__mcmp+0x28>
 800c000:	3314      	adds	r3, #20
 800c002:	3114      	adds	r1, #20
 800c004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c00c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c014:	4295      	cmp	r5, r2
 800c016:	d002      	beq.n	800c01e <__mcmp+0x2a>
 800c018:	d304      	bcc.n	800c024 <__mcmp+0x30>
 800c01a:	2001      	movs	r0, #1
 800c01c:	bd30      	pop	{r4, r5, pc}
 800c01e:	42a3      	cmp	r3, r4
 800c020:	d3f4      	bcc.n	800c00c <__mcmp+0x18>
 800c022:	e7fb      	b.n	800c01c <__mcmp+0x28>
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	e7f8      	b.n	800c01c <__mcmp+0x28>
	...

0800c02c <__mdiff>:
 800c02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	460d      	mov	r5, r1
 800c032:	4607      	mov	r7, r0
 800c034:	4611      	mov	r1, r2
 800c036:	4628      	mov	r0, r5
 800c038:	4614      	mov	r4, r2
 800c03a:	f7ff ffdb 	bl	800bff4 <__mcmp>
 800c03e:	1e06      	subs	r6, r0, #0
 800c040:	d111      	bne.n	800c066 <__mdiff+0x3a>
 800c042:	4631      	mov	r1, r6
 800c044:	4638      	mov	r0, r7
 800c046:	f7ff fd0d 	bl	800ba64 <_Balloc>
 800c04a:	4602      	mov	r2, r0
 800c04c:	b928      	cbnz	r0, 800c05a <__mdiff+0x2e>
 800c04e:	f240 2132 	movw	r1, #562	; 0x232
 800c052:	4b3a      	ldr	r3, [pc, #232]	; (800c13c <__mdiff+0x110>)
 800c054:	483a      	ldr	r0, [pc, #232]	; (800c140 <__mdiff+0x114>)
 800c056:	f000 fc41 	bl	800c8dc <__assert_func>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c060:	4610      	mov	r0, r2
 800c062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	bfa4      	itt	ge
 800c068:	4623      	movge	r3, r4
 800c06a:	462c      	movge	r4, r5
 800c06c:	4638      	mov	r0, r7
 800c06e:	6861      	ldr	r1, [r4, #4]
 800c070:	bfa6      	itte	ge
 800c072:	461d      	movge	r5, r3
 800c074:	2600      	movge	r6, #0
 800c076:	2601      	movlt	r6, #1
 800c078:	f7ff fcf4 	bl	800ba64 <_Balloc>
 800c07c:	4602      	mov	r2, r0
 800c07e:	b918      	cbnz	r0, 800c088 <__mdiff+0x5c>
 800c080:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c084:	4b2d      	ldr	r3, [pc, #180]	; (800c13c <__mdiff+0x110>)
 800c086:	e7e5      	b.n	800c054 <__mdiff+0x28>
 800c088:	f102 0814 	add.w	r8, r2, #20
 800c08c:	46c2      	mov	sl, r8
 800c08e:	f04f 0c00 	mov.w	ip, #0
 800c092:	6927      	ldr	r7, [r4, #16]
 800c094:	60c6      	str	r6, [r0, #12]
 800c096:	692e      	ldr	r6, [r5, #16]
 800c098:	f104 0014 	add.w	r0, r4, #20
 800c09c:	f105 0914 	add.w	r9, r5, #20
 800c0a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c0a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0a8:	3410      	adds	r4, #16
 800c0aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c0ae:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0b2:	fa1f f18b 	uxth.w	r1, fp
 800c0b6:	448c      	add	ip, r1
 800c0b8:	b299      	uxth	r1, r3
 800c0ba:	0c1b      	lsrs	r3, r3, #16
 800c0bc:	ebac 0101 	sub.w	r1, ip, r1
 800c0c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c0c8:	b289      	uxth	r1, r1
 800c0ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c0ce:	454e      	cmp	r6, r9
 800c0d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0d4:	f84a 3b04 	str.w	r3, [sl], #4
 800c0d8:	d8e7      	bhi.n	800c0aa <__mdiff+0x7e>
 800c0da:	1b73      	subs	r3, r6, r5
 800c0dc:	3b15      	subs	r3, #21
 800c0de:	f023 0303 	bic.w	r3, r3, #3
 800c0e2:	3515      	adds	r5, #21
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	42ae      	cmp	r6, r5
 800c0e8:	bf38      	it	cc
 800c0ea:	2304      	movcc	r3, #4
 800c0ec:	4418      	add	r0, r3
 800c0ee:	4443      	add	r3, r8
 800c0f0:	461e      	mov	r6, r3
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	4575      	cmp	r5, lr
 800c0f6:	d30e      	bcc.n	800c116 <__mdiff+0xea>
 800c0f8:	f10e 0103 	add.w	r1, lr, #3
 800c0fc:	1a09      	subs	r1, r1, r0
 800c0fe:	f021 0103 	bic.w	r1, r1, #3
 800c102:	3803      	subs	r0, #3
 800c104:	4586      	cmp	lr, r0
 800c106:	bf38      	it	cc
 800c108:	2100      	movcc	r1, #0
 800c10a:	4419      	add	r1, r3
 800c10c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c110:	b18b      	cbz	r3, 800c136 <__mdiff+0x10a>
 800c112:	6117      	str	r7, [r2, #16]
 800c114:	e7a4      	b.n	800c060 <__mdiff+0x34>
 800c116:	f855 8b04 	ldr.w	r8, [r5], #4
 800c11a:	fa1f f188 	uxth.w	r1, r8
 800c11e:	4461      	add	r1, ip
 800c120:	140c      	asrs	r4, r1, #16
 800c122:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c126:	b289      	uxth	r1, r1
 800c128:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c12c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c130:	f846 1b04 	str.w	r1, [r6], #4
 800c134:	e7de      	b.n	800c0f4 <__mdiff+0xc8>
 800c136:	3f01      	subs	r7, #1
 800c138:	e7e8      	b.n	800c10c <__mdiff+0xe0>
 800c13a:	bf00      	nop
 800c13c:	0801f063 	.word	0x0801f063
 800c140:	0801f110 	.word	0x0801f110

0800c144 <__ulp>:
 800c144:	4b11      	ldr	r3, [pc, #68]	; (800c18c <__ulp+0x48>)
 800c146:	400b      	ands	r3, r1
 800c148:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dd02      	ble.n	800c156 <__ulp+0x12>
 800c150:	2000      	movs	r0, #0
 800c152:	4619      	mov	r1, r3
 800c154:	4770      	bx	lr
 800c156:	425b      	negs	r3, r3
 800c158:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c15c:	f04f 0000 	mov.w	r0, #0
 800c160:	f04f 0100 	mov.w	r1, #0
 800c164:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c168:	da04      	bge.n	800c174 <__ulp+0x30>
 800c16a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c16e:	fa43 f102 	asr.w	r1, r3, r2
 800c172:	4770      	bx	lr
 800c174:	f1a2 0314 	sub.w	r3, r2, #20
 800c178:	2b1e      	cmp	r3, #30
 800c17a:	bfd6      	itet	le
 800c17c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c180:	2301      	movgt	r3, #1
 800c182:	fa22 f303 	lsrle.w	r3, r2, r3
 800c186:	4618      	mov	r0, r3
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	7ff00000 	.word	0x7ff00000

0800c190 <__b2d>:
 800c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c194:	6907      	ldr	r7, [r0, #16]
 800c196:	f100 0914 	add.w	r9, r0, #20
 800c19a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c19e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c1a2:	f1a7 0804 	sub.w	r8, r7, #4
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	f7ff fd4e 	bl	800bc48 <__hi0bits>
 800c1ac:	f1c0 0320 	rsb	r3, r0, #32
 800c1b0:	280a      	cmp	r0, #10
 800c1b2:	600b      	str	r3, [r1, #0]
 800c1b4:	491f      	ldr	r1, [pc, #124]	; (800c234 <__b2d+0xa4>)
 800c1b6:	dc17      	bgt.n	800c1e8 <__b2d+0x58>
 800c1b8:	45c1      	cmp	r9, r8
 800c1ba:	bf28      	it	cs
 800c1bc:	2200      	movcs	r2, #0
 800c1be:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1c2:	fa26 f30c 	lsr.w	r3, r6, ip
 800c1c6:	bf38      	it	cc
 800c1c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c1cc:	ea43 0501 	orr.w	r5, r3, r1
 800c1d0:	f100 0315 	add.w	r3, r0, #21
 800c1d4:	fa06 f303 	lsl.w	r3, r6, r3
 800c1d8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c1dc:	ea43 0402 	orr.w	r4, r3, r2
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e8:	45c1      	cmp	r9, r8
 800c1ea:	bf2e      	itee	cs
 800c1ec:	2200      	movcs	r2, #0
 800c1ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c1f2:	f1a7 0808 	subcc.w	r8, r7, #8
 800c1f6:	f1b0 030b 	subs.w	r3, r0, #11
 800c1fa:	d016      	beq.n	800c22a <__b2d+0x9a>
 800c1fc:	f1c3 0720 	rsb	r7, r3, #32
 800c200:	fa22 f107 	lsr.w	r1, r2, r7
 800c204:	45c8      	cmp	r8, r9
 800c206:	fa06 f603 	lsl.w	r6, r6, r3
 800c20a:	ea46 0601 	orr.w	r6, r6, r1
 800c20e:	bf94      	ite	ls
 800c210:	2100      	movls	r1, #0
 800c212:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c216:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c21a:	fa02 f003 	lsl.w	r0, r2, r3
 800c21e:	40f9      	lsrs	r1, r7
 800c220:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c224:	ea40 0401 	orr.w	r4, r0, r1
 800c228:	e7da      	b.n	800c1e0 <__b2d+0x50>
 800c22a:	4614      	mov	r4, r2
 800c22c:	ea46 0501 	orr.w	r5, r6, r1
 800c230:	e7d6      	b.n	800c1e0 <__b2d+0x50>
 800c232:	bf00      	nop
 800c234:	3ff00000 	.word	0x3ff00000

0800c238 <__d2b>:
 800c238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c23c:	2101      	movs	r1, #1
 800c23e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c242:	4690      	mov	r8, r2
 800c244:	461d      	mov	r5, r3
 800c246:	f7ff fc0d 	bl	800ba64 <_Balloc>
 800c24a:	4604      	mov	r4, r0
 800c24c:	b930      	cbnz	r0, 800c25c <__d2b+0x24>
 800c24e:	4602      	mov	r2, r0
 800c250:	f240 310a 	movw	r1, #778	; 0x30a
 800c254:	4b24      	ldr	r3, [pc, #144]	; (800c2e8 <__d2b+0xb0>)
 800c256:	4825      	ldr	r0, [pc, #148]	; (800c2ec <__d2b+0xb4>)
 800c258:	f000 fb40 	bl	800c8dc <__assert_func>
 800c25c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c260:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c264:	bb2d      	cbnz	r5, 800c2b2 <__d2b+0x7a>
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f1b8 0300 	subs.w	r3, r8, #0
 800c26c:	d026      	beq.n	800c2bc <__d2b+0x84>
 800c26e:	4668      	mov	r0, sp
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	f7ff fd09 	bl	800bc88 <__lo0bits>
 800c276:	9900      	ldr	r1, [sp, #0]
 800c278:	b1f0      	cbz	r0, 800c2b8 <__d2b+0x80>
 800c27a:	9a01      	ldr	r2, [sp, #4]
 800c27c:	f1c0 0320 	rsb	r3, r0, #32
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	430b      	orrs	r3, r1
 800c286:	40c2      	lsrs	r2, r0
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bf14      	ite	ne
 800c292:	2102      	movne	r1, #2
 800c294:	2101      	moveq	r1, #1
 800c296:	61a3      	str	r3, [r4, #24]
 800c298:	6121      	str	r1, [r4, #16]
 800c29a:	b1c5      	cbz	r5, 800c2ce <__d2b+0x96>
 800c29c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2a0:	4405      	add	r5, r0
 800c2a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2a6:	603d      	str	r5, [r7, #0]
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	b002      	add	sp, #8
 800c2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2b6:	e7d6      	b.n	800c266 <__d2b+0x2e>
 800c2b8:	6161      	str	r1, [r4, #20]
 800c2ba:	e7e7      	b.n	800c28c <__d2b+0x54>
 800c2bc:	a801      	add	r0, sp, #4
 800c2be:	f7ff fce3 	bl	800bc88 <__lo0bits>
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	9b01      	ldr	r3, [sp, #4]
 800c2c6:	6121      	str	r1, [r4, #16]
 800c2c8:	6163      	str	r3, [r4, #20]
 800c2ca:	3020      	adds	r0, #32
 800c2cc:	e7e5      	b.n	800c29a <__d2b+0x62>
 800c2ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c2d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2d6:	6038      	str	r0, [r7, #0]
 800c2d8:	6918      	ldr	r0, [r3, #16]
 800c2da:	f7ff fcb5 	bl	800bc48 <__hi0bits>
 800c2de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c2e2:	6031      	str	r1, [r6, #0]
 800c2e4:	e7e1      	b.n	800c2aa <__d2b+0x72>
 800c2e6:	bf00      	nop
 800c2e8:	0801f063 	.word	0x0801f063
 800c2ec:	0801f110 	.word	0x0801f110

0800c2f0 <__ratio>:
 800c2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	4688      	mov	r8, r1
 800c2f6:	4669      	mov	r1, sp
 800c2f8:	4681      	mov	r9, r0
 800c2fa:	f7ff ff49 	bl	800c190 <__b2d>
 800c2fe:	460f      	mov	r7, r1
 800c300:	4604      	mov	r4, r0
 800c302:	460d      	mov	r5, r1
 800c304:	4640      	mov	r0, r8
 800c306:	a901      	add	r1, sp, #4
 800c308:	f7ff ff42 	bl	800c190 <__b2d>
 800c30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c310:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c314:	468b      	mov	fp, r1
 800c316:	eba3 0c02 	sub.w	ip, r3, r2
 800c31a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c324:	2b00      	cmp	r3, #0
 800c326:	bfd5      	itete	le
 800c328:	460a      	movle	r2, r1
 800c32a:	462a      	movgt	r2, r5
 800c32c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c330:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c334:	bfd8      	it	le
 800c336:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c33a:	465b      	mov	r3, fp
 800c33c:	4602      	mov	r2, r0
 800c33e:	4639      	mov	r1, r7
 800c340:	4620      	mov	r0, r4
 800c342:	f7fa f833 	bl	80063ac <__aeabi_ddiv>
 800c346:	b003      	add	sp, #12
 800c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c34c <__copybits>:
 800c34c:	3901      	subs	r1, #1
 800c34e:	b570      	push	{r4, r5, r6, lr}
 800c350:	1149      	asrs	r1, r1, #5
 800c352:	6914      	ldr	r4, [r2, #16]
 800c354:	3101      	adds	r1, #1
 800c356:	f102 0314 	add.w	r3, r2, #20
 800c35a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c35e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c362:	1f05      	subs	r5, r0, #4
 800c364:	42a3      	cmp	r3, r4
 800c366:	d30c      	bcc.n	800c382 <__copybits+0x36>
 800c368:	1aa3      	subs	r3, r4, r2
 800c36a:	3b11      	subs	r3, #17
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	3211      	adds	r2, #17
 800c372:	42a2      	cmp	r2, r4
 800c374:	bf88      	it	hi
 800c376:	2300      	movhi	r3, #0
 800c378:	4418      	add	r0, r3
 800c37a:	2300      	movs	r3, #0
 800c37c:	4288      	cmp	r0, r1
 800c37e:	d305      	bcc.n	800c38c <__copybits+0x40>
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	f853 6b04 	ldr.w	r6, [r3], #4
 800c386:	f845 6f04 	str.w	r6, [r5, #4]!
 800c38a:	e7eb      	b.n	800c364 <__copybits+0x18>
 800c38c:	f840 3b04 	str.w	r3, [r0], #4
 800c390:	e7f4      	b.n	800c37c <__copybits+0x30>

0800c392 <__any_on>:
 800c392:	f100 0214 	add.w	r2, r0, #20
 800c396:	6900      	ldr	r0, [r0, #16]
 800c398:	114b      	asrs	r3, r1, #5
 800c39a:	4298      	cmp	r0, r3
 800c39c:	b510      	push	{r4, lr}
 800c39e:	db11      	blt.n	800c3c4 <__any_on+0x32>
 800c3a0:	dd0a      	ble.n	800c3b8 <__any_on+0x26>
 800c3a2:	f011 011f 	ands.w	r1, r1, #31
 800c3a6:	d007      	beq.n	800c3b8 <__any_on+0x26>
 800c3a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3ac:	fa24 f001 	lsr.w	r0, r4, r1
 800c3b0:	fa00 f101 	lsl.w	r1, r0, r1
 800c3b4:	428c      	cmp	r4, r1
 800c3b6:	d10b      	bne.n	800c3d0 <__any_on+0x3e>
 800c3b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d803      	bhi.n	800c3c8 <__any_on+0x36>
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	bd10      	pop	{r4, pc}
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	e7f7      	b.n	800c3b8 <__any_on+0x26>
 800c3c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3cc:	2900      	cmp	r1, #0
 800c3ce:	d0f5      	beq.n	800c3bc <__any_on+0x2a>
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	e7f6      	b.n	800c3c2 <__any_on+0x30>

0800c3d4 <_calloc_r>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3da:	b934      	cbnz	r4, 800c3ea <_calloc_r+0x16>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f000 f875 	bl	800c4cc <_malloc_r>
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	b928      	cbnz	r0, 800c3f2 <_calloc_r+0x1e>
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ea:	220c      	movs	r2, #12
 800c3ec:	2600      	movs	r6, #0
 800c3ee:	6002      	str	r2, [r0, #0]
 800c3f0:	e7f9      	b.n	800c3e6 <_calloc_r+0x12>
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7fc fbe7 	bl	8008bc8 <memset>
 800c3fa:	e7f4      	b.n	800c3e6 <_calloc_r+0x12>

0800c3fc <_free_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4605      	mov	r5, r0
 800c400:	2900      	cmp	r1, #0
 800c402:	d040      	beq.n	800c486 <_free_r+0x8a>
 800c404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c408:	1f0c      	subs	r4, r1, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfb8      	it	lt
 800c40e:	18e4      	addlt	r4, r4, r3
 800c410:	f000 faae 	bl	800c970 <__malloc_lock>
 800c414:	4a1c      	ldr	r2, [pc, #112]	; (800c488 <_free_r+0x8c>)
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	b933      	cbnz	r3, 800c428 <_free_r+0x2c>
 800c41a:	6063      	str	r3, [r4, #4]
 800c41c:	6014      	str	r4, [r2, #0]
 800c41e:	4628      	mov	r0, r5
 800c420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c424:	f000 baaa 	b.w	800c97c <__malloc_unlock>
 800c428:	42a3      	cmp	r3, r4
 800c42a:	d908      	bls.n	800c43e <_free_r+0x42>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	1821      	adds	r1, r4, r0
 800c430:	428b      	cmp	r3, r1
 800c432:	bf01      	itttt	eq
 800c434:	6819      	ldreq	r1, [r3, #0]
 800c436:	685b      	ldreq	r3, [r3, #4]
 800c438:	1809      	addeq	r1, r1, r0
 800c43a:	6021      	streq	r1, [r4, #0]
 800c43c:	e7ed      	b.n	800c41a <_free_r+0x1e>
 800c43e:	461a      	mov	r2, r3
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	b10b      	cbz	r3, 800c448 <_free_r+0x4c>
 800c444:	42a3      	cmp	r3, r4
 800c446:	d9fa      	bls.n	800c43e <_free_r+0x42>
 800c448:	6811      	ldr	r1, [r2, #0]
 800c44a:	1850      	adds	r0, r2, r1
 800c44c:	42a0      	cmp	r0, r4
 800c44e:	d10b      	bne.n	800c468 <_free_r+0x6c>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	4401      	add	r1, r0
 800c454:	1850      	adds	r0, r2, r1
 800c456:	4283      	cmp	r3, r0
 800c458:	6011      	str	r1, [r2, #0]
 800c45a:	d1e0      	bne.n	800c41e <_free_r+0x22>
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	4401      	add	r1, r0
 800c462:	6011      	str	r1, [r2, #0]
 800c464:	6053      	str	r3, [r2, #4]
 800c466:	e7da      	b.n	800c41e <_free_r+0x22>
 800c468:	d902      	bls.n	800c470 <_free_r+0x74>
 800c46a:	230c      	movs	r3, #12
 800c46c:	602b      	str	r3, [r5, #0]
 800c46e:	e7d6      	b.n	800c41e <_free_r+0x22>
 800c470:	6820      	ldr	r0, [r4, #0]
 800c472:	1821      	adds	r1, r4, r0
 800c474:	428b      	cmp	r3, r1
 800c476:	bf01      	itttt	eq
 800c478:	6819      	ldreq	r1, [r3, #0]
 800c47a:	685b      	ldreq	r3, [r3, #4]
 800c47c:	1809      	addeq	r1, r1, r0
 800c47e:	6021      	streq	r1, [r4, #0]
 800c480:	6063      	str	r3, [r4, #4]
 800c482:	6054      	str	r4, [r2, #4]
 800c484:	e7cb      	b.n	800c41e <_free_r+0x22>
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	20000970 	.word	0x20000970

0800c48c <sbrk_aligned>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	4e0e      	ldr	r6, [pc, #56]	; (800c4c8 <sbrk_aligned+0x3c>)
 800c490:	460c      	mov	r4, r1
 800c492:	6831      	ldr	r1, [r6, #0]
 800c494:	4605      	mov	r5, r0
 800c496:	b911      	cbnz	r1, 800c49e <sbrk_aligned+0x12>
 800c498:	f000 f9ee 	bl	800c878 <_sbrk_r>
 800c49c:	6030      	str	r0, [r6, #0]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f000 f9e9 	bl	800c878 <_sbrk_r>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	d00a      	beq.n	800c4c0 <sbrk_aligned+0x34>
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d007      	beq.n	800c4c4 <sbrk_aligned+0x38>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f9de 	bl	800c878 <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d101      	bne.n	800c4c4 <sbrk_aligned+0x38>
 800c4c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	20000974 	.word	0x20000974

0800c4cc <_malloc_r>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	1ccd      	adds	r5, r1, #3
 800c4d2:	f025 0503 	bic.w	r5, r5, #3
 800c4d6:	3508      	adds	r5, #8
 800c4d8:	2d0c      	cmp	r5, #12
 800c4da:	bf38      	it	cc
 800c4dc:	250c      	movcc	r5, #12
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	4607      	mov	r7, r0
 800c4e2:	db01      	blt.n	800c4e8 <_malloc_r+0x1c>
 800c4e4:	42a9      	cmp	r1, r5
 800c4e6:	d905      	bls.n	800c4f4 <_malloc_r+0x28>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	2600      	movs	r6, #0
 800c4ec:	603b      	str	r3, [r7, #0]
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f4:	4e2e      	ldr	r6, [pc, #184]	; (800c5b0 <_malloc_r+0xe4>)
 800c4f6:	f000 fa3b 	bl	800c970 <__malloc_lock>
 800c4fa:	6833      	ldr	r3, [r6, #0]
 800c4fc:	461c      	mov	r4, r3
 800c4fe:	bb34      	cbnz	r4, 800c54e <_malloc_r+0x82>
 800c500:	4629      	mov	r1, r5
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff ffc2 	bl	800c48c <sbrk_aligned>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	4604      	mov	r4, r0
 800c50c:	d14d      	bne.n	800c5aa <_malloc_r+0xde>
 800c50e:	6834      	ldr	r4, [r6, #0]
 800c510:	4626      	mov	r6, r4
 800c512:	2e00      	cmp	r6, #0
 800c514:	d140      	bne.n	800c598 <_malloc_r+0xcc>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4631      	mov	r1, r6
 800c51a:	4638      	mov	r0, r7
 800c51c:	eb04 0803 	add.w	r8, r4, r3
 800c520:	f000 f9aa 	bl	800c878 <_sbrk_r>
 800c524:	4580      	cmp	r8, r0
 800c526:	d13a      	bne.n	800c59e <_malloc_r+0xd2>
 800c528:	6821      	ldr	r1, [r4, #0]
 800c52a:	3503      	adds	r5, #3
 800c52c:	1a6d      	subs	r5, r5, r1
 800c52e:	f025 0503 	bic.w	r5, r5, #3
 800c532:	3508      	adds	r5, #8
 800c534:	2d0c      	cmp	r5, #12
 800c536:	bf38      	it	cc
 800c538:	250c      	movcc	r5, #12
 800c53a:	4638      	mov	r0, r7
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7ff ffa5 	bl	800c48c <sbrk_aligned>
 800c542:	3001      	adds	r0, #1
 800c544:	d02b      	beq.n	800c59e <_malloc_r+0xd2>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	442b      	add	r3, r5
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	e00e      	b.n	800c56c <_malloc_r+0xa0>
 800c54e:	6822      	ldr	r2, [r4, #0]
 800c550:	1b52      	subs	r2, r2, r5
 800c552:	d41e      	bmi.n	800c592 <_malloc_r+0xc6>
 800c554:	2a0b      	cmp	r2, #11
 800c556:	d916      	bls.n	800c586 <_malloc_r+0xba>
 800c558:	1961      	adds	r1, r4, r5
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	6025      	str	r5, [r4, #0]
 800c55e:	bf18      	it	ne
 800c560:	6059      	strne	r1, [r3, #4]
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	bf08      	it	eq
 800c566:	6031      	streq	r1, [r6, #0]
 800c568:	5162      	str	r2, [r4, r5]
 800c56a:	604b      	str	r3, [r1, #4]
 800c56c:	4638      	mov	r0, r7
 800c56e:	f104 060b 	add.w	r6, r4, #11
 800c572:	f000 fa03 	bl	800c97c <__malloc_unlock>
 800c576:	f026 0607 	bic.w	r6, r6, #7
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	1af2      	subs	r2, r6, r3
 800c57e:	d0b6      	beq.n	800c4ee <_malloc_r+0x22>
 800c580:	1b9b      	subs	r3, r3, r6
 800c582:	50a3      	str	r3, [r4, r2]
 800c584:	e7b3      	b.n	800c4ee <_malloc_r+0x22>
 800c586:	6862      	ldr	r2, [r4, #4]
 800c588:	42a3      	cmp	r3, r4
 800c58a:	bf0c      	ite	eq
 800c58c:	6032      	streq	r2, [r6, #0]
 800c58e:	605a      	strne	r2, [r3, #4]
 800c590:	e7ec      	b.n	800c56c <_malloc_r+0xa0>
 800c592:	4623      	mov	r3, r4
 800c594:	6864      	ldr	r4, [r4, #4]
 800c596:	e7b2      	b.n	800c4fe <_malloc_r+0x32>
 800c598:	4634      	mov	r4, r6
 800c59a:	6876      	ldr	r6, [r6, #4]
 800c59c:	e7b9      	b.n	800c512 <_malloc_r+0x46>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	f000 f9ea 	bl	800c97c <__malloc_unlock>
 800c5a8:	e7a1      	b.n	800c4ee <_malloc_r+0x22>
 800c5aa:	6025      	str	r5, [r4, #0]
 800c5ac:	e7de      	b.n	800c56c <_malloc_r+0xa0>
 800c5ae:	bf00      	nop
 800c5b0:	20000970 	.word	0x20000970

0800c5b4 <__ssputs_r>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	688e      	ldr	r6, [r1, #8]
 800c5ba:	4682      	mov	sl, r0
 800c5bc:	429e      	cmp	r6, r3
 800c5be:	460c      	mov	r4, r1
 800c5c0:	4690      	mov	r8, r2
 800c5c2:	461f      	mov	r7, r3
 800c5c4:	d838      	bhi.n	800c638 <__ssputs_r+0x84>
 800c5c6:	898a      	ldrh	r2, [r1, #12]
 800c5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5cc:	d032      	beq.n	800c634 <__ssputs_r+0x80>
 800c5ce:	6825      	ldr	r5, [r4, #0]
 800c5d0:	6909      	ldr	r1, [r1, #16]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	eba5 0901 	sub.w	r9, r5, r1
 800c5d8:	6965      	ldr	r5, [r4, #20]
 800c5da:	444b      	add	r3, r9
 800c5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5e4:	106d      	asrs	r5, r5, #1
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	bf38      	it	cc
 800c5ea:	461d      	movcc	r5, r3
 800c5ec:	0553      	lsls	r3, r2, #21
 800c5ee:	d531      	bpl.n	800c654 <__ssputs_r+0xa0>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7ff ff6b 	bl	800c4cc <_malloc_r>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	b950      	cbnz	r0, 800c610 <__ssputs_r+0x5c>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	f8ca 3000 	str.w	r3, [sl]
 800c604:	89a3      	ldrh	r3, [r4, #12]
 800c606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60a:	81a3      	strh	r3, [r4, #12]
 800c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c610:	464a      	mov	r2, r9
 800c612:	6921      	ldr	r1, [r4, #16]
 800c614:	f7ff fa18 	bl	800ba48 <memcpy>
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	6126      	str	r6, [r4, #16]
 800c626:	444e      	add	r6, r9
 800c628:	6026      	str	r6, [r4, #0]
 800c62a:	463e      	mov	r6, r7
 800c62c:	6165      	str	r5, [r4, #20]
 800c62e:	eba5 0509 	sub.w	r5, r5, r9
 800c632:	60a5      	str	r5, [r4, #8]
 800c634:	42be      	cmp	r6, r7
 800c636:	d900      	bls.n	800c63a <__ssputs_r+0x86>
 800c638:	463e      	mov	r6, r7
 800c63a:	4632      	mov	r2, r6
 800c63c:	4641      	mov	r1, r8
 800c63e:	6820      	ldr	r0, [r4, #0]
 800c640:	f000 f97c 	bl	800c93c <memmove>
 800c644:	68a3      	ldr	r3, [r4, #8]
 800c646:	2000      	movs	r0, #0
 800c648:	1b9b      	subs	r3, r3, r6
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	4433      	add	r3, r6
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	e7db      	b.n	800c60c <__ssputs_r+0x58>
 800c654:	462a      	mov	r2, r5
 800c656:	f000 f997 	bl	800c988 <_realloc_r>
 800c65a:	4606      	mov	r6, r0
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1e1      	bne.n	800c624 <__ssputs_r+0x70>
 800c660:	4650      	mov	r0, sl
 800c662:	6921      	ldr	r1, [r4, #16]
 800c664:	f7ff feca 	bl	800c3fc <_free_r>
 800c668:	e7c7      	b.n	800c5fa <__ssputs_r+0x46>
	...

0800c66c <_svfiprintf_r>:
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	4698      	mov	r8, r3
 800c672:	898b      	ldrh	r3, [r1, #12]
 800c674:	4607      	mov	r7, r0
 800c676:	061b      	lsls	r3, r3, #24
 800c678:	460d      	mov	r5, r1
 800c67a:	4614      	mov	r4, r2
 800c67c:	b09d      	sub	sp, #116	; 0x74
 800c67e:	d50e      	bpl.n	800c69e <_svfiprintf_r+0x32>
 800c680:	690b      	ldr	r3, [r1, #16]
 800c682:	b963      	cbnz	r3, 800c69e <_svfiprintf_r+0x32>
 800c684:	2140      	movs	r1, #64	; 0x40
 800c686:	f7ff ff21 	bl	800c4cc <_malloc_r>
 800c68a:	6028      	str	r0, [r5, #0]
 800c68c:	6128      	str	r0, [r5, #16]
 800c68e:	b920      	cbnz	r0, 800c69a <_svfiprintf_r+0x2e>
 800c690:	230c      	movs	r3, #12
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	e0d1      	b.n	800c83e <_svfiprintf_r+0x1d2>
 800c69a:	2340      	movs	r3, #64	; 0x40
 800c69c:	616b      	str	r3, [r5, #20]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a2:	2320      	movs	r3, #32
 800c6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a8:	2330      	movs	r3, #48	; 0x30
 800c6aa:	f04f 0901 	mov.w	r9, #1
 800c6ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c858 <_svfiprintf_r+0x1ec>
 800c6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ba:	4623      	mov	r3, r4
 800c6bc:	469a      	mov	sl, r3
 800c6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6c2:	b10a      	cbz	r2, 800c6c8 <_svfiprintf_r+0x5c>
 800c6c4:	2a25      	cmp	r2, #37	; 0x25
 800c6c6:	d1f9      	bne.n	800c6bc <_svfiprintf_r+0x50>
 800c6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c6cc:	d00b      	beq.n	800c6e6 <_svfiprintf_r+0x7a>
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff ff6d 	bl	800c5b4 <__ssputs_r>
 800c6da:	3001      	adds	r0, #1
 800c6dc:	f000 80aa 	beq.w	800c834 <_svfiprintf_r+0x1c8>
 800c6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e2:	445a      	add	r2, fp
 800c6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 80a2 	beq.w	800c834 <_svfiprintf_r+0x1c8>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6fa:	f10a 0a01 	add.w	sl, sl, #1
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c706:	931a      	str	r3, [sp, #104]	; 0x68
 800c708:	4654      	mov	r4, sl
 800c70a:	2205      	movs	r2, #5
 800c70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c710:	4851      	ldr	r0, [pc, #324]	; (800c858 <_svfiprintf_r+0x1ec>)
 800c712:	f7ff f98b 	bl	800ba2c <memchr>
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	b9d8      	cbnz	r0, 800c752 <_svfiprintf_r+0xe6>
 800c71a:	06d0      	lsls	r0, r2, #27
 800c71c:	bf44      	itt	mi
 800c71e:	2320      	movmi	r3, #32
 800c720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c724:	0711      	lsls	r1, r2, #28
 800c726:	bf44      	itt	mi
 800c728:	232b      	movmi	r3, #43	; 0x2b
 800c72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72e:	f89a 3000 	ldrb.w	r3, [sl]
 800c732:	2b2a      	cmp	r3, #42	; 0x2a
 800c734:	d015      	beq.n	800c762 <_svfiprintf_r+0xf6>
 800c736:	4654      	mov	r4, sl
 800c738:	2000      	movs	r0, #0
 800c73a:	f04f 0c0a 	mov.w	ip, #10
 800c73e:	9a07      	ldr	r2, [sp, #28]
 800c740:	4621      	mov	r1, r4
 800c742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c746:	3b30      	subs	r3, #48	; 0x30
 800c748:	2b09      	cmp	r3, #9
 800c74a:	d94e      	bls.n	800c7ea <_svfiprintf_r+0x17e>
 800c74c:	b1b0      	cbz	r0, 800c77c <_svfiprintf_r+0x110>
 800c74e:	9207      	str	r2, [sp, #28]
 800c750:	e014      	b.n	800c77c <_svfiprintf_r+0x110>
 800c752:	eba0 0308 	sub.w	r3, r0, r8
 800c756:	fa09 f303 	lsl.w	r3, r9, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	46a2      	mov	sl, r4
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	e7d2      	b.n	800c708 <_svfiprintf_r+0x9c>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	1d19      	adds	r1, r3, #4
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	9103      	str	r1, [sp, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bfbb      	ittet	lt
 800c76e:	425b      	neglt	r3, r3
 800c770:	f042 0202 	orrlt.w	r2, r2, #2
 800c774:	9307      	strge	r3, [sp, #28]
 800c776:	9307      	strlt	r3, [sp, #28]
 800c778:	bfb8      	it	lt
 800c77a:	9204      	strlt	r2, [sp, #16]
 800c77c:	7823      	ldrb	r3, [r4, #0]
 800c77e:	2b2e      	cmp	r3, #46	; 0x2e
 800c780:	d10c      	bne.n	800c79c <_svfiprintf_r+0x130>
 800c782:	7863      	ldrb	r3, [r4, #1]
 800c784:	2b2a      	cmp	r3, #42	; 0x2a
 800c786:	d135      	bne.n	800c7f4 <_svfiprintf_r+0x188>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	3402      	adds	r4, #2
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	9203      	str	r2, [sp, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	bfb8      	it	lt
 800c796:	f04f 33ff 	movlt.w	r3, #4294967295
 800c79a:	9305      	str	r3, [sp, #20]
 800c79c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c85c <_svfiprintf_r+0x1f0>
 800c7a0:	2203      	movs	r2, #3
 800c7a2:	4650      	mov	r0, sl
 800c7a4:	7821      	ldrb	r1, [r4, #0]
 800c7a6:	f7ff f941 	bl	800ba2c <memchr>
 800c7aa:	b140      	cbz	r0, 800c7be <_svfiprintf_r+0x152>
 800c7ac:	2340      	movs	r3, #64	; 0x40
 800c7ae:	eba0 000a 	sub.w	r0, r0, sl
 800c7b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	3401      	adds	r4, #1
 800c7ba:	4303      	orrs	r3, r0
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c2:	2206      	movs	r2, #6
 800c7c4:	4826      	ldr	r0, [pc, #152]	; (800c860 <_svfiprintf_r+0x1f4>)
 800c7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7ca:	f7ff f92f 	bl	800ba2c <memchr>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d038      	beq.n	800c844 <_svfiprintf_r+0x1d8>
 800c7d2:	4b24      	ldr	r3, [pc, #144]	; (800c864 <_svfiprintf_r+0x1f8>)
 800c7d4:	bb1b      	cbnz	r3, 800c81e <_svfiprintf_r+0x1b2>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	3307      	adds	r3, #7
 800c7da:	f023 0307 	bic.w	r3, r3, #7
 800c7de:	3308      	adds	r3, #8
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e4:	4433      	add	r3, r6
 800c7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e8:	e767      	b.n	800c6ba <_svfiprintf_r+0x4e>
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f2:	e7a5      	b.n	800c740 <_svfiprintf_r+0xd4>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f04f 0c0a 	mov.w	ip, #10
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	4620      	mov	r0, r4
 800c802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c806:	3a30      	subs	r2, #48	; 0x30
 800c808:	2a09      	cmp	r2, #9
 800c80a:	d903      	bls.n	800c814 <_svfiprintf_r+0x1a8>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0c5      	beq.n	800c79c <_svfiprintf_r+0x130>
 800c810:	9105      	str	r1, [sp, #20]
 800c812:	e7c3      	b.n	800c79c <_svfiprintf_r+0x130>
 800c814:	4604      	mov	r4, r0
 800c816:	2301      	movs	r3, #1
 800c818:	fb0c 2101 	mla	r1, ip, r1, r2
 800c81c:	e7f0      	b.n	800c800 <_svfiprintf_r+0x194>
 800c81e:	ab03      	add	r3, sp, #12
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	462a      	mov	r2, r5
 800c824:	4638      	mov	r0, r7
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <_svfiprintf_r+0x1fc>)
 800c828:	a904      	add	r1, sp, #16
 800c82a:	f7fc fa73 	bl	8008d14 <_printf_float>
 800c82e:	1c42      	adds	r2, r0, #1
 800c830:	4606      	mov	r6, r0
 800c832:	d1d6      	bne.n	800c7e2 <_svfiprintf_r+0x176>
 800c834:	89ab      	ldrh	r3, [r5, #12]
 800c836:	065b      	lsls	r3, r3, #25
 800c838:	f53f af2c 	bmi.w	800c694 <_svfiprintf_r+0x28>
 800c83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c83e:	b01d      	add	sp, #116	; 0x74
 800c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c844:	ab03      	add	r3, sp, #12
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	462a      	mov	r2, r5
 800c84a:	4638      	mov	r0, r7
 800c84c:	4b06      	ldr	r3, [pc, #24]	; (800c868 <_svfiprintf_r+0x1fc>)
 800c84e:	a904      	add	r1, sp, #16
 800c850:	f7fc fcfc 	bl	800924c <_printf_i>
 800c854:	e7eb      	b.n	800c82e <_svfiprintf_r+0x1c2>
 800c856:	bf00      	nop
 800c858:	0801f28c 	.word	0x0801f28c
 800c85c:	0801f292 	.word	0x0801f292
 800c860:	0801f296 	.word	0x0801f296
 800c864:	08008d15 	.word	0x08008d15
 800c868:	0800c5b5 	.word	0x0800c5b5

0800c86c <nan>:
 800c86c:	2000      	movs	r0, #0
 800c86e:	4901      	ldr	r1, [pc, #4]	; (800c874 <nan+0x8>)
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	7ff80000 	.word	0x7ff80000

0800c878 <_sbrk_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	2300      	movs	r3, #0
 800c87c:	4d05      	ldr	r5, [pc, #20]	; (800c894 <_sbrk_r+0x1c>)
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f9 fa7c 	bl	8005d80 <_sbrk>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_sbrk_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_sbrk_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20000978 	.word	0x20000978

0800c898 <strncmp>:
 800c898:	4603      	mov	r3, r0
 800c89a:	b510      	push	{r4, lr}
 800c89c:	b172      	cbz	r2, 800c8bc <strncmp+0x24>
 800c89e:	3901      	subs	r1, #1
 800c8a0:	1884      	adds	r4, r0, r2
 800c8a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c8a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8aa:	4290      	cmp	r0, r2
 800c8ac:	d101      	bne.n	800c8b2 <strncmp+0x1a>
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	d101      	bne.n	800c8b6 <strncmp+0x1e>
 800c8b2:	1a80      	subs	r0, r0, r2
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d1f3      	bne.n	800c8a2 <strncmp+0xa>
 800c8ba:	e7fa      	b.n	800c8b2 <strncmp+0x1a>
 800c8bc:	4610      	mov	r0, r2
 800c8be:	e7f9      	b.n	800c8b4 <strncmp+0x1c>

0800c8c0 <__ascii_wctomb>:
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	b141      	cbz	r1, 800c8d8 <__ascii_wctomb+0x18>
 800c8c6:	2aff      	cmp	r2, #255	; 0xff
 800c8c8:	d904      	bls.n	800c8d4 <__ascii_wctomb+0x14>
 800c8ca:	228a      	movs	r2, #138	; 0x8a
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	4770      	bx	lr
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	700a      	strb	r2, [r1, #0]
 800c8d8:	4770      	bx	lr
	...

0800c8dc <__assert_func>:
 800c8dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8de:	4614      	mov	r4, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	4b09      	ldr	r3, [pc, #36]	; (800c908 <__assert_func+0x2c>)
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68d8      	ldr	r0, [r3, #12]
 800c8ea:	b14c      	cbz	r4, 800c900 <__assert_func+0x24>
 800c8ec:	4b07      	ldr	r3, [pc, #28]	; (800c90c <__assert_func+0x30>)
 800c8ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8f2:	9100      	str	r1, [sp, #0]
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	4906      	ldr	r1, [pc, #24]	; (800c910 <__assert_func+0x34>)
 800c8f8:	f000 f80e 	bl	800c918 <fiprintf>
 800c8fc:	f000 fa8a 	bl	800ce14 <abort>
 800c900:	4b04      	ldr	r3, [pc, #16]	; (800c914 <__assert_func+0x38>)
 800c902:	461c      	mov	r4, r3
 800c904:	e7f3      	b.n	800c8ee <__assert_func+0x12>
 800c906:	bf00      	nop
 800c908:	2000000c 	.word	0x2000000c
 800c90c:	0801f29d 	.word	0x0801f29d
 800c910:	0801f2aa 	.word	0x0801f2aa
 800c914:	0801f2d8 	.word	0x0801f2d8

0800c918 <fiprintf>:
 800c918:	b40e      	push	{r1, r2, r3}
 800c91a:	b503      	push	{r0, r1, lr}
 800c91c:	4601      	mov	r1, r0
 800c91e:	ab03      	add	r3, sp, #12
 800c920:	4805      	ldr	r0, [pc, #20]	; (800c938 <fiprintf+0x20>)
 800c922:	f853 2b04 	ldr.w	r2, [r3], #4
 800c926:	6800      	ldr	r0, [r0, #0]
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	f000 f883 	bl	800ca34 <_vfiprintf_r>
 800c92e:	b002      	add	sp, #8
 800c930:	f85d eb04 	ldr.w	lr, [sp], #4
 800c934:	b003      	add	sp, #12
 800c936:	4770      	bx	lr
 800c938:	2000000c 	.word	0x2000000c

0800c93c <memmove>:
 800c93c:	4288      	cmp	r0, r1
 800c93e:	b510      	push	{r4, lr}
 800c940:	eb01 0402 	add.w	r4, r1, r2
 800c944:	d902      	bls.n	800c94c <memmove+0x10>
 800c946:	4284      	cmp	r4, r0
 800c948:	4623      	mov	r3, r4
 800c94a:	d807      	bhi.n	800c95c <memmove+0x20>
 800c94c:	1e43      	subs	r3, r0, #1
 800c94e:	42a1      	cmp	r1, r4
 800c950:	d008      	beq.n	800c964 <memmove+0x28>
 800c952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c95a:	e7f8      	b.n	800c94e <memmove+0x12>
 800c95c:	4601      	mov	r1, r0
 800c95e:	4402      	add	r2, r0
 800c960:	428a      	cmp	r2, r1
 800c962:	d100      	bne.n	800c966 <memmove+0x2a>
 800c964:	bd10      	pop	{r4, pc}
 800c966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c96e:	e7f7      	b.n	800c960 <memmove+0x24>

0800c970 <__malloc_lock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_lock+0x8>)
 800c972:	f000 bc0b 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800c976:	bf00      	nop
 800c978:	2000097c 	.word	0x2000097c

0800c97c <__malloc_unlock>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__malloc_unlock+0x8>)
 800c97e:	f000 bc06 	b.w	800d18e <__retarget_lock_release_recursive>
 800c982:	bf00      	nop
 800c984:	2000097c 	.word	0x2000097c

0800c988 <_realloc_r>:
 800c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	4680      	mov	r8, r0
 800c98e:	4614      	mov	r4, r2
 800c990:	460e      	mov	r6, r1
 800c992:	b921      	cbnz	r1, 800c99e <_realloc_r+0x16>
 800c994:	4611      	mov	r1, r2
 800c996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c99a:	f7ff bd97 	b.w	800c4cc <_malloc_r>
 800c99e:	b92a      	cbnz	r2, 800c9ac <_realloc_r+0x24>
 800c9a0:	f7ff fd2c 	bl	800c3fc <_free_r>
 800c9a4:	4625      	mov	r5, r4
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	f000 fc56 	bl	800d25c <_malloc_usable_size_r>
 800c9b0:	4284      	cmp	r4, r0
 800c9b2:	4607      	mov	r7, r0
 800c9b4:	d802      	bhi.n	800c9bc <_realloc_r+0x34>
 800c9b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9ba:	d812      	bhi.n	800c9e2 <_realloc_r+0x5a>
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7ff fd84 	bl	800c4cc <_malloc_r>
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0ed      	beq.n	800c9a6 <_realloc_r+0x1e>
 800c9ca:	42bc      	cmp	r4, r7
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	bf28      	it	cs
 800c9d2:	463a      	movcs	r2, r7
 800c9d4:	f7ff f838 	bl	800ba48 <memcpy>
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4640      	mov	r0, r8
 800c9dc:	f7ff fd0e 	bl	800c3fc <_free_r>
 800c9e0:	e7e1      	b.n	800c9a6 <_realloc_r+0x1e>
 800c9e2:	4635      	mov	r5, r6
 800c9e4:	e7df      	b.n	800c9a6 <_realloc_r+0x1e>

0800c9e6 <__sfputc_r>:
 800c9e6:	6893      	ldr	r3, [r2, #8]
 800c9e8:	b410      	push	{r4}
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	6093      	str	r3, [r2, #8]
 800c9f0:	da07      	bge.n	800ca02 <__sfputc_r+0x1c>
 800c9f2:	6994      	ldr	r4, [r2, #24]
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	db01      	blt.n	800c9fc <__sfputc_r+0x16>
 800c9f8:	290a      	cmp	r1, #10
 800c9fa:	d102      	bne.n	800ca02 <__sfputc_r+0x1c>
 800c9fc:	bc10      	pop	{r4}
 800c9fe:	f000 b949 	b.w	800cc94 <__swbuf_r>
 800ca02:	6813      	ldr	r3, [r2, #0]
 800ca04:	1c58      	adds	r0, r3, #1
 800ca06:	6010      	str	r0, [r2, #0]
 800ca08:	7019      	strb	r1, [r3, #0]
 800ca0a:	4608      	mov	r0, r1
 800ca0c:	bc10      	pop	{r4}
 800ca0e:	4770      	bx	lr

0800ca10 <__sfputs_r>:
 800ca10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca12:	4606      	mov	r6, r0
 800ca14:	460f      	mov	r7, r1
 800ca16:	4614      	mov	r4, r2
 800ca18:	18d5      	adds	r5, r2, r3
 800ca1a:	42ac      	cmp	r4, r5
 800ca1c:	d101      	bne.n	800ca22 <__sfputs_r+0x12>
 800ca1e:	2000      	movs	r0, #0
 800ca20:	e007      	b.n	800ca32 <__sfputs_r+0x22>
 800ca22:	463a      	mov	r2, r7
 800ca24:	4630      	mov	r0, r6
 800ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2a:	f7ff ffdc 	bl	800c9e6 <__sfputc_r>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d1f3      	bne.n	800ca1a <__sfputs_r+0xa>
 800ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca34 <_vfiprintf_r>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	460d      	mov	r5, r1
 800ca3a:	4614      	mov	r4, r2
 800ca3c:	4698      	mov	r8, r3
 800ca3e:	4606      	mov	r6, r0
 800ca40:	b09d      	sub	sp, #116	; 0x74
 800ca42:	b118      	cbz	r0, 800ca4c <_vfiprintf_r+0x18>
 800ca44:	6983      	ldr	r3, [r0, #24]
 800ca46:	b90b      	cbnz	r3, 800ca4c <_vfiprintf_r+0x18>
 800ca48:	f000 fb02 	bl	800d050 <__sinit>
 800ca4c:	4b89      	ldr	r3, [pc, #548]	; (800cc74 <_vfiprintf_r+0x240>)
 800ca4e:	429d      	cmp	r5, r3
 800ca50:	d11b      	bne.n	800ca8a <_vfiprintf_r+0x56>
 800ca52:	6875      	ldr	r5, [r6, #4]
 800ca54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca56:	07d9      	lsls	r1, r3, #31
 800ca58:	d405      	bmi.n	800ca66 <_vfiprintf_r+0x32>
 800ca5a:	89ab      	ldrh	r3, [r5, #12]
 800ca5c:	059a      	lsls	r2, r3, #22
 800ca5e:	d402      	bmi.n	800ca66 <_vfiprintf_r+0x32>
 800ca60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca62:	f000 fb93 	bl	800d18c <__retarget_lock_acquire_recursive>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	071b      	lsls	r3, r3, #28
 800ca6a:	d501      	bpl.n	800ca70 <_vfiprintf_r+0x3c>
 800ca6c:	692b      	ldr	r3, [r5, #16]
 800ca6e:	b9eb      	cbnz	r3, 800caac <_vfiprintf_r+0x78>
 800ca70:	4629      	mov	r1, r5
 800ca72:	4630      	mov	r0, r6
 800ca74:	f000 f960 	bl	800cd38 <__swsetup_r>
 800ca78:	b1c0      	cbz	r0, 800caac <_vfiprintf_r+0x78>
 800ca7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca7c:	07dc      	lsls	r4, r3, #31
 800ca7e:	d50e      	bpl.n	800ca9e <_vfiprintf_r+0x6a>
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	b01d      	add	sp, #116	; 0x74
 800ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8a:	4b7b      	ldr	r3, [pc, #492]	; (800cc78 <_vfiprintf_r+0x244>)
 800ca8c:	429d      	cmp	r5, r3
 800ca8e:	d101      	bne.n	800ca94 <_vfiprintf_r+0x60>
 800ca90:	68b5      	ldr	r5, [r6, #8]
 800ca92:	e7df      	b.n	800ca54 <_vfiprintf_r+0x20>
 800ca94:	4b79      	ldr	r3, [pc, #484]	; (800cc7c <_vfiprintf_r+0x248>)
 800ca96:	429d      	cmp	r5, r3
 800ca98:	bf08      	it	eq
 800ca9a:	68f5      	ldreq	r5, [r6, #12]
 800ca9c:	e7da      	b.n	800ca54 <_vfiprintf_r+0x20>
 800ca9e:	89ab      	ldrh	r3, [r5, #12]
 800caa0:	0598      	lsls	r0, r3, #22
 800caa2:	d4ed      	bmi.n	800ca80 <_vfiprintf_r+0x4c>
 800caa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caa6:	f000 fb72 	bl	800d18e <__retarget_lock_release_recursive>
 800caaa:	e7e9      	b.n	800ca80 <_vfiprintf_r+0x4c>
 800caac:	2300      	movs	r3, #0
 800caae:	9309      	str	r3, [sp, #36]	; 0x24
 800cab0:	2320      	movs	r3, #32
 800cab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cab6:	2330      	movs	r3, #48	; 0x30
 800cab8:	f04f 0901 	mov.w	r9, #1
 800cabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cc80 <_vfiprintf_r+0x24c>
 800cac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cac8:	4623      	mov	r3, r4
 800caca:	469a      	mov	sl, r3
 800cacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad0:	b10a      	cbz	r2, 800cad6 <_vfiprintf_r+0xa2>
 800cad2:	2a25      	cmp	r2, #37	; 0x25
 800cad4:	d1f9      	bne.n	800caca <_vfiprintf_r+0x96>
 800cad6:	ebba 0b04 	subs.w	fp, sl, r4
 800cada:	d00b      	beq.n	800caf4 <_vfiprintf_r+0xc0>
 800cadc:	465b      	mov	r3, fp
 800cade:	4622      	mov	r2, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7ff ff94 	bl	800ca10 <__sfputs_r>
 800cae8:	3001      	adds	r0, #1
 800caea:	f000 80aa 	beq.w	800cc42 <_vfiprintf_r+0x20e>
 800caee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf0:	445a      	add	r2, fp
 800caf2:	9209      	str	r2, [sp, #36]	; 0x24
 800caf4:	f89a 3000 	ldrb.w	r3, [sl]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 80a2 	beq.w	800cc42 <_vfiprintf_r+0x20e>
 800cafe:	2300      	movs	r3, #0
 800cb00:	f04f 32ff 	mov.w	r2, #4294967295
 800cb04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb08:	f10a 0a01 	add.w	sl, sl, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb14:	931a      	str	r3, [sp, #104]	; 0x68
 800cb16:	4654      	mov	r4, sl
 800cb18:	2205      	movs	r2, #5
 800cb1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb1e:	4858      	ldr	r0, [pc, #352]	; (800cc80 <_vfiprintf_r+0x24c>)
 800cb20:	f7fe ff84 	bl	800ba2c <memchr>
 800cb24:	9a04      	ldr	r2, [sp, #16]
 800cb26:	b9d8      	cbnz	r0, 800cb60 <_vfiprintf_r+0x12c>
 800cb28:	06d1      	lsls	r1, r2, #27
 800cb2a:	bf44      	itt	mi
 800cb2c:	2320      	movmi	r3, #32
 800cb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb32:	0713      	lsls	r3, r2, #28
 800cb34:	bf44      	itt	mi
 800cb36:	232b      	movmi	r3, #43	; 0x2b
 800cb38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb40:	2b2a      	cmp	r3, #42	; 0x2a
 800cb42:	d015      	beq.n	800cb70 <_vfiprintf_r+0x13c>
 800cb44:	4654      	mov	r4, sl
 800cb46:	2000      	movs	r0, #0
 800cb48:	f04f 0c0a 	mov.w	ip, #10
 800cb4c:	9a07      	ldr	r2, [sp, #28]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb54:	3b30      	subs	r3, #48	; 0x30
 800cb56:	2b09      	cmp	r3, #9
 800cb58:	d94e      	bls.n	800cbf8 <_vfiprintf_r+0x1c4>
 800cb5a:	b1b0      	cbz	r0, 800cb8a <_vfiprintf_r+0x156>
 800cb5c:	9207      	str	r2, [sp, #28]
 800cb5e:	e014      	b.n	800cb8a <_vfiprintf_r+0x156>
 800cb60:	eba0 0308 	sub.w	r3, r0, r8
 800cb64:	fa09 f303 	lsl.w	r3, r9, r3
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	46a2      	mov	sl, r4
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	e7d2      	b.n	800cb16 <_vfiprintf_r+0xe2>
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	1d19      	adds	r1, r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	9103      	str	r1, [sp, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	bfbb      	ittet	lt
 800cb7c:	425b      	neglt	r3, r3
 800cb7e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb82:	9307      	strge	r3, [sp, #28]
 800cb84:	9307      	strlt	r3, [sp, #28]
 800cb86:	bfb8      	it	lt
 800cb88:	9204      	strlt	r2, [sp, #16]
 800cb8a:	7823      	ldrb	r3, [r4, #0]
 800cb8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8e:	d10c      	bne.n	800cbaa <_vfiprintf_r+0x176>
 800cb90:	7863      	ldrb	r3, [r4, #1]
 800cb92:	2b2a      	cmp	r3, #42	; 0x2a
 800cb94:	d135      	bne.n	800cc02 <_vfiprintf_r+0x1ce>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	3402      	adds	r4, #2
 800cb9a:	1d1a      	adds	r2, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	9203      	str	r2, [sp, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfb8      	it	lt
 800cba4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cba8:	9305      	str	r3, [sp, #20]
 800cbaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cc84 <_vfiprintf_r+0x250>
 800cbae:	2203      	movs	r2, #3
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	7821      	ldrb	r1, [r4, #0]
 800cbb4:	f7fe ff3a 	bl	800ba2c <memchr>
 800cbb8:	b140      	cbz	r0, 800cbcc <_vfiprintf_r+0x198>
 800cbba:	2340      	movs	r3, #64	; 0x40
 800cbbc:	eba0 000a 	sub.w	r0, r0, sl
 800cbc0:	fa03 f000 	lsl.w	r0, r3, r0
 800cbc4:	9b04      	ldr	r3, [sp, #16]
 800cbc6:	3401      	adds	r4, #1
 800cbc8:	4303      	orrs	r3, r0
 800cbca:	9304      	str	r3, [sp, #16]
 800cbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd0:	2206      	movs	r2, #6
 800cbd2:	482d      	ldr	r0, [pc, #180]	; (800cc88 <_vfiprintf_r+0x254>)
 800cbd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbd8:	f7fe ff28 	bl	800ba2c <memchr>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d03f      	beq.n	800cc60 <_vfiprintf_r+0x22c>
 800cbe0:	4b2a      	ldr	r3, [pc, #168]	; (800cc8c <_vfiprintf_r+0x258>)
 800cbe2:	bb1b      	cbnz	r3, 800cc2c <_vfiprintf_r+0x1f8>
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	3307      	adds	r3, #7
 800cbe8:	f023 0307 	bic.w	r3, r3, #7
 800cbec:	3308      	adds	r3, #8
 800cbee:	9303      	str	r3, [sp, #12]
 800cbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf2:	443b      	add	r3, r7
 800cbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbf6:	e767      	b.n	800cac8 <_vfiprintf_r+0x94>
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc00:	e7a5      	b.n	800cb4e <_vfiprintf_r+0x11a>
 800cc02:	2300      	movs	r3, #0
 800cc04:	f04f 0c0a 	mov.w	ip, #10
 800cc08:	4619      	mov	r1, r3
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc14:	3a30      	subs	r2, #48	; 0x30
 800cc16:	2a09      	cmp	r2, #9
 800cc18:	d903      	bls.n	800cc22 <_vfiprintf_r+0x1ee>
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0c5      	beq.n	800cbaa <_vfiprintf_r+0x176>
 800cc1e:	9105      	str	r1, [sp, #20]
 800cc20:	e7c3      	b.n	800cbaa <_vfiprintf_r+0x176>
 800cc22:	4604      	mov	r4, r0
 800cc24:	2301      	movs	r3, #1
 800cc26:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2a:	e7f0      	b.n	800cc0e <_vfiprintf_r+0x1da>
 800cc2c:	ab03      	add	r3, sp, #12
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	462a      	mov	r2, r5
 800cc32:	4630      	mov	r0, r6
 800cc34:	4b16      	ldr	r3, [pc, #88]	; (800cc90 <_vfiprintf_r+0x25c>)
 800cc36:	a904      	add	r1, sp, #16
 800cc38:	f7fc f86c 	bl	8008d14 <_printf_float>
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	1c78      	adds	r0, r7, #1
 800cc40:	d1d6      	bne.n	800cbf0 <_vfiprintf_r+0x1bc>
 800cc42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc44:	07d9      	lsls	r1, r3, #31
 800cc46:	d405      	bmi.n	800cc54 <_vfiprintf_r+0x220>
 800cc48:	89ab      	ldrh	r3, [r5, #12]
 800cc4a:	059a      	lsls	r2, r3, #22
 800cc4c:	d402      	bmi.n	800cc54 <_vfiprintf_r+0x220>
 800cc4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc50:	f000 fa9d 	bl	800d18e <__retarget_lock_release_recursive>
 800cc54:	89ab      	ldrh	r3, [r5, #12]
 800cc56:	065b      	lsls	r3, r3, #25
 800cc58:	f53f af12 	bmi.w	800ca80 <_vfiprintf_r+0x4c>
 800cc5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc5e:	e711      	b.n	800ca84 <_vfiprintf_r+0x50>
 800cc60:	ab03      	add	r3, sp, #12
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	462a      	mov	r2, r5
 800cc66:	4630      	mov	r0, r6
 800cc68:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <_vfiprintf_r+0x25c>)
 800cc6a:	a904      	add	r1, sp, #16
 800cc6c:	f7fc faee 	bl	800924c <_printf_i>
 800cc70:	e7e4      	b.n	800cc3c <_vfiprintf_r+0x208>
 800cc72:	bf00      	nop
 800cc74:	0801f2fc 	.word	0x0801f2fc
 800cc78:	0801f31c 	.word	0x0801f31c
 800cc7c:	0801f2dc 	.word	0x0801f2dc
 800cc80:	0801f28c 	.word	0x0801f28c
 800cc84:	0801f292 	.word	0x0801f292
 800cc88:	0801f296 	.word	0x0801f296
 800cc8c:	08008d15 	.word	0x08008d15
 800cc90:	0800ca11 	.word	0x0800ca11

0800cc94 <__swbuf_r>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	460e      	mov	r6, r1
 800cc98:	4614      	mov	r4, r2
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	b118      	cbz	r0, 800cca6 <__swbuf_r+0x12>
 800cc9e:	6983      	ldr	r3, [r0, #24]
 800cca0:	b90b      	cbnz	r3, 800cca6 <__swbuf_r+0x12>
 800cca2:	f000 f9d5 	bl	800d050 <__sinit>
 800cca6:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <__swbuf_r+0x98>)
 800cca8:	429c      	cmp	r4, r3
 800ccaa:	d12b      	bne.n	800cd04 <__swbuf_r+0x70>
 800ccac:	686c      	ldr	r4, [r5, #4]
 800ccae:	69a3      	ldr	r3, [r4, #24]
 800ccb0:	60a3      	str	r3, [r4, #8]
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	071a      	lsls	r2, r3, #28
 800ccb6:	d52f      	bpl.n	800cd18 <__swbuf_r+0x84>
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	b36b      	cbz	r3, 800cd18 <__swbuf_r+0x84>
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	6820      	ldr	r0, [r4, #0]
 800ccc0:	b2f6      	uxtb	r6, r6
 800ccc2:	1ac0      	subs	r0, r0, r3
 800ccc4:	6963      	ldr	r3, [r4, #20]
 800ccc6:	4637      	mov	r7, r6
 800ccc8:	4283      	cmp	r3, r0
 800ccca:	dc04      	bgt.n	800ccd6 <__swbuf_r+0x42>
 800cccc:	4621      	mov	r1, r4
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 f92a 	bl	800cf28 <_fflush_r>
 800ccd4:	bb30      	cbnz	r0, 800cd24 <__swbuf_r+0x90>
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	3001      	adds	r0, #1
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	60a3      	str	r3, [r4, #8]
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	6022      	str	r2, [r4, #0]
 800cce4:	701e      	strb	r6, [r3, #0]
 800cce6:	6963      	ldr	r3, [r4, #20]
 800cce8:	4283      	cmp	r3, r0
 800ccea:	d004      	beq.n	800ccf6 <__swbuf_r+0x62>
 800ccec:	89a3      	ldrh	r3, [r4, #12]
 800ccee:	07db      	lsls	r3, r3, #31
 800ccf0:	d506      	bpl.n	800cd00 <__swbuf_r+0x6c>
 800ccf2:	2e0a      	cmp	r6, #10
 800ccf4:	d104      	bne.n	800cd00 <__swbuf_r+0x6c>
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 f915 	bl	800cf28 <_fflush_r>
 800ccfe:	b988      	cbnz	r0, 800cd24 <__swbuf_r+0x90>
 800cd00:	4638      	mov	r0, r7
 800cd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd04:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <__swbuf_r+0x9c>)
 800cd06:	429c      	cmp	r4, r3
 800cd08:	d101      	bne.n	800cd0e <__swbuf_r+0x7a>
 800cd0a:	68ac      	ldr	r4, [r5, #8]
 800cd0c:	e7cf      	b.n	800ccae <__swbuf_r+0x1a>
 800cd0e:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <__swbuf_r+0xa0>)
 800cd10:	429c      	cmp	r4, r3
 800cd12:	bf08      	it	eq
 800cd14:	68ec      	ldreq	r4, [r5, #12]
 800cd16:	e7ca      	b.n	800ccae <__swbuf_r+0x1a>
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f000 f80c 	bl	800cd38 <__swsetup_r>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d0cb      	beq.n	800ccbc <__swbuf_r+0x28>
 800cd24:	f04f 37ff 	mov.w	r7, #4294967295
 800cd28:	e7ea      	b.n	800cd00 <__swbuf_r+0x6c>
 800cd2a:	bf00      	nop
 800cd2c:	0801f2fc 	.word	0x0801f2fc
 800cd30:	0801f31c 	.word	0x0801f31c
 800cd34:	0801f2dc 	.word	0x0801f2dc

0800cd38 <__swsetup_r>:
 800cd38:	4b32      	ldr	r3, [pc, #200]	; (800ce04 <__swsetup_r+0xcc>)
 800cd3a:	b570      	push	{r4, r5, r6, lr}
 800cd3c:	681d      	ldr	r5, [r3, #0]
 800cd3e:	4606      	mov	r6, r0
 800cd40:	460c      	mov	r4, r1
 800cd42:	b125      	cbz	r5, 800cd4e <__swsetup_r+0x16>
 800cd44:	69ab      	ldr	r3, [r5, #24]
 800cd46:	b913      	cbnz	r3, 800cd4e <__swsetup_r+0x16>
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f000 f981 	bl	800d050 <__sinit>
 800cd4e:	4b2e      	ldr	r3, [pc, #184]	; (800ce08 <__swsetup_r+0xd0>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d10f      	bne.n	800cd74 <__swsetup_r+0x3c>
 800cd54:	686c      	ldr	r4, [r5, #4]
 800cd56:	89a3      	ldrh	r3, [r4, #12]
 800cd58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd5c:	0719      	lsls	r1, r3, #28
 800cd5e:	d42c      	bmi.n	800cdba <__swsetup_r+0x82>
 800cd60:	06dd      	lsls	r5, r3, #27
 800cd62:	d411      	bmi.n	800cd88 <__swsetup_r+0x50>
 800cd64:	2309      	movs	r3, #9
 800cd66:	6033      	str	r3, [r6, #0]
 800cd68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	e03e      	b.n	800cdf2 <__swsetup_r+0xba>
 800cd74:	4b25      	ldr	r3, [pc, #148]	; (800ce0c <__swsetup_r+0xd4>)
 800cd76:	429c      	cmp	r4, r3
 800cd78:	d101      	bne.n	800cd7e <__swsetup_r+0x46>
 800cd7a:	68ac      	ldr	r4, [r5, #8]
 800cd7c:	e7eb      	b.n	800cd56 <__swsetup_r+0x1e>
 800cd7e:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <__swsetup_r+0xd8>)
 800cd80:	429c      	cmp	r4, r3
 800cd82:	bf08      	it	eq
 800cd84:	68ec      	ldreq	r4, [r5, #12]
 800cd86:	e7e6      	b.n	800cd56 <__swsetup_r+0x1e>
 800cd88:	0758      	lsls	r0, r3, #29
 800cd8a:	d512      	bpl.n	800cdb2 <__swsetup_r+0x7a>
 800cd8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd8e:	b141      	cbz	r1, 800cda2 <__swsetup_r+0x6a>
 800cd90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd94:	4299      	cmp	r1, r3
 800cd96:	d002      	beq.n	800cd9e <__swsetup_r+0x66>
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff fb2f 	bl	800c3fc <_free_r>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	6363      	str	r3, [r4, #52]	; 0x34
 800cda2:	89a3      	ldrh	r3, [r4, #12]
 800cda4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6063      	str	r3, [r4, #4]
 800cdae:	6923      	ldr	r3, [r4, #16]
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	f043 0308 	orr.w	r3, r3, #8
 800cdb8:	81a3      	strh	r3, [r4, #12]
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	b94b      	cbnz	r3, 800cdd2 <__swsetup_r+0x9a>
 800cdbe:	89a3      	ldrh	r3, [r4, #12]
 800cdc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc8:	d003      	beq.n	800cdd2 <__swsetup_r+0x9a>
 800cdca:	4621      	mov	r1, r4
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f000 fa05 	bl	800d1dc <__smakebuf_r>
 800cdd2:	89a0      	ldrh	r0, [r4, #12]
 800cdd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdd8:	f010 0301 	ands.w	r3, r0, #1
 800cddc:	d00a      	beq.n	800cdf4 <__swsetup_r+0xbc>
 800cdde:	2300      	movs	r3, #0
 800cde0:	60a3      	str	r3, [r4, #8]
 800cde2:	6963      	ldr	r3, [r4, #20]
 800cde4:	425b      	negs	r3, r3
 800cde6:	61a3      	str	r3, [r4, #24]
 800cde8:	6923      	ldr	r3, [r4, #16]
 800cdea:	b943      	cbnz	r3, 800cdfe <__swsetup_r+0xc6>
 800cdec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdf0:	d1ba      	bne.n	800cd68 <__swsetup_r+0x30>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	0781      	lsls	r1, r0, #30
 800cdf6:	bf58      	it	pl
 800cdf8:	6963      	ldrpl	r3, [r4, #20]
 800cdfa:	60a3      	str	r3, [r4, #8]
 800cdfc:	e7f4      	b.n	800cde8 <__swsetup_r+0xb0>
 800cdfe:	2000      	movs	r0, #0
 800ce00:	e7f7      	b.n	800cdf2 <__swsetup_r+0xba>
 800ce02:	bf00      	nop
 800ce04:	2000000c 	.word	0x2000000c
 800ce08:	0801f2fc 	.word	0x0801f2fc
 800ce0c:	0801f31c 	.word	0x0801f31c
 800ce10:	0801f2dc 	.word	0x0801f2dc

0800ce14 <abort>:
 800ce14:	2006      	movs	r0, #6
 800ce16:	b508      	push	{r3, lr}
 800ce18:	f000 fa50 	bl	800d2bc <raise>
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	f7f8 ff7f 	bl	8005d20 <_exit>
	...

0800ce24 <__sflush_r>:
 800ce24:	898a      	ldrh	r2, [r1, #12]
 800ce26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce28:	4605      	mov	r5, r0
 800ce2a:	0710      	lsls	r0, r2, #28
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	d457      	bmi.n	800cee0 <__sflush_r+0xbc>
 800ce30:	684b      	ldr	r3, [r1, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dc04      	bgt.n	800ce40 <__sflush_r+0x1c>
 800ce36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc01      	bgt.n	800ce40 <__sflush_r+0x1c>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	d0fa      	beq.n	800ce3c <__sflush_r+0x18>
 800ce46:	2300      	movs	r3, #0
 800ce48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce4c:	682f      	ldr	r7, [r5, #0]
 800ce4e:	602b      	str	r3, [r5, #0]
 800ce50:	d032      	beq.n	800ceb8 <__sflush_r+0x94>
 800ce52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	075a      	lsls	r2, r3, #29
 800ce58:	d505      	bpl.n	800ce66 <__sflush_r+0x42>
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	1ac0      	subs	r0, r0, r3
 800ce5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce60:	b10b      	cbz	r3, 800ce66 <__sflush_r+0x42>
 800ce62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce64:	1ac0      	subs	r0, r0, r3
 800ce66:	2300      	movs	r3, #0
 800ce68:	4602      	mov	r2, r0
 800ce6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	6a21      	ldr	r1, [r4, #32]
 800ce70:	47b0      	blx	r6
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	d106      	bne.n	800ce86 <__sflush_r+0x62>
 800ce78:	6829      	ldr	r1, [r5, #0]
 800ce7a:	291d      	cmp	r1, #29
 800ce7c:	d82c      	bhi.n	800ced8 <__sflush_r+0xb4>
 800ce7e:	4a29      	ldr	r2, [pc, #164]	; (800cf24 <__sflush_r+0x100>)
 800ce80:	40ca      	lsrs	r2, r1
 800ce82:	07d6      	lsls	r6, r2, #31
 800ce84:	d528      	bpl.n	800ced8 <__sflush_r+0xb4>
 800ce86:	2200      	movs	r2, #0
 800ce88:	6062      	str	r2, [r4, #4]
 800ce8a:	6922      	ldr	r2, [r4, #16]
 800ce8c:	04d9      	lsls	r1, r3, #19
 800ce8e:	6022      	str	r2, [r4, #0]
 800ce90:	d504      	bpl.n	800ce9c <__sflush_r+0x78>
 800ce92:	1c42      	adds	r2, r0, #1
 800ce94:	d101      	bne.n	800ce9a <__sflush_r+0x76>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b903      	cbnz	r3, 800ce9c <__sflush_r+0x78>
 800ce9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce9e:	602f      	str	r7, [r5, #0]
 800cea0:	2900      	cmp	r1, #0
 800cea2:	d0cb      	beq.n	800ce3c <__sflush_r+0x18>
 800cea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cea8:	4299      	cmp	r1, r3
 800ceaa:	d002      	beq.n	800ceb2 <__sflush_r+0x8e>
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7ff faa5 	bl	800c3fc <_free_r>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ceb6:	e7c2      	b.n	800ce3e <__sflush_r+0x1a>
 800ceb8:	6a21      	ldr	r1, [r4, #32]
 800ceba:	2301      	movs	r3, #1
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b0      	blx	r6
 800cec0:	1c41      	adds	r1, r0, #1
 800cec2:	d1c7      	bne.n	800ce54 <__sflush_r+0x30>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0c4      	beq.n	800ce54 <__sflush_r+0x30>
 800ceca:	2b1d      	cmp	r3, #29
 800cecc:	d001      	beq.n	800ced2 <__sflush_r+0xae>
 800cece:	2b16      	cmp	r3, #22
 800ced0:	d101      	bne.n	800ced6 <__sflush_r+0xb2>
 800ced2:	602f      	str	r7, [r5, #0]
 800ced4:	e7b2      	b.n	800ce3c <__sflush_r+0x18>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	e7ae      	b.n	800ce3e <__sflush_r+0x1a>
 800cee0:	690f      	ldr	r7, [r1, #16]
 800cee2:	2f00      	cmp	r7, #0
 800cee4:	d0aa      	beq.n	800ce3c <__sflush_r+0x18>
 800cee6:	0793      	lsls	r3, r2, #30
 800cee8:	bf18      	it	ne
 800ceea:	2300      	movne	r3, #0
 800ceec:	680e      	ldr	r6, [r1, #0]
 800ceee:	bf08      	it	eq
 800cef0:	694b      	ldreq	r3, [r1, #20]
 800cef2:	1bf6      	subs	r6, r6, r7
 800cef4:	600f      	str	r7, [r1, #0]
 800cef6:	608b      	str	r3, [r1, #8]
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	dd9f      	ble.n	800ce3c <__sflush_r+0x18>
 800cefc:	4633      	mov	r3, r6
 800cefe:	463a      	mov	r2, r7
 800cf00:	4628      	mov	r0, r5
 800cf02:	6a21      	ldr	r1, [r4, #32]
 800cf04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cf08:	47e0      	blx	ip
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	dc06      	bgt.n	800cf1c <__sflush_r+0xf8>
 800cf0e:	89a3      	ldrh	r3, [r4, #12]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	e790      	b.n	800ce3e <__sflush_r+0x1a>
 800cf1c:	4407      	add	r7, r0
 800cf1e:	1a36      	subs	r6, r6, r0
 800cf20:	e7ea      	b.n	800cef8 <__sflush_r+0xd4>
 800cf22:	bf00      	nop
 800cf24:	20400001 	.word	0x20400001

0800cf28 <_fflush_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	690b      	ldr	r3, [r1, #16]
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	460c      	mov	r4, r1
 800cf30:	b913      	cbnz	r3, 800cf38 <_fflush_r+0x10>
 800cf32:	2500      	movs	r5, #0
 800cf34:	4628      	mov	r0, r5
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	b118      	cbz	r0, 800cf42 <_fflush_r+0x1a>
 800cf3a:	6983      	ldr	r3, [r0, #24]
 800cf3c:	b90b      	cbnz	r3, 800cf42 <_fflush_r+0x1a>
 800cf3e:	f000 f887 	bl	800d050 <__sinit>
 800cf42:	4b14      	ldr	r3, [pc, #80]	; (800cf94 <_fflush_r+0x6c>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	d11b      	bne.n	800cf80 <_fflush_r+0x58>
 800cf48:	686c      	ldr	r4, [r5, #4]
 800cf4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0ef      	beq.n	800cf32 <_fflush_r+0xa>
 800cf52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf54:	07d0      	lsls	r0, r2, #31
 800cf56:	d404      	bmi.n	800cf62 <_fflush_r+0x3a>
 800cf58:	0599      	lsls	r1, r3, #22
 800cf5a:	d402      	bmi.n	800cf62 <_fflush_r+0x3a>
 800cf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5e:	f000 f915 	bl	800d18c <__retarget_lock_acquire_recursive>
 800cf62:	4628      	mov	r0, r5
 800cf64:	4621      	mov	r1, r4
 800cf66:	f7ff ff5d 	bl	800ce24 <__sflush_r>
 800cf6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	07da      	lsls	r2, r3, #31
 800cf70:	d4e0      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	059b      	lsls	r3, r3, #22
 800cf76:	d4dd      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf7a:	f000 f908 	bl	800d18e <__retarget_lock_release_recursive>
 800cf7e:	e7d9      	b.n	800cf34 <_fflush_r+0xc>
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <_fflush_r+0x70>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <_fflush_r+0x62>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7df      	b.n	800cf4a <_fflush_r+0x22>
 800cf8a:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <_fflush_r+0x74>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7da      	b.n	800cf4a <_fflush_r+0x22>
 800cf94:	0801f2fc 	.word	0x0801f2fc
 800cf98:	0801f31c 	.word	0x0801f31c
 800cf9c:	0801f2dc 	.word	0x0801f2dc

0800cfa0 <std>:
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	b510      	push	{r4, lr}
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	e9c0 3300 	strd	r3, r3, [r0]
 800cfaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfae:	6083      	str	r3, [r0, #8]
 800cfb0:	8181      	strh	r1, [r0, #12]
 800cfb2:	6643      	str	r3, [r0, #100]	; 0x64
 800cfb4:	81c2      	strh	r2, [r0, #14]
 800cfb6:	6183      	str	r3, [r0, #24]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	2208      	movs	r2, #8
 800cfbc:	305c      	adds	r0, #92	; 0x5c
 800cfbe:	f7fb fe03 	bl	8008bc8 <memset>
 800cfc2:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <std+0x38>)
 800cfc4:	6224      	str	r4, [r4, #32]
 800cfc6:	6263      	str	r3, [r4, #36]	; 0x24
 800cfc8:	4b04      	ldr	r3, [pc, #16]	; (800cfdc <std+0x3c>)
 800cfca:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <std+0x40>)
 800cfce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfd0:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <std+0x44>)
 800cfd2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0800d2f5 	.word	0x0800d2f5
 800cfdc:	0800d317 	.word	0x0800d317
 800cfe0:	0800d34f 	.word	0x0800d34f
 800cfe4:	0800d373 	.word	0x0800d373

0800cfe8 <_cleanup_r>:
 800cfe8:	4901      	ldr	r1, [pc, #4]	; (800cff0 <_cleanup_r+0x8>)
 800cfea:	f000 b8af 	b.w	800d14c <_fwalk_reent>
 800cfee:	bf00      	nop
 800cff0:	0800cf29 	.word	0x0800cf29

0800cff4 <__sfmoreglue>:
 800cff4:	2268      	movs	r2, #104	; 0x68
 800cff6:	b570      	push	{r4, r5, r6, lr}
 800cff8:	1e4d      	subs	r5, r1, #1
 800cffa:	4355      	muls	r5, r2
 800cffc:	460e      	mov	r6, r1
 800cffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d002:	f7ff fa63 	bl	800c4cc <_malloc_r>
 800d006:	4604      	mov	r4, r0
 800d008:	b140      	cbz	r0, 800d01c <__sfmoreglue+0x28>
 800d00a:	2100      	movs	r1, #0
 800d00c:	e9c0 1600 	strd	r1, r6, [r0]
 800d010:	300c      	adds	r0, #12
 800d012:	60a0      	str	r0, [r4, #8]
 800d014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d018:	f7fb fdd6 	bl	8008bc8 <memset>
 800d01c:	4620      	mov	r0, r4
 800d01e:	bd70      	pop	{r4, r5, r6, pc}

0800d020 <__sfp_lock_acquire>:
 800d020:	4801      	ldr	r0, [pc, #4]	; (800d028 <__sfp_lock_acquire+0x8>)
 800d022:	f000 b8b3 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800d026:	bf00      	nop
 800d028:	2000097d 	.word	0x2000097d

0800d02c <__sfp_lock_release>:
 800d02c:	4801      	ldr	r0, [pc, #4]	; (800d034 <__sfp_lock_release+0x8>)
 800d02e:	f000 b8ae 	b.w	800d18e <__retarget_lock_release_recursive>
 800d032:	bf00      	nop
 800d034:	2000097d 	.word	0x2000097d

0800d038 <__sinit_lock_acquire>:
 800d038:	4801      	ldr	r0, [pc, #4]	; (800d040 <__sinit_lock_acquire+0x8>)
 800d03a:	f000 b8a7 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	2000097e 	.word	0x2000097e

0800d044 <__sinit_lock_release>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__sinit_lock_release+0x8>)
 800d046:	f000 b8a2 	b.w	800d18e <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	2000097e 	.word	0x2000097e

0800d050 <__sinit>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4604      	mov	r4, r0
 800d054:	f7ff fff0 	bl	800d038 <__sinit_lock_acquire>
 800d058:	69a3      	ldr	r3, [r4, #24]
 800d05a:	b11b      	cbz	r3, 800d064 <__sinit+0x14>
 800d05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d060:	f7ff bff0 	b.w	800d044 <__sinit_lock_release>
 800d064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d068:	6523      	str	r3, [r4, #80]	; 0x50
 800d06a:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <__sinit+0x68>)
 800d06c:	4a13      	ldr	r2, [pc, #76]	; (800d0bc <__sinit+0x6c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	62a2      	str	r2, [r4, #40]	; 0x28
 800d072:	42a3      	cmp	r3, r4
 800d074:	bf08      	it	eq
 800d076:	2301      	moveq	r3, #1
 800d078:	4620      	mov	r0, r4
 800d07a:	bf08      	it	eq
 800d07c:	61a3      	streq	r3, [r4, #24]
 800d07e:	f000 f81f 	bl	800d0c0 <__sfp>
 800d082:	6060      	str	r0, [r4, #4]
 800d084:	4620      	mov	r0, r4
 800d086:	f000 f81b 	bl	800d0c0 <__sfp>
 800d08a:	60a0      	str	r0, [r4, #8]
 800d08c:	4620      	mov	r0, r4
 800d08e:	f000 f817 	bl	800d0c0 <__sfp>
 800d092:	2200      	movs	r2, #0
 800d094:	2104      	movs	r1, #4
 800d096:	60e0      	str	r0, [r4, #12]
 800d098:	6860      	ldr	r0, [r4, #4]
 800d09a:	f7ff ff81 	bl	800cfa0 <std>
 800d09e:	2201      	movs	r2, #1
 800d0a0:	2109      	movs	r1, #9
 800d0a2:	68a0      	ldr	r0, [r4, #8]
 800d0a4:	f7ff ff7c 	bl	800cfa0 <std>
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	2112      	movs	r1, #18
 800d0ac:	68e0      	ldr	r0, [r4, #12]
 800d0ae:	f7ff ff77 	bl	800cfa0 <std>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	61a3      	str	r3, [r4, #24]
 800d0b6:	e7d1      	b.n	800d05c <__sinit+0xc>
 800d0b8:	0801ee30 	.word	0x0801ee30
 800d0bc:	0800cfe9 	.word	0x0800cfe9

0800d0c0 <__sfp>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	f7ff ffac 	bl	800d020 <__sfp_lock_acquire>
 800d0c8:	4b1e      	ldr	r3, [pc, #120]	; (800d144 <__sfp+0x84>)
 800d0ca:	681e      	ldr	r6, [r3, #0]
 800d0cc:	69b3      	ldr	r3, [r6, #24]
 800d0ce:	b913      	cbnz	r3, 800d0d6 <__sfp+0x16>
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7ff ffbd 	bl	800d050 <__sinit>
 800d0d6:	3648      	adds	r6, #72	; 0x48
 800d0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	d503      	bpl.n	800d0e8 <__sfp+0x28>
 800d0e0:	6833      	ldr	r3, [r6, #0]
 800d0e2:	b30b      	cbz	r3, 800d128 <__sfp+0x68>
 800d0e4:	6836      	ldr	r6, [r6, #0]
 800d0e6:	e7f7      	b.n	800d0d8 <__sfp+0x18>
 800d0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0ec:	b9d5      	cbnz	r5, 800d124 <__sfp+0x64>
 800d0ee:	4b16      	ldr	r3, [pc, #88]	; (800d148 <__sfp+0x88>)
 800d0f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0f4:	60e3      	str	r3, [r4, #12]
 800d0f6:	6665      	str	r5, [r4, #100]	; 0x64
 800d0f8:	f000 f847 	bl	800d18a <__retarget_lock_init_recursive>
 800d0fc:	f7ff ff96 	bl	800d02c <__sfp_lock_release>
 800d100:	2208      	movs	r2, #8
 800d102:	4629      	mov	r1, r5
 800d104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d10c:	6025      	str	r5, [r4, #0]
 800d10e:	61a5      	str	r5, [r4, #24]
 800d110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d114:	f7fb fd58 	bl	8008bc8 <memset>
 800d118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d120:	4620      	mov	r0, r4
 800d122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d124:	3468      	adds	r4, #104	; 0x68
 800d126:	e7d9      	b.n	800d0dc <__sfp+0x1c>
 800d128:	2104      	movs	r1, #4
 800d12a:	4638      	mov	r0, r7
 800d12c:	f7ff ff62 	bl	800cff4 <__sfmoreglue>
 800d130:	4604      	mov	r4, r0
 800d132:	6030      	str	r0, [r6, #0]
 800d134:	2800      	cmp	r0, #0
 800d136:	d1d5      	bne.n	800d0e4 <__sfp+0x24>
 800d138:	f7ff ff78 	bl	800d02c <__sfp_lock_release>
 800d13c:	230c      	movs	r3, #12
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	e7ee      	b.n	800d120 <__sfp+0x60>
 800d142:	bf00      	nop
 800d144:	0801ee30 	.word	0x0801ee30
 800d148:	ffff0001 	.word	0xffff0001

0800d14c <_fwalk_reent>:
 800d14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d150:	4606      	mov	r6, r0
 800d152:	4688      	mov	r8, r1
 800d154:	2700      	movs	r7, #0
 800d156:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d15a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d15e:	f1b9 0901 	subs.w	r9, r9, #1
 800d162:	d505      	bpl.n	800d170 <_fwalk_reent+0x24>
 800d164:	6824      	ldr	r4, [r4, #0]
 800d166:	2c00      	cmp	r4, #0
 800d168:	d1f7      	bne.n	800d15a <_fwalk_reent+0xe>
 800d16a:	4638      	mov	r0, r7
 800d16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d170:	89ab      	ldrh	r3, [r5, #12]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d907      	bls.n	800d186 <_fwalk_reent+0x3a>
 800d176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d17a:	3301      	adds	r3, #1
 800d17c:	d003      	beq.n	800d186 <_fwalk_reent+0x3a>
 800d17e:	4629      	mov	r1, r5
 800d180:	4630      	mov	r0, r6
 800d182:	47c0      	blx	r8
 800d184:	4307      	orrs	r7, r0
 800d186:	3568      	adds	r5, #104	; 0x68
 800d188:	e7e9      	b.n	800d15e <_fwalk_reent+0x12>

0800d18a <__retarget_lock_init_recursive>:
 800d18a:	4770      	bx	lr

0800d18c <__retarget_lock_acquire_recursive>:
 800d18c:	4770      	bx	lr

0800d18e <__retarget_lock_release_recursive>:
 800d18e:	4770      	bx	lr

0800d190 <__swhatbuf_r>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	460e      	mov	r6, r1
 800d194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d198:	4614      	mov	r4, r2
 800d19a:	2900      	cmp	r1, #0
 800d19c:	461d      	mov	r5, r3
 800d19e:	b096      	sub	sp, #88	; 0x58
 800d1a0:	da08      	bge.n	800d1b4 <__swhatbuf_r+0x24>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1a8:	602a      	str	r2, [r5, #0]
 800d1aa:	061a      	lsls	r2, r3, #24
 800d1ac:	d410      	bmi.n	800d1d0 <__swhatbuf_r+0x40>
 800d1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b2:	e00e      	b.n	800d1d2 <__swhatbuf_r+0x42>
 800d1b4:	466a      	mov	r2, sp
 800d1b6:	f000 f903 	bl	800d3c0 <_fstat_r>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	dbf1      	blt.n	800d1a2 <__swhatbuf_r+0x12>
 800d1be:	9a01      	ldr	r2, [sp, #4]
 800d1c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1c8:	425a      	negs	r2, r3
 800d1ca:	415a      	adcs	r2, r3
 800d1cc:	602a      	str	r2, [r5, #0]
 800d1ce:	e7ee      	b.n	800d1ae <__swhatbuf_r+0x1e>
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	b016      	add	sp, #88	; 0x58
 800d1d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1dc <__smakebuf_r>:
 800d1dc:	898b      	ldrh	r3, [r1, #12]
 800d1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e0:	079d      	lsls	r5, r3, #30
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	d507      	bpl.n	800d1f8 <__smakebuf_r+0x1c>
 800d1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	6123      	str	r3, [r4, #16]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	6163      	str	r3, [r4, #20]
 800d1f4:	b002      	add	sp, #8
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	466a      	mov	r2, sp
 800d1fa:	ab01      	add	r3, sp, #4
 800d1fc:	f7ff ffc8 	bl	800d190 <__swhatbuf_r>
 800d200:	9900      	ldr	r1, [sp, #0]
 800d202:	4605      	mov	r5, r0
 800d204:	4630      	mov	r0, r6
 800d206:	f7ff f961 	bl	800c4cc <_malloc_r>
 800d20a:	b948      	cbnz	r0, 800d220 <__smakebuf_r+0x44>
 800d20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d210:	059a      	lsls	r2, r3, #22
 800d212:	d4ef      	bmi.n	800d1f4 <__smakebuf_r+0x18>
 800d214:	f023 0303 	bic.w	r3, r3, #3
 800d218:	f043 0302 	orr.w	r3, r3, #2
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	e7e3      	b.n	800d1e8 <__smakebuf_r+0xc>
 800d220:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <__smakebuf_r+0x7c>)
 800d222:	62b3      	str	r3, [r6, #40]	; 0x28
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	6020      	str	r0, [r4, #0]
 800d228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d22c:	81a3      	strh	r3, [r4, #12]
 800d22e:	9b00      	ldr	r3, [sp, #0]
 800d230:	6120      	str	r0, [r4, #16]
 800d232:	6163      	str	r3, [r4, #20]
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	b15b      	cbz	r3, 800d250 <__smakebuf_r+0x74>
 800d238:	4630      	mov	r0, r6
 800d23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d23e:	f000 f8d1 	bl	800d3e4 <_isatty_r>
 800d242:	b128      	cbz	r0, 800d250 <__smakebuf_r+0x74>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	f023 0303 	bic.w	r3, r3, #3
 800d24a:	f043 0301 	orr.w	r3, r3, #1
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	89a0      	ldrh	r0, [r4, #12]
 800d252:	4305      	orrs	r5, r0
 800d254:	81a5      	strh	r5, [r4, #12]
 800d256:	e7cd      	b.n	800d1f4 <__smakebuf_r+0x18>
 800d258:	0800cfe9 	.word	0x0800cfe9

0800d25c <_malloc_usable_size_r>:
 800d25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d260:	1f18      	subs	r0, r3, #4
 800d262:	2b00      	cmp	r3, #0
 800d264:	bfbc      	itt	lt
 800d266:	580b      	ldrlt	r3, [r1, r0]
 800d268:	18c0      	addlt	r0, r0, r3
 800d26a:	4770      	bx	lr

0800d26c <_raise_r>:
 800d26c:	291f      	cmp	r1, #31
 800d26e:	b538      	push	{r3, r4, r5, lr}
 800d270:	4604      	mov	r4, r0
 800d272:	460d      	mov	r5, r1
 800d274:	d904      	bls.n	800d280 <_raise_r+0x14>
 800d276:	2316      	movs	r3, #22
 800d278:	6003      	str	r3, [r0, #0]
 800d27a:	f04f 30ff 	mov.w	r0, #4294967295
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d282:	b112      	cbz	r2, 800d28a <_raise_r+0x1e>
 800d284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d288:	b94b      	cbnz	r3, 800d29e <_raise_r+0x32>
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 f830 	bl	800d2f0 <_getpid_r>
 800d290:	462a      	mov	r2, r5
 800d292:	4601      	mov	r1, r0
 800d294:	4620      	mov	r0, r4
 800d296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d29a:	f000 b817 	b.w	800d2cc <_kill_r>
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d00a      	beq.n	800d2b8 <_raise_r+0x4c>
 800d2a2:	1c59      	adds	r1, r3, #1
 800d2a4:	d103      	bne.n	800d2ae <_raise_r+0x42>
 800d2a6:	2316      	movs	r3, #22
 800d2a8:	6003      	str	r3, [r0, #0]
 800d2aa:	2001      	movs	r0, #1
 800d2ac:	e7e7      	b.n	800d27e <_raise_r+0x12>
 800d2ae:	2400      	movs	r4, #0
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2b6:	4798      	blx	r3
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	e7e0      	b.n	800d27e <_raise_r+0x12>

0800d2bc <raise>:
 800d2bc:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <raise+0xc>)
 800d2be:	4601      	mov	r1, r0
 800d2c0:	6818      	ldr	r0, [r3, #0]
 800d2c2:	f7ff bfd3 	b.w	800d26c <_raise_r>
 800d2c6:	bf00      	nop
 800d2c8:	2000000c 	.word	0x2000000c

0800d2cc <_kill_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	4d06      	ldr	r5, [pc, #24]	; (800d2ec <_kill_r+0x20>)
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	f7f8 fd17 	bl	8005d0c <_kill>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	d102      	bne.n	800d2e8 <_kill_r+0x1c>
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	b103      	cbz	r3, 800d2e8 <_kill_r+0x1c>
 800d2e6:	6023      	str	r3, [r4, #0]
 800d2e8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000978 	.word	0x20000978

0800d2f0 <_getpid_r>:
 800d2f0:	f7f8 bd0a 	b.w	8005d08 <_getpid>

0800d2f4 <__sread>:
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fc:	f000 f894 	bl	800d428 <_read_r>
 800d300:	2800      	cmp	r0, #0
 800d302:	bfab      	itete	ge
 800d304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d306:	89a3      	ldrhlt	r3, [r4, #12]
 800d308:	181b      	addge	r3, r3, r0
 800d30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d30e:	bfac      	ite	ge
 800d310:	6563      	strge	r3, [r4, #84]	; 0x54
 800d312:	81a3      	strhlt	r3, [r4, #12]
 800d314:	bd10      	pop	{r4, pc}

0800d316 <__swrite>:
 800d316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31a:	461f      	mov	r7, r3
 800d31c:	898b      	ldrh	r3, [r1, #12]
 800d31e:	4605      	mov	r5, r0
 800d320:	05db      	lsls	r3, r3, #23
 800d322:	460c      	mov	r4, r1
 800d324:	4616      	mov	r6, r2
 800d326:	d505      	bpl.n	800d334 <__swrite+0x1e>
 800d328:	2302      	movs	r3, #2
 800d32a:	2200      	movs	r2, #0
 800d32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d330:	f000 f868 	bl	800d404 <_lseek_r>
 800d334:	89a3      	ldrh	r3, [r4, #12]
 800d336:	4632      	mov	r2, r6
 800d338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d33c:	81a3      	strh	r3, [r4, #12]
 800d33e:	4628      	mov	r0, r5
 800d340:	463b      	mov	r3, r7
 800d342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d34a:	f000 b817 	b.w	800d37c <_write_r>

0800d34e <__sseek>:
 800d34e:	b510      	push	{r4, lr}
 800d350:	460c      	mov	r4, r1
 800d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d356:	f000 f855 	bl	800d404 <_lseek_r>
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	bf15      	itete	ne
 800d360:	6560      	strne	r0, [r4, #84]	; 0x54
 800d362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d36a:	81a3      	strheq	r3, [r4, #12]
 800d36c:	bf18      	it	ne
 800d36e:	81a3      	strhne	r3, [r4, #12]
 800d370:	bd10      	pop	{r4, pc}

0800d372 <__sclose>:
 800d372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d376:	f000 b813 	b.w	800d3a0 <_close_r>
	...

0800d37c <_write_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	2200      	movs	r2, #0
 800d386:	4d05      	ldr	r5, [pc, #20]	; (800d39c <_write_r+0x20>)
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f8 fcdc 	bl	8005d48 <_write>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_write_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_write_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	20000978 	.word	0x20000978

0800d3a0 <_close_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4d05      	ldr	r5, [pc, #20]	; (800d3bc <_close_r+0x1c>)
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	f7f8 fcda 	bl	8005d64 <_close>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_close_r+0x1a>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_close_r+0x1a>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20000978 	.word	0x20000978

0800d3c0 <_fstat_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	4d06      	ldr	r5, [pc, #24]	; (800d3e0 <_fstat_r+0x20>)
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4608      	mov	r0, r1
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	f7f8 fccd 	bl	8005d6c <_fstat>
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	d102      	bne.n	800d3dc <_fstat_r+0x1c>
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	b103      	cbz	r3, 800d3dc <_fstat_r+0x1c>
 800d3da:	6023      	str	r3, [r4, #0]
 800d3dc:	bd38      	pop	{r3, r4, r5, pc}
 800d3de:	bf00      	nop
 800d3e0:	20000978 	.word	0x20000978

0800d3e4 <_isatty_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	4d05      	ldr	r5, [pc, #20]	; (800d400 <_isatty_r+0x1c>)
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	f7f8 fcc2 	bl	8005d78 <_isatty>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	d102      	bne.n	800d3fe <_isatty_r+0x1a>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b103      	cbz	r3, 800d3fe <_isatty_r+0x1a>
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20000978 	.word	0x20000978

0800d404 <_lseek_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4604      	mov	r4, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	4611      	mov	r1, r2
 800d40c:	2200      	movs	r2, #0
 800d40e:	4d05      	ldr	r5, [pc, #20]	; (800d424 <_lseek_r+0x20>)
 800d410:	602a      	str	r2, [r5, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	f7f8 fcb2 	bl	8005d7c <_lseek>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d102      	bne.n	800d422 <_lseek_r+0x1e>
 800d41c:	682b      	ldr	r3, [r5, #0]
 800d41e:	b103      	cbz	r3, 800d422 <_lseek_r+0x1e>
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	20000978 	.word	0x20000978

0800d428 <_read_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4604      	mov	r4, r0
 800d42c:	4608      	mov	r0, r1
 800d42e:	4611      	mov	r1, r2
 800d430:	2200      	movs	r2, #0
 800d432:	4d05      	ldr	r5, [pc, #20]	; (800d448 <_read_r+0x20>)
 800d434:	602a      	str	r2, [r5, #0]
 800d436:	461a      	mov	r2, r3
 800d438:	f7f8 fc78 	bl	8005d2c <_read>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_read_r+0x1e>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	b103      	cbz	r3, 800d446 <_read_r+0x1e>
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	20000978 	.word	0x20000978
 800d44c:	00000000 	.word	0x00000000

0800d450 <floor>:
 800d450:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800d45a:	2d13      	cmp	r5, #19
 800d45c:	460b      	mov	r3, r1
 800d45e:	4684      	mov	ip, r0
 800d460:	460c      	mov	r4, r1
 800d462:	4606      	mov	r6, r0
 800d464:	dc30      	bgt.n	800d4c8 <floor+0x78>
 800d466:	2d00      	cmp	r5, #0
 800d468:	db1e      	blt.n	800d4a8 <floor+0x58>
 800d46a:	4f35      	ldr	r7, [pc, #212]	; (800d540 <floor+0xf0>)
 800d46c:	412f      	asrs	r7, r5
 800d46e:	ea01 0207 	and.w	r2, r1, r7
 800d472:	4302      	orrs	r2, r0
 800d474:	d015      	beq.n	800d4a2 <floor+0x52>
 800d476:	a330      	add	r3, pc, #192	; (adr r3, 800d538 <floor+0xe8>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f8 fcb6 	bl	8005dec <__adddf3>
 800d480:	2200      	movs	r2, #0
 800d482:	2300      	movs	r3, #0
 800d484:	f7f9 f8f8 	bl	8006678 <__aeabi_dcmpgt>
 800d488:	b148      	cbz	r0, 800d49e <floor+0x4e>
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	da04      	bge.n	800d498 <floor+0x48>
 800d48e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d492:	fa43 f505 	asr.w	r5, r3, r5
 800d496:	442c      	add	r4, r5
 800d498:	2600      	movs	r6, #0
 800d49a:	ea24 0407 	bic.w	r4, r4, r7
 800d49e:	4623      	mov	r3, r4
 800d4a0:	46b4      	mov	ip, r6
 800d4a2:	4660      	mov	r0, ip
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a8:	a323      	add	r3, pc, #140	; (adr r3, 800d538 <floor+0xe8>)
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	f7f8 fc9d 	bl	8005dec <__adddf3>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f7f9 f8df 	bl	8006678 <__aeabi_dcmpgt>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d0ef      	beq.n	800d49e <floor+0x4e>
 800d4be:	2c00      	cmp	r4, #0
 800d4c0:	db24      	blt.n	800d50c <floor+0xbc>
 800d4c2:	2600      	movs	r6, #0
 800d4c4:	4634      	mov	r4, r6
 800d4c6:	e7ea      	b.n	800d49e <floor+0x4e>
 800d4c8:	2d33      	cmp	r5, #51	; 0x33
 800d4ca:	dd08      	ble.n	800d4de <floor+0x8e>
 800d4cc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d4d0:	d1e7      	bne.n	800d4a2 <floor+0x52>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	f7f8 fc8a 	bl	8005dec <__adddf3>
 800d4d8:	4684      	mov	ip, r0
 800d4da:	460b      	mov	r3, r1
 800d4dc:	e7e1      	b.n	800d4a2 <floor+0x52>
 800d4de:	f04f 37ff 	mov.w	r7, #4294967295
 800d4e2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d4e6:	40d7      	lsrs	r7, r2
 800d4e8:	4207      	tst	r7, r0
 800d4ea:	d0da      	beq.n	800d4a2 <floor+0x52>
 800d4ec:	a312      	add	r3, pc, #72	; (adr r3, 800d538 <floor+0xe8>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f8 fc7b 	bl	8005dec <__adddf3>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f7f9 f8bd 	bl	8006678 <__aeabi_dcmpgt>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d0cd      	beq.n	800d49e <floor+0x4e>
 800d502:	2c00      	cmp	r4, #0
 800d504:	db0b      	blt.n	800d51e <floor+0xce>
 800d506:	ea26 0607 	bic.w	r6, r6, r7
 800d50a:	e7c8      	b.n	800d49e <floor+0x4e>
 800d50c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d510:	4a0c      	ldr	r2, [pc, #48]	; (800d544 <floor+0xf4>)
 800d512:	431e      	orrs	r6, r3
 800d514:	2e00      	cmp	r6, #0
 800d516:	bf18      	it	ne
 800d518:	4614      	movne	r4, r2
 800d51a:	2600      	movs	r6, #0
 800d51c:	e7bf      	b.n	800d49e <floor+0x4e>
 800d51e:	2d14      	cmp	r5, #20
 800d520:	d008      	beq.n	800d534 <floor+0xe4>
 800d522:	2301      	movs	r3, #1
 800d524:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800d528:	fa03 f505 	lsl.w	r5, r3, r5
 800d52c:	19ae      	adds	r6, r5, r6
 800d52e:	bf28      	it	cs
 800d530:	18e4      	addcs	r4, r4, r3
 800d532:	e7e8      	b.n	800d506 <floor+0xb6>
 800d534:	3401      	adds	r4, #1
 800d536:	e7e6      	b.n	800d506 <floor+0xb6>
 800d538:	8800759c 	.word	0x8800759c
 800d53c:	7e37e43c 	.word	0x7e37e43c
 800d540:	000fffff 	.word	0x000fffff
 800d544:	bff00000 	.word	0xbff00000

0800d548 <_init>:
 800d548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54a:	bf00      	nop
 800d54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d54e:	bc08      	pop	{r3}
 800d550:	469e      	mov	lr, r3
 800d552:	4770      	bx	lr

0800d554 <_fini>:
 800d554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d556:	bf00      	nop
 800d558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d55a:	bc08      	pop	{r3}
 800d55c:	469e      	mov	lr, r3
 800d55e:	4770      	bx	lr
