
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d74  0800de80  0800de80  0001de80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fbf4  0801fbf4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801fbf4  0801fbf4  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801fbf4  0801fbf4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fbf4  0801fbf4  0002fbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fbf8  0801fbf8  0002fbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801fbfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200001e0  0801fddc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0801fddc  00030988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235f1  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002494  00000000  00000000  000537fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ce14  00000000  00000000  00055c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00072aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000096d0  00000000  00000000  00072af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001297b  00000000  00000000  0007c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009131b  00000000  00000000  0008eb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fe5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b4  00000000  00000000  0011feb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c47  00000000  00000000  00121f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de68 	.word	0x0800de68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800de68 	.word	0x0800de68

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000200 	.word	0x20000200

08000164 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000164:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000166:	bf14      	ite	ne
 8000168:	2202      	movne	r2, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800016a:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800016e:	4b37      	ldr	r3, [pc, #220]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000170:	0441      	lsls	r1, r0, #17
 8000172:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000174:	bf4c      	ite	mi
 8000176:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000178:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800017c:	4b33      	ldr	r3, [pc, #204]	; (800024c <LCD_Bus+0xe8>)
 800017e:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000180:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 8000182:	bf4c      	ite	mi
 8000184:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000186:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 800018a:	4b31      	ldr	r3, [pc, #196]	; (8000250 <LCD_Bus+0xec>)
 800018c:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800018e:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 8000190:	bf4c      	ite	mi
 8000192:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000194:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000198:	4b2d      	ldr	r3, [pc, #180]	; (8000250 <LCD_Bus+0xec>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800019a:	0501      	lsls	r1, r0, #20
 800019c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800019e:	bf4c      	ite	mi
 80001a0:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a2:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 80001a6:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <LCD_Bus+0xec>)
 80001a8:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80001aa:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 80001ac:	bf4c      	ite	mi
 80001ae:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b0:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80001b4:	4b26      	ldr	r3, [pc, #152]	; (8000250 <LCD_Bus+0xec>)
 80001b6:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80001b8:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001ba:	bf4c      	ite	mi
 80001bc:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 80001c4:	4b22      	ldr	r3, [pc, #136]	; (8000250 <LCD_Bus+0xec>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001c6:	05c1      	lsls	r1, r0, #23
 80001c8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001ca:	bf4c      	ite	mi
 80001cc:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d0:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80001d4:	4b1e      	ldr	r3, [pc, #120]	; (8000250 <LCD_Bus+0xec>)
 80001d6:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001d8:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001da:	bf4c      	ite	mi
 80001dc:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001de:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <LCD_Bus+0xe8>)
 80001e4:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001e6:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001e8:	bf4c      	ite	mi
 80001ea:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ec:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80001f0:	4b16      	ldr	r3, [pc, #88]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001f2:	0681      	lsls	r1, r0, #26
 80001f4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001f6:	bf4c      	ite	mi
 80001f8:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fa:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <LCD_Bus+0xe8>)
 8000200:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000202:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <LCD_Bus+0xe8>)
 800020e:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000210:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000212:	bf4c      	ite	mi
 8000214:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000216:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800021c:	0741      	lsls	r1, r0, #29
 800021e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000220:	bf4c      	ite	mi
 8000222:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000224:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LCD_Bus+0xe8>)
 800022a:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800022c:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 800022e:	bf4c      	ite	mi
 8000230:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000232:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <LCD_Bus+0xec>)
 8000238:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800023a:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 800023c:	bf4c      	ite	mi
 800023e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000240:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <LCD_Bus+0xec>)
 8000246:	611a      	str	r2, [r3, #16]
}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	40011000 	.word	0x40011000

08000254 <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800025c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000260:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000264:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000268:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800026c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8000270:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <LCD_Send_Cmd+0xb4>)
 8000276:	4a25      	ldr	r2, [pc, #148]	; (800030c <LCD_Send_Cmd+0xb8>)
 8000278:	4f25      	ldr	r7, [pc, #148]	; (8000310 <LCD_Send_Cmd+0xbc>)
 800027a:	6139      	str	r1, [r7, #16]
 800027c:	f8c7 8010 	str.w	r8, [r7, #16]
 8000280:	6116      	str	r6, [r2, #16]
 8000282:	6111      	str	r1, [r2, #16]
 8000284:	611c      	str	r4, [r3, #16]
 8000286:	611d      	str	r5, [r3, #16]
 8000288:	611e      	str	r6, [r3, #16]
 800028a:	6119      	str	r1, [r3, #16]
 800028c:	f8c3 e010 	str.w	lr, [r3, #16]
 8000290:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000294:	0943      	lsrs	r3, r0, #5
 8000296:	6115      	str	r5, [r2, #16]
 8000298:	6114      	str	r4, [r2, #16]
 800029a:	d02e      	beq.n	80002fa <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 800029c:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800029e:	0903      	lsrs	r3, r0, #4
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	6111      	str	r1, [r2, #16]
 80002a4:	d12c      	bne.n	8000300 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80002aa:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002ac:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002ae:	bf4c      	ite	mi
 80002b0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002b8:	0741      	lsls	r1, r0, #29
 80002ba:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002bc:	bf4c      	ite	mi
 80002be:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80002c6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002ca:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002cc:	bf4c      	ite	mi
 80002ce:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002d0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <LCD_Send_Cmd+0xb4>)
 80002d6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002d8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002da:	bf4c      	ite	mi
 80002dc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002de:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <LCD_Send_Cmd+0xb4>)
 80002e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002e8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <LCD_Send_Cmd+0xbc>)
 80002f0:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002f2:	6119      	str	r1, [r3, #16]
 80002f4:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 80002f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002fe:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000300:	2220      	movs	r2, #32
 8000302:	4b02      	ldr	r3, [pc, #8]	; (800030c <LCD_Send_Cmd+0xb8>)
 8000304:	611a      	str	r2, [r3, #16]
  }
}
 8000306:	e7d1      	b.n	80002ac <LCD_Send_Cmd+0x58>
 8000308:	40011000 	.word	0x40011000
 800030c:	40010800 	.word	0x40010800
 8000310:	40010c00 	.word	0x40010c00

08000314 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000314:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000318:	2101      	movs	r1, #1
 800031a:	4b3f      	ldr	r3, [pc, #252]	; (8000418 <LCD_Send_Dat+0x104>)
 800031c:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031e:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000320:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 8000322:	bf14      	ite	ne
 8000324:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000326:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800032a:	4b3c      	ldr	r3, [pc, #240]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800032c:	0441      	lsls	r1, r0, #17
 800032e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000330:	bf4c      	ite	mi
 8000332:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000334:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000338:	4b38      	ldr	r3, [pc, #224]	; (800041c <LCD_Send_Dat+0x108>)
 800033a:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800033c:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800033e:	bf4c      	ite	mi
 8000340:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000342:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000346:	4b36      	ldr	r3, [pc, #216]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000348:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800034a:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800034c:	bf4c      	ite	mi
 800034e:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000350:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000356:	0501      	lsls	r1, r0, #20
 8000358:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800035a:	bf4c      	ite	mi
 800035c:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800035e:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000364:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000366:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000368:	bf4c      	ite	mi
 800036a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800036c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000372:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000374:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000376:	bf4c      	ite	mi
 8000378:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037c:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8000382:	05c1      	lsls	r1, r0, #23
 8000384:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000386:	bf4c      	ite	mi
 8000388:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038c:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000392:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000394:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000396:	bf4c      	ite	mi
 8000398:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039a:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <LCD_Send_Dat+0x108>)
 80003a0:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003a2:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80003a4:	bf4c      	ite	mi
 80003a6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003a8:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80003ae:	0681      	lsls	r1, r0, #26
 80003b0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003b2:	bf4c      	ite	mi
 80003b4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003b6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <LCD_Send_Dat+0x108>)
 80003bc:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80003be:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80003c0:	bf4c      	ite	mi
 80003c2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003c4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <LCD_Send_Dat+0x108>)
 80003ca:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80003cc:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80003ce:	bf4c      	ite	mi
 80003d0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003d2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80003d8:	0741      	lsls	r1, r0, #29
 80003da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003dc:	bf4c      	ite	mi
 80003de:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80003e6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80003ea:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80003ec:	bf4c      	ite	mi
 80003ee:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <LCD_Send_Dat+0x10c>)
 80003f6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80003f8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80003fa:	bf4c      	ite	mi
 80003fc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000404:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000408:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800040e:	4b02      	ldr	r3, [pc, #8]	; (8000418 <LCD_Send_Dat+0x104>)
 8000410:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000412:	6119      	str	r1, [r3, #16]
 8000414:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000416:	4770      	bx	lr
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800
 8000420:	40011000 	.word	0x40011000

08000424 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000428:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800042c:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8000430:	468b      	mov	fp, r1
 8000432:	49ab      	ldr	r1, [pc, #684]	; (80006e0 <LCD_Window+0x2bc>)
 8000434:	b085      	sub	sp, #20
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800043c:	610d      	str	r5, [r1, #16]
 800043e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000442:	610c      	str	r4, [r1, #16]
 8000444:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000448:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800044c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000450:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000454:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000458:	4ba2      	ldr	r3, [pc, #648]	; (80006e4 <LCD_Window+0x2c0>)
 800045a:	4696      	mov	lr, r2
 800045c:	4aa2      	ldr	r2, [pc, #648]	; (80006e8 <LCD_Window+0x2c4>)
 800045e:	6116      	str	r6, [r2, #16]
 8000460:	6115      	str	r5, [r2, #16]
 8000462:	f8c3 c010 	str.w	ip, [r3, #16]
 8000466:	611f      	str	r7, [r3, #16]
 8000468:	611e      	str	r6, [r3, #16]
 800046a:	611d      	str	r5, [r3, #16]
 800046c:	f8c3 9010 	str.w	r9, [r3, #16]
 8000470:	f8c3 a010 	str.w	sl, [r3, #16]
 8000474:	6117      	str	r7, [r2, #16]
 8000476:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800047a:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000480:	2440      	movs	r4, #64	; 0x40
 8000482:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000484:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000488:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800048a:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800048e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000492:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000496:	611c      	str	r4, [r3, #16]
 8000498:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800049a:	f8c1 8010 	str.w	r8, [r1, #16]
 800049e:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80004a2:	f8c1 8010 	str.w	r8, [r1, #16]
 80004a6:	f04f 0801 	mov.w	r8, #1
 80004aa:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ae:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80004b2:	f8c1 8010 	str.w	r8, [r1, #16]
 80004b6:	6116      	str	r6, [r2, #16]
 80004b8:	6115      	str	r5, [r2, #16]
 80004ba:	f8c3 c010 	str.w	ip, [r3, #16]
 80004be:	611f      	str	r7, [r3, #16]
 80004c0:	611e      	str	r6, [r3, #16]
 80004c2:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80004c4:	fa5f f58e 	uxtb.w	r5, lr
 80004c8:	f8c3 9010 	str.w	r9, [r3, #16]
 80004cc:	f8c3 a010 	str.w	sl, [r3, #16]
 80004d0:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80004d2:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80004d4:	bf18      	it	ne
 80004d6:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80004d8:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80004dc:	bf14      	ite	ne
 80004de:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e0:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004e2:	0667      	lsls	r7, r4, #25
 80004e4:	bf54      	ite	pl
 80004e6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004ea:	2508      	movmi	r5, #8
 80004ec:	4a7e      	ldr	r2, [pc, #504]	; (80006e8 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80004ee:	4621      	mov	r1, r4
 80004f0:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004f2:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f4:	bf54      	ite	pl
 80004f6:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004fa:	2510      	movmi	r5, #16
 80004fc:	4a7a      	ldr	r2, [pc, #488]	; (80006e8 <LCD_Window+0x2c4>)
 80004fe:	f04f 0a02 	mov.w	sl, #2
 8000502:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000504:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000506:	bf54      	ite	pl
 8000508:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800050c:	2520      	movmi	r5, #32
 800050e:	4a76      	ldr	r2, [pc, #472]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000510:	0727      	lsls	r7, r4, #28
 8000512:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	bf54      	ite	pl
 8000516:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800051a:	2540      	movmi	r5, #64	; 0x40
 800051c:	4a72      	ldr	r2, [pc, #456]	; (80006e8 <LCD_Window+0x2c4>)
 800051e:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000522:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000524:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000526:	bf54      	ite	pl
 8000528:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800052c:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800052e:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000530:	bf54      	ite	pl
 8000532:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000536:	2410      	movmi	r4, #16
 8000538:	4a6b      	ldr	r2, [pc, #428]	; (80006e8 <LCD_Window+0x2c4>)
 800053a:	f04f 0801 	mov.w	r8, #1
 800053e:	6115      	str	r5, [r2, #16]
 8000540:	4a68      	ldr	r2, [pc, #416]	; (80006e4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000542:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000546:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000548:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800054a:	bf54      	ite	pl
 800054c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000550:	2120      	movmi	r1, #32
 8000552:	4a64      	ldr	r2, [pc, #400]	; (80006e4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000554:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000558:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055a:	4961      	ldr	r1, [pc, #388]	; (80006e0 <LCD_Window+0x2bc>)
 800055c:	4a61      	ldr	r2, [pc, #388]	; (80006e4 <LCD_Window+0x2c0>)
 800055e:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000560:	f8c1 a010 	str.w	sl, [r1, #16]
 8000564:	f8c1 9010 	str.w	r9, [r1, #16]
 8000568:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000570:	f8c1 8010 	str.w	r8, [r1, #16]
 8000574:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000578:	4c5b      	ldr	r4, [pc, #364]	; (80006e8 <LCD_Window+0x2c4>)
 800057a:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800057e:	6125      	str	r5, [r4, #16]
 8000580:	6127      	str	r7, [r4, #16]
 8000582:	6111      	str	r1, [r2, #16]
 8000584:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000588:	f8c2 c010 	str.w	ip, [r2, #16]
 800058c:	6115      	str	r5, [r2, #16]
 800058e:	6117      	str	r7, [r2, #16]
 8000590:	6111      	str	r1, [r2, #16]
 8000592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000596:	b2c6      	uxtb	r6, r0
 8000598:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800059a:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 800059c:	bf16      	itet	ne
 800059e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a0:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80005a4:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80005a6:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a8:	bf54      	ite	pl
 80005aa:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80005ae:	2108      	movmi	r1, #8
 80005b0:	4a4d      	ldr	r2, [pc, #308]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80005b2:	0685      	lsls	r5, r0, #26
 80005b4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b6:	bf54      	ite	pl
 80005b8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005bc:	2110      	movmi	r1, #16
 80005be:	4a4a      	ldr	r2, [pc, #296]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80005c0:	06c4      	lsls	r4, r0, #27
 80005c2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005c4:	bf54      	ite	pl
 80005c6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005ca:	2120      	movmi	r1, #32
 80005cc:	4a46      	ldr	r2, [pc, #280]	; (80006e8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ce:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80005d2:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80005d4:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005d6:	bf54      	ite	pl
 80005d8:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80005dc:	2140      	movmi	r1, #64	; 0x40
 80005de:	4a42      	ldr	r2, [pc, #264]	; (80006e8 <LCD_Window+0x2c4>)
 80005e0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80005e4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005e6:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005e8:	bf54      	ite	pl
 80005ea:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005ee:	2180      	movmi	r1, #128	; 0x80
 80005f0:	4a3d      	ldr	r2, [pc, #244]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005f2:	0787      	lsls	r7, r0, #30
 80005f4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005f6:	bf54      	ite	pl
 80005f8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005fc:	2110      	movmi	r1, #16
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000600:	07f5      	lsls	r5, r6, #31
 8000602:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000604:	bf54      	ite	pl
 8000606:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800060a:	2120      	movmi	r1, #32
 800060c:	2702      	movs	r7, #2
 800060e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000612:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000618:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800061c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800061e:	4930      	ldr	r1, [pc, #192]	; (80006e0 <LCD_Window+0x2bc>)
 8000620:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <LCD_Window+0x2c0>)
 8000622:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000624:	610f      	str	r7, [r1, #16]
 8000626:	f8c1 a010 	str.w	sl, [r1, #16]
 800062a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800062e:	f8c1 8010 	str.w	r8, [r1, #16]
 8000632:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <LCD_Window+0x2c4>)
 8000638:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800063c:	6104      	str	r4, [r0, #16]
 800063e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000642:	6105      	str	r5, [r0, #16]
 8000644:	6111      	str	r1, [r2, #16]
 8000646:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800064a:	6116      	str	r6, [r2, #16]
 800064c:	6114      	str	r4, [r2, #16]
 800064e:	6115      	str	r5, [r2, #16]
 8000650:	f8c2 c010 	str.w	ip, [r2, #16]
 8000654:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000656:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800065a:	bf18      	it	ne
 800065c:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800065e:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000662:	bf0c      	ite	eq
 8000664:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000666:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000668:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066a:	bf54      	ite	pl
 800066c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000670:	2108      	movmi	r1, #8
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000674:	0698      	lsls	r0, r3, #26
 8000676:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000678:	bf54      	ite	pl
 800067a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800067e:	2110      	movmi	r1, #16
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000682:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000686:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000688:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800068a:	bf54      	ite	pl
 800068c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000690:	2120      	movmi	r1, #32
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <LCD_Window+0x2c4>)
 8000694:	f04f 0a02 	mov.w	sl, #2
 8000698:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800069a:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800069c:	bf54      	ite	pl
 800069e:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80006a2:	2140      	movmi	r1, #64	; 0x40
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80006a6:	075f      	lsls	r7, r3, #29
 80006a8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006aa:	bf54      	ite	pl
 80006ac:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80006b0:	2180      	movmi	r1, #128	; 0x80
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80006b4:	079e      	lsls	r6, r3, #30
 80006b6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006b8:	bf54      	ite	pl
 80006ba:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80006be:	2210      	movmi	r2, #16
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LCD_Window+0x2c0>)
 80006c2:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80006c6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006c8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80006cc:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d0:	bf0c      	ite	eq
 80006d2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80006d6:	2220      	movne	r2, #32
 80006d8:	f04f 0801 	mov.w	r8, #1
 80006dc:	e006      	b.n	80006ec <LCD_Window+0x2c8>
 80006de:	bf00      	nop
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40010800 	.word	0x40010800
 80006ec:	4bac      	ldr	r3, [pc, #688]	; (80009a0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80006f2:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f4:	4aab      	ldr	r2, [pc, #684]	; (80009a4 <LCD_Window+0x580>)
 80006f6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006fa:	6110      	str	r0, [r2, #16]
 80006fc:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000700:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000704:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000708:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000710:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000714:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000718:	4ba1      	ldr	r3, [pc, #644]	; (80009a0 <LCD_Window+0x57c>)
 800071a:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <LCD_Window+0x584>)
 800071c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000720:	6108      	str	r0, [r1, #16]
 8000722:	610c      	str	r4, [r1, #16]
 8000724:	f8c3 c010 	str.w	ip, [r3, #16]
 8000728:	611d      	str	r5, [r3, #16]
 800072a:	6118      	str	r0, [r3, #16]
 800072c:	611c      	str	r4, [r3, #16]
 800072e:	611f      	str	r7, [r3, #16]
 8000730:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000732:	fa5f f38e 	uxtb.w	r3, lr
 8000736:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000738:	bf16      	itet	ne
 800073a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073c:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800073e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000740:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000744:	bf14      	ite	ne
 8000746:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000748:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800074c:	4b96      	ldr	r3, [pc, #600]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800074e:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000752:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000754:	bf14      	ite	ne
 8000756:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000758:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800075c:	4b92      	ldr	r3, [pc, #584]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800075e:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000762:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000764:	bf14      	ite	ne
 8000766:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000768:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800076c:	4b8e      	ldr	r3, [pc, #568]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800076e:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000774:	bf14      	ite	ne
 8000776:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000778:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800077c:	4b8a      	ldr	r3, [pc, #552]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800077e:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000782:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000784:	bf14      	ite	ne
 8000786:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000788:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800078c:	4b86      	ldr	r3, [pc, #536]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800078e:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000792:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000794:	bf14      	ite	ne
 8000796:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000798:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800079c:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <LCD_Window+0x57c>)
 800079e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007a2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007a4:	9b02      	ldr	r3, [sp, #8]
 80007a6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80007aa:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80007ac:	bf4c      	ite	mi
 80007ae:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80007b4:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80007b8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007bc:	f04f 0802 	mov.w	r8, #2
 80007c0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c4:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80007c8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80007cc:	4b74      	ldr	r3, [pc, #464]	; (80009a0 <LCD_Window+0x57c>)
 80007ce:	4975      	ldr	r1, [pc, #468]	; (80009a4 <LCD_Window+0x580>)
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <LCD_Window+0x57c>)
 80007d4:	4a74      	ldr	r2, [pc, #464]	; (80009a8 <LCD_Window+0x584>)
 80007d6:	6108      	str	r0, [r1, #16]
 80007d8:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80007dc:	f8c1 8010 	str.w	r8, [r1, #16]
 80007e0:	f04f 0910 	mov.w	r9, #16
 80007e4:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e8:	610c      	str	r4, [r1, #16]
 80007ea:	f8c1 c010 	str.w	ip, [r1, #16]
 80007ee:	6110      	str	r0, [r2, #16]
 80007f0:	6114      	str	r4, [r2, #16]
 80007f2:	611d      	str	r5, [r3, #16]
 80007f4:	611e      	str	r6, [r3, #16]
 80007f6:	6118      	str	r0, [r3, #16]
 80007f8:	611c      	str	r4, [r3, #16]
 80007fa:	611f      	str	r7, [r3, #16]
 80007fc:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000800:	f8c3 a010 	str.w	sl, [r3, #16]
 8000804:	6116      	str	r6, [r2, #16]
 8000806:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000808:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800080c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800080e:	2740      	movs	r7, #64	; 0x40
 8000810:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000812:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000816:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000818:	2720      	movs	r7, #32
 800081a:	f8c3 9010 	str.w	r9, [r3, #16]
 800081e:	611f      	str	r7, [r3, #16]
 8000820:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000822:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000824:	f8c1 8010 	str.w	r8, [r1, #16]
 8000828:	f8c1 e010 	str.w	lr, [r1, #16]
 800082c:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800082e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000832:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000836:	6110      	str	r0, [r2, #16]
 8000838:	6114      	str	r4, [r2, #16]
 800083a:	611d      	str	r5, [r3, #16]
 800083c:	611e      	str	r6, [r3, #16]
 800083e:	6118      	str	r0, [r3, #16]
 8000840:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 8000842:	9c01      	ldr	r4, [sp, #4]
 8000844:	6119      	str	r1, [r3, #16]
 8000846:	f8c3 a010 	str.w	sl, [r3, #16]
 800084a:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800084c:	b2e4      	uxtb	r4, r4
 800084e:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000850:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000854:	bf18      	it	ne
 8000856:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000858:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 800085c:	9303      	str	r3, [sp, #12]
 800085e:	bf14      	ite	ne
 8000860:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000862:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000864:	064c      	lsls	r4, r1, #25
 8000866:	bf54      	ite	pl
 8000868:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800086c:	2408      	movmi	r4, #8
 800086e:	4a4e      	ldr	r2, [pc, #312]	; (80009a8 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 8000870:	4608      	mov	r0, r1
 8000872:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000874:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000876:	bf54      	ite	pl
 8000878:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800087c:	2410      	movmi	r4, #16
 800087e:	4a4a      	ldr	r2, [pc, #296]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000880:	06cf      	lsls	r7, r1, #27
 8000882:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000884:	bf54      	ite	pl
 8000886:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800088a:	2420      	movmi	r4, #32
 800088c:	4a46      	ldr	r2, [pc, #280]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800088e:	070e      	lsls	r6, r1, #28
 8000890:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000892:	bf54      	ite	pl
 8000894:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000898:	2440      	movmi	r4, #64	; 0x40
 800089a:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <LCD_Window+0x584>)
 800089c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008a0:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80008a2:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008a4:	bf54      	ite	pl
 80008a6:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80008aa:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80008ac:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ae:	bf54      	ite	pl
 80008b0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80008b4:	2110      	movmi	r1, #16
 80008b6:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <LCD_Window+0x584>)
 80008b8:	f04f 0901 	mov.w	r9, #1
 80008bc:	6114      	str	r4, [r2, #16]
 80008be:	4a38      	ldr	r2, [pc, #224]	; (80009a0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80008c4:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80008c6:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c8:	bf54      	ite	pl
 80008ca:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008ce:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008d0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80008d4:	f04f 0c02 	mov.w	ip, #2
 80008d8:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008da:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80008de:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008e0:	4930      	ldr	r1, [pc, #192]	; (80009a4 <LCD_Window+0x580>)
 80008e2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80008e6:	610c      	str	r4, [r1, #16]
 80008e8:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80008ec:	f8c1 c010 	str.w	ip, [r1, #16]
 80008f0:	f8c1 a010 	str.w	sl, [r1, #16]
 80008f4:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008f8:	f8c1 8010 	str.w	r8, [r1, #16]
 80008fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000900:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <LCD_Window+0x57c>)
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <LCD_Window+0x584>)
  data[1] = y1;
 8000904:	fa5f f58b 	uxtb.w	r5, fp
 8000908:	6104      	str	r4, [r0, #16]
 800090a:	6106      	str	r6, [r0, #16]
 800090c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000910:	6117      	str	r7, [r2, #16]
 8000912:	6114      	str	r4, [r2, #16]
 8000914:	6116      	str	r6, [r2, #16]
 8000916:	6111      	str	r1, [r2, #16]
 8000918:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800091c:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800091e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000920:	bf16      	itet	ne
 8000922:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000924:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000926:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000928:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800092c:	bf0c      	ite	eq
 800092e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000932:	2108      	movne	r1, #8
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000936:	f01b 0f20 	tst.w	fp, #32
 800093a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800093c:	bf0c      	ite	eq
 800093e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000942:	2110      	movne	r1, #16
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000946:	f01b 0f10 	tst.w	fp, #16
 800094a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800094c:	bf0c      	ite	eq
 800094e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000952:	2120      	movne	r1, #32
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000956:	f01b 0f08 	tst.w	fp, #8
 800095a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095c:	bf0c      	ite	eq
 800095e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000962:	2140      	movne	r1, #64	; 0x40
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000966:	f01b 0f04 	tst.w	fp, #4
 800096a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800096c:	bf0c      	ite	eq
 800096e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000972:	2180      	movne	r1, #128	; 0x80
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000976:	f01b 0f02 	tst.w	fp, #2
 800097a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097c:	bf0c      	ite	eq
 800097e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000982:	2110      	movne	r1, #16
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000986:	07ef      	lsls	r7, r5, #31
 8000988:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098a:	bf54      	ite	pl
 800098c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000990:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000992:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8000996:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800099a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800099e:	e005      	b.n	80009ac <LCD_Window+0x588>
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	40010800 	.word	0x40010800
 80009ac:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80009b0:	f04f 0b02 	mov.w	fp, #2
 80009b4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80009b8:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009bc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80009c0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80009c4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80009c8:	4a7d      	ldr	r2, [pc, #500]	; (8000bc0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ca:	487e      	ldr	r0, [pc, #504]	; (8000bc4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009cc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ce:	497e      	ldr	r1, [pc, #504]	; (8000bc8 <LCD_Window+0x7a4>)
 80009d0:	4a7b      	ldr	r2, [pc, #492]	; (8000bc0 <LCD_Window+0x79c>)
 80009d2:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80009d4:	f8c1 b010 	str.w	fp, [r1, #16]
 80009d8:	f8c1 a010 	str.w	sl, [r1, #16]
 80009dc:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e0:	f8c1 8010 	str.w	r8, [r1, #16]
 80009e4:	6104      	str	r4, [r0, #16]
 80009e6:	6105      	str	r5, [r0, #16]
 80009e8:	f8c2 e010 	str.w	lr, [r2, #16]
 80009ec:	6116      	str	r6, [r2, #16]
 80009ee:	6114      	str	r4, [r2, #16]
 80009f0:	6115      	str	r5, [r2, #16]
 80009f2:	f8c2 c010 	str.w	ip, [r2, #16]
 80009f6:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009f8:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	f04f 0a02 	mov.w	sl, #2
 80009fe:	0bd2      	lsrs	r2, r2, #15
 8000a00:	bf16      	itet	ne
 8000a02:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a04:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a06:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000a08:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a0a:	bf54      	ite	pl
 8000a0c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000a10:	2108      	movmi	r1, #8
 8000a12:	4a6c      	ldr	r2, [pc, #432]	; (8000bc4 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000a14:	069d      	lsls	r5, r3, #26
 8000a16:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a18:	bf54      	ite	pl
 8000a1a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a1e:	2110      	movmi	r1, #16
 8000a20:	4a68      	ldr	r2, [pc, #416]	; (8000bc4 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a22:	06dc      	lsls	r4, r3, #27
 8000a24:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a26:	bf54      	ite	pl
 8000a28:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a2c:	2120      	movmi	r1, #32
 8000a2e:	4a65      	ldr	r2, [pc, #404]	; (8000bc4 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a30:	0718      	lsls	r0, r3, #28
 8000a32:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a34:	bf54      	ite	pl
 8000a36:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	2140      	movmi	r1, #64	; 0x40
 8000a3c:	4a61      	ldr	r2, [pc, #388]	; (8000bc4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a44:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a46:	bf54      	ite	pl
 8000a48:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000a4c:	2180      	movmi	r1, #128	; 0x80
 8000a4e:	4a5d      	ldr	r2, [pc, #372]	; (8000bc4 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a50:	079b      	lsls	r3, r3, #30
 8000a52:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a54:	bf54      	ite	pl
 8000a56:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a5a:	2210      	movmi	r2, #16
 8000a5c:	4b58      	ldr	r3, [pc, #352]	; (8000bc0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a5e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000a62:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a64:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a66:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000a6a:	07df      	lsls	r7, r3, #31
 8000a6c:	bf54      	ite	pl
 8000a6e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a72:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a74:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000a78:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000a7c:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000a84:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a88:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8e:	494d      	ldr	r1, [pc, #308]	; (8000bc4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000a90:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a92:	4a4d      	ldr	r2, [pc, #308]	; (8000bc8 <LCD_Window+0x7a4>)
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <LCD_Window+0x79c>)
 8000a96:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a98:	f8c2 a010 	str.w	sl, [r2, #16]
 8000a9c:	f8c2 9010 	str.w	r9, [r2, #16]
 8000aa0:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa4:	f8c2 e010 	str.w	lr, [r2, #16]
 8000aa8:	6108      	str	r0, [r1, #16]
 8000aaa:	610c      	str	r4, [r1, #16]
 8000aac:	f8c3 c010 	str.w	ip, [r3, #16]
 8000ab0:	611d      	str	r5, [r3, #16]
 8000ab2:	6118      	str	r0, [r3, #16]
 8000ab4:	611c      	str	r4, [r3, #16]
 8000ab6:	611f      	str	r7, [r3, #16]
 8000ab8:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000aba:	9b02      	ldr	r3, [sp, #8]
 8000abc:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ac0:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	bf1c      	itt	ne
 8000ac4:	2304      	movne	r3, #4
 8000ac6:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000ac8:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aca:	bf08      	it	eq
 8000acc:	610d      	streq	r5, [r1, #16]
 8000ace:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8000ad0:	bf4c      	ite	mi
 8000ad2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ad4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000ada:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000adc:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000ade:	9b01      	ldr	r3, [sp, #4]
 8000ae0:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000ae4:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 8000ae6:	bf4c      	ite	mi
 8000ae8:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aea:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000af0:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af4:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000af6:	9b01      	ldr	r3, [sp, #4]
 8000af8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000afc:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 8000afe:	bf4c      	ite	mi
 8000b00:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b02:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <LCD_Window+0x7a0>)
 8000b08:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000b0c:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000b0e:	9b01      	ldr	r3, [sp, #4]
 8000b10:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000b14:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	bf4c      	ite	mi
 8000b18:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <LCD_Window+0x7a0>)
 8000b20:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b24:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000b26:	9b01      	ldr	r3, [sp, #4]
 8000b28:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b2c:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000b2e:	bf4c      	ite	mi
 8000b30:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <LCD_Window+0x7a0>)
 8000b38:	4922      	ldr	r1, [pc, #136]	; (8000bc4 <LCD_Window+0x7a0>)
 8000b3a:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000b3c:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000b3e:	f04f 0910 	mov.w	r9, #16
 8000b42:	079a      	lsls	r2, r3, #30
 8000b44:	bf4c      	ite	mi
 8000b46:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b48:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b52:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000b54:	9b02      	ldr	r3, [sp, #8]
 8000b56:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000b58:	bf4c      	ite	mi
 8000b5a:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <LCD_Window+0x79c>)
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <LCD_Window+0x7a4>)
 8000b6a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b6c:	611e      	str	r6, [r3, #16]
 8000b6e:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b70:	611c      	str	r4, [r3, #16]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000b78:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000b7c:	6108      	str	r0, [r1, #16]
 8000b7e:	610c      	str	r4, [r1, #16]
 8000b80:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b84:	f8c2 e010 	str.w	lr, [r2, #16]
 8000b88:	6110      	str	r0, [r2, #16]
 8000b8a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b8c:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b8e:	f8c2 b010 	str.w	fp, [r2, #16]
 8000b92:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b96:	f8c1 e010 	str.w	lr, [r1, #16]
 8000b9a:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba2:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ba4:	f8c1 8010 	str.w	r8, [r1, #16]
 8000ba8:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000baa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000bae:	6111      	str	r1, [r2, #16]
 8000bb0:	6117      	str	r7, [r2, #16]
 8000bb2:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bb4:	611e      	str	r6, [r3, #16]
 8000bb6:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000bb8:	b005      	add	sp, #20
 8000bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000bd4:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000bd8:	4caf      	ldr	r4, [pc, #700]	; (8000e98 <LCD_Rect_Fill+0x2cc>)
 8000bda:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000bde:	6125      	str	r5, [r4, #16]
 8000be0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000be4:	f8c4 a010 	str.w	sl, [r4, #16]
 8000be8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bec:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000bf0:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000bf4:	4681      	mov	r9, r0
 8000bf6:	4696      	mov	lr, r2
 8000bf8:	48a8      	ldr	r0, [pc, #672]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
 8000bfa:	4aa9      	ldr	r2, [pc, #676]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
 8000bfc:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bfe:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c02:	6105      	str	r5, [r0, #16]
 8000c04:	f8c2 c010 	str.w	ip, [r2, #16]
 8000c08:	6117      	str	r7, [r2, #16]
 8000c0a:	6116      	str	r6, [r2, #16]
 8000c0c:	6115      	str	r5, [r2, #16]
 8000c0e:	f8c2 8010 	str.w	r8, [r2, #16]
 8000c12:	f8c2 a010 	str.w	sl, [r2, #16]
 8000c16:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000c1a:	6107      	str	r7, [r0, #16]
 8000c1c:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c20:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c24:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c28:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000c2c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c30:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000c34:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c38:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3c:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c40:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c44:	f8c2 a010 	str.w	sl, [r2, #16]
 8000c48:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c4a:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c4e:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c52:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c56:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c5a:	f04f 0b01 	mov.w	fp, #1
 8000c5e:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c62:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c66:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000c6a:	6106      	str	r6, [r0, #16]
 8000c6c:	6105      	str	r5, [r0, #16]
 8000c6e:	f8c2 c010 	str.w	ip, [r2, #16]
 8000c72:	6117      	str	r7, [r2, #16]
 8000c74:	6116      	str	r6, [r2, #16]
 8000c76:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000c78:	1e4d      	subs	r5, r1, #1
 8000c7a:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000c7c:	fb03 f30e 	mul.w	r3, r3, lr
 8000c80:	f8c2 8010 	str.w	r8, [r2, #16]
 8000c84:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000c88:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000c8c:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000c8e:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000c90:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000c92:	b293      	uxth	r3, r2
 8000c94:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000c96:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000c9a:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000c9c:	b2ed      	uxtb	r5, r5
 8000c9e:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000ca0:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	bf18      	it	ne
 8000ca4:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000ca6:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000caa:	9204      	str	r2, [sp, #16]
 8000cac:	bf14      	ite	ne
 8000cae:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb0:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000cb2:	0667      	lsls	r7, r4, #25
 8000cb4:	bf54      	ite	pl
 8000cb6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000cba:	2508      	movmi	r5, #8
 8000cbc:	4877      	ldr	r0, [pc, #476]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000cc2:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc4:	bf54      	ite	pl
 8000cc6:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000cca:	2510      	movmi	r5, #16
 8000ccc:	4873      	ldr	r0, [pc, #460]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
 8000cce:	f04f 0b02 	mov.w	fp, #2
 8000cd2:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000cd4:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	bf54      	ite	pl
 8000cd8:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cdc:	2520      	movmi	r5, #32
 8000cde:	486f      	ldr	r0, [pc, #444]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ce0:	0727      	lsls	r7, r4, #28
 8000ce2:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce4:	bf54      	ite	pl
 8000ce6:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	2540      	movmi	r5, #64	; 0x40
 8000cec:	486b      	ldr	r0, [pc, #428]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
 8000cee:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000cf2:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cf4:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf6:	bf54      	ite	pl
 8000cf8:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cfc:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cfe:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d00:	bf54      	ite	pl
 8000d02:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	2410      	movmi	r4, #16
 8000d08:	4864      	ldr	r0, [pc, #400]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0a:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000d0e:	6105      	str	r5, [r0, #16]
 8000d10:	4863      	ldr	r0, [pc, #396]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000d16:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000d18:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1a:	bf54      	ite	pl
 8000d1c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d20:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d22:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d26:	485e      	ldr	r0, [pc, #376]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d28:	4d5c      	ldr	r5, [pc, #368]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2c:	4c5a      	ldr	r4, [pc, #360]	; (8000e98 <LCD_Rect_Fill+0x2cc>)
 8000d2e:	485c      	ldr	r0, [pc, #368]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
 8000d30:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d32:	f8c4 b010 	str.w	fp, [r4, #16]
 8000d36:	f8c4 a010 	str.w	sl, [r4, #16]
 8000d3a:	f04f 0a01 	mov.w	sl, #1
 8000d3e:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d42:	f8c4 8010 	str.w	r8, [r4, #16]
 8000d46:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000d4a:	612e      	str	r6, [r5, #16]
 8000d4c:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000d50:	612f      	str	r7, [r5, #16]
 8000d52:	6104      	str	r4, [r0, #16]
 8000d54:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000d58:	f8c0 e010 	str.w	lr, [r0, #16]
 8000d5c:	6106      	str	r6, [r0, #16]
 8000d5e:	6107      	str	r7, [r0, #16]
 8000d60:	6104      	str	r4, [r0, #16]
 8000d62:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000d66:	fa5f fc81 	uxtb.w	ip, r1
 8000d6a:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d6c:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000d70:	bf16      	itet	ne
 8000d72:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d74:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d78:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d7a:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7c:	bf54      	ite	pl
 8000d7e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d82:	2408      	movmi	r4, #8
 8000d84:	4845      	ldr	r0, [pc, #276]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d86:	068e      	lsls	r6, r1, #26
 8000d88:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8a:	bf54      	ite	pl
 8000d8c:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d90:	2410      	movmi	r4, #16
 8000d92:	4842      	ldr	r0, [pc, #264]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d94:	06cd      	lsls	r5, r1, #27
 8000d96:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d98:	bf54      	ite	pl
 8000d9a:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d9e:	2420      	movmi	r4, #32
 8000da0:	483e      	ldr	r0, [pc, #248]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da2:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000da8:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000daa:	bf54      	ite	pl
 8000dac:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000db0:	2440      	movmi	r4, #64	; 0x40
 8000db2:	483a      	ldr	r0, [pc, #232]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
 8000db4:	f04f 0b02 	mov.w	fp, #2
 8000db8:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000dba:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbc:	bf54      	ite	pl
 8000dbe:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	2480      	movmi	r4, #128	; 0x80
 8000dc4:	4835      	ldr	r0, [pc, #212]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000dc6:	078f      	lsls	r7, r1, #30
 8000dc8:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dca:	bf54      	ite	pl
 8000dcc:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	2010      	movmi	r0, #16
 8000dd2:	4933      	ldr	r1, [pc, #204]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dd4:	f01c 0f01 	tst.w	ip, #1
 8000dd8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dda:	bf0c      	ite	eq
 8000ddc:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000de0:	2020      	movne	r0, #32
 8000de2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000de6:	492e      	ldr	r1, [pc, #184]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000dec:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dee:	482a      	ldr	r0, [pc, #168]	; (8000e98 <LCD_Rect_Fill+0x2cc>)
 8000df0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000df4:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000df6:	f8c0 b010 	str.w	fp, [r0, #16]
 8000dfa:	f8c0 a010 	str.w	sl, [r0, #16]
 8000dfe:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e02:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000e0e:	f8c0 8010 	str.w	r8, [r0, #16]
 8000e12:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000e16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e1a:	4921      	ldr	r1, [pc, #132]	; (8000ea0 <LCD_Rect_Fill+0x2d4>)
 8000e1c:	4c1f      	ldr	r4, [pc, #124]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000e1e:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e22:	6125      	str	r5, [r4, #16]
 8000e24:	6126      	str	r6, [r4, #16]
 8000e26:	f8c1 e010 	str.w	lr, [r1, #16]
 8000e2a:	610f      	str	r7, [r1, #16]
 8000e2c:	610d      	str	r5, [r1, #16]
 8000e2e:	610e      	str	r6, [r1, #16]
 8000e30:	6108      	str	r0, [r1, #16]
 8000e32:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e36:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000e38:	bf16      	itet	ne
 8000e3a:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3c:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e3e:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e40:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e42:	bf54      	ite	pl
 8000e44:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000e48:	2008      	movmi	r0, #8
 8000e4a:	4914      	ldr	r1, [pc, #80]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e4c:	0695      	lsls	r5, r2, #26
 8000e4e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e50:	bf54      	ite	pl
 8000e52:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	2010      	movmi	r0, #16
 8000e58:	4910      	ldr	r1, [pc, #64]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e5a:	06d4      	lsls	r4, r2, #27
 8000e5c:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5e:	bf54      	ite	pl
 8000e60:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000e64:	2020      	movmi	r0, #32
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e68:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000e6c:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e6e:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e70:	bf54      	ite	pl
 8000e72:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000e76:	2040      	movmi	r0, #64	; 0x40
 8000e78:	4908      	ldr	r1, [pc, #32]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
 8000e7a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000e7e:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e80:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e82:	bf54      	ite	pl
 8000e84:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000e88:	2080      	movmi	r0, #128	; 0x80
 8000e8a:	4904      	ldr	r1, [pc, #16]	; (8000e9c <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e8c:	0797      	lsls	r7, r2, #30
 8000e8e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e90:	bf58      	it	pl
 8000e92:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e96:	e005      	b.n	8000ea4 <LCD_Rect_Fill+0x2d8>
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000ea4:	bf48      	it	mi
 8000ea6:	2110      	movmi	r1, #16
 8000ea8:	4aa9      	ldr	r2, [pc, #676]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eaa:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000eb0:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000eb6:	07d6      	lsls	r6, r2, #31
 8000eb8:	bf54      	ite	pl
 8000eba:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	2120      	movmi	r1, #32
 8000ec0:	4aa3      	ldr	r2, [pc, #652]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec8:	49a2      	ldr	r1, [pc, #648]	; (8001154 <LCD_Rect_Fill+0x588>)
 8000eca:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000ece:	610c      	str	r4, [r1, #16]
 8000ed0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000ed4:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000edc:	f8c1 a010 	str.w	sl, [r1, #16]
 8000ee0:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	4a9a      	ldr	r2, [pc, #616]	; (8001150 <LCD_Rect_Fill+0x584>)
 8000ee6:	489c      	ldr	r0, [pc, #624]	; (8001158 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000ee8:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eec:	f8c1 8010 	str.w	r8, [r1, #16]
 8000ef0:	6104      	str	r4, [r0, #16]
 8000ef2:	6105      	str	r5, [r0, #16]
 8000ef4:	f8c2 e010 	str.w	lr, [r2, #16]
 8000ef8:	6116      	str	r6, [r2, #16]
 8000efa:	6114      	str	r4, [r2, #16]
 8000efc:	6115      	str	r5, [r2, #16]
 8000efe:	f8c2 c010 	str.w	ip, [r2, #16]
 8000f02:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f04:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	f04f 0e02 	mov.w	lr, #2
 8000f0a:	09d2      	lsrs	r2, r2, #7
 8000f0c:	bf16      	itet	ne
 8000f0e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f10:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f14:	065d      	lsls	r5, r3, #25
 8000f16:	bf4c      	ite	mi
 8000f18:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1a:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000f1e:	4a8e      	ldr	r2, [pc, #568]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f20:	069c      	lsls	r4, r3, #26
 8000f22:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f24:	bf4c      	ite	mi
 8000f26:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f28:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000f2c:	4a8a      	ldr	r2, [pc, #552]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f2e:	06d8      	lsls	r0, r3, #27
 8000f30:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f32:	bf4c      	ite	mi
 8000f34:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f36:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000f3a:	4a87      	ldr	r2, [pc, #540]	; (8001158 <LCD_Rect_Fill+0x58c>)
 8000f3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f40:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f42:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	bf4c      	ite	mi
 8000f46:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f48:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000f4c:	4a82      	ldr	r2, [pc, #520]	; (8001158 <LCD_Rect_Fill+0x58c>)
 8000f4e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000f52:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f54:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	bf4c      	ite	mi
 8000f58:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000f5e:	4a7e      	ldr	r2, [pc, #504]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f60:	079f      	lsls	r7, r3, #30
 8000f62:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f64:	bf4c      	ite	mi
 8000f66:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f68:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000f6c:	4b78      	ldr	r3, [pc, #480]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f72:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f74:	9b03      	ldr	r3, [sp, #12]
 8000f76:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000f7a:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	bf14      	ite	ne
 8000f80:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f86:	4973      	ldr	r1, [pc, #460]	; (8001154 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000f88:	4b71      	ldr	r3, [pc, #452]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000f94:	6108      	str	r0, [r1, #16]
 8000f96:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	f8c1 c010 	str.w	ip, [r1, #16]
 8000fa6:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000faa:	610c      	str	r4, [r1, #16]
 8000fac:	610f      	str	r7, [r1, #16]
 8000fae:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <LCD_Rect_Fill+0x584>)
 8000fb4:	4a68      	ldr	r2, [pc, #416]	; (8001158 <LCD_Rect_Fill+0x58c>)
 8000fb6:	6110      	str	r0, [r2, #16]
 8000fb8:	6114      	str	r4, [r2, #16]
 8000fba:	611d      	str	r5, [r3, #16]
 8000fbc:	611e      	str	r6, [r3, #16]
 8000fbe:	6118      	str	r0, [r3, #16]
 8000fc0:	611c      	str	r4, [r3, #16]
 8000fc2:	f8c3 a010 	str.w	sl, [r3, #16]
 8000fc6:	f8c3 b010 	str.w	fp, [r3, #16]
 8000fca:	6116      	str	r6, [r2, #16]
 8000fcc:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fd4:	2740      	movs	r7, #64	; 0x40
 8000fd6:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd8:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000fdc:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	2720      	movs	r7, #32
 8000fe0:	f8c3 8010 	str.w	r8, [r3, #16]
 8000fe4:	611f      	str	r7, [r3, #16]
 8000fe6:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	f8c1 e010 	str.w	lr, [r1, #16]
 8000fee:	f8c1 c010 	str.w	ip, [r1, #16]
 8000ff2:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff4:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000ff8:	610f      	str	r7, [r1, #16]
 8000ffa:	6110      	str	r0, [r2, #16]
 8000ffc:	6114      	str	r4, [r2, #16]
 8000ffe:	611d      	str	r5, [r3, #16]
 8001000:	611e      	str	r6, [r3, #16]
 8001002:	6118      	str	r0, [r3, #16]
 8001004:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8001006:	9c02      	ldr	r4, [sp, #8]
 8001008:	f8c3 a010 	str.w	sl, [r3, #16]
 800100c:	f8c3 b010 	str.w	fp, [r3, #16]
 8001010:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8001012:	b2e4      	uxtb	r4, r4
 8001014:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001016:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800101a:	bf18      	it	ne
 800101c:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 800101e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8001022:	9304      	str	r3, [sp, #16]
 8001024:	bf14      	ite	ne
 8001026:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001028:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800102a:	064e      	lsls	r6, r1, #25
 800102c:	bf54      	ite	pl
 800102e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8001032:	2408      	movmi	r4, #8
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8001036:	4608      	mov	r0, r1
 8001038:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800103a:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103c:	bf54      	ite	pl
 800103e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001042:	2410      	movmi	r4, #16
 8001044:	4a44      	ldr	r2, [pc, #272]	; (8001158 <LCD_Rect_Fill+0x58c>)
 8001046:	f04f 0b02 	mov.w	fp, #2
 800104a:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800104c:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800104e:	bf54      	ite	pl
 8001050:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001054:	2420      	movmi	r4, #32
 8001056:	4a40      	ldr	r2, [pc, #256]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001058:	070f      	lsls	r7, r1, #28
 800105a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105c:	bf54      	ite	pl
 800105e:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001062:	2440      	movmi	r4, #64	; 0x40
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001066:	074e      	lsls	r6, r1, #29
 8001068:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	bf54      	ite	pl
 800106c:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001070:	2480      	movmi	r4, #128	; 0x80
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <LCD_Rect_Fill+0x58c>)
 8001074:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001078:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800107a:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800107c:	bf54      	ite	pl
 800107e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001082:	2110      	movmi	r1, #16
 8001084:	4a32      	ldr	r2, [pc, #200]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001086:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800108a:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800108c:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800108e:	bf54      	ite	pl
 8001090:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001094:	2120      	movmi	r1, #32
 8001096:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001098:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800109c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800109e:	492d      	ldr	r1, [pc, #180]	; (8001154 <LCD_Rect_Fill+0x588>)
 80010a0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80010a4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	f8c1 b010 	str.w	fp, [r1, #16]
 80010aa:	f8c1 a010 	str.w	sl, [r1, #16]
 80010ae:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ba:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80010be:	f8c1 8010 	str.w	r8, [r1, #16]
 80010c2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80010c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <LCD_Rect_Fill+0x584>)
 80010cc:	4822      	ldr	r0, [pc, #136]	; (8001158 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 80010ce:	fa5f f589 	uxtb.w	r5, r9
 80010d2:	6104      	str	r4, [r0, #16]
 80010d4:	6106      	str	r6, [r0, #16]
 80010d6:	f8c2 e010 	str.w	lr, [r2, #16]
 80010da:	6117      	str	r7, [r2, #16]
 80010dc:	6114      	str	r4, [r2, #16]
 80010de:	6116      	str	r6, [r2, #16]
 80010e0:	6111      	str	r1, [r2, #16]
 80010e2:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010e6:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 80010e8:	bf16      	itet	ne
 80010ea:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ec:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010f0:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f4:	bf0c      	ite	eq
 80010f6:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010fa:	2108      	movne	r1, #8
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010fe:	f019 0f20 	tst.w	r9, #32
 8001102:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001104:	bf0c      	ite	eq
 8001106:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800110a:	2110      	movne	r1, #16
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800110e:	f019 0f10 	tst.w	r9, #16
 8001112:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001114:	bf0c      	ite	eq
 8001116:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800111a:	2120      	movne	r1, #32
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800111e:	f019 0f08 	tst.w	r9, #8
 8001122:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001124:	bf0c      	ite	eq
 8001126:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800112a:	2140      	movne	r1, #64	; 0x40
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800112e:	f019 0f04 	tst.w	r9, #4
 8001132:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001134:	bf0c      	ite	eq
 8001136:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800113a:	2180      	movne	r1, #128	; 0x80
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800113e:	f019 0f02 	tst.w	r9, #2
 8001142:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001144:	bf0c      	ite	eq
 8001146:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800114a:	2110      	movne	r1, #16
 800114c:	e006      	b.n	800115c <LCD_Rect_Fill+0x590>
 800114e:	bf00      	nop
 8001150:	40011000 	.word	0x40011000
 8001154:	40010c00 	.word	0x40010c00
 8001158:	40010800 	.word	0x40010800
 800115c:	4ab5      	ldr	r2, [pc, #724]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001162:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001164:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001166:	bf54      	ite	pl
 8001168:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800116c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8001172:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001176:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800117a:	f04f 0b02 	mov.w	fp, #2
 800117e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001182:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800118a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800118e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8001192:	4aa8      	ldr	r2, [pc, #672]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001194:	48a8      	ldr	r0, [pc, #672]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001196:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001198:	49a8      	ldr	r1, [pc, #672]	; (800143c <LCD_Rect_Fill+0x870>)
 800119a:	4aa6      	ldr	r2, [pc, #664]	; (8001434 <LCD_Rect_Fill+0x868>)
 800119c:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800119e:	f8c1 b010 	str.w	fp, [r1, #16]
 80011a2:	f8c1 a010 	str.w	sl, [r1, #16]
 80011a6:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011aa:	f8c1 8010 	str.w	r8, [r1, #16]
 80011ae:	6104      	str	r4, [r0, #16]
 80011b0:	6105      	str	r5, [r0, #16]
 80011b2:	f8c2 e010 	str.w	lr, [r2, #16]
 80011b6:	6116      	str	r6, [r2, #16]
 80011b8:	6114      	str	r4, [r2, #16]
 80011ba:	6115      	str	r5, [r2, #16]
 80011bc:	f8c2 c010 	str.w	ip, [r2, #16]
 80011c0:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80011c2:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80011c4:	f04f 0a02 	mov.w	sl, #2
 80011c8:	0bd2      	lsrs	r2, r2, #15
 80011ca:	bf16      	itet	ne
 80011cc:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ce:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80011d2:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d4:	bf54      	ite	pl
 80011d6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011da:	2108      	movmi	r1, #8
 80011dc:	4a96      	ldr	r2, [pc, #600]	; (8001438 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011de:	069e      	lsls	r6, r3, #26
 80011e0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e2:	bf54      	ite	pl
 80011e4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011e8:	2110      	movmi	r1, #16
 80011ea:	4a93      	ldr	r2, [pc, #588]	; (8001438 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011ec:	06dd      	lsls	r5, r3, #27
 80011ee:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f0:	bf54      	ite	pl
 80011f2:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	2120      	movmi	r1, #32
 80011f8:	4a8f      	ldr	r2, [pc, #572]	; (8001438 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011fa:	071c      	lsls	r4, r3, #28
 80011fc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fe:	bf54      	ite	pl
 8001200:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001204:	2140      	movmi	r1, #64	; 0x40
 8001206:	4a8c      	ldr	r2, [pc, #560]	; (8001438 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001208:	0758      	lsls	r0, r3, #29
 800120a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120c:	bf54      	ite	pl
 800120e:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001212:	2180      	movmi	r1, #128	; 0x80
 8001214:	4a88      	ldr	r2, [pc, #544]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800121a:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800121c:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121e:	bf54      	ite	pl
 8001220:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001224:	2210      	movmi	r2, #16
 8001226:	4b83      	ldr	r3, [pc, #524]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001228:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800122c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800122e:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001230:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001234:	f013 0f01 	tst.w	r3, #1
 8001238:	bf0c      	ite	eq
 800123a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800123e:	2220      	movne	r2, #32
 8001240:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001244:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001248:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 800124c:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001250:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001254:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001258:	4b76      	ldr	r3, [pc, #472]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125a:	4977      	ldr	r1, [pc, #476]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 800125c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125e:	4a77      	ldr	r2, [pc, #476]	; (800143c <LCD_Rect_Fill+0x870>)
 8001260:	4b74      	ldr	r3, [pc, #464]	; (8001434 <LCD_Rect_Fill+0x868>)
 8001262:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001264:	f8c2 a010 	str.w	sl, [r2, #16]
 8001268:	f8c2 9010 	str.w	r9, [r2, #16]
 800126c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001270:	f8c2 e010 	str.w	lr, [r2, #16]
 8001274:	6108      	str	r0, [r1, #16]
 8001276:	610c      	str	r4, [r1, #16]
 8001278:	f8c3 c010 	str.w	ip, [r3, #16]
 800127c:	611d      	str	r5, [r3, #16]
 800127e:	6118      	str	r0, [r3, #16]
 8001280:	611c      	str	r4, [r3, #16]
 8001282:	611f      	str	r7, [r3, #16]
 8001284:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001286:	9b03      	ldr	r3, [sp, #12]
 8001288:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800128c:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800128e:	bf1c      	itt	ne
 8001290:	2304      	movne	r3, #4
 8001292:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001294:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001296:	bf08      	it	eq
 8001298:	610d      	streq	r5, [r1, #16]
 800129a:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 800129e:	bf14      	ite	ne
 80012a0:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a2:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	4b64      	ldr	r3, [pc, #400]	; (8001438 <LCD_Rect_Fill+0x86c>)
 80012a8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ac:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80012ae:	9b02      	ldr	r3, [sp, #8]
 80012b0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80012b4:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80012b8:	bf14      	ite	ne
 80012ba:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012bc:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80012c0:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <LCD_Rect_Fill+0x86c>)
 80012c2:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c4:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80012c6:	9b02      	ldr	r3, [sp, #8]
 80012c8:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80012cc:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80012d0:	bf14      	ite	ne
 80012d2:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80012de:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80012e0:	9b02      	ldr	r3, [sp, #8]
 80012e2:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80012e6:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	bf14      	ite	ne
 80012ec:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ee:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	4b51      	ldr	r3, [pc, #324]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012f4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80012f8:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	494f      	ldr	r1, [pc, #316]	; (800143c <LCD_Rect_Fill+0x870>)
 80012fe:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 8001302:	bf14      	ite	ne
 8001304:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001306:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001310:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001312:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001314:	f04f 0910 	mov.w	r9, #16
 8001318:	079a      	lsls	r2, r3, #30
 800131a:	bf4c      	ite	mi
 800131c:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001324:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001328:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800132a:	9b03      	ldr	r3, [sp, #12]
 800132c:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800132e:	bf4c      	ite	mi
 8001330:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001332:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <LCD_Rect_Fill+0x868>)
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800133e:	6108      	str	r0, [r1, #16]
 8001340:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001342:	610c      	str	r4, [r1, #16]
 8001344:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001346:	f8c1 e010 	str.w	lr, [r1, #16]
 800134a:	610b      	str	r3, [r1, #16]
 800134c:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 8001350:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001354:	6118      	str	r0, [r3, #16]
 8001356:	f8c3 e010 	str.w	lr, [r3, #16]
 800135a:	f8c2 c010 	str.w	ip, [r2, #16]
 800135e:	6117      	str	r7, [r2, #16]
 8001360:	6110      	str	r0, [r2, #16]
 8001362:	f8c2 e010 	str.w	lr, [r2, #16]
 8001366:	f8c2 b010 	str.w	fp, [r2, #16]
 800136a:	f8c2 a010 	str.w	sl, [r2, #16]
 800136e:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001370:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001372:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001376:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137a:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800137c:	f8c3 8010 	str.w	r8, [r3, #16]
 8001380:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001382:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001386:	6117      	str	r7, [r2, #16]
 8001388:	6116      	str	r6, [r2, #16]
 800138a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800138c:	610c      	str	r4, [r1, #16]
 800138e:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001390:	9d01      	ldr	r5, [sp, #4]
 8001392:	2d00      	cmp	r5, #0
 8001394:	f000 80c8 	beq.w	8001528 <LCD_Rect_Fill+0x95c>
 8001398:	2500      	movs	r5, #0
 800139a:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800139c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800139e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80013a2:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80013a6:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80013aa:	017f      	lsls	r7, r7, #5
 80013ac:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80013b0:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80013b4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80013b8:	f8cd 8008 	str.w	r8, [sp, #8]
 80013bc:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80013c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80013c4:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80013c8:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80013cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80013d0:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80013d4:	f8cd 8014 	str.w	r8, [sp, #20]
 80013d8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80013dc:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80013e0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80013e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80013e8:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80013ec:	f3c9 1900 	ubfx	r9, r9, #4, #1
 80013f0:	f8cd 801c 	str.w	r8, [sp, #28]
 80013f4:	f3c7 2800 	ubfx	r8, r7, #8, #1
 80013f8:	f8cd 8020 	str.w	r8, [sp, #32]
 80013fc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001404:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001408:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 800140c:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8001410:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001414:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001418:	f3c7 1740 	ubfx	r7, r7, #5, #1
 800141c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001420:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001424:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001428:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 800142c:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8001430:	e006      	b.n	8001440 <LCD_Rect_Fill+0x874>
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001440:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001444:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001446:	610f      	str	r7, [r1, #16]
 8001448:	f1bc 0f00 	cmp.w	ip, #0
 800144c:	f000 80ac 	beq.w	80015a8 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001450:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001452:	611c      	str	r4, [r3, #16]
 8001454:	2f00      	cmp	r7, #0
 8001456:	f000 80ac 	beq.w	80015b2 <LCD_Rect_Fill+0x9e6>
 800145a:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800145c:	9f03      	ldr	r7, [sp, #12]
 800145e:	2f00      	cmp	r7, #0
 8001460:	f000 809e 	beq.w	80015a0 <LCD_Rect_Fill+0x9d4>
 8001464:	f04f 0908 	mov.w	r9, #8
 8001468:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800146c:	9f04      	ldr	r7, [sp, #16]
 800146e:	2f00      	cmp	r7, #0
 8001470:	f000 8091 	beq.w	8001596 <LCD_Rect_Fill+0x9ca>
 8001474:	f04f 0904 	mov.w	r9, #4
 8001478:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800147c:	9f05      	ldr	r7, [sp, #20]
 800147e:	2f00      	cmp	r7, #0
 8001480:	f000 8087 	beq.w	8001592 <LCD_Rect_Fill+0x9c6>
 8001484:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001486:	9f06      	ldr	r7, [sp, #24]
 8001488:	2f00      	cmp	r7, #0
 800148a:	d07f      	beq.n	800158c <LCD_Rect_Fill+0x9c0>
 800148c:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800148e:	9f07      	ldr	r7, [sp, #28]
 8001490:	2f00      	cmp	r7, #0
 8001492:	d076      	beq.n	8001582 <LCD_Rect_Fill+0x9b6>
 8001494:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001498:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800149c:	9f08      	ldr	r7, [sp, #32]
 800149e:	2f00      	cmp	r7, #0
 80014a0:	d06a      	beq.n	8001578 <LCD_Rect_Fill+0x9ac>
 80014a2:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80014a6:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80014aa:	f1ba 0f00 	cmp.w	sl, #0
 80014ae:	d05e      	beq.n	800156e <LCD_Rect_Fill+0x9a2>
 80014b0:	f04f 0904 	mov.w	r9, #4
 80014b4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80014b8:	f1bb 0f00 	cmp.w	fp, #0
 80014bc:	d053      	beq.n	8001566 <LCD_Rect_Fill+0x99a>
 80014be:	f04f 0908 	mov.w	r9, #8
 80014c2:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80014c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80014c8:	2f00      	cmp	r7, #0
 80014ca:	d047      	beq.n	800155c <LCD_Rect_Fill+0x990>
 80014cc:	f04f 0910 	mov.w	r9, #16
 80014d0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80014d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	d03b      	beq.n	8001552 <LCD_Rect_Fill+0x986>
 80014da:	f04f 0920 	mov.w	r9, #32
 80014de:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80014e2:	f1b8 0f00 	cmp.w	r8, #0
 80014e6:	d02f      	beq.n	8001548 <LCD_Rect_Fill+0x97c>
 80014e8:	f04f 0940 	mov.w	r9, #64	; 0x40
 80014ec:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80014f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80014f2:	b327      	cbz	r7, 800153e <LCD_Rect_Fill+0x972>
 80014f4:	f04f 0980 	mov.w	r9, #128	; 0x80
 80014f8:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80014fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80014fe:	b1cf      	cbz	r7, 8001534 <LCD_Rect_Fill+0x968>
 8001500:	f04f 0910 	mov.w	r9, #16
 8001504:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001508:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800150a:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800150c:	b17f      	cbz	r7, 800152e <LCD_Rect_Fill+0x962>
 800150e:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001512:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001516:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800151a:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800151c:	6108      	str	r0, [r1, #16]
 800151e:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8001520:	610c      	str	r4, [r1, #16]
 8001522:	f8c1 9010 	str.w	r9, [r1, #16]
 8001526:	d18b      	bne.n	8001440 <LCD_Rect_Fill+0x874>
}
 8001528:	b00f      	add	sp, #60	; 0x3c
 800152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001532:	e7ee      	b.n	8001512 <LCD_Rect_Fill+0x946>
 8001534:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001538:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800153c:	e7e4      	b.n	8001508 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153e:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8001542:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001546:	e7d9      	b.n	80014fc <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001548:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 800154c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001550:	e7ce      	b.n	80014f0 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001556:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800155a:	e7c2      	b.n	80014e2 <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001560:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001564:	e7b6      	b.n	80014d4 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800156a:	611f      	str	r7, [r3, #16]
}
 800156c:	e7ab      	b.n	80014c6 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156e:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001572:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001576:	e79f      	b.n	80014b8 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001578:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800157c:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001580:	e793      	b.n	80014aa <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001582:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001586:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800158a:	e787      	b.n	800149c <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158c:	f8c2 e010 	str.w	lr, [r2, #16]
}
 8001590:	e77d      	b.n	800148e <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001592:	6110      	str	r0, [r2, #16]
}
 8001594:	e777      	b.n	8001486 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 800159a:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800159e:	e76d      	b.n	800147c <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a0:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80015a4:	6117      	str	r7, [r2, #16]
}
 80015a6:	e761      	b.n	800146c <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80015a8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015aa:	6118      	str	r0, [r3, #16]
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	f47f af54 	bne.w	800145a <LCD_Rect_Fill+0x88e>
 80015b2:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80015b6:	e751      	b.n	800145c <LCD_Rect_Fill+0x890>

080015b8 <LCD_Circle.constprop.1>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 80015bc:	2601      	movs	r6, #1
 80015be:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 80015c0:	b089      	sub	sp, #36	; 0x24
 80015c2:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80015c6:	4615      	mov	r5, r2
	P = 1 - radius;
 80015c8:	1a32      	subs	r2, r6, r0
 80015ca:	9304      	str	r3, [sp, #16]
 80015cc:	9203      	str	r2, [sp, #12]
 80015ce:	fa1f fb80 	uxth.w	fp, r0
 80015d2:	1e73      	subs	r3, r6, #1
 80015d4:	9307      	str	r3, [sp, #28]
	while (a_ <= b_)
	{
		if (fill == 1)
 80015d6:	9b06      	ldr	r3, [sp, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d070      	beq.n	80016be <LCD_Circle.constprop.1+0x106>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80015dc:	2301      	movs	r3, #1
 80015de:	b2b4      	uxth	r4, r6
 80015e0:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 80015e4:	f10b 0823 	add.w	r8, fp, #35	; 0x23
 80015e8:	fa1f f989 	uxth.w	r9, r9
 80015ec:	fa1f f888 	uxth.w	r8, r8
 80015f0:	4641      	mov	r1, r8
 80015f2:	4648      	mov	r0, r9
 80015f4:	461a      	mov	r2, r3
 80015f6:	9500      	str	r5, [sp, #0]
 80015f8:	f7ff fae8 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80015fc:	2301      	movs	r3, #1
 80015fe:	f104 0722 	add.w	r7, r4, #34	; 0x22
 8001602:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 8001606:	b2bf      	uxth	r7, r7
 8001608:	fa1f fa8a 	uxth.w	sl, sl
 800160c:	4639      	mov	r1, r7
 800160e:	461a      	mov	r2, r3
 8001610:	4650      	mov	r0, sl
 8001612:	9500      	str	r5, [sp, #0]
 8001614:	f7ff fada 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001618:	2301      	movs	r3, #1
 800161a:	4641      	mov	r1, r8
 800161c:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 8001620:	fa1f f888 	uxth.w	r8, r8
 8001624:	461a      	mov	r2, r3
 8001626:	4640      	mov	r0, r8
 8001628:	9500      	str	r5, [sp, #0]
 800162a:	f7ff facf 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800162e:	2301      	movs	r3, #1
 8001630:	4639      	mov	r1, r7
 8001632:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8001636:	b2bf      	uxth	r7, r7
 8001638:	461a      	mov	r2, r3
 800163a:	4638      	mov	r0, r7
 800163c:	9500      	str	r5, [sp, #0]
 800163e:	f7ff fac5 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8001642:	2301      	movs	r3, #1
 8001644:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
 8001648:	b2a4      	uxth	r4, r4
 800164a:	461a      	mov	r2, r3
 800164c:	4650      	mov	r0, sl
 800164e:	4621      	mov	r1, r4
 8001650:	9500      	str	r5, [sp, #0]
 8001652:	f7ff fabb 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8001656:	2301      	movs	r3, #1
 8001658:	4648      	mov	r0, r9
 800165a:	f1cb 0923 	rsb	r9, fp, #35	; 0x23
 800165e:	fa1f f989 	uxth.w	r9, r9
 8001662:	461a      	mov	r2, r3
 8001664:	4649      	mov	r1, r9
 8001666:	9500      	str	r5, [sp, #0]
 8001668:	f7ff fab0 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800166c:	2301      	movs	r3, #1
 800166e:	4649      	mov	r1, r9
 8001670:	461a      	mov	r2, r3
 8001672:	4640      	mov	r0, r8
 8001674:	9500      	str	r5, [sp, #0]
 8001676:	f7ff faa9 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800167a:	2301      	movs	r3, #1
 800167c:	4621      	mov	r1, r4
 800167e:	461a      	mov	r2, r3
 8001680:	4638      	mov	r0, r7
 8001682:	9500      	str	r5, [sp, #0]
 8001684:	f7ff faa2 	bl	8000bcc <LCD_Rect_Fill>
		}
		if (P < 0)
 8001688:	9a03      	ldr	r2, [sp, #12]
 800168a:	2a00      	cmp	r2, #0
 800168c:	db3a      	blt.n	8001704 <LCD_Circle.constprop.1+0x14c>
 800168e:	4611      	mov	r1, r2
			P = (P + 3) + (2 * a_);
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8001690:	9805      	ldr	r0, [sp, #20]
 8001692:	1e73      	subs	r3, r6, #1
 8001694:	1a1b      	subs	r3, r3, r0
 8001696:	3105      	adds	r1, #5
 8001698:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800169c:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 800169e:	9b04      	ldr	r3, [sp, #16]
			a_++;
			b_--;
 80016a0:	3801      	subs	r0, #1
	while (a_ <= b_)
 80016a2:	3302      	adds	r3, #2
 80016a4:	4286      	cmp	r6, r0
			b_--;
 80016a6:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 80016a8:	9304      	str	r3, [sp, #16]
 80016aa:	f106 0601 	add.w	r6, r6, #1
 80016ae:	dc35      	bgt.n	800171c <LCD_Circle.constprop.1+0x164>
 80016b0:	1e73      	subs	r3, r6, #1
 80016b2:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 80016b4:	9b06      	ldr	r3, [sp, #24]
 80016b6:	fa1f fb80 	uxth.w	fp, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d18e      	bne.n	80015dc <LCD_Circle.constprop.1+0x24>
 80016be:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80016c0:	ea4f 044b 	mov.w	r4, fp, lsl #1
 80016c4:	b2b7      	uxth	r7, r6
 80016c6:	f103 0801 	add.w	r8, r3, #1
 80016ca:	3401      	adds	r4, #1
 80016cc:	fa1f f888 	uxth.w	r8, r8
 80016d0:	b2a4      	uxth	r4, r4
 80016d2:	f1cb 0123 	rsb	r1, fp, #35	; 0x23
 80016d6:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 80016da:	4623      	mov	r3, r4
 80016dc:	4642      	mov	r2, r8
 80016de:	b289      	uxth	r1, r1
 80016e0:	b280      	uxth	r0, r0
 80016e2:	9500      	str	r5, [sp, #0]
 80016e4:	f7ff fa72 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80016e8:	f1c7 0124 	rsb	r1, r7, #36	; 0x24
 80016ec:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 80016f0:	4622      	mov	r2, r4
 80016f2:	4643      	mov	r3, r8
 80016f4:	9500      	str	r5, [sp, #0]
 80016f6:	b289      	uxth	r1, r1
 80016f8:	b280      	uxth	r0, r0
 80016fa:	f7ff fa67 	bl	8000bcc <LCD_Rect_Fill>
		if (P < 0)
 80016fe:	9a03      	ldr	r2, [sp, #12]
 8001700:	2a00      	cmp	r2, #0
 8001702:	dac4      	bge.n	800168e <LCD_Circle.constprop.1+0xd6>
			P = (P + 3) + (2 * a_);
 8001704:	9904      	ldr	r1, [sp, #16]
 8001706:	3203      	adds	r2, #3
 8001708:	188a      	adds	r2, r1, r2
 800170a:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 800170c:	1c8a      	adds	r2, r1, #2
 800170e:	9204      	str	r2, [sp, #16]
 8001710:	9a05      	ldr	r2, [sp, #20]
 8001712:	4296      	cmp	r6, r2
 8001714:	f106 0601 	add.w	r6, r6, #1
 8001718:	f77f af5b 	ble.w	80015d2 <LCD_Circle.constprop.1+0x1a>
		}
	}
}
 800171c:	b009      	add	sp, #36	; 0x24
 800171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001722:	bf00      	nop

08001724 <LCD_Circle.constprop.0>:
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	P = 1 - radius;
 8001728:	2601      	movs	r6, #1
 800172a:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 800172c:	b089      	sub	sp, #36	; 0x24
 800172e:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8001732:	4615      	mov	r5, r2
	P = 1 - radius;
 8001734:	1a32      	subs	r2, r6, r0
 8001736:	9304      	str	r3, [sp, #16]
 8001738:	9203      	str	r2, [sp, #12]
 800173a:	fa1f fb80 	uxth.w	fp, r0
 800173e:	1e73      	subs	r3, r6, #1
 8001740:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 8001742:	9b06      	ldr	r3, [sp, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d070      	beq.n	800182a <LCD_Circle.constprop.0+0x106>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8001748:	2301      	movs	r3, #1
 800174a:	b2b4      	uxth	r4, r6
 800174c:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 8001750:	f10b 084b 	add.w	r8, fp, #75	; 0x4b
 8001754:	fa1f f989 	uxth.w	r9, r9
 8001758:	fa1f f888 	uxth.w	r8, r8
 800175c:	4641      	mov	r1, r8
 800175e:	4648      	mov	r0, r9
 8001760:	461a      	mov	r2, r3
 8001762:	9500      	str	r5, [sp, #0]
 8001764:	f7ff fa32 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8001768:	2301      	movs	r3, #1
 800176a:	f104 074a 	add.w	r7, r4, #74	; 0x4a
 800176e:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 8001772:	b2bf      	uxth	r7, r7
 8001774:	fa1f fa8a 	uxth.w	sl, sl
 8001778:	4639      	mov	r1, r7
 800177a:	461a      	mov	r2, r3
 800177c:	4650      	mov	r0, sl
 800177e:	9500      	str	r5, [sp, #0]
 8001780:	f7ff fa24 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001784:	2301      	movs	r3, #1
 8001786:	4641      	mov	r1, r8
 8001788:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 800178c:	fa1f f888 	uxth.w	r8, r8
 8001790:	461a      	mov	r2, r3
 8001792:	4640      	mov	r0, r8
 8001794:	9500      	str	r5, [sp, #0]
 8001796:	f7ff fa19 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800179a:	2301      	movs	r3, #1
 800179c:	4639      	mov	r1, r7
 800179e:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 80017a2:	b2bf      	uxth	r7, r7
 80017a4:	461a      	mov	r2, r3
 80017a6:	4638      	mov	r0, r7
 80017a8:	9500      	str	r5, [sp, #0]
 80017aa:	f7ff fa0f 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80017ae:	2301      	movs	r3, #1
 80017b0:	f1c4 044c 	rsb	r4, r4, #76	; 0x4c
 80017b4:	b2a4      	uxth	r4, r4
 80017b6:	461a      	mov	r2, r3
 80017b8:	4650      	mov	r0, sl
 80017ba:	4621      	mov	r1, r4
 80017bc:	9500      	str	r5, [sp, #0]
 80017be:	f7ff fa05 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80017c2:	2301      	movs	r3, #1
 80017c4:	4648      	mov	r0, r9
 80017c6:	f1cb 094b 	rsb	r9, fp, #75	; 0x4b
 80017ca:	fa1f f989 	uxth.w	r9, r9
 80017ce:	461a      	mov	r2, r3
 80017d0:	4649      	mov	r1, r9
 80017d2:	9500      	str	r5, [sp, #0]
 80017d4:	f7ff f9fa 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80017d8:	2301      	movs	r3, #1
 80017da:	4649      	mov	r1, r9
 80017dc:	461a      	mov	r2, r3
 80017de:	4640      	mov	r0, r8
 80017e0:	9500      	str	r5, [sp, #0]
 80017e2:	f7ff f9f3 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80017e6:	2301      	movs	r3, #1
 80017e8:	4621      	mov	r1, r4
 80017ea:	461a      	mov	r2, r3
 80017ec:	4638      	mov	r0, r7
 80017ee:	9500      	str	r5, [sp, #0]
 80017f0:	f7ff f9ec 	bl	8000bcc <LCD_Rect_Fill>
		if (P < 0)
 80017f4:	9a03      	ldr	r2, [sp, #12]
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	db3a      	blt.n	8001870 <LCD_Circle.constprop.0+0x14c>
 80017fa:	4611      	mov	r1, r2
			P = (P + 5) + (2 * (a_ - b_));
 80017fc:	9805      	ldr	r0, [sp, #20]
 80017fe:	1e73      	subs	r3, r6, #1
 8001800:	1a1b      	subs	r3, r3, r0
 8001802:	3105      	adds	r1, #5
 8001804:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001808:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 800180a:	9b04      	ldr	r3, [sp, #16]
			b_--;
 800180c:	3801      	subs	r0, #1
	while (a_ <= b_)
 800180e:	3302      	adds	r3, #2
 8001810:	4286      	cmp	r6, r0
			b_--;
 8001812:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 8001814:	9304      	str	r3, [sp, #16]
 8001816:	f106 0601 	add.w	r6, r6, #1
 800181a:	dc35      	bgt.n	8001888 <LCD_Circle.constprop.0+0x164>
 800181c:	1e73      	subs	r3, r6, #1
 800181e:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 8001820:	9b06      	ldr	r3, [sp, #24]
 8001822:	fa1f fb80 	uxth.w	fp, r0
 8001826:	2b01      	cmp	r3, #1
 8001828:	d18e      	bne.n	8001748 <LCD_Circle.constprop.0+0x24>
 800182a:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800182c:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8001830:	b2b7      	uxth	r7, r6
 8001832:	f103 0801 	add.w	r8, r3, #1
 8001836:	3401      	adds	r4, #1
 8001838:	fa1f f888 	uxth.w	r8, r8
 800183c:	b2a4      	uxth	r4, r4
 800183e:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 8001842:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 8001846:	4623      	mov	r3, r4
 8001848:	4642      	mov	r2, r8
 800184a:	b289      	uxth	r1, r1
 800184c:	b280      	uxth	r0, r0
 800184e:	9500      	str	r5, [sp, #0]
 8001850:	f7ff f9bc 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8001854:	f1c7 014c 	rsb	r1, r7, #76	; 0x4c
 8001858:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 800185c:	4622      	mov	r2, r4
 800185e:	4643      	mov	r3, r8
 8001860:	9500      	str	r5, [sp, #0]
 8001862:	b289      	uxth	r1, r1
 8001864:	b280      	uxth	r0, r0
 8001866:	f7ff f9b1 	bl	8000bcc <LCD_Rect_Fill>
		if (P < 0)
 800186a:	9a03      	ldr	r2, [sp, #12]
 800186c:	2a00      	cmp	r2, #0
 800186e:	dac4      	bge.n	80017fa <LCD_Circle.constprop.0+0xd6>
			P = (P + 3) + (2 * a_);
 8001870:	9904      	ldr	r1, [sp, #16]
 8001872:	3203      	adds	r2, #3
 8001874:	188a      	adds	r2, r1, r2
 8001876:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 8001878:	1c8a      	adds	r2, r1, #2
 800187a:	9204      	str	r2, [sp, #16]
 800187c:	9a05      	ldr	r2, [sp, #20]
 800187e:	4296      	cmp	r6, r2
 8001880:	f106 0601 	add.w	r6, r6, #1
 8001884:	f77f af5b 	ble.w	800173e <LCD_Circle.constprop.0+0x1a>
}
 8001888:	b009      	add	sp, #36	; 0x24
 800188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188e:	bf00      	nop

08001890 <HAL_DMA_Init.constprop.0>:
  *         parameters in the DMA_InitTypeDef and initialize the associated handle.
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8001890:	4603      	mov	r3, r0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001892:	f44f 7c80 	mov.w	ip, #256	; 0x100
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8001896:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	2400      	movs	r4, #0
  hdma->DmaBaseAddress = DMA1;
 800189a:	4910      	ldr	r1, [pc, #64]	; (80018dc <HAL_DMA_Init.constprop.0+0x4c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_DMA_Init.constprop.0+0x50>)
  hdma->DmaBaseAddress = DMA1;
 800189e:	63c1      	str	r1, [r0, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018a0:	6801      	ldr	r1, [r0, #0]
 80018a2:	4d10      	ldr	r5, [pc, #64]	; (80018e4 <HAL_DMA_Init.constprop.0+0x54>)
 80018a4:	440a      	add	r2, r1
 80018a6:	fba5 0202 	umull	r0, r2, r5, r2
 80018aa:	0912      	lsrs	r2, r2, #4
  tmp = hdma->Instance->CCR;
 80018ac:	6808      	ldr	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	691d      	ldr	r5, [r3, #16]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
 80018b4:	685a      	ldr	r2, [r3, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018b6:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80018ba:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80018be:	432a      	orrs	r2, r5
 80018c0:	4302      	orrs	r2, r0
 80018c2:	6958      	ldr	r0, [r3, #20]
 80018c4:	4302      	orrs	r2, r0
 80018c6:	6998      	ldr	r0, [r3, #24]
 80018c8:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Direction        |
 80018ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  hdma->Instance->CCR = tmp;
 80018ce:	600a      	str	r2, [r1, #0]
  hdma->Lock = HAL_UNLOCKED;
 80018d0:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
}
 80018d4:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d6:	639c      	str	r4, [r3, #56]	; 0x38
}
 80018d8:	bc30      	pop	{r4, r5}
 80018da:	4770      	bx	lr
 80018dc:	40020000 	.word	0x40020000
 80018e0:	bffdfff8 	.word	0xbffdfff8
 80018e4:	cccccccd 	.word	0xcccccccd

080018e8 <HAL_GPIO_Init>:
{
 80018e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	680e      	ldr	r6, [r1, #0]
{
 80018ee:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	f000 80b2 	beq.w	8001a5a <HAL_GPIO_Init+0x172>
 80018f6:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f8:	4f74      	ldr	r7, [pc, #464]	; (8001acc <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80018fa:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80018fc:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fe:	4d74      	ldr	r5, [pc, #464]	; (8001ad0 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8001900:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001ad4 <HAL_GPIO_Init+0x1ec>
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x2c>
	position++;
 8001906:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	fa36 f403 	lsrs.w	r4, r6, r3
 800190c:	f102 0204 	add.w	r2, r2, #4
 8001910:	f000 80a3 	beq.w	8001a5a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 8001914:	2401      	movs	r4, #1
 8001916:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001918:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001920:	d1f1      	bne.n	8001906 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001922:	684e      	ldr	r6, [r1, #4]
 8001924:	2e12      	cmp	r6, #18
 8001926:	f200 809b 	bhi.w	8001a60 <HAL_GPIO_Init+0x178>
 800192a:	2e12      	cmp	r6, #18
 800192c:	d81a      	bhi.n	8001964 <HAL_GPIO_Init+0x7c>
 800192e:	e8df f006 	tbb	[pc, r6]
 8001932:	baa4      	.short	0xbaa4
 8001934:	1919c3b6 	.word	0x1919c3b6
 8001938:	19191919 	.word	0x19191919
 800193c:	19191919 	.word	0x19191919
 8001940:	ae191919 	.word	0xae191919
 8001944:	b2          	.byte	0xb2
 8001945:	00          	.byte	0x00
 8001946:	f8df e190 	ldr.w	lr, [pc, #400]	; 8001ad8 <HAL_GPIO_Init+0x1f0>
 800194a:	4576      	cmp	r6, lr
 800194c:	f000 8095 	beq.w	8001a7a <HAL_GPIO_Init+0x192>
 8001950:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001954:	4576      	cmp	r6, lr
 8001956:	f000 8090 	beq.w	8001a7a <HAL_GPIO_Init+0x192>
 800195a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800195e:	4576      	cmp	r6, lr
 8001960:	f000 808b 	beq.w	8001a7a <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001968:	bf9c      	itt	ls
 800196a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800196c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800196e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001972:	bf84      	itt	hi
 8001974:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	f8de 4000 	ldr.w	r4, [lr]
 8001980:	fa0a f90b 	lsl.w	r9, sl, fp
 8001984:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001988:	ea24 040b 	bic.w	r4, r4, fp
 800198c:	ea44 0409 	orr.w	r4, r4, r9
 8001990:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001994:	684c      	ldr	r4, [r1, #4]
 8001996:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800199a:	d076      	beq.n	8001a8a <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800199c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a0:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a4:	f04e 0e01 	orr.w	lr, lr, #1
 80019a8:	f8c7 e018 	str.w	lr, [r7, #24]
 80019ac:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	f00e 0e01 	and.w	lr, lr, #1
 80019b8:	f8cd e004 	str.w	lr, [sp, #4]
 80019bc:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	f023 0e03 	bic.w	lr, r3, #3
 80019c4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80019c8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80019cc:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d0:	fa06 f609 	lsl.w	r6, r6, r9
 80019d4:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d8:	4e40      	ldr	r6, [pc, #256]	; (8001adc <HAL_GPIO_Init+0x1f4>)
 80019da:	42b0      	cmp	r0, r6
 80019dc:	d068      	beq.n	8001ab0 <HAL_GPIO_Init+0x1c8>
 80019de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019e2:	42b0      	cmp	r0, r6
 80019e4:	d066      	beq.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 80019e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019ea:	42b0      	cmp	r0, r6
 80019ec:	d05e      	beq.n	8001aac <HAL_GPIO_Init+0x1c4>
 80019ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019f2:	42b0      	cmp	r0, r6
 80019f4:	bf0c      	ite	eq
 80019f6:	2603      	moveq	r6, #3
 80019f8:	2604      	movne	r6, #4
 80019fa:	fa06 f609 	lsl.w	r6, r6, r9
 80019fe:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001a06:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	bf14      	ite	ne
 8001a0e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a12:	ea26 060c 	biceq.w	r6, r6, ip
 8001a16:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001a18:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1e:	bf14      	ite	ne
 8001a20:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a24:	ea26 060c 	biceq.w	r6, r6, ip
 8001a28:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a2a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a30:	bf14      	ite	ne
 8001a32:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a36:	ea26 060c 	biceq.w	r6, r6, ip
 8001a3a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a40:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a42:	d01f      	beq.n	8001a84 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a44:	ea44 040c 	orr.w	r4, r4, ip
 8001a48:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	680e      	ldr	r6, [r1, #0]
	position++;
 8001a4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001a52:	f102 0204 	add.w	r2, r2, #4
 8001a56:	f47f af5d 	bne.w	8001914 <HAL_GPIO_Init+0x2c>
}
 8001a5a:	b003      	add	sp, #12
 8001a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001a60:	4546      	cmp	r6, r8
 8001a62:	d00a      	beq.n	8001a7a <HAL_GPIO_Init+0x192>
 8001a64:	f67f af6f 	bls.w	8001946 <HAL_GPIO_Init+0x5e>
 8001a68:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001ae0 <HAL_GPIO_Init+0x1f8>
 8001a6c:	4576      	cmp	r6, lr
 8001a6e:	d004      	beq.n	8001a7a <HAL_GPIO_Init+0x192>
 8001a70:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001a74:	4576      	cmp	r6, lr
 8001a76:	f47f af75 	bne.w	8001964 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	688e      	ldr	r6, [r1, #8]
 8001a7c:	b9fe      	cbnz	r6, 8001abe <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7e:	f04f 0a04 	mov.w	sl, #4
 8001a82:	e76f      	b.n	8001964 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a84:	ea24 040c 	bic.w	r4, r4, ip
 8001a88:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	680e      	ldr	r6, [r1, #0]
 8001a8c:	e73b      	b.n	8001906 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a8e:	68cc      	ldr	r4, [r1, #12]
 8001a90:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001a94:	e766      	b.n	8001964 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a96:	68cc      	ldr	r4, [r1, #12]
 8001a98:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001a9c:	e762      	b.n	8001964 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9e:	68cc      	ldr	r4, [r1, #12]
 8001aa0:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001aa4:	e75e      	b.n	8001964 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001aaa:	e75b      	b.n	8001964 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	2602      	movs	r6, #2
 8001aae:	e7a4      	b.n	80019fa <HAL_GPIO_Init+0x112>
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	e7a2      	b.n	80019fa <HAL_GPIO_Init+0x112>
 8001ab4:	2601      	movs	r6, #1
 8001ab6:	e7a0      	b.n	80019fa <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001ab8:	f04f 0a00 	mov.w	sl, #0
 8001abc:	e752      	b.n	8001964 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001abe:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001ac4:	bf0c      	ite	eq
 8001ac6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001ac8:	6144      	strne	r4, [r0, #20]
 8001aca:	e74b      	b.n	8001964 <HAL_GPIO_Init+0x7c>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010400 	.word	0x40010400
 8001ad4:	10220000 	.word	0x10220000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	40010800 	.word	0x40010800
 8001ae0:	10310000 	.word	0x10310000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4905      	ldr	r1, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001aec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001af0:	5ccb      	ldrb	r3, [r1, r3]
 8001af2:	6810      	ldr	r0, [r2, #0]
}
 8001af4:	40d8      	lsrs	r0, r3
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	20000000 	.word	0x20000000
 8001b00:	0800de80 	.word	0x0800de80

08001b04 <UART_DMATransmitCplt>:
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b04:	6803      	ldr	r3, [r0, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f013 0320 	ands.w	r3, r3, #32
 8001b0c:	d10a      	bne.n	8001b24 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b0e:	6a41      	ldr	r1, [r0, #36]	; 0x24
  {
    huart->TxXferCount = 0x00U;

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b10:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 8001b12:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b14:	6953      	ldr	r3, [r2, #20]
 8001b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1a:	6153      	str	r3, [r2, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b1c:	68d3      	ldr	r3, [r2, #12]
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b22:	60d3      	str	r3, [r2, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001b32:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8001b36:	2921      	cmp	r1, #33	; 0x21
 8001b38:	d009      	beq.n	8001b4e <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b3a:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001b3c:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001b40:	2922      	cmp	r1, #34	; 0x22
 8001b42:	d014      	beq.n	8001b6e <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b46:	f042 0210 	orr.w	r2, r2, #16
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b4c:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001b4e:	0600      	lsls	r0, r0, #24
 8001b50:	d5f3      	bpl.n	8001b3a <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 8001b52:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b54:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001b56:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001b58:	68d1      	ldr	r1, [r2, #12]
 8001b5a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001b5e:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001b60:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b64:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001b66:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001b6a:	2922      	cmp	r1, #34	; 0x22
 8001b6c:	d1ea      	bne.n	8001b44 <UART_DMAError+0x18>
 8001b6e:	0641      	lsls	r1, r0, #25
 8001b70:	d5e8      	bpl.n	8001b44 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 8001b72:	2100      	movs	r1, #0
 8001b74:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b76:	68d1      	ldr	r1, [r2, #12]
 8001b78:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001b7c:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b7e:	6951      	ldr	r1, [r2, #20]
 8001b80:	f021 0101 	bic.w	r1, r1, #1
 8001b84:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b88:	2901      	cmp	r1, #1
 8001b8a:	d103      	bne.n	8001b94 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b8c:	68d1      	ldr	r1, [r2, #12]
 8001b8e:	f021 0110 	bic.w	r1, r1, #16
 8001b92:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b94:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001b96:	2120      	movs	r1, #32
 8001b98:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba0:	f042 0210 	orr.w	r2, r2, #16
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ba6:	4770      	bx	lr

08001ba8 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  huart->RxXferCount = 0x00U;
 8001ba8:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001baa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001bac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001bae:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <HAL_RCC_OscConfig.constprop.0>:
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4a91      	ldr	r2, [pc, #580]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001bb6:	b470      	push	{r4, r5, r6}
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001bba:	b083      	sub	sp, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	f000 80ee 	beq.w	8001da2 <HAL_RCC_OscConfig.constprop.0+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc6:	6853      	ldr	r3, [r2, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f000 80e4 	beq.w	8001d9a <HAL_RCC_OscConfig.constprop.0+0x1e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	498a      	ldr	r1, [pc, #552]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
  return uwTick;
 8001bd4:	4b8a      	ldr	r3, [pc, #552]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001bd6:	680a      	ldr	r2, [r1, #0]
 8001bd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bdc:	600a      	str	r2, [r1, #0]
 8001bde:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be0:	e003      	b.n	8001bea <HAL_RCC_OscConfig.constprop.0+0x36>
 8001be2:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	1b12      	subs	r2, r2, r4
 8001be6:	2a64      	cmp	r2, #100	; 0x64
 8001be8:	d87a      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	680a      	ldr	r2, [r1, #0]
 8001bec:	0395      	lsls	r5, r2, #14
 8001bee:	d5f8      	bpl.n	8001be2 <HAL_RCC_OscConfig.constprop.0+0x2e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf0:	6803      	ldr	r3, [r0, #0]
 8001bf2:	0799      	lsls	r1, r3, #30
 8001bf4:	d525      	bpl.n	8001c42 <HAL_RCC_OscConfig.constprop.0+0x8e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	f012 0f0c 	tst.w	r2, #12
 8001bfe:	f000 80a6 	beq.w	8001d4e <HAL_RCC_OscConfig.constprop.0+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	f002 020c 	and.w	r2, r2, #12
 8001c08:	2a08      	cmp	r2, #8
 8001c0a:	f000 809c 	beq.w	8001d46 <HAL_RCC_OscConfig.constprop.0+0x192>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	6902      	ldr	r2, [r0, #16]
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	f000 80ea 	beq.w	8001dea <HAL_RCC_OscConfig.constprop.0+0x236>
        __HAL_RCC_HSI_ENABLE();
 8001c16:	2401      	movs	r4, #1
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001c1a:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c1c:	6014      	str	r4, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4977      	ldr	r1, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	e003      	b.n	8001c2c <HAL_RCC_OscConfig.constprop.0+0x78>
 8001c24:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	1b12      	subs	r2, r2, r4
 8001c28:	2a02      	cmp	r2, #2
 8001c2a:	d859      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	680a      	ldr	r2, [r1, #0]
 8001c2e:	0796      	lsls	r6, r2, #30
 8001c30:	d5f8      	bpl.n	8001c24 <HAL_RCC_OscConfig.constprop.0+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	680b      	ldr	r3, [r1, #0]
 8001c34:	6942      	ldr	r2, [r0, #20]
 8001c36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	071a      	lsls	r2, r3, #28
 8001c44:	d520      	bpl.n	8001c88 <HAL_RCC_OscConfig.constprop.0+0xd4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c46:	6982      	ldr	r2, [r0, #24]
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	f000 8089 	beq.w	8001d60 <HAL_RCC_OscConfig.constprop.0+0x1ac>
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	2401      	movs	r4, #1
 8001c50:	4a6c      	ldr	r2, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001c52:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c54:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c58:	4968      	ldr	r1, [pc, #416]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c5a:	681c      	ldr	r4, [r3, #0]
 8001c5c:	e003      	b.n	8001c66 <HAL_RCC_OscConfig.constprop.0+0xb2>
 8001c5e:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	1b12      	subs	r2, r2, r4
 8001c62:	2a02      	cmp	r2, #2
 8001c64:	d83c      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c68:	0795      	lsls	r5, r2, #30
 8001c6a:	d5f8      	bpl.n	8001c5e <HAL_RCC_OscConfig.constprop.0+0xaa>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig.constprop.0+0x254>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c78:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001c7a:	bf00      	nop
  }
  while (Delay --);
 8001c7c:	9b01      	ldr	r3, [sp, #4]
 8001c7e:	1e5a      	subs	r2, r3, #1
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <HAL_RCC_OscConfig.constprop.0+0xc6>
 8001c86:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	075e      	lsls	r6, r3, #29
 8001c8a:	d541      	bpl.n	8001d10 <HAL_RCC_OscConfig.constprop.0+0x15c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	00d6      	lsls	r6, r2, #3
 8001c92:	d577      	bpl.n	8001d84 <HAL_RCC_OscConfig.constprop.0+0x1d0>
    FlagStatus       pwrclkchanged = RESET;
 8001c94:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	495d      	ldr	r1, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig.constprop.0+0x258>)
 8001c98:	680b      	ldr	r3, [r1, #0]
 8001c9a:	05dd      	lsls	r5, r3, #23
 8001c9c:	d513      	bpl.n	8001cc6 <HAL_RCC_OscConfig.constprop.0+0x112>
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	68c2      	ldr	r2, [r0, #12]
 8001ca2:	2a01      	cmp	r2, #1
 8001ca4:	d020      	beq.n	8001ce8 <HAL_RCC_OscConfig.constprop.0+0x134>
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	f000 8088 	beq.w	8001dbc <HAL_RCC_OscConfig.constprop.0+0x208>
 8001cac:	2a05      	cmp	r2, #5
 8001cae:	4a53      	ldr	r2, [pc, #332]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001cb0:	6a11      	ldr	r1, [r2, #32]
 8001cb2:	f000 80cb 	beq.w	8001e4c <HAL_RCC_OscConfig.constprop.0+0x298>
 8001cb6:	f021 0101 	bic.w	r1, r1, #1
 8001cba:	6211      	str	r1, [r2, #32]
 8001cbc:	6a11      	ldr	r1, [r2, #32]
 8001cbe:	f021 0104 	bic.w	r1, r1, #4
 8001cc2:	6211      	str	r1, [r2, #32]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig.constprop.0+0x13e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	680a      	ldr	r2, [r1, #0]
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cce:	600a      	str	r2, [r1, #0]
 8001cd0:	681d      	ldr	r5, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	680a      	ldr	r2, [r1, #0]
 8001cd4:	05d2      	lsls	r2, r2, #23
 8001cd6:	d4e3      	bmi.n	8001ca0 <HAL_RCC_OscConfig.constprop.0+0xec>
 8001cd8:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	1b52      	subs	r2, r2, r5
 8001cdc:	2a64      	cmp	r2, #100	; 0x64
 8001cde:	d9f8      	bls.n	8001cd2 <HAL_RCC_OscConfig.constprop.0+0x11e>
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
}
 8001ce2:	b003      	add	sp, #12
 8001ce4:	bc70      	pop	{r4, r5, r6}
 8001ce6:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce8:	4944      	ldr	r1, [pc, #272]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001cea:	6a0a      	ldr	r2, [r1, #32]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	620a      	str	r2, [r1, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f241 3c88 	movw	ip, #5000	; 0x1388
 8001cf6:	681d      	ldr	r5, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4940      	ldr	r1, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001cfa:	e003      	b.n	8001d04 <HAL_RCC_OscConfig.constprop.0+0x150>
 8001cfc:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	1b52      	subs	r2, r2, r5
 8001d00:	4562      	cmp	r2, ip
 8001d02:	d8ed      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	6a0a      	ldr	r2, [r1, #32]
 8001d06:	0796      	lsls	r6, r2, #30
 8001d08:	d5f8      	bpl.n	8001cfc <HAL_RCC_OscConfig.constprop.0+0x148>
    if (pwrclkchanged == SET)
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	f040 8098 	bne.w	8001e40 <HAL_RCC_OscConfig.constprop.0+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	69c3      	ldr	r3, [r0, #28]
 8001d12:	b1b3      	cbz	r3, 8001d42 <HAL_RCC_OscConfig.constprop.0+0x18e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	4939      	ldr	r1, [pc, #228]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d16:	684a      	ldr	r2, [r1, #4]
 8001d18:	f002 020c 	and.w	r2, r2, #12
 8001d1c:	2a08      	cmp	r2, #8
 8001d1e:	f000 8081 	beq.w	8001e24 <HAL_RCC_OscConfig.constprop.0+0x270>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	f000 809c 	beq.w	8001e60 <HAL_RCC_OscConfig.constprop.0+0x2ac>
        __HAL_RCC_PLL_DISABLE();
 8001d28:	2000      	movs	r0, #0
 8001d2a:	4a36      	ldr	r2, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d2e:	6610      	str	r0, [r2, #96]	; 0x60
 8001d30:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	e003      	b.n	8001d3c <HAL_RCC_OscConfig.constprop.0+0x188>
 8001d34:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	1a12      	subs	r2, r2, r0
 8001d38:	2a02      	cmp	r2, #2
 8001d3a:	d8d1      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	680a      	ldr	r2, [r1, #0]
 8001d3e:	0192      	lsls	r2, r2, #6
 8001d40:	d4f8      	bmi.n	8001d34 <HAL_RCC_OscConfig.constprop.0+0x180>
  return HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7cd      	b.n	8001ce2 <HAL_RCC_OscConfig.constprop.0+0x12e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	03da      	lsls	r2, r3, #15
 8001d4a:	f53f af60 	bmi.w	8001c0e <HAL_RCC_OscConfig.constprop.0+0x5a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	079b      	lsls	r3, r3, #30
 8001d54:	d528      	bpl.n	8001da8 <HAL_RCC_OscConfig.constprop.0+0x1f4>
 8001d56:	6903      	ldr	r3, [r0, #16]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d025      	beq.n	8001da8 <HAL_RCC_OscConfig.constprop.0+0x1f4>
          return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e7c0      	b.n	8001ce2 <HAL_RCC_OscConfig.constprop.0+0x12e>
      __HAL_RCC_LSI_DISABLE();
 8001d60:	4928      	ldr	r1, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d64:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001d6c:	681c      	ldr	r4, [r3, #0]
 8001d6e:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001d72:	e003      	b.n	8001d7c <HAL_RCC_OscConfig.constprop.0+0x1c8>
 8001d74:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	1b12      	subs	r2, r2, r4
 8001d78:	2a02      	cmp	r2, #2
 8001d7a:	d8b1      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d7e:	0792      	lsls	r2, r2, #30
 8001d80:	d4f8      	bmi.n	8001d74 <HAL_RCC_OscConfig.constprop.0+0x1c0>
 8001d82:	e780      	b.n	8001c86 <HAL_RCC_OscConfig.constprop.0+0xd2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001d86:	2401      	movs	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d8c:	61da      	str	r2, [r3, #28]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	9b00      	ldr	r3, [sp, #0]
 8001d98:	e77d      	b.n	8001c96 <HAL_RCC_OscConfig.constprop.0+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9a:	6853      	ldr	r3, [r2, #4]
 8001d9c:	03de      	lsls	r6, r3, #15
 8001d9e:	f57f af18 	bpl.w	8001bd2 <HAL_RCC_OscConfig.constprop.0+0x1e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e723      	b.n	8001bf0 <HAL_RCC_OscConfig.constprop.0+0x3c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001daa:	6941      	ldr	r1, [r0, #20]
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001db2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	6803      	ldr	r3, [r0, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e742      	b.n	8001c42 <HAL_RCC_OscConfig.constprop.0+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <HAL_RCC_OscConfig.constprop.0+0x248>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	6a0a      	ldr	r2, [r1, #32]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	620a      	str	r2, [r1, #32]
 8001dca:	6a0a      	ldr	r2, [r1, #32]
 8001dcc:	f022 0204 	bic.w	r2, r2, #4
 8001dd0:	620a      	str	r2, [r1, #32]
 8001dd2:	681e      	ldr	r6, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	e003      	b.n	8001dde <HAL_RCC_OscConfig.constprop.0+0x22a>
 8001dd6:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	1b92      	subs	r2, r2, r6
 8001dda:	42aa      	cmp	r2, r5
 8001ddc:	d880      	bhi.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	6a0a      	ldr	r2, [r1, #32]
 8001de0:	0792      	lsls	r2, r2, #30
 8001de2:	d4f8      	bmi.n	8001dd6 <HAL_RCC_OscConfig.constprop.0+0x222>
    if (pwrclkchanged == SET)
 8001de4:	2c00      	cmp	r4, #0
 8001de6:	d093      	beq.n	8001d10 <HAL_RCC_OscConfig.constprop.0+0x15c>
 8001de8:	e02a      	b.n	8001e40 <HAL_RCC_OscConfig.constprop.0+0x28c>
        __HAL_RCC_HSI_DISABLE();
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001dee:	600a      	str	r2, [r1, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df0:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001dfa:	e00e      	b.n	8001e1a <HAL_RCC_OscConfig.constprop.0+0x266>
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	20000200 	.word	0x20000200
 8001e04:	42420000 	.word	0x42420000
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	1b12      	subs	r2, r2, r4
 8001e14:	2a02      	cmp	r2, #2
 8001e16:	f63f af63 	bhi.w	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	680a      	ldr	r2, [r1, #0]
 8001e1c:	0795      	lsls	r5, r2, #30
 8001e1e:	d4f7      	bmi.n	8001e10 <HAL_RCC_OscConfig.constprop.0+0x25c>
 8001e20:	6803      	ldr	r3, [r0, #0]
 8001e22:	e70e      	b.n	8001c42 <HAL_RCC_OscConfig.constprop.0+0x8e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d019      	beq.n	8001e5c <HAL_RCC_OscConfig.constprop.0+0x2a8>
        pll_config = RCC->CFGR;
 8001e28:	684b      	ldr	r3, [r1, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	6a02      	ldr	r2, [r0, #32]
 8001e2c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001e30:	4291      	cmp	r1, r2
 8001e32:	d193      	bne.n	8001d5c <HAL_RCC_OscConfig.constprop.0+0x1a8>
 8001e34:	6a42      	ldr	r2, [r0, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e36:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d081      	beq.n	8001d42 <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001e3e:	e78d      	b.n	8001d5c <HAL_RCC_OscConfig.constprop.0+0x1a8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e40:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001e42:	69d3      	ldr	r3, [r2, #28]
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	e761      	b.n	8001d10 <HAL_RCC_OscConfig.constprop.0+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	f041 0104 	orr.w	r1, r1, #4
 8001e50:	6211      	str	r1, [r2, #32]
 8001e52:	6a11      	ldr	r1, [r2, #32]
 8001e54:	f041 0101 	orr.w	r1, r1, #1
 8001e58:	6211      	str	r1, [r2, #32]
 8001e5a:	e74a      	b.n	8001cf2 <HAL_RCC_OscConfig.constprop.0+0x13e>
        return HAL_ERROR;
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	e740      	b.n	8001ce2 <HAL_RCC_OscConfig.constprop.0+0x12e>
        __HAL_RCC_PLL_DISABLE();
 8001e60:	2400      	movs	r4, #0
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_RCC_OscConfig.constprop.0+0x30c>)
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig.constprop.0+0x310>)
 8001e66:	6614      	str	r4, [r2, #96]	; 0x60
 8001e68:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e004      	b.n	8001e76 <HAL_RCC_OscConfig.constprop.0+0x2c2>
 8001e6c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	1b12      	subs	r2, r2, r4
 8001e70:	2a02      	cmp	r2, #2
 8001e72:	f63f af35 	bhi.w	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	680a      	ldr	r2, [r1, #0]
 8001e78:	0195      	lsls	r5, r2, #6
 8001e7a:	d4f7      	bmi.n	8001e6c <HAL_RCC_OscConfig.constprop.0+0x2b8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e7c:	6a02      	ldr	r2, [r0, #32]
 8001e7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig.constprop.0+0x2dc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e84:	684c      	ldr	r4, [r1, #4]
 8001e86:	6885      	ldr	r5, [r0, #8]
 8001e88:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001e8c:	432c      	orrs	r4, r5
 8001e8e:	604c      	str	r4, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e90:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001e94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001e96:	6848      	ldr	r0, [r1, #4]
 8001e98:	4322      	orrs	r2, r4
 8001e9a:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	4c08      	ldr	r4, [pc, #32]	; (8001ec0 <HAL_RCC_OscConfig.constprop.0+0x30c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	604a      	str	r2, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	6625      	str	r5, [r4, #96]	; 0x60
 8001ea6:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e004      	b.n	8001eb4 <HAL_RCC_OscConfig.constprop.0+0x300>
 8001eaa:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	1a12      	subs	r2, r2, r0
 8001eae:	2a02      	cmp	r2, #2
 8001eb0:	f63f af16 	bhi.w	8001ce0 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	680a      	ldr	r2, [r1, #0]
 8001eb6:	0194      	lsls	r4, r2, #6
 8001eb8:	d5f7      	bpl.n	8001eaa <HAL_RCC_OscConfig.constprop.0+0x2f6>
 8001eba:	e742      	b.n	8001d42 <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	42420000 	.word	0x42420000
 8001ec4:	20000200 	.word	0x20000200

08001ec8 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <TIM_Base_SetConfig.constprop.0+0x8c>)
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
 8001eca:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001ece:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	d02b      	beq.n	8001f2a <TIM_Base_SetConfig.constprop.0+0x62>
 8001ed2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ed6:	d015      	beq.n	8001f04 <TIM_Base_SetConfig.constprop.0+0x3c>
 8001ed8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001edc:	4290      	cmp	r0, r2
 8001ede:	d011      	beq.n	8001f04 <TIM_Base_SetConfig.constprop.0+0x3c>
 8001ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee4:	4290      	cmp	r0, r2
 8001ee6:	d00d      	beq.n	8001f04 <TIM_Base_SetConfig.constprop.0+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <TIM_Base_SetConfig.constprop.0+0x90>)
 8001eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eee:	69d4      	ldr	r4, [r2, #28]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	6911      	ldr	r1, [r2, #16]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef2:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef4:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001ef6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef8:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001efa:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 8001f00:	6143      	str	r3, [r0, #20]
}
 8001f02:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f0a:	68d1      	ldr	r1, [r2, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0c:	6954      	ldr	r4, [r2, #20]
    tmpcr1 |= Structure->CounterMode;
 8001f0e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f14:	69d1      	ldr	r1, [r2, #28]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f16:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1c:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f1e:	6911      	ldr	r1, [r2, #16]
  TIMx->PSC = Structure->Prescaler;
 8001f20:	6892      	ldr	r2, [r2, #8]
  TIMx->CR1 = tmpcr1;
 8001f22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f24:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f26:	6282      	str	r2, [r0, #40]	; 0x28
 8001f28:	e7e8      	b.n	8001efc <TIM_Base_SetConfig.constprop.0+0x34>
    tmpcr1 |= Structure->CounterMode;
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f30:	68d4      	ldr	r4, [r2, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	6951      	ldr	r1, [r2, #20]
    tmpcr1 |= Structure->CounterMode;
 8001f34:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	69d1      	ldr	r1, [r2, #28]
 8001f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f42:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001f44:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f46:	6913      	ldr	r3, [r2, #16]
 8001f48:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f4a:	6893      	ldr	r3, [r2, #8]
 8001f4c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001f4e:	6993      	ldr	r3, [r2, #24]
 8001f50:	6303      	str	r3, [r0, #48]	; 0x30
 8001f52:	e7d3      	b.n	8001efc <TIM_Base_SetConfig.constprop.0+0x34>
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	20000200 	.word	0x20000200

08001f5c <HAL_TIM_MspPostInit.constprop.0>:

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	2300      	movs	r3, #0
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001f5e:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001f60:	4912      	ldr	r1, [pc, #72]	; (8001fac <HAL_TIM_MspPostInit.constprop.0+0x50>)
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <HAL_TIM_MspPostInit.constprop.0+0x54>)
 8001f64:	6849      	ldr	r1, [r1, #4]
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001f66:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8001f68:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f6e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_MspPostInit.constprop.0+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f74:	b006      	add	sp, #24
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f78:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001f7c:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f84:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f88:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <HAL_TIM_MspPostInit.constprop.0+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	f042 0204 	orr.w	r2, r2, #4
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f7ff fca0 	bl	80018e8 <HAL_GPIO_Init>
}
 8001fa8:	e7e4      	b.n	8001f74 <HAL_TIM_MspPostInit.constprop.0+0x18>
 8001faa:	bf00      	nop
 8001fac:	20000200 	.word	0x20000200
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc4:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc6:	f1bc 0f04 	cmp.w	ip, #4
 8001fca:	bf28      	it	cs
 8001fcc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd0:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd2:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	bf98      	it	ls
 8001fd8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fda:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	bf88      	it	hi
 8001fe0:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe2:	ea21 0102 	bic.w	r1, r1, r2
 8001fe6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	d008      	beq.n	8001ffe <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	0109      	lsls	r1, r1, #4
 8001fee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ff2:	b2c9      	uxtb	r1, r1
 8001ff4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ff8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001ffc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8002000:	0109      	lsls	r1, r1, #4
 8002002:	b2c9      	uxtb	r1, r1
 8002004:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002014:	b0a7      	sub	sp, #156	; 0x9c
 8002016:	460a      	mov	r2, r1
 8002018:	2301      	movs	r3, #1
 800201a:	9123      	str	r1, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 800201c:	4601      	mov	r1, r0
 800201e:	9318      	str	r3, [sp, #96]	; 0x60
 8002020:	1a13      	subs	r3, r2, r0
	int signX = x1 < x2 ? 1 : -1;
 8002022:	428a      	cmp	r2, r1
 8002024:	bf8c      	ite	hi
 8002026:	2201      	movhi	r2, #1
 8002028:	f04f 32ff 	movls.w	r2, #4294967295
 800202c:	f04f 0c00 	mov.w	ip, #0
	int error = deltaX - deltaY;
 8002030:	f04f 08bf 	mov.w	r8, #191	; 0xbf
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002034:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002038:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
 800203c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8002040:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8002044:	f44f 2680 	mov.w	r6, #262144	; 0x40000
	int signX = x1 < x2 ? 1 : -1;
 8002048:	9225      	str	r2, [sp, #148]	; 0x94
 800204a:	0a0a      	lsrs	r2, r1, #8
 800204c:	920f      	str	r2, [sp, #60]	; 0x3c
 800204e:	0bca      	lsrs	r2, r1, #15
 8002050:	9216      	str	r2, [sp, #88]	; 0x58
 8002052:	0b8a      	lsrs	r2, r1, #14
 8002054:	9215      	str	r2, [sp, #84]	; 0x54
 8002056:	0b4a      	lsrs	r2, r1, #13
 8002058:	9214      	str	r2, [sp, #80]	; 0x50
 800205a:	0b0a      	lsrs	r2, r1, #12
 800205c:	9213      	str	r2, [sp, #76]	; 0x4c
 800205e:	0aca      	lsrs	r2, r1, #11
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002060:	900d      	str	r0, [sp, #52]	; 0x34
 8002062:	9212      	str	r2, [sp, #72]	; 0x48
	int deltaX = abs(x2 - x1);
 8002064:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002068:	0a8a      	lsrs	r2, r1, #10
 800206a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800206e:	9211      	str	r2, [sp, #68]	; 0x44
 8002070:	f001 0301 	and.w	r3, r1, #1
 8002074:	0a4a      	lsrs	r2, r1, #9
 8002076:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
 800207a:	e9cd cc1d 	strd	ip, ip, [sp, #116]	; 0x74
 800207e:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
 8002082:	9210      	str	r2, [sp, #64]	; 0x40
 8002084:	930e      	str	r3, [sp, #56]	; 0x38
 8002086:	b2ca      	uxtb	r2, r1
	int error = deltaX - deltaY;
 8002088:	f1a0 037e 	sub.w	r3, r0, #126	; 0x7e
 800208c:	f8df e30c 	ldr.w	lr, [pc, #780]	; 800239c <LCD_Line.constprop.0+0x38c>
 8002090:	f8df b30c 	ldr.w	fp, [pc, #780]	; 80023a0 <LCD_Line.constprop.0+0x390>
 8002094:	f8df a30c 	ldr.w	sl, [pc, #780]	; 80023a4 <LCD_Line.constprop.0+0x394>
 8002098:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800209c:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80020a0:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 80020a4:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
	int deltaX = abs(x2 - x1);
 80020a8:	9024      	str	r0, [sp, #144]	; 0x90
 80020aa:	9217      	str	r2, [sp, #92]	; 0x5c
	int error = deltaX - deltaY;
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80020b2:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80020b6:	f8ce 4010 	str.w	r4, [lr, #16]
 80020ba:	fa1f f088 	uxth.w	r0, r8
 80020be:	f8ce 9010 	str.w	r9, [lr, #16]
 80020c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020c6:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020cc:	f8cb 4010 	str.w	r4, [fp, #16]
 80020d0:	f8ca 7010 	str.w	r7, [sl, #16]
 80020d4:	f8ca 6010 	str.w	r6, [sl, #16]
 80020d8:	f8ca 5010 	str.w	r5, [sl, #16]
 80020dc:	f8ca 4010 	str.w	r4, [sl, #16]
 80020e0:	f8ca 3010 	str.w	r3, [sl, #16]
 80020e4:	900c      	str	r0, [sp, #48]	; 0x30
 80020e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 80020ec:	f8bd c064 	ldrh.w	ip, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	f8ca 1010 	str.w	r1, [sl, #16]
 80020f4:	f8cb 6010 	str.w	r6, [fp, #16]
 80020f8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020fc:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002100:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002104:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002108:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800210c:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002110:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002114:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002118:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211a:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 800211e:	f8ce 3010 	str.w	r3, [lr, #16]
 8002122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002126:	f8ce 3010 	str.w	r3, [lr, #16]
 800212a:	2301      	movs	r3, #1
 800212c:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002134:	f8ce 9010 	str.w	r9, [lr, #16]
 8002138:	f8cb 5010 	str.w	r5, [fp, #16]
 800213c:	f8cb 4010 	str.w	r4, [fp, #16]
 8002140:	f8ca 7010 	str.w	r7, [sl, #16]
 8002144:	f8ca 6010 	str.w	r6, [sl, #16]
 8002148:	f8ca 5010 	str.w	r5, [sl, #16]
 800214c:	f8ca 4010 	str.w	r4, [sl, #16]
 8002150:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002154:	4643      	mov	r3, r8
 8002156:	f8ca 1010 	str.w	r1, [sl, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 847f 	beq.w	8002a5e <LCD_Line.constprop.0+0xa4e>
    GPIOx->BSRR = GPIO_Pin;
 8002160:	2304      	movs	r3, #4
 8002162:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002166:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002168:	f013 0001 	ands.w	r0, r3, #1
 800216c:	bf1c      	itt	ne
 800216e:	2308      	movne	r3, #8
 8002170:	f8cb 3010 	strne.w	r3, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002174:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002176:	bf08      	it	eq
 8002178:	f8cb 7010 	streq.w	r7, [fp, #16]
 800217c:	f013 0301 	ands.w	r3, r3, #1
 8002180:	9307      	str	r3, [sp, #28]
 8002182:	bf0c      	ite	eq
 8002184:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002188:	2310      	movne	r3, #16
 800218a:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800218e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002190:	f013 0301 	ands.w	r3, r3, #1
 8002194:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002196:	bf0c      	ite	eq
 8002198:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800219c:	2320      	movne	r3, #32
 800219e:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80021a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80021a4:	f013 0301 	ands.w	r3, r3, #1
 80021a8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021aa:	bf0c      	ite	eq
 80021ac:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80021b0:	2340      	movne	r3, #64	; 0x40
 80021b2:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80021b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80021b8:	f013 0301 	ands.w	r3, r3, #1
 80021bc:	9300      	str	r3, [sp, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021be:	bf0c      	ite	eq
 80021c0:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80021c4:	2380      	movne	r3, #128	; 0x80
 80021c6:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80021ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80021cc:	f013 0301 	ands.w	r3, r3, #1
 80021d0:	9302      	str	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d2:	bf0c      	ite	eq
 80021d4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80021d8:	2310      	movne	r3, #16
 80021da:	f8ca 3010 	str.w	r3, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80021de:	f01c 0301 	ands.w	r3, ip, #1
 80021e2:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e4:	bf0c      	ite	eq
 80021e6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	2320      	movne	r3, #32
 80021ec:	f8ca 3010 	str.w	r3, [sl, #16]
 80021f0:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f2:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	f8ce 3010 	str.w	r3, [lr, #16]
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	f8ce 3010 	str.w	r3, [lr, #16]
 8002202:	2301      	movs	r3, #1
 8002204:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800220c:	f8ce 9010 	str.w	r9, [lr, #16]
 8002210:	f8cb 5010 	str.w	r5, [fp, #16]
 8002214:	f8cb 4010 	str.w	r4, [fp, #16]
 8002218:	f8ca 7010 	str.w	r7, [sl, #16]
 800221c:	f8ca 6010 	str.w	r6, [sl, #16]
 8002220:	f8ca 5010 	str.w	r5, [sl, #16]
 8002224:	f8ca 4010 	str.w	r4, [sl, #16]
 8002228:	f8ca 3010 	str.w	r3, [sl, #16]
 800222c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002230:	f8ca 3010 	str.w	r3, [sl, #16]
 8002234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002236:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002238:	09d2      	lsrs	r2, r2, #7
 800223a:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800223c:	bf1c      	itt	ne
 800223e:	2204      	movne	r2, #4
 8002240:	f8cb 2010 	strne.w	r2, [fp, #16]
 8002244:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002248:	bf08      	it	eq
 800224a:	f8cb 6010 	streq.w	r6, [fp, #16]
 800224e:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002250:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002252:	bf4a      	itet	mi
 8002254:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002256:	f8cb 7010 	strpl.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800225a:	f8cb 2010 	strmi.w	r2, [fp, #16]
 800225e:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002262:	0699      	lsls	r1, r3, #26
 8002264:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002266:	bf54      	ite	pl
 8002268:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800226c:	2210      	movmi	r2, #16
 800226e:	f8cb 2010 	str.w	r2, [fp, #16]
 8002272:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002276:	4690      	mov	r8, r2
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002278:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800227a:	bf54      	ite	pl
 800227c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002280:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002282:	0719      	lsls	r1, r3, #28
 8002284:	f8cb 2010 	str.w	r2, [fp, #16]
 8002288:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800228c:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228e:	bf54      	ite	pl
 8002290:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002294:	2240      	movmi	r2, #64	; 0x40
 8002296:	f8cb 2010 	str.w	r2, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800229a:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229c:	bf54      	ite	pl
 800229e:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	2280      	movmi	r2, #128	; 0x80
 80022a4:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80022a8:	f8cb 2010 	str.w	r2, [fp, #16]
 80022ac:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80022b0:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	bf54      	ite	pl
 80022b4:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80022b8:	2310      	movmi	r3, #16
 80022ba:	f8ca 3010 	str.w	r3, [sl, #16]
 80022be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80022c0:	fa1f fc83 	uxth.w	ip, r3
 80022c4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 83c3 	bne.w	8002a54 <LCD_Line.constprop.0+0xa44>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ce:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 80022d2:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022d6:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022da:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022de:	f8ce c010 	str.w	ip, [lr, #16]
 80022e2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80022e6:	f8ce c010 	str.w	ip, [lr, #16]
 80022ea:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	f8ce c010 	str.w	ip, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f6:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80022fa:	f8ce 9010 	str.w	r9, [lr, #16]
 80022fe:	f8cb 5010 	str.w	r5, [fp, #16]
 8002302:	f8cb 4010 	str.w	r4, [fp, #16]
 8002306:	f8ca 7010 	str.w	r7, [sl, #16]
 800230a:	f8ca 6010 	str.w	r6, [sl, #16]
 800230e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002312:	f8ca 4010 	str.w	r4, [sl, #16]
 8002316:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800231a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800231c:	f8ca c010 	str.w	ip, [sl, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8394 	beq.w	8002a4e <LCD_Line.constprop.0+0xa3e>
    GPIOx->BSRR = GPIO_Pin;
 8002326:	f04f 0c04 	mov.w	ip, #4
 800232a:	f8cb c010 	str.w	ip, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800232e:	2800      	cmp	r0, #0
 8002330:	f040 8389 	bne.w	8002a46 <LCD_Line.constprop.0+0xa36>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002334:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002338:	9b07      	ldr	r3, [sp, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 837f 	bne.w	8002a3e <LCD_Line.constprop.0+0xa2e>
 8002340:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002344:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002348:	9b08      	ldr	r3, [sp, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8373 	bne.w	8002a36 <LCD_Line.constprop.0+0xa26>
 8002350:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002354:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8367 	bne.w	8002a2e <LCD_Line.constprop.0+0xa1e>
 8002360:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002364:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002368:	9b00      	ldr	r3, [sp, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 835b 	bne.w	8002a26 <LCD_Line.constprop.0+0xa16>
 8002370:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002374:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002378:	9b02      	ldr	r3, [sp, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 834f 	bne.w	8002a1e <LCD_Line.constprop.0+0xa0e>
 8002380:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002384:	f8ca 0010 	str.w	r0, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002388:	9b03      	ldr	r3, [sp, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 8343 	bne.w	8002a16 <LCD_Line.constprop.0+0xa06>
 8002390:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002394:	f8ca 0010 	str.w	r0, [sl, #16]
 8002398:	e006      	b.n	80023a8 <LCD_Line.constprop.0+0x398>
 800239a:	bf00      	nop
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	40010800 	.word	0x40010800
 80023a4:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 80023a8:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023aa:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	f8ce 0010 	str.w	r0, [lr, #16]
 80023b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023b6:	f8ce 0010 	str.w	r0, [lr, #16]
 80023ba:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80023c0:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023c8:	f8ce 9010 	str.w	r9, [lr, #16]
 80023cc:	f8cb 5010 	str.w	r5, [fp, #16]
 80023d0:	f8cb 4010 	str.w	r4, [fp, #16]
 80023d4:	f8ca 7010 	str.w	r7, [sl, #16]
 80023d8:	f8ca 6010 	str.w	r6, [sl, #16]
 80023dc:	f8ca 5010 	str.w	r5, [sl, #16]
 80023e0:	f8ca 4010 	str.w	r4, [sl, #16]
 80023e4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80023e8:	9b04      	ldr	r3, [sp, #16]
 80023ea:	f8ca 0010 	str.w	r0, [sl, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 830e 	beq.w	8002a10 <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = GPIO_Pin;
 80023f4:	2004      	movs	r0, #4
 80023f6:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80023fa:	9b05      	ldr	r3, [sp, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8303 	bne.w	8002a08 <LCD_Line.constprop.0+0x9f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002402:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002406:	9b06      	ldr	r3, [sp, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 82f9 	bne.w	8002a00 <LCD_Line.constprop.0+0x9f0>
 800240e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002412:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002416:	4643      	mov	r3, r8
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 82ed 	bne.w	80029f8 <LCD_Line.constprop.0+0x9e8>
 800241e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002422:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 82e1 	bne.w	80029f0 <LCD_Line.constprop.0+0x9e0>
 800242e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002432:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002436:	2900      	cmp	r1, #0
 8002438:	f040 82d6 	bne.w	80029e8 <LCD_Line.constprop.0+0x9d8>
 800243c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002440:	f8cb 1010 	str.w	r1, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002444:	2a00      	cmp	r2, #0
 8002446:	f040 82cb 	bne.w	80029e0 <LCD_Line.constprop.0+0x9d0>
 800244a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800244e:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 82bf 	bne.w	80029d8 <LCD_Line.constprop.0+0x9c8>
 800245a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800245e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002462:	2202      	movs	r2, #2
 8002464:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800246c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002470:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
 8002474:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002478:	2110      	movs	r1, #16
 800247a:	f8cd 8000 	str.w	r8, [sp]
	data[0] = y1 >> 8;
 800247e:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8002482:	f8ce 2010 	str.w	r2, [lr, #16]
 8002486:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248a:	f8ce 4010 	str.w	r4, [lr, #16]
 800248e:	f8ce 9010 	str.w	r9, [lr, #16]
 8002492:	f8cb 5010 	str.w	r5, [fp, #16]
 8002496:	f8cb 4010 	str.w	r4, [fp, #16]
 800249a:	f8ca 7010 	str.w	r7, [sl, #16]
 800249e:	f8ca 6010 	str.w	r6, [sl, #16]
 80024a2:	f8ca 5010 	str.w	r5, [sl, #16]
 80024a6:	f8ca 4010 	str.w	r4, [sl, #16]
 80024aa:	f8ca 0010 	str.w	r0, [sl, #16]
 80024ae:	f8ca c010 	str.w	ip, [sl, #16]
 80024b2:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 80024b6:	f8cb 6010 	str.w	r6, [fp, #16]
 80024ba:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024be:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c2:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80024ca:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80024d2:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	f8ca 1010 	str.w	r1, [sl, #16]
 80024da:	2120      	movs	r1, #32
 80024dc:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e0:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024e4:	f8ce 2010 	str.w	r2, [lr, #16]
 80024e8:	f8ce 3010 	str.w	r3, [lr, #16]
 80024ec:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	f8ce 2010 	str.w	r2, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024f6:	f8ce 9010 	str.w	r9, [lr, #16]
 80024fa:	f8cb 5010 	str.w	r5, [fp, #16]
 80024fe:	f8cb 4010 	str.w	r4, [fp, #16]
 8002502:	f8ca 7010 	str.w	r7, [sl, #16]
 8002506:	f8ca 6010 	str.w	r6, [sl, #16]
 800250a:	f8ca 5010 	str.w	r5, [sl, #16]
 800250e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002512:	f8ca 0010 	str.w	r0, [sl, #16]
 8002516:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800251a:	9b00      	ldr	r3, [sp, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8258 	beq.w	80029d2 <LCD_Line.constprop.0+0x9c2>
    GPIOx->BSRR = GPIO_Pin;
 8002522:	2304      	movs	r3, #4
 8002524:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800252a:	f013 0c01 	ands.w	ip, r3, #1
 800252e:	bf1c      	itt	ne
 8002530:	2308      	movne	r3, #8
 8002532:	f8cb 3010 	strne.w	r3, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002536:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002538:	bf08      	it	eq
 800253a:	f8cb 7010 	streq.w	r7, [fp, #16]
 800253e:	f013 0301 	ands.w	r3, r3, #1
 8002542:	930a      	str	r3, [sp, #40]	; 0x28
 8002544:	bf0c      	ite	eq
 8002546:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800254a:	2310      	movne	r3, #16
 800254c:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002552:	f013 0301 	ands.w	r3, r3, #1
 8002556:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002558:	bf0c      	ite	eq
 800255a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800255e:	2320      	movne	r3, #32
 8002560:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002566:	f013 0301 	ands.w	r3, r3, #1
 800256a:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800256c:	bf0c      	ite	eq
 800256e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002572:	2340      	movne	r3, #64	; 0x40
 8002574:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800257a:	f013 0301 	ands.w	r3, r3, #1
 800257e:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002580:	bf0c      	ite	eq
 8002582:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002586:	2380      	movne	r3, #128	; 0x80
 8002588:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800258c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800258e:	f013 0301 	ands.w	r3, r3, #1
 8002592:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002594:	bf0c      	ite	eq
 8002596:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800259a:	2310      	movne	r3, #16
 800259c:	f8ca 3010 	str.w	r3, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80025a0:	f018 0301 	ands.w	r3, r8, #1
 80025a4:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a6:	bf0c      	ite	eq
 80025a8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80025ac:	2320      	movne	r3, #32
 80025ae:	f8ca 3010 	str.w	r3, [sl, #16]
 80025b2:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025b4:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025b8:	f8ce 3010 	str.w	r3, [lr, #16]
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	f8ce 3010 	str.w	r3, [lr, #16]
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025ce:	f8ce 9010 	str.w	r9, [lr, #16]
 80025d2:	f8cb 5010 	str.w	r5, [fp, #16]
 80025d6:	f8cb 4010 	str.w	r4, [fp, #16]
 80025da:	f8ca 7010 	str.w	r7, [sl, #16]
 80025de:	f8ca 6010 	str.w	r6, [sl, #16]
 80025e2:	f8ca 5010 	str.w	r5, [sl, #16]
 80025e6:	f8ca 4010 	str.w	r4, [sl, #16]
 80025ea:	f8ca 3010 	str.w	r3, [sl, #16]
 80025ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f2:	f8ca 3010 	str.w	r3, [sl, #16]
 80025f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80025f8:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025fa:	09d2      	lsrs	r2, r2, #7
 80025fc:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	bf16      	itet	ne
 8002600:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002602:	f8cb 6010 	streq.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002606:	f8cb 2010 	strne.w	r2, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800260a:	0659      	lsls	r1, r3, #25
 800260c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002610:	9203      	str	r2, [sp, #12]
 8002612:	bf44      	itt	mi
 8002614:	2208      	movmi	r2, #8
 8002616:	f8cb 2010 	strmi.w	r2, [fp, #16]
 800261a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800261e:	bf58      	it	pl
 8002620:	f8cb 7010 	strpl.w	r7, [fp, #16]
 8002624:	9202      	str	r2, [sp, #8]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002626:	069a      	lsls	r2, r3, #26
 8002628:	bf54      	ite	pl
 800262a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800262e:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002630:	06d8      	lsls	r0, r3, #27
 8002632:	f8cb 2010 	str.w	r2, [fp, #16]
 8002636:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800263a:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263c:	bf54      	ite	pl
 800263e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002642:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002644:	0719      	lsls	r1, r3, #28
 8002646:	f8cb 2010 	str.w	r2, [fp, #16]
 800264a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800264e:	4690      	mov	r8, r2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002650:	bf54      	ite	pl
 8002652:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002656:	2240      	movmi	r2, #64	; 0x40
 8002658:	f8cb 2010 	str.w	r2, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800265c:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800265e:	bf54      	ite	pl
 8002660:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002664:	2280      	movmi	r2, #128	; 0x80
 8002666:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800266a:	f8cb 2010 	str.w	r2, [fp, #16]
 800266e:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002672:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002674:	bf54      	ite	pl
 8002676:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800267a:	2310      	movmi	r3, #16
 800267c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800267e:	f8ca 3010 	str.w	r3, [sl, #16]
 8002682:	b283      	uxth	r3, r0
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002684:	2800      	cmp	r0, #0
 8002686:	f040 81a0 	bne.w	80029ca <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800268e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002692:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002694:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002698:	f8ce 0010 	str.w	r0, [lr, #16]
 800269c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026a0:	f8ce 0010 	str.w	r0, [lr, #16]
 80026a4:	2001      	movs	r0, #1
 80026a6:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80026ae:	f8ce 9010 	str.w	r9, [lr, #16]
 80026b2:	f8cb 5010 	str.w	r5, [fp, #16]
 80026b6:	f8cb 4010 	str.w	r4, [fp, #16]
 80026ba:	f8ca 7010 	str.w	r7, [sl, #16]
 80026be:	f8ca 6010 	str.w	r6, [sl, #16]
 80026c2:	f8ca 5010 	str.w	r5, [sl, #16]
 80026c6:	f8ca 4010 	str.w	r4, [sl, #16]
 80026ca:	f8ca 0010 	str.w	r0, [sl, #16]
 80026ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026d2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026d6:	9800      	ldr	r0, [sp, #0]
 80026d8:	2800      	cmp	r0, #0
 80026da:	f000 8173 	beq.w	80029c4 <LCD_Line.constprop.0+0x9b4>
    GPIOx->BSRR = GPIO_Pin;
 80026de:	2004      	movs	r0, #4
 80026e0:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026e4:	f1bc 0f00 	cmp.w	ip, #0
 80026e8:	f040 8168 	bne.w	80029bc <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ec:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026f2:	2800      	cmp	r0, #0
 80026f4:	f040 815e 	bne.w	80029b4 <LCD_Line.constprop.0+0x9a4>
 80026f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026fc:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002702:	2800      	cmp	r0, #0
 8002704:	f040 8152 	bne.w	80029ac <LCD_Line.constprop.0+0x99c>
 8002708:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800270c:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002710:	9808      	ldr	r0, [sp, #32]
 8002712:	2800      	cmp	r0, #0
 8002714:	f040 8146 	bne.w	80029a4 <LCD_Line.constprop.0+0x994>
 8002718:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800271c:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002720:	9807      	ldr	r0, [sp, #28]
 8002722:	2800      	cmp	r0, #0
 8002724:	f040 813a 	bne.w	800299c <LCD_Line.constprop.0+0x98c>
 8002728:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800272c:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002730:	9806      	ldr	r0, [sp, #24]
 8002732:	2800      	cmp	r0, #0
 8002734:	f040 812e 	bne.w	8002994 <LCD_Line.constprop.0+0x984>
 8002738:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800273c:	f8ca 0010 	str.w	r0, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002740:	9805      	ldr	r0, [sp, #20]
 8002742:	2800      	cmp	r0, #0
 8002744:	f040 8122 	bne.w	800298c <LCD_Line.constprop.0+0x97c>
 8002748:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800274c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002750:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002752:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002756:	f8ce 0010 	str.w	r0, [lr, #16]
 800275a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800275e:	f8ce 0010 	str.w	r0, [lr, #16]
 8002762:	2001      	movs	r0, #1
 8002764:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002768:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800276c:	f8ce 9010 	str.w	r9, [lr, #16]
 8002770:	f8cb 5010 	str.w	r5, [fp, #16]
 8002774:	f8cb 4010 	str.w	r4, [fp, #16]
 8002778:	f8ca 7010 	str.w	r7, [sl, #16]
 800277c:	f8ca 6010 	str.w	r6, [sl, #16]
 8002780:	f8ca 5010 	str.w	r5, [sl, #16]
 8002784:	f8ca 4010 	str.w	r4, [sl, #16]
 8002788:	f8ca 0010 	str.w	r0, [sl, #16]
 800278c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002790:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002794:	9804      	ldr	r0, [sp, #16]
 8002796:	2800      	cmp	r0, #0
 8002798:	f000 80f5 	beq.w	8002986 <LCD_Line.constprop.0+0x976>
    GPIOx->BSRR = GPIO_Pin;
 800279c:	2004      	movs	r0, #4
 800279e:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027a2:	9803      	ldr	r0, [sp, #12]
 80027a4:	2800      	cmp	r0, #0
 80027a6:	f040 80ea 	bne.w	800297e <LCD_Line.constprop.0+0x96e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027aa:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027ae:	9802      	ldr	r0, [sp, #8]
 80027b0:	2800      	cmp	r0, #0
 80027b2:	f040 80e0 	bne.w	8002976 <LCD_Line.constprop.0+0x966>
 80027b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027ba:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f040 80d4 	bne.w	800296e <LCD_Line.constprop.0+0x95e>
 80027c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027ca:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027ce:	4640      	mov	r0, r8
 80027d0:	2800      	cmp	r0, #0
 80027d2:	f040 80c8 	bne.w	8002966 <LCD_Line.constprop.0+0x956>
 80027d6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80027da:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027de:	2900      	cmp	r1, #0
 80027e0:	f040 80bd 	bne.w	800295e <LCD_Line.constprop.0+0x94e>
 80027e4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80027e8:	f8cb 1010 	str.w	r1, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	f040 80ac 	bne.w	800294a <LCD_Line.constprop.0+0x93a>
 80027f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027f6:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80ab 	bne.w	8002956 <LCD_Line.constprop.0+0x946>
 8002800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002804:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002808:	2002      	movs	r0, #2
 800280a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002812:	f8ce 5010 	str.w	r5, [lr, #16]
 8002816:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800281a:	f8ce 0010 	str.w	r0, [lr, #16]
 800281e:	f8ce 1010 	str.w	r1, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002822:	f8ce 4010 	str.w	r4, [lr, #16]
 8002826:	f8ce 9010 	str.w	r9, [lr, #16]
 800282a:	f8cb 5010 	str.w	r5, [fp, #16]
 800282e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002832:	f8ca 7010 	str.w	r7, [sl, #16]
 8002836:	f8ca 6010 	str.w	r6, [sl, #16]
 800283a:	f8ca 5010 	str.w	r5, [sl, #16]
 800283e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002842:	f8ca 8010 	str.w	r8, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002846:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800284a:	f8ca c010 	str.w	ip, [sl, #16]
 800284e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002852:	f8cb 6010 	str.w	r6, [fp, #16]
 8002856:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800285a:	f8cb 8010 	str.w	r8, [fp, #16]
 800285e:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002862:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002866:	f8cb 8010 	str.w	r8, [fp, #16]
 800286a:	f04f 0880 	mov.w	r8, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002872:	f8cb 8010 	str.w	r8, [fp, #16]
 8002876:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287a:	f8ca 2010 	str.w	r2, [sl, #16]
 800287e:	f8ca 3010 	str.w	r3, [sl, #16]
 8002882:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002886:	f8ce 0010 	str.w	r0, [lr, #16]
 800288a:	f8ce 1010 	str.w	r1, [lr, #16]
 800288e:	f8ce 8010 	str.w	r8, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002892:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002896:	f8ce 9010 	str.w	r9, [lr, #16]
 800289a:	f8cb 5010 	str.w	r5, [fp, #16]
 800289e:	f8cb 4010 	str.w	r4, [fp, #16]
 80028a2:	f8ca 7010 	str.w	r7, [sl, #16]
 80028a6:	f8ca 6010 	str.w	r6, [sl, #16]
 80028aa:	f8ca 5010 	str.w	r5, [sl, #16]
 80028ae:	f8ca 4010 	str.w	r4, [sl, #16]
 80028b2:	f8ca 8010 	str.w	r8, [sl, #16]
 80028b6:	f8ca c010 	str.w	ip, [sl, #16]
 80028ba:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
 80028be:	f8cb 6010 	str.w	r6, [fp, #16]
 80028c2:	f8cb 7010 	str.w	r7, [fp, #16]
 80028c6:	f8cb 2010 	str.w	r2, [fp, #16]
 80028ca:	f8cb 3010 	str.w	r3, [fp, #16]
 80028ce:	f8cb c010 	str.w	ip, [fp, #16]
 80028d2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80028d6:	f8cb c010 	str.w	ip, [fp, #16]
 80028da:	f8ca 2010 	str.w	r2, [sl, #16]
 80028de:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 80028e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80028e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80028e6:	f8ce 5010 	str.w	r5, [lr, #16]
 80028ea:	4293      	cmp	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 80028ec:	f8ce 0010 	str.w	r0, [lr, #16]
 80028f0:	f8ce 1010 	str.w	r1, [lr, #16]
 80028f4:	f000 80f4 	beq.w	8002ae0 <LCD_Line.constprop.0+0xad0>
		error2 = error * 2;
 80028f8:	9901      	ldr	r1, [sp, #4]
 80028fa:	004b      	lsls	r3, r1, #1
		if (error2 > -deltaY)
 80028fc:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8002900:	f2c0 80c7 	blt.w	8002a92 <LCD_Line.constprop.0+0xa82>
			x1 += signX;
 8002904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			error -= deltaY;
 8002906:	397e      	subs	r1, #126	; 0x7e
			x1 += signX;
 8002908:	9825      	ldr	r0, [sp, #148]	; 0x94
			error -= deltaY;
 800290a:	9101      	str	r1, [sp, #4]
		if (error2 < deltaX)
 800290c:	9924      	ldr	r1, [sp, #144]	; 0x90
			x1 += signX;
 800290e:	4402      	add	r2, r0
 8002910:	b292      	uxth	r2, r2
		if (error2 < deltaX)
 8002912:	4299      	cmp	r1, r3
			x1 += signX;
 8002914:	920d      	str	r2, [sp, #52]	; 0x34
		if (error2 < deltaX)
 8002916:	f300 80a6 	bgt.w	8002a66 <LCD_Line.constprop.0+0xa56>
 800291a:	4613      	mov	r3, r2
 800291c:	0a12      	lsrs	r2, r2, #8
 800291e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002920:	0bda      	lsrs	r2, r3, #15
 8002922:	9216      	str	r2, [sp, #88]	; 0x58
 8002924:	0b9a      	lsrs	r2, r3, #14
 8002926:	9215      	str	r2, [sp, #84]	; 0x54
 8002928:	0b5a      	lsrs	r2, r3, #13
 800292a:	9214      	str	r2, [sp, #80]	; 0x50
 800292c:	0b1a      	lsrs	r2, r3, #12
 800292e:	9213      	str	r2, [sp, #76]	; 0x4c
 8002930:	0ada      	lsrs	r2, r3, #11
 8002932:	9212      	str	r2, [sp, #72]	; 0x48
 8002934:	0a9a      	lsrs	r2, r3, #10
 8002936:	9211      	str	r2, [sp, #68]	; 0x44
 8002938:	0a5a      	lsrs	r2, r3, #9
 800293a:	9210      	str	r2, [sp, #64]	; 0x40
 800293c:	b2da      	uxtb	r2, r3
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	9217      	str	r2, [sp, #92]	; 0x5c
 8002944:	930e      	str	r3, [sp, #56]	; 0x38
 8002946:	f7ff bbb2 	b.w	80020ae <LCD_Line.constprop.0+0x9e>
 800294a:	2210      	movs	r2, #16
 800294c:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002950:	2b00      	cmp	r3, #0
 8002952:	f43f af55 	beq.w	8002800 <LCD_Line.constprop.0+0x7f0>
 8002956:	2320      	movs	r3, #32
 8002958:	f8ca 3010 	str.w	r3, [sl, #16]
 800295c:	e754      	b.n	8002808 <LCD_Line.constprop.0+0x7f8>
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	f8cb 1010 	str.w	r1, [fp, #16]
 8002964:	e742      	b.n	80027ec <LCD_Line.constprop.0+0x7dc>
 8002966:	2040      	movs	r0, #64	; 0x40
 8002968:	f8cb 0010 	str.w	r0, [fp, #16]
 800296c:	e737      	b.n	80027de <LCD_Line.constprop.0+0x7ce>
 800296e:	2020      	movs	r0, #32
 8002970:	f8cb 0010 	str.w	r0, [fp, #16]
 8002974:	e72b      	b.n	80027ce <LCD_Line.constprop.0+0x7be>
 8002976:	2010      	movs	r0, #16
 8002978:	f8cb 0010 	str.w	r0, [fp, #16]
 800297c:	e71f      	b.n	80027be <LCD_Line.constprop.0+0x7ae>
 800297e:	2008      	movs	r0, #8
 8002980:	f8cb 0010 	str.w	r0, [fp, #16]
 8002984:	e713      	b.n	80027ae <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002986:	f8cb 6010 	str.w	r6, [fp, #16]
 800298a:	e70a      	b.n	80027a2 <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 800298c:	2020      	movs	r0, #32
 800298e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002992:	e6dd      	b.n	8002750 <LCD_Line.constprop.0+0x740>
 8002994:	2010      	movs	r0, #16
 8002996:	f8ca 0010 	str.w	r0, [sl, #16]
 800299a:	e6d1      	b.n	8002740 <LCD_Line.constprop.0+0x730>
 800299c:	2080      	movs	r0, #128	; 0x80
 800299e:	f8cb 0010 	str.w	r0, [fp, #16]
 80029a2:	e6c5      	b.n	8002730 <LCD_Line.constprop.0+0x720>
 80029a4:	2040      	movs	r0, #64	; 0x40
 80029a6:	f8cb 0010 	str.w	r0, [fp, #16]
 80029aa:	e6b9      	b.n	8002720 <LCD_Line.constprop.0+0x710>
 80029ac:	2020      	movs	r0, #32
 80029ae:	f8cb 0010 	str.w	r0, [fp, #16]
 80029b2:	e6ad      	b.n	8002710 <LCD_Line.constprop.0+0x700>
 80029b4:	2010      	movs	r0, #16
 80029b6:	f8cb 0010 	str.w	r0, [fp, #16]
 80029ba:	e6a1      	b.n	8002700 <LCD_Line.constprop.0+0x6f0>
 80029bc:	2008      	movs	r0, #8
 80029be:	f8cb 0010 	str.w	r0, [fp, #16]
 80029c2:	e695      	b.n	80026f0 <LCD_Line.constprop.0+0x6e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c4:	f8cb 6010 	str.w	r6, [fp, #16]
 80029c8:	e68c      	b.n	80026e4 <LCD_Line.constprop.0+0x6d4>
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	2020      	movs	r0, #32
 80029cc:	f8ca 0010 	str.w	r0, [sl, #16]
 80029d0:	e65f      	b.n	8002692 <LCD_Line.constprop.0+0x682>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d2:	f8cb 6010 	str.w	r6, [fp, #16]
 80029d6:	e5a7      	b.n	8002528 <LCD_Line.constprop.0+0x518>
    GPIOx->BSRR = GPIO_Pin;
 80029d8:	2320      	movs	r3, #32
 80029da:	f8ca 3010 	str.w	r3, [sl, #16]
 80029de:	e540      	b.n	8002462 <LCD_Line.constprop.0+0x452>
 80029e0:	2210      	movs	r2, #16
 80029e2:	f8ca 2010 	str.w	r2, [sl, #16]
 80029e6:	e534      	b.n	8002452 <LCD_Line.constprop.0+0x442>
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	f8cb 1010 	str.w	r1, [fp, #16]
 80029ee:	e529      	b.n	8002444 <LCD_Line.constprop.0+0x434>
 80029f0:	2040      	movs	r0, #64	; 0x40
 80029f2:	f8cb 0010 	str.w	r0, [fp, #16]
 80029f6:	e51e      	b.n	8002436 <LCD_Line.constprop.0+0x426>
 80029f8:	2020      	movs	r0, #32
 80029fa:	f8cb 0010 	str.w	r0, [fp, #16]
 80029fe:	e512      	b.n	8002426 <LCD_Line.constprop.0+0x416>
 8002a00:	2010      	movs	r0, #16
 8002a02:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a06:	e506      	b.n	8002416 <LCD_Line.constprop.0+0x406>
 8002a08:	2008      	movs	r0, #8
 8002a0a:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a0e:	e4fa      	b.n	8002406 <LCD_Line.constprop.0+0x3f6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a10:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a14:	e4f1      	b.n	80023fa <LCD_Line.constprop.0+0x3ea>
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	2020      	movs	r0, #32
 8002a18:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a1c:	e4c4      	b.n	80023a8 <LCD_Line.constprop.0+0x398>
 8002a1e:	2010      	movs	r0, #16
 8002a20:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a24:	e4b0      	b.n	8002388 <LCD_Line.constprop.0+0x378>
 8002a26:	2080      	movs	r0, #128	; 0x80
 8002a28:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a2c:	e4a4      	b.n	8002378 <LCD_Line.constprop.0+0x368>
 8002a2e:	2040      	movs	r0, #64	; 0x40
 8002a30:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a34:	e498      	b.n	8002368 <LCD_Line.constprop.0+0x358>
 8002a36:	2020      	movs	r0, #32
 8002a38:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a3c:	e48c      	b.n	8002358 <LCD_Line.constprop.0+0x348>
 8002a3e:	2010      	movs	r0, #16
 8002a40:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a44:	e480      	b.n	8002348 <LCD_Line.constprop.0+0x338>
 8002a46:	2008      	movs	r0, #8
 8002a48:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a4c:	e474      	b.n	8002338 <LCD_Line.constprop.0+0x328>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4e:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a52:	e46c      	b.n	800232e <LCD_Line.constprop.0+0x31e>
    GPIOx->BSRR = GPIO_Pin;
 8002a54:	f04f 0c20 	mov.w	ip, #32
 8002a58:	f8ca c010 	str.w	ip, [sl, #16]
 8002a5c:	e43b      	b.n	80022d6 <LCD_Line.constprop.0+0x2c6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a5e:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a62:	f7ff bb80 	b.w	8002166 <LCD_Line.constprop.0+0x156>
 8002a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a68:	0a1a      	lsrs	r2, r3, #8
 8002a6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a6c:	0bda      	lsrs	r2, r3, #15
 8002a6e:	9216      	str	r2, [sp, #88]	; 0x58
 8002a70:	0b9a      	lsrs	r2, r3, #14
 8002a72:	9215      	str	r2, [sp, #84]	; 0x54
 8002a74:	0b5a      	lsrs	r2, r3, #13
 8002a76:	9214      	str	r2, [sp, #80]	; 0x50
 8002a78:	0b1a      	lsrs	r2, r3, #12
 8002a7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8002a7c:	0ada      	lsrs	r2, r3, #11
 8002a7e:	9212      	str	r2, [sp, #72]	; 0x48
 8002a80:	0a9a      	lsrs	r2, r3, #10
 8002a82:	9211      	str	r2, [sp, #68]	; 0x44
 8002a84:	0a5a      	lsrs	r2, r3, #9
 8002a86:	9210      	str	r2, [sp, #64]	; 0x40
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8002a90:	930e      	str	r3, [sp, #56]	; 0x38
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
			error += deltaX;
 8002a94:	9a01      	ldr	r2, [sp, #4]
 8002a96:	9924      	ldr	r1, [sp, #144]	; 0x90
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002a98:	3301      	adds	r3, #1
			error += deltaX;
 8002a9a:	440a      	add	r2, r1
 8002a9c:	9201      	str	r2, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	9222      	str	r2, [sp, #136]	; 0x88
 8002aa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002aa6:	9219      	str	r2, [sp, #100]	; 0x64
 8002aa8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002aac:	9220      	str	r2, [sp, #128]	; 0x80
 8002aae:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002ab2:	921f      	str	r2, [sp, #124]	; 0x7c
 8002ab4:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002ab8:	921e      	str	r2, [sp, #120]	; 0x78
 8002aba:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002abe:	921d      	str	r2, [sp, #116]	; 0x74
 8002ac0:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002ac4:	921c      	str	r2, [sp, #112]	; 0x70
 8002ac6:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002aca:	921b      	str	r2, [sp, #108]	; 0x6c
 8002acc:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002ad0:	921a      	str	r2, [sp, #104]	; 0x68
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	9221      	str	r2, [sp, #132]	; 0x84
 8002ada:	9318      	str	r3, [sp, #96]	; 0x60
 8002adc:	f7ff bae7 	b.w	80020ae <LCD_Line.constprop.0+0x9e>
		if (x1 == x2 && y1 == y2)
 8002ae0:	f240 133d 	movw	r3, #317	; 0x13d
 8002ae4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	f47f af06 	bne.w	80028f8 <LCD_Line.constprop.0+0x8e8>
}
 8002aec:	b027      	add	sp, #156	; 0x9c
 8002aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af2:	bf00      	nop

08002af4 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af8:	4686      	mov	lr, r0
 8002afa:	b0bb      	sub	sp, #236	; 0xec
	int deltaX = abs(x2 - x1);
 8002afc:	9202      	str	r2, [sp, #8]
 8002afe:	eba2 020e 	sub.w	r2, r2, lr
 8002b02:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 8002b06:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 8002b0a:	f5c1 729e 	rsb	r2, r1, #316	; 0x13c
 8002b0e:	3201      	adds	r2, #1
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002b10:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 8002b12:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 8002b14:	460d      	mov	r5, r1
 8002b16:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8002b1a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 8002b1e:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 8002b20:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 8002b22:	4572      	cmp	r2, lr
 8002b24:	bf8c      	ite	hi
 8002b26:	2201      	movhi	r2, #1
 8002b28:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8002b2c:	f5b5 7f9e 	cmp.w	r5, #316	; 0x13c
	int signX = x1 < x2 ? 1 : -1;
 8002b30:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8002b32:	bf94      	ite	ls
 8002b34:	2201      	movls	r2, #1
 8002b36:	f04f 32ff 	movhi.w	r2, #4294967295
 8002b3a:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8002b3c:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002b40:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 8002b44:	0152      	lsls	r2, r2, #5
 8002b46:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002b4a:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8002b4e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002b50:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8002b54:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8002b58:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8002b5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b60:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8002b64:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	2602      	movs	r6, #2
 8002b6a:	9103      	str	r1, [sp, #12]
 8002b6c:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8002b70:	9104      	str	r1, [sp, #16]
 8002b72:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8002b76:	9105      	str	r1, [sp, #20]
 8002b78:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8002b7c:	9106      	str	r1, [sp, #24]
 8002b7e:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8002b82:	9107      	str	r1, [sp, #28]
 8002b84:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8002b88:	9108      	str	r1, [sp, #32]
 8002b8a:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8002b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8002b90:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8002b94:	910a      	str	r1, [sp, #40]	; 0x28
 8002b96:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8002b9a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8002b9e:	920c      	str	r2, [sp, #48]	; 0x30
 8002ba0:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8002ba4:	920d      	str	r2, [sp, #52]	; 0x34
 8002ba6:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002baa:	920e      	str	r2, [sp, #56]	; 0x38
 8002bac:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002bb0:	920f      	str	r2, [sp, #60]	; 0x3c
 8002bb2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002bb6:	9210      	str	r2, [sp, #64]	; 0x40
 8002bb8:	0a2a      	lsrs	r2, r5, #8
 8002bba:	9225      	str	r2, [sp, #148]	; 0x94
 8002bbc:	0bea      	lsrs	r2, r5, #15
 8002bbe:	9233      	str	r2, [sp, #204]	; 0xcc
 8002bc0:	0baa      	lsrs	r2, r5, #14
 8002bc2:	9231      	str	r2, [sp, #196]	; 0xc4
 8002bc4:	0b6a      	lsrs	r2, r5, #13
 8002bc6:	922f      	str	r2, [sp, #188]	; 0xbc
 8002bc8:	0b2a      	lsrs	r2, r5, #12
 8002bca:	922d      	str	r2, [sp, #180]	; 0xb4
 8002bcc:	0aea      	lsrs	r2, r5, #11
 8002bce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bd2:	922b      	str	r2, [sp, #172]	; 0xac
 8002bd4:	0aaa      	lsrs	r2, r5, #10
 8002bd6:	9311      	str	r3, [sp, #68]	; 0x44
 8002bd8:	9229      	str	r2, [sp, #164]	; 0xa4
 8002bda:	f005 0301 	and.w	r3, r5, #1
 8002bde:	0a6a      	lsrs	r2, r5, #9
 8002be0:	910b      	str	r1, [sp, #44]	; 0x2c
 8002be2:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 8002be4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002be6:	9323      	str	r3, [sp, #140]	; 0x8c
 8002be8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8002bec:	9324      	str	r3, [sp, #144]	; 0x90
 8002bee:	ea4f 33de 	mov.w	r3, lr, lsr #15
 8002bf2:	9332      	str	r3, [sp, #200]	; 0xc8
 8002bf4:	ea4f 339e 	mov.w	r3, lr, lsr #14
 8002bf8:	9330      	str	r3, [sp, #192]	; 0xc0
 8002bfa:	ea4f 335e 	mov.w	r3, lr, lsr #13
 8002bfe:	932e      	str	r3, [sp, #184]	; 0xb8
 8002c00:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8002c04:	932c      	str	r3, [sp, #176]	; 0xb0
 8002c06:	ea4f 23de 	mov.w	r3, lr, lsr #11
 8002c0a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8002c0c:	932a      	str	r3, [sp, #168]	; 0xa8
 8002c0e:	ea4f 239e 	mov.w	r3, lr, lsr #10
 8002c12:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c14:	ea4f 235e 	mov.w	r3, lr, lsr #9
 8002c18:	1a52      	subs	r2, r2, r1
 8002c1a:	9326      	str	r3, [sp, #152]	; 0x98
 8002c1c:	fa5f f38e 	uxtb.w	r3, lr
 8002c20:	9212      	str	r2, [sp, #72]	; 0x48
 8002c22:	9320      	str	r3, [sp, #128]	; 0x80
 8002c24:	b2ea      	uxtb	r2, r5
 8002c26:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c2a:	f8df a358 	ldr.w	sl, [pc, #856]	; 8002f84 <LCD_Line.constprop.1+0x490>
 8002c2e:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8002f88 <LCD_Line.constprop.1+0x494>
 8002c32:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8002f8c <LCD_Line.constprop.1+0x498>
 8002c36:	9221      	str	r2, [sp, #132]	; 0x84
 8002c38:	9322      	str	r3, [sp, #136]	; 0x88
 8002c3a:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 8002c3e:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8002c42:	f8ca c010 	str.w	ip, [sl, #16]
 8002c46:	f8ca b010 	str.w	fp, [sl, #16]
 8002c4a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c4e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002c52:	f8c8 4010 	str.w	r4, [r8, #16]
 8002c56:	f8c8 7010 	str.w	r7, [r8, #16]
 8002c5a:	f8c8 0010 	str.w	r0, [r8, #16]
 8002c5e:	f8c8 c010 	str.w	ip, [r8, #16]
 8002c62:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002c64:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8002c66:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002c6a:	b2ab      	uxth	r3, r5
 8002c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8002c6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002c72:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c78:	f8c8 e010 	str.w	lr, [r8, #16]
 8002c7c:	f8c8 1010 	str.w	r1, [r8, #16]
 8002c80:	f8c9 7010 	str.w	r7, [r9, #16]
 8002c84:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c88:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8c:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c90:	2340      	movs	r3, #64	; 0x40
 8002c92:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c96:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002c9a:	f8c9 3010 	str.w	r3, [r9, #16]
 8002c9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002ca2:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cae:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	f8ca 6010 	str.w	r6, [sl, #16]
 8002cb6:	f8ca 3010 	str.w	r3, [sl, #16]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc0:	f8ca b010 	str.w	fp, [sl, #16]
 8002cc4:	f8c9 0010 	str.w	r0, [r9, #16]
 8002cc8:	f8c9 c010 	str.w	ip, [r9, #16]
 8002ccc:	f8c8 4010 	str.w	r4, [r8, #16]
 8002cd0:	f8c8 7010 	str.w	r7, [r8, #16]
 8002cd4:	f8c8 0010 	str.w	r0, [r8, #16]
 8002cd8:	f8c8 c010 	str.w	ip, [r8, #16]
 8002cdc:	f8c8 e010 	str.w	lr, [r8, #16]
 8002ce0:	f8c8 1010 	str.w	r1, [r8, #16]
 8002ce4:	2d00      	cmp	r5, #0
 8002ce6:	f000 855f 	beq.w	80037a8 <LCD_Line.constprop.1+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	2304      	movs	r3, #4
 8002cec:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002cf0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002cf2:	f013 0301 	ands.w	r3, r3, #1
 8002cf6:	9316      	str	r3, [sp, #88]	; 0x58
 8002cf8:	bf1c      	itt	ne
 8002cfa:	2308      	movne	r3, #8
 8002cfc:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002d00:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d02:	bf08      	it	eq
 8002d04:	f8c9 4010 	streq.w	r4, [r9, #16]
 8002d08:	f013 0301 	ands.w	r3, r3, #1
 8002d0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8002d0e:	bf0c      	ite	eq
 8002d10:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002d14:	2310      	movne	r3, #16
 8002d16:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002d1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8002d1c:	f013 0301 	ands.w	r3, r3, #1
 8002d20:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d22:	bf0c      	ite	eq
 8002d24:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002d28:	2320      	movne	r3, #32
 8002d2a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002d2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002d30:	f013 0301 	ands.w	r3, r3, #1
 8002d34:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d36:	bf0c      	ite	eq
 8002d38:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002d3c:	2340      	movne	r3, #64	; 0x40
 8002d3e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002d42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002d44:	f013 0301 	ands.w	r3, r3, #1
 8002d48:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4a:	bf0c      	ite	eq
 8002d4c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002d50:	2380      	movne	r3, #128	; 0x80
 8002d52:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002d56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002d58:	f013 0301 	ands.w	r3, r3, #1
 8002d5c:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5e:	bf0c      	ite	eq
 8002d60:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002d64:	2310      	movne	r3, #16
 8002d66:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d6c:	f013 0301 	ands.w	r3, r3, #1
 8002d70:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d72:	bf0c      	ite	eq
 8002d74:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002d78:	2320      	movne	r3, #32
 8002d7a:	f8c8 3010 	str.w	r3, [r8, #16]
 8002d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d82:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	f8ca 6010 	str.w	r6, [sl, #16]
 8002d8a:	f8ca 3010 	str.w	r3, [sl, #16]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d98:	f8ca b010 	str.w	fp, [sl, #16]
 8002d9c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002da0:	f8c9 c010 	str.w	ip, [r9, #16]
 8002da4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002da8:	f8c8 7010 	str.w	r7, [r8, #16]
 8002dac:	f8c8 0010 	str.w	r0, [r8, #16]
 8002db0:	f8c8 c010 	str.w	ip, [r8, #16]
 8002db4:	f8c8 3010 	str.w	r3, [r8, #16]
 8002db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dbc:	f8c8 3010 	str.w	r3, [r8, #16]
 8002dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002dc2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8002dc4:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002dc8:	09db      	lsrs	r3, r3, #7
 8002dca:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8002dcc:	bf16      	itet	ne
 8002dce:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd0:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002dd4:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002dd8:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002ddc:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002de0:	931d      	str	r3, [sp, #116]	; 0x74
 8002de2:	bf16      	itet	ne
 8002de4:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002de6:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002dee:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002df2:	f01e 0f20 	tst.w	lr, #32
 8002df6:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002df8:	bf0c      	ite	eq
 8002dfa:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002e00:	f01e 0f10 	tst.w	lr, #16
 8002e04:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e08:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8002e0c:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e0e:	bf0c      	ite	eq
 8002e10:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002e14:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002e16:	f01e 0f08 	tst.w	lr, #8
 8002e1a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1e:	bf0c      	ite	eq
 8002e20:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002e24:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002e26:	f01e 0f04 	tst.w	lr, #4
 8002e2a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e2e:	bf0c      	ite	eq
 8002e30:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002e34:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002e36:	f01e 0f02 	tst.w	lr, #2
 8002e3a:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8002e3e:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8002e42:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e46:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4a:	bf0c      	ite	eq
 8002e4c:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	f04f 0e10 	movne.w	lr, #16
 8002e54:	f8c8 e010 	str.w	lr, [r8, #16]
 8002e58:	fa1f fe85 	uxth.w	lr, r5
 8002e5c:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	f040 849b 	bne.w	800379c <LCD_Line.constprop.1+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e66:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002e6a:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e6e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002e72:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e76:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	f8ca 6010 	str.w	r6, [sl, #16]
 8002e7e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e82:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e86:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002e8a:	f8ca b010 	str.w	fp, [sl, #16]
 8002e8e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e92:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e96:	f8c8 4010 	str.w	r4, [r8, #16]
 8002e9a:	f8c8 7010 	str.w	r7, [r8, #16]
 8002e9e:	f8c8 0010 	str.w	r0, [r8, #16]
 8002ea2:	f8c8 c010 	str.w	ip, [r8, #16]
 8002ea6:	f8c8 e010 	str.w	lr, [r8, #16]
 8002eaa:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002eae:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002eb0:	f8c8 e010 	str.w	lr, [r8, #16]
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	f000 846d 	beq.w	8003794 <LCD_Line.constprop.1+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	f04f 0e04 	mov.w	lr, #4
 8002ebe:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002ec2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002ec4:	2d00      	cmp	r5, #0
 8002ec6:	f040 845f 	bne.w	8003788 <LCD_Line.constprop.1+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eca:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002ece:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	f040 8453 	bne.w	800377c <LCD_Line.constprop.1+0xc88>
 8002ed6:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002eda:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002ede:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	f040 8445 	bne.w	8003770 <LCD_Line.constprop.1+0xc7c>
 8002ee6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002eea:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002eee:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	f040 8437 	bne.w	8003764 <LCD_Line.constprop.1+0xc70>
 8002ef6:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8002efa:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002efe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	f040 8429 	bne.w	8003758 <LCD_Line.constprop.1+0xc64>
 8002f06:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8002f0a:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002f0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8002f10:	2d00      	cmp	r5, #0
 8002f12:	f040 841b 	bne.w	800374c <LCD_Line.constprop.1+0xc58>
 8002f16:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002f1a:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002f1e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	f040 840d 	bne.w	8003740 <LCD_Line.constprop.1+0xc4c>
 8002f26:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002f2a:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002f32:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f36:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	f8ca 6010 	str.w	r6, [sl, #16]
 8002f3e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f42:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f46:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002f4a:	f8ca b010 	str.w	fp, [sl, #16]
 8002f4e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002f52:	f8c9 c010 	str.w	ip, [r9, #16]
 8002f56:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f5a:	f8c8 7010 	str.w	r7, [r8, #16]
 8002f5e:	f8c8 0010 	str.w	r0, [r8, #16]
 8002f62:	f8c8 c010 	str.w	ip, [r8, #16]
 8002f66:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f6a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002f6e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002f70:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	f000 83e0 	beq.w	800373a <LCD_Line.constprop.1+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8002f7a:	f04f 0e04 	mov.w	lr, #4
 8002f7e:	f8c9 e010 	str.w	lr, [r9, #16]
 8002f82:	e005      	b.n	8002f90 <LCD_Line.constprop.1+0x49c>
 8002f84:	40010c00 	.word	0x40010c00
 8002f88:	40010800 	.word	0x40010800
 8002f8c:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002f90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	f040 83cc 	bne.w	8003730 <LCD_Line.constprop.1+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f98:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002f9c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	f040 83c1 	bne.w	8003726 <LCD_Line.constprop.1+0xc32>
 8002fa4:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002fa8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002fac:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	f040 83b4 	bne.w	800371c <LCD_Line.constprop.1+0xc28>
 8002fb4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002fb8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002fbc:	2900      	cmp	r1, #0
 8002fbe:	f040 83a9 	bne.w	8003714 <LCD_Line.constprop.1+0xc20>
 8002fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fc6:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002fca:	2a00      	cmp	r2, #0
 8002fcc:	f040 839e 	bne.w	800370c <LCD_Line.constprop.1+0xc18>
 8002fd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fd4:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 8393 	bne.w	8003704 <LCD_Line.constprop.1+0xc10>
 8002fde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fe2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002fe6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 8387 	bne.w	80036fc <LCD_Line.constprop.1+0xc08>
 8002fee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ff2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002ffa:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ffc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003000:	f8ca 6010 	str.w	r6, [sl, #16]
 8003004:	f8ca 3010 	str.w	r3, [sl, #16]
 8003008:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800300a:	f8ca c010 	str.w	ip, [sl, #16]
 800300e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003012:	f8ca b010 	str.w	fp, [sl, #16]
 8003016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301a:	f8c9 0010 	str.w	r0, [r9, #16]
 800301e:	f8c9 c010 	str.w	ip, [r9, #16]
 8003022:	f8c8 4010 	str.w	r4, [r8, #16]
 8003026:	f8c8 7010 	str.w	r7, [r8, #16]
 800302a:	f8c8 0010 	str.w	r0, [r8, #16]
 800302e:	f8c8 c010 	str.w	ip, [r8, #16]
 8003032:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8003034:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8003036:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800303a:	f8c8 1010 	str.w	r1, [r8, #16]
 800303e:	f8c8 2010 	str.w	r2, [r8, #16]
 8003042:	f8c9 7010 	str.w	r7, [r9, #16]
 8003046:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800304a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800304e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003052:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800305c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003060:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003064:	2310      	movs	r3, #16
 8003066:	f8c8 3010 	str.w	r3, [r8, #16]
 800306a:	2320      	movs	r3, #32
 800306c:	f8c8 3010 	str.w	r3, [r8, #16]
 8003070:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003074:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003078:	f8ca 6010 	str.w	r6, [sl, #16]
 800307c:	f8ca 3010 	str.w	r3, [sl, #16]
 8003080:	2301      	movs	r3, #1
 8003082:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003086:	f8ca b010 	str.w	fp, [sl, #16]
 800308a:	f8c9 0010 	str.w	r0, [r9, #16]
 800308e:	f8c9 c010 	str.w	ip, [r9, #16]
 8003092:	f8c8 4010 	str.w	r4, [r8, #16]
 8003096:	f8c8 7010 	str.w	r7, [r8, #16]
 800309a:	f8c8 0010 	str.w	r0, [r8, #16]
 800309e:	f8c8 c010 	str.w	ip, [r8, #16]
 80030a2:	f8c8 1010 	str.w	r1, [r8, #16]
 80030a6:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80030aa:	2d00      	cmp	r5, #0
 80030ac:	f000 8323 	beq.w	80036f6 <LCD_Line.constprop.1+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 80030b0:	2304      	movs	r3, #4
 80030b2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80030b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80030b8:	f013 0301 	ands.w	r3, r3, #1
 80030bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80030be:	bf1c      	itt	ne
 80030c0:	2308      	movne	r3, #8
 80030c2:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80030c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030c8:	bf08      	it	eq
 80030ca:	f8c9 4010 	streq.w	r4, [r9, #16]
 80030ce:	f013 0301 	ands.w	r3, r3, #1
 80030d2:	931a      	str	r3, [sp, #104]	; 0x68
 80030d4:	bf0c      	ite	eq
 80030d6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80030da:	2310      	movne	r3, #16
 80030dc:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80030e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80030e2:	f013 0301 	ands.w	r3, r3, #1
 80030e6:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030e8:	bf0c      	ite	eq
 80030ea:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	2320      	movne	r3, #32
 80030f0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80030f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80030f6:	f013 0301 	ands.w	r3, r3, #1
 80030fa:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030fc:	bf0c      	ite	eq
 80030fe:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003102:	2340      	movne	r3, #64	; 0x40
 8003104:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003108:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800310a:	f013 0301 	ands.w	r3, r3, #1
 800310e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003110:	bf0c      	ite	eq
 8003112:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003116:	2380      	movne	r3, #128	; 0x80
 8003118:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800311c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800311e:	f013 0301 	ands.w	r3, r3, #1
 8003122:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003124:	bf0c      	ite	eq
 8003126:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800312a:	2310      	movne	r3, #16
 800312c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003130:	f01e 0301 	ands.w	r3, lr, #1
 8003134:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003136:	bf0c      	ite	eq
 8003138:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800313c:	2320      	movne	r3, #32
 800313e:	f8c8 3010 	str.w	r3, [r8, #16]
 8003142:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003146:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800314a:	f8ca 6010 	str.w	r6, [sl, #16]
 800314e:	f8ca 3010 	str.w	r3, [sl, #16]
 8003152:	2301      	movs	r3, #1
 8003154:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800315c:	f8ca b010 	str.w	fp, [sl, #16]
 8003160:	f8c9 0010 	str.w	r0, [r9, #16]
 8003164:	f8c9 c010 	str.w	ip, [r9, #16]
 8003168:	f8c8 4010 	str.w	r4, [r8, #16]
 800316c:	f8c8 7010 	str.w	r7, [r8, #16]
 8003170:	f8c8 0010 	str.w	r0, [r8, #16]
 8003174:	f8c8 c010 	str.w	ip, [r8, #16]
 8003178:	f8c8 3010 	str.w	r3, [r8, #16]
 800317c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003180:	f8c8 3010 	str.w	r3, [r8, #16]
 8003184:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003186:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003188:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800318c:	09db      	lsrs	r3, r3, #7
 800318e:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8003190:	bf16      	itet	ne
 8003192:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003194:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003198:	f8c9 3010 	strne.w	r3, [r9, #16]
 800319c:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80031a0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80031a4:	9314      	str	r3, [sp, #80]	; 0x50
 80031a6:	bf16      	itet	ne
 80031a8:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031aa:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80031ae:	f8c9 3010 	strne.w	r3, [r9, #16]
 80031b2:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80031b6:	f01e 0f20 	tst.w	lr, #32
 80031ba:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031bc:	bf0c      	ite	eq
 80031be:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80031c4:	f01e 0f10 	tst.w	lr, #16
 80031c8:	f8c9 3010 	str.w	r3, [r9, #16]
 80031cc:	f3ce 1300 	ubfx	r3, lr, #4, #1
 80031d0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031d2:	bf0c      	ite	eq
 80031d4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80031d8:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80031da:	f01e 0f08 	tst.w	lr, #8
 80031de:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e2:	bf0c      	ite	eq
 80031e4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80031e8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80031ea:	f01e 0f04 	tst.w	lr, #4
 80031ee:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031f2:	bf0c      	ite	eq
 80031f4:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80031f8:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80031fa:	f01e 0f02 	tst.w	lr, #2
 80031fe:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8003202:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8003206:	f8c9 3010 	str.w	r3, [r9, #16]
 800320a:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320e:	bf0c      	ite	eq
 8003210:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003214:	f04f 0e10 	movne.w	lr, #16
 8003218:	f8c8 e010 	str.w	lr, [r8, #16]
 800321c:	fa1f fe85 	uxth.w	lr, r5
 8003220:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003224:	2d00      	cmp	r5, #0
 8003226:	f040 8261 	bne.w	80036ec <LCD_Line.constprop.1+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800322e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003232:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003236:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800323a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800323e:	f8ca 6010 	str.w	r6, [sl, #16]
 8003242:	f8ca 5010 	str.w	r5, [sl, #16]
 8003246:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800324a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800324e:	f8ca b010 	str.w	fp, [sl, #16]
 8003252:	f8c9 0010 	str.w	r0, [r9, #16]
 8003256:	f8c9 c010 	str.w	ip, [r9, #16]
 800325a:	f8c8 4010 	str.w	r4, [r8, #16]
 800325e:	f8c8 7010 	str.w	r7, [r8, #16]
 8003262:	f8c8 0010 	str.w	r0, [r8, #16]
 8003266:	f8c8 c010 	str.w	ip, [r8, #16]
 800326a:	f8c8 e010 	str.w	lr, [r8, #16]
 800326e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003272:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003274:	f8c8 e010 	str.w	lr, [r8, #16]
 8003278:	2d00      	cmp	r5, #0
 800327a:	f000 8234 	beq.w	80036e6 <LCD_Line.constprop.1+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 800327e:	f04f 0e04 	mov.w	lr, #4
 8003282:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003286:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003288:	2d00      	cmp	r5, #0
 800328a:	f040 8227 	bne.w	80036dc <LCD_Line.constprop.1+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003292:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8003294:	2d00      	cmp	r5, #0
 8003296:	f040 821c 	bne.w	80036d2 <LCD_Line.constprop.1+0xbde>
 800329a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800329e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80032a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	f040 820f 	bne.w	80036c8 <LCD_Line.constprop.1+0xbd4>
 80032aa:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80032ae:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80032b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80032b4:	2d00      	cmp	r5, #0
 80032b6:	f040 8202 	bne.w	80036be <LCD_Line.constprop.1+0xbca>
 80032ba:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 80032be:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80032c2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	f040 81f5 	bne.w	80036b4 <LCD_Line.constprop.1+0xbc0>
 80032ca:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 80032ce:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80032d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	f040 81e8 	bne.w	80036aa <LCD_Line.constprop.1+0xbb6>
 80032da:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80032de:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80032e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80032e4:	2d00      	cmp	r5, #0
 80032e6:	f040 81db 	bne.w	80036a0 <LCD_Line.constprop.1+0xbac>
 80032ea:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80032ee:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80032f6:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032fa:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80032fe:	f8ca 6010 	str.w	r6, [sl, #16]
 8003302:	f8ca 5010 	str.w	r5, [sl, #16]
 8003306:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800330a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800330e:	f8ca b010 	str.w	fp, [sl, #16]
 8003312:	f8c9 0010 	str.w	r0, [r9, #16]
 8003316:	f8c9 c010 	str.w	ip, [r9, #16]
 800331a:	f8c8 4010 	str.w	r4, [r8, #16]
 800331e:	f8c8 7010 	str.w	r7, [r8, #16]
 8003322:	f8c8 0010 	str.w	r0, [r8, #16]
 8003326:	f8c8 c010 	str.w	ip, [r8, #16]
 800332a:	f8c8 e010 	str.w	lr, [r8, #16]
 800332e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003332:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8003334:	f8c8 e010 	str.w	lr, [r8, #16]
 8003338:	2d00      	cmp	r5, #0
 800333a:	f000 81ae 	beq.w	800369a <LCD_Line.constprop.1+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 800333e:	f04f 0e04 	mov.w	lr, #4
 8003342:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003346:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003348:	2d00      	cmp	r5, #0
 800334a:	f040 81a1 	bne.w	8003690 <LCD_Line.constprop.1+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800334e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003352:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003354:	2d00      	cmp	r5, #0
 8003356:	f040 8196 	bne.w	8003686 <LCD_Line.constprop.1+0xb92>
 800335a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800335e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003362:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003364:	2d00      	cmp	r5, #0
 8003366:	f040 8189 	bne.w	800367c <LCD_Line.constprop.1+0xb88>
 800336a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 800336e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003372:	2900      	cmp	r1, #0
 8003374:	f040 817e 	bne.w	8003674 <LCD_Line.constprop.1+0xb80>
 8003378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800337c:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003380:	2a00      	cmp	r2, #0
 8003382:	f040 8173 	bne.w	800366c <LCD_Line.constprop.1+0xb78>
 8003386:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800338a:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 8168 	bne.w	8003664 <LCD_Line.constprop.1+0xb70>
 8003394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003398:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800339c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 815c 	bne.w	800365c <LCD_Line.constprop.1+0xb68>
 80033a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a8:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80033ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033b4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80033b8:	f8ca 6010 	str.w	r6, [sl, #16]
 80033bc:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c0:	f8ca c010 	str.w	ip, [sl, #16]
 80033c4:	f8ca b010 	str.w	fp, [sl, #16]
 80033c8:	f8c9 0010 	str.w	r0, [r9, #16]
 80033cc:	f8c9 c010 	str.w	ip, [r9, #16]
 80033d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80033d4:	f8c8 7010 	str.w	r7, [r8, #16]
 80033d8:	f8c8 0010 	str.w	r0, [r8, #16]
 80033dc:	f8c8 c010 	str.w	ip, [r8, #16]
 80033e0:	f8c8 2010 	str.w	r2, [r8, #16]
 80033e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e8:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80033ec:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ee:	f8c9 7010 	str.w	r7, [r9, #16]
 80033f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f6:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	f8c9 2010 	str.w	r2, [r9, #16]
 80033fe:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003400:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003404:	f8c9 2010 	str.w	r2, [r9, #16]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003412:	f8c8 2010 	str.w	r2, [r8, #16]
 8003416:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800341a:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800341c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003420:	f8ca 6010 	str.w	r6, [sl, #16]
 8003424:	f8ca 1010 	str.w	r1, [sl, #16]
 8003428:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800342c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800342e:	f8ca b010 	str.w	fp, [sl, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 810f 	beq.w	8003656 <LCD_Line.constprop.1+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8003438:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800343c:	9b03      	ldr	r3, [sp, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8106 	beq.w	8003650 <LCD_Line.constprop.1+0xb5c>
 8003444:	2301      	movs	r3, #1
 8003446:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800344a:	9b04      	ldr	r3, [sp, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80fc 	beq.w	800364a <LCD_Line.constprop.1+0xb56>
 8003452:	2308      	movs	r3, #8
 8003454:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8003458:	9b05      	ldr	r3, [sp, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80f2 	beq.w	8003644 <LCD_Line.constprop.1+0xb50>
 8003460:	2304      	movs	r3, #4
 8003462:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8003466:	9b06      	ldr	r3, [sp, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80e8 	beq.w	800363e <LCD_Line.constprop.1+0xb4a>
 800346e:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8003472:	9b07      	ldr	r3, [sp, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80df 	beq.w	8003638 <LCD_Line.constprop.1+0xb44>
 800347a:	2301      	movs	r3, #1
 800347c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8003480:	9b08      	ldr	r3, [sp, #32]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80d3 	beq.w	800362e <LCD_Line.constprop.1+0xb3a>
 8003488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8003490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80c6 	beq.w	8003624 <LCD_Line.constprop.1+0xb30>
 8003498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800349c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80034a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80bb 	beq.w	800361e <LCD_Line.constprop.1+0xb2a>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80034ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80b1 	beq.w	8003618 <LCD_Line.constprop.1+0xb24>
 80034b6:	2308      	movs	r3, #8
 80034b8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80034bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a5 	beq.w	800360e <LCD_Line.constprop.1+0xb1a>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80034ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8099 	beq.w	8003604 <LCD_Line.constprop.1+0xb10>
 80034d2:	2320      	movs	r3, #32
 80034d4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80034d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808d 	beq.w	80035fa <LCD_Line.constprop.1+0xb06>
 80034e0:	2340      	movs	r3, #64	; 0x40
 80034e2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80034e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8081 	beq.w	80035f0 <LCD_Line.constprop.1+0xafc>
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80034f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <LCD_Line.constprop.1+0xaf2>
 80034fa:	2310      	movs	r3, #16
 80034fc:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06a      	beq.n	80035dc <LCD_Line.constprop.1+0xae8>
 8003506:	2320      	movs	r3, #32
 8003508:	f8c8 3010 	str.w	r3, [r8, #16]
 800350c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003510:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003514:	f8ca 6010 	str.w	r6, [sl, #16]
 8003518:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 800351c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003520:	4293      	cmp	r3, r2
 8003522:	f000 8145 	beq.w	80037b0 <LCD_Line.constprop.1+0xcbc>
		if (error2 > -deltaY)
 8003526:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 8003528:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 800352a:	425b      	negs	r3, r3
 800352c:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8003530:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8003534:	da27      	bge.n	8003586 <LCD_Line.constprop.1+0xa92>
			x1 += signX;
 8003536:	9d01      	ldr	r5, [sp, #4]
 8003538:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 800353c:	4475      	add	r5, lr
 800353e:	462b      	mov	r3, r5
			error -= deltaY;
 8003540:	460d      	mov	r5, r1
 8003542:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8003544:	1a69      	subs	r1, r5, r1
 8003546:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8003548:	b299      	uxth	r1, r3
 800354a:	9101      	str	r1, [sp, #4]
 800354c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003550:	9124      	str	r1, [sp, #144]	; 0x90
 8003552:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8003556:	9132      	str	r1, [sp, #200]	; 0xc8
 8003558:	f3c3 3181 	ubfx	r1, r3, #14, #2
 800355c:	9130      	str	r1, [sp, #192]	; 0xc0
 800355e:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8003562:	912e      	str	r1, [sp, #184]	; 0xb8
 8003564:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8003568:	912c      	str	r1, [sp, #176]	; 0xb0
 800356a:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 800356e:	912a      	str	r1, [sp, #168]	; 0xa8
 8003570:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8003574:	9128      	str	r1, [sp, #160]	; 0xa0
 8003576:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800357a:	9126      	str	r1, [sp, #152]	; 0x98
 800357c:	b2d9      	uxtb	r1, r3
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	9120      	str	r1, [sp, #128]	; 0x80
 8003584:	9322      	str	r3, [sp, #136]	; 0x88
		if (error2 < deltaX)
 8003586:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8003588:	4291      	cmp	r1, r2
 800358a:	f77f ab58 	ble.w	8002c3e <LCD_Line.constprop.1+0x14a>
			y1 += signY;
 800358e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003590:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8003592:	4413      	add	r3, r2
			error += deltaX;
 8003594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003596:	440a      	add	r2, r1
 8003598:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 800359a:	b29a      	uxth	r2, r3
 800359c:	9235      	str	r2, [sp, #212]	; 0xd4
 800359e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80035a2:	9225      	str	r2, [sp, #148]	; 0x94
 80035a4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80035a8:	9233      	str	r2, [sp, #204]	; 0xcc
 80035aa:	f3c3 3281 	ubfx	r2, r3, #14, #2
 80035ae:	9231      	str	r2, [sp, #196]	; 0xc4
 80035b0:	f3c3 3242 	ubfx	r2, r3, #13, #3
 80035b4:	922f      	str	r2, [sp, #188]	; 0xbc
 80035b6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80035ba:	922d      	str	r2, [sp, #180]	; 0xb4
 80035bc:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 80035c0:	922b      	str	r2, [sp, #172]	; 0xac
 80035c2:	f3c3 2285 	ubfx	r2, r3, #10, #6
 80035c6:	9229      	str	r2, [sp, #164]	; 0xa4
 80035c8:	f3c3 2246 	ubfx	r2, r3, #9, #7
 80035cc:	9227      	str	r2, [sp, #156]	; 0x9c
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	9221      	str	r2, [sp, #132]	; 0x84
 80035d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80035d8:	f7ff bb31 	b.w	8002c3e <LCD_Line.constprop.1+0x14a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035e0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80035e4:	e792      	b.n	800350c <LCD_Line.constprop.1+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ea:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80035ee:	e787      	b.n	8003500 <LCD_Line.constprop.1+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80035f4:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80035f8:	e77c      	b.n	80034f4 <LCD_Line.constprop.1+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035fe:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003602:	e770      	b.n	80034e6 <LCD_Line.constprop.1+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003608:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800360c:	e764      	b.n	80034d8 <LCD_Line.constprop.1+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800360e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003612:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003616:	e758      	b.n	80034ca <LCD_Line.constprop.1+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003618:	f8c9 4010 	str.w	r4, [r9, #16]
}
 800361c:	e74e      	b.n	80034bc <LCD_Line.constprop.1+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800361e:	f8c9 7010 	str.w	r7, [r9, #16]
}
 8003622:	e744      	b.n	80034ae <LCD_Line.constprop.1+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003628:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800362c:	e738      	b.n	80034a0 <LCD_Line.constprop.1+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800362e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003632:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8003636:	e72b      	b.n	8003490 <LCD_Line.constprop.1+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003638:	f8c8 c010 	str.w	ip, [r8, #16]
}
 800363c:	e720      	b.n	8003480 <LCD_Line.constprop.1+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800363e:	f8c8 0010 	str.w	r0, [r8, #16]
}
 8003642:	e716      	b.n	8003472 <LCD_Line.constprop.1+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003644:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8003648:	e70d      	b.n	8003466 <LCD_Line.constprop.1+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800364a:	f8c8 4010 	str.w	r4, [r8, #16]
}
 800364e:	e703      	b.n	8003458 <LCD_Line.constprop.1+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003650:	f8c9 c010 	str.w	ip, [r9, #16]
}
 8003654:	e6f9      	b.n	800344a <LCD_Line.constprop.1+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003656:	f8c9 0010 	str.w	r0, [r9, #16]
}
 800365a:	e6ef      	b.n	800343c <LCD_Line.constprop.1+0x948>
    GPIOx->BSRR = GPIO_Pin;
 800365c:	2320      	movs	r3, #32
 800365e:	f8c8 3010 	str.w	r3, [r8, #16]
 8003662:	e6a3      	b.n	80033ac <LCD_Line.constprop.1+0x8b8>
 8003664:	2310      	movs	r3, #16
 8003666:	f8c8 3010 	str.w	r3, [r8, #16]
 800366a:	e697      	b.n	800339c <LCD_Line.constprop.1+0x8a8>
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	f8c9 2010 	str.w	r2, [r9, #16]
 8003672:	e68c      	b.n	800338e <LCD_Line.constprop.1+0x89a>
 8003674:	2140      	movs	r1, #64	; 0x40
 8003676:	f8c9 1010 	str.w	r1, [r9, #16]
 800367a:	e681      	b.n	8003380 <LCD_Line.constprop.1+0x88c>
 800367c:	f04f 0e20 	mov.w	lr, #32
 8003680:	f8c9 e010 	str.w	lr, [r9, #16]
 8003684:	e675      	b.n	8003372 <LCD_Line.constprop.1+0x87e>
 8003686:	f04f 0e10 	mov.w	lr, #16
 800368a:	f8c9 e010 	str.w	lr, [r9, #16]
 800368e:	e668      	b.n	8003362 <LCD_Line.constprop.1+0x86e>
 8003690:	f04f 0e08 	mov.w	lr, #8
 8003694:	f8c9 e010 	str.w	lr, [r9, #16]
 8003698:	e65b      	b.n	8003352 <LCD_Line.constprop.1+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800369a:	f8c9 7010 	str.w	r7, [r9, #16]
 800369e:	e652      	b.n	8003346 <LCD_Line.constprop.1+0x852>
    GPIOx->BSRR = GPIO_Pin;
 80036a0:	f04f 0e20 	mov.w	lr, #32
 80036a4:	f8c8 e010 	str.w	lr, [r8, #16]
 80036a8:	e623      	b.n	80032f2 <LCD_Line.constprop.1+0x7fe>
 80036aa:	f04f 0e10 	mov.w	lr, #16
 80036ae:	f8c8 e010 	str.w	lr, [r8, #16]
 80036b2:	e616      	b.n	80032e2 <LCD_Line.constprop.1+0x7ee>
 80036b4:	f04f 0e80 	mov.w	lr, #128	; 0x80
 80036b8:	f8c9 e010 	str.w	lr, [r9, #16]
 80036bc:	e609      	b.n	80032d2 <LCD_Line.constprop.1+0x7de>
 80036be:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80036c2:	f8c9 e010 	str.w	lr, [r9, #16]
 80036c6:	e5fc      	b.n	80032c2 <LCD_Line.constprop.1+0x7ce>
 80036c8:	f04f 0e20 	mov.w	lr, #32
 80036cc:	f8c9 e010 	str.w	lr, [r9, #16]
 80036d0:	e5ef      	b.n	80032b2 <LCD_Line.constprop.1+0x7be>
 80036d2:	f04f 0e10 	mov.w	lr, #16
 80036d6:	f8c9 e010 	str.w	lr, [r9, #16]
 80036da:	e5e2      	b.n	80032a2 <LCD_Line.constprop.1+0x7ae>
 80036dc:	f04f 0e08 	mov.w	lr, #8
 80036e0:	f8c9 e010 	str.w	lr, [r9, #16]
 80036e4:	e5d5      	b.n	8003292 <LCD_Line.constprop.1+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036e6:	f8c9 7010 	str.w	r7, [r9, #16]
 80036ea:	e5cc      	b.n	8003286 <LCD_Line.constprop.1+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80036ec:	f04f 0e20 	mov.w	lr, #32
 80036f0:	f8c8 e010 	str.w	lr, [r8, #16]
 80036f4:	e59d      	b.n	8003232 <LCD_Line.constprop.1+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036f6:	f8c9 7010 	str.w	r7, [r9, #16]
 80036fa:	e4dc      	b.n	80030b6 <LCD_Line.constprop.1+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 80036fc:	2320      	movs	r3, #32
 80036fe:	f8c8 3010 	str.w	r3, [r8, #16]
 8003702:	e478      	b.n	8002ff6 <LCD_Line.constprop.1+0x502>
 8003704:	2310      	movs	r3, #16
 8003706:	f8c8 3010 	str.w	r3, [r8, #16]
 800370a:	e46c      	b.n	8002fe6 <LCD_Line.constprop.1+0x4f2>
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	f8c9 2010 	str.w	r2, [r9, #16]
 8003712:	e461      	b.n	8002fd8 <LCD_Line.constprop.1+0x4e4>
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f8c9 1010 	str.w	r1, [r9, #16]
 800371a:	e456      	b.n	8002fca <LCD_Line.constprop.1+0x4d6>
 800371c:	f04f 0e20 	mov.w	lr, #32
 8003720:	f8c9 e010 	str.w	lr, [r9, #16]
 8003724:	e44a      	b.n	8002fbc <LCD_Line.constprop.1+0x4c8>
 8003726:	f04f 0e10 	mov.w	lr, #16
 800372a:	f8c9 e010 	str.w	lr, [r9, #16]
 800372e:	e43d      	b.n	8002fac <LCD_Line.constprop.1+0x4b8>
 8003730:	f04f 0e08 	mov.w	lr, #8
 8003734:	f8c9 e010 	str.w	lr, [r9, #16]
 8003738:	e430      	b.n	8002f9c <LCD_Line.constprop.1+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800373a:	f8c9 7010 	str.w	r7, [r9, #16]
 800373e:	e427      	b.n	8002f90 <LCD_Line.constprop.1+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 8003740:	f04f 0e20 	mov.w	lr, #32
 8003744:	f8c8 e010 	str.w	lr, [r8, #16]
 8003748:	f7ff bbf1 	b.w	8002f2e <LCD_Line.constprop.1+0x43a>
 800374c:	f04f 0e10 	mov.w	lr, #16
 8003750:	f8c8 e010 	str.w	lr, [r8, #16]
 8003754:	f7ff bbe3 	b.w	8002f1e <LCD_Line.constprop.1+0x42a>
 8003758:	f04f 0e80 	mov.w	lr, #128	; 0x80
 800375c:	f8c9 e010 	str.w	lr, [r9, #16]
 8003760:	f7ff bbd5 	b.w	8002f0e <LCD_Line.constprop.1+0x41a>
 8003764:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003768:	f8c9 e010 	str.w	lr, [r9, #16]
 800376c:	f7ff bbc7 	b.w	8002efe <LCD_Line.constprop.1+0x40a>
 8003770:	f04f 0e20 	mov.w	lr, #32
 8003774:	f8c9 e010 	str.w	lr, [r9, #16]
 8003778:	f7ff bbb9 	b.w	8002eee <LCD_Line.constprop.1+0x3fa>
 800377c:	f04f 0e10 	mov.w	lr, #16
 8003780:	f8c9 e010 	str.w	lr, [r9, #16]
 8003784:	f7ff bbab 	b.w	8002ede <LCD_Line.constprop.1+0x3ea>
 8003788:	f04f 0e08 	mov.w	lr, #8
 800378c:	f8c9 e010 	str.w	lr, [r9, #16]
 8003790:	f7ff bb9d 	b.w	8002ece <LCD_Line.constprop.1+0x3da>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003794:	f8c9 7010 	str.w	r7, [r9, #16]
 8003798:	f7ff bb93 	b.w	8002ec2 <LCD_Line.constprop.1+0x3ce>
    GPIOx->BSRR = GPIO_Pin;
 800379c:	f04f 0e20 	mov.w	lr, #32
 80037a0:	f8c8 e010 	str.w	lr, [r8, #16]
 80037a4:	f7ff bb63 	b.w	8002e6e <LCD_Line.constprop.1+0x37a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037a8:	f8c9 7010 	str.w	r7, [r9, #16]
 80037ac:	f7ff baa0 	b.w	8002cf0 <LCD_Line.constprop.1+0x1fc>
		if (x1 == x2 && y1 == y2)
 80037b0:	f240 133d 	movw	r3, #317	; 0x13d
 80037b4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f47f aeb5 	bne.w	8003526 <LCD_Line.constprop.1+0xa32>
}
 80037bc:	b03b      	add	sp, #236	; 0xec
 80037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c2:	bf00      	nop

080037c4 <LCD_Line.constprop.2>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b0ab      	sub	sp, #172	; 0xac
 80037ca:	9123      	str	r1, [sp, #140]	; 0x8c
 80037cc:	4619      	mov	r1, r3
 80037ce:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 80037d0:	1a13      	subs	r3, r2, r0
 80037d2:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80037d6:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 80037da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 80037dc:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 80037de:	1acb      	subs	r3, r1, r3
 80037e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037e8:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 80037ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80037ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80037ee:	4282      	cmp	r2, r0
 80037f0:	bf8c      	ite	hi
 80037f2:	2201      	movhi	r2, #1
 80037f4:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80037f8:	4299      	cmp	r1, r3
 80037fa:	bf8c      	ite	hi
 80037fc:	2101      	movhi	r1, #1
 80037fe:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 8003802:	9227      	str	r2, [sp, #156]	; 0x9c
 8003804:	0a1a      	lsrs	r2, r3, #8
 8003806:	9214      	str	r2, [sp, #80]	; 0x50
 8003808:	0bda      	lsrs	r2, r3, #15
 800380a:	9201      	str	r2, [sp, #4]
 800380c:	0b9a      	lsrs	r2, r3, #14
 800380e:	9220      	str	r2, [sp, #128]	; 0x80
 8003810:	0b5a      	lsrs	r2, r3, #13
 8003812:	921e      	str	r2, [sp, #120]	; 0x78
 8003814:	0b1a      	lsrs	r2, r3, #12
 8003816:	921c      	str	r2, [sp, #112]	; 0x70
 8003818:	0ada      	lsrs	r2, r3, #11
 800381a:	921a      	str	r2, [sp, #104]	; 0x68
 800381c:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 800381e:	9128      	str	r1, [sp, #160]	; 0xa0
 8003820:	9218      	str	r2, [sp, #96]	; 0x60
 8003822:	b2d9      	uxtb	r1, r3
 8003824:	0a5a      	lsrs	r2, r3, #9
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	9312      	str	r3, [sp, #72]	; 0x48
 800382c:	f000 0301 	and.w	r3, r0, #1
 8003830:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 8003832:	4663      	mov	r3, ip
 8003834:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003838:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 800383c:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8003840:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8003844:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8003848:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800384c:	9216      	str	r2, [sp, #88]	; 0x58
 800384e:	0a02      	lsrs	r2, r0, #8
 8003850:	9213      	str	r2, [sp, #76]	; 0x4c
 8003852:	0bc2      	lsrs	r2, r0, #15
 8003854:	9200      	str	r2, [sp, #0]
 8003856:	0b82      	lsrs	r2, r0, #14
 8003858:	921f      	str	r2, [sp, #124]	; 0x7c
 800385a:	0b42      	lsrs	r2, r0, #13
 800385c:	921d      	str	r2, [sp, #116]	; 0x74
 800385e:	0b02      	lsrs	r2, r0, #12
 8003860:	921b      	str	r2, [sp, #108]	; 0x6c
 8003862:	0ac2      	lsrs	r2, r0, #11
 8003864:	9219      	str	r2, [sp, #100]	; 0x64
 8003866:	0a82      	lsrs	r2, r0, #10
 8003868:	9122      	str	r1, [sp, #136]	; 0x88
 800386a:	9217      	str	r2, [sp, #92]	; 0x5c
 800386c:	b2c1      	uxtb	r1, r0
 800386e:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8003870:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 8003872:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8003876:	9215      	str	r2, [sp, #84]	; 0x54
 8003878:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 800387a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800387c:	f8df b350 	ldr.w	fp, [pc, #848]	; 8003bd0 <LCD_Line.constprop.2+0x40c>
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	f8df a350 	ldr.w	sl, [pc, #848]	; 8003bd4 <LCD_Line.constprop.2+0x410>
 8003886:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003bd8 <LCD_Line.constprop.2+0x414>
 800388a:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800388c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003890:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003894:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003896:	f8cb e010 	str.w	lr, [fp, #16]
 800389a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800389e:	f8ca 7010 	str.w	r7, [sl, #16]
 80038a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038a6:	f8ca 4010 	str.w	r4, [sl, #16]
 80038aa:	f8c9 6010 	str.w	r6, [r9, #16]
 80038ae:	f8c9 5010 	str.w	r5, [r9, #16]
 80038b2:	f8c9 7010 	str.w	r7, [r9, #16]
 80038b6:	f8c9 4010 	str.w	r4, [r9, #16]
 80038ba:	f8c9 8010 	str.w	r8, [r9, #16]
 80038be:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 80038c0:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 80038c2:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038c6:	f8c9 1010 	str.w	r1, [r9, #16]
 80038ca:	f8ca 5010 	str.w	r5, [sl, #16]
 80038ce:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038d6:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038da:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80038e2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038e6:	f8c9 2010 	str.w	r2, [r9, #16]
 80038ea:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ec:	f8c9 3010 	str.w	r3, [r9, #16]
 80038f0:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038f4:	f8cb 2010 	str.w	r2, [fp, #16]
 80038f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fc:	f8cb 2010 	str.w	r2, [fp, #16]
 8003900:	2201      	movs	r2, #1
 8003902:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003906:	f8cb e010 	str.w	lr, [fp, #16]
 800390a:	f8ca 7010 	str.w	r7, [sl, #16]
 800390e:	f8ca 4010 	str.w	r4, [sl, #16]
 8003912:	f8c9 6010 	str.w	r6, [r9, #16]
 8003916:	f8c9 5010 	str.w	r5, [r9, #16]
 800391a:	f8c9 7010 	str.w	r7, [r9, #16]
 800391e:	f8c9 4010 	str.w	r4, [r9, #16]
 8003922:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	f8c9 1010 	str.w	r1, [r9, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 849f 	beq.w	8004270 <LCD_Line.constprop.2+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 8003932:	2304      	movs	r3, #4
 8003934:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003938:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800393a:	f013 0001 	ands.w	r0, r3, #1
 800393e:	bf1c      	itt	ne
 8003940:	2308      	movne	r3, #8
 8003942:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003946:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003948:	bf08      	it	eq
 800394a:	f8ca 6010 	streq.w	r6, [sl, #16]
 800394e:	f013 0301 	ands.w	r3, r3, #1
 8003952:	9303      	str	r3, [sp, #12]
 8003954:	bf0c      	ite	eq
 8003956:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800395a:	2310      	movne	r3, #16
 800395c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003960:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003962:	f013 0301 	ands.w	r3, r3, #1
 8003966:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003968:	bf0c      	ite	eq
 800396a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800396e:	2320      	movne	r3, #32
 8003970:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003974:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003976:	f013 0301 	ands.w	r3, r3, #1
 800397a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800397c:	bf0c      	ite	eq
 800397e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003982:	2340      	movne	r3, #64	; 0x40
 8003984:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003988:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800398a:	f013 0301 	ands.w	r3, r3, #1
 800398e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003990:	bf0c      	ite	eq
 8003992:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003996:	2380      	movne	r3, #128	; 0x80
 8003998:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800399c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800399e:	f013 0301 	ands.w	r3, r3, #1
 80039a2:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a4:	bf0c      	ite	eq
 80039a6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80039aa:	2310      	movne	r3, #16
 80039ac:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80039b0:	f01c 0301 	ands.w	r3, ip, #1
 80039b4:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039b6:	bf0c      	ite	eq
 80039b8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80039bc:	2320      	movne	r3, #32
 80039be:	f8c9 3010 	str.w	r3, [r9, #16]
 80039c2:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039c4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80039c8:	f8cb 3010 	str.w	r3, [fp, #16]
 80039cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d0:	f8cb 3010 	str.w	r3, [fp, #16]
 80039d4:	2301      	movs	r3, #1
 80039d6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039de:	f8cb e010 	str.w	lr, [fp, #16]
 80039e2:	f8ca 7010 	str.w	r7, [sl, #16]
 80039e6:	f8ca 4010 	str.w	r4, [sl, #16]
 80039ea:	f8c9 6010 	str.w	r6, [r9, #16]
 80039ee:	f8c9 5010 	str.w	r5, [r9, #16]
 80039f2:	f8c9 7010 	str.w	r7, [r9, #16]
 80039f6:	f8c9 4010 	str.w	r4, [r9, #16]
 80039fa:	f8c9 8010 	str.w	r8, [r9, #16]
 80039fe:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a04:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003a06:	09d2      	lsrs	r2, r2, #7
 8003a08:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 8003a0a:	bf1c      	itt	ne
 8003a0c:	2204      	movne	r2, #4
 8003a0e:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003a12:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a16:	bf08      	it	eq
 8003a18:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003a1c:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003a1e:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003a20:	bf4a      	itet	mi
 8003a22:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a24:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003a28:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003a2c:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003a30:	0699      	lsls	r1, r3, #26
 8003a32:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a34:	bf54      	ite	pl
 8003a36:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	2210      	movmi	r2, #16
 8003a3c:	f8ca 2010 	str.w	r2, [sl, #16]
 8003a40:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003a44:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003a46:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a48:	bf54      	ite	pl
 8003a4a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003a4e:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003a50:	0719      	lsls	r1, r3, #28
 8003a52:	f8ca 2010 	str.w	r2, [sl, #16]
 8003a56:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003a5a:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a5c:	bf54      	ite	pl
 8003a5e:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	2240      	movmi	r2, #64	; 0x40
 8003a64:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003a68:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6a:	bf54      	ite	pl
 8003a6c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003a70:	2280      	movmi	r2, #128	; 0x80
 8003a72:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003a76:	f8ca 2010 	str.w	r2, [sl, #16]
 8003a7a:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003a7e:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a80:	bf54      	ite	pl
 8003a82:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a86:	2310      	movmi	r3, #16
 8003a88:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a8e:	fa1f fc83 	uxth.w	ip, r3
 8003a92:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 83e5 	bne.w	8004266 <LCD_Line.constprop.2+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a9c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003aa0:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003aa4:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aa8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003aac:	f8cb c010 	str.w	ip, [fp, #16]
 8003ab0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003ab4:	f8cb c010 	str.w	ip, [fp, #16]
 8003ab8:	f04f 0c01 	mov.w	ip, #1
 8003abc:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ac0:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ac6:	f8cb e010 	str.w	lr, [fp, #16]
 8003aca:	f8ca 7010 	str.w	r7, [sl, #16]
 8003ace:	f8ca 4010 	str.w	r4, [sl, #16]
 8003ad2:	f8c9 6010 	str.w	r6, [r9, #16]
 8003ad6:	f8c9 5010 	str.w	r5, [r9, #16]
 8003ada:	f8c9 7010 	str.w	r7, [r9, #16]
 8003ade:	f8c9 4010 	str.w	r4, [r9, #16]
 8003ae2:	f8c9 8010 	str.w	r8, [r9, #16]
 8003ae6:	f8c9 c010 	str.w	ip, [r9, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 83b8 	beq.w	8004260 <LCD_Line.constprop.2+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 8003af0:	f04f 0c04 	mov.w	ip, #4
 8003af4:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f040 83ad 	bne.w	8004258 <LCD_Line.constprop.2+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003afe:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 83a3 	bne.w	8004250 <LCD_Line.constprop.2+0xa8c>
 8003b0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b0e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003b12:	9b04      	ldr	r3, [sp, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 8397 	bne.w	8004248 <LCD_Line.constprop.2+0xa84>
 8003b1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b1e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 838b 	bne.w	8004240 <LCD_Line.constprop.2+0xa7c>
 8003b2a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003b2e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 837f 	bne.w	8004238 <LCD_Line.constprop.2+0xa74>
 8003b3a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b3e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003b42:	9b05      	ldr	r3, [sp, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8373 	bne.w	8004230 <LCD_Line.constprop.2+0xa6c>
 8003b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b4e:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003b52:	9b06      	ldr	r3, [sp, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8367 	bne.w	8004228 <LCD_Line.constprop.2+0xa64>
 8003b5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b5e:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003b62:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b64:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003b68:	f8cb 0010 	str.w	r0, [fp, #16]
 8003b6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b70:	f8cb 0010 	str.w	r0, [fp, #16]
 8003b74:	2001      	movs	r0, #1
 8003b76:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003b7e:	9b07      	ldr	r3, [sp, #28]
 8003b80:	f8cb e010 	str.w	lr, [fp, #16]
 8003b84:	f8ca 7010 	str.w	r7, [sl, #16]
 8003b88:	f8ca 4010 	str.w	r4, [sl, #16]
 8003b8c:	f8c9 6010 	str.w	r6, [r9, #16]
 8003b90:	f8c9 5010 	str.w	r5, [r9, #16]
 8003b94:	f8c9 7010 	str.w	r7, [r9, #16]
 8003b98:	f8c9 4010 	str.w	r4, [r9, #16]
 8003b9c:	f8c9 8010 	str.w	r8, [r9, #16]
 8003ba0:	f8c9 0010 	str.w	r0, [r9, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 833c 	beq.w	8004222 <LCD_Line.constprop.2+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8003baa:	2004      	movs	r0, #4
 8003bac:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8331 	bne.w	800421a <LCD_Line.constprop.2+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bb8:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003bbc:	9b08      	ldr	r3, [sp, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 8327 	bne.w	8004212 <LCD_Line.constprop.2+0xa4e>
 8003bc4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003bc8:	f8ca 0010 	str.w	r0, [sl, #16]
 8003bcc:	e006      	b.n	8003bdc <LCD_Line.constprop.2+0x418>
 8003bce:	bf00      	nop
 8003bd0:	40010c00 	.word	0x40010c00
 8003bd4:	40010800 	.word	0x40010800
 8003bd8:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 8313 	bne.w	800420a <LCD_Line.constprop.2+0xa46>
 8003be4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003be8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 8307 	bne.w	8004202 <LCD_Line.constprop.2+0xa3e>
 8003bf4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003bf8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	f040 82fc 	bne.w	80041fa <LCD_Line.constprop.2+0xa36>
 8003c02:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003c06:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	f040 82f1 	bne.w	80041f2 <LCD_Line.constprop.2+0xa2e>
 8003c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c14:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 82e5 	bne.w	80041ea <LCD_Line.constprop.2+0xa26>
 8003c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c24:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003c28:	f8bd 2000 	ldrh.w	r2, [sp]
 8003c2c:	f8cb 7010 	str.w	r7, [fp, #16]
 8003c30:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8003c32:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8003c34:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8003c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3c:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8003c44:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003c4a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c4e:	f8cb 4010 	str.w	r4, [fp, #16]
 8003c52:	f8cb e010 	str.w	lr, [fp, #16]
 8003c56:	f8ca 7010 	str.w	r7, [sl, #16]
 8003c5a:	f8ca 4010 	str.w	r4, [sl, #16]
 8003c5e:	f8c9 6010 	str.w	r6, [r9, #16]
 8003c62:	f8c9 5010 	str.w	r5, [r9, #16]
 8003c66:	f8c9 7010 	str.w	r7, [r9, #16]
 8003c6a:	f8c9 4010 	str.w	r4, [r9, #16]
 8003c6e:	f8c9 8010 	str.w	r8, [r9, #16]
 8003c72:	f8c9 0010 	str.w	r0, [r9, #16]
 8003c76:	f8ca 5010 	str.w	r5, [sl, #16]
 8003c7a:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003c7e:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c82:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c90:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c9 1010 	str.w	r1, [r9, #16]
 8003c9a:	f8c9 2010 	str.w	r2, [r9, #16]
 8003c9e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca0:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003ca4:	f8cb 2010 	str.w	r2, [fp, #16]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f8cb 3010 	str.w	r3, [fp, #16]
 8003cae:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cb2:	f8cb e010 	str.w	lr, [fp, #16]
 8003cb6:	f8ca 7010 	str.w	r7, [sl, #16]
 8003cba:	f8ca 4010 	str.w	r4, [sl, #16]
 8003cbe:	f8c9 6010 	str.w	r6, [r9, #16]
 8003cc2:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	f8c9 7010 	str.w	r7, [r9, #16]
 8003ccc:	f8c9 4010 	str.w	r4, [r9, #16]
 8003cd0:	f8c9 8010 	str.w	r8, [r9, #16]
 8003cd4:	f8c9 0010 	str.w	r0, [r9, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8283 	beq.w	80041e4 <LCD_Line.constprop.2+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003ce4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ce6:	f013 0001 	ands.w	r0, r3, #1
 8003cea:	bf1c      	itt	ne
 8003cec:	2308      	movne	r3, #8
 8003cee:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003cf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cf4:	bf08      	it	eq
 8003cf6:	f8ca 6010 	streq.w	r6, [sl, #16]
 8003cfa:	f013 0301 	ands.w	r3, r3, #1
 8003cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8003d00:	bf0c      	ite	eq
 8003d02:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003d06:	2310      	movne	r3, #16
 8003d08:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d0e:	f013 0301 	ands.w	r3, r3, #1
 8003d12:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d14:	bf0c      	ite	eq
 8003d16:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003d1a:	2320      	movne	r3, #32
 8003d1c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d22:	f013 0301 	ands.w	r3, r3, #1
 8003d26:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d28:	bf0c      	ite	eq
 8003d2a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003d2e:	2340      	movne	r3, #64	; 0x40
 8003d30:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d36:	f013 0301 	ands.w	r3, r3, #1
 8003d3a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d3c:	bf0c      	ite	eq
 8003d3e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	2380      	movne	r3, #128	; 0x80
 8003d44:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d4a:	f013 0301 	ands.w	r3, r3, #1
 8003d4e:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d50:	bf0c      	ite	eq
 8003d52:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	2310      	movne	r3, #16
 8003d58:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003d5c:	f01c 0301 	ands.w	r3, ip, #1
 8003d60:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d62:	bf0c      	ite	eq
 8003d64:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003d68:	2320      	movne	r3, #32
 8003d6a:	f8c9 3010 	str.w	r3, [r9, #16]
 8003d6e:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d70:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003d74:	f8cb 3010 	str.w	r3, [fp, #16]
 8003d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d7c:	f8cb 3010 	str.w	r3, [fp, #16]
 8003d80:	2301      	movs	r3, #1
 8003d82:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d8a:	f8cb e010 	str.w	lr, [fp, #16]
 8003d8e:	f8ca 7010 	str.w	r7, [sl, #16]
 8003d92:	f8ca 4010 	str.w	r4, [sl, #16]
 8003d96:	f8c9 6010 	str.w	r6, [r9, #16]
 8003d9a:	f8c9 5010 	str.w	r5, [r9, #16]
 8003d9e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003da2:	f8c9 4010 	str.w	r4, [r9, #16]
 8003da6:	f8c9 8010 	str.w	r8, [r9, #16]
 8003daa:	f8c9 3010 	str.w	r3, [r9, #16]
 8003dae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003db0:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003db2:	09d2      	lsrs	r2, r2, #7
 8003db4:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	bf1c      	itt	ne
 8003db8:	2204      	movne	r2, #4
 8003dba:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003dbe:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc2:	bf08      	it	eq
 8003dc4:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003dc8:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003dca:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003dcc:	bf4a      	itet	mi
 8003dce:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dd0:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003dd4:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003dd8:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003de0:	bf54      	ite	pl
 8003de2:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	2210      	movmi	r2, #16
 8003de8:	f8ca 2010 	str.w	r2, [sl, #16]
 8003dec:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003df0:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003df2:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003df4:	bf54      	ite	pl
 8003df6:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003dfa:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003dfc:	0719      	lsls	r1, r3, #28
 8003dfe:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e02:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003e06:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e08:	bf54      	ite	pl
 8003e0a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003e0e:	2240      	movmi	r2, #64	; 0x40
 8003e10:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003e14:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e16:	bf54      	ite	pl
 8003e18:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003e1c:	2280      	movmi	r2, #128	; 0x80
 8003e1e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003e22:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e26:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003e2a:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e2c:	bf54      	ite	pl
 8003e2e:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	2310      	movmi	r3, #16
 8003e34:	f8c9 3010 	str.w	r3, [r9, #16]
 8003e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e3a:	fa1f fc83 	uxth.w	ip, r3
 8003e3e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f040 81c9 	bne.w	80041da <LCD_Line.constprop.2+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e48:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003e4c:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003e50:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e54:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003e58:	f8cb c010 	str.w	ip, [fp, #16]
 8003e5c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003e60:	f8cb c010 	str.w	ip, [fp, #16]
 8003e64:	f04f 0c01 	mov.w	ip, #1
 8003e68:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e6c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e72:	f8cb e010 	str.w	lr, [fp, #16]
 8003e76:	f8ca 7010 	str.w	r7, [sl, #16]
 8003e7a:	f8ca 4010 	str.w	r4, [sl, #16]
 8003e7e:	f8c9 6010 	str.w	r6, [r9, #16]
 8003e82:	f8c9 5010 	str.w	r5, [r9, #16]
 8003e86:	f8c9 7010 	str.w	r7, [r9, #16]
 8003e8a:	f8c9 4010 	str.w	r4, [r9, #16]
 8003e8e:	f8c9 8010 	str.w	r8, [r9, #16]
 8003e92:	f8c9 c010 	str.w	ip, [r9, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 819c 	beq.w	80041d4 <LCD_Line.constprop.2+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8003e9c:	f04f 0c04 	mov.w	ip, #4
 8003ea0:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f040 8191 	bne.w	80041cc <LCD_Line.constprop.2+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eaa:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 8187 	bne.w	80041c4 <LCD_Line.constprop.2+0xa00>
 8003eb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003eba:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f040 817b 	bne.w	80041bc <LCD_Line.constprop.2+0x9f8>
 8003ec6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003eca:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 816f 	bne.w	80041b4 <LCD_Line.constprop.2+0x9f0>
 8003ed6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003eda:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 8163 	bne.w	80041ac <LCD_Line.constprop.2+0x9e8>
 8003ee6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003eea:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003eee:	9b08      	ldr	r3, [sp, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 8157 	bne.w	80041a4 <LCD_Line.constprop.2+0x9e0>
 8003ef6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003efa:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003efe:	9b07      	ldr	r3, [sp, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 814b 	bne.w	800419c <LCD_Line.constprop.2+0x9d8>
 8003f06:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f0a:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f10:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f14:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f1c:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f20:	2001      	movs	r0, #1
 8003f22:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003f2a:	9b06      	ldr	r3, [sp, #24]
 8003f2c:	f8cb e010 	str.w	lr, [fp, #16]
 8003f30:	f8ca 7010 	str.w	r7, [sl, #16]
 8003f34:	f8ca 4010 	str.w	r4, [sl, #16]
 8003f38:	f8c9 6010 	str.w	r6, [r9, #16]
 8003f3c:	f8c9 5010 	str.w	r5, [r9, #16]
 8003f40:	f8c9 7010 	str.w	r7, [r9, #16]
 8003f44:	f8c9 4010 	str.w	r4, [r9, #16]
 8003f48:	f8c9 8010 	str.w	r8, [r9, #16]
 8003f4c:	f8c9 0010 	str.w	r0, [r9, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8120 	beq.w	8004196 <LCD_Line.constprop.2+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8003f56:	2004      	movs	r0, #4
 8003f58:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003f5c:	9b05      	ldr	r3, [sp, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 8115 	bne.w	800418e <LCD_Line.constprop.2+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f64:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003f68:	9b04      	ldr	r3, [sp, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 810b 	bne.w	8004186 <LCD_Line.constprop.2+0x9c2>
 8003f70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f74:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 80ff 	bne.w	800417e <LCD_Line.constprop.2+0x9ba>
 8003f80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f84:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 80f3 	bne.w	8004176 <LCD_Line.constprop.2+0x9b2>
 8003f90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003f94:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	f040 80e8 	bne.w	800416e <LCD_Line.constprop.2+0x9aa>
 8003f9e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003fa2:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003fa6:	2a00      	cmp	r2, #0
 8003fa8:	f040 80dd 	bne.w	8004166 <LCD_Line.constprop.2+0x9a2>
 8003fac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fb0:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 80d1 	bne.w	800415e <LCD_Line.constprop.2+0x99a>
 8003fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fc0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fce:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003fd2:	f8cb 2010 	str.w	r2, [fp, #16]
 8003fd6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fda:	f8cb 4010 	str.w	r4, [fp, #16]
 8003fde:	f8cb e010 	str.w	lr, [fp, #16]
 8003fe2:	f8ca 7010 	str.w	r7, [sl, #16]
 8003fe6:	f8ca 4010 	str.w	r4, [sl, #16]
 8003fea:	f8c9 6010 	str.w	r6, [r9, #16]
 8003fee:	f8c9 5010 	str.w	r5, [r9, #16]
 8003ff2:	f8c9 7010 	str.w	r7, [r9, #16]
 8003ff6:	f8c9 4010 	str.w	r4, [r9, #16]
 8003ffa:	f8c9 8010 	str.w	r8, [r9, #16]
 8003ffe:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004002:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004004:	f8ca 5010 	str.w	r5, [sl, #16]
 8004008:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800400c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004010:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004014:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004018:	2040      	movs	r0, #64	; 0x40
 800401a:	f8ca 0010 	str.w	r0, [sl, #16]
 800401e:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004020:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004024:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004028:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800402c:	f8c9 1010 	str.w	r1, [r9, #16]
 8004030:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004034:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004036:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800403a:	f8cb 2010 	str.w	r2, [fp, #16]
 800403e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004042:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004046:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800404a:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800404e:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004052:	f8ca 7010 	str.w	r7, [sl, #16]
 8004056:	f8ca 4010 	str.w	r4, [sl, #16]
 800405a:	f8c9 6010 	str.w	r6, [r9, #16]
 800405e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004062:	f8c9 7010 	str.w	r7, [r9, #16]
 8004066:	f8c9 4010 	str.w	r4, [r9, #16]
 800406a:	f8c9 8010 	str.w	r8, [r9, #16]
 800406e:	f8c9 0010 	str.w	r0, [r9, #16]
 8004072:	f8ca 5010 	str.w	r5, [sl, #16]
 8004076:	f8ca 6010 	str.w	r6, [sl, #16]
 800407a:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800407e:	2140      	movs	r1, #64	; 0x40
 8004080:	f8ca c010 	str.w	ip, [sl, #16]
 8004084:	2010      	movs	r0, #16
 8004086:	f8ca 1010 	str.w	r1, [sl, #16]
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	f8ca 1010 	str.w	r1, [sl, #16]
 8004090:	f8c9 0010 	str.w	r0, [r9, #16]
 8004094:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004098:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800409c:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 80040a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040a2:	f8cb 3010 	str.w	r3, [fp, #16]
 80040a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80040a8:	4293      	cmp	r3, r2
 80040aa:	f000 80e5 	beq.w	8004278 <LCD_Line.constprop.2+0xab4>
		if (error2 > -deltaY)
 80040ae:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 80040b0:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 80040b2:	4243      	negs	r3, r0
 80040b4:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 80040b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 80040bc:	da24      	bge.n	8004108 <LCD_Line.constprop.2+0x944>
			x1 += signX;
 80040be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040c0:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 80040c4:	1a09      	subs	r1, r1, r0
			x1 += signX;
 80040c6:	4463      	add	r3, ip
			error -= deltaY;
 80040c8:	9102      	str	r1, [sp, #8]
			x1 += signX;
 80040ca:	b299      	uxth	r1, r3
 80040cc:	9110      	str	r1, [sp, #64]	; 0x40
 80040ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80040d2:	9113      	str	r1, [sp, #76]	; 0x4c
 80040d4:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80040d8:	9100      	str	r1, [sp, #0]
 80040da:	f3c3 3181 	ubfx	r1, r3, #14, #2
 80040de:	911f      	str	r1, [sp, #124]	; 0x7c
 80040e0:	f3c3 3142 	ubfx	r1, r3, #13, #3
 80040e4:	911d      	str	r1, [sp, #116]	; 0x74
 80040e6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80040ea:	911b      	str	r1, [sp, #108]	; 0x6c
 80040ec:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 80040f0:	9119      	str	r1, [sp, #100]	; 0x64
 80040f2:	f3c3 2185 	ubfx	r1, r3, #10, #6
 80040f6:	9117      	str	r1, [sp, #92]	; 0x5c
 80040f8:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80040fc:	9115      	str	r1, [sp, #84]	; 0x54
 80040fe:	b2d9      	uxtb	r1, r3
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	9121      	str	r1, [sp, #132]	; 0x84
 8004106:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8004108:	9926      	ldr	r1, [sp, #152]	; 0x98
 800410a:	4291      	cmp	r1, r2
 800410c:	f77f abbe 	ble.w	800388c <LCD_Line.constprop.2+0xc8>
			y1 += signY;
 8004110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004112:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004114:	4413      	add	r3, r2
			error += deltaX;
 8004116:	9a02      	ldr	r2, [sp, #8]
 8004118:	440a      	add	r2, r1
 800411a:	9202      	str	r2, [sp, #8]
			y1 += signY;
 800411c:	b29a      	uxth	r2, r3
 800411e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004120:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004124:	9214      	str	r2, [sp, #80]	; 0x50
 8004126:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800412a:	9201      	str	r2, [sp, #4]
 800412c:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8004130:	9220      	str	r2, [sp, #128]	; 0x80
 8004132:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8004136:	921e      	str	r2, [sp, #120]	; 0x78
 8004138:	f3c3 3203 	ubfx	r2, r3, #12, #4
 800413c:	921c      	str	r2, [sp, #112]	; 0x70
 800413e:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8004142:	921a      	str	r2, [sp, #104]	; 0x68
 8004144:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8004148:	9218      	str	r2, [sp, #96]	; 0x60
 800414a:	f3c3 2246 	ubfx	r2, r3, #9, #7
 800414e:	9216      	str	r2, [sp, #88]	; 0x58
 8004150:	b2da      	uxtb	r2, r3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	9222      	str	r2, [sp, #136]	; 0x88
 8004158:	9312      	str	r3, [sp, #72]	; 0x48
 800415a:	f7ff bb97 	b.w	800388c <LCD_Line.constprop.2+0xc8>
 800415e:	2320      	movs	r3, #32
 8004160:	f8c9 3010 	str.w	r3, [r9, #16]
 8004164:	e72e      	b.n	8003fc4 <LCD_Line.constprop.2+0x800>
 8004166:	2210      	movs	r2, #16
 8004168:	f8c9 2010 	str.w	r2, [r9, #16]
 800416c:	e722      	b.n	8003fb4 <LCD_Line.constprop.2+0x7f0>
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	f8ca 1010 	str.w	r1, [sl, #16]
 8004174:	e717      	b.n	8003fa6 <LCD_Line.constprop.2+0x7e2>
 8004176:	2040      	movs	r0, #64	; 0x40
 8004178:	f8ca 0010 	str.w	r0, [sl, #16]
 800417c:	e70c      	b.n	8003f98 <LCD_Line.constprop.2+0x7d4>
 800417e:	2020      	movs	r0, #32
 8004180:	f8ca 0010 	str.w	r0, [sl, #16]
 8004184:	e700      	b.n	8003f88 <LCD_Line.constprop.2+0x7c4>
 8004186:	2010      	movs	r0, #16
 8004188:	f8ca 0010 	str.w	r0, [sl, #16]
 800418c:	e6f4      	b.n	8003f78 <LCD_Line.constprop.2+0x7b4>
 800418e:	2008      	movs	r0, #8
 8004190:	f8ca 0010 	str.w	r0, [sl, #16]
 8004194:	e6e8      	b.n	8003f68 <LCD_Line.constprop.2+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004196:	f8ca 5010 	str.w	r5, [sl, #16]
 800419a:	e6df      	b.n	8003f5c <LCD_Line.constprop.2+0x798>
    GPIOx->BSRR = GPIO_Pin;
 800419c:	2020      	movs	r0, #32
 800419e:	f8c9 0010 	str.w	r0, [r9, #16]
 80041a2:	e6b4      	b.n	8003f0e <LCD_Line.constprop.2+0x74a>
 80041a4:	2010      	movs	r0, #16
 80041a6:	f8c9 0010 	str.w	r0, [r9, #16]
 80041aa:	e6a8      	b.n	8003efe <LCD_Line.constprop.2+0x73a>
 80041ac:	2080      	movs	r0, #128	; 0x80
 80041ae:	f8ca 0010 	str.w	r0, [sl, #16]
 80041b2:	e69c      	b.n	8003eee <LCD_Line.constprop.2+0x72a>
 80041b4:	2040      	movs	r0, #64	; 0x40
 80041b6:	f8ca 0010 	str.w	r0, [sl, #16]
 80041ba:	e690      	b.n	8003ede <LCD_Line.constprop.2+0x71a>
 80041bc:	2020      	movs	r0, #32
 80041be:	f8ca 0010 	str.w	r0, [sl, #16]
 80041c2:	e684      	b.n	8003ece <LCD_Line.constprop.2+0x70a>
 80041c4:	2010      	movs	r0, #16
 80041c6:	f8ca 0010 	str.w	r0, [sl, #16]
 80041ca:	e678      	b.n	8003ebe <LCD_Line.constprop.2+0x6fa>
 80041cc:	2008      	movs	r0, #8
 80041ce:	f8ca 0010 	str.w	r0, [sl, #16]
 80041d2:	e66c      	b.n	8003eae <LCD_Line.constprop.2+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d4:	f8ca 5010 	str.w	r5, [sl, #16]
 80041d8:	e664      	b.n	8003ea4 <LCD_Line.constprop.2+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 80041da:	f04f 0c20 	mov.w	ip, #32
 80041de:	f8c9 c010 	str.w	ip, [r9, #16]
 80041e2:	e635      	b.n	8003e50 <LCD_Line.constprop.2+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041e4:	f8ca 5010 	str.w	r5, [sl, #16]
 80041e8:	e57c      	b.n	8003ce4 <LCD_Line.constprop.2+0x520>
    GPIOx->BSRR = GPIO_Pin;
 80041ea:	2320      	movs	r3, #32
 80041ec:	f8c9 3010 	str.w	r3, [r9, #16]
 80041f0:	e51a      	b.n	8003c28 <LCD_Line.constprop.2+0x464>
 80041f2:	2210      	movs	r2, #16
 80041f4:	f8c9 2010 	str.w	r2, [r9, #16]
 80041f8:	e50e      	b.n	8003c18 <LCD_Line.constprop.2+0x454>
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	f8ca 1010 	str.w	r1, [sl, #16]
 8004200:	e503      	b.n	8003c0a <LCD_Line.constprop.2+0x446>
 8004202:	2040      	movs	r0, #64	; 0x40
 8004204:	f8ca 0010 	str.w	r0, [sl, #16]
 8004208:	e4f8      	b.n	8003bfc <LCD_Line.constprop.2+0x438>
 800420a:	2020      	movs	r0, #32
 800420c:	f8ca 0010 	str.w	r0, [sl, #16]
 8004210:	e4ec      	b.n	8003bec <LCD_Line.constprop.2+0x428>
 8004212:	2010      	movs	r0, #16
 8004214:	f8ca 0010 	str.w	r0, [sl, #16]
 8004218:	e4e0      	b.n	8003bdc <LCD_Line.constprop.2+0x418>
 800421a:	2008      	movs	r0, #8
 800421c:	f8ca 0010 	str.w	r0, [sl, #16]
 8004220:	e4cc      	b.n	8003bbc <LCD_Line.constprop.2+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004222:	f8ca 5010 	str.w	r5, [sl, #16]
 8004226:	e4c3      	b.n	8003bb0 <LCD_Line.constprop.2+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8004228:	2020      	movs	r0, #32
 800422a:	f8c9 0010 	str.w	r0, [r9, #16]
 800422e:	e498      	b.n	8003b62 <LCD_Line.constprop.2+0x39e>
 8004230:	2010      	movs	r0, #16
 8004232:	f8c9 0010 	str.w	r0, [r9, #16]
 8004236:	e48c      	b.n	8003b52 <LCD_Line.constprop.2+0x38e>
 8004238:	2080      	movs	r0, #128	; 0x80
 800423a:	f8ca 0010 	str.w	r0, [sl, #16]
 800423e:	e480      	b.n	8003b42 <LCD_Line.constprop.2+0x37e>
 8004240:	2040      	movs	r0, #64	; 0x40
 8004242:	f8ca 0010 	str.w	r0, [sl, #16]
 8004246:	e474      	b.n	8003b32 <LCD_Line.constprop.2+0x36e>
 8004248:	2020      	movs	r0, #32
 800424a:	f8ca 0010 	str.w	r0, [sl, #16]
 800424e:	e468      	b.n	8003b22 <LCD_Line.constprop.2+0x35e>
 8004250:	2010      	movs	r0, #16
 8004252:	f8ca 0010 	str.w	r0, [sl, #16]
 8004256:	e45c      	b.n	8003b12 <LCD_Line.constprop.2+0x34e>
 8004258:	2008      	movs	r0, #8
 800425a:	f8ca 0010 	str.w	r0, [sl, #16]
 800425e:	e450      	b.n	8003b02 <LCD_Line.constprop.2+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004260:	f8ca 5010 	str.w	r5, [sl, #16]
 8004264:	e448      	b.n	8003af8 <LCD_Line.constprop.2+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8004266:	f04f 0c20 	mov.w	ip, #32
 800426a:	f8c9 c010 	str.w	ip, [r9, #16]
 800426e:	e419      	b.n	8003aa4 <LCD_Line.constprop.2+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004270:	f8ca 5010 	str.w	r5, [sl, #16]
 8004274:	f7ff bb60 	b.w	8003938 <LCD_Line.constprop.2+0x174>
		if (x1 == x2 && y1 == y2)
 8004278:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800427a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800427c:	4293      	cmp	r3, r2
 800427e:	f47f af16 	bne.w	80040ae <LCD_Line.constprop.2+0x8ea>
}
 8004282:	b02b      	add	sp, #172	; 0xac
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004288 <LCD_Rect.constprop.0>:
	LCD_Line(x, y, x + w, y, size, color24);
 8004288:	23bd      	movs	r3, #189	; 0xbd
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 800428a:	b570      	push	{r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 800428c:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 8004290:	b2a4      	uxth	r4, r4
 8004292:	4619      	mov	r1, r3
 8004294:	4622      	mov	r2, r4
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 8004296:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 8004298:	f7ff fa94 	bl	80037c4 <LCD_Line.constprop.2>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800429c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80042a0:	4622      	mov	r2, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7ff fa8d 	bl	80037c4 <LCD_Line.constprop.2>
	LCD_Line(x, y, x, y + h, size, color24);
 80042aa:	462a      	mov	r2, r5
 80042ac:	4628      	mov	r0, r5
 80042ae:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80042b2:	21bd      	movs	r1, #189	; 0xbd
 80042b4:	f7ff fa86 	bl	80037c4 <LCD_Line.constprop.2>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80042b8:	4622      	mov	r2, r4
 80042ba:	4620      	mov	r0, r4
}
 80042bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80042c0:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80042c4:	21bd      	movs	r1, #189	; 0xbd
 80042c6:	f7ff ba7d 	b.w	80037c4 <LCD_Line.constprop.2>
 80042ca:	bf00      	nop

080042cc <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 80042cc:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ce:	4c74      	ldr	r4, [pc, #464]	; (80044a0 <I2C_RequestMemoryWrite.constprop.0+0x1d4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 80042d0:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80042d4:	6813      	ldr	r3, [r2, #0]
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e003      	b.n	80042e6 <I2C_RequestMemoryWrite.constprop.0+0x1a>
 80042de:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	1a5b      	subs	r3, r3, r1
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d836      	bhi.n	8004354 <I2C_RequestMemoryWrite.constprop.0+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e6:	6953      	ldr	r3, [r2, #20]
 80042e8:	07db      	lsls	r3, r3, #31
 80042ea:	d5f8      	bpl.n	80042de <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ec:	23ae      	movs	r3, #174	; 0xae
 80042ee:	6113      	str	r3, [r2, #16]
 80042f0:	e00a      	b.n	8004308 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f2:	6953      	ldr	r3, [r2, #20]
 80042f4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80042f8:	d15f      	bne.n	80043ba <I2C_RequestMemoryWrite.constprop.0+0xee>
 80042fa:	6825      	ldr	r5, [r4, #0]
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fc:	eba5 0c01 	sub.w	ip, r5, r1
 8004300:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8004304:	f200 80af 	bhi.w	8004466 <I2C_RequestMemoryWrite.constprop.0+0x19a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004308:	6953      	ldr	r3, [r2, #20]
 800430a:	43db      	mvns	r3, r3
 800430c:	f013 0302 	ands.w	r3, r3, #2
 8004310:	d1ef      	bne.n	80042f2 <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6953      	ldr	r3, [r2, #20]
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	6993      	ldr	r3, [r2, #24]
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800431e:	6953      	ldr	r3, [r2, #20]
 8004320:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004324:	d163      	bne.n	80043ee <I2C_RequestMemoryWrite.constprop.0+0x122>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004326:	6955      	ldr	r5, [r2, #20]
 8004328:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 800432c:	d12c      	bne.n	8004388 <I2C_RequestMemoryWrite.constprop.0+0xbc>
 800432e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	1a5b      	subs	r3, r3, r1
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d9f3      	bls.n	800431e <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004336:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	67e5      	str	r5, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800433a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800433e:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004346:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	f043 0320 	orr.w	r3, r3, #32
 800434e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004352:	e02a      	b.n	80043aa <I2C_RequestMemoryWrite.constprop.0+0xde>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004354:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004356:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004358:	67e1      	str	r1, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800435a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800435e:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004362:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004366:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	05da      	lsls	r2, r3, #23
 8004376:	d557      	bpl.n	8004428 <I2C_RequestMemoryWrite.constprop.0+0x15c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004378:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 800437c:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800437e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004382:	b003      	add	sp, #12
 8004384:	bc70      	pop	{r4, r5, r6}
 8004386:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800438e:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043a2:	f041 0104 	orr.w	r1, r1, #4
 80043a6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d070      	beq.n	8004494 <I2C_RequestMemoryWrite.constprop.0+0x1c8>
    return HAL_ERROR;
 80043b2:	2001      	movs	r0, #1
}
 80043b4:	b003      	add	sp, #12
 80043b6:	bc70      	pop	{r4, r5, r6}
 80043b8:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	2520      	movs	r5, #32
    return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	6813      	ldr	r3, [r2, #0]
 80043c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ca:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043cc:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ce:	67e1      	str	r1, [r4, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 80043dc:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 80043e8:	b003      	add	sp, #12
 80043ea:	bc70      	pop	{r4, r5, r6}
 80043ec:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043ee:	0a03      	lsrs	r3, r0, #8
 80043f0:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f2:	6953      	ldr	r3, [r2, #20]
 80043f4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80043f8:	d146      	bne.n	8004488 <I2C_RequestMemoryWrite.constprop.0+0x1bc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043fa:	6955      	ldr	r5, [r2, #20]
 80043fc:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8004400:	d116      	bne.n	8004430 <I2C_RequestMemoryWrite.constprop.0+0x164>
 8004402:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004404:	1a5b      	subs	r3, r3, r1
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d9f3      	bls.n	80043f2 <I2C_RequestMemoryWrite.constprop.0+0x126>
        hi2c->State             = HAL_I2C_STATE_READY;
 800440a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800440c:	67e5      	str	r5, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800440e:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004412:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004416:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 800441a:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800441e:	f043 0320 	orr.w	r3, r3, #32
 8004422:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004426:	e014      	b.n	8004452 <I2C_RequestMemoryWrite.constprop.0+0x186>
    return HAL_TIMEOUT;
 8004428:	2003      	movs	r0, #3
}
 800442a:	b003      	add	sp, #12
 800442c:	bc70      	pop	{r4, r5, r6}
 800442e:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004432:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004436:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 800443a:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443e:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004442:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8004446:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800444a:	f041 0104 	orr.w	r1, r1, #4
 800444e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004452:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004456:	2b04      	cmp	r3, #4
 8004458:	d1ab      	bne.n	80043b2 <I2C_RequestMemoryWrite.constprop.0+0xe6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445a:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 800445c:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e7c0      	b.n	80043e8 <I2C_RequestMemoryWrite.constprop.0+0x11c>
        hi2c->State               = HAL_I2C_STATE_READY;
 8004466:	2220      	movs	r2, #32
    return HAL_ERROR;
 8004468:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	67e3      	str	r3, [r4, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8004474:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004482:	b003      	add	sp, #12
 8004484:	bc70      	pop	{r4, r5, r6}
 8004486:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 800448a:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	6113      	str	r3, [r2, #16]
}
 800448e:	b003      	add	sp, #12
 8004490:	bc70      	pop	{r4, r5, r6}
 8004492:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 8004496:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e7a3      	b.n	80043e8 <I2C_RequestMemoryWrite.constprop.0+0x11c>
 80044a0:	20000200 	.word	0x20000200

080044a4 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80044a4:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80044a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a8:	4bac      	ldr	r3, [pc, #688]	; (800475c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b8>)
 80044aa:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80044ac:	9200      	str	r2, [sp, #0]
 80044ae:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b0:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80044b4:	2a20      	cmp	r2, #32
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 80044b8:	b007      	add	sp, #28
 80044ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044be:	e003      	b.n	80044c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 80044c0:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	2c19      	cmp	r4, #25
 80044c6:	d870      	bhi.n	80045aa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	6994      	ldr	r4, [r2, #24]
 80044ca:	ea6f 0c04 	mvn.w	ip, r4
 80044ce:	f01c 0c02 	ands.w	ip, ip, #2
 80044d2:	d0f5      	beq.n	80044c0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 80044d4:	f893 4088 	ldrb.w	r4, [r3, #136]	; 0x88
 80044d8:	2c01      	cmp	r4, #1
 80044da:	d0ed      	beq.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 80044dc:	2401      	movs	r4, #1
 80044de:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e2:	6814      	ldr	r4, [r2, #0]
 80044e4:	07e7      	lsls	r7, r4, #31
 80044e6:	d55b      	bpl.n	80045a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfc>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044e8:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ec:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 80044f2:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	6814      	ldr	r4, [r2, #0]
 80044f6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80044fa:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044fc:	4c98      	ldr	r4, [pc, #608]	; (8004760 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2bc>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044fe:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004502:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004506:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 800450a:	f8a3 6076 	strh.w	r6, [r3, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 800450e:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 8004510:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004514:	679c      	str	r4, [r3, #120]	; 0x78
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8004518:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 800451e:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004524:	6814      	ldr	r4, [r2, #0]
 8004526:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800452a:	6014      	str	r4, [r2, #0]
 800452c:	e003      	b.n	8004536 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x92>
 800452e:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	2c64      	cmp	r4, #100	; 0x64
 8004534:	d865      	bhi.n	8004602 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004536:	6954      	ldr	r4, [r2, #20]
 8004538:	07e6      	lsls	r6, r4, #31
 800453a:	d5f8      	bpl.n	800452e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453c:	24ae      	movs	r4, #174	; 0xae
 800453e:	6114      	str	r4, [r2, #16]
 8004540:	e008      	b.n	8004554 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xb0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004542:	6954      	ldr	r4, [r2, #20]
 8004544:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 8004548:	d173      	bne.n	8004632 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18e>
 800454a:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	1b76      	subs	r6, r6, r5
 800454e:	2e64      	cmp	r6, #100	; 0x64
 8004550:	f200 8095 	bhi.w	800467e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004554:	6954      	ldr	r4, [r2, #20]
 8004556:	43e4      	mvns	r4, r4
 8004558:	f014 0402 	ands.w	r4, r4, #2
 800455c:	d1f1      	bne.n	8004542 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x9e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455e:	9405      	str	r4, [sp, #20]
 8004560:	6954      	ldr	r4, [r2, #20]
 8004562:	9405      	str	r4, [sp, #20]
 8004564:	6994      	ldr	r4, [r2, #24]
 8004566:	9405      	str	r4, [sp, #20]
 8004568:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456a:	6954      	ldr	r4, [r2, #20]
 800456c:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 8004570:	d176      	bne.n	8004660 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1bc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004572:	6956      	ldr	r6, [r2, #20]
 8004574:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 8004578:	d128      	bne.n	80045cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x128>
 800457a:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	1b64      	subs	r4, r4, r5
 800457e:	2c64      	cmp	r4, #100	; 0x64
 8004580:	d9f3      	bls.n	800456a <HAL_I2C_Mem_Read.constprop.0.isra.0+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004582:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004584:	67de      	str	r6, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004586:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800458a:	f883 608a 	strb.w	r6, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004592:	f883 6088 	strb.w	r6, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004596:	f041 0120 	orr.w	r1, r1, #32
 800459a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 800459e:	e026      	b.n	80045ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
      __HAL_I2C_ENABLE(hi2c);
 80045a0:	6814      	ldr	r4, [r2, #0]
 80045a2:	f044 0401 	orr.w	r4, r4, #1
 80045a6:	6014      	str	r4, [r2, #0]
 80045a8:	e79e      	b.n	80044e8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045aa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045ac:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045b4:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80045bc:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	f042 0220 	orr.w	r2, r2, #32
 80045c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80045c8:	b007      	add	sp, #28
 80045ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80045d2:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	67dc      	str	r4, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80045d6:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045da:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 80045e2:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045e6:	f041 0104 	orr.w	r1, r1, #4
 80045ea:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	f47f af60 	bne.w	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e75a      	b.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004602:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004604:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004606:	67d8      	str	r0, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004608:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800460c:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004614:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	f041 0120 	orr.w	r1, r1, #32
 800461c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	05d5      	lsls	r5, r2, #23
 8004624:	f57f af48 	bpl.w	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004630:	e742      	b.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004632:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004634:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004638:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	6810      	ldr	r0, [r2, #0]
 800463c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004640:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004642:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004644:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8004646:	f883 4089 	strb.w	r4, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464a:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8004652:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004656:	f042 0204 	orr.w	r2, r2, #4
 800465a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800465e:	e72b      	b.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004660:	0a04      	lsrs	r4, r0, #8
 8004662:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004664:	6954      	ldr	r4, [r2, #20]
 8004666:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 800466a:	d117      	bne.n	800469c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1f8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466c:	6956      	ldr	r6, [r2, #20]
 800466e:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 8004672:	d1ab      	bne.n	80045cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x128>
 8004674:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	2c64      	cmp	r4, #100	; 0x64
 800467a:	d9f3      	bls.n	8004664 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c0>
 800467c:	e781      	b.n	8004582 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xde>
        hi2c->State               = HAL_I2C_STATE_READY;
 800467e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	67dc      	str	r4, [r3, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 8004682:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004686:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 800468e:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	f042 0220 	orr.w	r2, r2, #32
 8004696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800469a:	e70d      	b.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469c:	b2c0      	uxtb	r0, r0
 800469e:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a0:	6950      	ldr	r0, [r2, #20]
 80046a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046a6:	d128      	bne.n	80046fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x256>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a8:	6954      	ldr	r4, [r2, #20]
 80046aa:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80046ae:	d112      	bne.n	80046d6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x232>
 80046b0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	1b40      	subs	r0, r0, r5
 80046b4:	2864      	cmp	r0, #100	; 0x64
 80046b6:	d9f3      	bls.n	80046a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1fc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80046b8:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046ba:	67dc      	str	r4, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80046bc:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c0:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80046c8:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	f041 0120 	orr.w	r1, r1, #32
 80046d0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80046d4:	e78b      	b.n	80045ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
    hi2c->State               = HAL_I2C_STATE_READY;
 80046d6:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 80046dc:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	67d8      	str	r0, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 80046ec:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f0:	f041 0104 	orr.w	r1, r1, #4
 80046f4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80046f8:	e779      	b.n	80045ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fa:	6810      	ldr	r0, [r2, #0]
 80046fc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004700:	6010      	str	r0, [r2, #0]
 8004702:	e004      	b.n	800470e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x26a>
 8004704:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	1b40      	subs	r0, r0, r5
 8004708:	2864      	cmp	r0, #100	; 0x64
 800470a:	f63f af7a 	bhi.w	8004602 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	6950      	ldr	r0, [r2, #20]
 8004710:	07c4      	lsls	r4, r0, #31
 8004712:	d5f7      	bpl.n	8004704 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x260>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004714:	20af      	movs	r0, #175	; 0xaf
 8004716:	6110      	str	r0, [r2, #16]
 8004718:	e007      	b.n	800472a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x286>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800471a:	6950      	ldr	r0, [r2, #20]
 800471c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004720:	d187      	bne.n	8004632 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18e>
 8004722:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	2c64      	cmp	r4, #100	; 0x64
 8004728:	d81c      	bhi.n	8004764 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800472a:	6950      	ldr	r0, [r2, #20]
 800472c:	43c0      	mvns	r0, r0
 800472e:	f010 0002 	ands.w	r0, r0, #2
 8004732:	d1f2      	bne.n	800471a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x276>
    if (hi2c->XferSize == 0U)
 8004734:	bb31      	cbnz	r1, 8004784 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004736:	9104      	str	r1, [sp, #16]
 8004738:	6951      	ldr	r1, [r2, #20]
 800473a:	9104      	str	r1, [sp, #16]
 800473c:	6991      	ldr	r1, [r2, #24]
 800473e:	9104      	str	r1, [sp, #16]
 8004740:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	6811      	ldr	r1, [r2, #0]
 8004744:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004748:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800474c:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 800474e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    return HAL_OK;
 800475a:	e6ad      	b.n	80044b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800475c:	20000200 	.word	0x20000200
 8004760:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8004764:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004766:	67d8      	str	r0, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004768:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800476c:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004774:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	f042 0220 	orr.w	r2, r2, #32
 800477c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004780:	b007      	add	sp, #28
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8004784:	2901      	cmp	r1, #1
 8004786:	f000 80ef 	beq.w	8004968 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4c4>
    else if (hi2c->XferSize == 2U)
 800478a:	2902      	cmp	r1, #2
 800478c:	f000 8104 	beq.w	8004998 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4f4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	6814      	ldr	r4, [r2, #0]
 8004792:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8004796:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004798:	9001      	str	r0, [sp, #4]
 800479a:	6950      	ldr	r0, [r2, #20]
 800479c:	9001      	str	r0, [sp, #4]
 800479e:	6990      	ldr	r0, [r2, #24]
 80047a0:	9001      	str	r0, [sp, #4]
 80047a2:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047a4:	4e85      	ldr	r6, [pc, #532]	; (80049bc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x518>)
 80047a6:	4c86      	ldr	r4, [pc, #536]	; (80049c0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x51c>)
      if (hi2c->XferSize <= 3U)
 80047a8:	2903      	cmp	r1, #3
 80047aa:	d845      	bhi.n	8004838 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x394>
        if (hi2c->XferSize == 1U)
 80047ac:	2901      	cmp	r1, #1
 80047ae:	f000 80ad 	beq.w	800490c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x468>
        else if (hi2c->XferSize == 2U)
 80047b2:	2902      	cmp	r1, #2
 80047b4:	d005      	beq.n	80047c2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
 80047b6:	e060      	b.n	800487a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
 80047b8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	1b49      	subs	r1, r1, r5
 80047bc:	2964      	cmp	r1, #100	; 0x64
 80047be:	f200 80aa 	bhi.w	8004916 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x472>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c2:	6951      	ldr	r1, [r2, #20]
 80047c4:	0748      	lsls	r0, r1, #29
 80047c6:	d5f7      	bpl.n	80047b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x314>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	6811      	ldr	r1, [r2, #0]
 80047d0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80047d4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	6912      	ldr	r2, [r2, #16]
 80047d8:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80047da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047dc:	3201      	adds	r2, #1
 80047de:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80047e0:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 80047e4:	3a01      	subs	r2, #1
 80047e6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 80047ea:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 80047ee:	3a01      	subs	r2, #1
 80047f0:	b292      	uxth	r2, r2
 80047f2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  __ASM volatile ("cpsie i" : : : "memory");
 80047f6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047fa:	6911      	ldr	r1, [r2, #16]
 80047fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047fe:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8004800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 8004802:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 8004806:	3201      	adds	r2, #1
 8004808:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferCount--;
 800480a:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
          hi2c->XferSize--;
 800480e:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8004810:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8004812:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8004814:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8004816:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800481a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 800481e:	2900      	cmp	r1, #0
 8004820:	d093      	beq.n	800474a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2a6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004824:	e7c0      	b.n	80047a8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x304>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004826:	6950      	ldr	r0, [r2, #20]
 8004828:	f010 0010 	ands.w	r0, r0, #16
 800482c:	f040 8084 	bne.w	8004938 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
 8004830:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	1b49      	subs	r1, r1, r5
 8004834:	2964      	cmp	r1, #100	; 0x64
 8004836:	d895      	bhi.n	8004764 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004838:	6951      	ldr	r1, [r2, #20]
 800483a:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800483e:	d0f2      	beq.n	8004826 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x382>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	6911      	ldr	r1, [r2, #16]
 8004842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004844:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8004846:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 800484a:	6f18      	ldr	r0, [r3, #112]	; 0x70
        hi2c->XferCount--;
 800484c:	3a01      	subs	r2, #1
 800484e:	b292      	uxth	r2, r2
 8004850:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        hi2c->XferSize--;
 8004856:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
        hi2c->pBuffPtr++;
 800485a:	1c47      	adds	r7, r0, #1
 800485c:	671f      	str	r7, [r3, #112]	; 0x70
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800485e:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8004860:	3901      	subs	r1, #1
 8004862:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004864:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8004866:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800486a:	d5d8      	bpl.n	800481e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x37a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	7042      	strb	r2, [r0, #1]
 8004870:	e7c6      	b.n	8004800 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x35c>
 8004872:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004874:	1b49      	subs	r1, r1, r5
 8004876:	2964      	cmp	r1, #100	; 0x64
 8004878:	d84d      	bhi.n	8004916 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x472>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487a:	6951      	ldr	r1, [r2, #20]
 800487c:	0749      	lsls	r1, r1, #29
 800487e:	d5f8      	bpl.n	8004872 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3ce>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004886:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004888:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800488c:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800488e:	6832      	ldr	r2, [r6, #0]
 8004890:	08d2      	lsrs	r2, r2, #3
 8004892:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	6f19      	ldr	r1, [r3, #112]	; 0x70
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004898:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489a:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 800489c:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80048a4:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80048aa:	b289      	uxth	r1, r1
 80048ac:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b0:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80048b2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80048b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80048b8:	3a01      	subs	r2, #1
 80048ba:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80048be:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
          hi2c->pBuffPtr++;
 80048c2:	671a      	str	r2, [r3, #112]	; 0x70
 80048c4:	e002      	b.n	80048cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x428>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048c6:	694a      	ldr	r2, [r1, #20]
 80048c8:	0752      	lsls	r2, r2, #29
 80048ca:	d446      	bmi.n	800495a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b6>
            count--;
 80048cc:	9a00      	ldr	r2, [sp, #0]
 80048ce:	3a01      	subs	r2, #1
 80048d0:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80048d2:	9a00      	ldr	r2, [sp, #0]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d1f6      	bne.n	80048c6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x422>
              hi2c->State               = HAL_I2C_STATE_READY;
 80048d8:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c
              hi2c->State               = HAL_I2C_STATE_READY;
 80048dc:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80048e8:	f041 0120 	orr.w	r1, r1, #32
 80048ec:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  __ASM volatile ("cpsie i" : : : "memory");
 80048f0:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80048f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80048f6:	b007      	add	sp, #28
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fa:	6950      	ldr	r0, [r2, #20]
 80048fc:	f010 0010 	ands.w	r0, r0, #16
 8004900:	d11a      	bne.n	8004938 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
 8004902:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	1b49      	subs	r1, r1, r5
 8004906:	2964      	cmp	r1, #100	; 0x64
 8004908:	f63f af2c 	bhi.w	8004764 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490c:	6951      	ldr	r1, [r2, #20]
 800490e:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8004912:	d0f2      	beq.n	80048fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x456>
 8004914:	e771      	b.n	80047fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x356>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004916:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004918:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800491a:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800491c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004920:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004928:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004934:	b007      	add	sp, #28
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004938:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493e:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004940:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8004942:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004946:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800494a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 800494e:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004956:	b007      	add	sp, #28
 8004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	680a      	ldr	r2, [r1, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004960:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	690a      	ldr	r2, [r1, #16]
 8004964:	7042      	strb	r2, [r0, #1]
 8004966:	e738      	b.n	80047da <HAL_I2C_Mem_Read.constprop.0.isra.0+0x336>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800496e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004970:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004974:	9003      	str	r0, [sp, #12]
 8004976:	6951      	ldr	r1, [r2, #20]
 8004978:	9103      	str	r1, [sp, #12]
 800497a:	6991      	ldr	r1, [r2, #24]
 800497c:	9103      	str	r1, [sp, #12]
 800497e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004986:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004988:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800498a:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
 800498e:	2900      	cmp	r1, #0
 8004990:	f43f aedb 	beq.w	800474a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2a6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004996:	e705      	b.n	80047a4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x300>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800499e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049a0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a4:	9002      	str	r0, [sp, #8]
 80049a6:	6951      	ldr	r1, [r2, #20]
 80049a8:	9102      	str	r1, [sp, #8]
 80049aa:	6991      	ldr	r1, [r2, #24]
 80049ac:	9102      	str	r1, [sp, #8]
 80049ae:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	6811      	ldr	r1, [r2, #0]
 80049b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049b6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80049b8:	b662      	cpsie	i
}
 80049ba:	e7e6      	b.n	800498a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4e6>
 80049bc:	20000000 	.word	0x20000000
 80049c0:	14f8b589 	.word	0x14f8b589

080049c4 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80049c4:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 80049c6:	b500      	push	{lr}
 80049c8:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049ca:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049cc:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049d0:	f7ff fd68 	bl	80044a4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 80049d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80049d8:	b003      	add	sp, #12
 80049da:	f85d fb04 	ldr.w	pc, [sp], #4
 80049de:	bf00      	nop

080049e0 <AT24XX_Update>:
    uint16_t dt[1] = {0};
 80049e0:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80049e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e4:	460d      	mov	r5, r1
 80049e6:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049e8:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049ea:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80049ee:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049f0:	f7ff fd58 	bl	80044a4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80049f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80049f8:	429d      	cmp	r5, r3
 80049fa:	d101      	bne.n	8004a00 <AT24XX_Update+0x20>
}
 80049fc:	b003      	add	sp, #12
 80049fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a00:	4c6a      	ldr	r4, [pc, #424]	; (8004bac <AT24XX_Update+0x1cc>)
    uint8_t save[] = {val};
 8004a02:	f88d 5004 	strb.w	r5, [sp, #4]
 8004a06:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a08:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d1f5      	bne.n	80049fc <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a12:	e004      	b.n	8004a1e <AT24XX_Update+0x3e>
 8004a14:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	1b52      	subs	r2, r2, r5
 8004a18:	2a19      	cmp	r2, #25
 8004a1a:	f200 80b7 	bhi.w	8004b8c <AT24XX_Update+0x1ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1e:	698b      	ldr	r3, [r1, #24]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	f013 0302 	ands.w	r3, r3, #2
 8004a26:	d0f5      	beq.n	8004a14 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8004a28:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d0e5      	beq.n	80049fc <AT24XX_Update+0x1c>
 8004a30:	2301      	movs	r3, #1
 8004a32:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	07da      	lsls	r2, r3, #31
 8004a3a:	d403      	bmi.n	8004a44 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004a3c:	680b      	ldr	r3, [r1, #0]
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8004a44:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a46:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a48:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4e:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a50:	680b      	ldr	r3, [r1, #0]
 8004a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a56:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a58:	f884 c089 	strb.w	ip, [r4, #137]	; 0x89
    hi2c->pBuffPtr    = pData;
 8004a5c:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a5e:	f884 708a 	strb.w	r7, [r4, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a62:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8004a66:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
    hi2c->XferSize    = hi2c->XferCount;
 8004a6a:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 8004a6e:	6723      	str	r3, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a70:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <AT24XX_Update+0x1d0>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a72:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8004a74:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a78:	67a3      	str	r3, [r4, #120]	; 0x78
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a7a:	f7ff fc27 	bl	80042cc <I2C_RequestMemoryWrite.constprop.0>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d1bc      	bne.n	80049fc <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8004a82:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f000 808e 	beq.w	8004ba8 <AT24XX_Update+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a8e:	694b      	ldr	r3, [r1, #20]
 8004a90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004a94:	d116      	bne.n	8004ac4 <AT24XX_Update+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a96:	694a      	ldr	r2, [r1, #20]
 8004a98:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004a9c:	d135      	bne.n	8004b0a <AT24XX_Update+0x12a>
 8004a9e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa0:	1b5b      	subs	r3, r3, r5
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d9f3      	bls.n	8004a8e <AT24XX_Update+0xae>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aa6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa8:	67e2      	str	r2, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aaa:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aae:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ab2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004ab6:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	f043 0320 	orr.w	r3, r3, #32
 8004abe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004ac2:	e033      	b.n	8004b2c <AT24XX_Update+0x14c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac4:	6f26      	ldr	r6, [r4, #112]	; 0x70
      hi2c->XferSize--;
 8004ac6:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac8:	4633      	mov	r3, r6
 8004aca:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8004ace:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad0:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8004ad2:	6723      	str	r3, [r4, #112]	; 0x70
      hi2c->XferCount--;
 8004ad4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
      hi2c->XferSize--;
 8004ad8:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
      hi2c->XferCount--;
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ae4:	694b      	ldr	r3, [r1, #20]
 8004ae6:	075b      	lsls	r3, r3, #29
 8004ae8:	d42a      	bmi.n	8004b40 <AT24XX_Update+0x160>
      hi2c->XferSize--;
 8004aea:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d1ce      	bne.n	8004a8e <AT24XX_Update+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af0:	694b      	ldr	r3, [r1, #20]
 8004af2:	f013 0304 	ands.w	r3, r3, #4
 8004af6:	d136      	bne.n	8004b66 <AT24XX_Update+0x186>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af8:	694a      	ldr	r2, [r1, #20]
 8004afa:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004afe:	d104      	bne.n	8004b0a <AT24XX_Update+0x12a>
 8004b00:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b02:	1b5b      	subs	r3, r3, r5
 8004b04:	2b64      	cmp	r3, #100	; 0x64
 8004b06:	d9f3      	bls.n	8004af0 <AT24XX_Update+0x110>
 8004b08:	e7cd      	b.n	8004aa6 <AT24XX_Update+0xc6>
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004b10:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b14:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8004b20:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b24:	f042 0204 	orr.w	r2, r2, #4
 8004b28:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	f47f af63 	bne.w	80049fc <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b3c:	600b      	str	r3, [r1, #0]
 8004b3e:	e75d      	b.n	80049fc <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d0d5      	beq.n	8004af0 <AT24XX_Update+0x110>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b44:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8004b46:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b48:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8004b4a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
        hi2c->XferSize--;
 8004b4e:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8004b50:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004b52:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8004b54:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004b56:	6726      	str	r6, [r4, #112]	; 0x70
        hi2c->XferSize--;
 8004b58:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
        hi2c->XferCount--;
 8004b5c:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d194      	bne.n	8004a8e <AT24XX_Update+0xae>
 8004b64:	e7c4      	b.n	8004af0 <AT24XX_Update+0x110>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	680b      	ldr	r3, [r1, #0]
 8004b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b70:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	f884 0089 	strb.w	r0, [r4, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
    __HAL_UNLOCK(hi2c);
 8004b7a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d9fb      	bls.n	8004b80 <AT24XX_Update+0x1a0>
}
 8004b88:	b003      	add	sp, #12
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b8c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b8e:	67e3      	str	r3, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b90:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b94:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8004b98:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004ba6:	e729      	b.n	80049fc <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ba8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004baa:	e7a1      	b.n	8004af0 <AT24XX_Update+0x110>
 8004bac:	20000200 	.word	0x20000200
 8004bb0:	ffff0000 	.word	0xffff0000

08004bb4 <AT24XX_Update.constprop.0>:
void AT24XX_Update(uint16_t address, uint8_t val) {
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t dt[1] = {0};
 8004bb6:	2500      	movs	r5, #0
void AT24XX_Update(uint16_t address, uint8_t val) {
 8004bb8:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004bba:	a901      	add	r1, sp, #4
void AT24XX_Update(uint16_t address, uint8_t val) {
 8004bbc:	4606      	mov	r6, r0
    uint16_t dt[1] = {0};
 8004bbe:	f8ad 5004 	strh.w	r5, [sp, #4]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004bc2:	f7ff fc6f 	bl	80044a4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8004bc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8004bca:	b90b      	cbnz	r3, 8004bd0 <AT24XX_Update.constprop.0+0x1c>
}
 8004bcc:	b003      	add	sp, #12
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return uwTick;
 8004bd0:	4c6a      	ldr	r4, [pc, #424]	; (8004d7c <AT24XX_Update.constprop.0+0x1c8>)
    uint8_t save[] = {val};
 8004bd2:	f88d 5004 	strb.w	r5, [sp, #4]
 8004bd6:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd8:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d1f5      	bne.n	8004bcc <AT24XX_Update.constprop.0+0x18>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004be2:	e004      	b.n	8004bee <AT24XX_Update.constprop.0+0x3a>
 8004be4:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	1b52      	subs	r2, r2, r5
 8004be8:	2a19      	cmp	r2, #25
 8004bea:	f200 80b7 	bhi.w	8004d5c <AT24XX_Update.constprop.0+0x1a8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bee:	698b      	ldr	r3, [r1, #24]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	f013 0302 	ands.w	r3, r3, #2
 8004bf6:	d0f5      	beq.n	8004be4 <AT24XX_Update.constprop.0+0x30>
    __HAL_LOCK(hi2c);
 8004bf8:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d0e5      	beq.n	8004bcc <AT24XX_Update.constprop.0+0x18>
 8004c00:	2301      	movs	r3, #1
 8004c02:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c06:	680b      	ldr	r3, [r1, #0]
 8004c08:	07da      	lsls	r2, r3, #31
 8004c0a:	d403      	bmi.n	8004c14 <AT24XX_Update.constprop.0+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004c0c:	680b      	ldr	r3, [r1, #0]
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8004c14:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c16:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c18:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c1c:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c1e:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c20:	680b      	ldr	r3, [r1, #0]
 8004c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c26:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c28:	f884 c089 	strb.w	ip, [r4, #137]	; 0x89
    hi2c->pBuffPtr    = pData;
 8004c2c:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c2e:	f884 708a 	strb.w	r7, [r4, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c32:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8004c36:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
    hi2c->XferSize    = hi2c->XferCount;
 8004c3a:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 8004c3e:	6723      	str	r3, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <AT24XX_Update.constprop.0+0x1cc>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c42:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8004c44:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c48:	67a3      	str	r3, [r4, #120]	; 0x78
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c4a:	f7ff fb3f 	bl	80042cc <I2C_RequestMemoryWrite.constprop.0>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d1bc      	bne.n	8004bcc <AT24XX_Update.constprop.0+0x18>
    while (hi2c->XferSize > 0U)
 8004c52:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f000 808e 	beq.w	8004d78 <AT24XX_Update.constprop.0+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004c5e:	694b      	ldr	r3, [r1, #20]
 8004c60:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004c64:	d116      	bne.n	8004c94 <AT24XX_Update.constprop.0+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c66:	694a      	ldr	r2, [r1, #20]
 8004c68:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004c6c:	d135      	bne.n	8004cda <AT24XX_Update.constprop.0+0x126>
 8004c6e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	1b5b      	subs	r3, r3, r5
 8004c72:	2b64      	cmp	r3, #100	; 0x64
 8004c74:	d9f3      	bls.n	8004c5e <AT24XX_Update.constprop.0+0xaa>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c76:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c78:	67e2      	str	r2, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c7a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7e:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004c86:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c8a:	f043 0320 	orr.w	r3, r3, #32
 8004c8e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004c92:	e033      	b.n	8004cfc <AT24XX_Update.constprop.0+0x148>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c94:	6f26      	ldr	r6, [r4, #112]	; 0x70
      hi2c->XferSize--;
 8004c96:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c98:	4633      	mov	r3, r6
 8004c9a:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8004c9e:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca0:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8004ca2:	6723      	str	r3, [r4, #112]	; 0x70
      hi2c->XferCount--;
 8004ca4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
      hi2c->XferSize--;
 8004ca8:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
      hi2c->XferCount--;
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cb4:	694b      	ldr	r3, [r1, #20]
 8004cb6:	075b      	lsls	r3, r3, #29
 8004cb8:	d42a      	bmi.n	8004d10 <AT24XX_Update.constprop.0+0x15c>
      hi2c->XferSize--;
 8004cba:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d1ce      	bne.n	8004c5e <AT24XX_Update.constprop.0+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc0:	694b      	ldr	r3, [r1, #20]
 8004cc2:	f013 0304 	ands.w	r3, r3, #4
 8004cc6:	d136      	bne.n	8004d36 <AT24XX_Update.constprop.0+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cc8:	694a      	ldr	r2, [r1, #20]
 8004cca:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004cce:	d104      	bne.n	8004cda <AT24XX_Update.constprop.0+0x126>
 8004cd0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	1b5b      	subs	r3, r3, r5
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d9f3      	bls.n	8004cc0 <AT24XX_Update.constprop.0+0x10c>
 8004cd8:	e7cd      	b.n	8004c76 <AT24XX_Update.constprop.0+0xc2>
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cda:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cdc:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004ce0:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ce4:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8004cf0:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cf4:	f042 0204 	orr.w	r2, r2, #4
 8004cf8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	f47f af63 	bne.w	8004bcc <AT24XX_Update.constprop.0+0x18>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	680b      	ldr	r3, [r1, #0]
 8004d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	e75d      	b.n	8004bcc <AT24XX_Update.constprop.0+0x18>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d0d5      	beq.n	8004cc0 <AT24XX_Update.constprop.0+0x10c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d14:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8004d16:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d18:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8004d1a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
        hi2c->XferSize--;
 8004d1e:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8004d20:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004d22:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8004d24:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004d26:	6726      	str	r6, [r4, #112]	; 0x70
        hi2c->XferSize--;
 8004d28:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
        hi2c->XferCount--;
 8004d2c:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d194      	bne.n	8004c5e <AT24XX_Update.constprop.0+0xaa>
 8004d34:	e7c4      	b.n	8004cc0 <AT24XX_Update.constprop.0+0x10c>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3a:	680b      	ldr	r3, [r1, #0]
 8004d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d40:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	f884 0089 	strb.w	r0, [r4, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
    __HAL_UNLOCK(hi2c);
 8004d4a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d9fb      	bls.n	8004d50 <AT24XX_Update.constprop.0+0x19c>
}
 8004d58:	b003      	add	sp, #12
 8004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d5c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d5e:	67e3      	str	r3, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d60:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d64:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8004d68:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004d76:	e729      	b.n	8004bcc <AT24XX_Update.constprop.0+0x18>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d7a:	e7a1      	b.n	8004cc0 <AT24XX_Update.constprop.0+0x10c>
 8004d7c:	20000200 	.word	0x20000200
 8004d80:	ffff0000 	.word	0xffff0000

08004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004d86:	2400      	movs	r4, #0
  return uwTick;
 8004d88:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x250>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004d8a:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8004d8c:	9400      	str	r4, [sp, #0]
 8004d8e:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d90:	f893 4089 	ldrb.w	r4, [r3, #137]	; 0x89
 8004d94:	2c20      	cmp	r4, #32
 8004d96:	d001      	beq.n	8004d9c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8004d98:	b007      	add	sp, #28
 8004d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004d9e:	e004      	b.n	8004daa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8004da0:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	1bad      	subs	r5, r5, r6
 8004da4:	2d19      	cmp	r5, #25
 8004da6:	f200 80b9 	bhi.w	8004f1c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004daa:	69a5      	ldr	r5, [r4, #24]
 8004dac:	ea6f 0c05 	mvn.w	ip, r5
 8004db0:	f01c 0c02 	ands.w	ip, ip, #2
 8004db4:	d0f4      	beq.n	8004da0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8004db6:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
 8004dba:	2d01      	cmp	r5, #1
 8004dbc:	d0ec      	beq.n	8004d98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 8004dbe:	2501      	movs	r5, #1
 8004dc0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc4:	6825      	ldr	r5, [r4, #0]
 8004dc6:	07ed      	lsls	r5, r5, #31
 8004dc8:	d561      	bpl.n	8004e8e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10a>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004dca:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dce:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dd2:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd4:	6825      	ldr	r5, [r4, #0]
 8004dd6:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004dda:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8004ddc:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dde:	497e      	ldr	r1, [pc, #504]	; (8004fd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x254>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004de0:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004de4:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004de8:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8004dec:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    hi2c->XferSize    = hi2c->XferCount;
 8004df0:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df4:	6799      	str	r1, [r3, #120]	; 0x78
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004df6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df8:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8004dfa:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e00:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 8004e02:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e08:	d007      	beq.n	8004e1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
 8004e0a:	2d01      	cmp	r5, #1
 8004e0c:	d005      	beq.n	8004e1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
 8004e0e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004e12:	d002      	beq.n	8004e1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e14:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004e16:	2911      	cmp	r1, #17
 8004e18:	d109      	bne.n	8004e2e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e20:	6021      	str	r1, [r4, #0]
 8004e22:	e004      	b.n	8004e2e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xaa>
 8004e24:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	1b89      	subs	r1, r1, r6
 8004e28:	2964      	cmp	r1, #100	; 0x64
 8004e2a:	f200 8088 	bhi.w	8004f3e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2e:	6961      	ldr	r1, [r4, #20]
 8004e30:	07cf      	lsls	r7, r1, #31
 8004e32:	d5f7      	bpl.n	8004e24 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e34:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e36:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004e3a:	d12d      	bne.n	8004e98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x114>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e3c:	f040 0001 	orr.w	r0, r0, #1
 8004e40:	b2c0      	uxtb	r0, r0
 8004e42:	6120      	str	r0, [r4, #16]
 8004e44:	e008      	b.n	8004e58 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	6961      	ldr	r1, [r4, #20]
 8004e48:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004e4c:	f040 808f 	bne.w	8004f6e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 8004e50:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	1b80      	subs	r0, r0, r6
 8004e54:	2864      	cmp	r0, #100	; 0x64
 8004e56:	d851      	bhi.n	8004efc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e58:	6961      	ldr	r1, [r4, #20]
 8004e5a:	43c9      	mvns	r1, r1
 8004e5c:	f011 0102 	ands.w	r1, r1, #2
 8004e60:	d1f1      	bne.n	8004e46 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc2>
    if (hi2c->XferSize == 0U)
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	f040 809b 	bne.w	8004f9e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x21a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e68:	9204      	str	r2, [sp, #16]
 8004e6a:	6962      	ldr	r2, [r4, #20]
 8004e6c:	9204      	str	r2, [sp, #16]
 8004e6e:	69a2      	ldr	r2, [r4, #24]
 8004e70:	9204      	str	r2, [sp, #16]
 8004e72:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8004e80:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->State = HAL_I2C_STATE_READY;
 8004e84:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e88:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    return HAL_OK;
 8004e8c:	e784      	b.n	8004d98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	f045 0501 	orr.w	r5, r5, #1
 8004e94:	6025      	str	r5, [r4, #0]
 8004e96:	e798      	b.n	8004dca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e98:	21f0      	movs	r1, #240	; 0xf0
 8004e9a:	6121      	str	r1, [r4, #16]
 8004e9c:	e007      	b.n	8004eae <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e9e:	6961      	ldr	r1, [r4, #20]
 8004ea0:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004ea4:	d163      	bne.n	8004f6e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 8004ea6:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	1bad      	subs	r5, r5, r6
 8004eaa:	2d64      	cmp	r5, #100	; 0x64
 8004eac:	d826      	bhi.n	8004efc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eae:	6961      	ldr	r1, [r4, #20]
 8004eb0:	070d      	lsls	r5, r1, #28
 8004eb2:	d5f4      	bpl.n	8004e9e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x11a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eb4:	6120      	str	r0, [r4, #16]
 8004eb6:	e007      	b.n	8004ec8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x144>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004ebe:	d156      	bne.n	8004f6e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 8004ec0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	2864      	cmp	r0, #100	; 0x64
 8004ec6:	d819      	bhi.n	8004efc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ec8:	6961      	ldr	r1, [r4, #20]
 8004eca:	43c9      	mvns	r1, r1
 8004ecc:	f011 0102 	ands.w	r1, r1, #2
 8004ed0:	d1f2      	bne.n	8004eb8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x134>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	9105      	str	r1, [sp, #20]
 8004ed4:	6961      	ldr	r1, [r4, #20]
 8004ed6:	9105      	str	r1, [sp, #20]
 8004ed8:	69a1      	ldr	r1, [r4, #24]
 8004eda:	9105      	str	r1, [sp, #20]
 8004edc:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004ee4:	6021      	str	r1, [r4, #0]
 8004ee6:	e003      	b.n	8004ef0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x16c>
 8004ee8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	1b89      	subs	r1, r1, r6
 8004eec:	2964      	cmp	r1, #100	; 0x64
 8004eee:	d826      	bhi.n	8004f3e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef0:	6961      	ldr	r1, [r4, #20]
 8004ef2:	07c9      	lsls	r1, r1, #31
 8004ef4:	d5f8      	bpl.n	8004ee8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ef6:	21f1      	movs	r1, #241	; 0xf1
 8004ef8:	6121      	str	r1, [r4, #16]
 8004efa:	e7ad      	b.n	8004e58 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xd4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004efc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004efe:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f00:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f04:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004f0c:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	f042 0220 	orr.w	r2, r2, #32
 8004f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004f18:	b007      	add	sp, #28
 8004f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f1c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f1e:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f22:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f26:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004f2e:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	f042 0220 	orr.w	r2, r2, #32
 8004f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004f3a:	b007      	add	sp, #28
 8004f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f3e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f40:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f42:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f48:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8004f50:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f54:	f042 0220 	orr.w	r2, r2, #32
 8004f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	05d0      	lsls	r0, r2, #23
 8004f60:	f57f af1a 	bpl.w	8004d98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004f6c:	e714      	b.n	8004d98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f74:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f7e:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f80:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f82:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f86:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f8a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8004f8e:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f92:	f042 0204 	orr.w	r2, r2, #4
 8004f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004f9a:	b007      	add	sp, #28
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	f000 8114 	beq.w	80051cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x448>
    else if (hi2c->XferSize == 2U)
 8004fa4:	2a02      	cmp	r2, #2
 8004fa6:	f000 80d1 	beq.w	800514c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3c8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8004fb0:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	9101      	str	r1, [sp, #4]
 8004fb4:	6961      	ldr	r1, [r4, #20]
 8004fb6:	9101      	str	r1, [sp, #4]
 8004fb8:	69a1      	ldr	r1, [r4, #24]
 8004fba:	9101      	str	r1, [sp, #4]
 8004fbc:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fbe:	4d07      	ldr	r5, [pc, #28]	; (8004fdc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x258>)
 8004fc0:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x25c>)
      if (hi2c->XferSize <= 3U)
 8004fc2:	2a03      	cmp	r2, #3
 8004fc4:	d850      	bhi.n	8005068 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2e4>
        if (hi2c->XferSize == 1U)
 8004fc6:	2a01      	cmp	r2, #1
 8004fc8:	f000 80b8 	beq.w	800513c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b8>
        else if (hi2c->XferSize == 2U)
 8004fcc:	2a02      	cmp	r2, #2
 8004fce:	d00e      	beq.n	8004fee <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26a>
 8004fd0:	e06b      	b.n	80050aa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x326>
 8004fd2:	bf00      	nop
 8004fd4:	20000200 	.word	0x20000200
 8004fd8:	ffff0000 	.word	0xffff0000
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	14f8b589 	.word	0x14f8b589
 8004fe4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	1b92      	subs	r2, r2, r6
 8004fe8:	2a64      	cmp	r2, #100	; 0x64
 8004fea:	f200 80c7 	bhi.w	800517c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fee:	6962      	ldr	r2, [r4, #20]
 8004ff0:	0757      	lsls	r7, r2, #29
 8004ff2:	d5f7      	bpl.n	8004fe4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x260>
  __ASM volatile ("cpsid i" : : : "memory");
 8004ff4:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005000:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	6912      	ldr	r2, [r2, #16]
 8005004:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 8005006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005008:	3201      	adds	r2, #1
 800500a:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 800500c:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8005010:	3a01      	subs	r2, #1
 8005012:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 8005016:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 800501a:	3a01      	subs	r2, #1
 800501c:	b292      	uxth	r2, r2
 800501e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  __ASM volatile ("cpsie i" : : : "memory");
 8005022:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005026:	6911      	ldr	r1, [r2, #16]
 8005028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800502a:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 800502c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
          hi2c->XferCount--;
 800502e:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          hi2c->pBuffPtr++;
 8005032:	3201      	adds	r2, #1
 8005034:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 8005036:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800503a:	3901      	subs	r1, #1
          hi2c->XferSize--;
 800503c:	3a01      	subs	r2, #1
 800503e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8005040:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8005042:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 8005046:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 800504a:	2a00      	cmp	r2, #0
 800504c:	f43f af16 	beq.w	8004e7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005050:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005052:	e7b6      	b.n	8004fc2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005054:	6961      	ldr	r1, [r4, #20]
 8005056:	f011 0110 	ands.w	r1, r1, #16
 800505a:	f040 80a0 	bne.w	800519e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x41a>
 800505e:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005060:	1b92      	subs	r2, r2, r6
 8005062:	2a64      	cmp	r2, #100	; 0x64
 8005064:	f63f af4a 	bhi.w	8004efc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005068:	6962      	ldr	r2, [r4, #20]
 800506a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800506e:	d0f1      	beq.n	8005054 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2d0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	6921      	ldr	r1, [r4, #16]
 8005072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005074:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8005076:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 800507a:	6f19      	ldr	r1, [r3, #112]	; 0x70
        hi2c->XferCount--;
 800507c:	3a01      	subs	r2, #1
 800507e:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005080:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
        hi2c->XferCount--;
 8005082:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 8005086:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8005088:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
        hi2c->pBuffPtr++;
 800508c:	671f      	str	r7, [r3, #112]	; 0x70
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800508e:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8005090:	3a01      	subs	r2, #1
 8005092:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005094:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8005096:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800509a:	d5d6      	bpl.n	800504a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2c6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	6922      	ldr	r2, [r4, #16]
 800509e:	704a      	strb	r2, [r1, #1]
 80050a0:	e7c4      	b.n	800502c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a8>
 80050a2:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a4:	1b92      	subs	r2, r2, r6
 80050a6:	2a64      	cmp	r2, #100	; 0x64
 80050a8:	d868      	bhi.n	800517c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050aa:	6962      	ldr	r2, [r4, #20]
 80050ac:	0751      	lsls	r1, r2, #29
 80050ae:	d5f8      	bpl.n	80050a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x31e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050b8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050bc:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050be:	682a      	ldr	r2, [r5, #0]
 80050c0:	08d2      	lsrs	r2, r2, #3
 80050c2:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050c8:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 80050cc:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80050d4:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050d6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80050da:	b289      	uxth	r1, r1
 80050dc:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050e0:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80050e2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80050e6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80050e8:	3a01      	subs	r2, #1
 80050ea:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80050ee:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80050f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
          hi2c->pBuffPtr++;
 80050f2:	671a      	str	r2, [r3, #112]	; 0x70
 80050f4:	e002      	b.n	80050fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80050f6:	694a      	ldr	r2, [r1, #20]
 80050f8:	0752      	lsls	r2, r2, #29
 80050fa:	d460      	bmi.n	80051be <HAL_I2C_Master_Receive.constprop.0.isra.0+0x43a>
            count--;
 80050fc:	9a00      	ldr	r2, [sp, #0]
 80050fe:	3a01      	subs	r2, #1
 8005100:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8005102:	9a00      	ldr	r2, [sp, #0]
 8005104:	2a00      	cmp	r2, #0
 8005106:	d1f6      	bne.n	80050f6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x372>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800510a:	67da      	str	r2, [r3, #124]	; 0x7c
              hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005114:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005118:	f041 0120 	orr.w	r1, r1, #32
 800511c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  __ASM volatile ("cpsie i" : : : "memory");
 8005120:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8005122:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8005126:	b007      	add	sp, #28
 8005128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800512a:	6961      	ldr	r1, [r4, #20]
 800512c:	f011 0110 	ands.w	r1, r1, #16
 8005130:	d135      	bne.n	800519e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x41a>
 8005132:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005134:	1b92      	subs	r2, r2, r6
 8005136:	2a64      	cmp	r2, #100	; 0x64
 8005138:	f63f aee0 	bhi.w	8004efc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800513c:	6962      	ldr	r2, [r4, #20]
 800513e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005142:	d0f2      	beq.n	800512a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005144:	6921      	ldr	r1, [r4, #16]
 8005146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005148:	7011      	strb	r1, [r2, #0]
 800514a:	e76f      	b.n	800502c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005152:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005154:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005158:	9102      	str	r1, [sp, #8]
 800515a:	6951      	ldr	r1, [r2, #20]
 800515c:	9102      	str	r1, [sp, #8]
 800515e:	6991      	ldr	r1, [r2, #24]
 8005160:	9102      	str	r1, [sp, #8]
 8005162:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800516a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800516c:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800516e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8005172:	2a00      	cmp	r2, #0
 8005174:	f43f ae82 	beq.w	8004e7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005178:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800517a:	e720      	b.n	8004fbe <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800517c:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800517e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005180:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8005182:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005186:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 800518e:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005192:	f042 0220 	orr.w	r2, r2, #32
 8005196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800519a:	b007      	add	sp, #28
 800519c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 800519e:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a0:	f06f 0010 	mvn.w	r0, #16
 80051a4:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	67da      	str	r2, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a8:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 80051b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051b8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80051bc:	e5ec      	b.n	8004d98 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	680a      	ldr	r2, [r1, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	690a      	ldr	r2, [r1, #16]
 80051c8:	7062      	strb	r2, [r4, #1]
 80051ca:	e71c      	b.n	8005006 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x282>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051d4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d8:	9103      	str	r1, [sp, #12]
 80051da:	6951      	ldr	r1, [r2, #20]
 80051dc:	9103      	str	r1, [sp, #12]
 80051de:	6991      	ldr	r1, [r2, #24]
 80051e0:	9103      	str	r1, [sp, #12]
 80051e2:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	6811      	ldr	r1, [r2, #0]
 80051e6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80051ea:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051ec:	b662      	cpsie	i
}
 80051ee:	e7be      	b.n	800516e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3ea>

080051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80051f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f2:	4ba4      	ldr	r3, [pc, #656]	; (8005484 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x294>)
 80051f4:	b083      	sub	sp, #12
 80051f6:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	f893 4089 	ldrb.w	r4, [r3, #137]	; 0x89
 80051fc:	2c20      	cmp	r4, #32
 80051fe:	d001      	beq.n	8005204 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8005200:	b003      	add	sp, #12
 8005202:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005204:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005206:	e004      	b.n	8005212 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8005208:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	1bad      	subs	r5, r5, r6
 800520c:	2d19      	cmp	r5, #25
 800520e:	f200 80dc 	bhi.w	80053ca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005212:	69a5      	ldr	r5, [r4, #24]
 8005214:	ea6f 0c05 	mvn.w	ip, r5
 8005218:	f01c 0c02 	ands.w	ip, ip, #2
 800521c:	d0f4      	beq.n	8005208 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 800521e:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
 8005222:	2d01      	cmp	r5, #1
 8005224:	d0ec      	beq.n	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8005226:	2501      	movs	r5, #1
 8005228:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	07ed      	lsls	r5, r5, #31
 8005230:	f140 80b7 	bpl.w	80053a2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005234:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005238:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800523c:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800523e:	6825      	ldr	r5, [r4, #0]
 8005240:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8005244:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005246:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800524a:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800524e:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8005252:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005256:	4a8c      	ldr	r2, [pc, #560]	; (8005488 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x298>)
    hi2c->XferSize    = hi2c->XferCount;
 8005258:	f8b3 5076 	ldrh.w	r5, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	679a      	str	r2, [r3, #120]	; 0x78
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800525e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    hi2c->XferSize    = hi2c->XferCount;
 8005260:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005262:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8005264:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 8005266:	f8a3 5074 	strh.w	r5, [r3, #116]	; 0x74
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800526a:	d007      	beq.n	800527c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
 800526c:	2a01      	cmp	r2, #1
 800526e:	d005      	beq.n	800527c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
 8005270:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005274:	d002      	beq.n	800527c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005276:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005278:	2a12      	cmp	r2, #18
 800527a:	d109      	bne.n	8005290 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	e004      	b.n	8005290 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa0>
 8005286:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005288:	1b92      	subs	r2, r2, r6
 800528a:	2a64      	cmp	r2, #100	; 0x64
 800528c:	f200 80ae 	bhi.w	80053ec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1fc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005290:	6962      	ldr	r2, [r4, #20]
 8005292:	07d2      	lsls	r2, r2, #31
 8005294:	d5f7      	bpl.n	8005286 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x96>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005298:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800529c:	f040 8086 	bne.w	80053ac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1bc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052a0:	6120      	str	r0, [r4, #16]
 80052a2:	e009      	b.n	80052b8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a4:	6962      	ldr	r2, [r4, #20]
 80052a6:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80052aa:	f040 80b7 	bne.w	800541c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22c>
 80052ae:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	1b89      	subs	r1, r1, r6
 80052b2:	2964      	cmp	r1, #100	; 0x64
 80052b4:	f200 80ca 	bhi.w	800544c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x25c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b8:	6962      	ldr	r2, [r4, #20]
 80052ba:	43d2      	mvns	r2, r2
 80052bc:	f012 0202 	ands.w	r2, r2, #2
 80052c0:	d1f0      	bne.n	80052a4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	9201      	str	r2, [sp, #4]
 80052c4:	6962      	ldr	r2, [r4, #20]
 80052c6:	9201      	str	r2, [sp, #4]
 80052c8:	69a2      	ldr	r2, [r4, #24]
 80052ca:	9201      	str	r2, [sp, #4]
 80052cc:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80052ce:	2d00      	cmp	r5, #0
 80052d0:	f000 80ca 	beq.w	8005468 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d4:	6962      	ldr	r2, [r4, #20]
 80052d6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 80052da:	d131      	bne.n	8005340 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x150>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052dc:	6961      	ldr	r1, [r4, #20]
 80052de:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80052e2:	d112      	bne.n	800530a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11a>
 80052e4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	1b92      	subs	r2, r2, r6
 80052e8:	2a64      	cmp	r2, #100	; 0x64
 80052ea:	d9f3      	bls.n	80052d4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xe4>
        hi2c->State             = HAL_I2C_STATE_READY;
 80052ec:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052ee:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80052f0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052f4:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80052fc:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005308:	e010      	b.n	800532c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
    hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8005310:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	67da      	str	r2, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005318:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8005320:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005324:	f041 0104 	orr.w	r1, r1, #4
 8005328:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005330:	2b04      	cmp	r3, #4
 8005332:	f47f af65 	bne.w	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	e75f      	b.n	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005340:	6f1f      	ldr	r7, [r3, #112]	; 0x70
      hi2c->XferSize--;
 8005342:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005344:	4638      	mov	r0, r7
 8005346:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 800534a:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534c:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 800534e:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
      hi2c->pBuffPtr++;
 8005352:	6718      	str	r0, [r3, #112]	; 0x70
      hi2c->XferCount--;
 8005354:	3901      	subs	r1, #1
 8005356:	b289      	uxth	r1, r1
 8005358:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800535c:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 800535e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005362:	0749      	lsls	r1, r1, #29
 8005364:	d51b      	bpl.n	800539e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ae>
 8005366:	b1d2      	cbz	r2, 800539e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005368:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 800536a:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800536c:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 800536e:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->XferSize--;
 8005372:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8005374:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8005376:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8005378:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800537a:	671f      	str	r7, [r3, #112]	; 0x70
        hi2c->XferSize--;
 800537c:	f8a3 5074 	strh.w	r5, [r3, #116]	; 0x74
        hi2c->XferCount--;
 8005380:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005384:	6962      	ldr	r2, [r4, #20]
 8005386:	f012 0204 	ands.w	r2, r2, #4
 800538a:	d1a0      	bne.n	80052ce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xde>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800538c:	6961      	ldr	r1, [r4, #20]
 800538e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8005392:	d1ba      	bne.n	800530a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11a>
 8005394:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	1b92      	subs	r2, r2, r6
 8005398:	2a64      	cmp	r2, #100	; 0x64
 800539a:	d9f3      	bls.n	8005384 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x194>
 800539c:	e7a6      	b.n	80052ec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xfc>
 800539e:	4615      	mov	r5, r2
 80053a0:	e7f0      	b.n	8005384 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x194>
      __HAL_I2C_ENABLE(hi2c);
 80053a2:	6825      	ldr	r5, [r4, #0]
 80053a4:	f045 0501 	orr.w	r5, r5, #1
 80053a8:	6025      	str	r5, [r4, #0]
 80053aa:	e743      	b.n	8005234 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053ac:	22f0      	movs	r2, #240	; 0xf0
 80053ae:	6122      	str	r2, [r4, #16]
 80053b0:	e007      	b.n	80053c2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b2:	6962      	ldr	r2, [r4, #20]
 80053b4:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80053b8:	d130      	bne.n	800541c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22c>
 80053ba:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	1b89      	subs	r1, r1, r6
 80053be:	2964      	cmp	r1, #100	; 0x64
 80053c0:	d844      	bhi.n	800544c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x25c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c2:	6962      	ldr	r2, [r4, #20]
 80053c4:	0717      	lsls	r7, r2, #28
 80053c6:	d5f4      	bpl.n	80053b2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1c2>
 80053c8:	e76a      	b.n	80052a0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb0>
        hi2c->State             = HAL_I2C_STATE_READY;
 80053ca:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053cc:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80053d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053d4:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80053dc:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80053e8:	b003      	add	sp, #12
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053ec:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80053ee:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f0:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80053f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053f6:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80053fe:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005402:	f042 0220 	orr.w	r2, r2, #32
 8005406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	05d1      	lsls	r1, r2, #23
 800540e:	f57f aef7 	bpl.w	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800541a:	e6f1      	b.n	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800541c:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005422:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542c:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8005430:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005438:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 800543c:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005440:	f042 0204 	orr.w	r2, r2, #4
 8005444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005448:	b003      	add	sp, #12
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 8005450:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8005458:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005460:	430a      	orrs	r2, r1
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005466:	e6cb      	b.n	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800546a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
    __HAL_UNLOCK(hi2c);
 8005478:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
    return HAL_OK;
 8005480:	e6be      	b.n	8005200 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8005482:	bf00      	nop
 8005484:	20000200 	.word	0x20000200
 8005488:	ffff0000 	.word	0xffff0000

0800548c <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 800548c:	2300      	movs	r3, #0
void DS3231_Update(void) {
 800548e:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8005490:	4c0f      	ldr	r4, [pc, #60]	; (80054d0 <DS3231_Update+0x44>)
void DS3231_Update(void) {
 8005492:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8005494:	f10d 0107 	add.w	r1, sp, #7
 8005498:	2201      	movs	r2, #1
 800549a:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 800549c:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 80054a0:	f7ff fea6 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80054a4:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 80054a8:	2213      	movs	r2, #19
 80054aa:	20d0      	movs	r0, #208	; 0xd0
 80054ac:	f7ff fc6a 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 80054b0:	e9d4 0229 	ldrd	r0, r2, [r4, #164]	; 0xa4
 80054b4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80054b8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80054bc:	f8c4 00b9 	str.w	r0, [r4, #185]	; 0xb9
 80054c0:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
 80054c4:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
 80054c8:	f8c4 30c1 	str.w	r3, [r4, #193]	; 0xc1
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 80054cc:	b002      	add	sp, #8
 80054ce:	bd10      	pop	{r4, pc}
 80054d0:	20000200 	.word	0x20000200

080054d4 <LCD_Char.constprop.0.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80054da:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 80054dc:	b085      	sub	sp, #20
 80054de:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 80054e2:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80054e6:	b38b      	cbz	r3, 800554c <LCD_Char.constprop.0.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 80054e8:	2600      	movs	r6, #0
 80054ea:	4691      	mov	r9, r2
 80054ec:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80054ee:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80054f0:	f899 1002 	ldrb.w	r1, [r9, #2]
 80054f4:	b351      	cbz	r1, 800554c <LCD_Char.constprop.0.isra.0+0x78>
 80054f6:	2400      	movs	r4, #0
 80054f8:	4622      	mov	r2, r4
		{
			if(bit == 0)
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	d045      	beq.n	800558a <LCD_Char.constprop.0.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 80054fe:	4633      	mov	r3, r6
 8005500:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8005502:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8005506:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 800550a:	d022      	beq.n	8005552 <LCD_Char.constprop.0.isra.0+0x7e>
				set_pixels++;
 800550c:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800550e:	3401      	adds	r4, #1
 8005510:	b2e4      	uxtb	r4, r4
 8005512:	42a1      	cmp	r1, r4
 8005514:	d8f1      	bhi.n	80054fa <LCD_Char.constprop.0.isra.0+0x26>
		}
		if (set_pixels > 0)
 8005516:	b18a      	cbz	r2, 800553c <LCD_Char.constprop.0.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8005520:	9b02      	ldr	r3, [sp, #8]
 8005522:	4420      	add	r0, r4
 8005524:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8005528:	1a80      	subs	r0, r0, r2
 800552a:	4418      	add	r0, r3
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	4451      	add	r1, sl
 8005530:	4419      	add	r1, r3
 8005532:	b280      	uxth	r0, r0
 8005534:	2301      	movs	r3, #1
 8005536:	b289      	uxth	r1, r1
 8005538:	f7fb fb48 	bl	8000bcc <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800553c:	f899 3003 	ldrb.w	r3, [r9, #3]
 8005540:	f10a 0a01 	add.w	sl, sl, #1
 8005544:	fa5f fa8a 	uxtb.w	sl, sl
 8005548:	459a      	cmp	sl, r3
 800554a:	d3d1      	bcc.n	80054f0 <LCD_Char.constprop.0.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 800554c:	b005      	add	sp, #20
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8005552:	2a00      	cmp	r2, #0
 8005554:	d0db      	beq.n	800550e <LCD_Char.constprop.0.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005556:	f999 1006 	ldrsb.w	r1, [r9, #6]
 800555a:	f999 0005 	ldrsb.w	r0, [r9, #5]
 800555e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005562:	4451      	add	r1, sl
 8005564:	4461      	add	r1, ip
 8005566:	4420      	add	r0, r4
 8005568:	f8dd c008 	ldr.w	ip, [sp, #8]
 800556c:	1a80      	subs	r0, r0, r2
 800556e:	4460      	add	r0, ip
 8005570:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8005574:	b289      	uxth	r1, r1
 8005576:	2301      	movs	r3, #1
 8005578:	f8cd c000 	str.w	ip, [sp]
 800557c:	b280      	uxth	r0, r0
 800557e:	f7fb fb25 	bl	8000bcc <LCD_Rect_Fill>
				set_pixels = 0;
 8005582:	462a      	mov	r2, r5
 8005584:	f899 1002 	ldrb.w	r1, [r9, #2]
 8005588:	e7c1      	b.n	800550e <LCD_Char.constprop.0.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800558a:	f108 0001 	add.w	r0, r8, #1
 800558e:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8005592:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005594:	2640      	movs	r6, #64	; 0x40
 8005596:	fa1f f880 	uxth.w	r8, r0
 800559a:	e7b2      	b.n	8005502 <LCD_Char.constprop.0.isra.0+0x2e>

0800559c <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800559c:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a0:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	4c32      	ldr	r4, [pc, #200]	; (800566c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055b0:	f884 5105 	strb.w	r5, [r4, #261]	; 0x105
    huart->TxXferSize = Size;
 80055b4:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80055b8:	4605      	mov	r5, r0
 80055ba:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 80055bc:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c0:	d049      	beq.n	8005656 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 80055c2:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 80055c4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80055c6:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    __HAL_UNLOCK(huart);
 80055ca:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    while (huart->TxXferCount > 0U)
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d047      	beq.n	8005664 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80055d8:	e003      	b.n	80055e2 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 80055da:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055dc:	1a12      	subs	r2, r2, r0
 80055de:	2a64      	cmp	r2, #100	; 0x64
 80055e0:	d823      	bhi.n	800562a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	680b      	ldr	r3, [r1, #0]
 80055e4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80055e8:	d0f7      	beq.n	80055da <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 80055ea:	b37d      	cbz	r5, 800564c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055f0:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 80055f2:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    while (huart->TxXferCount > 0U)
 80055fe:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ec      	bne.n	80055e2 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005608:	680b      	ldr	r3, [r1, #0]
 800560a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800560e:	d107      	bne.n	8005620 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 8005610:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005612:	1a12      	subs	r2, r2, r0
 8005614:	2a64      	cmp	r2, #100	; 0x64
 8005616:	d808      	bhi.n	800562a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005618:	680b      	ldr	r3, [r1, #0]
 800561a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800561e:	d0f7      	beq.n	8005610 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8005620:	2320      	movs	r3, #32
 8005622:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
}
 8005626:	bc30      	pop	{r4, r5}
 8005628:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 800562a:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562c:	68ca      	ldr	r2, [r1, #12]
 800562e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005632:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005634:	694a      	ldr	r2, [r1, #20]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800563c:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
        __HAL_UNLOCK(huart);
 8005640:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        huart->RxState = HAL_UART_STATE_READY;
 8005644:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
}
 8005648:	bc30      	pop	{r4, r5}
 800564a:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564c:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	e7cc      	b.n	80055f0 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005656:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800565a:	2a00      	cmp	r2, #0
 800565c:	d1b1      	bne.n	80055c2 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 800565e:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 8005660:	4615      	mov	r5, r2
 8005662:	e7af      	b.n	80055c4 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005664:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8005668:	e7d6      	b.n	8005618 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 800566a:	bf00      	nop
 800566c:	20000200 	.word	0x20000200

08005670 <UART_Receive_IT.part.0.constprop.0.isra.0>:
  * @brief  Receives an amount of data in non blocking mode
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005670:	b530      	push	{r4, r5, lr}
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005672:	4c4b      	ldr	r4, [pc, #300]	; (80057a0 <UART_Receive_IT.part.0.constprop.0.isra.0+0x130>)
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005674:	b083      	sub	sp, #12
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005676:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d042      	beq.n	8005706 <UART_Receive_IT.part.0.constprop.0.isra.0+0x96>
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
      pdata16bits  = NULL;

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005680:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005684:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005688:	430b      	orrs	r3, r1
 800568a:	d135      	bne.n	80056f8 <UART_Receive_IT.part.0.constprop.0.isra.0+0x88>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800568c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	7013      	strb	r3, [r2, #0]
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
      huart->pRxBuffPtr += 1U;
 8005694:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8005698:	3301      	adds	r3, #1
 800569a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    }

    if (--huart->RxXferCount == 0U)
 800569e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
 80056aa:	bb1b      	cbnz	r3, 80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ac:	2020      	movs	r0, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056ae:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80056b2:	68d1      	ldr	r1, [r2, #12]
 80056b4:	f021 0120 	bic.w	r1, r1, #32
 80056b8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056ba:	68d1      	ldr	r1, [r2, #12]
 80056bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80056c0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056c2:	6951      	ldr	r1, [r2, #20]
 80056c4:	f021 0101 	bic.w	r1, r1, #1
 80056c8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80056ca:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ce:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 80056d2:	2901      	cmp	r1, #1
 80056d4:	d127      	bne.n	8005726 <UART_Receive_IT.part.0.constprop.0.isra.0+0xb6>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	68d1      	ldr	r1, [r2, #12]
 80056dc:	f021 0110 	bic.w	r1, r1, #16
 80056e0:	60d1      	str	r1, [r2, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056e2:	6811      	ldr	r1, [r2, #0]
 80056e4:	06c9      	lsls	r1, r1, #27
 80056e6:	d505      	bpl.n	80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	6853      	ldr	r3, [r2, #4]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	9b01      	ldr	r3, [sp, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056f4:	b003      	add	sp, #12
 80056f6:	bd30      	pop	{r4, r5, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056f8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005702:	7013      	strb	r3, [r2, #0]
 8005704:	e7c6      	b.n	8005694 <UART_Receive_IT.part.0.constprop.0.isra.0+0x24>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005706:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d145      	bne.n	800579a <UART_Receive_IT.part.0.constprop.0.isra.0+0x12a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800570e:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8005712:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8005720:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8005724:	e7bb      	b.n	800569e <UART_Receive_IT.part.0.constprop.0.isra.0+0x2e>
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
	uint8_t i;
	if (huart->Instance == USART1) {
 8005726:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x134>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d1e3      	bne.n	80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>
		if (rx_index == 0) {
 800572c:	f894 510c 	ldrb.w	r5, [r4, #268]	; 0x10c
 8005730:	b925      	cbnz	r5, 800573c <UART_Receive_IT.part.0.constprop.0.isra.0+0xcc>
			for (i = 0; i < 255; i++) {
				rx_buffer[i] = 0;
 8005732:	22ff      	movs	r2, #255	; 0xff
 8005734:	4629      	mov	r1, r5
 8005736:	481c      	ldr	r0, [pc, #112]	; (80057a8 <UART_Receive_IT.part.0.constprop.0.isra.0+0x138>)
 8005738:	f003 fed2 	bl	80094e0 <memset>
  if (huart->RxState == HAL_UART_STATE_READY)
 800573c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
			}
		}
		rx_buffer[rx_index++] = rx_data;
 8005740:	f894 2210 	ldrb.w	r2, [r4, #528]	; 0x210
 8005744:	1c69      	adds	r1, r5, #1
 8005746:	2b20      	cmp	r3, #32
 8005748:	4425      	add	r5, r4
 800574a:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
 800574e:	f885 2110 	strb.w	r2, [r5, #272]	; 0x110
 8005752:	d1cf      	bne.n	80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>
    __HAL_LOCK(huart);
 8005754:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005758:	2b01      	cmp	r3, #1
 800575a:	d0cb      	beq.n	80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	2100      	movs	r1, #0
  huart->RxXferSize = Size;
 800575e:	2001      	movs	r0, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005760:	2222      	movs	r2, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x134>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
  huart->RxXferCount = Size;
 8005768:	f8a4 00f6 	strh.w	r0, [r4, #246]	; 0xf6
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005770:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005774:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 8005776:	4d0d      	ldr	r5, [pc, #52]	; (80057ac <UART_Receive_IT.part.0.constprop.0.isra.0+0x13c>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 800577c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
  huart->RxXferSize = Size;
 8005780:	f8a4 00f4 	strh.w	r0, [r4, #244]	; 0xf4
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005784:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005786:	695a      	ldr	r2, [r3, #20]
  __HAL_UNLOCK(huart);
 8005788:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800578c:	4302      	orrs	r2, r0
 800578e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	f042 0220 	orr.w	r2, r2, #32
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	e7ac      	b.n	80056f4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x84>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800579a:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800579e:	e775      	b.n	800568c <UART_Receive_IT.part.0.constprop.0.isra.0+0x1c>
 80057a0:	20000200 	.word	0x20000200
 80057a4:	40013800 	.word	0x40013800
 80057a8:	20000310 	.word	0x20000310
 80057ac:	20000410 	.word	0x20000410

080057b0 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80057b0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057b2:	4d10      	ldr	r5, [pc, #64]	; (80057f4 <HAL_InitTick.isra.0+0x44>)
 80057b4:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <HAL_InitTick.isra.0+0x48>)
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057be:	3b01      	subs	r3, #1
 80057c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c4:	d20e      	bcs.n	80057e4 <HAL_InitTick.isra.0+0x34>
 80057c6:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057c8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057cc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d2:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d4:	4e09      	ldr	r6, [pc, #36]	; (80057fc <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057d6:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057d8:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057da:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057de:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e0:	6111      	str	r1, [r2, #16]
 80057e2:	d900      	bls.n	80057e6 <HAL_InitTick.isra.0+0x36>
}
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057e6:	4621      	mov	r1, r4
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	f7fc fbe4 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 80057f0:	606c      	str	r4, [r5, #4]
}
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	20000000 	.word	0x20000000
 80057f8:	10624dd3 	.word	0x10624dd3
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <HAL_TIM_PWM_ConfigChannel.constprop.0>:
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
 8005800:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005802:	4c1f      	ldr	r4, [pc, #124]	; (8005880 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x80>)
 8005804:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005808:	2b01      	cmp	r3, #1
 800580a:	d036      	beq.n	800587a <HAL_TIM_PWM_ConfigChannel.constprop.0+0x7a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800580c:	6863      	ldr	r3, [r4, #4]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580e:	6806      	ldr	r6, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005818:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800581a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800581c:	6999      	ldr	r1, [r3, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800581e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005822:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005826:	4331      	orrs	r1, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005828:	6886      	ldr	r6, [r0, #8]
 800582a:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800582c:	4e15      	ldr	r6, [pc, #84]	; (8005884 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x84>)
 800582e:	42b3      	cmp	r3, r6
 8005830:	d016      	beq.n	8005860 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x60>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	605d      	str	r5, [r3, #4]
  __HAL_UNLOCK(htim);
 8005834:	2500      	movs	r5, #0

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	6199      	str	r1, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005838:	6841      	ldr	r1, [r0, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800583a:	6900      	ldr	r0, [r0, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800583c:	6359      	str	r1, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005840:	6999      	ldr	r1, [r3, #24]
 8005842:	f041 0108 	orr.w	r1, r1, #8
 8005846:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	f021 0104 	bic.w	r1, r1, #4
 800584e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	4302      	orrs	r2, r0
  return HAL_OK;
 8005854:	4628      	mov	r0, r5
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005856:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005858:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
}
 800585c:	bcf0      	pop	{r4, r5, r6, r7}
 800585e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005860:	68c6      	ldr	r6, [r0, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005862:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005866:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005868:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800586c:	e9d0 6705 	ldrd	r6, r7, [r0, #20]
 8005870:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005872:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005876:	4335      	orrs	r5, r6
 8005878:	e7db      	b.n	8005832 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x32>
  __HAL_LOCK(htim);
 800587a:	2002      	movs	r0, #2
 800587c:	e7ee      	b.n	800585c <HAL_TIM_PWM_ConfigChannel.constprop.0+0x5c>
 800587e:	bf00      	nop
 8005880:	20000200 	.word	0x20000200
 8005884:	40012c00 	.word	0x40012c00

08005888 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 800588c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005890:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005892:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005894:	460d      	mov	r5, r1
 8005896:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005898:	f000 feac 	bl	80065f4 <strlen>
 800589c:	b3b8      	cbz	r0, 800590e <LCD_Font.constprop.0+0x86>
 800589e:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80058a0:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80058a2:	2691      	movs	r6, #145	; 0x91
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80058a4:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80058a6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005914 <LCD_Font.constprop.0+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <LCD_Font.constprop.0+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80058ac:	f10d 0b08 	add.w	fp, sp, #8
 80058b0:	e01d      	b.n	80058ee <LCD_Font.constprop.0+0x66>
 80058b2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80058b6:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80058b8:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 80058bc:	d812      	bhi.n	80058e4 <LCD_Font.constprop.0+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80058be:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80058c2:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80058c6:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80058c8:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80058cc:	4638      	mov	r0, r7
 80058ce:	4631      	mov	r1, r6
 80058d0:	f7ff fe00 	bl	80054d4 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 80058d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80058d8:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 80058da:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80058dc:	f000 fe8a 	bl	80065f4 <strlen>
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <LCD_Font.constprop.0+0x90>)
			cursor_x += glyph.xAdvance * size;
 80058e2:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80058e4:	3401      	adds	r4, #1
 80058e6:	b2a4      	uxth	r4, r4
 80058e8:	4284      	cmp	r4, r0
 80058ea:	4622      	mov	r2, r4
 80058ec:	d20f      	bcs.n	800590e <LCD_Font.constprop.0+0x86>
		char c = text[text_pos];
 80058ee:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80058f2:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 80058f6:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80058fa:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 80058fc:	d1d9      	bne.n	80058b2 <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80058fe:	3401      	adds	r4, #1
 8005900:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005902:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005904:	4284      	cmp	r4, r0
			cursor_x = x;
 8005906:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005908:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800590a:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800590c:	d3ef      	bcc.n	80058ee <LCD_Font.constprop.0+0x66>
		}
	}
}
 800590e:	b005      	add	sp, #20
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	0800de80 	.word	0x0800de80
 8005918:	0801d3d8 	.word	0x0801d3d8

0800591c <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8005920:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005924:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005926:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005928:	460d      	mov	r5, r1
 800592a:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800592c:	f000 fe62 	bl	80065f4 <strlen>
 8005930:	b3b8      	cbz	r0, 80059a2 <LCD_Font.constprop.1+0x86>
 8005932:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005934:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8005936:	265a      	movs	r6, #90	; 0x5a
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005938:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800593a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80059a8 <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005940:	f10d 0b08 	add.w	fp, sp, #8
 8005944:	e01d      	b.n	8005982 <LCD_Font.constprop.1+0x66>
 8005946:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800594a:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800594c:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 8005950:	d812      	bhi.n	8005978 <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005952:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005956:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800595a:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800595c:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005960:	4638      	mov	r0, r7
 8005962:	4631      	mov	r1, r6
 8005964:	f7ff fdb6 	bl	80054d4 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005968:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800596c:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 800596e:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005970:	f000 fe40 	bl	80065f4 <strlen>
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005976:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005978:	3401      	adds	r4, #1
 800597a:	b2a4      	uxth	r4, r4
 800597c:	4284      	cmp	r4, r0
 800597e:	4622      	mov	r2, r4
 8005980:	d20f      	bcs.n	80059a2 <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 8005982:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005986:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800598a:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800598e:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005990:	d1d9      	bne.n	8005946 <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005992:	3401      	adds	r4, #1
 8005994:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005996:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005998:	4284      	cmp	r4, r0
			cursor_x = x;
 800599a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800599c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800599e:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80059a0:	d3ef      	bcc.n	8005982 <LCD_Font.constprop.1+0x66>
}
 80059a2:	b005      	add	sp, #20
 80059a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a8:	0800de80 	.word	0x0800de80
 80059ac:	0801d3d8 	.word	0x0801d3d8

080059b0 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80059b4:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80059b8:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80059ba:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80059bc:	460d      	mov	r5, r1
 80059be:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80059c0:	f000 fe18 	bl	80065f4 <strlen>
 80059c4:	b3b8      	cbz	r0, 8005a36 <LCD_Font.constprop.2+0x86>
 80059c6:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80059c8:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80059ca:	2628      	movs	r6, #40	; 0x28
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80059cc:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80059ce:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005a3c <LCD_Font.constprop.2+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <LCD_Font.constprop.2+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80059d4:	f10d 0b08 	add.w	fp, sp, #8
 80059d8:	e01d      	b.n	8005a16 <LCD_Font.constprop.2+0x66>
 80059da:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80059de:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80059e0:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 80059e4:	d812      	bhi.n	8005a0c <LCD_Font.constprop.2+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80059e6:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80059ea:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80059ee:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80059f0:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80059f4:	4638      	mov	r0, r7
 80059f6:	4631      	mov	r1, r6
 80059f8:	f7ff fd6c 	bl	80054d4 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 80059fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a00:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8005a02:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a04:	f000 fdf6 	bl	80065f4 <strlen>
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <LCD_Font.constprop.2+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005a0a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a0c:	3401      	adds	r4, #1
 8005a0e:	b2a4      	uxth	r4, r4
 8005a10:	4284      	cmp	r4, r0
 8005a12:	4622      	mov	r2, r4
 8005a14:	d20f      	bcs.n	8005a36 <LCD_Font.constprop.2+0x86>
		char c = text[text_pos];
 8005a16:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005a1a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8005a1e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005a22:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005a24:	d1d9      	bne.n	80059da <LCD_Font.constprop.2+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a26:	3401      	adds	r4, #1
 8005a28:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005a2a:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a2c:	4284      	cmp	r4, r0
			cursor_x = x;
 8005a2e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a30:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005a32:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a34:	d3ef      	bcc.n	8005a16 <LCD_Font.constprop.2+0x66>
}
 8005a36:	b005      	add	sp, #20
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	0800de80 	.word	0x0800de80
 8005a40:	0801d3d8 	.word	0x0801d3d8

08005a44 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8005a48:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005a4c:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a4e:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005a50:	460d      	mov	r5, r1
 8005a52:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a54:	f000 fdce 	bl	80065f4 <strlen>
 8005a58:	b3b8      	cbz	r0, 8005aca <LCD_Font.constprop.3+0x86>
 8005a5a:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005a5c:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8005a5e:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a60:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005a62:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005ad0 <LCD_Font.constprop.3+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <LCD_Font.constprop.3+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005a68:	f10d 0b08 	add.w	fp, sp, #8
 8005a6c:	e01d      	b.n	8005aaa <LCD_Font.constprop.3+0x66>
 8005a6e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8005a72:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005a74:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
		else if(c >= font.first && c <= font.last && c != '\r')
 8005a78:	d812      	bhi.n	8005aa0 <LCD_Font.constprop.3+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005a7a:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005a82:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005a84:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005a88:	4638      	mov	r0, r7
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	f7ff fd22 	bl	80054d4 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005a90:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a94:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8005a96:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005a98:	f000 fdac 	bl	80065f4 <strlen>
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <LCD_Font.constprop.3+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005a9e:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	b2a4      	uxth	r4, r4
 8005aa4:	4284      	cmp	r4, r0
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	d20f      	bcs.n	8005aca <LCD_Font.constprop.3+0x86>
		char c = text[text_pos];
 8005aaa:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005aae:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8005ab2:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005ab6:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005ab8:	d1d9      	bne.n	8005a6e <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005aba:	3401      	adds	r4, #1
 8005abc:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005abe:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005ac0:	4284      	cmp	r4, r0
			cursor_x = x;
 8005ac2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005ac4:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005ac6:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005ac8:	d3ef      	bcc.n	8005aaa <LCD_Font.constprop.3+0x66>
}
 8005aca:	b005      	add	sp, #20
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad0:	0800de80 	.word	0x0800de80
 8005ad4:	0800e4c4 	.word	0x0800e4c4

08005ad8 <LCD_Font.constprop.4>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8005adc:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005ae0:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005ae2:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 8005ae8:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005aea:	f000 fd83 	bl	80065f4 <strlen>
 8005aee:	b3b0      	cbz	r0, 8005b5e <LCD_Font.constprop.4+0x86>
 8005af0:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005af2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005af4:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005af6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005b64 <LCD_Font.constprop.4+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <LCD_Font.constprop.4+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005afc:	f10d 0b08 	add.w	fp, sp, #8
 8005b00:	e01d      	b.n	8005b3e <LCD_Font.constprop.4+0x66>
 8005b02:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8005b06:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005b08:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 8005b0c:	d812      	bhi.n	8005b34 <LCD_Font.constprop.4+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005b0e:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005b12:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005b16:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005b18:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7ff fcd8 	bl	80054d4 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005b24:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b28:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 8005b2a:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b2c:	f000 fd62 	bl	80065f4 <strlen>
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <LCD_Font.constprop.4+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005b32:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b34:	3401      	adds	r4, #1
 8005b36:	b2a4      	uxth	r4, r4
 8005b38:	4284      	cmp	r4, r0
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	d20f      	bcs.n	8005b5e <LCD_Font.constprop.4+0x86>
		char c = text[text_pos];
 8005b3e:	f816 c002 	ldrb.w	ip, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005b42:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8005b46:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005b4a:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005b4c:	d1d9      	bne.n	8005b02 <LCD_Font.constprop.4+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b4e:	3401      	adds	r4, #1
 8005b50:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005b52:	3539      	adds	r5, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b54:	4284      	cmp	r4, r0
			cursor_x = x;
 8005b56:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b58:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005b5a:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005b5c:	d3ef      	bcc.n	8005b3e <LCD_Font.constprop.4+0x66>
}
 8005b5e:	b005      	add	sp, #20
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	0800de80 	.word	0x0800de80
 8005b68:	0801d3d8 	.word	0x0801d3d8

08005b6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b6c:	e7fe      	b.n	8005b6c <NMI_Handler>
 8005b6e:	bf00      	nop

08005b70 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b70:	e7fe      	b.n	8005b70 <HardFault_Handler>
 8005b72:	bf00      	nop

08005b74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b74:	e7fe      	b.n	8005b74 <MemManage_Handler>
 8005b76:	bf00      	nop

08005b78 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b78:	e7fe      	b.n	8005b78 <BusFault_Handler>
 8005b7a:	bf00      	nop

08005b7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b7c:	e7fe      	b.n	8005b7c <UsageFault_Handler>
 8005b7e:	bf00      	nop

08005b80 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop

08005b84 <DebugMon_Handler>:
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop

08005b88 <PendSV_Handler>:
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop

08005b8c <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005b8c:	4a02      	ldr	r2, [pc, #8]	; (8005b98 <SysTick_Handler+0xc>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000200 	.word	0x20000200

08005b9c <DMA1_Channel2_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b9c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b9e:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <DMA1_Channel2_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005ba0:	b470      	push	{r4, r5, r6}
 8005ba2:	f8d3 6360 	ldr.w	r6, [r3, #864]	; 0x360
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ba6:	f8d3 0364 	ldr.w	r0, [r3, #868]	; 0x364
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005baa:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005bac:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bb0:	4081      	lsls	r1, r0
 8005bb2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005bb4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bb6:	d01f      	beq.n	8005bf8 <DMA1_Channel2_IRQHandler+0x5c>
 8005bb8:	0769      	lsls	r1, r5, #29
 8005bba:	d51d      	bpl.n	8005bf8 <DMA1_Channel2_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	0688      	lsls	r0, r1, #26
 8005bc0:	d403      	bmi.n	8005bca <DMA1_Channel2_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bc2:	6811      	ldr	r1, [r2, #0]
 8005bc4:	f021 0104 	bic.w	r1, r1, #4
 8005bc8:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005bca:	4943      	ldr	r1, [pc, #268]	; (8005cd8 <DMA1_Channel2_IRQHandler+0x13c>)
 8005bcc:	428a      	cmp	r2, r1
 8005bce:	d060      	beq.n	8005c92 <DMA1_Channel2_IRQHandler+0xf6>
 8005bd0:	3114      	adds	r1, #20
 8005bd2:	428a      	cmp	r2, r1
 8005bd4:	d067      	beq.n	8005ca6 <DMA1_Channel2_IRQHandler+0x10a>
 8005bd6:	3114      	adds	r1, #20
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	d06e      	beq.n	8005cba <DMA1_Channel2_IRQHandler+0x11e>
 8005bdc:	3114      	adds	r1, #20
 8005bde:	428a      	cmp	r2, r1
 8005be0:	d071      	beq.n	8005cc6 <DMA1_Channel2_IRQHandler+0x12a>
 8005be2:	3114      	adds	r1, #20
 8005be4:	428a      	cmp	r2, r1
 8005be6:	d063      	beq.n	8005cb0 <DMA1_Channel2_IRQHandler+0x114>
 8005be8:	3114      	adds	r1, #20
 8005bea:	428a      	cmp	r2, r1
 8005bec:	bf0c      	ite	eq
 8005bee:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005bf2:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005bf6:	e04d      	b.n	8005c94 <DMA1_Channel2_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	4081      	lsls	r1, r0
 8005bfc:	4221      	tst	r1, r4
 8005bfe:	d022      	beq.n	8005c46 <DMA1_Channel2_IRQHandler+0xaa>
 8005c00:	07a9      	lsls	r1, r5, #30
 8005c02:	d520      	bpl.n	8005c46 <DMA1_Channel2_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c04:	6811      	ldr	r1, [r2, #0]
 8005c06:	0688      	lsls	r0, r1, #26
 8005c08:	d406      	bmi.n	8005c18 <DMA1_Channel2_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	f021 010a 	bic.w	r1, r1, #10
 8005c12:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005c14:	f883 0345 	strb.w	r0, [r3, #837]	; 0x345
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c18:	492f      	ldr	r1, [pc, #188]	; (8005cd8 <DMA1_Channel2_IRQHandler+0x13c>)
 8005c1a:	428a      	cmp	r2, r1
 8005c1c:	d02d      	beq.n	8005c7a <DMA1_Channel2_IRQHandler+0xde>
 8005c1e:	3114      	adds	r1, #20
 8005c20:	428a      	cmp	r2, r1
 8005c22:	d048      	beq.n	8005cb6 <DMA1_Channel2_IRQHandler+0x11a>
 8005c24:	3114      	adds	r1, #20
 8005c26:	428a      	cmp	r2, r1
 8005c28:	d04a      	beq.n	8005cc0 <DMA1_Channel2_IRQHandler+0x124>
 8005c2a:	3114      	adds	r1, #20
 8005c2c:	428a      	cmp	r2, r1
 8005c2e:	d03c      	beq.n	8005caa <DMA1_Channel2_IRQHandler+0x10e>
 8005c30:	3114      	adds	r1, #20
 8005c32:	428a      	cmp	r2, r1
 8005c34:	d04a      	beq.n	8005ccc <DMA1_Channel2_IRQHandler+0x130>
 8005c36:	3114      	adds	r1, #20
 8005c38:	428a      	cmp	r2, r1
 8005c3a:	bf0c      	ite	eq
 8005c3c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005c40:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005c44:	e01a      	b.n	8005c7c <DMA1_Channel2_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c46:	2108      	movs	r1, #8
 8005c48:	4081      	lsls	r1, r0
 8005c4a:	4221      	tst	r1, r4
 8005c4c:	d01f      	beq.n	8005c8e <DMA1_Channel2_IRQHandler+0xf2>
 8005c4e:	0729      	lsls	r1, r5, #28
 8005c50:	d51d      	bpl.n	8005c8e <DMA1_Channel2_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c52:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c54:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c58:	f021 010e 	bic.w	r1, r1, #14
 8005c5c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c5e:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 8005c60:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c64:	fa02 f000 	lsl.w	r0, r2, r0
 8005c68:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c6a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    __HAL_UNLOCK(hdma);
 8005c6e:	f8a3 4344 	strh.w	r4, [r3, #836]	; 0x344
    if (hdma->XferErrorCallback != NULL)
 8005c72:	b161      	cbz	r1, 8005c8e <DMA1_Channel2_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005c74:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c76:	4819      	ldr	r0, [pc, #100]	; (8005cdc <DMA1_Channel2_IRQHandler+0x140>)
 8005c78:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c7a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005c7c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c7e:	4c18      	ldr	r4, [pc, #96]	; (8005ce0 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005c80:	f8d3 134c 	ldr.w	r1, [r3, #844]	; 0x34c
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c84:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005c86:	f883 0344 	strb.w	r0, [r3, #836]	; 0x344
    if(hdma->XferCpltCallback != NULL)
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d1f2      	bne.n	8005c74 <DMA1_Channel2_IRQHandler+0xd8>
 8005c8e:	bc70      	pop	{r4, r5, r6}
 8005c90:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c92:	2204      	movs	r2, #4
 8005c94:	4912      	ldr	r1, [pc, #72]	; (8005ce0 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005c96:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c9a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f6      	beq.n	8005c8e <DMA1_Channel2_IRQHandler+0xf2>
 8005ca0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005ca2:	480e      	ldr	r0, [pc, #56]	; (8005cdc <DMA1_Channel2_IRQHandler+0x140>)
 8005ca4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ca6:	2240      	movs	r2, #64	; 0x40
 8005ca8:	e7f4      	b.n	8005c94 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cae:	e7e5      	b.n	8005c7c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005cb4:	e7ee      	b.n	8005c94 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	e7e0      	b.n	8005c7c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cbe:	e7e9      	b.n	8005c94 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	e7da      	b.n	8005c7c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cca:	e7e3      	b.n	8005c94 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ccc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cd0:	e7d4      	b.n	8005c7c <DMA1_Channel2_IRQHandler+0xe0>
 8005cd2:	bf00      	nop
 8005cd4:	20000200 	.word	0x20000200
 8005cd8:	40020008 	.word	0x40020008
 8005cdc:	20000524 	.word	0x20000524
 8005ce0:	40020000 	.word	0x40020000

08005ce4 <DMA1_Channel4_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ce4:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ce6:	4b4d      	ldr	r3, [pc, #308]	; (8005e1c <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005ce8:	b470      	push	{r4, r5, r6}
 8005cea:	f8d3 62d8 	ldr.w	r6, [r3, #728]	; 0x2d8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005cee:	f8d3 02dc 	ldr.w	r0, [r3, #732]	; 0x2dc
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cf2:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005cf4:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005cf8:	4081      	lsls	r1, r0
 8005cfa:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005cfc:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005cfe:	d01f      	beq.n	8005d40 <DMA1_Channel4_IRQHandler+0x5c>
 8005d00:	0769      	lsls	r1, r5, #29
 8005d02:	d51d      	bpl.n	8005d40 <DMA1_Channel4_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d04:	6811      	ldr	r1, [r2, #0]
 8005d06:	0688      	lsls	r0, r1, #26
 8005d08:	d403      	bmi.n	8005d12 <DMA1_Channel4_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	f021 0104 	bic.w	r1, r1, #4
 8005d10:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d12:	4943      	ldr	r1, [pc, #268]	; (8005e20 <DMA1_Channel4_IRQHandler+0x13c>)
 8005d14:	428a      	cmp	r2, r1
 8005d16:	d060      	beq.n	8005dda <DMA1_Channel4_IRQHandler+0xf6>
 8005d18:	3114      	adds	r1, #20
 8005d1a:	428a      	cmp	r2, r1
 8005d1c:	d067      	beq.n	8005dee <DMA1_Channel4_IRQHandler+0x10a>
 8005d1e:	3114      	adds	r1, #20
 8005d20:	428a      	cmp	r2, r1
 8005d22:	d06e      	beq.n	8005e02 <DMA1_Channel4_IRQHandler+0x11e>
 8005d24:	3114      	adds	r1, #20
 8005d26:	428a      	cmp	r2, r1
 8005d28:	d071      	beq.n	8005e0e <DMA1_Channel4_IRQHandler+0x12a>
 8005d2a:	3114      	adds	r1, #20
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d063      	beq.n	8005df8 <DMA1_Channel4_IRQHandler+0x114>
 8005d30:	3114      	adds	r1, #20
 8005d32:	428a      	cmp	r2, r1
 8005d34:	bf0c      	ite	eq
 8005d36:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005d3a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005d3e:	e04d      	b.n	8005ddc <DMA1_Channel4_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005d40:	2102      	movs	r1, #2
 8005d42:	4081      	lsls	r1, r0
 8005d44:	4221      	tst	r1, r4
 8005d46:	d022      	beq.n	8005d8e <DMA1_Channel4_IRQHandler+0xaa>
 8005d48:	07a9      	lsls	r1, r5, #30
 8005d4a:	d520      	bpl.n	8005d8e <DMA1_Channel4_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d4c:	6811      	ldr	r1, [r2, #0]
 8005d4e:	0688      	lsls	r0, r1, #26
 8005d50:	d406      	bmi.n	8005d60 <DMA1_Channel4_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005d52:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	f021 010a 	bic.w	r1, r1, #10
 8005d5a:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	f883 02bd 	strb.w	r0, [r3, #701]	; 0x2bd
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d60:	492f      	ldr	r1, [pc, #188]	; (8005e20 <DMA1_Channel4_IRQHandler+0x13c>)
 8005d62:	428a      	cmp	r2, r1
 8005d64:	d02d      	beq.n	8005dc2 <DMA1_Channel4_IRQHandler+0xde>
 8005d66:	3114      	adds	r1, #20
 8005d68:	428a      	cmp	r2, r1
 8005d6a:	d048      	beq.n	8005dfe <DMA1_Channel4_IRQHandler+0x11a>
 8005d6c:	3114      	adds	r1, #20
 8005d6e:	428a      	cmp	r2, r1
 8005d70:	d04a      	beq.n	8005e08 <DMA1_Channel4_IRQHandler+0x124>
 8005d72:	3114      	adds	r1, #20
 8005d74:	428a      	cmp	r2, r1
 8005d76:	d03c      	beq.n	8005df2 <DMA1_Channel4_IRQHandler+0x10e>
 8005d78:	3114      	adds	r1, #20
 8005d7a:	428a      	cmp	r2, r1
 8005d7c:	d04a      	beq.n	8005e14 <DMA1_Channel4_IRQHandler+0x130>
 8005d7e:	3114      	adds	r1, #20
 8005d80:	428a      	cmp	r2, r1
 8005d82:	bf0c      	ite	eq
 8005d84:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005d88:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005d8c:	e01a      	b.n	8005dc4 <DMA1_Channel4_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005d8e:	2108      	movs	r1, #8
 8005d90:	4081      	lsls	r1, r0
 8005d92:	4221      	tst	r1, r4
 8005d94:	d01f      	beq.n	8005dd6 <DMA1_Channel4_IRQHandler+0xf2>
 8005d96:	0729      	lsls	r1, r5, #28
 8005d98:	d51d      	bpl.n	8005dd6 <DMA1_Channel4_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005d9c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da0:	f021 010e 	bic.w	r1, r1, #14
 8005da4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005da6:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005da8:	f8d3 12cc 	ldr.w	r1, [r3, #716]	; 0x2cc
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005dac:	fa02 f000 	lsl.w	r0, r2, r0
 8005db0:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005db2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    __HAL_UNLOCK(hdma);
 8005db6:	f8a3 42bc 	strh.w	r4, [r3, #700]	; 0x2bc
    if (hdma->XferErrorCallback != NULL)
 8005dba:	b161      	cbz	r1, 8005dd6 <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005dbc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005dbe:	4819      	ldr	r0, [pc, #100]	; (8005e24 <DMA1_Channel4_IRQHandler+0x140>)
 8005dc0:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dc2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005dc4:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dc6:	4c18      	ldr	r4, [pc, #96]	; (8005e28 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005dc8:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dcc:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005dce:	f883 02bc 	strb.w	r0, [r3, #700]	; 0x2bc
    if(hdma->XferCpltCallback != NULL)
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d1f2      	bne.n	8005dbc <DMA1_Channel4_IRQHandler+0xd8>
 8005dd6:	bc70      	pop	{r4, r5, r6}
 8005dd8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dda:	2204      	movs	r2, #4
 8005ddc:	4912      	ldr	r1, [pc, #72]	; (8005e28 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005de2:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f6      	beq.n	8005dd6 <DMA1_Channel4_IRQHandler+0xf2>
 8005de8:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005dea:	480e      	ldr	r0, [pc, #56]	; (8005e24 <DMA1_Channel4_IRQHandler+0x140>)
 8005dec:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	e7f4      	b.n	8005ddc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005df6:	e7e5      	b.n	8005dc4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005df8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005dfc:	e7ee      	b.n	8005ddc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dfe:	2220      	movs	r2, #32
 8005e00:	e7e0      	b.n	8005dc4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e06:	e7e9      	b.n	8005ddc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0c:	e7da      	b.n	8005dc4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e12:	e7e3      	b.n	8005ddc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e18:	e7d4      	b.n	8005dc4 <DMA1_Channel4_IRQHandler+0xe0>
 8005e1a:	bf00      	nop
 8005e1c:	20000200 	.word	0x20000200
 8005e20:	40020008 	.word	0x40020008
 8005e24:	2000049c 	.word	0x2000049c
 8005e28:	40020000 	.word	0x40020000

08005e2c <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e2c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e2e:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005e30:	b470      	push	{r4, r5, r6}
 8005e32:	f8d3 631c 	ldr.w	r6, [r3, #796]	; 0x31c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e36:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e3a:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005e3c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e40:	4081      	lsls	r1, r0
 8005e42:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005e44:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e46:	d01f      	beq.n	8005e88 <DMA1_Channel5_IRQHandler+0x5c>
 8005e48:	0769      	lsls	r1, r5, #29
 8005e4a:	d51d      	bpl.n	8005e88 <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	0688      	lsls	r0, r1, #26
 8005e50:	d403      	bmi.n	8005e5a <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	f021 0104 	bic.w	r1, r1, #4
 8005e58:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e5a:	4943      	ldr	r1, [pc, #268]	; (8005f68 <DMA1_Channel5_IRQHandler+0x13c>)
 8005e5c:	428a      	cmp	r2, r1
 8005e5e:	d060      	beq.n	8005f22 <DMA1_Channel5_IRQHandler+0xf6>
 8005e60:	3114      	adds	r1, #20
 8005e62:	428a      	cmp	r2, r1
 8005e64:	d067      	beq.n	8005f36 <DMA1_Channel5_IRQHandler+0x10a>
 8005e66:	3114      	adds	r1, #20
 8005e68:	428a      	cmp	r2, r1
 8005e6a:	d06e      	beq.n	8005f4a <DMA1_Channel5_IRQHandler+0x11e>
 8005e6c:	3114      	adds	r1, #20
 8005e6e:	428a      	cmp	r2, r1
 8005e70:	d071      	beq.n	8005f56 <DMA1_Channel5_IRQHandler+0x12a>
 8005e72:	3114      	adds	r1, #20
 8005e74:	428a      	cmp	r2, r1
 8005e76:	d063      	beq.n	8005f40 <DMA1_Channel5_IRQHandler+0x114>
 8005e78:	3114      	adds	r1, #20
 8005e7a:	428a      	cmp	r2, r1
 8005e7c:	bf0c      	ite	eq
 8005e7e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005e82:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005e86:	e04d      	b.n	8005f24 <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e88:	2102      	movs	r1, #2
 8005e8a:	4081      	lsls	r1, r0
 8005e8c:	4221      	tst	r1, r4
 8005e8e:	d022      	beq.n	8005ed6 <DMA1_Channel5_IRQHandler+0xaa>
 8005e90:	07a9      	lsls	r1, r5, #30
 8005e92:	d520      	bpl.n	8005ed6 <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	0688      	lsls	r0, r1, #26
 8005e98:	d406      	bmi.n	8005ea8 <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e9c:	6811      	ldr	r1, [r2, #0]
 8005e9e:	f021 010a 	bic.w	r1, r1, #10
 8005ea2:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005ea4:	f883 0301 	strb.w	r0, [r3, #769]	; 0x301
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ea8:	492f      	ldr	r1, [pc, #188]	; (8005f68 <DMA1_Channel5_IRQHandler+0x13c>)
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	d02d      	beq.n	8005f0a <DMA1_Channel5_IRQHandler+0xde>
 8005eae:	3114      	adds	r1, #20
 8005eb0:	428a      	cmp	r2, r1
 8005eb2:	d048      	beq.n	8005f46 <DMA1_Channel5_IRQHandler+0x11a>
 8005eb4:	3114      	adds	r1, #20
 8005eb6:	428a      	cmp	r2, r1
 8005eb8:	d04a      	beq.n	8005f50 <DMA1_Channel5_IRQHandler+0x124>
 8005eba:	3114      	adds	r1, #20
 8005ebc:	428a      	cmp	r2, r1
 8005ebe:	d03c      	beq.n	8005f3a <DMA1_Channel5_IRQHandler+0x10e>
 8005ec0:	3114      	adds	r1, #20
 8005ec2:	428a      	cmp	r2, r1
 8005ec4:	d04a      	beq.n	8005f5c <DMA1_Channel5_IRQHandler+0x130>
 8005ec6:	3114      	adds	r1, #20
 8005ec8:	428a      	cmp	r2, r1
 8005eca:	bf0c      	ite	eq
 8005ecc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005ed0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005ed4:	e01a      	b.n	8005f0c <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005ed6:	2108      	movs	r1, #8
 8005ed8:	4081      	lsls	r1, r0
 8005eda:	4221      	tst	r1, r4
 8005edc:	d01f      	beq.n	8005f1e <DMA1_Channel5_IRQHandler+0xf2>
 8005ede:	0729      	lsls	r1, r5, #28
 8005ee0:	d51d      	bpl.n	8005f1e <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ee2:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005ee4:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ee8:	f021 010e 	bic.w	r1, r1, #14
 8005eec:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005eee:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005ef0:	f8d3 1310 	ldr.w	r1, [r3, #784]	; 0x310
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ef4:	fa02 f000 	lsl.w	r0, r2, r0
 8005ef8:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005efa:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
    __HAL_UNLOCK(hdma);
 8005efe:	f8a3 4300 	strh.w	r4, [r3, #768]	; 0x300
    if (hdma->XferErrorCallback != NULL)
 8005f02:	b161      	cbz	r1, 8005f1e <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005f04:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005f06:	4819      	ldr	r0, [pc, #100]	; (8005f6c <DMA1_Channel5_IRQHandler+0x140>)
 8005f08:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f0a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005f0c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f0e:	4c18      	ldr	r4, [pc, #96]	; (8005f70 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005f10:	f8d3 1308 	ldr.w	r1, [r3, #776]	; 0x308
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f14:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005f16:	f883 0300 	strb.w	r0, [r3, #768]	; 0x300
    if(hdma->XferCpltCallback != NULL)
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d1f2      	bne.n	8005f04 <DMA1_Channel5_IRQHandler+0xd8>
 8005f1e:	bc70      	pop	{r4, r5, r6}
 8005f20:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f22:	2204      	movs	r2, #4
 8005f24:	4912      	ldr	r1, [pc, #72]	; (8005f70 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005f26:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f2a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f6      	beq.n	8005f1e <DMA1_Channel5_IRQHandler+0xf2>
 8005f30:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005f32:	480e      	ldr	r0, [pc, #56]	; (8005f6c <DMA1_Channel5_IRQHandler+0x140>)
 8005f34:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f36:	2240      	movs	r2, #64	; 0x40
 8005f38:	e7f4      	b.n	8005f24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f3e:	e7e5      	b.n	8005f0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005f44:	e7ee      	b.n	8005f24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f46:	2220      	movs	r2, #32
 8005f48:	e7e0      	b.n	8005f0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f4e:	e7e9      	b.n	8005f24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	e7da      	b.n	8005f0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f5a:	e7e3      	b.n	8005f24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f60:	e7d4      	b.n	8005f0c <DMA1_Channel5_IRQHandler+0xe0>
 8005f62:	bf00      	nop
 8005f64:	20000200 	.word	0x20000200
 8005f68:	40020008 	.word	0x40020008
 8005f6c:	200004e0 	.word	0x200004e0
 8005f70:	40020000 	.word	0x40020000

08005f74 <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f74:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f76:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005f78:	b470      	push	{r4, r5, r6}
 8005f7a:	f8d3 6250 	ldr.w	r6, [r3, #592]	; 0x250
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f7e:	f8d3 0254 	ldr.w	r0, [r3, #596]	; 0x254
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f82:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005f84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f88:	4081      	lsls	r1, r0
 8005f8a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005f8c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f8e:	d01f      	beq.n	8005fd0 <DMA1_Channel6_IRQHandler+0x5c>
 8005f90:	0769      	lsls	r1, r5, #29
 8005f92:	d51d      	bpl.n	8005fd0 <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	0688      	lsls	r0, r1, #26
 8005f98:	d403      	bmi.n	8005fa2 <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f9a:	6811      	ldr	r1, [r2, #0]
 8005f9c:	f021 0104 	bic.w	r1, r1, #4
 8005fa0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fa2:	4943      	ldr	r1, [pc, #268]	; (80060b0 <DMA1_Channel6_IRQHandler+0x13c>)
 8005fa4:	428a      	cmp	r2, r1
 8005fa6:	d060      	beq.n	800606a <DMA1_Channel6_IRQHandler+0xf6>
 8005fa8:	3114      	adds	r1, #20
 8005faa:	428a      	cmp	r2, r1
 8005fac:	d067      	beq.n	800607e <DMA1_Channel6_IRQHandler+0x10a>
 8005fae:	3114      	adds	r1, #20
 8005fb0:	428a      	cmp	r2, r1
 8005fb2:	d06e      	beq.n	8006092 <DMA1_Channel6_IRQHandler+0x11e>
 8005fb4:	3114      	adds	r1, #20
 8005fb6:	428a      	cmp	r2, r1
 8005fb8:	d071      	beq.n	800609e <DMA1_Channel6_IRQHandler+0x12a>
 8005fba:	3114      	adds	r1, #20
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	d063      	beq.n	8006088 <DMA1_Channel6_IRQHandler+0x114>
 8005fc0:	3114      	adds	r1, #20
 8005fc2:	428a      	cmp	r2, r1
 8005fc4:	bf0c      	ite	eq
 8005fc6:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005fca:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005fce:	e04d      	b.n	800606c <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005fd0:	2102      	movs	r1, #2
 8005fd2:	4081      	lsls	r1, r0
 8005fd4:	4221      	tst	r1, r4
 8005fd6:	d022      	beq.n	800601e <DMA1_Channel6_IRQHandler+0xaa>
 8005fd8:	07a9      	lsls	r1, r5, #30
 8005fda:	d520      	bpl.n	800601e <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fdc:	6811      	ldr	r1, [r2, #0]
 8005fde:	0688      	lsls	r0, r1, #26
 8005fe0:	d406      	bmi.n	8005ff0 <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005fe2:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005fe4:	6811      	ldr	r1, [r2, #0]
 8005fe6:	f021 010a 	bic.w	r1, r1, #10
 8005fea:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005fec:	f883 0235 	strb.w	r0, [r3, #565]	; 0x235
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ff0:	492f      	ldr	r1, [pc, #188]	; (80060b0 <DMA1_Channel6_IRQHandler+0x13c>)
 8005ff2:	428a      	cmp	r2, r1
 8005ff4:	d02d      	beq.n	8006052 <DMA1_Channel6_IRQHandler+0xde>
 8005ff6:	3114      	adds	r1, #20
 8005ff8:	428a      	cmp	r2, r1
 8005ffa:	d048      	beq.n	800608e <DMA1_Channel6_IRQHandler+0x11a>
 8005ffc:	3114      	adds	r1, #20
 8005ffe:	428a      	cmp	r2, r1
 8006000:	d04a      	beq.n	8006098 <DMA1_Channel6_IRQHandler+0x124>
 8006002:	3114      	adds	r1, #20
 8006004:	428a      	cmp	r2, r1
 8006006:	d03c      	beq.n	8006082 <DMA1_Channel6_IRQHandler+0x10e>
 8006008:	3114      	adds	r1, #20
 800600a:	428a      	cmp	r2, r1
 800600c:	d04a      	beq.n	80060a4 <DMA1_Channel6_IRQHandler+0x130>
 800600e:	3114      	adds	r1, #20
 8006010:	428a      	cmp	r2, r1
 8006012:	bf0c      	ite	eq
 8006014:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8006018:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800601c:	e01a      	b.n	8006054 <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800601e:	2108      	movs	r1, #8
 8006020:	4081      	lsls	r1, r0
 8006022:	4221      	tst	r1, r4
 8006024:	d01f      	beq.n	8006066 <DMA1_Channel6_IRQHandler+0xf2>
 8006026:	0729      	lsls	r1, r5, #28
 8006028:	d51d      	bpl.n	8006066 <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 800602c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006030:	f021 010e 	bic.w	r1, r1, #14
 8006034:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006036:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8006038:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800603c:	fa02 f000 	lsl.w	r0, r2, r0
 8006040:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006042:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    __HAL_UNLOCK(hdma);
 8006046:	f8a3 4234 	strh.w	r4, [r3, #564]	; 0x234
    if (hdma->XferErrorCallback != NULL)
 800604a:	b161      	cbz	r1, 8006066 <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800604c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800604e:	4819      	ldr	r0, [pc, #100]	; (80060b4 <DMA1_Channel6_IRQHandler+0x140>)
 8006050:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006052:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8006054:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006056:	4c18      	ldr	r4, [pc, #96]	; (80060b8 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8006058:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800605c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800605e:	f883 0234 	strb.w	r0, [r3, #564]	; 0x234
    if(hdma->XferCpltCallback != NULL)
 8006062:	2900      	cmp	r1, #0
 8006064:	d1f2      	bne.n	800604c <DMA1_Channel6_IRQHandler+0xd8>
 8006066:	bc70      	pop	{r4, r5, r6}
 8006068:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800606a:	2204      	movs	r2, #4
 800606c:	4912      	ldr	r1, [pc, #72]	; (80060b8 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 800606e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006072:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f6      	beq.n	8006066 <DMA1_Channel6_IRQHandler+0xf2>
 8006078:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 800607a:	480e      	ldr	r0, [pc, #56]	; (80060b4 <DMA1_Channel6_IRQHandler+0x140>)
 800607c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	e7f4      	b.n	800606c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006086:	e7e5      	b.n	8006054 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006088:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800608c:	e7ee      	b.n	800606c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800608e:	2220      	movs	r2, #32
 8006090:	e7e0      	b.n	8006054 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006096:	e7e9      	b.n	800606c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800609c:	e7da      	b.n	8006054 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800609e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060a2:	e7e3      	b.n	800606c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060a8:	e7d4      	b.n	8006054 <DMA1_Channel6_IRQHandler+0xe0>
 80060aa:	bf00      	nop
 80060ac:	20000200 	.word	0x20000200
 80060b0:	40020008 	.word	0x40020008
 80060b4:	20000414 	.word	0x20000414
 80060b8:	40020000 	.word	0x40020000

080060bc <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060bc:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060be:	4b4d      	ldr	r3, [pc, #308]	; (80061f4 <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80060c0:	b470      	push	{r4, r5, r6}
 80060c2:	f8d3 6294 	ldr.w	r6, [r3, #660]	; 0x294
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060ca:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80060cc:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060d0:	4081      	lsls	r1, r0
 80060d2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 80060d4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060d6:	d01f      	beq.n	8006118 <DMA1_Channel7_IRQHandler+0x5c>
 80060d8:	0769      	lsls	r1, r5, #29
 80060da:	d51d      	bpl.n	8006118 <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060dc:	6811      	ldr	r1, [r2, #0]
 80060de:	0688      	lsls	r0, r1, #26
 80060e0:	d403      	bmi.n	80060ea <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060e2:	6811      	ldr	r1, [r2, #0]
 80060e4:	f021 0104 	bic.w	r1, r1, #4
 80060e8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060ea:	4943      	ldr	r1, [pc, #268]	; (80061f8 <DMA1_Channel7_IRQHandler+0x13c>)
 80060ec:	428a      	cmp	r2, r1
 80060ee:	d060      	beq.n	80061b2 <DMA1_Channel7_IRQHandler+0xf6>
 80060f0:	3114      	adds	r1, #20
 80060f2:	428a      	cmp	r2, r1
 80060f4:	d067      	beq.n	80061c6 <DMA1_Channel7_IRQHandler+0x10a>
 80060f6:	3114      	adds	r1, #20
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d06e      	beq.n	80061da <DMA1_Channel7_IRQHandler+0x11e>
 80060fc:	3114      	adds	r1, #20
 80060fe:	428a      	cmp	r2, r1
 8006100:	d071      	beq.n	80061e6 <DMA1_Channel7_IRQHandler+0x12a>
 8006102:	3114      	adds	r1, #20
 8006104:	428a      	cmp	r2, r1
 8006106:	d063      	beq.n	80061d0 <DMA1_Channel7_IRQHandler+0x114>
 8006108:	3114      	adds	r1, #20
 800610a:	428a      	cmp	r2, r1
 800610c:	bf0c      	ite	eq
 800610e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8006112:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8006116:	e04d      	b.n	80061b4 <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006118:	2102      	movs	r1, #2
 800611a:	4081      	lsls	r1, r0
 800611c:	4221      	tst	r1, r4
 800611e:	d022      	beq.n	8006166 <DMA1_Channel7_IRQHandler+0xaa>
 8006120:	07a9      	lsls	r1, r5, #30
 8006122:	d520      	bpl.n	8006166 <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006124:	6811      	ldr	r1, [r2, #0]
 8006126:	0688      	lsls	r0, r1, #26
 8006128:	d406      	bmi.n	8006138 <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 800612a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	f021 010a 	bic.w	r1, r1, #10
 8006132:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006134:	f883 0279 	strb.w	r0, [r3, #633]	; 0x279
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006138:	492f      	ldr	r1, [pc, #188]	; (80061f8 <DMA1_Channel7_IRQHandler+0x13c>)
 800613a:	428a      	cmp	r2, r1
 800613c:	d02d      	beq.n	800619a <DMA1_Channel7_IRQHandler+0xde>
 800613e:	3114      	adds	r1, #20
 8006140:	428a      	cmp	r2, r1
 8006142:	d048      	beq.n	80061d6 <DMA1_Channel7_IRQHandler+0x11a>
 8006144:	3114      	adds	r1, #20
 8006146:	428a      	cmp	r2, r1
 8006148:	d04a      	beq.n	80061e0 <DMA1_Channel7_IRQHandler+0x124>
 800614a:	3114      	adds	r1, #20
 800614c:	428a      	cmp	r2, r1
 800614e:	d03c      	beq.n	80061ca <DMA1_Channel7_IRQHandler+0x10e>
 8006150:	3114      	adds	r1, #20
 8006152:	428a      	cmp	r2, r1
 8006154:	d04a      	beq.n	80061ec <DMA1_Channel7_IRQHandler+0x130>
 8006156:	3114      	adds	r1, #20
 8006158:	428a      	cmp	r2, r1
 800615a:	bf0c      	ite	eq
 800615c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8006160:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006164:	e01a      	b.n	800619c <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006166:	2108      	movs	r1, #8
 8006168:	4081      	lsls	r1, r0
 800616a:	4221      	tst	r1, r4
 800616c:	d01f      	beq.n	80061ae <DMA1_Channel7_IRQHandler+0xf2>
 800616e:	0729      	lsls	r1, r5, #28
 8006170:	d51d      	bpl.n	80061ae <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006172:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8006174:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006178:	f021 010e 	bic.w	r1, r1, #14
 800617c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800617e:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8006180:	f8d3 1288 	ldr.w	r1, [r3, #648]	; 0x288
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006184:	fa02 f000 	lsl.w	r0, r2, r0
 8006188:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800618a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    __HAL_UNLOCK(hdma);
 800618e:	f8a3 4278 	strh.w	r4, [r3, #632]	; 0x278
    if (hdma->XferErrorCallback != NULL)
 8006192:	b161      	cbz	r1, 80061ae <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006194:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006196:	4819      	ldr	r0, [pc, #100]	; (80061fc <DMA1_Channel7_IRQHandler+0x140>)
 8006198:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800619a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800619c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800619e:	4c18      	ldr	r4, [pc, #96]	; (8006200 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 80061a0:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061a4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80061a6:	f883 0278 	strb.w	r0, [r3, #632]	; 0x278
    if(hdma->XferCpltCallback != NULL)
 80061aa:	2900      	cmp	r1, #0
 80061ac:	d1f2      	bne.n	8006194 <DMA1_Channel7_IRQHandler+0xd8>
 80061ae:	bc70      	pop	{r4, r5, r6}
 80061b0:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061b2:	2204      	movs	r2, #4
 80061b4:	4912      	ldr	r1, [pc, #72]	; (8006200 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061ba:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f6      	beq.n	80061ae <DMA1_Channel7_IRQHandler+0xf2>
 80061c0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 80061c2:	480e      	ldr	r0, [pc, #56]	; (80061fc <DMA1_Channel7_IRQHandler+0x140>)
 80061c4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	e7f4      	b.n	80061b4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061ce:	e7e5      	b.n	800619c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061d4:	e7ee      	b.n	80061b4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061d6:	2220      	movs	r2, #32
 80061d8:	e7e0      	b.n	800619c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061de:	e7e9      	b.n	80061b4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e4:	e7da      	b.n	800619c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061ea:	e7e3      	b.n	80061b4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061f0:	e7d4      	b.n	800619c <DMA1_Channel7_IRQHandler+0xe0>
 80061f2:	bf00      	nop
 80061f4:	20000200 	.word	0x20000200
 80061f8:	40020008 	.word	0x40020008
 80061fc:	20000458 	.word	0x20000458
 8006200:	40020000 	.word	0x40020000

08006204 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006204:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006206:	4c9b      	ldr	r4, [pc, #620]	; (8006474 <USART1_IRQHandler+0x270>)
 8006208:	b082      	sub	sp, #8
 800620a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800620e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006210:	68d9      	ldr	r1, [r3, #12]
  if (errorflags == RESET)
 8006212:	0716      	lsls	r6, r2, #28
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006214:	6958      	ldr	r0, [r3, #20]
  if (errorflags == RESET)
 8006216:	d156      	bne.n	80062c6 <USART1_IRQHandler+0xc2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006218:	0695      	lsls	r5, r2, #26
 800621a:	d502      	bpl.n	8006222 <USART1_IRQHandler+0x1e>
 800621c:	0688      	lsls	r0, r1, #26
 800621e:	f100 80a2 	bmi.w	8006366 <USART1_IRQHandler+0x162>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006222:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8006226:	2801      	cmp	r0, #1
 8006228:	d00b      	beq.n	8006242 <USART1_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800622a:	0616      	lsls	r6, r2, #24
 800622c:	d502      	bpl.n	8006234 <USART1_IRQHandler+0x30>
 800622e:	060d      	lsls	r5, r1, #24
 8006230:	f100 80a3 	bmi.w	800637a <USART1_IRQHandler+0x176>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006234:	0650      	lsls	r0, r2, #25
 8006236:	d502      	bpl.n	800623e <USART1_IRQHandler+0x3a>
 8006238:	064a      	lsls	r2, r1, #25
 800623a:	f100 80c2 	bmi.w	80063c2 <USART1_IRQHandler+0x1be>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800623e:	b002      	add	sp, #8
 8006240:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006242:	06d6      	lsls	r6, r2, #27
 8006244:	d5f1      	bpl.n	800622a <USART1_IRQHandler+0x26>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006246:	06cd      	lsls	r5, r1, #27
 8006248:	d5ef      	bpl.n	800622a <USART1_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800624a:	2100      	movs	r1, #0
 800624c:	9101      	str	r1, [sp, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	9201      	str	r2, [sp, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	9201      	str	r2, [sp, #4]
 8006256:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800625e:	f000 80e8 	beq.w	8006432 <USART1_IRQHandler+0x22e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006262:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8006266:	682e      	ldr	r6, [r5, #0]
 8006268:	6872      	ldr	r2, [r6, #4]
 800626a:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800626c:	2a00      	cmp	r2, #0
 800626e:	d0e6      	beq.n	800623e <USART1_IRQHandler+0x3a>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006270:	f8b4 c0f4 	ldrh.w	ip, [r4, #244]	; 0xf4
 8006274:	4594      	cmp	ip, r2
 8006276:	d9e2      	bls.n	800623e <USART1_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 8006278:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800627c:	69aa      	ldr	r2, [r5, #24]
 800627e:	2a20      	cmp	r2, #32
 8006280:	d01e      	beq.n	80062c0 <USART1_IRQHandler+0xbc>
          huart->RxState = HAL_UART_STATE_READY;
 8006282:	f04f 0c20 	mov.w	ip, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628e:	695a      	ldr	r2, [r3, #20]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629c:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800629e:	f884 c106 	strb.w	ip, [r4, #262]	; 0x106
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	f022 0210 	bic.w	r2, r2, #16
 80062ac:	60da      	str	r2, [r3, #12]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062ae:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	f000 8120 	beq.w	80064f8 <USART1_IRQHandler+0x2f4>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b8:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80062ba:	f885 1020 	strb.w	r1, [r5, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062be:	63ab      	str	r3, [r5, #56]	; 0x38
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062c0:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
 80062c4:	e7bb      	b.n	800623e <USART1_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062c6:	f000 0001 	and.w	r0, r0, #1
 80062ca:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80062ce:	ea5c 0500 	orrs.w	r5, ip, r0
 80062d2:	d0a6      	beq.n	8006222 <USART1_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062d4:	07d6      	lsls	r6, r2, #31
 80062d6:	d507      	bpl.n	80062e8 <USART1_IRQHandler+0xe4>
 80062d8:	05cd      	lsls	r5, r1, #23
 80062da:	d505      	bpl.n	80062e8 <USART1_IRQHandler+0xe4>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062dc:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
 80062e0:	f045 0501 	orr.w	r5, r5, #1
 80062e4:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062e8:	0756      	lsls	r6, r2, #29
 80062ea:	d537      	bpl.n	800635c <USART1_IRQHandler+0x158>
 80062ec:	b168      	cbz	r0, 800630a <USART1_IRQHandler+0x106>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ee:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
 80062f2:	f045 0502 	orr.w	r5, r5, #2
 80062f6:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	0795      	lsls	r5, r2, #30
 80062fc:	d505      	bpl.n	800630a <USART1_IRQHandler+0x106>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062fe:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
 8006302:	f045 0504 	orr.w	r5, r5, #4
 8006306:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800630a:	0715      	lsls	r5, r2, #28
 800630c:	d50a      	bpl.n	8006324 <USART1_IRQHandler+0x120>
 800630e:	f001 0c20 	and.w	ip, r1, #32
 8006312:	ea5c 0000 	orrs.w	r0, ip, r0
 8006316:	d005      	beq.n	8006324 <USART1_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006318:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 800631c:	f040 0008 	orr.w	r0, r0, #8
 8006320:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006324:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8006328:	2800      	cmp	r0, #0
 800632a:	d088      	beq.n	800623e <USART1_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632c:	0690      	lsls	r0, r2, #26
 800632e:	d509      	bpl.n	8006344 <USART1_IRQHandler+0x140>
 8006330:	0689      	lsls	r1, r1, #26
 8006332:	d507      	bpl.n	8006344 <USART1_IRQHandler+0x140>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006334:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 8006338:	2a22      	cmp	r2, #34	; 0x22
 800633a:	d103      	bne.n	8006344 <USART1_IRQHandler+0x140>
 800633c:	f7ff f998 	bl	8005670 <UART_Receive_IT.part.0.constprop.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006340:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8006344:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006346:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800634e:	f001 0108 	and.w	r1, r1, #8
 8006352:	430a      	orrs	r2, r1
 8006354:	d13d      	bne.n	80063d2 <USART1_IRQHandler+0x1ce>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006356:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 800635a:	e770      	b.n	800623e <USART1_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800635c:	0796      	lsls	r6, r2, #30
 800635e:	d5d4      	bpl.n	800630a <USART1_IRQHandler+0x106>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1cc      	bne.n	80062fe <USART1_IRQHandler+0xfa>
 8006364:	e7d1      	b.n	800630a <USART1_IRQHandler+0x106>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006366:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 800636a:	2b22      	cmp	r3, #34	; 0x22
 800636c:	f47f af67 	bne.w	800623e <USART1_IRQHandler+0x3a>
 8006370:	b002      	add	sp, #8
 8006372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006376:	f7ff b97b 	b.w	8005670 <UART_Receive_IT.part.0.constprop.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800637a:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
 800637e:	2a21      	cmp	r2, #33	; 0x21
 8006380:	f47f af5d 	bne.w	800623e <USART1_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8006388:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800638c:	f000 809b 	beq.w	80064c6 <USART1_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006390:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8006394:	1c51      	adds	r1, r2, #1
 8006396:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800639e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
 80063a2:	3a01      	subs	r2, #1
 80063a4:	b292      	uxth	r2, r2
 80063a6:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f47f af47 	bne.w	800623e <USART1_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063be:	60da      	str	r2, [r3, #12]
 80063c0:	e73d      	b.n	800623e <USART1_IRQHandler+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 80063c2:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ca:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80063cc:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
 80063d0:	e735      	b.n	800623e <USART1_IRQHandler+0x3a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e2:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80063e6:	2a01      	cmp	r2, #1
 80063e8:	d103      	bne.n	80063f2 <USART1_IRQHandler+0x1ee>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	f022 0210 	bic.w	r2, r2, #16
 80063f0:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80063f4:	2120      	movs	r1, #32
 80063f6:	f884 1106 	strb.w	r1, [r4, #262]	; 0x106
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	0652      	lsls	r2, r2, #25
 8006402:	f57f af1c 	bpl.w	800623e <USART1_IRQHandler+0x3a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006408:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800640c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006410:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006412:	2800      	cmp	r0, #0
 8006414:	f43f af13 	beq.w	800623e <USART1_IRQHandler+0x3a>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006418:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800641c:	4a16      	ldr	r2, [pc, #88]	; (8006478 <USART1_IRQHandler+0x274>)
 800641e:	2b02      	cmp	r3, #2
 8006420:	6342      	str	r2, [r0, #52]	; 0x34
 8006422:	d02b      	beq.n	800647c <USART1_IRQHandler+0x278>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006424:	2304      	movs	r3, #4
 8006426:	6383      	str	r3, [r0, #56]	; 0x38
 8006428:	b002      	add	sp, #8
 800642a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hdma->XferAbortCallback(hdma);
 800642e:	f7fb bbbb 	b.w	8001ba8 <UART_DMAAbortOnError>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006432:	f8b4 00f6 	ldrh.w	r0, [r4, #246]	; 0xf6
      if (  (huart->RxXferCount > 0U)
 8006436:	f8b4 10f6 	ldrh.w	r1, [r4, #246]	; 0xf6
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800643a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800643c:	b289      	uxth	r1, r1
 800643e:	2900      	cmp	r1, #0
 8006440:	f43f aefd 	beq.w	800623e <USART1_IRQHandler+0x3a>
          &&(nb_rx_data > 0U) )
 8006444:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
 8006448:	4281      	cmp	r1, r0
 800644a:	f43f aef8 	beq.w	800623e <USART1_IRQHandler+0x3a>
        huart->RxState = HAL_UART_STATE_READY;
 800644e:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8006456:	60d9      	str	r1, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	6959      	ldr	r1, [r3, #20]
 800645a:	f021 0101 	bic.w	r1, r1, #1
 800645e:	6159      	str	r1, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8006460:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006464:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	f022 0210 	bic.w	r2, r2, #16
 800646e:	60da      	str	r2, [r3, #12]
 8006470:	e6e5      	b.n	800623e <USART1_IRQHandler+0x3a>
 8006472:	bf00      	nop
 8006474:	20000200 	.word	0x20000200
 8006478:	08001ba9 	.word	0x08001ba9
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800647c:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800647e:	4928      	ldr	r1, [pc, #160]	; (8006520 <USART1_IRQHandler+0x31c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006480:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006482:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006484:	f022 020e 	bic.w	r2, r2, #14
 8006488:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006492:	d027      	beq.n	80064e4 <USART1_IRQHandler+0x2e0>
 8006494:	4a23      	ldr	r2, [pc, #140]	; (8006524 <USART1_IRQHandler+0x320>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d026      	beq.n	80064e8 <USART1_IRQHandler+0x2e4>
 800649a:	3214      	adds	r2, #20
 800649c:	4293      	cmp	r3, r2
 800649e:	d025      	beq.n	80064ec <USART1_IRQHandler+0x2e8>
 80064a0:	3214      	adds	r2, #20
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d025      	beq.n	80064f2 <USART1_IRQHandler+0x2ee>
 80064a6:	3214      	adds	r2, #20
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d035      	beq.n	8006518 <USART1_IRQHandler+0x314>
 80064ac:	3214      	adds	r2, #20
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bf0c      	ite	eq
 80064b2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80064b6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 80064ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80064be:	491a      	ldr	r1, [pc, #104]	; (8006528 <USART1_IRQHandler+0x324>)
 80064c0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80064c2:	8402      	strh	r2, [r0, #32]
 80064c4:	e7b0      	b.n	8006428 <USART1_IRQHandler+0x224>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f47f af60 	bne.w	8006390 <USART1_IRQHandler+0x18c>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064d0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80064d4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80064d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80064dc:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064de:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 80064e2:	e75c      	b.n	800639e <USART1_IRQHandler+0x19a>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80064e4:	2301      	movs	r3, #1
 80064e6:	e7e8      	b.n	80064ba <USART1_IRQHandler+0x2b6>
 80064e8:	2310      	movs	r3, #16
 80064ea:	e7e6      	b.n	80064ba <USART1_IRQHandler+0x2b6>
 80064ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f0:	e7e3      	b.n	80064ba <USART1_IRQHandler+0x2b6>
 80064f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064f6:	e7e0      	b.n	80064ba <USART1_IRQHandler+0x2b6>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064f8:	6833      	ldr	r3, [r6, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064fc:	f023 030e 	bic.w	r3, r3, #14
 8006500:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8006502:	6833      	ldr	r3, [r6, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006504:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(hdma);      
 800650c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006510:	4088      	lsls	r0, r1
 8006512:	6050      	str	r0, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8006514:	842b      	strh	r3, [r5, #32]
 8006516:	e6d3      	b.n	80062c0 <USART1_IRQHandler+0xbc>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800651c:	e7cd      	b.n	80064ba <USART1_IRQHandler+0x2b6>
 800651e:	bf00      	nop
 8006520:	40020008 	.word	0x40020008
 8006524:	4002001c 	.word	0x4002001c
 8006528:	40020000 	.word	0x40020000

0800652c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800652c:	2001      	movs	r0, #1
 800652e:	4770      	bx	lr

08006530 <_kill>:

int _kill(int pid, int sig)
{
 8006530:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006532:	f002 ffab 	bl	800948c <__errno>
 8006536:	2216      	movs	r2, #22
 8006538:	4603      	mov	r3, r0
	return -1;
}
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800653e:	601a      	str	r2, [r3, #0]
}
 8006540:	bd08      	pop	{r3, pc}
 8006542:	bf00      	nop

08006544 <_exit>:

void _exit (int status)
{
 8006544:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006546:	f002 ffa1 	bl	800948c <__errno>
 800654a:	2316      	movs	r3, #22
 800654c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800654e:	e7fe      	b.n	800654e <_exit+0xa>

08006550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006550:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006552:	1e16      	subs	r6, r2, #0
 8006554:	dd07      	ble.n	8006566 <_read+0x16>
 8006556:	460c      	mov	r4, r1
 8006558:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800655a:	f3af 8000 	nop.w
 800655e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006562:	42a5      	cmp	r5, r4
 8006564:	d1f9      	bne.n	800655a <_read+0xa>
	}

return len;
}
 8006566:	4630      	mov	r0, r6
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	bf00      	nop

0800656c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800656c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800656e:	1e16      	subs	r6, r2, #0
 8006570:	dd07      	ble.n	8006582 <_write+0x16>
 8006572:	460c      	mov	r4, r1
 8006574:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006576:	f814 0b01 	ldrb.w	r0, [r4], #1
 800657a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800657e:	42ac      	cmp	r4, r5
 8006580:	d1f9      	bne.n	8006576 <_write+0xa>
	}
	return len;
}
 8006582:	4630      	mov	r0, r6
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	bf00      	nop

08006588 <_close>:

int _close(int file)
{
	return -1;
}
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop

08006590 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006594:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006596:	604b      	str	r3, [r1, #4]
}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop

0800659c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800659c:	2001      	movs	r0, #1
 800659e:	4770      	bx	lr

080065a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80065a0:	2000      	movs	r0, #0
 80065a2:	4770      	bx	lr

080065a4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065a4:	490e      	ldr	r1, [pc, #56]	; (80065e0 <_sbrk+0x3c>)
{
 80065a6:	4603      	mov	r3, r0
 80065a8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065aa:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <_sbrk+0x40>)
 80065ac:	4c0e      	ldr	r4, [pc, #56]	; (80065e8 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 80065ae:	f8d1 0774 	ldr.w	r0, [r1, #1908]	; 0x774
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065b2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80065b4:	b128      	cbz	r0, 80065c2 <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065b6:	4403      	add	r3, r0
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d809      	bhi.n	80065d0 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80065bc:	f8c1 3774 	str.w	r3, [r1, #1908]	; 0x774

  return (void *)prev_heap_end;
}
 80065c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80065c2:	4c0a      	ldr	r4, [pc, #40]	; (80065ec <_sbrk+0x48>)
 80065c4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80065c6:	4403      	add	r3, r0
 80065c8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80065ca:	f8c1 4774 	str.w	r4, [r1, #1908]	; 0x774
  if (__sbrk_heap_end + incr > max_heap)
 80065ce:	d9f5      	bls.n	80065bc <_sbrk+0x18>
    errno = ENOMEM;
 80065d0:	f002 ff5c 	bl	800948c <__errno>
 80065d4:	220c      	movs	r2, #12
 80065d6:	4603      	mov	r3, r0
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bd10      	pop	{r4, pc}
 80065e0:	20000200 	.word	0x20000200
 80065e4:	20005000 	.word	0x20005000
 80065e8:	00000400 	.word	0x00000400
 80065ec:	20000988 	.word	0x20000988

080065f0 <SystemInit>:
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <strlen>:
 80065f4:	4603      	mov	r3, r0
 80065f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d1fb      	bne.n	80065f6 <strlen+0x2>
 80065fe:	1a18      	subs	r0, r3, r0
 8006600:	3801      	subs	r0, #1
 8006602:	4770      	bx	lr

08006604 <__aeabi_drsub>:
 8006604:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006608:	e002      	b.n	8006610 <__adddf3>
 800660a:	bf00      	nop

0800660c <__aeabi_dsub>:
 800660c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006610 <__adddf3>:
 8006610:	b530      	push	{r4, r5, lr}
 8006612:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006616:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800661a:	ea94 0f05 	teq	r4, r5
 800661e:	bf08      	it	eq
 8006620:	ea90 0f02 	teqeq	r0, r2
 8006624:	bf1f      	itttt	ne
 8006626:	ea54 0c00 	orrsne.w	ip, r4, r0
 800662a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800662e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006632:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006636:	f000 80e2 	beq.w	80067fe <__adddf3+0x1ee>
 800663a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800663e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006642:	bfb8      	it	lt
 8006644:	426d      	neglt	r5, r5
 8006646:	dd0c      	ble.n	8006662 <__adddf3+0x52>
 8006648:	442c      	add	r4, r5
 800664a:	ea80 0202 	eor.w	r2, r0, r2
 800664e:	ea81 0303 	eor.w	r3, r1, r3
 8006652:	ea82 0000 	eor.w	r0, r2, r0
 8006656:	ea83 0101 	eor.w	r1, r3, r1
 800665a:	ea80 0202 	eor.w	r2, r0, r2
 800665e:	ea81 0303 	eor.w	r3, r1, r3
 8006662:	2d36      	cmp	r5, #54	; 0x36
 8006664:	bf88      	it	hi
 8006666:	bd30      	pophi	{r4, r5, pc}
 8006668:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800666c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006670:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006674:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006678:	d002      	beq.n	8006680 <__adddf3+0x70>
 800667a:	4240      	negs	r0, r0
 800667c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006680:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006684:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006688:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800668c:	d002      	beq.n	8006694 <__adddf3+0x84>
 800668e:	4252      	negs	r2, r2
 8006690:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006694:	ea94 0f05 	teq	r4, r5
 8006698:	f000 80a7 	beq.w	80067ea <__adddf3+0x1da>
 800669c:	f1a4 0401 	sub.w	r4, r4, #1
 80066a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80066a4:	db0d      	blt.n	80066c2 <__adddf3+0xb2>
 80066a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80066aa:	fa22 f205 	lsr.w	r2, r2, r5
 80066ae:	1880      	adds	r0, r0, r2
 80066b0:	f141 0100 	adc.w	r1, r1, #0
 80066b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80066b8:	1880      	adds	r0, r0, r2
 80066ba:	fa43 f305 	asr.w	r3, r3, r5
 80066be:	4159      	adcs	r1, r3
 80066c0:	e00e      	b.n	80066e0 <__adddf3+0xd0>
 80066c2:	f1a5 0520 	sub.w	r5, r5, #32
 80066c6:	f10e 0e20 	add.w	lr, lr, #32
 80066ca:	2a01      	cmp	r2, #1
 80066cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80066d0:	bf28      	it	cs
 80066d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80066d6:	fa43 f305 	asr.w	r3, r3, r5
 80066da:	18c0      	adds	r0, r0, r3
 80066dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80066e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80066e4:	d507      	bpl.n	80066f6 <__adddf3+0xe6>
 80066e6:	f04f 0e00 	mov.w	lr, #0
 80066ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80066ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80066f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80066f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80066fa:	d31b      	bcc.n	8006734 <__adddf3+0x124>
 80066fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006700:	d30c      	bcc.n	800671c <__adddf3+0x10c>
 8006702:	0849      	lsrs	r1, r1, #1
 8006704:	ea5f 0030 	movs.w	r0, r0, rrx
 8006708:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800670c:	f104 0401 	add.w	r4, r4, #1
 8006710:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006714:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006718:	f080 809a 	bcs.w	8006850 <__adddf3+0x240>
 800671c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006720:	bf08      	it	eq
 8006722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006726:	f150 0000 	adcs.w	r0, r0, #0
 800672a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800672e:	ea41 0105 	orr.w	r1, r1, r5
 8006732:	bd30      	pop	{r4, r5, pc}
 8006734:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006738:	4140      	adcs	r0, r0
 800673a:	eb41 0101 	adc.w	r1, r1, r1
 800673e:	3c01      	subs	r4, #1
 8006740:	bf28      	it	cs
 8006742:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006746:	d2e9      	bcs.n	800671c <__adddf3+0x10c>
 8006748:	f091 0f00 	teq	r1, #0
 800674c:	bf04      	itt	eq
 800674e:	4601      	moveq	r1, r0
 8006750:	2000      	moveq	r0, #0
 8006752:	fab1 f381 	clz	r3, r1
 8006756:	bf08      	it	eq
 8006758:	3320      	addeq	r3, #32
 800675a:	f1a3 030b 	sub.w	r3, r3, #11
 800675e:	f1b3 0220 	subs.w	r2, r3, #32
 8006762:	da0c      	bge.n	800677e <__adddf3+0x16e>
 8006764:	320c      	adds	r2, #12
 8006766:	dd08      	ble.n	800677a <__adddf3+0x16a>
 8006768:	f102 0c14 	add.w	ip, r2, #20
 800676c:	f1c2 020c 	rsb	r2, r2, #12
 8006770:	fa01 f00c 	lsl.w	r0, r1, ip
 8006774:	fa21 f102 	lsr.w	r1, r1, r2
 8006778:	e00c      	b.n	8006794 <__adddf3+0x184>
 800677a:	f102 0214 	add.w	r2, r2, #20
 800677e:	bfd8      	it	le
 8006780:	f1c2 0c20 	rsble	ip, r2, #32
 8006784:	fa01 f102 	lsl.w	r1, r1, r2
 8006788:	fa20 fc0c 	lsr.w	ip, r0, ip
 800678c:	bfdc      	itt	le
 800678e:	ea41 010c 	orrle.w	r1, r1, ip
 8006792:	4090      	lslle	r0, r2
 8006794:	1ae4      	subs	r4, r4, r3
 8006796:	bfa2      	ittt	ge
 8006798:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800679c:	4329      	orrge	r1, r5
 800679e:	bd30      	popge	{r4, r5, pc}
 80067a0:	ea6f 0404 	mvn.w	r4, r4
 80067a4:	3c1f      	subs	r4, #31
 80067a6:	da1c      	bge.n	80067e2 <__adddf3+0x1d2>
 80067a8:	340c      	adds	r4, #12
 80067aa:	dc0e      	bgt.n	80067ca <__adddf3+0x1ba>
 80067ac:	f104 0414 	add.w	r4, r4, #20
 80067b0:	f1c4 0220 	rsb	r2, r4, #32
 80067b4:	fa20 f004 	lsr.w	r0, r0, r4
 80067b8:	fa01 f302 	lsl.w	r3, r1, r2
 80067bc:	ea40 0003 	orr.w	r0, r0, r3
 80067c0:	fa21 f304 	lsr.w	r3, r1, r4
 80067c4:	ea45 0103 	orr.w	r1, r5, r3
 80067c8:	bd30      	pop	{r4, r5, pc}
 80067ca:	f1c4 040c 	rsb	r4, r4, #12
 80067ce:	f1c4 0220 	rsb	r2, r4, #32
 80067d2:	fa20 f002 	lsr.w	r0, r0, r2
 80067d6:	fa01 f304 	lsl.w	r3, r1, r4
 80067da:	ea40 0003 	orr.w	r0, r0, r3
 80067de:	4629      	mov	r1, r5
 80067e0:	bd30      	pop	{r4, r5, pc}
 80067e2:	fa21 f004 	lsr.w	r0, r1, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	bd30      	pop	{r4, r5, pc}
 80067ea:	f094 0f00 	teq	r4, #0
 80067ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80067f2:	bf06      	itte	eq
 80067f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80067f8:	3401      	addeq	r4, #1
 80067fa:	3d01      	subne	r5, #1
 80067fc:	e74e      	b.n	800669c <__adddf3+0x8c>
 80067fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006802:	bf18      	it	ne
 8006804:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006808:	d029      	beq.n	800685e <__adddf3+0x24e>
 800680a:	ea94 0f05 	teq	r4, r5
 800680e:	bf08      	it	eq
 8006810:	ea90 0f02 	teqeq	r0, r2
 8006814:	d005      	beq.n	8006822 <__adddf3+0x212>
 8006816:	ea54 0c00 	orrs.w	ip, r4, r0
 800681a:	bf04      	itt	eq
 800681c:	4619      	moveq	r1, r3
 800681e:	4610      	moveq	r0, r2
 8006820:	bd30      	pop	{r4, r5, pc}
 8006822:	ea91 0f03 	teq	r1, r3
 8006826:	bf1e      	ittt	ne
 8006828:	2100      	movne	r1, #0
 800682a:	2000      	movne	r0, #0
 800682c:	bd30      	popne	{r4, r5, pc}
 800682e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006832:	d105      	bne.n	8006840 <__adddf3+0x230>
 8006834:	0040      	lsls	r0, r0, #1
 8006836:	4149      	adcs	r1, r1
 8006838:	bf28      	it	cs
 800683a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800683e:	bd30      	pop	{r4, r5, pc}
 8006840:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006844:	bf3c      	itt	cc
 8006846:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800684a:	bd30      	popcc	{r4, r5, pc}
 800684c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006850:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006858:	f04f 0000 	mov.w	r0, #0
 800685c:	bd30      	pop	{r4, r5, pc}
 800685e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006862:	bf1a      	itte	ne
 8006864:	4619      	movne	r1, r3
 8006866:	4610      	movne	r0, r2
 8006868:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800686c:	bf1c      	itt	ne
 800686e:	460b      	movne	r3, r1
 8006870:	4602      	movne	r2, r0
 8006872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006876:	bf06      	itte	eq
 8006878:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800687c:	ea91 0f03 	teqeq	r1, r3
 8006880:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006884:	bd30      	pop	{r4, r5, pc}
 8006886:	bf00      	nop

08006888 <__aeabi_ui2d>:
 8006888:	f090 0f00 	teq	r0, #0
 800688c:	bf04      	itt	eq
 800688e:	2100      	moveq	r1, #0
 8006890:	4770      	bxeq	lr
 8006892:	b530      	push	{r4, r5, lr}
 8006894:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006898:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800689c:	f04f 0500 	mov.w	r5, #0
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	e750      	b.n	8006748 <__adddf3+0x138>
 80068a6:	bf00      	nop

080068a8 <__aeabi_i2d>:
 80068a8:	f090 0f00 	teq	r0, #0
 80068ac:	bf04      	itt	eq
 80068ae:	2100      	moveq	r1, #0
 80068b0:	4770      	bxeq	lr
 80068b2:	b530      	push	{r4, r5, lr}
 80068b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80068b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80068bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80068c0:	bf48      	it	mi
 80068c2:	4240      	negmi	r0, r0
 80068c4:	f04f 0100 	mov.w	r1, #0
 80068c8:	e73e      	b.n	8006748 <__adddf3+0x138>
 80068ca:	bf00      	nop

080068cc <__aeabi_f2d>:
 80068cc:	0042      	lsls	r2, r0, #1
 80068ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80068d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80068d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80068da:	bf1f      	itttt	ne
 80068dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80068e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80068e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80068e8:	4770      	bxne	lr
 80068ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80068ee:	bf08      	it	eq
 80068f0:	4770      	bxeq	lr
 80068f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80068f6:	bf04      	itt	eq
 80068f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80068fc:	4770      	bxeq	lr
 80068fe:	b530      	push	{r4, r5, lr}
 8006900:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800690c:	e71c      	b.n	8006748 <__adddf3+0x138>
 800690e:	bf00      	nop

08006910 <__aeabi_ul2d>:
 8006910:	ea50 0201 	orrs.w	r2, r0, r1
 8006914:	bf08      	it	eq
 8006916:	4770      	bxeq	lr
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	f04f 0500 	mov.w	r5, #0
 800691e:	e00a      	b.n	8006936 <__aeabi_l2d+0x16>

08006920 <__aeabi_l2d>:
 8006920:	ea50 0201 	orrs.w	r2, r0, r1
 8006924:	bf08      	it	eq
 8006926:	4770      	bxeq	lr
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800692e:	d502      	bpl.n	8006936 <__aeabi_l2d+0x16>
 8006930:	4240      	negs	r0, r0
 8006932:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006936:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800693a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800693e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006942:	f43f aed8 	beq.w	80066f6 <__adddf3+0xe6>
 8006946:	f04f 0203 	mov.w	r2, #3
 800694a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800694e:	bf18      	it	ne
 8006950:	3203      	addne	r2, #3
 8006952:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006956:	bf18      	it	ne
 8006958:	3203      	addne	r2, #3
 800695a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800695e:	f1c2 0320 	rsb	r3, r2, #32
 8006962:	fa00 fc03 	lsl.w	ip, r0, r3
 8006966:	fa20 f002 	lsr.w	r0, r0, r2
 800696a:	fa01 fe03 	lsl.w	lr, r1, r3
 800696e:	ea40 000e 	orr.w	r0, r0, lr
 8006972:	fa21 f102 	lsr.w	r1, r1, r2
 8006976:	4414      	add	r4, r2
 8006978:	e6bd      	b.n	80066f6 <__adddf3+0xe6>
 800697a:	bf00      	nop

0800697c <__aeabi_dmul>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800698a:	bf1d      	ittte	ne
 800698c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006990:	ea94 0f0c 	teqne	r4, ip
 8006994:	ea95 0f0c 	teqne	r5, ip
 8006998:	f000 f8de 	bleq	8006b58 <__aeabi_dmul+0x1dc>
 800699c:	442c      	add	r4, r5
 800699e:	ea81 0603 	eor.w	r6, r1, r3
 80069a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80069a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80069aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80069ae:	bf18      	it	ne
 80069b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80069b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80069b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069bc:	d038      	beq.n	8006a30 <__aeabi_dmul+0xb4>
 80069be:	fba0 ce02 	umull	ip, lr, r0, r2
 80069c2:	f04f 0500 	mov.w	r5, #0
 80069c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80069ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80069ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80069d2:	f04f 0600 	mov.w	r6, #0
 80069d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80069da:	f09c 0f00 	teq	ip, #0
 80069de:	bf18      	it	ne
 80069e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80069e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80069e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80069ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80069f0:	d204      	bcs.n	80069fc <__aeabi_dmul+0x80>
 80069f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80069f6:	416d      	adcs	r5, r5
 80069f8:	eb46 0606 	adc.w	r6, r6, r6
 80069fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006a00:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006a04:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006a08:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006a0c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006a10:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a14:	bf88      	it	hi
 8006a16:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a1a:	d81e      	bhi.n	8006a5a <__aeabi_dmul+0xde>
 8006a1c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006a20:	bf08      	it	eq
 8006a22:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006a26:	f150 0000 	adcs.w	r0, r0, #0
 8006a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006a34:	ea46 0101 	orr.w	r1, r6, r1
 8006a38:	ea40 0002 	orr.w	r0, r0, r2
 8006a3c:	ea81 0103 	eor.w	r1, r1, r3
 8006a40:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006a44:	bfc2      	ittt	gt
 8006a46:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a4e:	bd70      	popgt	{r4, r5, r6, pc}
 8006a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a54:	f04f 0e00 	mov.w	lr, #0
 8006a58:	3c01      	subs	r4, #1
 8006a5a:	f300 80ab 	bgt.w	8006bb4 <__aeabi_dmul+0x238>
 8006a5e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006a62:	bfde      	ittt	le
 8006a64:	2000      	movle	r0, #0
 8006a66:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006a6a:	bd70      	pople	{r4, r5, r6, pc}
 8006a6c:	f1c4 0400 	rsb	r4, r4, #0
 8006a70:	3c20      	subs	r4, #32
 8006a72:	da35      	bge.n	8006ae0 <__aeabi_dmul+0x164>
 8006a74:	340c      	adds	r4, #12
 8006a76:	dc1b      	bgt.n	8006ab0 <__aeabi_dmul+0x134>
 8006a78:	f104 0414 	add.w	r4, r4, #20
 8006a7c:	f1c4 0520 	rsb	r5, r4, #32
 8006a80:	fa00 f305 	lsl.w	r3, r0, r5
 8006a84:	fa20 f004 	lsr.w	r0, r0, r4
 8006a88:	fa01 f205 	lsl.w	r2, r1, r5
 8006a8c:	ea40 0002 	orr.w	r0, r0, r2
 8006a90:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006a94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006a9c:	fa21 f604 	lsr.w	r6, r1, r4
 8006aa0:	eb42 0106 	adc.w	r1, r2, r6
 8006aa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006aa8:	bf08      	it	eq
 8006aaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f1c4 040c 	rsb	r4, r4, #12
 8006ab4:	f1c4 0520 	rsb	r5, r4, #32
 8006ab8:	fa00 f304 	lsl.w	r3, r0, r4
 8006abc:	fa20 f005 	lsr.w	r0, r0, r5
 8006ac0:	fa01 f204 	lsl.w	r2, r1, r4
 8006ac4:	ea40 0002 	orr.w	r0, r0, r2
 8006ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006acc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006ad0:	f141 0100 	adc.w	r1, r1, #0
 8006ad4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006ad8:	bf08      	it	eq
 8006ada:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	f1c4 0520 	rsb	r5, r4, #32
 8006ae4:	fa00 f205 	lsl.w	r2, r0, r5
 8006ae8:	ea4e 0e02 	orr.w	lr, lr, r2
 8006aec:	fa20 f304 	lsr.w	r3, r0, r4
 8006af0:	fa01 f205 	lsl.w	r2, r1, r5
 8006af4:	ea43 0302 	orr.w	r3, r3, r2
 8006af8:	fa21 f004 	lsr.w	r0, r1, r4
 8006afc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b00:	fa21 f204 	lsr.w	r2, r1, r4
 8006b04:	ea20 0002 	bic.w	r0, r0, r2
 8006b08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006b0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006b10:	bf08      	it	eq
 8006b12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f094 0f00 	teq	r4, #0
 8006b1c:	d10f      	bne.n	8006b3e <__aeabi_dmul+0x1c2>
 8006b1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006b22:	0040      	lsls	r0, r0, #1
 8006b24:	eb41 0101 	adc.w	r1, r1, r1
 8006b28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006b2c:	bf08      	it	eq
 8006b2e:	3c01      	subeq	r4, #1
 8006b30:	d0f7      	beq.n	8006b22 <__aeabi_dmul+0x1a6>
 8006b32:	ea41 0106 	orr.w	r1, r1, r6
 8006b36:	f095 0f00 	teq	r5, #0
 8006b3a:	bf18      	it	ne
 8006b3c:	4770      	bxne	lr
 8006b3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006b42:	0052      	lsls	r2, r2, #1
 8006b44:	eb43 0303 	adc.w	r3, r3, r3
 8006b48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006b4c:	bf08      	it	eq
 8006b4e:	3d01      	subeq	r5, #1
 8006b50:	d0f7      	beq.n	8006b42 <__aeabi_dmul+0x1c6>
 8006b52:	ea43 0306 	orr.w	r3, r3, r6
 8006b56:	4770      	bx	lr
 8006b58:	ea94 0f0c 	teq	r4, ip
 8006b5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006b60:	bf18      	it	ne
 8006b62:	ea95 0f0c 	teqne	r5, ip
 8006b66:	d00c      	beq.n	8006b82 <__aeabi_dmul+0x206>
 8006b68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b6c:	bf18      	it	ne
 8006b6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b72:	d1d1      	bne.n	8006b18 <__aeabi_dmul+0x19c>
 8006b74:	ea81 0103 	eor.w	r1, r1, r3
 8006b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
 8006b82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b86:	bf06      	itte	eq
 8006b88:	4610      	moveq	r0, r2
 8006b8a:	4619      	moveq	r1, r3
 8006b8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b90:	d019      	beq.n	8006bc6 <__aeabi_dmul+0x24a>
 8006b92:	ea94 0f0c 	teq	r4, ip
 8006b96:	d102      	bne.n	8006b9e <__aeabi_dmul+0x222>
 8006b98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006b9c:	d113      	bne.n	8006bc6 <__aeabi_dmul+0x24a>
 8006b9e:	ea95 0f0c 	teq	r5, ip
 8006ba2:	d105      	bne.n	8006bb0 <__aeabi_dmul+0x234>
 8006ba4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006ba8:	bf1c      	itt	ne
 8006baa:	4610      	movne	r0, r2
 8006bac:	4619      	movne	r1, r3
 8006bae:	d10a      	bne.n	8006bc6 <__aeabi_dmul+0x24a>
 8006bb0:	ea81 0103 	eor.w	r1, r1, r3
 8006bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006bb8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006bbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bc0:	f04f 0000 	mov.w	r0, #0
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006bca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006bce:	bd70      	pop	{r4, r5, r6, pc}

08006bd0 <__aeabi_ddiv>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006bde:	bf1d      	ittte	ne
 8006be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006be4:	ea94 0f0c 	teqne	r4, ip
 8006be8:	ea95 0f0c 	teqne	r5, ip
 8006bec:	f000 f8a7 	bleq	8006d3e <__aeabi_ddiv+0x16e>
 8006bf0:	eba4 0405 	sub.w	r4, r4, r5
 8006bf4:	ea81 0e03 	eor.w	lr, r1, r3
 8006bf8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006bfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006c00:	f000 8088 	beq.w	8006d14 <__aeabi_ddiv+0x144>
 8006c04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006c08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006c0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006c10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006c14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006c18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006c1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006c20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006c24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006c28:	429d      	cmp	r5, r3
 8006c2a:	bf08      	it	eq
 8006c2c:	4296      	cmpeq	r6, r2
 8006c2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006c32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006c36:	d202      	bcs.n	8006c3e <__aeabi_ddiv+0x6e>
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c3e:	1ab6      	subs	r6, r6, r2
 8006c40:	eb65 0503 	sbc.w	r5, r5, r3
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006c52:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c5a:	bf22      	ittt	cs
 8006c5c:	1ab6      	subcs	r6, r6, r2
 8006c5e:	4675      	movcs	r5, lr
 8006c60:	ea40 000c 	orrcs.w	r0, r0, ip
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c72:	bf22      	ittt	cs
 8006c74:	1ab6      	subcs	r6, r6, r2
 8006c76:	4675      	movcs	r5, lr
 8006c78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c82:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c8a:	bf22      	ittt	cs
 8006c8c:	1ab6      	subcs	r6, r6, r2
 8006c8e:	4675      	movcs	r5, lr
 8006c90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006ca2:	bf22      	ittt	cs
 8006ca4:	1ab6      	subcs	r6, r6, r2
 8006ca6:	4675      	movcs	r5, lr
 8006ca8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006cac:	ea55 0e06 	orrs.w	lr, r5, r6
 8006cb0:	d018      	beq.n	8006ce4 <__aeabi_ddiv+0x114>
 8006cb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006cb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006cba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006cbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006cc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006cc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006cca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006cce:	d1c0      	bne.n	8006c52 <__aeabi_ddiv+0x82>
 8006cd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006cd4:	d10b      	bne.n	8006cee <__aeabi_ddiv+0x11e>
 8006cd6:	ea41 0100 	orr.w	r1, r1, r0
 8006cda:	f04f 0000 	mov.w	r0, #0
 8006cde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006ce2:	e7b6      	b.n	8006c52 <__aeabi_ddiv+0x82>
 8006ce4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ce8:	bf04      	itt	eq
 8006cea:	4301      	orreq	r1, r0
 8006cec:	2000      	moveq	r0, #0
 8006cee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006cf2:	bf88      	it	hi
 8006cf4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006cf8:	f63f aeaf 	bhi.w	8006a5a <__aeabi_dmul+0xde>
 8006cfc:	ebb5 0c03 	subs.w	ip, r5, r3
 8006d00:	bf04      	itt	eq
 8006d02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006d06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006d0a:	f150 0000 	adcs.w	r0, r0, #0
 8006d0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006d18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006d1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006d20:	bfc2      	ittt	gt
 8006d22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d2a:	bd70      	popgt	{r4, r5, r6, pc}
 8006d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d30:	f04f 0e00 	mov.w	lr, #0
 8006d34:	3c01      	subs	r4, #1
 8006d36:	e690      	b.n	8006a5a <__aeabi_dmul+0xde>
 8006d38:	ea45 0e06 	orr.w	lr, r5, r6
 8006d3c:	e68d      	b.n	8006a5a <__aeabi_dmul+0xde>
 8006d3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006d42:	ea94 0f0c 	teq	r4, ip
 8006d46:	bf08      	it	eq
 8006d48:	ea95 0f0c 	teqeq	r5, ip
 8006d4c:	f43f af3b 	beq.w	8006bc6 <__aeabi_dmul+0x24a>
 8006d50:	ea94 0f0c 	teq	r4, ip
 8006d54:	d10a      	bne.n	8006d6c <__aeabi_ddiv+0x19c>
 8006d56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006d5a:	f47f af34 	bne.w	8006bc6 <__aeabi_dmul+0x24a>
 8006d5e:	ea95 0f0c 	teq	r5, ip
 8006d62:	f47f af25 	bne.w	8006bb0 <__aeabi_dmul+0x234>
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	e72c      	b.n	8006bc6 <__aeabi_dmul+0x24a>
 8006d6c:	ea95 0f0c 	teq	r5, ip
 8006d70:	d106      	bne.n	8006d80 <__aeabi_ddiv+0x1b0>
 8006d72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006d76:	f43f aefd 	beq.w	8006b74 <__aeabi_dmul+0x1f8>
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	e722      	b.n	8006bc6 <__aeabi_dmul+0x24a>
 8006d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006d84:	bf18      	it	ne
 8006d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006d8a:	f47f aec5 	bne.w	8006b18 <__aeabi_dmul+0x19c>
 8006d8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006d92:	f47f af0d 	bne.w	8006bb0 <__aeabi_dmul+0x234>
 8006d96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006d9a:	f47f aeeb 	bne.w	8006b74 <__aeabi_dmul+0x1f8>
 8006d9e:	e712      	b.n	8006bc6 <__aeabi_dmul+0x24a>

08006da0 <__gedf2>:
 8006da0:	f04f 3cff 	mov.w	ip, #4294967295
 8006da4:	e006      	b.n	8006db4 <__cmpdf2+0x4>
 8006da6:	bf00      	nop

08006da8 <__ledf2>:
 8006da8:	f04f 0c01 	mov.w	ip, #1
 8006dac:	e002      	b.n	8006db4 <__cmpdf2+0x4>
 8006dae:	bf00      	nop

08006db0 <__cmpdf2>:
 8006db0:	f04f 0c01 	mov.w	ip, #1
 8006db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006db8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006dc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006dc4:	bf18      	it	ne
 8006dc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006dca:	d01b      	beq.n	8006e04 <__cmpdf2+0x54>
 8006dcc:	b001      	add	sp, #4
 8006dce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006dd2:	bf0c      	ite	eq
 8006dd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006dd8:	ea91 0f03 	teqne	r1, r3
 8006ddc:	bf02      	ittt	eq
 8006dde:	ea90 0f02 	teqeq	r0, r2
 8006de2:	2000      	moveq	r0, #0
 8006de4:	4770      	bxeq	lr
 8006de6:	f110 0f00 	cmn.w	r0, #0
 8006dea:	ea91 0f03 	teq	r1, r3
 8006dee:	bf58      	it	pl
 8006df0:	4299      	cmppl	r1, r3
 8006df2:	bf08      	it	eq
 8006df4:	4290      	cmpeq	r0, r2
 8006df6:	bf2c      	ite	cs
 8006df8:	17d8      	asrcs	r0, r3, #31
 8006dfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006dfe:	f040 0001 	orr.w	r0, r0, #1
 8006e02:	4770      	bx	lr
 8006e04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006e08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e0c:	d102      	bne.n	8006e14 <__cmpdf2+0x64>
 8006e0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006e12:	d107      	bne.n	8006e24 <__cmpdf2+0x74>
 8006e14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006e18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e1c:	d1d6      	bne.n	8006dcc <__cmpdf2+0x1c>
 8006e1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006e22:	d0d3      	beq.n	8006dcc <__cmpdf2+0x1c>
 8006e24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop

08006e2c <__aeabi_cdrcmple>:
 8006e2c:	4684      	mov	ip, r0
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4662      	mov	r2, ip
 8006e32:	468c      	mov	ip, r1
 8006e34:	4619      	mov	r1, r3
 8006e36:	4663      	mov	r3, ip
 8006e38:	e000      	b.n	8006e3c <__aeabi_cdcmpeq>
 8006e3a:	bf00      	nop

08006e3c <__aeabi_cdcmpeq>:
 8006e3c:	b501      	push	{r0, lr}
 8006e3e:	f7ff ffb7 	bl	8006db0 <__cmpdf2>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	bf48      	it	mi
 8006e46:	f110 0f00 	cmnmi.w	r0, #0
 8006e4a:	bd01      	pop	{r0, pc}

08006e4c <__aeabi_dcmpeq>:
 8006e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e50:	f7ff fff4 	bl	8006e3c <__aeabi_cdcmpeq>
 8006e54:	bf0c      	ite	eq
 8006e56:	2001      	moveq	r0, #1
 8006e58:	2000      	movne	r0, #0
 8006e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e5e:	bf00      	nop

08006e60 <__aeabi_dcmplt>:
 8006e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e64:	f7ff ffea 	bl	8006e3c <__aeabi_cdcmpeq>
 8006e68:	bf34      	ite	cc
 8006e6a:	2001      	movcc	r0, #1
 8006e6c:	2000      	movcs	r0, #0
 8006e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e72:	bf00      	nop

08006e74 <__aeabi_dcmple>:
 8006e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e78:	f7ff ffe0 	bl	8006e3c <__aeabi_cdcmpeq>
 8006e7c:	bf94      	ite	ls
 8006e7e:	2001      	movls	r0, #1
 8006e80:	2000      	movhi	r0, #0
 8006e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e86:	bf00      	nop

08006e88 <__aeabi_dcmpge>:
 8006e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e8c:	f7ff ffce 	bl	8006e2c <__aeabi_cdrcmple>
 8006e90:	bf94      	ite	ls
 8006e92:	2001      	movls	r0, #1
 8006e94:	2000      	movhi	r0, #0
 8006e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e9a:	bf00      	nop

08006e9c <__aeabi_dcmpgt>:
 8006e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ea0:	f7ff ffc4 	bl	8006e2c <__aeabi_cdrcmple>
 8006ea4:	bf34      	ite	cc
 8006ea6:	2001      	movcc	r0, #1
 8006ea8:	2000      	movcs	r0, #0
 8006eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8006eae:	bf00      	nop

08006eb0 <__aeabi_dcmpun>:
 8006eb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006eb8:	d102      	bne.n	8006ec0 <__aeabi_dcmpun+0x10>
 8006eba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006ebe:	d10a      	bne.n	8006ed6 <__aeabi_dcmpun+0x26>
 8006ec0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006ec8:	d102      	bne.n	8006ed0 <__aeabi_dcmpun+0x20>
 8006eca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006ece:	d102      	bne.n	8006ed6 <__aeabi_dcmpun+0x26>
 8006ed0:	f04f 0000 	mov.w	r0, #0
 8006ed4:	4770      	bx	lr
 8006ed6:	f04f 0001 	mov.w	r0, #1
 8006eda:	4770      	bx	lr

08006edc <__aeabi_d2iz>:
 8006edc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006ee0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ee4:	d215      	bcs.n	8006f12 <__aeabi_d2iz+0x36>
 8006ee6:	d511      	bpl.n	8006f0c <__aeabi_d2iz+0x30>
 8006ee8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006eec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ef0:	d912      	bls.n	8006f18 <__aeabi_d2iz+0x3c>
 8006ef2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006efe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006f02:	fa23 f002 	lsr.w	r0, r3, r2
 8006f06:	bf18      	it	ne
 8006f08:	4240      	negne	r0, r0
 8006f0a:	4770      	bx	lr
 8006f0c:	f04f 0000 	mov.w	r0, #0
 8006f10:	4770      	bx	lr
 8006f12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006f16:	d105      	bne.n	8006f24 <__aeabi_d2iz+0x48>
 8006f18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006f1c:	bf08      	it	eq
 8006f1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006f22:	4770      	bx	lr
 8006f24:	f04f 0000 	mov.w	r0, #0
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop

08006f2c <__aeabi_d2uiz>:
 8006f2c:	004a      	lsls	r2, r1, #1
 8006f2e:	d211      	bcs.n	8006f54 <__aeabi_d2uiz+0x28>
 8006f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006f34:	d211      	bcs.n	8006f5a <__aeabi_d2uiz+0x2e>
 8006f36:	d50d      	bpl.n	8006f54 <__aeabi_d2uiz+0x28>
 8006f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006f40:	d40e      	bmi.n	8006f60 <__aeabi_d2uiz+0x34>
 8006f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006f4e:	fa23 f002 	lsr.w	r0, r3, r2
 8006f52:	4770      	bx	lr
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	4770      	bx	lr
 8006f5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006f5e:	d102      	bne.n	8006f66 <__aeabi_d2uiz+0x3a>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	4770      	bx	lr
 8006f66:	f04f 0000 	mov.w	r0, #0
 8006f6a:	4770      	bx	lr

08006f6c <__aeabi_d2f>:
 8006f6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006f70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006f74:	bf24      	itt	cs
 8006f76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006f7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006f7e:	d90d      	bls.n	8006f9c <__aeabi_d2f+0x30>
 8006f80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006f84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006f88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006f8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006f90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006f94:	bf08      	it	eq
 8006f96:	f020 0001 	biceq.w	r0, r0, #1
 8006f9a:	4770      	bx	lr
 8006f9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006fa0:	d121      	bne.n	8006fe6 <__aeabi_d2f+0x7a>
 8006fa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006fa6:	bfbc      	itt	lt
 8006fa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006fac:	4770      	bxlt	lr
 8006fae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006fb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006fb6:	f1c2 0218 	rsb	r2, r2, #24
 8006fba:	f1c2 0c20 	rsb	ip, r2, #32
 8006fbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8006fc2:	fa20 f002 	lsr.w	r0, r0, r2
 8006fc6:	bf18      	it	ne
 8006fc8:	f040 0001 	orrne.w	r0, r0, #1
 8006fcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006fd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006fd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006fd8:	ea40 000c 	orr.w	r0, r0, ip
 8006fdc:	fa23 f302 	lsr.w	r3, r3, r2
 8006fe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fe4:	e7cc      	b.n	8006f80 <__aeabi_d2f+0x14>
 8006fe6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006fea:	d107      	bne.n	8006ffc <__aeabi_d2f+0x90>
 8006fec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006ff0:	bf1e      	ittt	ne
 8006ff2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006ff6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006ffa:	4770      	bxne	lr
 8006ffc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007000:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop

0800700c <__gesf2>:
 800700c:	f04f 3cff 	mov.w	ip, #4294967295
 8007010:	e006      	b.n	8007020 <__cmpsf2+0x4>
 8007012:	bf00      	nop

08007014 <__lesf2>:
 8007014:	f04f 0c01 	mov.w	ip, #1
 8007018:	e002      	b.n	8007020 <__cmpsf2+0x4>
 800701a:	bf00      	nop

0800701c <__cmpsf2>:
 800701c:	f04f 0c01 	mov.w	ip, #1
 8007020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800702c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007030:	bf18      	it	ne
 8007032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007036:	d011      	beq.n	800705c <__cmpsf2+0x40>
 8007038:	b001      	add	sp, #4
 800703a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800703e:	bf18      	it	ne
 8007040:	ea90 0f01 	teqne	r0, r1
 8007044:	bf58      	it	pl
 8007046:	ebb2 0003 	subspl.w	r0, r2, r3
 800704a:	bf88      	it	hi
 800704c:	17c8      	asrhi	r0, r1, #31
 800704e:	bf38      	it	cc
 8007050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007054:	bf18      	it	ne
 8007056:	f040 0001 	orrne.w	r0, r0, #1
 800705a:	4770      	bx	lr
 800705c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007060:	d102      	bne.n	8007068 <__cmpsf2+0x4c>
 8007062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007066:	d105      	bne.n	8007074 <__cmpsf2+0x58>
 8007068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800706c:	d1e4      	bne.n	8007038 <__cmpsf2+0x1c>
 800706e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007072:	d0e1      	beq.n	8007038 <__cmpsf2+0x1c>
 8007074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <__aeabi_cfrcmple>:
 800707c:	4684      	mov	ip, r0
 800707e:	4608      	mov	r0, r1
 8007080:	4661      	mov	r1, ip
 8007082:	e7ff      	b.n	8007084 <__aeabi_cfcmpeq>

08007084 <__aeabi_cfcmpeq>:
 8007084:	b50f      	push	{r0, r1, r2, r3, lr}
 8007086:	f7ff ffc9 	bl	800701c <__cmpsf2>
 800708a:	2800      	cmp	r0, #0
 800708c:	bf48      	it	mi
 800708e:	f110 0f00 	cmnmi.w	r0, #0
 8007092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007094 <__aeabi_fcmpeq>:
 8007094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007098:	f7ff fff4 	bl	8007084 <__aeabi_cfcmpeq>
 800709c:	bf0c      	ite	eq
 800709e:	2001      	moveq	r0, #1
 80070a0:	2000      	movne	r0, #0
 80070a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80070a6:	bf00      	nop

080070a8 <__aeabi_fcmplt>:
 80070a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80070ac:	f7ff ffea 	bl	8007084 <__aeabi_cfcmpeq>
 80070b0:	bf34      	ite	cc
 80070b2:	2001      	movcc	r0, #1
 80070b4:	2000      	movcs	r0, #0
 80070b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80070ba:	bf00      	nop

080070bc <__aeabi_fcmple>:
 80070bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80070c0:	f7ff ffe0 	bl	8007084 <__aeabi_cfcmpeq>
 80070c4:	bf94      	ite	ls
 80070c6:	2001      	movls	r0, #1
 80070c8:	2000      	movhi	r0, #0
 80070ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80070ce:	bf00      	nop

080070d0 <__aeabi_fcmpge>:
 80070d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80070d4:	f7ff ffd2 	bl	800707c <__aeabi_cfrcmple>
 80070d8:	bf94      	ite	ls
 80070da:	2001      	movls	r0, #1
 80070dc:	2000      	movhi	r0, #0
 80070de:	f85d fb08 	ldr.w	pc, [sp], #8
 80070e2:	bf00      	nop

080070e4 <__aeabi_fcmpgt>:
 80070e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80070e8:	f7ff ffc8 	bl	800707c <__aeabi_cfrcmple>
 80070ec:	bf34      	ite	cc
 80070ee:	2001      	movcc	r0, #1
 80070f0:	2000      	movcs	r0, #0
 80070f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80070f6:	bf00      	nop

080070f8 <__aeabi_d2lz>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4605      	mov	r5, r0
 80070fc:	460c      	mov	r4, r1
 80070fe:	2200      	movs	r2, #0
 8007100:	2300      	movs	r3, #0
 8007102:	4628      	mov	r0, r5
 8007104:	4621      	mov	r1, r4
 8007106:	f7ff feab 	bl	8006e60 <__aeabi_dcmplt>
 800710a:	b928      	cbnz	r0, 8007118 <__aeabi_d2lz+0x20>
 800710c:	4628      	mov	r0, r5
 800710e:	4621      	mov	r1, r4
 8007110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007114:	f000 b80a 	b.w	800712c <__aeabi_d2ulz>
 8007118:	4628      	mov	r0, r5
 800711a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800711e:	f000 f805 	bl	800712c <__aeabi_d2ulz>
 8007122:	4240      	negs	r0, r0
 8007124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007128:	bd38      	pop	{r3, r4, r5, pc}
 800712a:	bf00      	nop

0800712c <__aeabi_d2ulz>:
 800712c:	b5d0      	push	{r4, r6, r7, lr}
 800712e:	2200      	movs	r2, #0
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <__aeabi_d2ulz+0x34>)
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	f7ff fc21 	bl	800697c <__aeabi_dmul>
 800713a:	f7ff fef7 	bl	8006f2c <__aeabi_d2uiz>
 800713e:	4604      	mov	r4, r0
 8007140:	f7ff fba2 	bl	8006888 <__aeabi_ui2d>
 8007144:	2200      	movs	r2, #0
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <__aeabi_d2ulz+0x38>)
 8007148:	f7ff fc18 	bl	800697c <__aeabi_dmul>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4630      	mov	r0, r6
 8007152:	4639      	mov	r1, r7
 8007154:	f7ff fa5a 	bl	800660c <__aeabi_dsub>
 8007158:	f7ff fee8 	bl	8006f2c <__aeabi_d2uiz>
 800715c:	4621      	mov	r1, r4
 800715e:	bdd0      	pop	{r4, r6, r7, pc}
 8007160:	3df00000 	.word	0x3df00000
 8007164:	41f00000 	.word	0x41f00000

08007168 <__aeabi_fmul>:
 8007168:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800716c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007170:	bf1e      	ittt	ne
 8007172:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007176:	ea92 0f0c 	teqne	r2, ip
 800717a:	ea93 0f0c 	teqne	r3, ip
 800717e:	d06f      	beq.n	8007260 <__aeabi_fmul+0xf8>
 8007180:	441a      	add	r2, r3
 8007182:	ea80 0c01 	eor.w	ip, r0, r1
 8007186:	0240      	lsls	r0, r0, #9
 8007188:	bf18      	it	ne
 800718a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800718e:	d01e      	beq.n	80071ce <__aeabi_fmul+0x66>
 8007190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007194:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007198:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800719c:	fba0 3101 	umull	r3, r1, r0, r1
 80071a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80071a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80071a8:	bf3e      	ittt	cc
 80071aa:	0049      	lslcc	r1, r1, #1
 80071ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80071b0:	005b      	lslcc	r3, r3, #1
 80071b2:	ea40 0001 	orr.w	r0, r0, r1
 80071b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80071ba:	2afd      	cmp	r2, #253	; 0xfd
 80071bc:	d81d      	bhi.n	80071fa <__aeabi_fmul+0x92>
 80071be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80071c6:	bf08      	it	eq
 80071c8:	f020 0001 	biceq.w	r0, r0, #1
 80071cc:	4770      	bx	lr
 80071ce:	f090 0f00 	teq	r0, #0
 80071d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80071d6:	bf08      	it	eq
 80071d8:	0249      	lsleq	r1, r1, #9
 80071da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80071de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80071e2:	3a7f      	subs	r2, #127	; 0x7f
 80071e4:	bfc2      	ittt	gt
 80071e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80071ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80071ee:	4770      	bxgt	lr
 80071f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	3a01      	subs	r2, #1
 80071fa:	dc5d      	bgt.n	80072b8 <__aeabi_fmul+0x150>
 80071fc:	f112 0f19 	cmn.w	r2, #25
 8007200:	bfdc      	itt	le
 8007202:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007206:	4770      	bxle	lr
 8007208:	f1c2 0200 	rsb	r2, r2, #0
 800720c:	0041      	lsls	r1, r0, #1
 800720e:	fa21 f102 	lsr.w	r1, r1, r2
 8007212:	f1c2 0220 	rsb	r2, r2, #32
 8007216:	fa00 fc02 	lsl.w	ip, r0, r2
 800721a:	ea5f 0031 	movs.w	r0, r1, rrx
 800721e:	f140 0000 	adc.w	r0, r0, #0
 8007222:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007226:	bf08      	it	eq
 8007228:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800722c:	4770      	bx	lr
 800722e:	f092 0f00 	teq	r2, #0
 8007232:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007236:	bf02      	ittt	eq
 8007238:	0040      	lsleq	r0, r0, #1
 800723a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800723e:	3a01      	subeq	r2, #1
 8007240:	d0f9      	beq.n	8007236 <__aeabi_fmul+0xce>
 8007242:	ea40 000c 	orr.w	r0, r0, ip
 8007246:	f093 0f00 	teq	r3, #0
 800724a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800724e:	bf02      	ittt	eq
 8007250:	0049      	lsleq	r1, r1, #1
 8007252:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007256:	3b01      	subeq	r3, #1
 8007258:	d0f9      	beq.n	800724e <__aeabi_fmul+0xe6>
 800725a:	ea41 010c 	orr.w	r1, r1, ip
 800725e:	e78f      	b.n	8007180 <__aeabi_fmul+0x18>
 8007260:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007264:	ea92 0f0c 	teq	r2, ip
 8007268:	bf18      	it	ne
 800726a:	ea93 0f0c 	teqne	r3, ip
 800726e:	d00a      	beq.n	8007286 <__aeabi_fmul+0x11e>
 8007270:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007274:	bf18      	it	ne
 8007276:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800727a:	d1d8      	bne.n	800722e <__aeabi_fmul+0xc6>
 800727c:	ea80 0001 	eor.w	r0, r0, r1
 8007280:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007284:	4770      	bx	lr
 8007286:	f090 0f00 	teq	r0, #0
 800728a:	bf17      	itett	ne
 800728c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8007290:	4608      	moveq	r0, r1
 8007292:	f091 0f00 	teqne	r1, #0
 8007296:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800729a:	d014      	beq.n	80072c6 <__aeabi_fmul+0x15e>
 800729c:	ea92 0f0c 	teq	r2, ip
 80072a0:	d101      	bne.n	80072a6 <__aeabi_fmul+0x13e>
 80072a2:	0242      	lsls	r2, r0, #9
 80072a4:	d10f      	bne.n	80072c6 <__aeabi_fmul+0x15e>
 80072a6:	ea93 0f0c 	teq	r3, ip
 80072aa:	d103      	bne.n	80072b4 <__aeabi_fmul+0x14c>
 80072ac:	024b      	lsls	r3, r1, #9
 80072ae:	bf18      	it	ne
 80072b0:	4608      	movne	r0, r1
 80072b2:	d108      	bne.n	80072c6 <__aeabi_fmul+0x15e>
 80072b4:	ea80 0001 	eor.w	r0, r0, r1
 80072b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80072bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80072c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80072c4:	4770      	bx	lr
 80072c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80072ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80072ce:	4770      	bx	lr

080072d0 <__aeabi_frsub>:
 80072d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80072d4:	e002      	b.n	80072dc <__addsf3>
 80072d6:	bf00      	nop

080072d8 <__aeabi_fsub>:
 80072d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080072dc <__addsf3>:
 80072dc:	0042      	lsls	r2, r0, #1
 80072de:	bf1f      	itttt	ne
 80072e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80072e4:	ea92 0f03 	teqne	r2, r3
 80072e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80072ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80072f0:	d06a      	beq.n	80073c8 <__addsf3+0xec>
 80072f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80072f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80072fa:	bfc1      	itttt	gt
 80072fc:	18d2      	addgt	r2, r2, r3
 80072fe:	4041      	eorgt	r1, r0
 8007300:	4048      	eorgt	r0, r1
 8007302:	4041      	eorgt	r1, r0
 8007304:	bfb8      	it	lt
 8007306:	425b      	neglt	r3, r3
 8007308:	2b19      	cmp	r3, #25
 800730a:	bf88      	it	hi
 800730c:	4770      	bxhi	lr
 800730e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007312:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007316:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800731a:	bf18      	it	ne
 800731c:	4240      	negne	r0, r0
 800731e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007322:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007326:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800732a:	bf18      	it	ne
 800732c:	4249      	negne	r1, r1
 800732e:	ea92 0f03 	teq	r2, r3
 8007332:	d03f      	beq.n	80073b4 <__addsf3+0xd8>
 8007334:	f1a2 0201 	sub.w	r2, r2, #1
 8007338:	fa41 fc03 	asr.w	ip, r1, r3
 800733c:	eb10 000c 	adds.w	r0, r0, ip
 8007340:	f1c3 0320 	rsb	r3, r3, #32
 8007344:	fa01 f103 	lsl.w	r1, r1, r3
 8007348:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800734c:	d502      	bpl.n	8007354 <__addsf3+0x78>
 800734e:	4249      	negs	r1, r1
 8007350:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007354:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007358:	d313      	bcc.n	8007382 <__addsf3+0xa6>
 800735a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800735e:	d306      	bcc.n	800736e <__addsf3+0x92>
 8007360:	0840      	lsrs	r0, r0, #1
 8007362:	ea4f 0131 	mov.w	r1, r1, rrx
 8007366:	f102 0201 	add.w	r2, r2, #1
 800736a:	2afe      	cmp	r2, #254	; 0xfe
 800736c:	d251      	bcs.n	8007412 <__addsf3+0x136>
 800736e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007372:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007376:	bf08      	it	eq
 8007378:	f020 0001 	biceq.w	r0, r0, #1
 800737c:	ea40 0003 	orr.w	r0, r0, r3
 8007380:	4770      	bx	lr
 8007382:	0049      	lsls	r1, r1, #1
 8007384:	eb40 0000 	adc.w	r0, r0, r0
 8007388:	3a01      	subs	r2, #1
 800738a:	bf28      	it	cs
 800738c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007390:	d2ed      	bcs.n	800736e <__addsf3+0x92>
 8007392:	fab0 fc80 	clz	ip, r0
 8007396:	f1ac 0c08 	sub.w	ip, ip, #8
 800739a:	ebb2 020c 	subs.w	r2, r2, ip
 800739e:	fa00 f00c 	lsl.w	r0, r0, ip
 80073a2:	bfaa      	itet	ge
 80073a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80073a8:	4252      	neglt	r2, r2
 80073aa:	4318      	orrge	r0, r3
 80073ac:	bfbc      	itt	lt
 80073ae:	40d0      	lsrlt	r0, r2
 80073b0:	4318      	orrlt	r0, r3
 80073b2:	4770      	bx	lr
 80073b4:	f092 0f00 	teq	r2, #0
 80073b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80073bc:	bf06      	itte	eq
 80073be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80073c2:	3201      	addeq	r2, #1
 80073c4:	3b01      	subne	r3, #1
 80073c6:	e7b5      	b.n	8007334 <__addsf3+0x58>
 80073c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80073cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80073d0:	bf18      	it	ne
 80073d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80073d6:	d021      	beq.n	800741c <__addsf3+0x140>
 80073d8:	ea92 0f03 	teq	r2, r3
 80073dc:	d004      	beq.n	80073e8 <__addsf3+0x10c>
 80073de:	f092 0f00 	teq	r2, #0
 80073e2:	bf08      	it	eq
 80073e4:	4608      	moveq	r0, r1
 80073e6:	4770      	bx	lr
 80073e8:	ea90 0f01 	teq	r0, r1
 80073ec:	bf1c      	itt	ne
 80073ee:	2000      	movne	r0, #0
 80073f0:	4770      	bxne	lr
 80073f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80073f6:	d104      	bne.n	8007402 <__addsf3+0x126>
 80073f8:	0040      	lsls	r0, r0, #1
 80073fa:	bf28      	it	cs
 80073fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007400:	4770      	bx	lr
 8007402:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007406:	bf3c      	itt	cc
 8007408:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800740c:	4770      	bxcc	lr
 800740e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007412:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007416:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800741a:	4770      	bx	lr
 800741c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007420:	bf16      	itet	ne
 8007422:	4608      	movne	r0, r1
 8007424:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007428:	4601      	movne	r1, r0
 800742a:	0242      	lsls	r2, r0, #9
 800742c:	bf06      	itte	eq
 800742e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007432:	ea90 0f01 	teqeq	r0, r1
 8007436:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800743a:	4770      	bx	lr

0800743c <__aeabi_ui2f>:
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e004      	b.n	800744c <__aeabi_i2f+0x8>
 8007442:	bf00      	nop

08007444 <__aeabi_i2f>:
 8007444:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007448:	bf48      	it	mi
 800744a:	4240      	negmi	r0, r0
 800744c:	ea5f 0c00 	movs.w	ip, r0
 8007450:	bf08      	it	eq
 8007452:	4770      	bxeq	lr
 8007454:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007458:	4601      	mov	r1, r0
 800745a:	f04f 0000 	mov.w	r0, #0
 800745e:	e01c      	b.n	800749a <__aeabi_l2f+0x2a>

08007460 <__aeabi_ul2f>:
 8007460:	ea50 0201 	orrs.w	r2, r0, r1
 8007464:	bf08      	it	eq
 8007466:	4770      	bxeq	lr
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e00a      	b.n	8007484 <__aeabi_l2f+0x14>
 800746e:	bf00      	nop

08007470 <__aeabi_l2f>:
 8007470:	ea50 0201 	orrs.w	r2, r0, r1
 8007474:	bf08      	it	eq
 8007476:	4770      	bxeq	lr
 8007478:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800747c:	d502      	bpl.n	8007484 <__aeabi_l2f+0x14>
 800747e:	4240      	negs	r0, r0
 8007480:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007484:	ea5f 0c01 	movs.w	ip, r1
 8007488:	bf02      	ittt	eq
 800748a:	4684      	moveq	ip, r0
 800748c:	4601      	moveq	r1, r0
 800748e:	2000      	moveq	r0, #0
 8007490:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007494:	bf08      	it	eq
 8007496:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800749a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800749e:	fabc f28c 	clz	r2, ip
 80074a2:	3a08      	subs	r2, #8
 80074a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80074a8:	db10      	blt.n	80074cc <__aeabi_l2f+0x5c>
 80074aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80074ae:	4463      	add	r3, ip
 80074b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80074b4:	f1c2 0220 	rsb	r2, r2, #32
 80074b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80074bc:	fa20 f202 	lsr.w	r2, r0, r2
 80074c0:	eb43 0002 	adc.w	r0, r3, r2
 80074c4:	bf08      	it	eq
 80074c6:	f020 0001 	biceq.w	r0, r0, #1
 80074ca:	4770      	bx	lr
 80074cc:	f102 0220 	add.w	r2, r2, #32
 80074d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80074d4:	f1c2 0220 	rsb	r2, r2, #32
 80074d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80074dc:	fa21 f202 	lsr.w	r2, r1, r2
 80074e0:	eb43 0002 	adc.w	r0, r3, r2
 80074e4:	bf08      	it	eq
 80074e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80074ea:	4770      	bx	lr

080074ec <__aeabi_f2uiz>:
 80074ec:	0042      	lsls	r2, r0, #1
 80074ee:	d20e      	bcs.n	800750e <__aeabi_f2uiz+0x22>
 80074f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80074f4:	d30b      	bcc.n	800750e <__aeabi_f2uiz+0x22>
 80074f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80074fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80074fe:	d409      	bmi.n	8007514 <__aeabi_f2uiz+0x28>
 8007500:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007508:	fa23 f002 	lsr.w	r0, r3, r2
 800750c:	4770      	bx	lr
 800750e:	f04f 0000 	mov.w	r0, #0
 8007512:	4770      	bx	lr
 8007514:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007518:	d101      	bne.n	800751e <__aeabi_f2uiz+0x32>
 800751a:	0242      	lsls	r2, r0, #9
 800751c:	d102      	bne.n	8007524 <__aeabi_f2uiz+0x38>
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	4770      	bx	lr
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	0000      	movs	r0, r0
	...

08007530 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007530:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007534:	4c39      	ldr	r4, [pc, #228]	; (800761c <main+0xec>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007536:	493a      	ldr	r1, [pc, #232]	; (8007620 <main+0xf0>)
 8007538:	6822      	ldr	r2, [r4, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800753a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800753e:	f042 0210 	orr.w	r2, r2, #16
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 8007546:	4b37      	ldr	r3, [pc, #220]	; (8007624 <main+0xf4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007548:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 800754a:	4313      	orrs	r3, r2
 800754c:	b0a7      	sub	sp, #156	; 0x9c
  SCB->AIRCR =  reg_value;
 800754e:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8007550:	200f      	movs	r0, #15
 8007552:	f7fe f92d 	bl	80057b0 <HAL_InitTick.isra.0>
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007556:	4b34      	ldr	r3, [pc, #208]	; (8007628 <main+0xf8>)
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007558:	4934      	ldr	r1, [pc, #208]	; (800762c <main+0xfc>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800755a:	699a      	ldr	r2, [r3, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800755c:	2001      	movs	r0, #1
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	619a      	str	r2, [r3, #24]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	f002 0201 	and.w	r2, r2, #1
 800756a:	920c      	str	r2, [sp, #48]	; 0x30
 800756c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_PWR_CLK_ENABLE();
 800756e:	69da      	ldr	r2, [r3, #28]
 8007570:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007574:	61da      	str	r2, [r3, #28]
 8007576:	69db      	ldr	r3, [r3, #28]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007578:	2200      	movs	r2, #0
 800757a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007582:	684b      	ldr	r3, [r1, #4]
 8007584:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800758c:	604b      	str	r3, [r1, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800758e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007592:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007596:	f44f 10e0 	mov.w	r0, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800759a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800759c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075a0:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 80075a4:	e9cd 2221 	strd	r2, r2, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075a8:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80075aa:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075ac:	a81c      	add	r0, sp, #112	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075ae:	9120      	str	r1, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075b0:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075b2:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075b4:	f7fa fafe 	bl	8001bb4 <HAL_RCC_OscConfig.constprop.0>
 80075b8:	b108      	cbz	r0, 80075be <main+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 80075ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80075bc:	e7fe      	b.n	80075bc <main+0x8c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f013 0f06 	tst.w	r3, #6
 80075c4:	d10c      	bne.n	80075e0 <main+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f023 0307 	bic.w	r3, r3, #7
 80075cc:	f043 0302 	orr.w	r3, r3, #2
 80075d0:	6023      	str	r3, [r4, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d001      	beq.n	80075e0 <main+0xb0>
 80075dc:	b672      	cpsid	i
 80075de:	e7fe      	b.n	80075de <main+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e0:	4a11      	ldr	r2, [pc, #68]	; (8007628 <main+0xf8>)
 80075e2:	6853      	ldr	r3, [r2, #4]
 80075e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80075e8:	6053      	str	r3, [r2, #4]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075ea:	6853      	ldr	r3, [r2, #4]
 80075ec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80075f0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f2:	6853      	ldr	r3, [r2, #4]
 80075f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f8:	6053      	str	r3, [r2, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075fa:	6813      	ldr	r3, [r2, #0]
 80075fc:	0199      	lsls	r1, r3, #6
 80075fe:	d5ed      	bpl.n	80075dc <main+0xac>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007600:	6853      	ldr	r3, [r2, #4]
  return uwTick;
 8007602:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8007630 <main+0x100>
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	f043 0302 	orr.w	r3, r3, #2
 800760e:	6053      	str	r3, [r2, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007610:	f241 3188 	movw	r1, #5000	; 0x1388
 8007614:	f8db 0000 	ldr.w	r0, [fp]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007618:	e011      	b.n	800763e <main+0x10e>
 800761a:	bf00      	nop
 800761c:	40022000 	.word	0x40022000
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	05fa0300 	.word	0x05fa0300
 8007628:	40021000 	.word	0x40021000
 800762c:	40010000 	.word	0x40010000
 8007630:	20000200 	.word	0x20000200
 8007634:	f8db 3000 	ldr.w	r3, [fp]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007638:	1a1b      	subs	r3, r3, r0
 800763a:	428b      	cmp	r3, r1
 800763c:	d8ce      	bhi.n	80075dc <main+0xac>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800763e:	6853      	ldr	r3, [r2, #4]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b08      	cmp	r3, #8
 8007646:	d1f5      	bne.n	8007634 <main+0x104>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007648:	4ab5      	ldr	r2, [pc, #724]	; (8007920 <main+0x3f0>)
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	2b02      	cmp	r3, #2
 8007652:	d90a      	bls.n	800766a <main+0x13a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007654:	6813      	ldr	r3, [r2, #0]
 8007656:	f023 0307 	bic.w	r3, r3, #7
 800765a:	f043 0302 	orr.w	r3, r3, #2
 800765e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007660:	6813      	ldr	r3, [r2, #0]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b02      	cmp	r3, #2
 8007668:	d1b8      	bne.n	80075dc <main+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800766a:	4cae      	ldr	r4, [pc, #696]	; (8007924 <main+0x3f4>)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800766c:	4aae      	ldr	r2, [pc, #696]	; (8007928 <main+0x3f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800766e:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007670:	ad18      	add	r5, sp, #96	; 0x60
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007672:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800767a:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007682:	6063      	str	r3, [r4, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007684:	f240 2301 	movw	r3, #513	; 0x201
 8007688:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800768c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800768e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8007692:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007694:	f003 020c 	and.w	r2, r3, #12
 8007698:	2a08      	cmp	r2, #8
 800769a:	f000 825c 	beq.w	8007b56 <main+0x626>
      sysclockfreq = HSE_VALUE;
 800769e:	4ea3      	ldr	r6, [pc, #652]	; (800792c <main+0x3fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076a0:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076a2:	4ca0      	ldr	r4, [pc, #640]	; (8007924 <main+0x3f4>)
 80076a4:	4aa2      	ldr	r2, [pc, #648]	; (8007930 <main+0x400>)
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	f8df a288 	ldr.w	sl, [pc, #648]	; 8007934 <main+0x404>
 80076ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076b0:	4413      	add	r3, r2
 80076b2:	f893 35e8 	ldrb.w	r3, [r3, #1512]	; 0x5e8
 80076b6:	4fa0      	ldr	r7, [pc, #640]	; (8007938 <main+0x408>)
 80076b8:	40de      	lsrs	r6, r3
 80076ba:	4ba0      	ldr	r3, [pc, #640]	; (800793c <main+0x40c>)
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80076bc:	f04f 0800 	mov.w	r8, #0
  HAL_InitTick(uwTickPrio);
 80076c0:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076c2:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80076c4:	f7fe f874 	bl	80057b0 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c8:	951e      	str	r5, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ca:	69a3      	ldr	r3, [r4, #24]
 80076cc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80076d0:	f043 0310 	orr.w	r3, r3, #16
 80076d4:	61a3      	str	r3, [r4, #24]
 80076d6:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d8:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	930a      	str	r3, [sp, #40]	; 0x28
 80076e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076e2:	69a3      	ldr	r3, [r4, #24]
 80076e4:	4896      	ldr	r0, [pc, #600]	; (8007940 <main+0x410>)
 80076e6:	f043 0320 	orr.w	r3, r3, #32
 80076ea:	61a3      	str	r3, [r4, #24]
 80076ec:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80076ee:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	9309      	str	r3, [sp, #36]	; 0x24
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fa:	69a3      	ldr	r3, [r4, #24]
 80076fc:	f043 0304 	orr.w	r3, r3, #4
 8007700:	61a3      	str	r3, [r4, #24]
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800770c:	69a3      	ldr	r3, [r4, #24]
 800770e:	f043 0308 	orr.w	r3, r3, #8
 8007712:	61a3      	str	r3, [r4, #24]
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	9307      	str	r3, [sp, #28]
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	4b89      	ldr	r3, [pc, #548]	; (8007944 <main+0x414>)
 8007720:	6103      	str	r3, [r0, #16]
 8007722:	4b89      	ldr	r3, [pc, #548]	; (8007948 <main+0x418>)
 8007724:	f8ca 1010 	str.w	r1, [sl, #16]
 8007728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin = LED_Pin;
 800772a:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800772c:	921f      	str	r2, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = LED_Pin;
 800772e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007732:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LED_Pin;
 8007734:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007738:	f7fa f8d6 	bl	80018e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 800773c:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8007740:	2301      	movs	r3, #1
 8007742:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8007746:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800774a:	f7fa f8cd 	bl	80018e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 800774e:	22ff      	movs	r2, #255	; 0xff
 8007750:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007752:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8007754:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8007758:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800775c:	f7fa f8c4 	bl	80018e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8007760:	f640 4203 	movw	r2, #3075	; 0xc03
 8007764:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007766:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8007768:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 800776c:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007770:	f7fa f8ba 	bl	80018e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8007774:	2300      	movs	r3, #0
 8007776:	2204      	movs	r2, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007778:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 800777a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800777e:	f7fa f8b3 	bl	80018e8 <HAL_GPIO_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8007786:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800794c <main+0x41c>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800778a:	f8cb 305c 	str.w	r3, [fp, #92]	; 0x5c
  hi2c1.Init.ClockSpeed = 400000;
 800778e:	4b70      	ldr	r3, [pc, #448]	; (8007950 <main+0x420>)
  hi2c1.Init.OwnAddress1 = 0;
 8007790:	e9cb 5515 	strd	r5, r5, [fp, #84]	; 0x54
  hi2c1.Init.ClockSpeed = 400000;
 8007794:	e9cb a313 	strd	sl, r3, [fp, #76]	; 0x4c
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007798:	f89b 3089 	ldrb.w	r3, [fp, #137]	; 0x89
  hi2c1.Init.OwnAddress2 = 0;
 800779c:	e9cb 5518 	strd	r5, r5, [fp, #96]	; 0x60
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077a0:	e9cb 551a 	strd	r5, r5, [fp, #104]	; 0x68
 80077a4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 81ea 	beq.w	8007b82 <main+0x652>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80077ae:	2324      	movs	r3, #36	; 0x24
 80077b0:	f88b 3089 	strb.w	r3, [fp, #137]	; 0x89
  __HAL_I2C_DISABLE(hi2c);
 80077b4:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ce:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077d0:	f7fa f988 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077d4:	4b5f      	ldr	r3, [pc, #380]	; (8007954 <main+0x424>)
 80077d6:	f8db 5050 	ldr.w	r5, [fp, #80]	; 0x50
 80077da:	429d      	cmp	r5, r3
 80077dc:	bf94      	ite	ls
 80077de:	4b5e      	ldrls	r3, [pc, #376]	; (8007958 <main+0x428>)
 80077e0:	4b5e      	ldrhi	r3, [pc, #376]	; (800795c <main+0x42c>)
 80077e2:	4298      	cmp	r0, r3
 80077e4:	bf8c      	ite	hi
 80077e6:	2300      	movhi	r3, #0
 80077e8:	2301      	movls	r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 81b1 	bne.w	8007b52 <main+0x622>
  freqrange = I2C_FREQRANGE(pclk1);
 80077f0:	4c5b      	ldr	r4, [pc, #364]	; (8007960 <main+0x430>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077f2:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
  freqrange = I2C_FREQRANGE(pclk1);
 80077f6:	fbb0 f4f4 	udiv	r4, r0, r4
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077fa:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80077fc:	4f55      	ldr	r7, [pc, #340]	; (8007954 <main+0x424>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007802:	4323      	orrs	r3, r4
 8007804:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007806:	6a11      	ldr	r1, [r2, #32]
 8007808:	42bd      	cmp	r5, r7
 800780a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800780e:	f200 8207 	bhi.w	8007c20 <main+0x6f0>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007812:	1e43      	subs	r3, r0, #1
 8007814:	006d      	lsls	r5, r5, #1
 8007816:	fbb3 f3f5 	udiv	r3, r3, r5
 800781a:	f640 70fc 	movw	r0, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800781e:	3401      	adds	r4, #1
 8007820:	4321      	orrs	r1, r4
 8007822:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007824:	69d1      	ldr	r1, [r2, #28]
 8007826:	3301      	adds	r3, #1
 8007828:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800782c:	4203      	tst	r3, r0
 800782e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007832:	f040 8225 	bne.w	8007c80 <main+0x750>
 8007836:	2304      	movs	r3, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007838:	2700      	movs	r7, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800783a:	2520      	movs	r5, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800783c:	430b      	orrs	r3, r1
 800783e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007840:	6810      	ldr	r0, [r2, #0]
 8007842:	e9db 311a 	ldrd	r3, r1, [fp, #104]	; 0x68
 8007846:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800784a:	430b      	orrs	r3, r1
 800784c:	4303      	orrs	r3, r0
 800784e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007850:	6890      	ldr	r0, [r2, #8]
 8007852:	e9db 1316 	ldrd	r1, r3, [fp, #88]	; 0x58
 8007856:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 800785a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800785e:	430b      	orrs	r3, r1
 8007860:	4303      	orrs	r3, r0
 8007862:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007864:	68d0      	ldr	r0, [r2, #12]
 8007866:	e9db 3118 	ldrd	r3, r1, [fp, #96]	; 0x60
 800786a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800786e:	430b      	orrs	r3, r1
 8007870:	4303      	orrs	r3, r0
 8007872:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007874:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007876:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8007924 <main+0x3f4>
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007880:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
  hi2c->State = HAL_I2C_STATE_READY;
 8007884:	f88b 5089 	strb.w	r5, [fp, #137]	; 0x89
  hi2c->PreviousState = I2C_STATE_NONE;
 8007888:	f8cb 707c 	str.w	r7, [fp, #124]	; 0x7c
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	f88b 708a 	strb.w	r7, [fp, #138]	; 0x8a
 8007890:	f8d9 3014 	ldr.w	r3, [r9, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007894:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	f8c9 3014 	str.w	r3, [r9, #20]
 800789e:	f8d9 3014 	ldr.w	r3, [r9, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80078a2:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	9306      	str	r3, [sp, #24]
 80078aa:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80078ac:	f7fa fb84 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b4:	4c2b      	ldr	r4, [pc, #172]	; (8007964 <main+0x434>)
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80078b6:	4639      	mov	r1, r7
 80078b8:	200e      	movs	r0, #14
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	f7fa fb7c 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
 80078c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80078c4:	4639      	mov	r1, r7
 80078c6:	200f      	movs	r0, #15
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f7fa fb75 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
 80078ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80078d2:	4639      	mov	r1, r7
 80078d4:	2010      	movs	r0, #16
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	f7fa fb6e 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
 80078dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80078e0:	4639      	mov	r1, r7
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	2011      	movs	r0, #17
 80078e6:	f7fa fb67 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
 80078ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  huart1.Init.StopBits = UART_STOPBITS_1;
 80078ee:	e9cb 7734 	strd	r7, r7, [fp, #208]	; 0xd0
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80078f2:	e9cb 7738 	strd	r7, r7, [fp, #224]	; 0xe0
  huart1.Init.Parity = UART_PARITY_NONE;
 80078f6:	f8cb 70d8 	str.w	r7, [fp, #216]	; 0xd8
 80078fa:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 80078fc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007900:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007904:	230c      	movs	r3, #12
 8007906:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
  huart1.Instance = USART1;
 800790a:	4b17      	ldr	r3, [pc, #92]	; (8007968 <main+0x438>)
 800790c:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
  if (huart->gState == HAL_UART_STATE_RESET)
 8007910:	f89b 3105 	ldrb.w	r3, [fp, #261]	; 0x105
 8007914:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 81d7 	beq.w	8007ccc <main+0x79c>
 800791e:	e025      	b.n	800796c <main+0x43c>
 8007920:	40022000 	.word	0x40022000
 8007924:	40021000 	.word	0x40021000
 8007928:	0801f6c0 	.word	0x0801f6c0
 800792c:	007a1200 	.word	0x007a1200
 8007930:	0800de80 	.word	0x0800de80
 8007934:	40010800 	.word	0x40010800
 8007938:	40010c00 	.word	0x40010c00
 800793c:	20000000 	.word	0x20000000
 8007940:	40011000 	.word	0x40011000
 8007944:	e03f0000 	.word	0xe03f0000
 8007948:	0c030000 	.word	0x0c030000
 800794c:	40005400 	.word	0x40005400
 8007950:	00061a80 	.word	0x00061a80
 8007954:	000186a0 	.word	0x000186a0
 8007958:	001e847f 	.word	0x001e847f
 800795c:	003d08ff 	.word	0x003d08ff
 8007960:	000f4240 	.word	0x000f4240
 8007964:	e000e100 	.word	0xe000e100
 8007968:	40013800 	.word	0x40013800
  huart->gState = HAL_UART_STATE_BUSY;
 800796c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800796e:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
  huart->gState = HAL_UART_STATE_BUSY;
 8007972:	f88b 3105 	strb.w	r3, [fp, #261]	; 0x105
  __HAL_UART_DISABLE(huart);
 8007976:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007978:	f8db 10d4 	ldr.w	r1, [fp, #212]	; 0xd4
  __HAL_UART_DISABLE(huart);
 800797c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007980:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007982:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007984:	f8db 00d8 	ldr.w	r0, [fp, #216]	; 0xd8
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800798c:	430b      	orrs	r3, r1
 800798e:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007990:	f8db 30d0 	ldr.w	r3, [fp, #208]	; 0xd0
  MODIFY_REG(huart->Instance->CR1,
 8007994:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007996:	4303      	orrs	r3, r0
 8007998:	f8db 00dc 	ldr.w	r0, [fp, #220]	; 0xdc
  MODIFY_REG(huart->Instance->CR1,
 800799c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80079a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80079a6:	430b      	orrs	r3, r1
 80079a8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079aa:	6953      	ldr	r3, [r2, #20]
 80079ac:	f8db 10e0 	ldr.w	r1, [fp, #224]	; 0xe0
 80079b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80079b8:	4bbc      	ldr	r3, [pc, #752]	; (8007cac <main+0x77c>)
 80079ba:	429a      	cmp	r2, r3
 80079bc:	f000 81eb 	beq.w	8007d96 <main+0x866>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079c0:	f7fa f890 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80079c4:	4606      	mov	r6, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079c6:	2319      	movs	r3, #25
 80079c8:	fb03 f606 	mul.w	r6, r3, r6
 80079cc:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d0:	2200      	movs	r2, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fbb6 f3f3 	udiv	r3, r6, r3
 80079d8:	2664      	movs	r6, #100	; 0x64
  htim1.Instance = TIM1;
 80079da:	4db5      	ldr	r5, [pc, #724]	; (8007cb0 <main+0x780>)
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	2020      	movs	r0, #32
  htim1.Init.Prescaler = 0;
 80079de:	e9cb 5201 	strd	r5, r2, [fp, #4]
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079e2:	fbb3 f5f6 	udiv	r5, r3, r6
 80079e6:	fb06 3315 	mls	r3, r6, r5, r3
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	3332      	adds	r3, #50	; 0x32
 80079ee:	fbb3 f3f6 	udiv	r3, r3, r6
  htim1.Init.Period = 65535;
 80079f2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80079f6:	f8db 10c8 	ldr.w	r1, [fp, #200]	; 0xc8
 80079fa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80079fe:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a00:	690b      	ldr	r3, [r1, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a02:	f8cb 200c 	str.w	r2, [fp, #12]
 8007a06:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007a0a:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0c:	694b      	ldr	r3, [r1, #20]
 8007a0e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007a12:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8007a14:	68cb      	ldr	r3, [r1, #12]
 8007a16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a1a:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	f88b 0105 	strb.w	r0, [fp, #261]	; 0x105
  huart->RxState = HAL_UART_STATE_READY;
 8007a24:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  if (htim->State == HAL_TIM_STATE_RESET)
 8007a28:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007a2c:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 8007a30:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 8007a34:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
  htim1.Init.RepetitionCounter = 0;
 8007a38:	e9cb 2205 	strd	r2, r2, [fp, #20]
  htim1.Init.Period = 65535;
 8007a3c:	f8cb 4010 	str.w	r4, [fp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007a40:	9222      	str	r2, [sp, #136]	; 0x88
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a42:	f8cb 201c 	str.w	r2, [fp, #28]
 8007a46:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 81b7 	beq.w	8007dbe <main+0x88e>
  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	2602      	movs	r6, #2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a52:	2401      	movs	r4, #1
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a54:	4d96      	ldr	r5, [pc, #600]	; (8007cb0 <main+0x780>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007a56:	f88b 6041 	strb.w	r6, [fp, #65]	; 0x41
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f7fa fa34 	bl	8001ec8 <TIM_Base_SetConfig.constprop.0>
  __HAL_LOCK(htim);
 8007a60:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a64:	f88b 404a 	strb.w	r4, [fp, #74]	; 0x4a
  __HAL_LOCK(htim);
 8007a68:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
 8007a6e:	f88b 4043 	strb.w	r4, [fp, #67]	; 0x43
 8007a72:	f88b 4044 	strb.w	r4, [fp, #68]	; 0x44
 8007a76:	f88b 4045 	strb.w	r4, [fp, #69]	; 0x45
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	f88b 4046 	strb.w	r4, [fp, #70]	; 0x46
 8007a7e:	f88b 4047 	strb.w	r4, [fp, #71]	; 0x47
 8007a82:	f88b 4048 	strb.w	r4, [fp, #72]	; 0x48
 8007a86:	f88b 4049 	strb.w	r4, [fp, #73]	; 0x49
  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	f88b 4041 	strb.w	r4, [fp, #65]	; 0x41
  __HAL_LOCK(htim);
 8007a8e:	f000 81cc 	beq.w	8007e2a <main+0x8fa>
  __HAL_UNLOCK(htim);
 8007a92:	2200      	movs	r2, #0
  tmpsmcr = htim->Instance->SMCR;
 8007a94:	f8db 0004 	ldr.w	r0, [fp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	f88b 6041 	strb.w	r6, [fp, #65]	; 0x41
  tmpsmcr = htim->Instance->SMCR;
 8007a9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007aa6:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	f88b 4041 	strb.w	r4, [fp, #65]	; 0x41
  if (htim->State == HAL_TIM_STATE_RESET)
 8007aac:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
  __HAL_UNLOCK(htim);
 8007ab0:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	f88b 6041 	strb.w	r6, [fp, #65]	; 0x41
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab8:	f7fa fa06 	bl	8001ec8 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007abc:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac0:	f88b 404a 	strb.w	r4, [fp, #74]	; 0x4a
 8007ac4:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac6:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
 8007aca:	f88b 4043 	strb.w	r4, [fp, #67]	; 0x43
 8007ace:	f88b 4044 	strb.w	r4, [fp, #68]	; 0x44
 8007ad2:	f88b 4045 	strb.w	r4, [fp, #69]	; 0x45
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad6:	f88b 4046 	strb.w	r4, [fp, #70]	; 0x46
 8007ada:	f88b 4047 	strb.w	r4, [fp, #71]	; 0x47
 8007ade:	f88b 4048 	strb.w	r4, [fp, #72]	; 0x48
 8007ae2:	f88b 4049 	strb.w	r4, [fp, #73]	; 0x49
  htim->State = HAL_TIM_STATE_READY;
 8007ae6:	f88b 4041 	strb.w	r4, [fp, #65]	; 0x41
 8007aea:	f000 81a8 	beq.w	8007e3e <main+0x90e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aee:	f8db 3004 	ldr.w	r3, [fp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8007af2:	f88b 6041 	strb.w	r6, [fp, #65]	; 0x41
  tmpcr2 = htim->Instance->CR2;
 8007af6:	6859      	ldr	r1, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af8:	42ab      	cmp	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007afa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 8007afe:	689a      	ldr	r2, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8007b00:	6059      	str	r1, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b02:	f000 8198 	beq.w	8007e36 <main+0x906>
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0a:	f000 8194 	beq.w	8007e36 <main+0x906>
 8007b0e:	4969      	ldr	r1, [pc, #420]	; (8007cb4 <main+0x784>)
 8007b10:	428b      	cmp	r3, r1
 8007b12:	f000 8190 	beq.w	8007e36 <main+0x906>
 8007b16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b1a:	428b      	cmp	r3, r1
 8007b1c:	f000 818b 	beq.w	8007e36 <main+0x906>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007b20:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8007b24:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
  htim->State = HAL_TIM_STATE_READY;
 8007b28:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007b2c:	9322      	str	r3, [sp, #136]	; 0x88
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2300      	movs	r3, #0
 8007b32:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007b36:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8007b3a:	2260      	movs	r2, #96	; 0x60
 8007b3c:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b3e:	a81c      	add	r0, sp, #112	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b40:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b44:	f7fd fe5c 	bl	8005800 <HAL_TIM_PWM_ConfigChannel.constprop.0>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f000 818d 	beq.w	8007e68 <main+0x938>
 8007b4e:	b672      	cpsid	i
	while (1)
 8007b50:	e7fe      	b.n	8007b50 <main+0x620>
 8007b52:	b672      	cpsid	i
 8007b54:	e7fe      	b.n	8007b54 <main+0x624>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b56:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007b5a:	3298      	adds	r2, #152	; 0x98
 8007b5c:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b5e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b60:	f812 6c38 	ldrb.w	r6, [r2, #-56]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b64:	f140 8088 	bpl.w	8007c78 <main+0x748>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b68:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b6a:	4a53      	ldr	r2, [pc, #332]	; (8007cb8 <main+0x788>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b6c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b70:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b74:	3398      	adds	r3, #152	; 0x98
 8007b76:	446b      	add	r3, sp
 8007b78:	f813 3c44 	ldrb.w	r3, [r3, #-68]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b7c:	fbb6 f6f3 	udiv	r6, r6, r3
 8007b80:	e58e      	b.n	80076a0 <main+0x170>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b82:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b84:	971e      	str	r7, [sp, #120]	; 0x78
    hi2c->Lock = HAL_UNLOCKED;
 8007b86:	f88b 7088 	strb.w	r7, [fp, #136]	; 0x88
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b8a:	69a3      	ldr	r3, [r4, #24]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b8c:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b8e:	f043 0308 	orr.w	r3, r3, #8
 8007b92:	61a3      	str	r3, [r4, #24]
 8007b94:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b96:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b9e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ba2:	2312      	movs	r3, #18
 8007ba4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ba8:	f7f9 fe9e 	bl	80018e8 <HAL_GPIO_Init>
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bac:	2310      	movs	r3, #16
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007bae:	e9cb 7587 	strd	r7, r5, [fp, #540]	; 0x21c
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bb2:	e9cb 7789 	strd	r7, r7, [fp, #548]	; 0x224
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007bb6:	e9cb 778b 	strd	r7, r7, [fp, #556]	; 0x22c
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bba:	f8cb 3218 	str.w	r3, [fp, #536]	; 0x218
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007bbe:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007bc0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8007cbc <main+0x78c>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bc8:	61e3      	str	r3, [r4, #28]
 8007bca:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007bcc:	4640      	mov	r0, r8
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8007bd6:	4b3a      	ldr	r3, [pc, #232]	; (8007cc0 <main+0x790>)
 8007bd8:	f8cb 3214 	str.w	r3, [fp, #532]	; 0x214
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007bdc:	f7f9 fe58 	bl	8001890 <HAL_DMA_Init.constprop.0>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d15e      	bne.n	8007ca2 <main+0x772>
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8007be4:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <main+0x794>)
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007be6:	f8cb 5264 	str.w	r5, [fp, #612]	; 0x264
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007bea:	f108 0544 	add.w	r5, r8, #68	; 0x44
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bee:	e9cb 0097 	strd	r0, r0, [fp, #604]	; 0x25c
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bf2:	e9cb 009a 	strd	r0, r0, [fp, #616]	; 0x268
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007bf6:	e9cb 009c 	strd	r0, r0, [fp, #624]	; 0x270
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007bfa:	f5a8 74e4 	sub.w	r4, r8, #456	; 0x1c8
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007bfe:	4628      	mov	r0, r5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007c00:	f8cb 8080 	str.w	r8, [fp, #128]	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8007c04:	f8cb 3258 	str.w	r3, [fp, #600]	; 0x258
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007c08:	f8cb 4238 	str.w	r4, [fp, #568]	; 0x238
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007c0c:	f7f9 fe40 	bl	8001890 <HAL_DMA_Init.constprop.0>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f040 83e9 	bne.w	80083e8 <main+0xeb8>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007c16:	f8cb 5084 	str.w	r5, [fp, #132]	; 0x84
 8007c1a:	f8cb 427c 	str.w	r4, [fp, #636]	; 0x27c
}
 8007c1e:	e5c6      	b.n	80077ae <main+0x27e>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c20:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007c24:	fb04 f303 	mul.w	r3, r4, r3
 8007c28:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007c2c:	fbb3 f3f4 	udiv	r3, r3, r4
 8007c30:	3301      	adds	r3, #1
 8007c32:	430b      	orrs	r3, r1
 8007c34:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c36:	69d1      	ldr	r1, [r2, #28]
 8007c38:	f8db 7054 	ldr.w	r7, [fp, #84]	; 0x54
 8007c3c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007c40:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007c44:	b9ff      	cbnz	r7, 8007c86 <main+0x756>
 8007c46:	3801      	subs	r0, #1
 8007c48:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8007c4c:	fbb0 f4f4 	udiv	r4, r0, r4
 8007c50:	0524      	lsls	r4, r4, #20
 8007c52:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007c56:	bf14      	ite	ne
 8007c58:	2400      	movne	r4, #0
 8007c5a:	2401      	moveq	r4, #1
 8007c5c:	006b      	lsls	r3, r5, #1
 8007c5e:	bb14      	cbnz	r4, 8007ca6 <main+0x776>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f040 80a1 	bne.w	8007da8 <main+0x878>
 8007c66:	442b      	add	r3, r5
 8007c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	e5df      	b.n	8007838 <main+0x308>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c78:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <main+0x798>)
 8007c7a:	fb03 f606 	mul.w	r6, r3, r6
 8007c7e:	e50f      	b.n	80076a0 <main+0x170>
 8007c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c84:	e5d8      	b.n	8007838 <main+0x308>
 8007c86:	2419      	movs	r4, #25
 8007c88:	fb05 f404 	mul.w	r4, r5, r4
 8007c8c:	3801      	subs	r0, #1
 8007c8e:	fbb0 f4f4 	udiv	r4, r0, r4
 8007c92:	0524      	lsls	r4, r4, #20
 8007c94:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007c98:	bf14      	ite	ne
 8007c9a:	2400      	movne	r4, #0
 8007c9c:	2401      	moveq	r4, #1
 8007c9e:	006b      	lsls	r3, r5, #1
 8007ca0:	e7dd      	b.n	8007c5e <main+0x72e>
 8007ca2:	b672      	cpsid	i
 8007ca4:	e7fe      	b.n	8007ca4 <main+0x774>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e5c6      	b.n	8007838 <main+0x308>
 8007caa:	bf00      	nop
 8007cac:	40013800 	.word	0x40013800
 8007cb0:	40012c00 	.word	0x40012c00
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	007a1200 	.word	0x007a1200
 8007cbc:	20000414 	.word	0x20000414
 8007cc0:	4002006c 	.word	0x4002006c
 8007cc4:	40020080 	.word	0x40020080
 8007cc8:	003d0900 	.word	0x003d0900
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ccc:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cce:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    huart->Lock = HAL_UNLOCKED;
 8007cd2:	f88b 8104 	strb.w	r8, [fp, #260]	; 0x104
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cd6:	f8d9 3018 	ldr.w	r3, [r9, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cda:	485a      	ldr	r0, [pc, #360]	; (8007e44 <main+0x914>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ce0:	f8c9 3018 	str.w	r3, [r9, #24]
 8007ce4:	f8d9 3018 	ldr.w	r3, [r9, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce8:	a91c      	add	r1, sp, #112	; 0x70
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cee:	9310      	str	r3, [sp, #64]	; 0x40
 8007cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf2:	f8d9 3018 	ldr.w	r3, [r9, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cf6:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf8:	f043 0304 	orr.w	r3, r3, #4
 8007cfc:	f8c9 3018 	str.w	r3, [r9, #24]
 8007d00:	f8d9 3018 	ldr.w	r3, [r9, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d04:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d18:	f7f9 fde6 	bl	80018e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d22:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d26:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2a:	f7f9 fddd 	bl	80018e8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d2e:	f04f 0c10 	mov.w	ip, #16
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d32:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007e48 <main+0x918>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d36:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <main+0x91c>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d38:	4648      	mov	r0, r9
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d3a:	e9cb 87a9 	strd	r8, r7, [fp, #676]	; 0x2a4
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d3e:	e9cb 88ab 	strd	r8, r8, [fp, #684]	; 0x2ac
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d42:	e9cb 88ad 	strd	r8, r8, [fp, #692]	; 0x2b4
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d46:	e9cb 3ca7 	strd	r3, ip, [fp, #668]	; 0x29c
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d4a:	f7f9 fda1 	bl	8001890 <HAL_DMA_Init.constprop.0>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d16f      	bne.n	8007e32 <main+0x902>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007d52:	4b3f      	ldr	r3, [pc, #252]	; (8007e50 <main+0x920>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007d54:	f109 0844 	add.w	r8, r9, #68	; 0x44
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d58:	e9cb 00b9 	strd	r0, r0, [fp, #740]	; 0x2e4
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d5c:	e9cb 00bc 	strd	r0, r0, [fp, #752]	; 0x2f0
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007d60:	e9cb 50be 	strd	r5, r0, [fp, #760]	; 0x2f8
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d64:	f8cb 72ec 	str.w	r7, [fp, #748]	; 0x2ec
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007d68:	4640      	mov	r0, r8
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007d6a:	f5a9 77ea 	sub.w	r7, r9, #468	; 0x1d4
 8007d6e:	f8cb 90fc 	str.w	r9, [fp, #252]	; 0xfc
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007d72:	f8cb 32e0 	str.w	r3, [fp, #736]	; 0x2e0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007d76:	f8cb 72c0 	str.w	r7, [fp, #704]	; 0x2c0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007d7a:	f7f9 fd89 	bl	8001890 <HAL_DMA_Init.constprop.0>
 8007d7e:	4601      	mov	r1, r0
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d154      	bne.n	8007e2e <main+0x8fe>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d84:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007d86:	f8cb 8100 	str.w	r8, [fp, #256]	; 0x100
 8007d8a:	f8cb 7304 	str.w	r7, [fp, #772]	; 0x304
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d8e:	f7fa f913 	bl	8001fb8 <HAL_NVIC_SetPriority.constprop.0>
 8007d92:	6065      	str	r5, [r4, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007d94:	e5ea      	b.n	800796c <main+0x43c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d96:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <main+0x924>)
 8007d9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007da2:	5cd3      	ldrb	r3, [r2, r3]
 8007da4:	40de      	lsrs	r6, r3
 8007da6:	e60e      	b.n	80079c6 <main+0x496>
 8007da8:	2319      	movs	r3, #25
 8007daa:	fb05 f303 	mul.w	r3, r5, r3
 8007dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8007db2:	3301      	adds	r3, #1
 8007db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dbc:	e53c      	b.n	8007838 <main+0x308>
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007dc2:	2280      	movs	r2, #128	; 0x80
  hdma->Lock = HAL_UNLOCKED;
 8007dc4:	f8ab 3344 	strh.w	r3, [fp, #836]	; 0x344
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007dc8:	e9cb 23cc 	strd	r2, r3, [fp, #816]	; 0x330
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd0:	f8cb 3338 	str.w	r3, [fp, #824]	; 0x338
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007dd4:	2304      	movs	r3, #4
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dd6:	e9cb 00ca 	strd	r0, r0, [fp, #808]	; 0x328
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007dda:	e9cb 00cf 	strd	r0, r0, [fp, #828]	; 0x33c
 8007dde:	f8cb 3364 	str.w	r3, [fp, #868]	; 0x364
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007de2:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <main+0x928>)
    htim->Lock = HAL_UNLOCKED;
 8007de4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8007de8:	6999      	ldr	r1, [r3, #24]
  hdma->DmaBaseAddress = DMA1;
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <main+0x92c>)
 8007dec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007df0:	f8cb 2360 	str.w	r2, [fp, #864]	; 0x360
 8007df4:	6199      	str	r1, [r3, #24]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfc:	9311      	str	r3, [sp, #68]	; 0x44
 8007dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  tmp = hdma->Instance->CCR;
 8007e00:	69d3      	ldr	r3, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007e02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007e06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8007e0a:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 8007e0e:	61d3      	str	r3, [r2, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8007e10:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <main+0x930>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e12:	f8cb 035c 	str.w	r0, [fp, #860]	; 0x35c
 8007e16:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8007e1a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8007e1e:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <main+0x934>)
 8007e24:	f8cb 3324 	str.w	r3, [fp, #804]	; 0x324
}
 8007e28:	e612      	b.n	8007a50 <main+0x520>
 8007e2a:	b672      	cpsid	i
 8007e2c:	e7fe      	b.n	8007e2c <main+0x8fc>
 8007e2e:	b672      	cpsid	i
 8007e30:	e7fe      	b.n	8007e30 <main+0x900>
 8007e32:	b672      	cpsid	i
 8007e34:	e7fe      	b.n	8007e34 <main+0x904>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    htim->Instance->SMCR = tmpsmcr;
 8007e3a:	609a      	str	r2, [r3, #8]
 8007e3c:	e670      	b.n	8007b20 <main+0x5f0>
 8007e3e:	b672      	cpsid	i
 8007e40:	e7fe      	b.n	8007e40 <main+0x910>
 8007e42:	bf00      	nop
 8007e44:	40010800 	.word	0x40010800
 8007e48:	2000049c 	.word	0x2000049c
 8007e4c:	40020044 	.word	0x40020044
 8007e50:	40020058 	.word	0x40020058
 8007e54:	0800de80 	.word	0x0800de80
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40020000 	.word	0x40020000
 8007e60:	20000524 	.word	0x20000524
 8007e64:	4002001c 	.word	0x4002001c
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e68:	f89b 2040 	ldrb.w	r2, [fp, #64]	; 0x40
 8007e6c:	2a01      	cmp	r2, #1
 8007e6e:	f000 82bd 	beq.w	80083ec <main+0xebc>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e76:	f8db 3004 	ldr.w	r3, [fp, #4]

  __HAL_UNLOCK(htim);
 8007e7a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
  htim->Instance->BDTR = tmpbdtr;
 8007e7e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_TIM_MspPostInit(&htim1);
 8007e80:	f7fa f86c 	bl	8001f5c <HAL_TIM_MspPostInit.constprop.0>
 8007e84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e88:	4bd5      	ldr	r3, [pc, #852]	; (80081e0 <main+0xcb0>)
 8007e8a:	611a      	str	r2, [r3, #16]
 8007e8c:	f8db 2000 	ldr.w	r2, [fp]
 8007e90:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	2bc8      	cmp	r3, #200	; 0xc8
 8007e98:	d9fa      	bls.n	8007e90 <main+0x960>
    GPIOx->BSRR = GPIO_Pin;
 8007e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e9e:	4dd0      	ldr	r5, [pc, #832]	; (80081e0 <main+0xcb0>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8007ea0:	2011      	movs	r0, #17
 8007ea2:	612b      	str	r3, [r5, #16]
 8007ea4:	f7f8 f9d6 	bl	8000254 <LCD_Send_Cmd>
  HAL_Delay(120);
 8007ea8:	2078      	movs	r0, #120	; 0x78
 8007eaa:	f7f8 f951 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 8007eae:	203a      	movs	r0, #58	; 0x3a
 8007eb0:	f7f8 f9d0 	bl	8000254 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8007eb4:	2055      	movs	r0, #85	; 0x55
 8007eb6:	f7f8 fa2d 	bl	8000314 <LCD_Send_Dat>
  HAL_Delay(5);
 8007eba:	2005      	movs	r0, #5
 8007ebc:	f7f8 f948 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 8007ec0:	2029      	movs	r0, #41	; 0x29
 8007ec2:	f7f8 f9c7 	bl	8000254 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8007ec6:	2036      	movs	r0, #54	; 0x36
 8007ec8:	f7f8 f9c4 	bl	8000254 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8007ecc:	2008      	movs	r0, #8
 8007ece:	f7f8 fa21 	bl	8000314 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f240 13df 	movw	r3, #479	; 0x1df
 8007ed8:	f240 123f 	movw	r2, #319	; 0x13f
 8007edc:	4608      	mov	r0, r1
 8007ede:	f44f 3416 	mov.w	r4, #153600	; 0x25800
 8007ee2:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ee4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8007ee8:	f7f8 fa9c 	bl	8000424 <LCD_Window>
    GPIOx->BSRR = GPIO_Pin;
 8007eec:	612f      	str	r7, [r5, #16]
	LCD_Bus(dat);
 8007eee:	201f      	movs	r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ef0:	612e      	str	r6, [r5, #16]
 8007ef2:	f7f8 f937 	bl	8000164 <LCD_Bus>
 8007ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007efa:	612b      	str	r3, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007efc:	2302      	movs	r3, #2
 8007efe:	612b      	str	r3, [r5, #16]
 8007f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8007f04:	3c01      	subs	r4, #1
 8007f06:	612b      	str	r3, [r5, #16]
 8007f08:	d1f0      	bne.n	8007eec <main+0x9bc>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8007f10:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007f14:	4608      	mov	r0, r1
 8007f16:	460f      	mov	r7, r1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007f18:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8007f1c:	4db1      	ldr	r5, [pc, #708]	; (80081e4 <main+0xcb4>)
    GPIOx->BSRR = GPIO_Pin;
 8007f1e:	4cb0      	ldr	r4, [pc, #704]	; (80081e0 <main+0xcb0>)
 8007f20:	f7f8 fa80 	bl	8000424 <LCD_Window>
 8007f24:	6127      	str	r7, [r4, #16]
	LCD_Bus(dat);
 8007f26:	2000      	movs	r0, #0
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007f28:	6126      	str	r6, [r4, #16]
 8007f2a:	f7f8 f91b 	bl	8000164 <LCD_Bus>
 8007f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f32:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007f34:	2302      	movs	r3, #2
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8007f3c:	3d01      	subs	r5, #1
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	d1f0      	bne.n	8007f24 <main+0x9f4>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 8007f42:	217f      	movs	r1, #127	; 0x7f
 8007f44:	2014      	movs	r0, #20
 8007f46:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8007f4a:	4aa7      	ldr	r2, [pc, #668]	; (80081e8 <main+0xcb8>)
 8007f4c:	f7fd fdc4 	bl	8005ad8 <LCD_Font.constprop.4>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 8007f50:	462b      	mov	r3, r5
 8007f52:	217f      	movs	r1, #127	; 0x7f
 8007f54:	2014      	movs	r0, #20
 8007f56:	4aa4      	ldr	r2, [pc, #656]	; (80081e8 <main+0xcb8>)
 8007f58:	f7fd fdbe 	bl	8005ad8 <LCD_Font.constprop.4>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8007f5c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8007f60:	217f      	movs	r1, #127	; 0x7f
 8007f62:	2014      	movs	r0, #20
 8007f64:	4aa1      	ldr	r2, [pc, #644]	; (80081ec <main+0xcbc>)
 8007f66:	f7fd fdb7 	bl	8005ad8 <LCD_Font.constprop.4>
 8007f6a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007f6e:	f240 571e 	movw	r7, #1310	; 0x51e
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8007f72:	4e9f      	ldr	r6, [pc, #636]	; (80081f0 <main+0xcc0>)
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7fc fd25 	bl	80049c4 <AT24XX_Read>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	1c60      	adds	r0, r4, #1
 8007f7e:	b280      	uxth	r0, r0
 8007f80:	f7fc fd20 	bl	80049c4 <AT24XX_Read>
 8007f84:	3402      	adds	r4, #2
 8007f86:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007f88:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007f8c:	42bc      	cmp	r4, r7
 8007f8e:	f826 5b02 	strh.w	r5, [r6], #2
 8007f92:	d1ef      	bne.n	8007f74 <main+0xa44>
 8007f94:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007f98:	f640 1706 	movw	r7, #2310	; 0x906
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007f9c:	4e95      	ldr	r6, [pc, #596]	; (80081f4 <main+0xcc4>)
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7fc fd10 	bl	80049c4 <AT24XX_Read>
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	1c60      	adds	r0, r4, #1
 8007fa8:	b280      	uxth	r0, r0
 8007faa:	f7fc fd0b 	bl	80049c4 <AT24XX_Read>
 8007fae:	3402      	adds	r4, #2
 8007fb0:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007fb2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007fb6:	42bc      	cmp	r4, r7
 8007fb8:	f826 5b02 	strh.w	r5, [r6], #2
 8007fbc:	d1ef      	bne.n	8007f9e <main+0xa6e>
 8007fbe:	f640 35b8 	movw	r5, #3000	; 0xbb8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007fc2:	f640 47ee 	movw	r7, #3310	; 0xcee
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007fc6:	4e8c      	ldr	r6, [pc, #560]	; (80081f8 <main+0xcc8>)
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f7fc fcfb 	bl	80049c4 <AT24XX_Read>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	1c68      	adds	r0, r5, #1
 8007fd2:	b280      	uxth	r0, r0
 8007fd4:	f7fc fcf6 	bl	80049c4 <AT24XX_Read>
 8007fd8:	3502      	adds	r5, #2
 8007fda:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8007fdc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007fe0:	42bd      	cmp	r5, r7
 8007fe2:	f826 4b02 	strh.w	r4, [r6], #2
 8007fe6:	d1ef      	bne.n	8007fc8 <main+0xa98>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8007fe8:	2300      	movs	r3, #0
 8007fea:	217f      	movs	r1, #127	; 0x7f
 8007fec:	2014      	movs	r0, #20
 8007fee:	4a7f      	ldr	r2, [pc, #508]	; (80081ec <main+0xcbc>)
 8007ff0:	f7fd fd72 	bl	8005ad8 <LCD_Font.constprop.4>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8007ff4:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	20ec      	movs	r0, #236	; 0xec
 8007ffc:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF2; // ctrl_hum
 8007ffe:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8008002:	f7fd f8f5 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8008006:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800800a:	2202      	movs	r2, #2
 800800c:	20ec      	movs	r0, #236	; 0xec
 800800e:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF4; // ctrl_meas
 8008010:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8008014:	f7fd f8ec 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8008018:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800801c:	2202      	movs	r2, #2
 800801e:	20ec      	movs	r0, #236	; 0xec
 8008020:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF5; // config
 8008022:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8008026:	f7fd f8e3 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 800802a:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800802c:	2201      	movs	r2, #1
 800802e:	20ec      	movs	r0, #236	; 0xec
 8008030:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0x88; // read dig_T regs
 8008032:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008036:	f7fd f8db 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800803a:	2206      	movs	r2, #6
 800803c:	20ec      	movs	r0, #236	; 0xec
 800803e:	a91c      	add	r1, sp, #112	; 0x70
 8008040:	f7fc fea0 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8008044:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8008046:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0x8E; // read dig_P regs
 800804a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800804e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008052:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8008054:	f8ab 3710 	strh.w	r3, [fp, #1808]	; 0x710
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8008058:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_T1 = (cmd[1] << 8) | cmd[0];
 800805c:	f8ab 270e 	strh.w	r2, [fp, #1806]	; 0x70e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008060:	a91c      	add	r1, sp, #112	; 0x70
 8008062:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8008064:	f8ab 3712 	strh.w	r3, [fp, #1810]	; 0x712
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008068:	f7fd f8c2 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800806c:	2212      	movs	r2, #18
 800806e:	20ec      	movs	r0, #236	; 0xec
 8008070:	a91c      	add	r1, sp, #112	; 0x70
 8008072:	f7fc fe87 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8008076:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8008078:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0xA1; // read dig_H regs
 800807c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8008080:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008084:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8008086:	f8ab 3716 	strh.w	r3, [fp, #1814]	; 0x716
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800808a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800808e:	f8ab 2714 	strh.w	r2, [fp, #1812]	; 0x714
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8008092:	f8ab 3718 	strh.w	r3, [fp, #1816]	; 0x718
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8008096:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800809a:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800809c:	f8ab 371a 	strh.w	r3, [fp, #1818]	; 0x71a
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80080a0:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80080a4:	a91c      	add	r1, sp, #112	; 0x70
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80080a6:	f8ab 371c 	strh.w	r3, [fp, #1820]	; 0x71c
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80080aa:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 80080ae:	f8ab 371e 	strh.w	r3, [fp, #1822]	; 0x71e
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80080b2:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80080b6:	f8ab 3720 	strh.w	r3, [fp, #1824]	; 0x720
    dig_P8 = (cmd[15] << 8) | cmd[14];
 80080ba:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
 80080be:	f8ab 3722 	strh.w	r3, [fp, #1826]	; 0x722
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80080c2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80080c6:	f8ab 3724 	strh.w	r3, [fp, #1828]	; 0x724
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80080ca:	f7fd f891 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80080ce:	2201      	movs	r2, #1
 80080d0:	20ec      	movs	r0, #236	; 0xec
 80080d2:	a91c      	add	r1, sp, #112	; 0x70
 80080d4:	f7fc fe56 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 80080d8:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80080da:	2201      	movs	r2, #1
 80080dc:	20ec      	movs	r0, #236	; 0xec
 80080de:	f10d 0171 	add.w	r1, sp, #113	; 0x71
    cmd[1] = 0xE1; // read dig_H regs
 80080e2:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80080e6:	f7fd f883 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80080ea:	2207      	movs	r2, #7
 80080ec:	20ec      	movs	r0, #236	; 0xec
 80080ee:	f10d 0171 	add.w	r1, sp, #113	; 0x71
 80080f2:	f7fc fe47 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 80080f6:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80080fa:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
    dig_H1 = cmd[0];
 80080fe:	f8ab 2726 	strh.w	r2, [fp, #1830]	; 0x726
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8008102:	f8bd 2071 	ldrh.w	r2, [sp, #113]	; 0x71
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8008106:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
    dig_H2 = (cmd[2] << 8) | cmd[1];
 800810a:	f8ab 2728 	strh.w	r2, [fp, #1832]	; 0x728
    dig_H3 = cmd[3];
 800810e:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8008112:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
    dig_H3 = cmd[3];
 8008116:	f8ab 272a 	strh.w	r2, [fp, #1834]	; 0x72a
    dig_H6 = cmd[7];
 800811a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800811e:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
 8008122:	f8ab 2730 	strh.w	r2, [fp, #1840]	; 0x730
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8008126:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 800812a:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 800812c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8008130:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008134:	2901      	cmp	r1, #1
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8008136:	f8ab 272c 	strh.w	r2, [fp, #1836]	; 0x72c
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 800813a:	f8ab 372e 	strh.w	r3, [fp, #1838]	; 0x72e
 800813e:	d121      	bne.n	8008184 <main+0xc54>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008140:	2302      	movs	r3, #2
 8008142:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008146:	f8db 3004 	ldr.w	r3, [fp, #4]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800814a:	492c      	ldr	r1, [pc, #176]	; (80081fc <main+0xccc>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800814c:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800814e:	428b      	cmp	r3, r1
  TIMx->CCER &= ~tmp;
 8008150:	f022 0201 	bic.w	r2, r2, #1
 8008154:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	f042 0201 	orr.w	r2, r2, #1
 800815c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800815e:	f000 878c 	beq.w	800907a <main+0x1b4a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008166:	f000 878c 	beq.w	8009082 <main+0x1b52>
 800816a:	4a25      	ldr	r2, [pc, #148]	; (8008200 <main+0xcd0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	f000 8788 	beq.w	8009082 <main+0x1b52>
 8008172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008176:	4293      	cmp	r3, r2
 8008178:	f000 8783 	beq.w	8009082 <main+0x1b52>
    __HAL_TIM_ENABLE(htim);
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]
  if (huart->RxState == HAL_UART_STATE_READY)
 8008184:	f89b 3106 	ldrb.w	r3, [fp, #262]	; 0x106
 8008188:	2b20      	cmp	r3, #32
 800818a:	d122      	bne.n	80081d2 <main+0xca2>
    __HAL_LOCK(huart);
 800818c:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8008190:	2b01      	cmp	r3, #1
 8008192:	d01e      	beq.n	80081d2 <main+0xca2>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008194:	2200      	movs	r2, #0
  huart->RxXferSize = Size;
 8008196:	2101      	movs	r1, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008198:	2022      	movs	r0, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800819a:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	f8cb 20f8 	str.w	r2, [fp, #248]	; 0xf8
  __HAL_UNLOCK(huart);
 80081a2:	f88b 2104 	strb.w	r2, [fp, #260]	; 0x104
  huart->RxXferCount = Size;
 80081a6:	f8ab 10f6 	strh.w	r1, [fp, #246]	; 0xf6
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081aa:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ae:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081b2:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 80081b4:	4c13      	ldr	r4, [pc, #76]	; (8008204 <main+0xcd4>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 80081ba:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
  huart->RxXferSize = Size;
 80081be:	f8ab 10f4 	strh.w	r1, [fp, #244]	; 0xf4
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081c2:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	f042 0220 	orr.w	r2, r2, #32
 80081d0:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 80081d2:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <main+0xcd8>)
 80081d4:	ab12      	add	r3, sp, #72	; 0x48
 80081d6:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 80081d8:	f89b 4105 	ldrb.w	r4, [fp, #261]	; 0x105
 80081dc:	c303      	stmia	r3!, {r0, r1}
 80081de:	e015      	b.n	800820c <main+0xcdc>
 80081e0:	40010c00 	.word	0x40010c00
 80081e4:	000251c4 	.word	0x000251c4
 80081e8:	0801f664 	.word	0x0801f664
 80081ec:	0801f674 	.word	0x0801f674
 80081f0:	20000568 	.word	0x20000568
 80081f4:	200006a0 	.word	0x200006a0
 80081f8:	200007d8 	.word	0x200007d8
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40000400 	.word	0x40000400
 8008204:	20000410 	.word	0x20000410
 8008208:	0801f6d4 	.word	0x0801f6d4
 800820c:	2c20      	cmp	r4, #32
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	d107      	bne.n	8008222 <main+0xcf2>
    __HAL_LOCK(huart);
 8008212:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8008216:	2b01      	cmp	r3, #1
 8008218:	d003      	beq.n	8008222 <main+0xcf2>
 800821a:	210a      	movs	r1, #10
 800821c:	a812      	add	r0, sp, #72	; 0x48
 800821e:	f7fd f9bd 	bl	800559c <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8008222:	4b96      	ldr	r3, [pc, #600]	; (800847c <main+0xf4c>)
 8008224:	ac18      	add	r4, sp, #96	; 0x60
 8008226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008228:	c407      	stmia	r4!, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 800822a:	f89b 5105 	ldrb.w	r5, [fp, #261]	; 0x105
 800822e:	8023      	strh	r3, [r4, #0]
 8008230:	2d20      	cmp	r5, #32
 8008232:	d154      	bne.n	80082de <main+0xdae>
    __HAL_LOCK(huart);
 8008234:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 8008238:	2b01      	cmp	r3, #1
 800823a:	d050      	beq.n	80082de <main+0xdae>
    huart->TxXferSize = Size;
 800823c:	200e      	movs	r0, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823e:	2100      	movs	r1, #0
    __HAL_LOCK(huart);
 8008240:	2401      	movs	r4, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008242:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8008246:	ab18      	add	r3, sp, #96	; 0x60
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008248:	4d8d      	ldr	r5, [pc, #564]	; (8008480 <main+0xf50>)
    huart->pTxBuffPtr = pData;
 800824a:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800824e:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
    huart->TxXferCount = Size;
 8008252:	f8ab 00ee 	strh.w	r0, [fp, #238]	; 0xee
    __HAL_LOCK(huart);
 8008256:	f88b 4104 	strb.w	r4, [fp, #260]	; 0x104
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825a:	f8cb 1108 	str.w	r1, [fp, #264]	; 0x108
    huart->TxXferSize = Size;
 800825e:	f8ab 00ec 	strh.w	r0, [fp, #236]	; 0xec
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008262:	f88b c105 	strb.w	ip, [fp, #261]	; 0x105
    huart->hdmatx->XferAbortCallback = NULL;
 8008266:	e9c3 510c 	strd	r5, r1, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 800826a:	f893 5020 	ldrb.w	r5, [r3, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800826e:	4f85      	ldr	r7, [pc, #532]	; (8008484 <main+0xf54>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008270:	4e85      	ldr	r6, [pc, #532]	; (8008488 <main+0xf58>)
 8008272:	42a5      	cmp	r5, r4
 8008274:	e9c3 760a 	strd	r7, r6, [r3, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008278:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 800827c:	d025      	beq.n	80082ca <main+0xd9a>
  if(HAL_DMA_STATE_READY == hdma->State)
 800827e:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008282:	f883 4020 	strb.w	r4, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008286:	42a5      	cmp	r5, r4
 8008288:	f040 80b2 	bne.w	80083f0 <main+0xec0>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800828c:	6399      	str	r1, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 800828e:	2102      	movs	r1, #2
    __HAL_DMA_DISABLE(hdma);
 8008290:	681c      	ldr	r4, [r3, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8008292:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008296:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008298:	408d      	lsls	r5, r1
    __HAL_DMA_DISABLE(hdma);
 800829a:	6821      	ldr	r1, [r4, #0]
 800829c:	f021 0101 	bic.w	r1, r1, #1
 80082a0:	6021      	str	r1, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80082a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80082a4:	604d      	str	r5, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082a6:	6859      	ldr	r1, [r3, #4]
 80082a8:	1d13      	adds	r3, r2, #4
 80082aa:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 80082ac:	6060      	str	r0, [r4, #4]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80082ae:	bf13      	iteet	ne
 80082b0:	a918      	addne	r1, sp, #96	; 0x60
    hdma->Instance->CPAR = DstAddress;
 80082b2:	60a3      	streq	r3, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80082b4:	ab18      	addeq	r3, sp, #96	; 0x60
    hdma->Instance->CPAR = SrcAddress;
 80082b6:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80082b8:	60e3      	str	r3, [r4, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	f043 030e 	orr.w	r3, r3, #14
 80082c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	6023      	str	r3, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80082ca:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80082ce:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 80082d0:	2300      	movs	r3, #0
 80082d2:	f88b 3104 	strb.w	r3, [fp, #260]	; 0x104
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082d6:	6953      	ldr	r3, [r2, #20]
 80082d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082dc:	6153      	str	r3, [r2, #20]
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80082de:	2300      	movs	r3, #0
	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80082e0:	4a6a      	ldr	r2, [pc, #424]	; (800848c <main+0xf5c>)
 80082e2:	6353      	str	r3, [r2, #52]	; 0x34
 80082e4:	3301      	adds	r3, #1
 80082e6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80082ea:	d1fa      	bne.n	80082e2 <main+0xdb2>
 80082ec:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8008490 <main+0xf60>
		if (rx_index != 0) {
 80082f0:	f89b 310c 	ldrb.w	r3, [fp, #268]	; 0x10c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 862b 	bne.w	8008f50 <main+0x1a20>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
 80082fa:	f7fd f8c7 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 80082fe:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
		if (rtcSecLast != rtcSec) {
 8008302:	4a64      	ldr	r2, [pc, #400]	; (8008494 <main+0xf64>)
    return ((val / 16 * 10) + (val % 16));
 8008304:	091c      	lsrs	r4, r3, #4
 8008306:	7a11      	ldrb	r1, [r2, #8]
 8008308:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800830c:	f003 040f 	and.w	r4, r3, #15
 8008310:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8008314:	b2e4      	uxtb	r4, r4
 8008316:	42a1      	cmp	r1, r4
		rtcSec = DS3231_getSec();
 8008318:	f88b 4732 	strb.w	r4, [fp, #1842]	; 0x732
		if (rtcSecLast != rtcSec) {
 800831c:	d0e8      	beq.n	80082f0 <main+0xdc0>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 800831e:	f7fd f8b5 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8008322:	f89b 30a1 	ldrb.w	r3, [fp, #161]	; 0xa1
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8008326:	2100      	movs	r1, #0
    return ((val / 16 * 10) + (val % 16));
 8008328:	091a      	lsrs	r2, r3, #4
 800832a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2008      	movs	r0, #8
 800833a:	4a57      	ldr	r2, [pc, #348]	; (8008498 <main+0xf68>)
 800833c:	9303      	str	r3, [sp, #12]
			rtcMin = DS3231_getMin();
 800833e:	f88b 3733 	strb.w	r3, [fp, #1843]	; 0x733
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8008342:	f7f9 f939 	bl	80015b8 <LCD_Circle.constprop.1>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 8008346:	2100      	movs	r1, #0
 8008348:	2008      	movs	r0, #8
 800834a:	4a53      	ldr	r2, [pc, #332]	; (8008498 <main+0xf68>)
 800834c:	f7f9 f9ea 	bl	8001724 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 8008350:	f014 0401 	ands.w	r4, r4, #1
 8008354:	d04f      	beq.n	80083f6 <main+0xec6>
				LCD_Circle(172, 35, 7, 1, 1, ORANGE);
 8008356:	2101      	movs	r1, #1
 8008358:	2007      	movs	r0, #7
 800835a:	4a4f      	ldr	r2, [pc, #316]	; (8008498 <main+0xf68>)
 800835c:	f7f9 f92c 	bl	80015b8 <LCD_Circle.constprop.1>
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	2501      	movs	r5, #1
	P = 1 - radius;
 8008366:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 800836a:	f04f 0807 	mov.w	r8, #7
 800836e:	e00f      	b.n	8008390 <main+0xe60>
			P = (P + 5) + (2 * (a_ - b_));
 8008370:	1e6b      	subs	r3, r5, #1
 8008372:	eba3 0308 	sub.w	r3, r3, r8
 8008376:	3405      	adds	r4, #5
 8008378:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 800837c:	462b      	mov	r3, r5
			b_--;
 800837e:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8008382:	4598      	cmp	r8, r3
 8008384:	f105 0501 	add.w	r5, r5, #1
 8008388:	f109 0902 	add.w	r9, r9, #2
 800838c:	f2c0 866f 	blt.w	800906e <main+0x1b3e>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8008390:	4b41      	ldr	r3, [pc, #260]	; (8008498 <main+0xf68>)
 8008392:	b2ae      	uxth	r6, r5
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	fa1f f388 	uxth.w	r3, r8
 800839a:	005f      	lsls	r7, r3, #1
 800839c:	3701      	adds	r7, #1
 800839e:	b2bf      	uxth	r7, r7
 80083a0:	f1c3 014b 	rsb	r1, r3, #75	; 0x4b
 80083a4:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 80083a8:	f109 0201 	add.w	r2, r9, #1
 80083ac:	b292      	uxth	r2, r2
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	b289      	uxth	r1, r1
 80083b2:	463b      	mov	r3, r7
 80083b4:	b280      	uxth	r0, r0
 80083b6:	9205      	str	r2, [sp, #20]
 80083b8:	f7f8 fc08 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80083bc:	9b04      	ldr	r3, [sp, #16]
 80083be:	9a05      	ldr	r2, [sp, #20]
 80083c0:	f1c6 014c 	rsb	r1, r6, #76	; 0x4c
 80083c4:	4e34      	ldr	r6, [pc, #208]	; (8008498 <main+0xf68>)
 80083c6:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 80083ca:	9600      	str	r6, [sp, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	b289      	uxth	r1, r1
 80083d0:	463a      	mov	r2, r7
 80083d2:	b280      	uxth	r0, r0
 80083d4:	f7f8 fbfa 	bl	8000bcc <LCD_Rect_Fill>
		if (P < 0)
 80083d8:	2c00      	cmp	r4, #0
			P = (P + 3) + (2 * a_);
 80083da:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 80083de:	dac7      	bge.n	8008370 <main+0xe40>
			P = (P + 3) + (2 * a_);
 80083e0:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 80083e4:	462b      	mov	r3, r5
 80083e6:	e7cc      	b.n	8008382 <main+0xe52>
 80083e8:	b672      	cpsid	i
	while (1)
 80083ea:	e7fe      	b.n	80083ea <main+0xeba>
 80083ec:	b672      	cpsid	i
 80083ee:	e7fe      	b.n	80083ee <main+0xebe>
    __HAL_UNLOCK(hdma); 
 80083f0:	f883 1020 	strb.w	r1, [r3, #32]
 80083f4:	e769      	b.n	80082ca <main+0xd9a>
 80083f6:	46a0      	mov	r8, r4
 80083f8:	2501      	movs	r5, #1
	P = 1 - radius;
 80083fa:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 80083fe:	f04f 0907 	mov.w	r9, #7
 8008402:	e00e      	b.n	8008422 <main+0xef2>
			P = (P + 5) + (2 * (a_ - b_));
 8008404:	1e6b      	subs	r3, r5, #1
 8008406:	eba3 0309 	sub.w	r3, r3, r9
 800840a:	3405      	adds	r4, #5
 800840c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8008410:	462b      	mov	r3, r5
			b_--;
 8008412:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8008416:	454b      	cmp	r3, r9
 8008418:	f105 0501 	add.w	r5, r5, #1
 800841c:	f108 0802 	add.w	r8, r8, #2
 8008420:	dc3c      	bgt.n	800849c <main+0xf6c>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8008422:	2300      	movs	r3, #0
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	fa1f f389 	uxth.w	r3, r9
 800842a:	005f      	lsls	r7, r3, #1
 800842c:	b2ae      	uxth	r6, r5
 800842e:	3701      	adds	r7, #1
 8008430:	b2bf      	uxth	r7, r7
 8008432:	f1c3 0123 	rsb	r1, r3, #35	; 0x23
 8008436:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 800843a:	f108 0201 	add.w	r2, r8, #1
 800843e:	b292      	uxth	r2, r2
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	b289      	uxth	r1, r1
 8008444:	463b      	mov	r3, r7
 8008446:	b280      	uxth	r0, r0
 8008448:	9205      	str	r2, [sp, #20]
 800844a:	f7f8 fbbf 	bl	8000bcc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800844e:	f1c6 0124 	rsb	r1, r6, #36	; 0x24
 8008452:	2600      	movs	r6, #0
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	9a05      	ldr	r2, [sp, #20]
 8008458:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 800845c:	9600      	str	r6, [sp, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	b289      	uxth	r1, r1
 8008462:	463a      	mov	r2, r7
 8008464:	b280      	uxth	r0, r0
 8008466:	f7f8 fbb1 	bl	8000bcc <LCD_Rect_Fill>
		if (P < 0)
 800846a:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 800846c:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 8008470:	dac8      	bge.n	8008404 <main+0xed4>
			P = (P + 3) + (2 * a_);
 8008472:	eb08 0403 	add.w	r4, r8, r3
			a_++;
 8008476:	462b      	mov	r3, r5
 8008478:	e7cd      	b.n	8008416 <main+0xee6>
 800847a:	bf00      	nop
 800847c:	0801f6e0 	.word	0x0801f6e0
 8008480:	08001b2d 	.word	0x08001b2d
 8008484:	08001b05 	.word	0x08001b05
 8008488:	08001b29 	.word	0x08001b29
 800848c:	40012c00 	.word	0x40012c00
 8008490:	20000950 	.word	0x20000950
 8008494:	20000000 	.word	0x20000000
 8008498:	00ffa500 	.word	0x00ffa500
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 800849c:	2200      	movs	r2, #0
 800849e:	2101      	movs	r1, #1
 80084a0:	2007      	movs	r0, #7
 80084a2:	f7f9 f93f 	bl	8001724 <LCD_Circle.constprop.0>
 80084a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084aa:	4be3      	ldr	r3, [pc, #908]	; (8008838 <main+0x1308>)
 80084ac:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 80084ae:	4de3      	ldr	r5, [pc, #908]	; (800883c <main+0x130c>)
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	7a6c      	ldrb	r4, [r5, #9]
 80084b4:	429c      	cmp	r4, r3
 80084b6:	f000 83bc 	beq.w	8008c32 <main+0x1702>
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 80084ba:	f7fc ffe7 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 80084be:	f89b 30a2 	ldrb.w	r3, [fp, #162]	; 0xa2
				sprintf(clockPrint, "%02d", rtcMinLast);
 80084c2:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 80084c4:	0918      	lsrs	r0, r3, #4
 80084c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80084d2:	49db      	ldr	r1, [pc, #876]	; (8008840 <main+0x1310>)
 80084d4:	a81c      	add	r0, sp, #112	; 0x70
				rtcHrs = DS3231_getHrs();
 80084d6:	f88b 3734 	strb.w	r3, [fp, #1844]	; 0x734
				sprintf(clockPrint, "%02d", rtcMinLast);
 80084da:	f001 fe7b 	bl	800a1d4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80084de:	2200      	movs	r2, #0
 80084e0:	20b4      	movs	r0, #180	; 0xb4
 80084e2:	a91c      	add	r1, sp, #112	; 0x70
 80084e4:	f7fd faae 	bl	8005a44 <LCD_Font.constprop.3>
				sprintf(clockPrint, "%02d", rtcMin);
 80084e8:	f89b 2733 	ldrb.w	r2, [fp, #1843]	; 0x733
 80084ec:	49d4      	ldr	r1, [pc, #848]	; (8008840 <main+0x1310>)
 80084ee:	a81c      	add	r0, sp, #112	; 0x70
 80084f0:	f001 fe70 	bl	800a1d4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80084f4:	20b4      	movs	r0, #180	; 0xb4
 80084f6:	4ad3      	ldr	r2, [pc, #844]	; (8008844 <main+0x1314>)
 80084f8:	a91c      	add	r1, sp, #112	; 0x70
 80084fa:	f7fd faa3 	bl	8005a44 <LCD_Font.constprop.3>
				if (rtcHrsLast != rtcHrs) {
 80084fe:	7aac      	ldrb	r4, [r5, #10]
 8008500:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
 8008504:	42a3      	cmp	r3, r4
 8008506:	f000 80e5 	beq.w	80086d4 <main+0x11a4>
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 800850a:	f7fc ffbf 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 800850e:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    return ((val / 16 * 10) + (val % 16));
 8008512:	091a      	lsrs	r2, r3, #4
 8008514:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 8008520:	f88b 3735 	strb.w	r3, [fp, #1845]	; 0x735
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 8008524:	f7fc ffb2 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8008528:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
    return ((val / 16 * 10) + (val % 16));
 800852c:	091a      	lsrs	r2, r3, #4
 800852e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 800853a:	f88b 3736 	strb.w	r3, [fp, #1846]	; 0x736
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 800853e:	f7fc ffa5 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8008542:	f89b 30a5 	ldrb.w	r3, [fp, #165]	; 0xa5
    return ((val / 16 * 10) + (val % 16));
 8008546:	091a      	lsrs	r2, r3, #4
 8008548:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800854c:	f003 030f 	and.w	r3, r3, #15
 8008550:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 8008554:	f88b 3737 	strb.w	r3, [fp, #1847]	; 0x737
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 8008558:	f7fc ff98 	bl	800548c <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 800855c:	f89b 30a6 	ldrb.w	r3, [fp, #166]	; 0xa6
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8008560:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 8008562:	0918      	lsrs	r0, r3, #4
 8008564:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008570:	49b3      	ldr	r1, [pc, #716]	; (8008840 <main+0x1310>)
 8008572:	a81c      	add	r0, sp, #112	; 0x70
					rtcYear = DS3231_getYear();
 8008574:	f88b 3738 	strb.w	r3, [fp, #1848]	; 0x738
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8008578:	f001 fe2c 	bl	800a1d4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800857c:	2200      	movs	r2, #0
 800857e:	a91c      	add	r1, sp, #112	; 0x70
 8008580:	4610      	mov	r0, r2
 8008582:	f7fd fa5f 	bl	8005a44 <LCD_Font.constprop.3>
					sprintf(clockPrint, "%02d", rtcHrs);
 8008586:	f89b 2734 	ldrb.w	r2, [fp, #1844]	; 0x734
 800858a:	49ad      	ldr	r1, [pc, #692]	; (8008840 <main+0x1310>)
 800858c:	a81c      	add	r0, sp, #112	; 0x70
 800858e:	f001 fe21 	bl	800a1d4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8008592:	4aac      	ldr	r2, [pc, #688]	; (8008844 <main+0x1314>)
 8008594:	2000      	movs	r0, #0
 8008596:	a91c      	add	r1, sp, #112	; 0x70
 8008598:	f7fd fa54 	bl	8005a44 <LCD_Font.constprop.3>
					if (rtcDayLast != rtcDay) {
 800859c:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
 80085a0:	f89b 3735 	ldrb.w	r3, [fp, #1845]	; 0x735
 80085a4:	429a      	cmp	r2, r3
 80085a6:	f000 8089 	beq.w	80086bc <main+0x118c>
						sprintf(clockPrint, "%02d", rtcDateLast);
 80085aa:	f89b 273a 	ldrb.w	r2, [fp, #1850]	; 0x73a
 80085ae:	49a4      	ldr	r1, [pc, #656]	; (8008840 <main+0x1310>)
 80085b0:	a81c      	add	r0, sp, #112	; 0x70
 80085b2:	f001 fe0f 	bl	800a1d4 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80085b6:	2200      	movs	r2, #0
 80085b8:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80085bc:	a91c      	add	r1, sp, #112	; 0x70
 80085be:	f7fd f9f7 	bl	80059b0 <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d", rtcDate);
 80085c2:	f89b 2736 	ldrb.w	r2, [fp, #1846]	; 0x736
 80085c6:	499e      	ldr	r1, [pc, #632]	; (8008840 <main+0x1310>)
 80085c8:	a81c      	add	r0, sp, #112	; 0x70
 80085ca:	f001 fe03 	bl	800a1d4 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80085ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085d2:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80085d6:	a91c      	add	r1, sp, #112	; 0x70
 80085d8:	f7fd f9ea 	bl	80059b0 <LCD_Font.constprop.2>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 80085dc:	f89b 3736 	ldrb.w	r3, [fp, #1846]	; 0x736
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	f240 8400 	bls.w	8008de6 <main+0x18b6>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80085e6:	260c      	movs	r6, #12
 80085e8:	f89b 4737 	ldrb.w	r4, [fp, #1847]	; 0x737
 80085ec:	4f96      	ldr	r7, [pc, #600]	; (8008848 <main+0x1318>)
 80085ee:	f104 030a 	add.w	r3, r4, #10
 80085f2:	fbb3 f1f6 	udiv	r1, r3, r6
 80085f6:	fb06 3311 	mls	r3, r6, r1, r3
 80085fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085fe:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 8008602:	2200      	movs	r2, #0
 8008604:	f44f 70b9 	mov.w	r0, #370	; 0x172
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008608:	340b      	adds	r4, #11
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800860a:	f7fd f987 	bl	800591c <LCD_Font.constprop.1>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800860e:	fbb4 f3f6 	udiv	r3, r4, r6
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8008612:	2507      	movs	r5, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008614:	fb06 4413 	mls	r4, r6, r3, r4
 8008618:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800861c:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 8008620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008624:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8008628:	f7fd f978 	bl	800591c <LCD_Font.constprop.1>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 800862c:	f89b 373c 	ldrb.w	r3, [fp, #1852]	; 0x73c
 8008630:	f89b 273a 	ldrb.w	r2, [fp, #1850]	; 0x73a
 8008634:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008638:	4984      	ldr	r1, [pc, #528]	; (800884c <main+0x131c>)
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	a81c      	add	r0, sp, #112	; 0x70
 800863e:	f89b 373b 	ldrb.w	r3, [fp, #1851]	; 0x73b
 8008642:	f001 fdc7 	bl	800a1d4 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8008646:	2200      	movs	r2, #0
 8008648:	20b4      	movs	r0, #180	; 0xb4
 800864a:	a91c      	add	r1, sp, #112	; 0x70
 800864c:	f7fd f91c 	bl	8005888 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 8008650:	f89b 3738 	ldrb.w	r3, [fp, #1848]	; 0x738
 8008654:	f89b 2736 	ldrb.w	r2, [fp, #1846]	; 0x736
 8008658:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800865c:	497b      	ldr	r1, [pc, #492]	; (800884c <main+0x131c>)
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	a81c      	add	r0, sp, #112	; 0x70
 8008662:	f89b 3737 	ldrb.w	r3, [fp, #1847]	; 0x737
 8008666:	f001 fdb5 	bl	800a1d4 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 800866a:	22ff      	movs	r2, #255	; 0xff
 800866c:	20b4      	movs	r0, #180	; 0xb4
 800866e:	a91c      	add	r1, sp, #112	; 0x70
 8008670:	f7fd f90a 	bl	8005888 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8008674:	f89b 4735 	ldrb.w	r4, [fp, #1845]	; 0x735
 8008678:	2200      	movs	r2, #0
 800867a:	1d63      	adds	r3, r4, #5
 800867c:	fbb3 f1f5 	udiv	r1, r3, r5
 8008680:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008684:	1a5b      	subs	r3, r3, r1
 8008686:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800868a:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 800868e:	2014      	movs	r0, #20
 8008690:	f7fd f8fa 	bl	8005888 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8008694:	1da3      	adds	r3, r4, #6
 8008696:	fbb3 f5f5 	udiv	r5, r3, r5
 800869a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800869e:	1b5b      	subs	r3, r3, r5
 80086a0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80086a4:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	2014      	movs	r0, #20
 80086ac:	f7fd f8ec 	bl	8005888 <LCD_Font.constprop.0>
						rtcDateLast = rtcDate;
 80086b0:	f89b 3736 	ldrb.w	r3, [fp, #1846]	; 0x736
						rtcDayLast = rtcDay;
 80086b4:	f88b 4739 	strb.w	r4, [fp, #1849]	; 0x739
						rtcDateLast = rtcDate;
 80086b8:	f88b 373a 	strb.w	r3, [fp, #1850]	; 0x73a
					rtcMonthLast = rtcMonth;
 80086bc:	f89b 3737 	ldrb.w	r3, [fp, #1847]	; 0x737
					rtcHrsLast = rtcHrs;
 80086c0:	4a5e      	ldr	r2, [pc, #376]	; (800883c <main+0x130c>)
					rtcMonthLast = rtcMonth;
 80086c2:	f88b 373b 	strb.w	r3, [fp, #1851]	; 0x73b
					rtcYearLast = rtcYear;
 80086c6:	f89b 3738 	ldrb.w	r3, [fp, #1848]	; 0x738
 80086ca:	f88b 373c 	strb.w	r3, [fp, #1852]	; 0x73c
					rtcHrsLast = rtcHrs;
 80086ce:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
 80086d2:	7293      	strb	r3, [r2, #10]
    cmd[0] = 0xFA; // temp_msb
 80086d4:	23fa      	movs	r3, #250	; 0xfa
				rtcMinLast = rtcMin;
 80086d6:	4a59      	ldr	r2, [pc, #356]	; (800883c <main+0x130c>)
 80086d8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80086dc:	f89b 3733 	ldrb.w	r3, [fp, #1843]	; 0x733
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80086e0:	20ec      	movs	r0, #236	; 0xec
 80086e2:	7253      	strb	r3, [r2, #9]
 80086e4:	a915      	add	r1, sp, #84	; 0x54
 80086e6:	2201      	movs	r2, #1
 80086e8:	f7fc fd82 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80086ec:	2203      	movs	r2, #3
 80086ee:	20ec      	movs	r0, #236	; 0xec
 80086f0:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 80086f4:	f7fc fb46 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80086f8:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80086fc:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008706:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800870a:	f8bb 270e 	ldrh.w	r2, [fp, #1806]	; 0x70e
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800870e:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8008712:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 8008716:	fb03 f303 	mul.w	r3, r3, r3
 800871a:	0b1c      	lsrs	r4, r3, #12
 800871c:	f9bb 3712 	ldrsh.w	r3, [fp, #1810]	; 0x712
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008720:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8008722:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008726:	f9bb 3710 	ldrsh.w	r3, [fp, #1808]	; 0x710
 800872a:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 800872e:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8008732:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008734:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8008738:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800873c:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 800873e:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 8008740:	f8cb 4740 	str.w	r4, [fp, #1856]	; 0x740
    tempf = (float) temp;
 8008744:	f7fe fe7e 	bl	8007444 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8008748:	4941      	ldr	r1, [pc, #260]	; (8008850 <main+0x1320>)
 800874a:	f7fe fd0d 	bl	8007168 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800874e:	f7fe f8bd 	bl	80068cc <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8008752:	2200      	movs	r2, #0
 8008754:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <main+0x1324>)
 8008756:	f7fe f911 	bl	800697c <__aeabi_dmul>
 800875a:	2200      	movs	r2, #0
 800875c:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <main+0x1328>)
 800875e:	f7fd ff57 	bl	8006610 <__adddf3>
 8008762:	f005 fb01 	bl	800dd68 <floor>
 8008766:	a332      	add	r3, pc, #200	; (adr r3, 8008830 <main+0x1300>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7fe f906 	bl	800697c <__aeabi_dmul>
 8008770:	f7fe fbfc 	bl	8006f6c <__aeabi_d2f>
 8008774:	4680      	mov	r8, r0
				temperature = BME280_getTemperature(-1);
 8008776:	f7fe f8a9 	bl	80068cc <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 800877a:	23fd      	movs	r3, #253	; 0xfd
 800877c:	4606      	mov	r6, r0
 800877e:	460f      	mov	r7, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008780:	2201      	movs	r2, #1
 8008782:	20ec      	movs	r0, #236	; 0xec
 8008784:	a915      	add	r1, sp, #84	; 0x54
    cmd[0] = 0xFD; // hum_msb
 8008786:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800878a:	e94a 6702 	strd	r6, r7, [sl, #-8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800878e:	f7fc fd2f 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8008792:	2202      	movs	r2, #2
 8008794:	20ec      	movs	r0, #236	; 0xec
 8008796:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 800879a:	f7fc faf3 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800879e:	f8bb 372a 	ldrh.w	r3, [fp, #1834]	; 0x72a
    v_x1 = t_fine - 76800;
 80087a2:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80087a6:	f9bb 2730 	ldrsh.w	r2, [fp, #1840]	; 0x730
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80087ae:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087b2:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80087b4:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 80087be:	f8bd 2055 	ldrh.w	r2, [sp, #85]	; 0x55
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087c2:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 80087c4:	ba52      	rev16	r2, r2
 80087c6:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80087c8:	f9bb 272c 	ldrsh.w	r2, [fp, #1836]	; 0x72c
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80087d0:	0512      	lsls	r2, r2, #20
 80087d2:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 80087d6:	f9bb 0728 	ldrsh.w	r0, [fp, #1832]	; 0x728
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80087da:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80087de:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80087e2:	f9bb 072e 	ldrsh.w	r0, [fp, #1838]	; 0x72e
                                            (int32_t) dig_H2 + 8192) >> 14));
 80087e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80087ea:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 80087ee:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80087f0:	0bd2      	lsrs	r2, r2, #15
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 80087f6:	13da      	asrs	r2, r3, #15
 80087f8:	fb02 f202 	mul.w	r2, r2, r2
 80087fc:	f8bb 1726 	ldrh.w	r1, [fp, #1830]	; 0x726
 8008800:	11d0      	asrs	r0, r2, #7
 8008802:	fb01 f000 	mul.w	r0, r1, r0
 8008806:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 800880a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 800880e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8008812:	bfa8      	it	ge
 8008814:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8008818:	1300      	asrs	r0, r0, #12
 800881a:	f7fe fe13 	bl	8007444 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 800881e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8008822:	f7fe fca1 	bl	8007168 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8008826:	f7fe f851 	bl	80068cc <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 800882a:	2200      	movs	r2, #0
 800882c:	e016      	b.n	800885c <main+0x132c>
 800882e:	bf00      	nop
 8008830:	9999999a 	.word	0x9999999a
 8008834:	3fb99999 	.word	0x3fb99999
 8008838:	40011000 	.word	0x40011000
 800883c:	20000000 	.word	0x20000000
 8008840:	0801f684 	.word	0x0801f684
 8008844:	00ffa500 	.word	0x00ffa500
 8008848:	0800de80 	.word	0x0800de80
 800884c:	0801f690 	.word	0x0801f690
 8008850:	3c23d70a 	.word	0x3c23d70a
 8008854:	40240000 	.word	0x40240000
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	4bc8      	ldr	r3, [pc, #800]	; (8008b80 <main+0x1650>)
 800885e:	f7fe f88d 	bl	800697c <__aeabi_dmul>
 8008862:	2200      	movs	r2, #0
 8008864:	4bc7      	ldr	r3, [pc, #796]	; (8008b84 <main+0x1654>)
 8008866:	f7fd fed3 	bl	8006610 <__adddf3>
 800886a:	f005 fa7d 	bl	800dd68 <floor>
 800886e:	a3c2      	add	r3, pc, #776	; (adr r3, 8008b78 <main+0x1648>)
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f7fe f882 	bl	800697c <__aeabi_dmul>
 8008878:	f7fe fb78 	bl	8006f6c <__aeabi_d2f>
 800887c:	4605      	mov	r5, r0
				humidity = BME280_getHumidity(-1);
 800887e:	f7fe f825 	bl	80068cc <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8008882:	23f7      	movs	r3, #247	; 0xf7
 8008884:	e9ca 0100 	strd	r0, r1, [sl]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008888:	2201      	movs	r2, #1
 800888a:	20ec      	movs	r0, #236	; 0xec
 800888c:	a915      	add	r1, sp, #84	; 0x54
    cmd[0] = 0xF7; // press_msb
 800888e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008892:	f7fc fcad 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8008896:	2203      	movs	r2, #3
 8008898:	20ec      	movs	r0, #236	; 0xec
 800889a:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 800889e:	f7fc fa71 	bl	8004d84 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 80088a2:	1061      	asrs	r1, r4, #1
 80088a4:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80088a8:	1088      	asrs	r0, r1, #2
 80088aa:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80088ae:	f9bb 3716 	ldrsh.w	r3, [fp, #1814]	; 0x716
 80088b2:	f9bb 2718 	ldrsh.w	r2, [fp, #1816]	; 0x718
 80088b6:	fb01 f303 	mul.w	r3, r1, r3
 80088ba:	1344      	asrs	r4, r0, #13
 80088bc:	fb04 f202 	mul.w	r2, r4, r2
 80088c0:	105b      	asrs	r3, r3, #1
 80088c2:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 80088c6:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80088c8:	f8bb 2714 	ldrh.w	r2, [fp, #1812]	; 0x714
 80088cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088d0:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 80088d4:	13da      	asrs	r2, r3, #15
 80088d6:	f000 831b 	beq.w	8008f10 <main+0x19e0>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80088da:	f9bb 371c 	ldrsh.w	r3, [fp, #1820]	; 0x71c
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80088de:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80088e0:	fb03 f101 	mul.w	r1, r3, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80088e4:	f9bb 371e 	ldrsh.w	r3, [fp, #1822]	; 0x71e
    var2 = var2 + ((var1 * dig_P5) << 1);
 80088e8:	0049      	lsls	r1, r1, #1
 80088ea:	fb03 1100 	mla	r1, r3, r0, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80088ee:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 80088f2:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80088fc:	f9bb 071a 	ldrsh.w	r0, [fp, #1818]	; 0x71a
 8008900:	0400      	lsls	r0, r0, #16
 8008902:	eb00 01a1 	add.w	r1, r0, r1, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008906:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 800890a:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 800890e:	eb03 3321 	add.w	r3, r3, r1, asr #12
 8008912:	499d      	ldr	r1, [pc, #628]	; (8008b88 <main+0x1658>)
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800891c:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 8008920:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 8008922:	bfb3      	iteet	lt
 8008924:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8008928:	005b      	lslge	r3, r3, #1
 800892a:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 800892e:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8008930:	08da      	lsrs	r2, r3, #3
 8008932:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8008936:	f9bb 1722 	ldrsh.w	r1, [fp, #1826]	; 0x722
 800893a:	0898      	lsrs	r0, r3, #2
 800893c:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8008940:	f9bb 1724 	ldrsh.w	r1, [fp, #1828]	; 0x724
 8008944:	0b52      	lsrs	r2, r2, #13
 8008946:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800894a:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 800894c:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8008950:	f9bb 2720 	ldrsh.w	r2, [fp, #1824]	; 0x720
 8008954:	4410      	add	r0, r2
    pressf = (float) press;
 8008956:	eb03 1020 	add.w	r0, r3, r0, asr #4
 800895a:	f7fe fd6f 	bl	800743c <__aeabi_ui2f>
    return (pressf / 100.0f);
 800895e:	498b      	ldr	r1, [pc, #556]	; (8008b8c <main+0x165c>)
 8008960:	f7fe fc02 	bl	8007168 <__aeabi_fmul>
				pressure = (uint16_t)BME280_getPressure();
 8008964:	f7fe fdc2 	bl	80074ec <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008968:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 800896c:	f240 321e 	movw	r2, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 8008970:	b283      	uxth	r3, r0
 8008972:	f8ab 3758 	strh.w	r3, [fp, #1880]	; 0x758
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008976:	440b      	add	r3, r1
 8008978:	b29b      	uxth	r3, r3
 800897a:	4293      	cmp	r3, r2
 800897c:	f200 8159 	bhi.w	8008c32 <main+0x1702>
 8008980:	4640      	mov	r0, r8
 8008982:	4983      	ldr	r1, [pc, #524]	; (8008b90 <main+0x1660>)
 8008984:	f7fe fb90 	bl	80070a8 <__aeabi_fcmplt>
 8008988:	2800      	cmp	r0, #0
 800898a:	f000 8152 	beq.w	8008c32 <main+0x1702>
 800898e:	4640      	mov	r0, r8
 8008990:	4980      	ldr	r1, [pc, #512]	; (8008b94 <main+0x1664>)
 8008992:	f7fe fba7 	bl	80070e4 <__aeabi_fcmpgt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f000 814b 	beq.w	8008c32 <main+0x1702>
 800899c:	4628      	mov	r0, r5
 800899e:	2100      	movs	r1, #0
 80089a0:	f7fe fba0 	bl	80070e4 <__aeabi_fcmpgt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f000 8144 	beq.w	8008c32 <main+0x1702>
 80089aa:	4628      	mov	r0, r5
 80089ac:	497a      	ldr	r1, [pc, #488]	; (8008b98 <main+0x1668>)
 80089ae:	f7fe fb7b 	bl	80070a8 <__aeabi_fcmplt>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f000 813d 	beq.w	8008c32 <main+0x1702>
					if (temperature != temperatureLast) {
 80089b8:	4b78      	ldr	r3, [pc, #480]	; (8008b9c <main+0x166c>)
 80089ba:	4630      	mov	r0, r6
 80089bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089c0:	4639      	mov	r1, r7
 80089c2:	4622      	mov	r2, r4
 80089c4:	462b      	mov	r3, r5
 80089c6:	f7fe fa41 	bl	8006e4c <__aeabi_dcmpeq>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d14e      	bne.n	8008a6c <main+0x153c>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80089ce:	2200      	movs	r2, #0
 80089d0:	4620      	mov	r0, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	4b6a      	ldr	r3, [pc, #424]	; (8008b80 <main+0x1650>)
 80089d6:	f7fe fa57 	bl	8006e88 <__aeabi_dcmpge>
 80089da:	2800      	cmp	r0, #0
 80089dc:	f040 851a 	bne.w	8009414 <main+0x1ee4>
 80089e0:	2200      	movs	r2, #0
 80089e2:	2300      	movs	r3, #0
 80089e4:	4620      	mov	r0, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	f7fe fa3a 	bl	8006e60 <__aeabi_dcmplt>
 80089ec:	2200      	movs	r2, #0
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f040 84e3 	bne.w	80093ba <main+0x1e8a>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80089f4:	2300      	movs	r3, #0
 80089f6:	4620      	mov	r0, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7fe fa4f 	bl	8006e9c <__aeabi_dcmpgt>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 84fa 	bne.w	80093f8 <main+0x1ec8>
						else if (temperatureLast <= -10) {
 8008a04:	2200      	movs	r2, #0
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4b65      	ldr	r3, [pc, #404]	; (8008ba0 <main+0x1670>)
 8008a0c:	f7fe fa32 	bl	8006e74 <__aeabi_dcmple>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 84df 	bne.w	80093d4 <main+0x1ea4>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8008a16:	e95a 4502 	ldrd	r4, r5, [sl, #-8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4b57      	ldr	r3, [pc, #348]	; (8008b80 <main+0x1650>)
 8008a22:	f7fe fa31 	bl	8006e88 <__aeabi_dcmpge>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 84c0 	bne.w	80093ac <main+0x1e7c>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7fe fa14 	bl	8006e60 <__aeabi_dcmplt>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f040 8489 	bne.w	8009352 <main+0x1e22>
						else if (temperature < 10 && temperature > 0) {
 8008a40:	2300      	movs	r3, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7fe fa29 	bl	8006e9c <__aeabi_dcmpgt>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f040 84a0 	bne.w	8009390 <main+0x1e60>
						else if (temperature <= -10) {
 8008a50:	2200      	movs	r2, #0
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	4b52      	ldr	r3, [pc, #328]	; (8008ba0 <main+0x1670>)
 8008a58:	f7fe fa0c 	bl	8006e74 <__aeabi_dcmple>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f040 8485 	bne.w	800936c <main+0x1e3c>
						temperatureLast = temperature;
 8008a62:	e95a 2302 	ldrd	r2, r3, [sl, #-8]
 8008a66:	494d      	ldr	r1, [pc, #308]	; (8008b9c <main+0x166c>)
 8008a68:	e9c1 2300 	strd	r2, r3, [r1]
					if (humidity != humidityLast) {
 8008a6c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a70:	4b4c      	ldr	r3, [pc, #304]	; (8008ba4 <main+0x1674>)
 8008a72:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	f7fe f9e7 	bl	8006e4c <__aeabi_dcmpeq>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f000 8216 	beq.w	8008eb2 <main+0x1982>
					if (pressureLast != pressure) {
 8008a86:	f8bb 2770 	ldrh.w	r2, [fp, #1904]	; 0x770
 8008a8a:	f8bb 3758 	ldrh.w	r3, [fp, #1880]	; 0x758
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d02b      	beq.n	8008aea <main+0x15ba>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8008a92:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008a96:	bf2c      	ite	cs
 8008a98:	4943      	ldrcs	r1, [pc, #268]	; (8008ba8 <main+0x1678>)
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8008a9a:	4944      	ldrcc	r1, [pc, #272]	; (8008bac <main+0x167c>)
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8008a9c:	a815      	add	r0, sp, #84	; 0x54
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8008a9e:	f001 fb99 	bl	800a1d4 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8008aa2:	21bb      	movs	r1, #187	; 0xbb
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f240 1041 	movw	r0, #321	; 0x141
 8008aaa:	aa15      	add	r2, sp, #84	; 0x54
 8008aac:	f7fd f814 	bl	8005ad8 <LCD_Font.constprop.4>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8008ab0:	f8bb 2758 	ldrh.w	r2, [fp, #1880]	; 0x758
 8008ab4:	a815      	add	r0, sp, #84	; 0x54
 8008ab6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008aba:	bf2c      	ite	cs
 8008abc:	493a      	ldrcs	r1, [pc, #232]	; (8008ba8 <main+0x1678>)
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8008abe:	493b      	ldrcc	r1, [pc, #236]	; (8008bac <main+0x167c>)
 8008ac0:	f001 fb88 	bl	800a1d4 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8008ac4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8008ac8:	21bb      	movs	r1, #187	; 0xbb
 8008aca:	f240 1041 	movw	r0, #321	; 0x141
 8008ace:	aa15      	add	r2, sp, #84	; 0x54
 8008ad0:	f7fd f802 	bl	8005ad8 <LCD_Font.constprop.4>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	21bb      	movs	r1, #187	; 0xbb
 8008ad8:	f240 1041 	movw	r0, #321	; 0x141
 8008adc:	4a34      	ldr	r2, [pc, #208]	; (8008bb0 <main+0x1680>)
 8008ade:	f7fc fffb 	bl	8005ad8 <LCD_Font.constprop.4>
						pressureLast = pressure;
 8008ae2:	f8bb 3758 	ldrh.w	r3, [fp, #1880]	; 0x758
 8008ae6:	f8ab 3770 	strh.w	r3, [fp, #1904]	; 0x770
					if (AT24XX_Read(0) != rtcHrs) {
 8008aea:	2000      	movs	r0, #0
 8008aec:	f7fb ff6a 	bl	80049c4 <AT24XX_Read>
 8008af0:	f89b 1734 	ldrb.w	r1, [fp, #1844]	; 0x734
 8008af4:	4288      	cmp	r0, r1
 8008af6:	f040 80c7 	bne.w	8008c88 <main+0x1758>
					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8008afa:	2002      	movs	r0, #2
 8008afc:	f7fb fbc4 	bl	8004288 <LCD_Rect.constprop.0>
						int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8008b00:	e95a 0102 	ldrd	r0, r1, [sl, #-8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <main+0x1650>)
 8008b08:	f7fd ff38 	bl	800697c <__aeabi_dmul>
 8008b0c:	f7fe f9e6 	bl	8006edc <__aeabi_d2iz>
						LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8008b10:	219e      	movs	r1, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008b12:	f1a0 04c0 	sub.w	r4, r0, #192	; 0xc0
						int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8008b16:	b224      	sxth	r4, r4
						LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8008b18:	4608      	mov	r0, r1
 8008b1a:	f7f9 fa79 	bl	8002010 <LCD_Line.constprop.0>
						if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8008b1e:	2c00      	cmp	r4, #0
 8008b20:	dd11      	ble.n	8008b46 <main+0x1616>
 8008b22:	2c7f      	cmp	r4, #127	; 0x7f
 8008b24:	bfa8      	it	ge
 8008b26:	247f      	movge	r4, #127	; 0x7f
 8008b28:	229e      	movs	r2, #158	; 0x9e
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008b2a:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
						if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8008b32:	f083 00ff 	eor.w	r0, r3, #255	; 0xff
 8008b36:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8008b3a:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8008b3e:	b2a1      	uxth	r1, r4
 8008b40:	4610      	mov	r0, r2
 8008b42:	f7f9 ffd7 	bl	8002af4 <LCD_Line.constprop.1>
					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8008b46:	20a1      	movs	r0, #161	; 0xa1
 8008b48:	f7fb fb9e 	bl	8004288 <LCD_Rect.constprop.0>
						valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8008b4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b50:	2200      	movs	r2, #0
 8008b52:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <main+0x1650>)
 8008b54:	f7fd ff12 	bl	800697c <__aeabi_dmul>
 8008b58:	f7fe f9c0 	bl	8006edc <__aeabi_d2iz>
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8008b5c:	f240 113d 	movw	r1, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008b60:	b284      	uxth	r4, r0
 8008b62:	3c64      	subs	r4, #100	; 0x64
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8008b64:	4608      	mov	r0, r1
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008b66:	01e4      	lsls	r4, r4, #7
						LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8008b68:	f7f9 fa52 	bl	8002010 <LCD_Line.constprop.0>
						if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8008b6c:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 8008b70:	db38      	blt.n	8008be4 <main+0x16b4>
 8008b72:	e01f      	b.n	8008bb4 <main+0x1684>
 8008b74:	f3af 8000 	nop.w
 8008b78:	9999999a 	.word	0x9999999a
 8008b7c:	3fb99999 	.word	0x3fb99999
 8008b80:	40240000 	.word	0x40240000
 8008b84:	3fe00000 	.word	0x3fe00000
 8008b88:	fffff3cb 	.word	0xfffff3cb
 8008b8c:	3c23d70a 	.word	0x3c23d70a
 8008b90:	42aa0000 	.word	0x42aa0000
 8008b94:	c2200000 	.word	0xc2200000
 8008b98:	42c80000 	.word	0x42c80000
 8008b9c:	20000960 	.word	0x20000960
 8008ba0:	c0240000 	.word	0xc0240000
 8008ba4:	20000970 	.word	0x20000970
 8008ba8:	0801f684 	.word	0x0801f684
 8008bac:	0801f6b8 	.word	0x0801f6b8
 8008bb0:	0801f68c 	.word	0x0801f68c
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008bb4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008bb8:	fb94 f1f1 	sdiv	r1, r4, r1
 8008bbc:	b209      	sxth	r1, r1
 8008bbe:	297f      	cmp	r1, #127	; 0x7f
 8008bc0:	bfa8      	it	ge
 8008bc2:	217f      	movge	r1, #127	; 0x7f
						if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8008bc4:	f240 123d 	movw	r2, #317	; 0x13d
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008bc8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
						if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f5c1 719f 	rsb	r1, r1, #318	; 0x13e
 8008bd4:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008bd8:	4610      	mov	r0, r2
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 8008be0:	f7f9 ff88 	bl	8002af4 <LCD_Line.constprop.1>
					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8008be4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8008be8:	f7fb fb4e 	bl	8004288 <LCD_Rect.constprop.0>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008bec:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8008bf0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008bf4:	f8bb 4758 	ldrh.w	r4, [fp, #1880]	; 0x758
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8008bf8:	4608      	mov	r0, r1
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008bfa:	4414      	add	r4, r2
						valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8008bfc:	b224      	sxth	r4, r4
						LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8008bfe:	f7f9 fa07 	bl	8002010 <LCD_Line.constprop.0>
						if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8008c02:	2c00      	cmp	r4, #0
 8008c04:	dd12      	ble.n	8008c2c <main+0x16fc>
 8008c06:	2c7f      	cmp	r4, #127	; 0x7f
 8008c08:	bfa8      	it	ge
 8008c0a:	247f      	movge	r4, #127	; 0x7f
 8008c0c:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
								1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008c10:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
						if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f083 00ff 	eor.w	r0, r3, #255	; 0xff
 8008c1c:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8008c20:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8008c24:	b2a1      	uxth	r1, r4
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7f9 ff64 	bl	8002af4 <LCD_Line.constprop.1>
					if (!viewGraphs) {
 8008c2c:	f89b 3772 	ldrb.w	r3, [fp, #1906]	; 0x772
 8008c30:	b12b      	cbz	r3, 8008c3e <main+0x170e>
			rtcSecLast = rtcSec;
 8008c32:	f89b 3732 	ldrb.w	r3, [fp, #1842]	; 0x732
 8008c36:	4abd      	ldr	r2, [pc, #756]	; (8008f2c <main+0x19fc>)
 8008c38:	7213      	strb	r3, [r2, #8]
	{
 8008c3a:	f7ff bb59 	b.w	80082f0 <main+0xdc0>
 8008c3e:	269d      	movs	r6, #157	; 0x9d
 8008c40:	4dbb      	ldr	r5, [pc, #748]	; (8008f30 <main+0x1a00>)
 8008c42:	e004      	b.n	8008c4e <main+0x171e>
						for (uint16_t i = 0; i < 155 ; i++) {
 8008c44:	3e01      	subs	r6, #1
 8008c46:	b2b6      	uxth	r6, r6
 8008c48:	2e02      	cmp	r6, #2
 8008c4a:	f000 80d4 	beq.w	8008df6 <main+0x18c6>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008c4e:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8008c52:	4631      	mov	r1, r6
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008c54:	3cc0      	subs	r4, #192	; 0xc0
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8008c56:	4630      	mov	r0, r6
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8008c58:	b224      	sxth	r4, r4
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8008c5a:	f7f9 f9d9 	bl	8002010 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	ddf0      	ble.n	8008c44 <main+0x1714>
 8008c62:	2c7f      	cmp	r4, #127	; 0x7f
 8008c64:	bfa8      	it	ge
 8008c66:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008c68:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8008c74:	b2a1      	uxth	r1, r4
 8008c76:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 8008c82:	f7f9 ff37 	bl	8002af4 <LCD_Line.constprop.1>
 8008c86:	e7dd      	b.n	8008c44 <main+0x1714>
						AT24XX_Update(0, rtcHrs);
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f7fb fea9 	bl	80049e0 <AT24XX_Update>
 8008c8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8008c92:	f240 571e 	movw	r7, #1310	; 0x51e
						AT24XX_Update(0, rtcHrs);
 8008c96:	4ea6      	ldr	r6, [pc, #664]	; (8008f30 <main+0x1a00>)
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f7fb fe93 	bl	80049c4 <AT24XX_Read>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	1c60      	adds	r0, r4, #1
 8008ca2:	b280      	uxth	r0, r0
 8008ca4:	f7fb fe8e 	bl	80049c4 <AT24XX_Read>
 8008ca8:	3402      	adds	r4, #2
 8008caa:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008cac:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8008cb0:	42bc      	cmp	r4, r7
 8008cb2:	f826 5b02 	strh.w	r5, [r6], #2
 8008cb6:	d1ef      	bne.n	8008c98 <main+0x1768>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8008cb8:	499d      	ldr	r1, [pc, #628]	; (8008f30 <main+0x1a00>)
 8008cba:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008cbe:	1c88      	adds	r0, r1, #2
 8008cc0:	f004 fac8 	bl	800d254 <memmove>
						hT[0] = (uint16_t) (temperature * 10);
 8008cc4:	e95a 0102 	ldrd	r0, r1, [sl, #-8]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4b9a      	ldr	r3, [pc, #616]	; (8008f34 <main+0x1a04>)
 8008ccc:	f7fd fe56 	bl	800697c <__aeabi_dmul>
 8008cd0:	f7fe f92c 	bl	8006f2c <__aeabi_d2uiz>
 8008cd4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) {
 8008cd8:	f240 571e 	movw	r7, #1310	; 0x51e
						hT[0] = (uint16_t) (temperature * 10);
 8008cdc:	4d94      	ldr	r5, [pc, #592]	; (8008f30 <main+0x1a00>)
 8008cde:	f8ab 0368 	strh.w	r0, [fp, #872]	; 0x368
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8008ce2:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	b2f1      	uxtb	r1, r6
 8008cea:	f7fb fe79 	bl	80049e0 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8008cee:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8008cf0:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8008cf2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8008cf6:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8008cf8:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8008cfa:	f7fb fe71 	bl	80049e0 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8008cfe:	42bc      	cmp	r4, r7
 8008d00:	d1ef      	bne.n	8008ce2 <main+0x17b2>
 8008d02:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008d06:	f640 1706 	movw	r7, #2310	; 0x906
 8008d0a:	4e8b      	ldr	r6, [pc, #556]	; (8008f38 <main+0x1a08>)
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7fb fe59 	bl	80049c4 <AT24XX_Read>
 8008d12:	4605      	mov	r5, r0
 8008d14:	1c60      	adds	r0, r4, #1
 8008d16:	b280      	uxth	r0, r0
 8008d18:	f7fb fe54 	bl	80049c4 <AT24XX_Read>
 8008d1c:	3402      	adds	r4, #2
 8008d1e:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008d20:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008d24:	42bc      	cmp	r4, r7
 8008d26:	f826 5b02 	strh.w	r5, [r6], #2
 8008d2a:	d1ef      	bne.n	8008d0c <main+0x17dc>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8008d2c:	4982      	ldr	r1, [pc, #520]	; (8008f38 <main+0x1a08>)
 8008d2e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008d32:	1c88      	adds	r0, r1, #2
 8008d34:	f004 fa8e 	bl	800d254 <memmove>
						hH[0] = (uint16_t) (humidity * 10);
 8008d38:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4b7d      	ldr	r3, [pc, #500]	; (8008f34 <main+0x1a04>)
 8008d40:	f7fd fe1c 	bl	800697c <__aeabi_dmul>
 8008d44:	f7fe f8f2 	bl	8006f2c <__aeabi_d2uiz>
 8008d48:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) {
 8008d4c:	f640 1706 	movw	r7, #2310	; 0x906
						hH[0] = (uint16_t) (humidity * 10);
 8008d50:	4d79      	ldr	r5, [pc, #484]	; (8008f38 <main+0x1a08>)
 8008d52:	f8ab 04a0 	strh.w	r0, [fp, #1184]	; 0x4a0
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8008d56:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	b2f1      	uxtb	r1, r6
 8008d5e:	f7fb fe3f 	bl	80049e0 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8008d62:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8008d64:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8008d66:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8008d6a:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8008d6c:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8008d6e:	f7fb fe37 	bl	80049e0 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8008d72:	42bc      	cmp	r4, r7
 8008d74:	d1ef      	bne.n	8008d56 <main+0x1826>
 8008d76:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8008d7a:	f640 47ee 	movw	r7, #3310	; 0xcee
 8008d7e:	4e6f      	ldr	r6, [pc, #444]	; (8008f3c <main+0x1a0c>)
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7fb fe1f 	bl	80049c4 <AT24XX_Read>
 8008d86:	4605      	mov	r5, r0
 8008d88:	1c60      	adds	r0, r4, #1
 8008d8a:	b280      	uxth	r0, r0
 8008d8c:	f7fb fe1a 	bl	80049c4 <AT24XX_Read>
 8008d90:	3402      	adds	r4, #2
 8008d92:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008d94:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8008d98:	42bc      	cmp	r4, r7
 8008d9a:	f826 5b02 	strh.w	r5, [r6], #2
 8008d9e:	d1ef      	bne.n	8008d80 <main+0x1850>
						hP[0] = (uint16_t)pressure;
 8008da0:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) {
 8008da4:	f640 47ee 	movw	r7, #3310	; 0xcee
						hP[0] = (uint16_t)pressure;
 8008da8:	4d64      	ldr	r5, [pc, #400]	; (8008f3c <main+0x1a0c>)
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8008daa:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008dae:	4629      	mov	r1, r5
 8008db0:	1ca8      	adds	r0, r5, #2
 8008db2:	f004 fa4f 	bl	800d254 <memmove>
						hP[0] = (uint16_t)pressure;
 8008db6:	f8bb 3758 	ldrh.w	r3, [fp, #1880]	; 0x758
 8008dba:	f8ab 35d8 	strh.w	r3, [fp, #1496]	; 0x5d8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8008dbe:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	b2f1      	uxtb	r1, r6
 8008dc6:	f7fb fe0b 	bl	80049e0 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8008dca:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8008dcc:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8008dce:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8008dd2:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8008dd4:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8008dd6:	f7fb fe03 	bl	80049e0 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8008dda:	42bc      	cmp	r4, r7
 8008ddc:	d1ef      	bne.n	8008dbe <main+0x188e>
						viewGraphs = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f88b 3772 	strb.w	r3, [fp, #1906]	; 0x772
 8008de4:	e689      	b.n	8008afa <main+0x15ca>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8008de6:	2200      	movs	r2, #0
 8008de8:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008dec:	4954      	ldr	r1, [pc, #336]	; (8008f40 <main+0x1a10>)
 8008dee:	f7fc fddf 	bl	80059b0 <LCD_Font.constprop.2>
 8008df2:	f7ff bbf8 	b.w	80085e6 <main+0x10b6>
 8008df6:	f44f 779e 	mov.w	r7, #316	; 0x13c
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008dfa:	f44f 7620 	mov.w	r6, #640	; 0x280
 8008dfe:	4d4e      	ldr	r5, [pc, #312]	; (8008f38 <main+0x1a08>)
 8008e00:	e003      	b.n	8008e0a <main+0x18da>
						for (uint16_t i = 0; i < 155 ; i++) {
 8008e02:	3f01      	subs	r7, #1
 8008e04:	b2bf      	uxth	r7, r7
 8008e06:	2fa1      	cmp	r7, #161	; 0xa1
 8008e08:	d020      	beq.n	8008e4c <main+0x191c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e0a:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8008e0e:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e10:	3c64      	subs	r4, #100	; 0x64
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8008e12:	4638      	mov	r0, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e14:	01e4      	lsls	r4, r4, #7
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8008e16:	f7f9 f8fb 	bl	8002010 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8008e1a:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 8008e1e:	dbf0      	blt.n	8008e02 <main+0x18d2>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e20:	fb94 f1f6 	sdiv	r1, r4, r6
 8008e24:	b209      	sxth	r1, r1
 8008e26:	297f      	cmp	r1, #127	; 0x7f
 8008e28:	bfa8      	it	ge
 8008e2a:	217f      	movge	r1, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008e2c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008e38:	f5c1 719f 	rsb	r1, r1, #318	; 0x13e
 8008e3c:	463a      	mov	r2, r7
 8008e3e:	4638      	mov	r0, r7
 8008e40:	b289      	uxth	r1, r1
 8008e42:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 8008e46:	f7f9 fe55 	bl	8002af4 <LCD_Line.constprop.1>
 8008e4a:	e7da      	b.n	8008e02 <main+0x18d2>
 8008e4c:	f240 16db 	movw	r6, #475	; 0x1db
 8008e50:	4d3a      	ldr	r5, [pc, #232]	; (8008f3c <main+0x1a0c>)
 8008e52:	e004      	b.n	8008e5e <main+0x192e>
						for (uint16_t i = 0; i < 155 ; i++) {
 8008e54:	3e01      	subs	r6, #1
 8008e56:	b2b6      	uxth	r6, r6
 8008e58:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 8008e5c:	d01e      	beq.n	8008e9c <main+0x196c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e5e:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
 8008e62:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8008e66:	4631      	mov	r1, r6
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008e68:	441c      	add	r4, r3
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8008e6a:	4630      	mov	r0, r6
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8008e6c:	b224      	sxth	r4, r4
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8008e6e:	f7f9 f8cf 	bl	8002010 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8008e72:	2c00      	cmp	r4, #0
 8008e74:	ddee      	ble.n	8008e54 <main+0x1924>
 8008e76:	2c7f      	cmp	r4, #127	; 0x7f
 8008e78:	bfa8      	it	ge
 8008e7a:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8008e7c:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8008e88:	b2a1      	uxth	r1, r4
 8008e8a:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008e8e:	4632      	mov	r2, r6
 8008e90:	4630      	mov	r0, r6
 8008e92:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 8008e96:	f7f9 fe2d 	bl	8002af4 <LCD_Line.constprop.1>
 8008e9a:	e7db      	b.n	8008e54 <main+0x1924>
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <main+0x1a14>)
 8008ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008ea8:	d1fa      	bne.n	8008ea0 <main+0x1970>
						viewGraphs = 1;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f88b 3772 	strb.w	r3, [fp, #1906]	; 0x772
 8008eb0:	e6bf      	b.n	8008c32 <main+0x1702>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8008eb2:	4632      	mov	r2, r6
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	4924      	ldr	r1, [pc, #144]	; (8008f48 <main+0x1a18>)
 8008eb8:	a815      	add	r0, sp, #84	; 0x54
 8008eba:	f001 f98b 	bl	800a1d4 <siprintf>
						if (humidityLast >= 10)
 8008ebe:	4923      	ldr	r1, [pc, #140]	; (8008f4c <main+0x1a1c>)
 8008ec0:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <main+0x1a04>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008ec8:	f7fd ffde 	bl	8006e88 <__aeabi_dcmpge>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	b330      	cbz	r0, 8008f1e <main+0x19ee>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	21bb      	movs	r1, #187	; 0xbb
 8008ed4:	20a0      	movs	r0, #160	; 0xa0
 8008ed6:	aa15      	add	r2, sp, #84	; 0x54
 8008ed8:	f7fc fdfe 	bl	8005ad8 <LCD_Font.constprop.4>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 8008edc:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ee0:	4919      	ldr	r1, [pc, #100]	; (8008f48 <main+0x1a18>)
 8008ee2:	a815      	add	r0, sp, #84	; 0x54
 8008ee4:	f001 f976 	bl	800a1d4 <siprintf>
						if (humidity >= 10)
 8008ee8:	e9da 4500 	ldrd	r4, r5, [sl]
 8008eec:	2200      	movs	r2, #0
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <main+0x1a04>)
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7fd ffc8 	bl	8006e88 <__aeabi_dcmpge>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008efc:	21bb      	movs	r1, #187	; 0xbb
 8008efe:	aa15      	add	r2, sp, #84	; 0x54
						if (humidity >= 10)
 8008f00:	b148      	cbz	r0, 8008f16 <main+0x19e6>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008f02:	20a0      	movs	r0, #160	; 0xa0
 8008f04:	f7fc fde8 	bl	8005ad8 <LCD_Font.constprop.4>
						humidityLast = humidity;
 8008f08:	4b10      	ldr	r3, [pc, #64]	; (8008f4c <main+0x1a1c>)
 8008f0a:	e943 4502 	strd	r4, r5, [r3, #-8]
 8008f0e:	e5ba      	b.n	8008a86 <main+0x1556>
				pressure = (uint16_t)BME280_getPressure();
 8008f10:	f8ab 2758 	strh.w	r2, [fp, #1880]	; 0x758
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008f14:	e68d      	b.n	8008c32 <main+0x1702>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008f16:	20ba      	movs	r0, #186	; 0xba
 8008f18:	f7fc fdde 	bl	8005ad8 <LCD_Font.constprop.4>
 8008f1c:	e7f4      	b.n	8008f08 <main+0x19d8>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8008f1e:	21bb      	movs	r1, #187	; 0xbb
 8008f20:	20ba      	movs	r0, #186	; 0xba
 8008f22:	aa15      	add	r2, sp, #84	; 0x54
 8008f24:	f7fc fdd8 	bl	8005ad8 <LCD_Font.constprop.4>
 8008f28:	e7d8      	b.n	8008edc <main+0x19ac>
 8008f2a:	bf00      	nop
 8008f2c:	20000000 	.word	0x20000000
 8008f30:	20000568 	.word	0x20000568
 8008f34:	40240000 	.word	0x40240000
 8008f38:	200006a0 	.word	0x200006a0
 8008f3c:	200007d8 	.word	0x200007d8
 8008f40:	0801f68c 	.word	0x0801f68c
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	0801f6b0 	.word	0x0801f6b0
 8008f4c:	20000970 	.word	0x20000970
			for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8008f50:	2300      	movs	r3, #0
 8008f52:	4aa9      	ldr	r2, [pc, #676]	; (80091f8 <main+0x1cc8>)
 8008f54:	6353      	str	r3, [r2, #52]	; 0x34
 8008f56:	3301      	adds	r3, #1
 8008f58:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008f5c:	d1fa      	bne.n	8008f54 <main+0x1a24>
  return uwTick;
 8008f5e:	f8db 2000 	ldr.w	r2, [fp]
 8008f62:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	2bc8      	cmp	r3, #200	; 0xc8
 8008f6a:	d9fa      	bls.n	8008f62 <main+0x1a32>
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008f6c:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 8008f70:	2600      	movs	r6, #0
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008f72:	f8bb 2110 	ldrh.w	r2, [fp, #272]	; 0x110
			rx_index = 0;
 8008f76:	f88b 610c 	strb.w	r6, [fp, #268]	; 0x10c
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	f040 80c1 	bne.w	8009102 <main+0x1bd2>
    __HAL_LOCK(hi2c);
 8008f80:	2401      	movs	r4, #1
    uint16_t dt[1] = {0};
 8008f82:	4637      	mov	r7, r6
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f84:	4d9d      	ldr	r5, [pc, #628]	; (80091fc <main+0x1ccc>)
 8008f86:	fa1f f986 	uxth.w	r9, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8008f8a:	4648      	mov	r0, r9
 8008f8c:	a91c      	add	r1, sp, #112	; 0x70
    uint16_t dt[1] = {0};
 8008f8e:	f8ad 7070 	strh.w	r7, [sp, #112]	; 0x70
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8008f92:	f7fb fa87 	bl	80044a4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8008f96:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 809a 	beq.w	80090d4 <main+0x1ba4>
  return uwTick;
 8008fa0:	f8db 8000 	ldr.w	r8, [fp]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fa4:	f89b 3089 	ldrb.w	r3, [fp, #137]	; 0x89
    uint8_t save[] = {val};
 8008fa8:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	f040 8091 	bne.w	80090d4 <main+0x1ba4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fb2:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 8008fb6:	e006      	b.n	8008fc6 <main+0x1a96>
 8008fb8:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbc:	eba1 0108 	sub.w	r1, r1, r8
 8008fc0:	2919      	cmp	r1, #25
 8008fc2:	f200 8109 	bhi.w	80091d8 <main+0x1ca8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fc6:	6993      	ldr	r3, [r2, #24]
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	f013 0302 	ands.w	r3, r3, #2
 8008fce:	d0f3      	beq.n	8008fb8 <main+0x1a88>
    __HAL_LOCK(hi2c);
 8008fd0:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d07d      	beq.n	80090d4 <main+0x1ba4>
 8008fd8:	f88b 4088 	strb.w	r4, [fp, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fdc:	6813      	ldr	r3, [r2, #0]
 8008fde:	07d8      	lsls	r0, r3, #31
 8008fe0:	d403      	bmi.n	8008fea <main+0x1aba>
      __HAL_I2C_ENABLE(hi2c);
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	6013      	str	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fea:	2140      	movs	r1, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fec:	f04f 0c21 	mov.w	ip, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff0:	6813      	ldr	r3, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ff2:	4648      	mov	r0, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ff8:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ffa:	f88b c089 	strb.w	ip, [fp, #137]	; 0x89
    hi2c->pBuffPtr    = pData;
 8008ffe:	ab1c      	add	r3, sp, #112	; 0x70
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009000:	f88b 108a 	strb.w	r1, [fp, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009004:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8009008:	f8ab 4076 	strh.w	r4, [fp, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 800900c:	f8cb 3070 	str.w	r3, [fp, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 8009010:	f8bb 3076 	ldrh.w	r3, [fp, #118]	; 0x76
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009014:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 8009016:	f8ab 3074 	strh.w	r3, [fp, #116]	; 0x74
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800901a:	f8cb 5078 	str.w	r5, [fp, #120]	; 0x78
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800901e:	f7fb f955 	bl	80042cc <I2C_RequestMemoryWrite.constprop.0>
 8009022:	2800      	cmp	r0, #0
 8009024:	d156      	bne.n	80090d4 <main+0x1ba4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009026:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
    while (hi2c->XferSize > 0U)
 800902a:	f8bb 0074 	ldrh.w	r0, [fp, #116]	; 0x74
 800902e:	b380      	cbz	r0, 8009092 <main+0x1b62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009030:	6959      	ldr	r1, [r3, #20]
 8009032:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8009036:	f040 8088 	bne.w	800914a <main+0x1c1a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800903a:	695a      	ldr	r2, [r3, #20]
 800903c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8009040:	f040 80af 	bne.w	80091a2 <main+0x1c72>
 8009044:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009048:	eba1 0108 	sub.w	r1, r1, r8
 800904c:	2964      	cmp	r1, #100	; 0x64
 800904e:	d9ef      	bls.n	8009030 <main+0x1b00>
        hi2c->State             = HAL_I2C_STATE_READY;
 8009050:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009052:	f8cb 207c 	str.w	r2, [fp, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8009056:	f88b 1089 	strb.w	r1, [fp, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800905a:	f88b 208a 	strb.w	r2, [fp, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 800905e:	f88b 2088 	strb.w	r2, [fp, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009062:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8009066:	430a      	orrs	r2, r1
 8009068:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
 800906c:	e0ab      	b.n	80091c6 <main+0x1c96>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800906e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009072:	4b63      	ldr	r3, [pc, #396]	; (8009200 <main+0x1cd0>)
 8009074:	611a      	str	r2, [r3, #16]
 8009076:	f7ff ba1a 	b.w	80084ae <main+0xf7e>
    __HAL_TIM_MOE_ENABLE(htim);
 800907a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800907c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009080:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009088:	2a06      	cmp	r2, #6
 800908a:	f47f a877 	bne.w	800817c <main+0xc4c>
 800908e:	f7ff b879 	b.w	8008184 <main+0xc54>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009092:	6959      	ldr	r1, [r3, #20]
 8009094:	f011 0104 	ands.w	r1, r1, #4
 8009098:	d10a      	bne.n	80090b0 <main+0x1b80>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800909a:	695a      	ldr	r2, [r3, #20]
 800909c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80090a0:	d17f      	bne.n	80091a2 <main+0x1c72>
 80090a2:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a6:	eba1 0108 	sub.w	r1, r1, r8
 80090aa:	2964      	cmp	r1, #100	; 0x64
 80090ac:	d9f1      	bls.n	8009092 <main+0x1b62>
 80090ae:	e7cf      	b.n	8009050 <main+0x1b20>
    hi2c->State = HAL_I2C_STATE_READY;
 80090b0:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090b8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80090ba:	f88b 1089 	strb.w	r1, [fp, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090be:	f88b 708a 	strb.w	r7, [fp, #138]	; 0x8a
 80090c2:	f8db 2000 	ldr.w	r2, [fp]
    __HAL_UNLOCK(hi2c);
 80090c6:	f88b 7088 	strb.w	r7, [fp, #136]	; 0x88
 80090ca:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	d9fa      	bls.n	80090ca <main+0x1b9a>
		for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 80090d4:	3601      	adds	r6, #1
 80090d6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80090da:	f47f af54 	bne.w	8008f86 <main+0x1a56>
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80090de:	4d49      	ldr	r5, [pc, #292]	; (8009204 <main+0x1cd4>)
 80090e0:	ac1c      	add	r4, sp, #112	; 0x70
 80090e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 80090e6:	f89b 6105 	ldrb.w	r6, [fp, #261]	; 0x105
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	2e20      	cmp	r6, #32
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	d107      	bne.n	8009102 <main+0x1bd2>
    __HAL_LOCK(huart);
 80090f2:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d003      	beq.n	8009102 <main+0x1bd2>
 80090fa:	2114      	movs	r1, #20
 80090fc:	a81c      	add	r0, sp, #112	; 0x70
 80090fe:	f7fc fa4d 	bl	800559c <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	if (memcmp(rx_buffer, "RS", 2) == 0) {
 8009102:	f245 3352 	movw	r3, #21330	; 0x5352
 8009106:	f8bb 2110 	ldrh.w	r2, [fp, #272]	; 0x110
 800910a:	429a      	cmp	r2, r3
 800910c:	d110      	bne.n	8009130 <main+0x1c00>
		for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 800910e:	f8db 3112 	ldr.w	r3, [fp, #274]	; 0x112
		temperatureRemote = atoi(valT);
 8009112:	a81c      	add	r0, sp, #112	; 0x70
		for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8009114:	931c      	str	r3, [sp, #112]	; 0x70
		temperatureRemote = atoi(valT);
 8009116:	f000 f9b4 	bl	8009482 <atoi>
		for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 800911a:	f8bb 3116 	ldrh.w	r3, [fp, #278]	; 0x116
		humidityRemote = atoi(valH);
 800911e:	a815      	add	r0, sp, #84	; 0x54
		for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8009120:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8009124:	f89b 3118 	ldrb.w	r3, [fp, #280]	; 0x118
 8009128:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		humidityRemote = atoi(valH);
 800912c:	f000 f9a9 	bl	8009482 <atoi>
	if (memcmp(rx_buffer, "RT", 2) == 0) {
 8009130:	f245 4352 	movw	r3, #21586	; 0x5452
 8009134:	f8bb 2110 	ldrh.w	r2, [fp, #272]	; 0x110
 8009138:	429a      	cmp	r2, r3
 800913a:	d067      	beq.n	800920c <main+0x1cdc>
	for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 800913c:	22ff      	movs	r2, #255	; 0xff
 800913e:	2100      	movs	r1, #0
 8009140:	4831      	ldr	r0, [pc, #196]	; (8009208 <main+0x1cd8>)
 8009142:	f000 f9cd 	bl	80094e0 <memset>
 8009146:	f7ff b8d8 	b.w	80082fa <main+0xdca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800914a:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
      hi2c->XferSize--;
 800914e:	f100 3cff 	add.w	ip, r0, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009152:	4611      	mov	r1, r2
 8009154:	f811 eb01 	ldrb.w	lr, [r1], #1
      hi2c->XferSize--;
 8009158:	fa1f fc8c 	uxth.w	ip, ip
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800915c:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 8009160:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
      hi2c->XferCount--;
 8009164:	f8bb 1076 	ldrh.w	r1, [fp, #118]	; 0x76
      hi2c->XferSize--;
 8009168:	f8ab c074 	strh.w	ip, [fp, #116]	; 0x74
      hi2c->XferCount--;
 800916c:	3901      	subs	r1, #1
 800916e:	b289      	uxth	r1, r1
 8009170:	f8ab 1076 	strh.w	r1, [fp, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009174:	6959      	ldr	r1, [r3, #20]
 8009176:	0749      	lsls	r1, r1, #29
 8009178:	f57f af57 	bpl.w	800902a <main+0x1afa>
 800917c:	f1bc 0f00 	cmp.w	ip, #0
 8009180:	f43f af53 	beq.w	800902a <main+0x1afa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009184:	7851      	ldrb	r1, [r2, #1]
        hi2c->pBuffPtr++;
 8009186:	3202      	adds	r2, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009188:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 800918a:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
        hi2c->XferCount--;
 800918e:	f8bb 2076 	ldrh.w	r2, [fp, #118]	; 0x76
        hi2c->XferSize--;
 8009192:	3802      	subs	r0, #2
        hi2c->XferCount--;
 8009194:	3a01      	subs	r2, #1
 8009196:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8009198:	f8ab 0074 	strh.w	r0, [fp, #116]	; 0x74
        hi2c->XferCount--;
 800919c:	f8ab 2076 	strh.w	r2, [fp, #118]	; 0x76
 80091a0:	e743      	b.n	800902a <main+0x1afa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091a6:	615a      	str	r2, [r3, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 80091a8:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80091aa:	f8cb 107c 	str.w	r1, [fp, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80091ae:	f88b 2089 	strb.w	r2, [fp, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091b2:	f88b 108a 	strb.w	r1, [fp, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091b6:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 80091ba:	f88b 1088 	strb.w	r1, [fp, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091be:	f042 0204 	orr.w	r2, r2, #4
 80091c2:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091c6:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 80091ca:	2a04      	cmp	r2, #4
 80091cc:	d182      	bne.n	80090d4 <main+0x1ba4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	e77d      	b.n	80090d4 <main+0x1ba4>
        hi2c->State             = HAL_I2C_STATE_READY;
 80091d8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80091da:	f8cb 307c 	str.w	r3, [fp, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80091de:	f88b 2089 	strb.w	r2, [fp, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80091e2:	f88b 308a 	strb.w	r3, [fp, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 80091e6:	f88b 3088 	strb.w	r3, [fp, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091ea:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 80091f4:	e76e      	b.n	80090d4 <main+0x1ba4>
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00
 80091fc:	ffff0000 	.word	0xffff0000
 8009200:	40011000 	.word	0x40011000
 8009204:	0801f6f0 	.word	0x0801f6f0
 8009208:	20000310 	.word	0x20000310
		val[0] = rx_buffer[2];
 800920c:	f8bb 3112 	ldrh.w	r3, [fp, #274]	; 0x112
		DS3231_setHrs(atoi(val));
 8009210:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[2];
 8009212:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setHrs(atoi(val));
 8009216:	f000 f934 	bl	8009482 <atoi>
    return ((val / 10 * 16) + (val % 10));
 800921a:	240a      	movs	r4, #10
 800921c:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 800921e:	f7fc f935 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8009222:	fbb5 f6f4 	udiv	r6, r5, r4
 8009226:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800922a:	2211      	movs	r2, #17
 800922c:	497d      	ldr	r1, [pc, #500]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 800922e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009232:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 8009234:	f88b 30b7 	strb.w	r3, [fp, #183]	; 0xb7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009238:	f7fb ffda 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[4];
 800923c:	f8bb 3114 	ldrh.w	r3, [fp, #276]	; 0x114
		DS3231_setMin(atoi(val));
 8009240:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[4];
 8009242:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMin(atoi(val));
 8009246:	f000 f91c 	bl	8009482 <atoi>
 800924a:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 800924c:	f7fc f91e 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8009250:	fbb5 f6f4 	udiv	r6, r5, r4
 8009254:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009258:	2211      	movs	r2, #17
 800925a:	4972      	ldr	r1, [pc, #456]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 800925c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009260:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 8009262:	f88b 30b6 	strb.w	r3, [fp, #182]	; 0xb6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009266:	f7fb ffc3 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[6];
 800926a:	f8bb 3116 	ldrh.w	r3, [fp, #278]	; 0x116
		DS3231_setSec(atoi(val));
 800926e:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[6];
 8009270:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setSec(atoi(val));
 8009274:	f000 f905 	bl	8009482 <atoi>
 8009278:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 800927a:	f7fc f907 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800927e:	fbb5 f6f4 	udiv	r6, r5, r4
 8009282:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009286:	2211      	movs	r2, #17
 8009288:	4966      	ldr	r1, [pc, #408]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 800928a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800928e:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 8009290:	f88b 30b5 	strb.w	r3, [fp, #181]	; 0xb5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009294:	f7fb ffac 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[8];
 8009298:	f8bb 3118 	ldrh.w	r3, [fp, #280]	; 0x118
		DS3231_setDate(atoi(val));
 800929c:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[8];
 800929e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setDate(atoi(val));
 80092a2:	f000 f8ee 	bl	8009482 <atoi>
 80092a6:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 80092a8:	f7fc f8f0 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80092ac:	fbb5 f6f4 	udiv	r6, r5, r4
 80092b0:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092b4:	2211      	movs	r2, #17
 80092b6:	495b      	ldr	r1, [pc, #364]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 80092b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092bc:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 80092be:	f88b 30b9 	strb.w	r3, [fp, #185]	; 0xb9
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092c2:	f7fb ff95 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[10];
 80092c6:	f8bb 311a 	ldrh.w	r3, [fp, #282]	; 0x11a
		DS3231_setMonth(atoi(val));
 80092ca:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[10];
 80092cc:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMonth(atoi(val));
 80092d0:	f000 f8d7 	bl	8009482 <atoi>
 80092d4:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 80092d6:	f7fc f8d9 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80092da:	fbb5 f6f4 	udiv	r6, r5, r4
 80092de:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092e2:	2211      	movs	r2, #17
 80092e4:	494f      	ldr	r1, [pc, #316]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 80092e6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092ea:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 80092ec:	f88b 30ba 	strb.w	r3, [fp, #186]	; 0xba
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80092f0:	f7fb ff7e 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[12];
 80092f4:	f8bb 311c 	ldrh.w	r3, [fp, #284]	; 0x11c
		DS3231_setYear(atoi(val));
 80092f8:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[12];
 80092fa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setYear(atoi(val));
 80092fe:	f000 f8c0 	bl	8009482 <atoi>
 8009302:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 8009304:	f7fc f8c2 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8009308:	fbb5 f6f4 	udiv	r6, r5, r4
 800930c:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009310:	2211      	movs	r2, #17
 8009312:	4944      	ldr	r1, [pc, #272]	; (8009424 <main+0x1ef4>)
    return ((val / 10 * 16) + (val % 10));
 8009314:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009318:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 800931a:	f88b 30bb 	strb.w	r3, [fp, #187]	; 0xbb
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800931e:	f7fb ff67 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[1] = rx_buffer[14];
 8009322:	f89b 311e 	ldrb.w	r3, [fp, #286]	; 0x11e
		DS3231_setDay(atoi(val));
 8009326:	a81c      	add	r0, sp, #112	; 0x70
		val[1] = rx_buffer[14];
 8009328:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
		DS3231_setDay(atoi(val));
 800932c:	f000 f8a9 	bl	8009482 <atoi>
 8009330:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8009332:	f7fc f8ab 	bl	800548c <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8009336:	fbb5 f2f4 	udiv	r2, r5, r4
 800933a:	fb04 5312 	mls	r3, r4, r2, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800933e:	20d0      	movs	r0, #208	; 0xd0
    return ((val / 10 * 16) + (val % 10));
 8009340:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8009344:	4937      	ldr	r1, [pc, #220]	; (8009424 <main+0x1ef4>)
 8009346:	2211      	movs	r2, #17
    rtcBufferSet[4] = decToBcd(value);
 8009348:	f88b 30b8 	strb.w	r3, [fp, #184]	; 0xb8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800934c:	f7fb ff50 	bl	80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 8009350:	e6f4      	b.n	800913c <main+0x1c0c>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8009352:	4620      	mov	r0, r4
 8009354:	4629      	mov	r1, r5
 8009356:	4b34      	ldr	r3, [pc, #208]	; (8009428 <main+0x1ef8>)
 8009358:	f7fd fda0 	bl	8006e9c <__aeabi_dcmpgt>
 800935c:	bb30      	cbnz	r0, 80093ac <main+0x1e7c>
						else if (temperature < 10 && temperature > 0) {
 800935e:	2200      	movs	r2, #0
 8009360:	2300      	movs	r3, #0
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	f7fd fd99 	bl	8006e9c <__aeabi_dcmpgt>
 800936a:	b988      	cbnz	r0, 8009390 <main+0x1e60>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7fd fdb4 	bl	8006edc <__aeabi_d2iz>
 8009374:	4602      	mov	r2, r0
 8009376:	492d      	ldr	r1, [pc, #180]	; (800942c <main+0x1efc>)
 8009378:	a815      	add	r0, sp, #84	; 0x54
 800937a:	b252      	sxtb	r2, r2
 800937c:	f000 ff2a 	bl	800a1d4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8009380:	21bb      	movs	r1, #187	; 0xbb
 8009382:	2001      	movs	r0, #1
 8009384:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <main+0x1f00>)
 8009386:	aa15      	add	r2, sp, #84	; 0x54
 8009388:	f7fc fba6 	bl	8005ad8 <LCD_Font.constprop.4>
 800938c:	f7ff bb69 	b.w	8008a62 <main+0x1532>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	4927      	ldr	r1, [pc, #156]	; (8009434 <main+0x1f04>)
 8009396:	a815      	add	r0, sp, #84	; 0x54
 8009398:	f000 ff1c 	bl	800a1d4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800939c:	21bb      	movs	r1, #187	; 0xbb
 800939e:	201b      	movs	r0, #27
 80093a0:	4b23      	ldr	r3, [pc, #140]	; (8009430 <main+0x1f00>)
 80093a2:	aa15      	add	r2, sp, #84	; 0x54
 80093a4:	f7fc fb98 	bl	8005ad8 <LCD_Font.constprop.4>
 80093a8:	f7ff bb5b 	b.w	8008a62 <main+0x1532>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80093ac:	4622      	mov	r2, r4
 80093ae:	462b      	mov	r3, r5
 80093b0:	4920      	ldr	r1, [pc, #128]	; (8009434 <main+0x1f04>)
 80093b2:	a815      	add	r0, sp, #84	; 0x54
 80093b4:	f000 ff0e 	bl	800a1d4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80093b8:	e7e2      	b.n	8009380 <main+0x1e50>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <main+0x1ef8>)
 80093c0:	f7fd fd6c 	bl	8006e9c <__aeabi_dcmpgt>
 80093c4:	bb30      	cbnz	r0, 8009414 <main+0x1ee4>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7fd fd65 	bl	8006e9c <__aeabi_dcmpgt>
 80093d2:	b988      	cbnz	r0, 80093f8 <main+0x1ec8>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 80093d4:	4629      	mov	r1, r5
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7fd fd80 	bl	8006edc <__aeabi_d2iz>
 80093dc:	4602      	mov	r2, r0
 80093de:	4913      	ldr	r1, [pc, #76]	; (800942c <main+0x1efc>)
 80093e0:	a815      	add	r0, sp, #84	; 0x54
 80093e2:	b252      	sxtb	r2, r2
 80093e4:	f000 fef6 	bl	800a1d4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80093e8:	2300      	movs	r3, #0
 80093ea:	21bb      	movs	r1, #187	; 0xbb
 80093ec:	2001      	movs	r0, #1
 80093ee:	aa15      	add	r2, sp, #84	; 0x54
 80093f0:	f7fc fb72 	bl	8005ad8 <LCD_Font.constprop.4>
 80093f4:	f7ff bb0f 	b.w	8008a16 <main+0x14e6>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	490d      	ldr	r1, [pc, #52]	; (8009434 <main+0x1f04>)
 80093fe:	a815      	add	r0, sp, #84	; 0x54
 8009400:	f000 fee8 	bl	800a1d4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8009404:	2300      	movs	r3, #0
 8009406:	21bb      	movs	r1, #187	; 0xbb
 8009408:	201b      	movs	r0, #27
 800940a:	aa15      	add	r2, sp, #84	; 0x54
 800940c:	f7fc fb64 	bl	8005ad8 <LCD_Font.constprop.4>
 8009410:	f7ff bb01 	b.w	8008a16 <main+0x14e6>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	4906      	ldr	r1, [pc, #24]	; (8009434 <main+0x1f04>)
 800941a:	a815      	add	r0, sp, #84	; 0x54
 800941c:	f000 feda 	bl	800a1d4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8009420:	e7e2      	b.n	80093e8 <main+0x1eb8>
 8009422:	bf00      	nop
 8009424:	200002b4 	.word	0x200002b4
 8009428:	c0240000 	.word	0xc0240000
 800942c:	0801f6a8 	.word	0x0801f6a8
 8009430:	00ffa500 	.word	0x00ffa500
 8009434:	0801f6a0 	.word	0x0801f6a0

08009438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009438:	480c      	ldr	r0, [pc, #48]	; (800946c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800943a:	490d      	ldr	r1, [pc, #52]	; (8009470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800943c:	4a0d      	ldr	r2, [pc, #52]	; (8009474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800943e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009440:	e002      	b.n	8009448 <LoopCopyDataInit>

08009442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009446:	3304      	adds	r3, #4

08009448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800944a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800944c:	d3f9      	bcc.n	8009442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800944e:	4a0a      	ldr	r2, [pc, #40]	; (8009478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009450:	4c0a      	ldr	r4, [pc, #40]	; (800947c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009454:	e001      	b.n	800945a <LoopFillZerobss>

08009456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009458:	3204      	adds	r2, #4

0800945a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800945a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800945c:	d3fb      	bcc.n	8009456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800945e:	f7fd f8c7 	bl	80065f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009462:	f000 f819 	bl	8009498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009466:	f7fe f863 	bl	8007530 <main>
  bx lr
 800946a:	4770      	bx	lr
  ldr r0, =_sdata
 800946c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009470:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8009474:	0801fbfc 	.word	0x0801fbfc
  ldr r2, =_sbss
 8009478:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800947c:	20000988 	.word	0x20000988

08009480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009480:	e7fe      	b.n	8009480 <ADC1_2_IRQHandler>

08009482 <atoi>:
 8009482:	220a      	movs	r2, #10
 8009484:	2100      	movs	r1, #0
 8009486:	f001 bd53 	b.w	800af30 <strtol>
	...

0800948c <__errno>:
 800948c:	4b01      	ldr	r3, [pc, #4]	; (8009494 <__errno+0x8>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000000c 	.word	0x2000000c

08009498 <__libc_init_array>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	2600      	movs	r6, #0
 800949c:	4d0c      	ldr	r5, [pc, #48]	; (80094d0 <__libc_init_array+0x38>)
 800949e:	4c0d      	ldr	r4, [pc, #52]	; (80094d4 <__libc_init_array+0x3c>)
 80094a0:	1b64      	subs	r4, r4, r5
 80094a2:	10a4      	asrs	r4, r4, #2
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	d109      	bne.n	80094bc <__libc_init_array+0x24>
 80094a8:	f004 fcde 	bl	800de68 <_init>
 80094ac:	2600      	movs	r6, #0
 80094ae:	4d0a      	ldr	r5, [pc, #40]	; (80094d8 <__libc_init_array+0x40>)
 80094b0:	4c0a      	ldr	r4, [pc, #40]	; (80094dc <__libc_init_array+0x44>)
 80094b2:	1b64      	subs	r4, r4, r5
 80094b4:	10a4      	asrs	r4, r4, #2
 80094b6:	42a6      	cmp	r6, r4
 80094b8:	d105      	bne.n	80094c6 <__libc_init_array+0x2e>
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c0:	4798      	blx	r3
 80094c2:	3601      	adds	r6, #1
 80094c4:	e7ee      	b.n	80094a4 <__libc_init_array+0xc>
 80094c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ca:	4798      	blx	r3
 80094cc:	3601      	adds	r6, #1
 80094ce:	e7f2      	b.n	80094b6 <__libc_init_array+0x1e>
 80094d0:	0801fbf4 	.word	0x0801fbf4
 80094d4:	0801fbf4 	.word	0x0801fbf4
 80094d8:	0801fbf4 	.word	0x0801fbf4
 80094dc:	0801fbf8 	.word	0x0801fbf8

080094e0 <memset>:
 80094e0:	4603      	mov	r3, r0
 80094e2:	4402      	add	r2, r0
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d100      	bne.n	80094ea <memset+0xa>
 80094e8:	4770      	bx	lr
 80094ea:	f803 1b01 	strb.w	r1, [r3], #1
 80094ee:	e7f9      	b.n	80094e4 <memset+0x4>

080094f0 <__cvt>:
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	bfbb      	ittet	lt
 80094fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80094fe:	461f      	movlt	r7, r3
 8009500:	2300      	movge	r3, #0
 8009502:	232d      	movlt	r3, #45	; 0x2d
 8009504:	b088      	sub	sp, #32
 8009506:	4614      	mov	r4, r2
 8009508:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800950a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800950c:	7013      	strb	r3, [r2, #0]
 800950e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009510:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009514:	f023 0820 	bic.w	r8, r3, #32
 8009518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800951c:	d005      	beq.n	800952a <__cvt+0x3a>
 800951e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009522:	d100      	bne.n	8009526 <__cvt+0x36>
 8009524:	3501      	adds	r5, #1
 8009526:	2302      	movs	r3, #2
 8009528:	e000      	b.n	800952c <__cvt+0x3c>
 800952a:	2303      	movs	r3, #3
 800952c:	aa07      	add	r2, sp, #28
 800952e:	9204      	str	r2, [sp, #16]
 8009530:	aa06      	add	r2, sp, #24
 8009532:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009536:	e9cd 3500 	strd	r3, r5, [sp]
 800953a:	4622      	mov	r2, r4
 800953c:	463b      	mov	r3, r7
 800953e:	f001 fd8f 	bl	800b060 <_dtoa_r>
 8009542:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009546:	4606      	mov	r6, r0
 8009548:	d102      	bne.n	8009550 <__cvt+0x60>
 800954a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800954c:	07db      	lsls	r3, r3, #31
 800954e:	d522      	bpl.n	8009596 <__cvt+0xa6>
 8009550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009554:	eb06 0905 	add.w	r9, r6, r5
 8009558:	d110      	bne.n	800957c <__cvt+0x8c>
 800955a:	7833      	ldrb	r3, [r6, #0]
 800955c:	2b30      	cmp	r3, #48	; 0x30
 800955e:	d10a      	bne.n	8009576 <__cvt+0x86>
 8009560:	2200      	movs	r2, #0
 8009562:	2300      	movs	r3, #0
 8009564:	4620      	mov	r0, r4
 8009566:	4639      	mov	r1, r7
 8009568:	f7fd fc70 	bl	8006e4c <__aeabi_dcmpeq>
 800956c:	b918      	cbnz	r0, 8009576 <__cvt+0x86>
 800956e:	f1c5 0501 	rsb	r5, r5, #1
 8009572:	f8ca 5000 	str.w	r5, [sl]
 8009576:	f8da 3000 	ldr.w	r3, [sl]
 800957a:	4499      	add	r9, r3
 800957c:	2200      	movs	r2, #0
 800957e:	2300      	movs	r3, #0
 8009580:	4620      	mov	r0, r4
 8009582:	4639      	mov	r1, r7
 8009584:	f7fd fc62 	bl	8006e4c <__aeabi_dcmpeq>
 8009588:	b108      	cbz	r0, 800958e <__cvt+0x9e>
 800958a:	f8cd 901c 	str.w	r9, [sp, #28]
 800958e:	2230      	movs	r2, #48	; 0x30
 8009590:	9b07      	ldr	r3, [sp, #28]
 8009592:	454b      	cmp	r3, r9
 8009594:	d307      	bcc.n	80095a6 <__cvt+0xb6>
 8009596:	4630      	mov	r0, r6
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800959c:	1b9b      	subs	r3, r3, r6
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	b008      	add	sp, #32
 80095a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	9107      	str	r1, [sp, #28]
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	e7f0      	b.n	8009590 <__cvt+0xa0>

080095ae <__exponent>:
 80095ae:	4603      	mov	r3, r0
 80095b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b2:	2900      	cmp	r1, #0
 80095b4:	f803 2b02 	strb.w	r2, [r3], #2
 80095b8:	bfb6      	itet	lt
 80095ba:	222d      	movlt	r2, #45	; 0x2d
 80095bc:	222b      	movge	r2, #43	; 0x2b
 80095be:	4249      	neglt	r1, r1
 80095c0:	2909      	cmp	r1, #9
 80095c2:	7042      	strb	r2, [r0, #1]
 80095c4:	dd2b      	ble.n	800961e <__exponent+0x70>
 80095c6:	f10d 0407 	add.w	r4, sp, #7
 80095ca:	46a4      	mov	ip, r4
 80095cc:	270a      	movs	r7, #10
 80095ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80095d2:	460a      	mov	r2, r1
 80095d4:	46a6      	mov	lr, r4
 80095d6:	fb07 1516 	mls	r5, r7, r6, r1
 80095da:	2a63      	cmp	r2, #99	; 0x63
 80095dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80095e0:	4631      	mov	r1, r6
 80095e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80095e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095ea:	dcf0      	bgt.n	80095ce <__exponent+0x20>
 80095ec:	3130      	adds	r1, #48	; 0x30
 80095ee:	f1ae 0502 	sub.w	r5, lr, #2
 80095f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095f6:	4629      	mov	r1, r5
 80095f8:	1c44      	adds	r4, r0, #1
 80095fa:	4561      	cmp	r1, ip
 80095fc:	d30a      	bcc.n	8009614 <__exponent+0x66>
 80095fe:	f10d 0209 	add.w	r2, sp, #9
 8009602:	eba2 020e 	sub.w	r2, r2, lr
 8009606:	4565      	cmp	r5, ip
 8009608:	bf88      	it	hi
 800960a:	2200      	movhi	r2, #0
 800960c:	4413      	add	r3, r2
 800960e:	1a18      	subs	r0, r3, r0
 8009610:	b003      	add	sp, #12
 8009612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009614:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009618:	f804 2f01 	strb.w	r2, [r4, #1]!
 800961c:	e7ed      	b.n	80095fa <__exponent+0x4c>
 800961e:	2330      	movs	r3, #48	; 0x30
 8009620:	3130      	adds	r1, #48	; 0x30
 8009622:	7083      	strb	r3, [r0, #2]
 8009624:	70c1      	strb	r1, [r0, #3]
 8009626:	1d03      	adds	r3, r0, #4
 8009628:	e7f1      	b.n	800960e <__exponent+0x60>
	...

0800962c <_printf_float>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b091      	sub	sp, #68	; 0x44
 8009632:	460c      	mov	r4, r1
 8009634:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009638:	4616      	mov	r6, r2
 800963a:	461f      	mov	r7, r3
 800963c:	4605      	mov	r5, r0
 800963e:	f002 fe63 	bl	800c308 <_localeconv_r>
 8009642:	6803      	ldr	r3, [r0, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	9309      	str	r3, [sp, #36]	; 0x24
 8009648:	f7fc ffd4 	bl	80065f4 <strlen>
 800964c:	2300      	movs	r3, #0
 800964e:	930e      	str	r3, [sp, #56]	; 0x38
 8009650:	f8d8 3000 	ldr.w	r3, [r8]
 8009654:	900a      	str	r0, [sp, #40]	; 0x28
 8009656:	3307      	adds	r3, #7
 8009658:	f023 0307 	bic.w	r3, r3, #7
 800965c:	f103 0208 	add.w	r2, r3, #8
 8009660:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009664:	f8d4 b000 	ldr.w	fp, [r4]
 8009668:	f8c8 2000 	str.w	r2, [r8]
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009674:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009678:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800967c:	930b      	str	r3, [sp, #44]	; 0x2c
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	4640      	mov	r0, r8
 8009684:	4b9c      	ldr	r3, [pc, #624]	; (80098f8 <_printf_float+0x2cc>)
 8009686:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009688:	f7fd fc12 	bl	8006eb0 <__aeabi_dcmpun>
 800968c:	bb70      	cbnz	r0, 80096ec <_printf_float+0xc0>
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	4640      	mov	r0, r8
 8009694:	4b98      	ldr	r3, [pc, #608]	; (80098f8 <_printf_float+0x2cc>)
 8009696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009698:	f7fd fbec 	bl	8006e74 <__aeabi_dcmple>
 800969c:	bb30      	cbnz	r0, 80096ec <_printf_float+0xc0>
 800969e:	2200      	movs	r2, #0
 80096a0:	2300      	movs	r3, #0
 80096a2:	4640      	mov	r0, r8
 80096a4:	4651      	mov	r1, sl
 80096a6:	f7fd fbdb 	bl	8006e60 <__aeabi_dcmplt>
 80096aa:	b110      	cbz	r0, 80096b2 <_printf_float+0x86>
 80096ac:	232d      	movs	r3, #45	; 0x2d
 80096ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b2:	4b92      	ldr	r3, [pc, #584]	; (80098fc <_printf_float+0x2d0>)
 80096b4:	4892      	ldr	r0, [pc, #584]	; (8009900 <_printf_float+0x2d4>)
 80096b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096ba:	bf94      	ite	ls
 80096bc:	4698      	movls	r8, r3
 80096be:	4680      	movhi	r8, r0
 80096c0:	2303      	movs	r3, #3
 80096c2:	f04f 0a00 	mov.w	sl, #0
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	f02b 0304 	bic.w	r3, fp, #4
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	4633      	mov	r3, r6
 80096d0:	4621      	mov	r1, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	9700      	str	r7, [sp, #0]
 80096d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80096d8:	f000 f9d4 	bl	8009a84 <_printf_common>
 80096dc:	3001      	adds	r0, #1
 80096de:	f040 8090 	bne.w	8009802 <_printf_float+0x1d6>
 80096e2:	f04f 30ff 	mov.w	r0, #4294967295
 80096e6:	b011      	add	sp, #68	; 0x44
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	4642      	mov	r2, r8
 80096ee:	4653      	mov	r3, sl
 80096f0:	4640      	mov	r0, r8
 80096f2:	4651      	mov	r1, sl
 80096f4:	f7fd fbdc 	bl	8006eb0 <__aeabi_dcmpun>
 80096f8:	b148      	cbz	r0, 800970e <_printf_float+0xe2>
 80096fa:	f1ba 0f00 	cmp.w	sl, #0
 80096fe:	bfb8      	it	lt
 8009700:	232d      	movlt	r3, #45	; 0x2d
 8009702:	4880      	ldr	r0, [pc, #512]	; (8009904 <_printf_float+0x2d8>)
 8009704:	bfb8      	it	lt
 8009706:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800970a:	4b7f      	ldr	r3, [pc, #508]	; (8009908 <_printf_float+0x2dc>)
 800970c:	e7d3      	b.n	80096b6 <_printf_float+0x8a>
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	d142      	bne.n	800979e <_printf_float+0x172>
 8009718:	2306      	movs	r3, #6
 800971a:	6063      	str	r3, [r4, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	9206      	str	r2, [sp, #24]
 8009720:	aa0e      	add	r2, sp, #56	; 0x38
 8009722:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009726:	aa0d      	add	r2, sp, #52	; 0x34
 8009728:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800972c:	9203      	str	r2, [sp, #12]
 800972e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009732:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	4642      	mov	r2, r8
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4628      	mov	r0, r5
 8009740:	4653      	mov	r3, sl
 8009742:	910b      	str	r1, [sp, #44]	; 0x2c
 8009744:	f7ff fed4 	bl	80094f0 <__cvt>
 8009748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800974a:	4680      	mov	r8, r0
 800974c:	2947      	cmp	r1, #71	; 0x47
 800974e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009750:	d108      	bne.n	8009764 <_printf_float+0x138>
 8009752:	1cc8      	adds	r0, r1, #3
 8009754:	db02      	blt.n	800975c <_printf_float+0x130>
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	4299      	cmp	r1, r3
 800975a:	dd40      	ble.n	80097de <_printf_float+0x1b2>
 800975c:	f1a9 0902 	sub.w	r9, r9, #2
 8009760:	fa5f f989 	uxtb.w	r9, r9
 8009764:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009768:	d81f      	bhi.n	80097aa <_printf_float+0x17e>
 800976a:	464a      	mov	r2, r9
 800976c:	3901      	subs	r1, #1
 800976e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009772:	910d      	str	r1, [sp, #52]	; 0x34
 8009774:	f7ff ff1b 	bl	80095ae <__exponent>
 8009778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800977a:	4682      	mov	sl, r0
 800977c:	1813      	adds	r3, r2, r0
 800977e:	2a01      	cmp	r2, #1
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	dc02      	bgt.n	800978a <_printf_float+0x15e>
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	07d2      	lsls	r2, r2, #31
 8009788:	d501      	bpl.n	800978e <_printf_float+0x162>
 800978a:	3301      	adds	r3, #1
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009792:	2b00      	cmp	r3, #0
 8009794:	d09b      	beq.n	80096ce <_printf_float+0xa2>
 8009796:	232d      	movs	r3, #45	; 0x2d
 8009798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800979c:	e797      	b.n	80096ce <_printf_float+0xa2>
 800979e:	2947      	cmp	r1, #71	; 0x47
 80097a0:	d1bc      	bne.n	800971c <_printf_float+0xf0>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1ba      	bne.n	800971c <_printf_float+0xf0>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7b7      	b.n	800971a <_printf_float+0xee>
 80097aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097ae:	d118      	bne.n	80097e2 <_printf_float+0x1b6>
 80097b0:	2900      	cmp	r1, #0
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	dd0b      	ble.n	80097ce <_printf_float+0x1a2>
 80097b6:	6121      	str	r1, [r4, #16]
 80097b8:	b913      	cbnz	r3, 80097c0 <_printf_float+0x194>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	07d0      	lsls	r0, r2, #31
 80097be:	d502      	bpl.n	80097c6 <_printf_float+0x19a>
 80097c0:	3301      	adds	r3, #1
 80097c2:	440b      	add	r3, r1
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	f04f 0a00 	mov.w	sl, #0
 80097ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80097cc:	e7df      	b.n	800978e <_printf_float+0x162>
 80097ce:	b913      	cbnz	r3, 80097d6 <_printf_float+0x1aa>
 80097d0:	6822      	ldr	r2, [r4, #0]
 80097d2:	07d2      	lsls	r2, r2, #31
 80097d4:	d501      	bpl.n	80097da <_printf_float+0x1ae>
 80097d6:	3302      	adds	r3, #2
 80097d8:	e7f4      	b.n	80097c4 <_printf_float+0x198>
 80097da:	2301      	movs	r3, #1
 80097dc:	e7f2      	b.n	80097c4 <_printf_float+0x198>
 80097de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e4:	4299      	cmp	r1, r3
 80097e6:	db05      	blt.n	80097f4 <_printf_float+0x1c8>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	6121      	str	r1, [r4, #16]
 80097ec:	07d8      	lsls	r0, r3, #31
 80097ee:	d5ea      	bpl.n	80097c6 <_printf_float+0x19a>
 80097f0:	1c4b      	adds	r3, r1, #1
 80097f2:	e7e7      	b.n	80097c4 <_printf_float+0x198>
 80097f4:	2900      	cmp	r1, #0
 80097f6:	bfcc      	ite	gt
 80097f8:	2201      	movgt	r2, #1
 80097fa:	f1c1 0202 	rsble	r2, r1, #2
 80097fe:	4413      	add	r3, r2
 8009800:	e7e0      	b.n	80097c4 <_printf_float+0x198>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	055a      	lsls	r2, r3, #21
 8009806:	d407      	bmi.n	8009818 <_printf_float+0x1ec>
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	4642      	mov	r2, r8
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	d12b      	bne.n	800986e <_printf_float+0x242>
 8009816:	e764      	b.n	80096e2 <_printf_float+0xb6>
 8009818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800981c:	f240 80dd 	bls.w	80099da <_printf_float+0x3ae>
 8009820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	f7fd fb10 	bl	8006e4c <__aeabi_dcmpeq>
 800982c:	2800      	cmp	r0, #0
 800982e:	d033      	beq.n	8009898 <_printf_float+0x26c>
 8009830:	2301      	movs	r3, #1
 8009832:	4631      	mov	r1, r6
 8009834:	4628      	mov	r0, r5
 8009836:	4a35      	ldr	r2, [pc, #212]	; (800990c <_printf_float+0x2e0>)
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	f43f af51 	beq.w	80096e2 <_printf_float+0xb6>
 8009840:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009844:	429a      	cmp	r2, r3
 8009846:	db02      	blt.n	800984e <_printf_float+0x222>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	07d8      	lsls	r0, r3, #31
 800984c:	d50f      	bpl.n	800986e <_printf_float+0x242>
 800984e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	f43f af42 	beq.w	80096e2 <_printf_float+0xb6>
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	f104 091a 	add.w	r9, r4, #26
 8009866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009868:	3b01      	subs	r3, #1
 800986a:	4543      	cmp	r3, r8
 800986c:	dc09      	bgt.n	8009882 <_printf_float+0x256>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	079b      	lsls	r3, r3, #30
 8009872:	f100 8102 	bmi.w	8009a7a <_printf_float+0x44e>
 8009876:	68e0      	ldr	r0, [r4, #12]
 8009878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800987a:	4298      	cmp	r0, r3
 800987c:	bfb8      	it	lt
 800987e:	4618      	movlt	r0, r3
 8009880:	e731      	b.n	80096e6 <_printf_float+0xba>
 8009882:	2301      	movs	r3, #1
 8009884:	464a      	mov	r2, r9
 8009886:	4631      	mov	r1, r6
 8009888:	4628      	mov	r0, r5
 800988a:	47b8      	blx	r7
 800988c:	3001      	adds	r0, #1
 800988e:	f43f af28 	beq.w	80096e2 <_printf_float+0xb6>
 8009892:	f108 0801 	add.w	r8, r8, #1
 8009896:	e7e6      	b.n	8009866 <_printf_float+0x23a>
 8009898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989a:	2b00      	cmp	r3, #0
 800989c:	dc38      	bgt.n	8009910 <_printf_float+0x2e4>
 800989e:	2301      	movs	r3, #1
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	4a19      	ldr	r2, [pc, #100]	; (800990c <_printf_float+0x2e0>)
 80098a6:	47b8      	blx	r7
 80098a8:	3001      	adds	r0, #1
 80098aa:	f43f af1a 	beq.w	80096e2 <_printf_float+0xb6>
 80098ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d102      	bne.n	80098bc <_printf_float+0x290>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	07d9      	lsls	r1, r3, #31
 80098ba:	d5d8      	bpl.n	800986e <_printf_float+0x242>
 80098bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af0b 	beq.w	80096e2 <_printf_float+0xb6>
 80098cc:	f04f 0900 	mov.w	r9, #0
 80098d0:	f104 0a1a 	add.w	sl, r4, #26
 80098d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d6:	425b      	negs	r3, r3
 80098d8:	454b      	cmp	r3, r9
 80098da:	dc01      	bgt.n	80098e0 <_printf_float+0x2b4>
 80098dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098de:	e794      	b.n	800980a <_printf_float+0x1de>
 80098e0:	2301      	movs	r3, #1
 80098e2:	4652      	mov	r2, sl
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f aef9 	beq.w	80096e2 <_printf_float+0xb6>
 80098f0:	f109 0901 	add.w	r9, r9, #1
 80098f4:	e7ee      	b.n	80098d4 <_printf_float+0x2a8>
 80098f6:	bf00      	nop
 80098f8:	7fefffff 	.word	0x7fefffff
 80098fc:	0801f754 	.word	0x0801f754
 8009900:	0801f758 	.word	0x0801f758
 8009904:	0801f760 	.word	0x0801f760
 8009908:	0801f75c 	.word	0x0801f75c
 800990c:	0801f764 	.word	0x0801f764
 8009910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009914:	429a      	cmp	r2, r3
 8009916:	bfa8      	it	ge
 8009918:	461a      	movge	r2, r3
 800991a:	2a00      	cmp	r2, #0
 800991c:	4691      	mov	r9, r2
 800991e:	dc37      	bgt.n	8009990 <_printf_float+0x364>
 8009920:	f04f 0b00 	mov.w	fp, #0
 8009924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009928:	f104 021a 	add.w	r2, r4, #26
 800992c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009930:	ebaa 0309 	sub.w	r3, sl, r9
 8009934:	455b      	cmp	r3, fp
 8009936:	dc33      	bgt.n	80099a0 <_printf_float+0x374>
 8009938:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800993c:	429a      	cmp	r2, r3
 800993e:	db3b      	blt.n	80099b8 <_printf_float+0x38c>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d438      	bmi.n	80099b8 <_printf_float+0x38c>
 8009946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009948:	990d      	ldr	r1, [sp, #52]	; 0x34
 800994a:	eba3 020a 	sub.w	r2, r3, sl
 800994e:	eba3 0901 	sub.w	r9, r3, r1
 8009952:	4591      	cmp	r9, r2
 8009954:	bfa8      	it	ge
 8009956:	4691      	movge	r9, r2
 8009958:	f1b9 0f00 	cmp.w	r9, #0
 800995c:	dc34      	bgt.n	80099c8 <_printf_float+0x39c>
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009966:	f104 0a1a 	add.w	sl, r4, #26
 800996a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	eba3 0309 	sub.w	r3, r3, r9
 8009974:	4543      	cmp	r3, r8
 8009976:	f77f af7a 	ble.w	800986e <_printf_float+0x242>
 800997a:	2301      	movs	r3, #1
 800997c:	4652      	mov	r2, sl
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	47b8      	blx	r7
 8009984:	3001      	adds	r0, #1
 8009986:	f43f aeac 	beq.w	80096e2 <_printf_float+0xb6>
 800998a:	f108 0801 	add.w	r8, r8, #1
 800998e:	e7ec      	b.n	800996a <_printf_float+0x33e>
 8009990:	4613      	mov	r3, r2
 8009992:	4631      	mov	r1, r6
 8009994:	4642      	mov	r2, r8
 8009996:	4628      	mov	r0, r5
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	d1c0      	bne.n	8009920 <_printf_float+0x2f4>
 800999e:	e6a0      	b.n	80096e2 <_printf_float+0xb6>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f ae99 	beq.w	80096e2 <_printf_float+0xb6>
 80099b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099b2:	f10b 0b01 	add.w	fp, fp, #1
 80099b6:	e7b9      	b.n	800992c <_printf_float+0x300>
 80099b8:	4631      	mov	r1, r6
 80099ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d1bf      	bne.n	8009946 <_printf_float+0x31a>
 80099c6:	e68c      	b.n	80096e2 <_printf_float+0xb6>
 80099c8:	464b      	mov	r3, r9
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	eb08 020a 	add.w	r2, r8, sl
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	d1c2      	bne.n	800995e <_printf_float+0x332>
 80099d8:	e683      	b.n	80096e2 <_printf_float+0xb6>
 80099da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099dc:	2a01      	cmp	r2, #1
 80099de:	dc01      	bgt.n	80099e4 <_printf_float+0x3b8>
 80099e0:	07db      	lsls	r3, r3, #31
 80099e2:	d537      	bpl.n	8009a54 <_printf_float+0x428>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4642      	mov	r2, r8
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f ae77 	beq.w	80096e2 <_printf_float+0xb6>
 80099f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae6f 	beq.w	80096e2 <_printf_float+0xb6>
 8009a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f7fd fa1e 	bl	8006e4c <__aeabi_dcmpeq>
 8009a10:	b9d8      	cbnz	r0, 8009a4a <_printf_float+0x41e>
 8009a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a14:	f108 0201 	add.w	r2, r8, #1
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	d10e      	bne.n	8009a42 <_printf_float+0x416>
 8009a24:	e65d      	b.n	80096e2 <_printf_float+0xb6>
 8009a26:	2301      	movs	r3, #1
 8009a28:	464a      	mov	r2, r9
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	f43f ae56 	beq.w	80096e2 <_printf_float+0xb6>
 8009a36:	f108 0801 	add.w	r8, r8, #1
 8009a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4543      	cmp	r3, r8
 8009a40:	dcf1      	bgt.n	8009a26 <_printf_float+0x3fa>
 8009a42:	4653      	mov	r3, sl
 8009a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a48:	e6e0      	b.n	800980c <_printf_float+0x1e0>
 8009a4a:	f04f 0800 	mov.w	r8, #0
 8009a4e:	f104 091a 	add.w	r9, r4, #26
 8009a52:	e7f2      	b.n	8009a3a <_printf_float+0x40e>
 8009a54:	2301      	movs	r3, #1
 8009a56:	4642      	mov	r2, r8
 8009a58:	e7df      	b.n	8009a1a <_printf_float+0x3ee>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	464a      	mov	r2, r9
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f ae3c 	beq.w	80096e2 <_printf_float+0xb6>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	68e3      	ldr	r3, [r4, #12]
 8009a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a72:	1a5b      	subs	r3, r3, r1
 8009a74:	4543      	cmp	r3, r8
 8009a76:	dcf0      	bgt.n	8009a5a <_printf_float+0x42e>
 8009a78:	e6fd      	b.n	8009876 <_printf_float+0x24a>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	f104 0919 	add.w	r9, r4, #25
 8009a82:	e7f4      	b.n	8009a6e <_printf_float+0x442>

08009a84 <_printf_common>:
 8009a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	4616      	mov	r6, r2
 8009a8a:	4699      	mov	r9, r3
 8009a8c:	688a      	ldr	r2, [r1, #8]
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	4607      	mov	r7, r0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfb8      	it	lt
 8009a96:	4613      	movlt	r3, r2
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa4:	b10a      	cbz	r2, 8009aaa <_printf_common+0x26>
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	0699      	lsls	r1, r3, #26
 8009aae:	bf42      	ittt	mi
 8009ab0:	6833      	ldrmi	r3, [r6, #0]
 8009ab2:	3302      	addmi	r3, #2
 8009ab4:	6033      	strmi	r3, [r6, #0]
 8009ab6:	6825      	ldr	r5, [r4, #0]
 8009ab8:	f015 0506 	ands.w	r5, r5, #6
 8009abc:	d106      	bne.n	8009acc <_printf_common+0x48>
 8009abe:	f104 0a19 	add.w	sl, r4, #25
 8009ac2:	68e3      	ldr	r3, [r4, #12]
 8009ac4:	6832      	ldr	r2, [r6, #0]
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	dc28      	bgt.n	8009b1e <_printf_common+0x9a>
 8009acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ad0:	1e13      	subs	r3, r2, #0
 8009ad2:	6822      	ldr	r2, [r4, #0]
 8009ad4:	bf18      	it	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	0692      	lsls	r2, r2, #26
 8009ada:	d42d      	bmi.n	8009b38 <_printf_common+0xb4>
 8009adc:	4649      	mov	r1, r9
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae4:	47c0      	blx	r8
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d020      	beq.n	8009b2c <_printf_common+0xa8>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	68e5      	ldr	r5, [r4, #12]
 8009aee:	f003 0306 	and.w	r3, r3, #6
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	bf18      	it	ne
 8009af6:	2500      	movne	r5, #0
 8009af8:	6832      	ldr	r2, [r6, #0]
 8009afa:	f04f 0600 	mov.w	r6, #0
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	bf08      	it	eq
 8009b02:	1aad      	subeq	r5, r5, r2
 8009b04:	6922      	ldr	r2, [r4, #16]
 8009b06:	bf08      	it	eq
 8009b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bfc4      	itt	gt
 8009b10:	1a9b      	subgt	r3, r3, r2
 8009b12:	18ed      	addgt	r5, r5, r3
 8009b14:	341a      	adds	r4, #26
 8009b16:	42b5      	cmp	r5, r6
 8009b18:	d11a      	bne.n	8009b50 <_printf_common+0xcc>
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e008      	b.n	8009b30 <_printf_common+0xac>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4652      	mov	r2, sl
 8009b22:	4649      	mov	r1, r9
 8009b24:	4638      	mov	r0, r7
 8009b26:	47c0      	blx	r8
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d103      	bne.n	8009b34 <_printf_common+0xb0>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	3501      	adds	r5, #1
 8009b36:	e7c4      	b.n	8009ac2 <_printf_common+0x3e>
 8009b38:	2030      	movs	r0, #48	; 0x30
 8009b3a:	18e1      	adds	r1, r4, r3
 8009b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b46:	4422      	add	r2, r4
 8009b48:	3302      	adds	r3, #2
 8009b4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b4e:	e7c5      	b.n	8009adc <_printf_common+0x58>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4622      	mov	r2, r4
 8009b54:	4649      	mov	r1, r9
 8009b56:	4638      	mov	r0, r7
 8009b58:	47c0      	blx	r8
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d0e6      	beq.n	8009b2c <_printf_common+0xa8>
 8009b5e:	3601      	adds	r6, #1
 8009b60:	e7d9      	b.n	8009b16 <_printf_common+0x92>
	...

08009b64 <_printf_i>:
 8009b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	7e0f      	ldrb	r7, [r1, #24]
 8009b6a:	4691      	mov	r9, r2
 8009b6c:	2f78      	cmp	r7, #120	; 0x78
 8009b6e:	4680      	mov	r8, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	469a      	mov	sl, r3
 8009b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b7a:	d807      	bhi.n	8009b8c <_printf_i+0x28>
 8009b7c:	2f62      	cmp	r7, #98	; 0x62
 8009b7e:	d80a      	bhi.n	8009b96 <_printf_i+0x32>
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	f000 80d9 	beq.w	8009d38 <_printf_i+0x1d4>
 8009b86:	2f58      	cmp	r7, #88	; 0x58
 8009b88:	f000 80a4 	beq.w	8009cd4 <_printf_i+0x170>
 8009b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b94:	e03a      	b.n	8009c0c <_printf_i+0xa8>
 8009b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b9a:	2b15      	cmp	r3, #21
 8009b9c:	d8f6      	bhi.n	8009b8c <_printf_i+0x28>
 8009b9e:	a101      	add	r1, pc, #4	; (adr r1, 8009ba4 <_printf_i+0x40>)
 8009ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009c11 	.word	0x08009c11
 8009bac:	08009b8d 	.word	0x08009b8d
 8009bb0:	08009b8d 	.word	0x08009b8d
 8009bb4:	08009b8d 	.word	0x08009b8d
 8009bb8:	08009b8d 	.word	0x08009b8d
 8009bbc:	08009c11 	.word	0x08009c11
 8009bc0:	08009b8d 	.word	0x08009b8d
 8009bc4:	08009b8d 	.word	0x08009b8d
 8009bc8:	08009b8d 	.word	0x08009b8d
 8009bcc:	08009b8d 	.word	0x08009b8d
 8009bd0:	08009d1f 	.word	0x08009d1f
 8009bd4:	08009c41 	.word	0x08009c41
 8009bd8:	08009d01 	.word	0x08009d01
 8009bdc:	08009b8d 	.word	0x08009b8d
 8009be0:	08009b8d 	.word	0x08009b8d
 8009be4:	08009d41 	.word	0x08009d41
 8009be8:	08009b8d 	.word	0x08009b8d
 8009bec:	08009c41 	.word	0x08009c41
 8009bf0:	08009b8d 	.word	0x08009b8d
 8009bf4:	08009b8d 	.word	0x08009b8d
 8009bf8:	08009d09 	.word	0x08009d09
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	602a      	str	r2, [r5, #0]
 8009c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0a4      	b.n	8009d5a <_printf_i+0x1f6>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	6829      	ldr	r1, [r5, #0]
 8009c14:	0606      	lsls	r6, r0, #24
 8009c16:	f101 0304 	add.w	r3, r1, #4
 8009c1a:	d50a      	bpl.n	8009c32 <_printf_i+0xce>
 8009c1c:	680e      	ldr	r6, [r1, #0]
 8009c1e:	602b      	str	r3, [r5, #0]
 8009c20:	2e00      	cmp	r6, #0
 8009c22:	da03      	bge.n	8009c2c <_printf_i+0xc8>
 8009c24:	232d      	movs	r3, #45	; 0x2d
 8009c26:	4276      	negs	r6, r6
 8009c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2c:	230a      	movs	r3, #10
 8009c2e:	485e      	ldr	r0, [pc, #376]	; (8009da8 <_printf_i+0x244>)
 8009c30:	e019      	b.n	8009c66 <_printf_i+0x102>
 8009c32:	680e      	ldr	r6, [r1, #0]
 8009c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	bf18      	it	ne
 8009c3c:	b236      	sxthne	r6, r6
 8009c3e:	e7ef      	b.n	8009c20 <_printf_i+0xbc>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	1d19      	adds	r1, r3, #4
 8009c46:	6029      	str	r1, [r5, #0]
 8009c48:	0601      	lsls	r1, r0, #24
 8009c4a:	d501      	bpl.n	8009c50 <_printf_i+0xec>
 8009c4c:	681e      	ldr	r6, [r3, #0]
 8009c4e:	e002      	b.n	8009c56 <_printf_i+0xf2>
 8009c50:	0646      	lsls	r6, r0, #25
 8009c52:	d5fb      	bpl.n	8009c4c <_printf_i+0xe8>
 8009c54:	881e      	ldrh	r6, [r3, #0]
 8009c56:	2f6f      	cmp	r7, #111	; 0x6f
 8009c58:	bf0c      	ite	eq
 8009c5a:	2308      	moveq	r3, #8
 8009c5c:	230a      	movne	r3, #10
 8009c5e:	4852      	ldr	r0, [pc, #328]	; (8009da8 <_printf_i+0x244>)
 8009c60:	2100      	movs	r1, #0
 8009c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c66:	6865      	ldr	r5, [r4, #4]
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	bfa8      	it	ge
 8009c6c:	6821      	ldrge	r1, [r4, #0]
 8009c6e:	60a5      	str	r5, [r4, #8]
 8009c70:	bfa4      	itt	ge
 8009c72:	f021 0104 	bicge.w	r1, r1, #4
 8009c76:	6021      	strge	r1, [r4, #0]
 8009c78:	b90e      	cbnz	r6, 8009c7e <_printf_i+0x11a>
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	d04d      	beq.n	8009d1a <_printf_i+0x1b6>
 8009c7e:	4615      	mov	r5, r2
 8009c80:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c84:	fb03 6711 	mls	r7, r3, r1, r6
 8009c88:	5dc7      	ldrb	r7, [r0, r7]
 8009c8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c8e:	4637      	mov	r7, r6
 8009c90:	42bb      	cmp	r3, r7
 8009c92:	460e      	mov	r6, r1
 8009c94:	d9f4      	bls.n	8009c80 <_printf_i+0x11c>
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d10b      	bne.n	8009cb2 <_printf_i+0x14e>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	07de      	lsls	r6, r3, #31
 8009c9e:	d508      	bpl.n	8009cb2 <_printf_i+0x14e>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	6861      	ldr	r1, [r4, #4]
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	bfde      	ittt	le
 8009ca8:	2330      	movle	r3, #48	; 0x30
 8009caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cb2:	1b52      	subs	r2, r2, r5
 8009cb4:	6122      	str	r2, [r4, #16]
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f8cd a000 	str.w	sl, [sp]
 8009cc0:	aa03      	add	r2, sp, #12
 8009cc2:	f7ff fedf 	bl	8009a84 <_printf_common>
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d14c      	bne.n	8009d64 <_printf_i+0x200>
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295
 8009cce:	b004      	add	sp, #16
 8009cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd4:	4834      	ldr	r0, [pc, #208]	; (8009da8 <_printf_i+0x244>)
 8009cd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cda:	6829      	ldr	r1, [r5, #0]
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ce2:	6029      	str	r1, [r5, #0]
 8009ce4:	061d      	lsls	r5, r3, #24
 8009ce6:	d514      	bpl.n	8009d12 <_printf_i+0x1ae>
 8009ce8:	07df      	lsls	r7, r3, #31
 8009cea:	bf44      	itt	mi
 8009cec:	f043 0320 	orrmi.w	r3, r3, #32
 8009cf0:	6023      	strmi	r3, [r4, #0]
 8009cf2:	b91e      	cbnz	r6, 8009cfc <_printf_i+0x198>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	f023 0320 	bic.w	r3, r3, #32
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	e7af      	b.n	8009c60 <_printf_i+0xfc>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	f043 0320 	orr.w	r3, r3, #32
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	2378      	movs	r3, #120	; 0x78
 8009d0a:	4828      	ldr	r0, [pc, #160]	; (8009dac <_printf_i+0x248>)
 8009d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d10:	e7e3      	b.n	8009cda <_printf_i+0x176>
 8009d12:	0659      	lsls	r1, r3, #25
 8009d14:	bf48      	it	mi
 8009d16:	b2b6      	uxthmi	r6, r6
 8009d18:	e7e6      	b.n	8009ce8 <_printf_i+0x184>
 8009d1a:	4615      	mov	r5, r2
 8009d1c:	e7bb      	b.n	8009c96 <_printf_i+0x132>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	6826      	ldr	r6, [r4, #0]
 8009d22:	1d18      	adds	r0, r3, #4
 8009d24:	6961      	ldr	r1, [r4, #20]
 8009d26:	6028      	str	r0, [r5, #0]
 8009d28:	0635      	lsls	r5, r6, #24
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	d501      	bpl.n	8009d32 <_printf_i+0x1ce>
 8009d2e:	6019      	str	r1, [r3, #0]
 8009d30:	e002      	b.n	8009d38 <_printf_i+0x1d4>
 8009d32:	0670      	lsls	r0, r6, #25
 8009d34:	d5fb      	bpl.n	8009d2e <_printf_i+0x1ca>
 8009d36:	8019      	strh	r1, [r3, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4615      	mov	r5, r2
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	e7ba      	b.n	8009cb6 <_printf_i+0x152>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	2100      	movs	r1, #0
 8009d44:	1d1a      	adds	r2, r3, #4
 8009d46:	602a      	str	r2, [r5, #0]
 8009d48:	681d      	ldr	r5, [r3, #0]
 8009d4a:	6862      	ldr	r2, [r4, #4]
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f002 faf9 	bl	800c344 <memchr>
 8009d52:	b108      	cbz	r0, 8009d58 <_printf_i+0x1f4>
 8009d54:	1b40      	subs	r0, r0, r5
 8009d56:	6060      	str	r0, [r4, #4]
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	6123      	str	r3, [r4, #16]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d62:	e7a8      	b.n	8009cb6 <_printf_i+0x152>
 8009d64:	462a      	mov	r2, r5
 8009d66:	4649      	mov	r1, r9
 8009d68:	4640      	mov	r0, r8
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	47d0      	blx	sl
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d0ab      	beq.n	8009cca <_printf_i+0x166>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	079b      	lsls	r3, r3, #30
 8009d76:	d413      	bmi.n	8009da0 <_printf_i+0x23c>
 8009d78:	68e0      	ldr	r0, [r4, #12]
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	4298      	cmp	r0, r3
 8009d7e:	bfb8      	it	lt
 8009d80:	4618      	movlt	r0, r3
 8009d82:	e7a4      	b.n	8009cce <_printf_i+0x16a>
 8009d84:	2301      	movs	r3, #1
 8009d86:	4632      	mov	r2, r6
 8009d88:	4649      	mov	r1, r9
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	47d0      	blx	sl
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d09b      	beq.n	8009cca <_printf_i+0x166>
 8009d92:	3501      	adds	r5, #1
 8009d94:	68e3      	ldr	r3, [r4, #12]
 8009d96:	9903      	ldr	r1, [sp, #12]
 8009d98:	1a5b      	subs	r3, r3, r1
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	dcf2      	bgt.n	8009d84 <_printf_i+0x220>
 8009d9e:	e7eb      	b.n	8009d78 <_printf_i+0x214>
 8009da0:	2500      	movs	r5, #0
 8009da2:	f104 0619 	add.w	r6, r4, #25
 8009da6:	e7f5      	b.n	8009d94 <_printf_i+0x230>
 8009da8:	0801f766 	.word	0x0801f766
 8009dac:	0801f777 	.word	0x0801f777

08009db0 <_scanf_float>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b087      	sub	sp, #28
 8009db6:	9303      	str	r3, [sp, #12]
 8009db8:	688b      	ldr	r3, [r1, #8]
 8009dba:	4617      	mov	r7, r2
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009dc2:	bf85      	ittet	hi
 8009dc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009dc8:	195b      	addhi	r3, r3, r5
 8009dca:	2300      	movls	r3, #0
 8009dcc:	9302      	strhi	r3, [sp, #8]
 8009dce:	bf88      	it	hi
 8009dd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009dd4:	468b      	mov	fp, r1
 8009dd6:	f04f 0500 	mov.w	r5, #0
 8009dda:	bf8c      	ite	hi
 8009ddc:	608b      	strhi	r3, [r1, #8]
 8009dde:	9302      	strls	r3, [sp, #8]
 8009de0:	680b      	ldr	r3, [r1, #0]
 8009de2:	4680      	mov	r8, r0
 8009de4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009de8:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dec:	460c      	mov	r4, r1
 8009dee:	465e      	mov	r6, fp
 8009df0:	46aa      	mov	sl, r5
 8009df2:	46a9      	mov	r9, r5
 8009df4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009df8:	9501      	str	r5, [sp, #4]
 8009dfa:	68a2      	ldr	r2, [r4, #8]
 8009dfc:	b152      	cbz	r2, 8009e14 <_scanf_float+0x64>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b4e      	cmp	r3, #78	; 0x4e
 8009e04:	d864      	bhi.n	8009ed0 <_scanf_float+0x120>
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d83c      	bhi.n	8009e84 <_scanf_float+0xd4>
 8009e0a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009e0e:	b2c8      	uxtb	r0, r1
 8009e10:	280e      	cmp	r0, #14
 8009e12:	d93a      	bls.n	8009e8a <_scanf_float+0xda>
 8009e14:	f1b9 0f00 	cmp.w	r9, #0
 8009e18:	d003      	beq.n	8009e22 <_scanf_float+0x72>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e26:	f1ba 0f01 	cmp.w	sl, #1
 8009e2a:	f200 8113 	bhi.w	800a054 <_scanf_float+0x2a4>
 8009e2e:	455e      	cmp	r6, fp
 8009e30:	f200 8105 	bhi.w	800a03e <_scanf_float+0x28e>
 8009e34:	2501      	movs	r5, #1
 8009e36:	4628      	mov	r0, r5
 8009e38:	b007      	add	sp, #28
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e42:	2a0d      	cmp	r2, #13
 8009e44:	d8e6      	bhi.n	8009e14 <_scanf_float+0x64>
 8009e46:	a101      	add	r1, pc, #4	; (adr r1, 8009e4c <_scanf_float+0x9c>)
 8009e48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e4c:	08009f8b 	.word	0x08009f8b
 8009e50:	08009e15 	.word	0x08009e15
 8009e54:	08009e15 	.word	0x08009e15
 8009e58:	08009e15 	.word	0x08009e15
 8009e5c:	08009feb 	.word	0x08009feb
 8009e60:	08009fc3 	.word	0x08009fc3
 8009e64:	08009e15 	.word	0x08009e15
 8009e68:	08009e15 	.word	0x08009e15
 8009e6c:	08009f99 	.word	0x08009f99
 8009e70:	08009e15 	.word	0x08009e15
 8009e74:	08009e15 	.word	0x08009e15
 8009e78:	08009e15 	.word	0x08009e15
 8009e7c:	08009e15 	.word	0x08009e15
 8009e80:	08009f51 	.word	0x08009f51
 8009e84:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e88:	e7db      	b.n	8009e42 <_scanf_float+0x92>
 8009e8a:	290e      	cmp	r1, #14
 8009e8c:	d8c2      	bhi.n	8009e14 <_scanf_float+0x64>
 8009e8e:	a001      	add	r0, pc, #4	; (adr r0, 8009e94 <_scanf_float+0xe4>)
 8009e90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e94:	08009f43 	.word	0x08009f43
 8009e98:	08009e15 	.word	0x08009e15
 8009e9c:	08009f43 	.word	0x08009f43
 8009ea0:	08009fd7 	.word	0x08009fd7
 8009ea4:	08009e15 	.word	0x08009e15
 8009ea8:	08009ef1 	.word	0x08009ef1
 8009eac:	08009f2d 	.word	0x08009f2d
 8009eb0:	08009f2d 	.word	0x08009f2d
 8009eb4:	08009f2d 	.word	0x08009f2d
 8009eb8:	08009f2d 	.word	0x08009f2d
 8009ebc:	08009f2d 	.word	0x08009f2d
 8009ec0:	08009f2d 	.word	0x08009f2d
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009f2d 	.word	0x08009f2d
 8009ecc:	08009f2d 	.word	0x08009f2d
 8009ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8009ed2:	d809      	bhi.n	8009ee8 <_scanf_float+0x138>
 8009ed4:	2b60      	cmp	r3, #96	; 0x60
 8009ed6:	d8b2      	bhi.n	8009e3e <_scanf_float+0x8e>
 8009ed8:	2b54      	cmp	r3, #84	; 0x54
 8009eda:	d077      	beq.n	8009fcc <_scanf_float+0x21c>
 8009edc:	2b59      	cmp	r3, #89	; 0x59
 8009ede:	d199      	bne.n	8009e14 <_scanf_float+0x64>
 8009ee0:	2d07      	cmp	r5, #7
 8009ee2:	d197      	bne.n	8009e14 <_scanf_float+0x64>
 8009ee4:	2508      	movs	r5, #8
 8009ee6:	e029      	b.n	8009f3c <_scanf_float+0x18c>
 8009ee8:	2b74      	cmp	r3, #116	; 0x74
 8009eea:	d06f      	beq.n	8009fcc <_scanf_float+0x21c>
 8009eec:	2b79      	cmp	r3, #121	; 0x79
 8009eee:	e7f6      	b.n	8009ede <_scanf_float+0x12e>
 8009ef0:	6821      	ldr	r1, [r4, #0]
 8009ef2:	05c8      	lsls	r0, r1, #23
 8009ef4:	d51a      	bpl.n	8009f2c <_scanf_float+0x17c>
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009efc:	6021      	str	r1, [r4, #0]
 8009efe:	f109 0901 	add.w	r9, r9, #1
 8009f02:	b11b      	cbz	r3, 8009f0c <_scanf_float+0x15c>
 8009f04:	3b01      	subs	r3, #1
 8009f06:	3201      	adds	r2, #1
 8009f08:	9302      	str	r3, [sp, #8]
 8009f0a:	60a2      	str	r2, [r4, #8]
 8009f0c:	68a3      	ldr	r3, [r4, #8]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	3301      	adds	r3, #1
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	607b      	str	r3, [r7, #4]
 8009f20:	f340 8084 	ble.w	800a02c <_scanf_float+0x27c>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	3301      	adds	r3, #1
 8009f28:	603b      	str	r3, [r7, #0]
 8009f2a:	e766      	b.n	8009dfa <_scanf_float+0x4a>
 8009f2c:	eb1a 0f05 	cmn.w	sl, r5
 8009f30:	f47f af70 	bne.w	8009e14 <_scanf_float+0x64>
 8009f34:	6822      	ldr	r2, [r4, #0]
 8009f36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f40:	e7e4      	b.n	8009f0c <_scanf_float+0x15c>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	0610      	lsls	r0, r2, #24
 8009f46:	f57f af65 	bpl.w	8009e14 <_scanf_float+0x64>
 8009f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f4e:	e7f4      	b.n	8009f3a <_scanf_float+0x18a>
 8009f50:	f1ba 0f00 	cmp.w	sl, #0
 8009f54:	d10e      	bne.n	8009f74 <_scanf_float+0x1c4>
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	d10e      	bne.n	8009f7a <_scanf_float+0x1ca>
 8009f5c:	6822      	ldr	r2, [r4, #0]
 8009f5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f66:	d108      	bne.n	8009f7a <_scanf_float+0x1ca>
 8009f68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f6c:	f04f 0a01 	mov.w	sl, #1
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	e7e3      	b.n	8009f3c <_scanf_float+0x18c>
 8009f74:	f1ba 0f02 	cmp.w	sl, #2
 8009f78:	d055      	beq.n	800a026 <_scanf_float+0x276>
 8009f7a:	2d01      	cmp	r5, #1
 8009f7c:	d002      	beq.n	8009f84 <_scanf_float+0x1d4>
 8009f7e:	2d04      	cmp	r5, #4
 8009f80:	f47f af48 	bne.w	8009e14 <_scanf_float+0x64>
 8009f84:	3501      	adds	r5, #1
 8009f86:	b2ed      	uxtb	r5, r5
 8009f88:	e7d8      	b.n	8009f3c <_scanf_float+0x18c>
 8009f8a:	f1ba 0f01 	cmp.w	sl, #1
 8009f8e:	f47f af41 	bne.w	8009e14 <_scanf_float+0x64>
 8009f92:	f04f 0a02 	mov.w	sl, #2
 8009f96:	e7d1      	b.n	8009f3c <_scanf_float+0x18c>
 8009f98:	b97d      	cbnz	r5, 8009fba <_scanf_float+0x20a>
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	f47f af3c 	bne.w	8009e1a <_scanf_float+0x6a>
 8009fa2:	6822      	ldr	r2, [r4, #0]
 8009fa4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009fa8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009fac:	f47f af39 	bne.w	8009e22 <_scanf_float+0x72>
 8009fb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009fb4:	2501      	movs	r5, #1
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	e7c0      	b.n	8009f3c <_scanf_float+0x18c>
 8009fba:	2d03      	cmp	r5, #3
 8009fbc:	d0e2      	beq.n	8009f84 <_scanf_float+0x1d4>
 8009fbe:	2d05      	cmp	r5, #5
 8009fc0:	e7de      	b.n	8009f80 <_scanf_float+0x1d0>
 8009fc2:	2d02      	cmp	r5, #2
 8009fc4:	f47f af26 	bne.w	8009e14 <_scanf_float+0x64>
 8009fc8:	2503      	movs	r5, #3
 8009fca:	e7b7      	b.n	8009f3c <_scanf_float+0x18c>
 8009fcc:	2d06      	cmp	r5, #6
 8009fce:	f47f af21 	bne.w	8009e14 <_scanf_float+0x64>
 8009fd2:	2507      	movs	r5, #7
 8009fd4:	e7b2      	b.n	8009f3c <_scanf_float+0x18c>
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	0591      	lsls	r1, r2, #22
 8009fda:	f57f af1b 	bpl.w	8009e14 <_scanf_float+0x64>
 8009fde:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fe8:	e7a8      	b.n	8009f3c <_scanf_float+0x18c>
 8009fea:	6822      	ldr	r2, [r4, #0]
 8009fec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ff0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ff4:	d006      	beq.n	800a004 <_scanf_float+0x254>
 8009ff6:	0550      	lsls	r0, r2, #21
 8009ff8:	f57f af0c 	bpl.w	8009e14 <_scanf_float+0x64>
 8009ffc:	f1b9 0f00 	cmp.w	r9, #0
 800a000:	f43f af0f 	beq.w	8009e22 <_scanf_float+0x72>
 800a004:	0591      	lsls	r1, r2, #22
 800a006:	bf58      	it	pl
 800a008:	9901      	ldrpl	r1, [sp, #4]
 800a00a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a00e:	bf58      	it	pl
 800a010:	eba9 0101 	subpl.w	r1, r9, r1
 800a014:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a018:	f04f 0900 	mov.w	r9, #0
 800a01c:	bf58      	it	pl
 800a01e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	e78a      	b.n	8009f3c <_scanf_float+0x18c>
 800a026:	f04f 0a03 	mov.w	sl, #3
 800a02a:	e787      	b.n	8009f3c <_scanf_float+0x18c>
 800a02c:	4639      	mov	r1, r7
 800a02e:	4640      	mov	r0, r8
 800a030:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a034:	4798      	blx	r3
 800a036:	2800      	cmp	r0, #0
 800a038:	f43f aedf 	beq.w	8009dfa <_scanf_float+0x4a>
 800a03c:	e6ea      	b.n	8009e14 <_scanf_float+0x64>
 800a03e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a042:	463a      	mov	r2, r7
 800a044:	4640      	mov	r0, r8
 800a046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a04a:	4798      	blx	r3
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	3b01      	subs	r3, #1
 800a050:	6123      	str	r3, [r4, #16]
 800a052:	e6ec      	b.n	8009e2e <_scanf_float+0x7e>
 800a054:	1e6b      	subs	r3, r5, #1
 800a056:	2b06      	cmp	r3, #6
 800a058:	d825      	bhi.n	800a0a6 <_scanf_float+0x2f6>
 800a05a:	2d02      	cmp	r5, #2
 800a05c:	d836      	bhi.n	800a0cc <_scanf_float+0x31c>
 800a05e:	455e      	cmp	r6, fp
 800a060:	f67f aee8 	bls.w	8009e34 <_scanf_float+0x84>
 800a064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a068:	463a      	mov	r2, r7
 800a06a:	4640      	mov	r0, r8
 800a06c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a070:	4798      	blx	r3
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	3b01      	subs	r3, #1
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	e7f1      	b.n	800a05e <_scanf_float+0x2ae>
 800a07a:	9802      	ldr	r0, [sp, #8]
 800a07c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a080:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a084:	463a      	mov	r2, r7
 800a086:	9002      	str	r0, [sp, #8]
 800a088:	4640      	mov	r0, r8
 800a08a:	4798      	blx	r3
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	3b01      	subs	r3, #1
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a096:	fa5f fa8a 	uxtb.w	sl, sl
 800a09a:	f1ba 0f02 	cmp.w	sl, #2
 800a09e:	d1ec      	bne.n	800a07a <_scanf_float+0x2ca>
 800a0a0:	3d03      	subs	r5, #3
 800a0a2:	b2ed      	uxtb	r5, r5
 800a0a4:	1b76      	subs	r6, r6, r5
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	05da      	lsls	r2, r3, #23
 800a0aa:	d52f      	bpl.n	800a10c <_scanf_float+0x35c>
 800a0ac:	055b      	lsls	r3, r3, #21
 800a0ae:	d510      	bpl.n	800a0d2 <_scanf_float+0x322>
 800a0b0:	455e      	cmp	r6, fp
 800a0b2:	f67f aebf 	bls.w	8009e34 <_scanf_float+0x84>
 800a0b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ba:	463a      	mov	r2, r7
 800a0bc:	4640      	mov	r0, r8
 800a0be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0c2:	4798      	blx	r3
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	e7f1      	b.n	800a0b0 <_scanf_float+0x300>
 800a0cc:	46aa      	mov	sl, r5
 800a0ce:	9602      	str	r6, [sp, #8]
 800a0d0:	e7df      	b.n	800a092 <_scanf_float+0x2e2>
 800a0d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	2965      	cmp	r1, #101	; 0x65
 800a0da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0de:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0e2:	6123      	str	r3, [r4, #16]
 800a0e4:	d00c      	beq.n	800a100 <_scanf_float+0x350>
 800a0e6:	2945      	cmp	r1, #69	; 0x45
 800a0e8:	d00a      	beq.n	800a100 <_scanf_float+0x350>
 800a0ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ee:	463a      	mov	r2, r7
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4798      	blx	r3
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	1eb5      	subs	r5, r6, #2
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	463a      	mov	r2, r7
 800a102:	4640      	mov	r0, r8
 800a104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a108:	4798      	blx	r3
 800a10a:	462e      	mov	r6, r5
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	f015 0510 	ands.w	r5, r5, #16
 800a112:	d155      	bne.n	800a1c0 <_scanf_float+0x410>
 800a114:	7035      	strb	r5, [r6, #0]
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a11c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a120:	d11b      	bne.n	800a15a <_scanf_float+0x3aa>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	454b      	cmp	r3, r9
 800a126:	eba3 0209 	sub.w	r2, r3, r9
 800a12a:	d123      	bne.n	800a174 <_scanf_float+0x3c4>
 800a12c:	2200      	movs	r2, #0
 800a12e:	4659      	mov	r1, fp
 800a130:	4640      	mov	r0, r8
 800a132:	f000 fe79 	bl	800ae28 <_strtod_r>
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	f012 0f02 	tst.w	r2, #2
 800a13e:	4606      	mov	r6, r0
 800a140:	460f      	mov	r7, r1
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	d021      	beq.n	800a18a <_scanf_float+0x3da>
 800a146:	1d1a      	adds	r2, r3, #4
 800a148:	9903      	ldr	r1, [sp, #12]
 800a14a:	600a      	str	r2, [r1, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	e9c3 6700 	strd	r6, r7, [r3]
 800a152:	68e3      	ldr	r3, [r4, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	60e3      	str	r3, [r4, #12]
 800a158:	e66d      	b.n	8009e36 <_scanf_float+0x86>
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0e5      	beq.n	800a12c <_scanf_float+0x37c>
 800a160:	9905      	ldr	r1, [sp, #20]
 800a162:	230a      	movs	r3, #10
 800a164:	462a      	mov	r2, r5
 800a166:	4640      	mov	r0, r8
 800a168:	3101      	adds	r1, #1
 800a16a:	f000 fedf 	bl	800af2c <_strtol_r>
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	9e05      	ldr	r6, [sp, #20]
 800a172:	1ac2      	subs	r2, r0, r3
 800a174:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a178:	429e      	cmp	r6, r3
 800a17a:	bf28      	it	cs
 800a17c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a180:	4630      	mov	r0, r6
 800a182:	4910      	ldr	r1, [pc, #64]	; (800a1c4 <_scanf_float+0x414>)
 800a184:	f000 f826 	bl	800a1d4 <siprintf>
 800a188:	e7d0      	b.n	800a12c <_scanf_float+0x37c>
 800a18a:	f012 0f04 	tst.w	r2, #4
 800a18e:	f103 0204 	add.w	r2, r3, #4
 800a192:	d1d9      	bne.n	800a148 <_scanf_float+0x398>
 800a194:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a198:	f8cc 2000 	str.w	r2, [ip]
 800a19c:	f8d3 8000 	ldr.w	r8, [r3]
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	f7fc fe84 	bl	8006eb0 <__aeabi_dcmpun>
 800a1a8:	b128      	cbz	r0, 800a1b6 <_scanf_float+0x406>
 800a1aa:	4807      	ldr	r0, [pc, #28]	; (800a1c8 <_scanf_float+0x418>)
 800a1ac:	f000 f80e 	bl	800a1cc <nanf>
 800a1b0:	f8c8 0000 	str.w	r0, [r8]
 800a1b4:	e7cd      	b.n	800a152 <_scanf_float+0x3a2>
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7fc fed7 	bl	8006f6c <__aeabi_d2f>
 800a1be:	e7f7      	b.n	800a1b0 <_scanf_float+0x400>
 800a1c0:	2500      	movs	r5, #0
 800a1c2:	e638      	b.n	8009e36 <_scanf_float+0x86>
 800a1c4:	0801f788 	.word	0x0801f788
 800a1c8:	0801fb90 	.word	0x0801fb90

0800a1cc <nanf>:
 800a1cc:	4800      	ldr	r0, [pc, #0]	; (800a1d0 <nanf+0x4>)
 800a1ce:	4770      	bx	lr
 800a1d0:	7fc00000 	.word	0x7fc00000

0800a1d4 <siprintf>:
 800a1d4:	b40e      	push	{r1, r2, r3}
 800a1d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1da:	b500      	push	{lr}
 800a1dc:	b09c      	sub	sp, #112	; 0x70
 800a1de:	ab1d      	add	r3, sp, #116	; 0x74
 800a1e0:	9002      	str	r0, [sp, #8]
 800a1e2:	9006      	str	r0, [sp, #24]
 800a1e4:	9107      	str	r1, [sp, #28]
 800a1e6:	9104      	str	r1, [sp, #16]
 800a1e8:	4808      	ldr	r0, [pc, #32]	; (800a20c <siprintf+0x38>)
 800a1ea:	4909      	ldr	r1, [pc, #36]	; (800a210 <siprintf+0x3c>)
 800a1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f0:	9105      	str	r1, [sp, #20]
 800a1f2:	6800      	ldr	r0, [r0, #0]
 800a1f4:	a902      	add	r1, sp, #8
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	f002 fec4 	bl	800cf84 <_svfiprintf_r>
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	b01c      	add	sp, #112	; 0x70
 800a204:	f85d eb04 	ldr.w	lr, [sp], #4
 800a208:	b003      	add	sp, #12
 800a20a:	4770      	bx	lr
 800a20c:	2000000c 	.word	0x2000000c
 800a210:	ffff0208 	.word	0xffff0208

0800a214 <sulp>:
 800a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a218:	460f      	mov	r7, r1
 800a21a:	4690      	mov	r8, r2
 800a21c:	f002 fc1e 	bl	800ca5c <__ulp>
 800a220:	4604      	mov	r4, r0
 800a222:	460d      	mov	r5, r1
 800a224:	f1b8 0f00 	cmp.w	r8, #0
 800a228:	d011      	beq.n	800a24e <sulp+0x3a>
 800a22a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a22e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd0b      	ble.n	800a24e <sulp+0x3a>
 800a236:	2400      	movs	r4, #0
 800a238:	051b      	lsls	r3, r3, #20
 800a23a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a23e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a242:	4622      	mov	r2, r4
 800a244:	462b      	mov	r3, r5
 800a246:	f7fc fb99 	bl	800697c <__aeabi_dmul>
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a258 <_strtod_l>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	469b      	mov	fp, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	b09f      	sub	sp, #124	; 0x7c
 800a262:	931a      	str	r3, [sp, #104]	; 0x68
 800a264:	4b9e      	ldr	r3, [pc, #632]	; (800a4e0 <_strtod_l+0x288>)
 800a266:	4682      	mov	sl, r0
 800a268:	681f      	ldr	r7, [r3, #0]
 800a26a:	460e      	mov	r6, r1
 800a26c:	4638      	mov	r0, r7
 800a26e:	9215      	str	r2, [sp, #84]	; 0x54
 800a270:	f7fc f9c0 	bl	80065f4 <strlen>
 800a274:	f04f 0800 	mov.w	r8, #0
 800a278:	4604      	mov	r4, r0
 800a27a:	f04f 0900 	mov.w	r9, #0
 800a27e:	9619      	str	r6, [sp, #100]	; 0x64
 800a280:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	2a2b      	cmp	r2, #43	; 0x2b
 800a286:	d04c      	beq.n	800a322 <_strtod_l+0xca>
 800a288:	d83a      	bhi.n	800a300 <_strtod_l+0xa8>
 800a28a:	2a0d      	cmp	r2, #13
 800a28c:	d833      	bhi.n	800a2f6 <_strtod_l+0x9e>
 800a28e:	2a08      	cmp	r2, #8
 800a290:	d833      	bhi.n	800a2fa <_strtod_l+0xa2>
 800a292:	2a00      	cmp	r2, #0
 800a294:	d03d      	beq.n	800a312 <_strtod_l+0xba>
 800a296:	2300      	movs	r3, #0
 800a298:	930a      	str	r3, [sp, #40]	; 0x28
 800a29a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a29c:	782b      	ldrb	r3, [r5, #0]
 800a29e:	2b30      	cmp	r3, #48	; 0x30
 800a2a0:	f040 80aa 	bne.w	800a3f8 <_strtod_l+0x1a0>
 800a2a4:	786b      	ldrb	r3, [r5, #1]
 800a2a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2aa:	2b58      	cmp	r3, #88	; 0x58
 800a2ac:	d166      	bne.n	800a37c <_strtod_l+0x124>
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	ab1a      	add	r3, sp, #104	; 0x68
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	4a8a      	ldr	r2, [pc, #552]	; (800a4e4 <_strtod_l+0x28c>)
 800a2ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a2be:	ab1b      	add	r3, sp, #108	; 0x6c
 800a2c0:	a919      	add	r1, sp, #100	; 0x64
 800a2c2:	f001 fd23 	bl	800bd0c <__gethex>
 800a2c6:	f010 0607 	ands.w	r6, r0, #7
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	d005      	beq.n	800a2da <_strtod_l+0x82>
 800a2ce:	2e06      	cmp	r6, #6
 800a2d0:	d129      	bne.n	800a326 <_strtod_l+0xce>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	9519      	str	r5, [sp, #100]	; 0x64
 800a2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f040 858a 	bne.w	800adf6 <_strtod_l+0xb9e>
 800a2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e4:	b1d3      	cbz	r3, 800a31c <_strtod_l+0xc4>
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	b01f      	add	sp, #124	; 0x7c
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	2a20      	cmp	r2, #32
 800a2f8:	d1cd      	bne.n	800a296 <_strtod_l+0x3e>
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	9319      	str	r3, [sp, #100]	; 0x64
 800a2fe:	e7bf      	b.n	800a280 <_strtod_l+0x28>
 800a300:	2a2d      	cmp	r2, #45	; 0x2d
 800a302:	d1c8      	bne.n	800a296 <_strtod_l+0x3e>
 800a304:	2201      	movs	r2, #1
 800a306:	920a      	str	r2, [sp, #40]	; 0x28
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	9219      	str	r2, [sp, #100]	; 0x64
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1c3      	bne.n	800a29a <_strtod_l+0x42>
 800a312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a314:	9619      	str	r6, [sp, #100]	; 0x64
 800a316:	2b00      	cmp	r3, #0
 800a318:	f040 856b 	bne.w	800adf2 <_strtod_l+0xb9a>
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	e7e4      	b.n	800a2ec <_strtod_l+0x94>
 800a322:	2200      	movs	r2, #0
 800a324:	e7ef      	b.n	800a306 <_strtod_l+0xae>
 800a326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a328:	b13a      	cbz	r2, 800a33a <_strtod_l+0xe2>
 800a32a:	2135      	movs	r1, #53	; 0x35
 800a32c:	a81c      	add	r0, sp, #112	; 0x70
 800a32e:	f002 fc99 	bl	800cc64 <__copybits>
 800a332:	4650      	mov	r0, sl
 800a334:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a336:	f002 f861 	bl	800c3fc <_Bfree>
 800a33a:	3e01      	subs	r6, #1
 800a33c:	2e04      	cmp	r6, #4
 800a33e:	d806      	bhi.n	800a34e <_strtod_l+0xf6>
 800a340:	e8df f006 	tbb	[pc, r6]
 800a344:	1714030a 	.word	0x1714030a
 800a348:	0a          	.byte	0x0a
 800a349:	00          	.byte	0x00
 800a34a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a34e:	0721      	lsls	r1, r4, #28
 800a350:	d5c3      	bpl.n	800a2da <_strtod_l+0x82>
 800a352:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a356:	e7c0      	b.n	800a2da <_strtod_l+0x82>
 800a358:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a35a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a35e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a366:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a36a:	e7f0      	b.n	800a34e <_strtod_l+0xf6>
 800a36c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4e8 <_strtod_l+0x290>
 800a370:	e7ed      	b.n	800a34e <_strtod_l+0xf6>
 800a372:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a376:	f04f 38ff 	mov.w	r8, #4294967295
 800a37a:	e7e8      	b.n	800a34e <_strtod_l+0xf6>
 800a37c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	9219      	str	r2, [sp, #100]	; 0x64
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	2b30      	cmp	r3, #48	; 0x30
 800a386:	d0f9      	beq.n	800a37c <_strtod_l+0x124>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0a6      	beq.n	800a2da <_strtod_l+0x82>
 800a38c:	2301      	movs	r3, #1
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a392:	220a      	movs	r2, #10
 800a394:	9308      	str	r3, [sp, #32]
 800a396:	2300      	movs	r3, #0
 800a398:	469b      	mov	fp, r3
 800a39a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a39e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a3a0:	7805      	ldrb	r5, [r0, #0]
 800a3a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a3a6:	b2d9      	uxtb	r1, r3
 800a3a8:	2909      	cmp	r1, #9
 800a3aa:	d927      	bls.n	800a3fc <_strtod_l+0x1a4>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	f002 fefe 	bl	800d1b0 <strncmp>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d033      	beq.n	800a420 <_strtod_l+0x1c8>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	465c      	mov	r4, fp
 800a3be:	4603      	mov	r3, r0
 800a3c0:	9004      	str	r0, [sp, #16]
 800a3c2:	2a65      	cmp	r2, #101	; 0x65
 800a3c4:	d001      	beq.n	800a3ca <_strtod_l+0x172>
 800a3c6:	2a45      	cmp	r2, #69	; 0x45
 800a3c8:	d114      	bne.n	800a3f4 <_strtod_l+0x19c>
 800a3ca:	b91c      	cbnz	r4, 800a3d4 <_strtod_l+0x17c>
 800a3cc:	9a07      	ldr	r2, [sp, #28]
 800a3ce:	4302      	orrs	r2, r0
 800a3d0:	d09f      	beq.n	800a312 <_strtod_l+0xba>
 800a3d2:	2400      	movs	r4, #0
 800a3d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a3d6:	1c72      	adds	r2, r6, #1
 800a3d8:	9219      	str	r2, [sp, #100]	; 0x64
 800a3da:	7872      	ldrb	r2, [r6, #1]
 800a3dc:	2a2b      	cmp	r2, #43	; 0x2b
 800a3de:	d079      	beq.n	800a4d4 <_strtod_l+0x27c>
 800a3e0:	2a2d      	cmp	r2, #45	; 0x2d
 800a3e2:	f000 8083 	beq.w	800a4ec <_strtod_l+0x294>
 800a3e6:	2700      	movs	r7, #0
 800a3e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a3ec:	2909      	cmp	r1, #9
 800a3ee:	f240 8083 	bls.w	800a4f8 <_strtod_l+0x2a0>
 800a3f2:	9619      	str	r6, [sp, #100]	; 0x64
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	e09f      	b.n	800a538 <_strtod_l+0x2e0>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e7c8      	b.n	800a38e <_strtod_l+0x136>
 800a3fc:	f1bb 0f08 	cmp.w	fp, #8
 800a400:	bfd5      	itete	le
 800a402:	9906      	ldrle	r1, [sp, #24]
 800a404:	9905      	ldrgt	r1, [sp, #20]
 800a406:	fb02 3301 	mlale	r3, r2, r1, r3
 800a40a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a40e:	f100 0001 	add.w	r0, r0, #1
 800a412:	bfd4      	ite	le
 800a414:	9306      	strle	r3, [sp, #24]
 800a416:	9305      	strgt	r3, [sp, #20]
 800a418:	f10b 0b01 	add.w	fp, fp, #1
 800a41c:	9019      	str	r0, [sp, #100]	; 0x64
 800a41e:	e7be      	b.n	800a39e <_strtod_l+0x146>
 800a420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a422:	191a      	adds	r2, r3, r4
 800a424:	9219      	str	r2, [sp, #100]	; 0x64
 800a426:	5d1a      	ldrb	r2, [r3, r4]
 800a428:	f1bb 0f00 	cmp.w	fp, #0
 800a42c:	d036      	beq.n	800a49c <_strtod_l+0x244>
 800a42e:	465c      	mov	r4, fp
 800a430:	9004      	str	r0, [sp, #16]
 800a432:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a436:	2b09      	cmp	r3, #9
 800a438:	d912      	bls.n	800a460 <_strtod_l+0x208>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7c1      	b.n	800a3c2 <_strtod_l+0x16a>
 800a43e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a440:	3001      	adds	r0, #1
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	9219      	str	r2, [sp, #100]	; 0x64
 800a446:	785a      	ldrb	r2, [r3, #1]
 800a448:	2a30      	cmp	r2, #48	; 0x30
 800a44a:	d0f8      	beq.n	800a43e <_strtod_l+0x1e6>
 800a44c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a450:	2b08      	cmp	r3, #8
 800a452:	f200 84d5 	bhi.w	800ae00 <_strtod_l+0xba8>
 800a456:	9004      	str	r0, [sp, #16]
 800a458:	2000      	movs	r0, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a45e:	9308      	str	r3, [sp, #32]
 800a460:	3a30      	subs	r2, #48	; 0x30
 800a462:	f100 0301 	add.w	r3, r0, #1
 800a466:	d013      	beq.n	800a490 <_strtod_l+0x238>
 800a468:	9904      	ldr	r1, [sp, #16]
 800a46a:	1905      	adds	r5, r0, r4
 800a46c:	4419      	add	r1, r3
 800a46e:	9104      	str	r1, [sp, #16]
 800a470:	4623      	mov	r3, r4
 800a472:	210a      	movs	r1, #10
 800a474:	42ab      	cmp	r3, r5
 800a476:	d113      	bne.n	800a4a0 <_strtod_l+0x248>
 800a478:	1823      	adds	r3, r4, r0
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	f104 0401 	add.w	r4, r4, #1
 800a480:	4404      	add	r4, r0
 800a482:	dc1b      	bgt.n	800a4bc <_strtod_l+0x264>
 800a484:	230a      	movs	r3, #10
 800a486:	9906      	ldr	r1, [sp, #24]
 800a488:	fb03 2301 	mla	r3, r3, r1, r2
 800a48c:	9306      	str	r3, [sp, #24]
 800a48e:	2300      	movs	r3, #0
 800a490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a492:	4618      	mov	r0, r3
 800a494:	1c51      	adds	r1, r2, #1
 800a496:	9119      	str	r1, [sp, #100]	; 0x64
 800a498:	7852      	ldrb	r2, [r2, #1]
 800a49a:	e7ca      	b.n	800a432 <_strtod_l+0x1da>
 800a49c:	4658      	mov	r0, fp
 800a49e:	e7d3      	b.n	800a448 <_strtod_l+0x1f0>
 800a4a0:	2b08      	cmp	r3, #8
 800a4a2:	dc04      	bgt.n	800a4ae <_strtod_l+0x256>
 800a4a4:	9f06      	ldr	r7, [sp, #24]
 800a4a6:	434f      	muls	r7, r1
 800a4a8:	9706      	str	r7, [sp, #24]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	e7e2      	b.n	800a474 <_strtod_l+0x21c>
 800a4ae:	1c5f      	adds	r7, r3, #1
 800a4b0:	2f10      	cmp	r7, #16
 800a4b2:	bfde      	ittt	le
 800a4b4:	9f05      	ldrle	r7, [sp, #20]
 800a4b6:	434f      	mulle	r7, r1
 800a4b8:	9705      	strle	r7, [sp, #20]
 800a4ba:	e7f6      	b.n	800a4aa <_strtod_l+0x252>
 800a4bc:	2c10      	cmp	r4, #16
 800a4be:	bfdf      	itttt	le
 800a4c0:	230a      	movle	r3, #10
 800a4c2:	9905      	ldrle	r1, [sp, #20]
 800a4c4:	fb03 2301 	mlale	r3, r3, r1, r2
 800a4c8:	9305      	strle	r3, [sp, #20]
 800a4ca:	e7e0      	b.n	800a48e <_strtod_l+0x236>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e77b      	b.n	800a3cc <_strtod_l+0x174>
 800a4d4:	2700      	movs	r7, #0
 800a4d6:	1cb2      	adds	r2, r6, #2
 800a4d8:	9219      	str	r2, [sp, #100]	; 0x64
 800a4da:	78b2      	ldrb	r2, [r6, #2]
 800a4dc:	e784      	b.n	800a3e8 <_strtod_l+0x190>
 800a4de:	bf00      	nop
 800a4e0:	0801f9d8 	.word	0x0801f9d8
 800a4e4:	0801f790 	.word	0x0801f790
 800a4e8:	7ff00000 	.word	0x7ff00000
 800a4ec:	2701      	movs	r7, #1
 800a4ee:	e7f2      	b.n	800a4d6 <_strtod_l+0x27e>
 800a4f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4f2:	1c51      	adds	r1, r2, #1
 800a4f4:	9119      	str	r1, [sp, #100]	; 0x64
 800a4f6:	7852      	ldrb	r2, [r2, #1]
 800a4f8:	2a30      	cmp	r2, #48	; 0x30
 800a4fa:	d0f9      	beq.n	800a4f0 <_strtod_l+0x298>
 800a4fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a500:	2908      	cmp	r1, #8
 800a502:	f63f af77 	bhi.w	800a3f4 <_strtod_l+0x19c>
 800a506:	f04f 0e0a 	mov.w	lr, #10
 800a50a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a50e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a510:	9209      	str	r2, [sp, #36]	; 0x24
 800a512:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a514:	1c51      	adds	r1, r2, #1
 800a516:	9119      	str	r1, [sp, #100]	; 0x64
 800a518:	7852      	ldrb	r2, [r2, #1]
 800a51a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a51e:	2d09      	cmp	r5, #9
 800a520:	d935      	bls.n	800a58e <_strtod_l+0x336>
 800a522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a524:	1b49      	subs	r1, r1, r5
 800a526:	2908      	cmp	r1, #8
 800a528:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a52c:	dc02      	bgt.n	800a534 <_strtod_l+0x2dc>
 800a52e:	4565      	cmp	r5, ip
 800a530:	bfa8      	it	ge
 800a532:	4665      	movge	r5, ip
 800a534:	b107      	cbz	r7, 800a538 <_strtod_l+0x2e0>
 800a536:	426d      	negs	r5, r5
 800a538:	2c00      	cmp	r4, #0
 800a53a:	d14c      	bne.n	800a5d6 <_strtod_l+0x37e>
 800a53c:	9907      	ldr	r1, [sp, #28]
 800a53e:	4301      	orrs	r1, r0
 800a540:	f47f aecb 	bne.w	800a2da <_strtod_l+0x82>
 800a544:	2b00      	cmp	r3, #0
 800a546:	f47f aee4 	bne.w	800a312 <_strtod_l+0xba>
 800a54a:	2a69      	cmp	r2, #105	; 0x69
 800a54c:	d026      	beq.n	800a59c <_strtod_l+0x344>
 800a54e:	dc23      	bgt.n	800a598 <_strtod_l+0x340>
 800a550:	2a49      	cmp	r2, #73	; 0x49
 800a552:	d023      	beq.n	800a59c <_strtod_l+0x344>
 800a554:	2a4e      	cmp	r2, #78	; 0x4e
 800a556:	f47f aedc 	bne.w	800a312 <_strtod_l+0xba>
 800a55a:	499d      	ldr	r1, [pc, #628]	; (800a7d0 <_strtod_l+0x578>)
 800a55c:	a819      	add	r0, sp, #100	; 0x64
 800a55e:	f001 fe23 	bl	800c1a8 <__match>
 800a562:	2800      	cmp	r0, #0
 800a564:	f43f aed5 	beq.w	800a312 <_strtod_l+0xba>
 800a568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b28      	cmp	r3, #40	; 0x28
 800a56e:	d12c      	bne.n	800a5ca <_strtod_l+0x372>
 800a570:	4998      	ldr	r1, [pc, #608]	; (800a7d4 <_strtod_l+0x57c>)
 800a572:	aa1c      	add	r2, sp, #112	; 0x70
 800a574:	a819      	add	r0, sp, #100	; 0x64
 800a576:	f001 fe2b 	bl	800c1d0 <__hexnan>
 800a57a:	2805      	cmp	r0, #5
 800a57c:	d125      	bne.n	800a5ca <_strtod_l+0x372>
 800a57e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a580:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a584:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a588:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a58c:	e6a5      	b.n	800a2da <_strtod_l+0x82>
 800a58e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a592:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a596:	e7bc      	b.n	800a512 <_strtod_l+0x2ba>
 800a598:	2a6e      	cmp	r2, #110	; 0x6e
 800a59a:	e7dc      	b.n	800a556 <_strtod_l+0x2fe>
 800a59c:	498e      	ldr	r1, [pc, #568]	; (800a7d8 <_strtod_l+0x580>)
 800a59e:	a819      	add	r0, sp, #100	; 0x64
 800a5a0:	f001 fe02 	bl	800c1a8 <__match>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f aeb4 	beq.w	800a312 <_strtod_l+0xba>
 800a5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5ac:	498b      	ldr	r1, [pc, #556]	; (800a7dc <_strtod_l+0x584>)
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	a819      	add	r0, sp, #100	; 0x64
 800a5b2:	9319      	str	r3, [sp, #100]	; 0x64
 800a5b4:	f001 fdf8 	bl	800c1a8 <__match>
 800a5b8:	b910      	cbnz	r0, 800a5c0 <_strtod_l+0x368>
 800a5ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5bc:	3301      	adds	r3, #1
 800a5be:	9319      	str	r3, [sp, #100]	; 0x64
 800a5c0:	f04f 0800 	mov.w	r8, #0
 800a5c4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a7e0 <_strtod_l+0x588>
 800a5c8:	e687      	b.n	800a2da <_strtod_l+0x82>
 800a5ca:	4886      	ldr	r0, [pc, #536]	; (800a7e4 <_strtod_l+0x58c>)
 800a5cc:	f002 fdda 	bl	800d184 <nan>
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	4689      	mov	r9, r1
 800a5d4:	e681      	b.n	800a2da <_strtod_l+0x82>
 800a5d6:	9b04      	ldr	r3, [sp, #16]
 800a5d8:	f1bb 0f00 	cmp.w	fp, #0
 800a5dc:	bf08      	it	eq
 800a5de:	46a3      	moveq	fp, r4
 800a5e0:	1aeb      	subs	r3, r5, r3
 800a5e2:	2c10      	cmp	r4, #16
 800a5e4:	9806      	ldr	r0, [sp, #24]
 800a5e6:	4626      	mov	r6, r4
 800a5e8:	9307      	str	r3, [sp, #28]
 800a5ea:	bfa8      	it	ge
 800a5ec:	2610      	movge	r6, #16
 800a5ee:	f7fc f94b 	bl	8006888 <__aeabi_ui2d>
 800a5f2:	2c09      	cmp	r4, #9
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	4689      	mov	r9, r1
 800a5f8:	dd13      	ble.n	800a622 <_strtod_l+0x3ca>
 800a5fa:	4b7b      	ldr	r3, [pc, #492]	; (800a7e8 <_strtod_l+0x590>)
 800a5fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a600:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a604:	f7fc f9ba 	bl	800697c <__aeabi_dmul>
 800a608:	4680      	mov	r8, r0
 800a60a:	9805      	ldr	r0, [sp, #20]
 800a60c:	4689      	mov	r9, r1
 800a60e:	f7fc f93b 	bl	8006888 <__aeabi_ui2d>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4640      	mov	r0, r8
 800a618:	4649      	mov	r1, r9
 800a61a:	f7fb fff9 	bl	8006610 <__adddf3>
 800a61e:	4680      	mov	r8, r0
 800a620:	4689      	mov	r9, r1
 800a622:	2c0f      	cmp	r4, #15
 800a624:	dc36      	bgt.n	800a694 <_strtod_l+0x43c>
 800a626:	9b07      	ldr	r3, [sp, #28]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f43f ae56 	beq.w	800a2da <_strtod_l+0x82>
 800a62e:	dd22      	ble.n	800a676 <_strtod_l+0x41e>
 800a630:	2b16      	cmp	r3, #22
 800a632:	dc09      	bgt.n	800a648 <_strtod_l+0x3f0>
 800a634:	496c      	ldr	r1, [pc, #432]	; (800a7e8 <_strtod_l+0x590>)
 800a636:	4642      	mov	r2, r8
 800a638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a63c:	464b      	mov	r3, r9
 800a63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a642:	f7fc f99b 	bl	800697c <__aeabi_dmul>
 800a646:	e7c3      	b.n	800a5d0 <_strtod_l+0x378>
 800a648:	9a07      	ldr	r2, [sp, #28]
 800a64a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a64e:	4293      	cmp	r3, r2
 800a650:	db20      	blt.n	800a694 <_strtod_l+0x43c>
 800a652:	4d65      	ldr	r5, [pc, #404]	; (800a7e8 <_strtod_l+0x590>)
 800a654:	f1c4 040f 	rsb	r4, r4, #15
 800a658:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a65c:	4642      	mov	r2, r8
 800a65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a662:	464b      	mov	r3, r9
 800a664:	f7fc f98a 	bl	800697c <__aeabi_dmul>
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	1b1c      	subs	r4, r3, r4
 800a66c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a670:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a674:	e7e5      	b.n	800a642 <_strtod_l+0x3ea>
 800a676:	9b07      	ldr	r3, [sp, #28]
 800a678:	3316      	adds	r3, #22
 800a67a:	db0b      	blt.n	800a694 <_strtod_l+0x43c>
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	4640      	mov	r0, r8
 800a680:	1b5d      	subs	r5, r3, r5
 800a682:	4b59      	ldr	r3, [pc, #356]	; (800a7e8 <_strtod_l+0x590>)
 800a684:	4649      	mov	r1, r9
 800a686:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a68a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a68e:	f7fc fa9f 	bl	8006bd0 <__aeabi_ddiv>
 800a692:	e79d      	b.n	800a5d0 <_strtod_l+0x378>
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	1ba6      	subs	r6, r4, r6
 800a698:	441e      	add	r6, r3
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	dd74      	ble.n	800a788 <_strtod_l+0x530>
 800a69e:	f016 030f 	ands.w	r3, r6, #15
 800a6a2:	d00a      	beq.n	800a6ba <_strtod_l+0x462>
 800a6a4:	4950      	ldr	r1, [pc, #320]	; (800a7e8 <_strtod_l+0x590>)
 800a6a6:	4642      	mov	r2, r8
 800a6a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b0:	464b      	mov	r3, r9
 800a6b2:	f7fc f963 	bl	800697c <__aeabi_dmul>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	f036 060f 	bics.w	r6, r6, #15
 800a6be:	d052      	beq.n	800a766 <_strtod_l+0x50e>
 800a6c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a6c4:	dd27      	ble.n	800a716 <_strtod_l+0x4be>
 800a6c6:	f04f 0b00 	mov.w	fp, #0
 800a6ca:	f8cd b010 	str.w	fp, [sp, #16]
 800a6ce:	f8cd b020 	str.w	fp, [sp, #32]
 800a6d2:	f8cd b018 	str.w	fp, [sp, #24]
 800a6d6:	2322      	movs	r3, #34	; 0x22
 800a6d8:	f04f 0800 	mov.w	r8, #0
 800a6dc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a7e0 <_strtod_l+0x588>
 800a6e0:	f8ca 3000 	str.w	r3, [sl]
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f43f adf7 	beq.w	800a2da <_strtod_l+0x82>
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a6f0:	f001 fe84 	bl	800c3fc <_Bfree>
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	9906      	ldr	r1, [sp, #24]
 800a6f8:	f001 fe80 	bl	800c3fc <_Bfree>
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	9904      	ldr	r1, [sp, #16]
 800a700:	f001 fe7c 	bl	800c3fc <_Bfree>
 800a704:	4650      	mov	r0, sl
 800a706:	9908      	ldr	r1, [sp, #32]
 800a708:	f001 fe78 	bl	800c3fc <_Bfree>
 800a70c:	4659      	mov	r1, fp
 800a70e:	4650      	mov	r0, sl
 800a710:	f001 fe74 	bl	800c3fc <_Bfree>
 800a714:	e5e1      	b.n	800a2da <_strtod_l+0x82>
 800a716:	4b35      	ldr	r3, [pc, #212]	; (800a7ec <_strtod_l+0x594>)
 800a718:	4640      	mov	r0, r8
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	2300      	movs	r3, #0
 800a71e:	4649      	mov	r1, r9
 800a720:	461f      	mov	r7, r3
 800a722:	1136      	asrs	r6, r6, #4
 800a724:	2e01      	cmp	r6, #1
 800a726:	dc21      	bgt.n	800a76c <_strtod_l+0x514>
 800a728:	b10b      	cbz	r3, 800a72e <_strtod_l+0x4d6>
 800a72a:	4680      	mov	r8, r0
 800a72c:	4689      	mov	r9, r1
 800a72e:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <_strtod_l+0x594>)
 800a730:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a734:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a738:	4642      	mov	r2, r8
 800a73a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a73e:	464b      	mov	r3, r9
 800a740:	f7fc f91c 	bl	800697c <__aeabi_dmul>
 800a744:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <_strtod_l+0x588>)
 800a746:	460a      	mov	r2, r1
 800a748:	400b      	ands	r3, r1
 800a74a:	4929      	ldr	r1, [pc, #164]	; (800a7f0 <_strtod_l+0x598>)
 800a74c:	4680      	mov	r8, r0
 800a74e:	428b      	cmp	r3, r1
 800a750:	d8b9      	bhi.n	800a6c6 <_strtod_l+0x46e>
 800a752:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a756:	428b      	cmp	r3, r1
 800a758:	bf86      	itte	hi
 800a75a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a75e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a7f4 <_strtod_l+0x59c>
 800a762:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a766:	2300      	movs	r3, #0
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	e07f      	b.n	800a86c <_strtod_l+0x614>
 800a76c:	07f2      	lsls	r2, r6, #31
 800a76e:	d505      	bpl.n	800a77c <_strtod_l+0x524>
 800a770:	9b05      	ldr	r3, [sp, #20]
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f7fc f901 	bl	800697c <__aeabi_dmul>
 800a77a:	2301      	movs	r3, #1
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	3701      	adds	r7, #1
 800a780:	3208      	adds	r2, #8
 800a782:	1076      	asrs	r6, r6, #1
 800a784:	9205      	str	r2, [sp, #20]
 800a786:	e7cd      	b.n	800a724 <_strtod_l+0x4cc>
 800a788:	d0ed      	beq.n	800a766 <_strtod_l+0x50e>
 800a78a:	4276      	negs	r6, r6
 800a78c:	f016 020f 	ands.w	r2, r6, #15
 800a790:	d00a      	beq.n	800a7a8 <_strtod_l+0x550>
 800a792:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <_strtod_l+0x590>)
 800a794:	4640      	mov	r0, r8
 800a796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a79a:	4649      	mov	r1, r9
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7fc fa16 	bl	8006bd0 <__aeabi_ddiv>
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	1136      	asrs	r6, r6, #4
 800a7aa:	d0dc      	beq.n	800a766 <_strtod_l+0x50e>
 800a7ac:	2e1f      	cmp	r6, #31
 800a7ae:	dd23      	ble.n	800a7f8 <_strtod_l+0x5a0>
 800a7b0:	f04f 0b00 	mov.w	fp, #0
 800a7b4:	f8cd b010 	str.w	fp, [sp, #16]
 800a7b8:	f8cd b020 	str.w	fp, [sp, #32]
 800a7bc:	f8cd b018 	str.w	fp, [sp, #24]
 800a7c0:	2322      	movs	r3, #34	; 0x22
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	f04f 0900 	mov.w	r9, #0
 800a7ca:	f8ca 3000 	str.w	r3, [sl]
 800a7ce:	e789      	b.n	800a6e4 <_strtod_l+0x48c>
 800a7d0:	0801f761 	.word	0x0801f761
 800a7d4:	0801f7a4 	.word	0x0801f7a4
 800a7d8:	0801f759 	.word	0x0801f759
 800a7dc:	0801f8e4 	.word	0x0801f8e4
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	0801fb90 	.word	0x0801fb90
 800a7e8:	0801fa70 	.word	0x0801fa70
 800a7ec:	0801fa48 	.word	0x0801fa48
 800a7f0:	7ca00000 	.word	0x7ca00000
 800a7f4:	7fefffff 	.word	0x7fefffff
 800a7f8:	f016 0310 	ands.w	r3, r6, #16
 800a7fc:	bf18      	it	ne
 800a7fe:	236a      	movne	r3, #106	; 0x6a
 800a800:	4640      	mov	r0, r8
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	4649      	mov	r1, r9
 800a806:	2300      	movs	r3, #0
 800a808:	4fb0      	ldr	r7, [pc, #704]	; (800aacc <_strtod_l+0x874>)
 800a80a:	07f2      	lsls	r2, r6, #31
 800a80c:	d504      	bpl.n	800a818 <_strtod_l+0x5c0>
 800a80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a812:	f7fc f8b3 	bl	800697c <__aeabi_dmul>
 800a816:	2301      	movs	r3, #1
 800a818:	1076      	asrs	r6, r6, #1
 800a81a:	f107 0708 	add.w	r7, r7, #8
 800a81e:	d1f4      	bne.n	800a80a <_strtod_l+0x5b2>
 800a820:	b10b      	cbz	r3, 800a826 <_strtod_l+0x5ce>
 800a822:	4680      	mov	r8, r0
 800a824:	4689      	mov	r9, r1
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	b1c3      	cbz	r3, 800a85c <_strtod_l+0x604>
 800a82a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a82e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a832:	2b00      	cmp	r3, #0
 800a834:	4649      	mov	r1, r9
 800a836:	dd11      	ble.n	800a85c <_strtod_l+0x604>
 800a838:	2b1f      	cmp	r3, #31
 800a83a:	f340 8127 	ble.w	800aa8c <_strtod_l+0x834>
 800a83e:	2b34      	cmp	r3, #52	; 0x34
 800a840:	bfd8      	it	le
 800a842:	f04f 33ff 	movle.w	r3, #4294967295
 800a846:	f04f 0800 	mov.w	r8, #0
 800a84a:	bfcf      	iteee	gt
 800a84c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a854:	fa03 f202 	lslle.w	r2, r3, r2
 800a858:	ea02 0901 	andle.w	r9, r2, r1
 800a85c:	2200      	movs	r2, #0
 800a85e:	2300      	movs	r3, #0
 800a860:	4640      	mov	r0, r8
 800a862:	4649      	mov	r1, r9
 800a864:	f7fc faf2 	bl	8006e4c <__aeabi_dcmpeq>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d1a1      	bne.n	800a7b0 <_strtod_l+0x558>
 800a86c:	9b06      	ldr	r3, [sp, #24]
 800a86e:	465a      	mov	r2, fp
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	4650      	mov	r0, sl
 800a874:	4623      	mov	r3, r4
 800a876:	9908      	ldr	r1, [sp, #32]
 800a878:	f001 fe28 	bl	800c4cc <__s2b>
 800a87c:	9008      	str	r0, [sp, #32]
 800a87e:	2800      	cmp	r0, #0
 800a880:	f43f af21 	beq.w	800a6c6 <_strtod_l+0x46e>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	f04f 0b00 	mov.w	fp, #0
 800a88a:	1b5d      	subs	r5, r3, r5
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	f8cd b010 	str.w	fp, [sp, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	bfb4      	ite	lt
 800a896:	462b      	movlt	r3, r5
 800a898:	2300      	movge	r3, #0
 800a89a:	930e      	str	r3, [sp, #56]	; 0x38
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8a2:	9314      	str	r3, [sp, #80]	; 0x50
 800a8a4:	9b08      	ldr	r3, [sp, #32]
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	6859      	ldr	r1, [r3, #4]
 800a8aa:	f001 fd67 	bl	800c37c <_Balloc>
 800a8ae:	9006      	str	r0, [sp, #24]
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f43f af10 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	300c      	adds	r0, #12
 800a8ba:	691a      	ldr	r2, [r3, #16]
 800a8bc:	f103 010c 	add.w	r1, r3, #12
 800a8c0:	3202      	adds	r2, #2
 800a8c2:	0092      	lsls	r2, r2, #2
 800a8c4:	f001 fd4c 	bl	800c360 <memcpy>
 800a8c8:	ab1c      	add	r3, sp, #112	; 0x70
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	ab1b      	add	r3, sp, #108	; 0x6c
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a8da:	f002 f939 	bl	800cb50 <__d2b>
 800a8de:	901a      	str	r0, [sp, #104]	; 0x68
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	f43f aef8 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	f001 fe87 	bl	800c5fc <__i2b>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	9004      	str	r0, [sp, #16]
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f43f aeef 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a8f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a8fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8fc:	2d00      	cmp	r5, #0
 800a8fe:	bfab      	itete	ge
 800a900:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a902:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a904:	18ee      	addge	r6, r5, r3
 800a906:	1b5c      	sublt	r4, r3, r5
 800a908:	9b05      	ldr	r3, [sp, #20]
 800a90a:	bfa8      	it	ge
 800a90c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a90e:	eba5 0503 	sub.w	r5, r5, r3
 800a912:	4415      	add	r5, r2
 800a914:	4b6e      	ldr	r3, [pc, #440]	; (800aad0 <_strtod_l+0x878>)
 800a916:	f105 35ff 	add.w	r5, r5, #4294967295
 800a91a:	bfb8      	it	lt
 800a91c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a91e:	429d      	cmp	r5, r3
 800a920:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a924:	f280 80c4 	bge.w	800aab0 <_strtod_l+0x858>
 800a928:	1b5b      	subs	r3, r3, r5
 800a92a:	2b1f      	cmp	r3, #31
 800a92c:	f04f 0701 	mov.w	r7, #1
 800a930:	eba2 0203 	sub.w	r2, r2, r3
 800a934:	f300 80b1 	bgt.w	800aa9a <_strtod_l+0x842>
 800a938:	2500      	movs	r5, #0
 800a93a:	fa07 f303 	lsl.w	r3, r7, r3
 800a93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a940:	18b7      	adds	r7, r6, r2
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	42be      	cmp	r6, r7
 800a946:	4414      	add	r4, r2
 800a948:	441c      	add	r4, r3
 800a94a:	4633      	mov	r3, r6
 800a94c:	bfa8      	it	ge
 800a94e:	463b      	movge	r3, r7
 800a950:	42a3      	cmp	r3, r4
 800a952:	bfa8      	it	ge
 800a954:	4623      	movge	r3, r4
 800a956:	2b00      	cmp	r3, #0
 800a958:	bfc2      	ittt	gt
 800a95a:	1aff      	subgt	r7, r7, r3
 800a95c:	1ae4      	subgt	r4, r4, r3
 800a95e:	1af6      	subgt	r6, r6, r3
 800a960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	dd17      	ble.n	800a996 <_strtod_l+0x73e>
 800a966:	461a      	mov	r2, r3
 800a968:	4650      	mov	r0, sl
 800a96a:	9904      	ldr	r1, [sp, #16]
 800a96c:	f001 ff04 	bl	800c778 <__pow5mult>
 800a970:	9004      	str	r0, [sp, #16]
 800a972:	2800      	cmp	r0, #0
 800a974:	f43f aeaf 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a978:	4601      	mov	r1, r0
 800a97a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a97c:	4650      	mov	r0, sl
 800a97e:	f001 fe53 	bl	800c628 <__multiply>
 800a982:	9009      	str	r0, [sp, #36]	; 0x24
 800a984:	2800      	cmp	r0, #0
 800a986:	f43f aea6 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a98a:	4650      	mov	r0, sl
 800a98c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a98e:	f001 fd35 	bl	800c3fc <_Bfree>
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	931a      	str	r3, [sp, #104]	; 0x68
 800a996:	2f00      	cmp	r7, #0
 800a998:	f300 808e 	bgt.w	800aab8 <_strtod_l+0x860>
 800a99c:	9b07      	ldr	r3, [sp, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dd08      	ble.n	800a9b4 <_strtod_l+0x75c>
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9a6:	9906      	ldr	r1, [sp, #24]
 800a9a8:	f001 fee6 	bl	800c778 <__pow5mult>
 800a9ac:	9006      	str	r0, [sp, #24]
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f43f ae91 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a9b4:	2c00      	cmp	r4, #0
 800a9b6:	dd08      	ble.n	800a9ca <_strtod_l+0x772>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	9906      	ldr	r1, [sp, #24]
 800a9be:	f001 ff35 	bl	800c82c <__lshift>
 800a9c2:	9006      	str	r0, [sp, #24]
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	f43f ae86 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	dd08      	ble.n	800a9e0 <_strtod_l+0x788>
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	4650      	mov	r0, sl
 800a9d2:	9904      	ldr	r1, [sp, #16]
 800a9d4:	f001 ff2a 	bl	800c82c <__lshift>
 800a9d8:	9004      	str	r0, [sp, #16]
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f ae7b 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	9a06      	ldr	r2, [sp, #24]
 800a9e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a9e6:	f001 ffad 	bl	800c944 <__mdiff>
 800a9ea:	4683      	mov	fp, r0
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f43f ae72 	beq.w	800a6d6 <_strtod_l+0x47e>
 800a9f2:	2400      	movs	r4, #0
 800a9f4:	68c3      	ldr	r3, [r0, #12]
 800a9f6:	9904      	ldr	r1, [sp, #16]
 800a9f8:	60c4      	str	r4, [r0, #12]
 800a9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9fc:	f001 ff86 	bl	800c90c <__mcmp>
 800aa00:	42a0      	cmp	r0, r4
 800aa02:	da6b      	bge.n	800aadc <_strtod_l+0x884>
 800aa04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa06:	ea53 0308 	orrs.w	r3, r3, r8
 800aa0a:	f040 8091 	bne.w	800ab30 <_strtod_l+0x8d8>
 800aa0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 808c 	bne.w	800ab30 <_strtod_l+0x8d8>
 800aa18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa1c:	0d1b      	lsrs	r3, r3, #20
 800aa1e:	051b      	lsls	r3, r3, #20
 800aa20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa24:	f240 8084 	bls.w	800ab30 <_strtod_l+0x8d8>
 800aa28:	f8db 3014 	ldr.w	r3, [fp, #20]
 800aa2c:	b91b      	cbnz	r3, 800aa36 <_strtod_l+0x7de>
 800aa2e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	dd7c      	ble.n	800ab30 <_strtod_l+0x8d8>
 800aa36:	4659      	mov	r1, fp
 800aa38:	2201      	movs	r2, #1
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f001 fef6 	bl	800c82c <__lshift>
 800aa40:	9904      	ldr	r1, [sp, #16]
 800aa42:	4683      	mov	fp, r0
 800aa44:	f001 ff62 	bl	800c90c <__mcmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	dd71      	ble.n	800ab30 <_strtod_l+0x8d8>
 800aa4c:	9905      	ldr	r1, [sp, #20]
 800aa4e:	464b      	mov	r3, r9
 800aa50:	4a20      	ldr	r2, [pc, #128]	; (800aad4 <_strtod_l+0x87c>)
 800aa52:	2900      	cmp	r1, #0
 800aa54:	f000 808c 	beq.w	800ab70 <_strtod_l+0x918>
 800aa58:	ea02 0109 	and.w	r1, r2, r9
 800aa5c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa60:	f300 8086 	bgt.w	800ab70 <_strtod_l+0x918>
 800aa64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa68:	f77f aeaa 	ble.w	800a7c0 <_strtod_l+0x568>
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <_strtod_l+0x880>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	f7fb ff82 	bl	800697c <__aeabi_dmul>
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4303      	orrs	r3, r0
 800aa7c:	bf08      	it	eq
 800aa7e:	2322      	moveq	r3, #34	; 0x22
 800aa80:	4680      	mov	r8, r0
 800aa82:	4689      	mov	r9, r1
 800aa84:	bf08      	it	eq
 800aa86:	f8ca 3000 	streq.w	r3, [sl]
 800aa8a:	e62f      	b.n	800a6ec <_strtod_l+0x494>
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	fa02 f303 	lsl.w	r3, r2, r3
 800aa94:	ea03 0808 	and.w	r8, r3, r8
 800aa98:	e6e0      	b.n	800a85c <_strtod_l+0x604>
 800aa9a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800aa9e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800aaa2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800aaa6:	35e2      	adds	r5, #226	; 0xe2
 800aaa8:	fa07 f505 	lsl.w	r5, r7, r5
 800aaac:	970f      	str	r7, [sp, #60]	; 0x3c
 800aaae:	e747      	b.n	800a940 <_strtod_l+0x6e8>
 800aab0:	2301      	movs	r3, #1
 800aab2:	2500      	movs	r5, #0
 800aab4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aab6:	e743      	b.n	800a940 <_strtod_l+0x6e8>
 800aab8:	463a      	mov	r2, r7
 800aaba:	4650      	mov	r0, sl
 800aabc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aabe:	f001 feb5 	bl	800c82c <__lshift>
 800aac2:	901a      	str	r0, [sp, #104]	; 0x68
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f47f af69 	bne.w	800a99c <_strtod_l+0x744>
 800aaca:	e604      	b.n	800a6d6 <_strtod_l+0x47e>
 800aacc:	0801f7b8 	.word	0x0801f7b8
 800aad0:	fffffc02 	.word	0xfffffc02
 800aad4:	7ff00000 	.word	0x7ff00000
 800aad8:	39500000 	.word	0x39500000
 800aadc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aae0:	d165      	bne.n	800abae <_strtod_l+0x956>
 800aae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aae8:	b35a      	cbz	r2, 800ab42 <_strtod_l+0x8ea>
 800aaea:	4a99      	ldr	r2, [pc, #612]	; (800ad50 <_strtod_l+0xaf8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d12b      	bne.n	800ab48 <_strtod_l+0x8f0>
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	b303      	cbz	r3, 800ab38 <_strtod_l+0x8e0>
 800aaf6:	464a      	mov	r2, r9
 800aaf8:	4b96      	ldr	r3, [pc, #600]	; (800ad54 <_strtod_l+0xafc>)
 800aafa:	4013      	ands	r3, r2
 800aafc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295
 800ab04:	d81b      	bhi.n	800ab3e <_strtod_l+0x8e6>
 800ab06:	0d1b      	lsrs	r3, r3, #20
 800ab08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab10:	4299      	cmp	r1, r3
 800ab12:	d119      	bne.n	800ab48 <_strtod_l+0x8f0>
 800ab14:	4b90      	ldr	r3, [pc, #576]	; (800ad58 <_strtod_l+0xb00>)
 800ab16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d102      	bne.n	800ab22 <_strtod_l+0x8ca>
 800ab1c:	3101      	adds	r1, #1
 800ab1e:	f43f adda 	beq.w	800a6d6 <_strtod_l+0x47e>
 800ab22:	f04f 0800 	mov.w	r8, #0
 800ab26:	4b8b      	ldr	r3, [pc, #556]	; (800ad54 <_strtod_l+0xafc>)
 800ab28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab2a:	401a      	ands	r2, r3
 800ab2c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ab30:	9b05      	ldr	r3, [sp, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d19a      	bne.n	800aa6c <_strtod_l+0x814>
 800ab36:	e5d9      	b.n	800a6ec <_strtod_l+0x494>
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	e7e8      	b.n	800ab10 <_strtod_l+0x8b8>
 800ab3e:	4613      	mov	r3, r2
 800ab40:	e7e6      	b.n	800ab10 <_strtod_l+0x8b8>
 800ab42:	ea53 0308 	orrs.w	r3, r3, r8
 800ab46:	d081      	beq.n	800aa4c <_strtod_l+0x7f4>
 800ab48:	b1e5      	cbz	r5, 800ab84 <_strtod_l+0x92c>
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	421d      	tst	r5, r3
 800ab4e:	d0ef      	beq.n	800ab30 <_strtod_l+0x8d8>
 800ab50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	9a05      	ldr	r2, [sp, #20]
 800ab58:	b1c3      	cbz	r3, 800ab8c <_strtod_l+0x934>
 800ab5a:	f7ff fb5b 	bl	800a214 <sulp>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab66:	f7fb fd53 	bl	8006610 <__adddf3>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	e7df      	b.n	800ab30 <_strtod_l+0x8d8>
 800ab70:	4013      	ands	r3, r2
 800ab72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab76:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ab7a:	f04f 38ff 	mov.w	r8, #4294967295
 800ab7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ab82:	e7d5      	b.n	800ab30 <_strtod_l+0x8d8>
 800ab84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab86:	ea13 0f08 	tst.w	r3, r8
 800ab8a:	e7e0      	b.n	800ab4e <_strtod_l+0x8f6>
 800ab8c:	f7ff fb42 	bl	800a214 <sulp>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab98:	f7fb fd38 	bl	800660c <__aeabi_dsub>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4680      	mov	r8, r0
 800aba2:	4689      	mov	r9, r1
 800aba4:	f7fc f952 	bl	8006e4c <__aeabi_dcmpeq>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d0c1      	beq.n	800ab30 <_strtod_l+0x8d8>
 800abac:	e608      	b.n	800a7c0 <_strtod_l+0x568>
 800abae:	4658      	mov	r0, fp
 800abb0:	9904      	ldr	r1, [sp, #16]
 800abb2:	f002 f829 	bl	800cc08 <__ratio>
 800abb6:	2200      	movs	r2, #0
 800abb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	f7fc f958 	bl	8006e74 <__aeabi_dcmple>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d070      	beq.n	800acaa <_strtod_l+0xa52>
 800abc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d042      	beq.n	800ac54 <_strtod_l+0x9fc>
 800abce:	2600      	movs	r6, #0
 800abd0:	4f62      	ldr	r7, [pc, #392]	; (800ad5c <_strtod_l+0xb04>)
 800abd2:	4d62      	ldr	r5, [pc, #392]	; (800ad5c <_strtod_l+0xb04>)
 800abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abda:	0d1b      	lsrs	r3, r3, #20
 800abdc:	051b      	lsls	r3, r3, #20
 800abde:	930f      	str	r3, [sp, #60]	; 0x3c
 800abe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abe2:	4b5f      	ldr	r3, [pc, #380]	; (800ad60 <_strtod_l+0xb08>)
 800abe4:	429a      	cmp	r2, r3
 800abe6:	f040 80c3 	bne.w	800ad70 <_strtod_l+0xb18>
 800abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abec:	4640      	mov	r0, r8
 800abee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800abf2:	4649      	mov	r1, r9
 800abf4:	f001 ff32 	bl	800ca5c <__ulp>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4630      	mov	r0, r6
 800abfe:	4639      	mov	r1, r7
 800ac00:	f7fb febc 	bl	800697c <__aeabi_dmul>
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	f7fb fd02 	bl	8006610 <__adddf3>
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4951      	ldr	r1, [pc, #324]	; (800ad54 <_strtod_l+0xafc>)
 800ac10:	4a54      	ldr	r2, [pc, #336]	; (800ad64 <_strtod_l+0xb0c>)
 800ac12:	4019      	ands	r1, r3
 800ac14:	4291      	cmp	r1, r2
 800ac16:	4680      	mov	r8, r0
 800ac18:	d95d      	bls.n	800acd6 <_strtod_l+0xa7e>
 800ac1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac1c:	4b4e      	ldr	r3, [pc, #312]	; (800ad58 <_strtod_l+0xb00>)
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d103      	bne.n	800ac2a <_strtod_l+0x9d2>
 800ac22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac24:	3301      	adds	r3, #1
 800ac26:	f43f ad56 	beq.w	800a6d6 <_strtod_l+0x47e>
 800ac2a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ad58 <_strtod_l+0xb00>
 800ac32:	4650      	mov	r0, sl
 800ac34:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac36:	f001 fbe1 	bl	800c3fc <_Bfree>
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	9906      	ldr	r1, [sp, #24]
 800ac3e:	f001 fbdd 	bl	800c3fc <_Bfree>
 800ac42:	4650      	mov	r0, sl
 800ac44:	9904      	ldr	r1, [sp, #16]
 800ac46:	f001 fbd9 	bl	800c3fc <_Bfree>
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	f001 fbd5 	bl	800c3fc <_Bfree>
 800ac52:	e627      	b.n	800a8a4 <_strtod_l+0x64c>
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d119      	bne.n	800ac8e <_strtod_l+0xa36>
 800ac5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac60:	b9e3      	cbnz	r3, 800ac9c <_strtod_l+0xa44>
 800ac62:	2200      	movs	r2, #0
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <_strtod_l+0xb04>)
 800ac6a:	f7fc f8f9 	bl	8006e60 <__aeabi_dcmplt>
 800ac6e:	b9c8      	cbnz	r0, 800aca4 <_strtod_l+0xa4c>
 800ac70:	2200      	movs	r2, #0
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	4b3c      	ldr	r3, [pc, #240]	; (800ad68 <_strtod_l+0xb10>)
 800ac78:	f7fb fe80 	bl	800697c <__aeabi_dmul>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ac84:	9416      	str	r4, [sp, #88]	; 0x58
 800ac86:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac88:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ac8c:	e7a2      	b.n	800abd4 <_strtod_l+0x97c>
 800ac8e:	f1b8 0f01 	cmp.w	r8, #1
 800ac92:	d103      	bne.n	800ac9c <_strtod_l+0xa44>
 800ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f43f ad92 	beq.w	800a7c0 <_strtod_l+0x568>
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	2400      	movs	r4, #0
 800aca0:	4f32      	ldr	r7, [pc, #200]	; (800ad6c <_strtod_l+0xb14>)
 800aca2:	e796      	b.n	800abd2 <_strtod_l+0x97a>
 800aca4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aca6:	4d30      	ldr	r5, [pc, #192]	; (800ad68 <_strtod_l+0xb10>)
 800aca8:	e7ea      	b.n	800ac80 <_strtod_l+0xa28>
 800acaa:	4b2f      	ldr	r3, [pc, #188]	; (800ad68 <_strtod_l+0xb10>)
 800acac:	2200      	movs	r2, #0
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7fb fe63 	bl	800697c <__aeabi_dmul>
 800acb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb8:	4604      	mov	r4, r0
 800acba:	460d      	mov	r5, r1
 800acbc:	b933      	cbnz	r3, 800accc <_strtod_l+0xa74>
 800acbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc2:	9010      	str	r0, [sp, #64]	; 0x40
 800acc4:	9311      	str	r3, [sp, #68]	; 0x44
 800acc6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800acca:	e783      	b.n	800abd4 <_strtod_l+0x97c>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800acd4:	e7f7      	b.n	800acc6 <_strtod_l+0xa6e>
 800acd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800acda:	9b05      	ldr	r3, [sp, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1a8      	bne.n	800ac32 <_strtod_l+0x9da>
 800ace0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ace4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ace6:	0d1b      	lsrs	r3, r3, #20
 800ace8:	051b      	lsls	r3, r3, #20
 800acea:	429a      	cmp	r2, r3
 800acec:	d1a1      	bne.n	800ac32 <_strtod_l+0x9da>
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7fc fa01 	bl	80070f8 <__aeabi_d2lz>
 800acf6:	f7fb fe13 	bl	8006920 <__aeabi_l2d>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7fb fc83 	bl	800660c <__aeabi_dsub>
 800ad06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad0c:	ea43 0308 	orr.w	r3, r3, r8
 800ad10:	4313      	orrs	r3, r2
 800ad12:	4604      	mov	r4, r0
 800ad14:	460d      	mov	r5, r1
 800ad16:	d066      	beq.n	800ade6 <_strtod_l+0xb8e>
 800ad18:	a309      	add	r3, pc, #36	; (adr r3, 800ad40 <_strtod_l+0xae8>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7fc f89f 	bl	8006e60 <__aeabi_dcmplt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f47f ace2 	bne.w	800a6ec <_strtod_l+0x494>
 800ad28:	a307      	add	r3, pc, #28	; (adr r3, 800ad48 <_strtod_l+0xaf0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	4629      	mov	r1, r5
 800ad32:	f7fc f8b3 	bl	8006e9c <__aeabi_dcmpgt>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f43f af7b 	beq.w	800ac32 <_strtod_l+0x9da>
 800ad3c:	e4d6      	b.n	800a6ec <_strtod_l+0x494>
 800ad3e:	bf00      	nop
 800ad40:	94a03595 	.word	0x94a03595
 800ad44:	3fdfffff 	.word	0x3fdfffff
 800ad48:	35afe535 	.word	0x35afe535
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	000fffff 	.word	0x000fffff
 800ad54:	7ff00000 	.word	0x7ff00000
 800ad58:	7fefffff 	.word	0x7fefffff
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	7fe00000 	.word	0x7fe00000
 800ad64:	7c9fffff 	.word	0x7c9fffff
 800ad68:	3fe00000 	.word	0x3fe00000
 800ad6c:	bff00000 	.word	0xbff00000
 800ad70:	9b05      	ldr	r3, [sp, #20]
 800ad72:	b313      	cbz	r3, 800adba <_strtod_l+0xb62>
 800ad74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad7a:	d81e      	bhi.n	800adba <_strtod_l+0xb62>
 800ad7c:	a326      	add	r3, pc, #152	; (adr r3, 800ae18 <_strtod_l+0xbc0>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	4620      	mov	r0, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7fc f875 	bl	8006e74 <__aeabi_dcmple>
 800ad8a:	b190      	cbz	r0, 800adb2 <_strtod_l+0xb5a>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7fc f8cc 	bl	8006f2c <__aeabi_d2uiz>
 800ad94:	2801      	cmp	r0, #1
 800ad96:	bf38      	it	cc
 800ad98:	2001      	movcc	r0, #1
 800ad9a:	f7fb fd75 	bl	8006888 <__aeabi_ui2d>
 800ad9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada0:	4604      	mov	r4, r0
 800ada2:	460d      	mov	r5, r1
 800ada4:	b9d3      	cbnz	r3, 800addc <_strtod_l+0xb84>
 800ada6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adaa:	9012      	str	r0, [sp, #72]	; 0x48
 800adac:	9313      	str	r3, [sp, #76]	; 0x4c
 800adae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800adb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adb4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800adb8:	1a9f      	subs	r7, r3, r2
 800adba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adbe:	f001 fe4d 	bl	800ca5c <__ulp>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7fb fdd7 	bl	800697c <__aeabi_dmul>
 800adce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800add2:	f7fb fc1d 	bl	8006610 <__adddf3>
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	e77e      	b.n	800acda <_strtod_l+0xa82>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ade4:	e7e3      	b.n	800adae <_strtod_l+0xb56>
 800ade6:	a30e      	add	r3, pc, #56	; (adr r3, 800ae20 <_strtod_l+0xbc8>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	f7fc f838 	bl	8006e60 <__aeabi_dcmplt>
 800adf0:	e7a1      	b.n	800ad36 <_strtod_l+0xade>
 800adf2:	2300      	movs	r3, #0
 800adf4:	930a      	str	r3, [sp, #40]	; 0x28
 800adf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adf8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	f7ff ba71 	b.w	800a2e2 <_strtod_l+0x8a>
 800ae00:	2a65      	cmp	r2, #101	; 0x65
 800ae02:	f43f ab63 	beq.w	800a4cc <_strtod_l+0x274>
 800ae06:	2a45      	cmp	r2, #69	; 0x45
 800ae08:	f43f ab60 	beq.w	800a4cc <_strtod_l+0x274>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f7ff bb95 	b.w	800a53c <_strtod_l+0x2e4>
 800ae12:	bf00      	nop
 800ae14:	f3af 8000 	nop.w
 800ae18:	ffc00000 	.word	0xffc00000
 800ae1c:	41dfffff 	.word	0x41dfffff
 800ae20:	94a03595 	.word	0x94a03595
 800ae24:	3fcfffff 	.word	0x3fcfffff

0800ae28 <_strtod_r>:
 800ae28:	4b01      	ldr	r3, [pc, #4]	; (800ae30 <_strtod_r+0x8>)
 800ae2a:	f7ff ba15 	b.w	800a258 <_strtod_l>
 800ae2e:	bf00      	nop
 800ae30:	20000074 	.word	0x20000074

0800ae34 <_strtol_l.constprop.0>:
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	d001      	beq.n	800ae42 <_strtol_l.constprop.0+0xe>
 800ae3e:	2b24      	cmp	r3, #36	; 0x24
 800ae40:	d906      	bls.n	800ae50 <_strtol_l.constprop.0+0x1c>
 800ae42:	f7fe fb23 	bl	800948c <__errno>
 800ae46:	2316      	movs	r3, #22
 800ae48:	6003      	str	r3, [r0, #0]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae50:	460d      	mov	r5, r1
 800ae52:	4f35      	ldr	r7, [pc, #212]	; (800af28 <_strtol_l.constprop.0+0xf4>)
 800ae54:	4628      	mov	r0, r5
 800ae56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae5a:	5de6      	ldrb	r6, [r4, r7]
 800ae5c:	f016 0608 	ands.w	r6, r6, #8
 800ae60:	d1f8      	bne.n	800ae54 <_strtol_l.constprop.0+0x20>
 800ae62:	2c2d      	cmp	r4, #45	; 0x2d
 800ae64:	d12f      	bne.n	800aec6 <_strtol_l.constprop.0+0x92>
 800ae66:	2601      	movs	r6, #1
 800ae68:	782c      	ldrb	r4, [r5, #0]
 800ae6a:	1c85      	adds	r5, r0, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d057      	beq.n	800af20 <_strtol_l.constprop.0+0xec>
 800ae70:	2b10      	cmp	r3, #16
 800ae72:	d109      	bne.n	800ae88 <_strtol_l.constprop.0+0x54>
 800ae74:	2c30      	cmp	r4, #48	; 0x30
 800ae76:	d107      	bne.n	800ae88 <_strtol_l.constprop.0+0x54>
 800ae78:	7828      	ldrb	r0, [r5, #0]
 800ae7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ae7e:	2858      	cmp	r0, #88	; 0x58
 800ae80:	d149      	bne.n	800af16 <_strtol_l.constprop.0+0xe2>
 800ae82:	2310      	movs	r3, #16
 800ae84:	786c      	ldrb	r4, [r5, #1]
 800ae86:	3502      	adds	r5, #2
 800ae88:	2700      	movs	r7, #0
 800ae8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ae8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ae92:	fbbe f9f3 	udiv	r9, lr, r3
 800ae96:	4638      	mov	r0, r7
 800ae98:	fb03 ea19 	mls	sl, r3, r9, lr
 800ae9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aea0:	f1bc 0f09 	cmp.w	ip, #9
 800aea4:	d814      	bhi.n	800aed0 <_strtol_l.constprop.0+0x9c>
 800aea6:	4664      	mov	r4, ip
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	dd22      	ble.n	800aef2 <_strtol_l.constprop.0+0xbe>
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	db1d      	blt.n	800aeec <_strtol_l.constprop.0+0xb8>
 800aeb0:	4581      	cmp	r9, r0
 800aeb2:	d31b      	bcc.n	800aeec <_strtol_l.constprop.0+0xb8>
 800aeb4:	d101      	bne.n	800aeba <_strtol_l.constprop.0+0x86>
 800aeb6:	45a2      	cmp	sl, r4
 800aeb8:	db18      	blt.n	800aeec <_strtol_l.constprop.0+0xb8>
 800aeba:	2701      	movs	r7, #1
 800aebc:	fb00 4003 	mla	r0, r0, r3, r4
 800aec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aec4:	e7ea      	b.n	800ae9c <_strtol_l.constprop.0+0x68>
 800aec6:	2c2b      	cmp	r4, #43	; 0x2b
 800aec8:	bf04      	itt	eq
 800aeca:	782c      	ldrbeq	r4, [r5, #0]
 800aecc:	1c85      	addeq	r5, r0, #2
 800aece:	e7cd      	b.n	800ae6c <_strtol_l.constprop.0+0x38>
 800aed0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aed4:	f1bc 0f19 	cmp.w	ip, #25
 800aed8:	d801      	bhi.n	800aede <_strtol_l.constprop.0+0xaa>
 800aeda:	3c37      	subs	r4, #55	; 0x37
 800aedc:	e7e4      	b.n	800aea8 <_strtol_l.constprop.0+0x74>
 800aede:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aee2:	f1bc 0f19 	cmp.w	ip, #25
 800aee6:	d804      	bhi.n	800aef2 <_strtol_l.constprop.0+0xbe>
 800aee8:	3c57      	subs	r4, #87	; 0x57
 800aeea:	e7dd      	b.n	800aea8 <_strtol_l.constprop.0+0x74>
 800aeec:	f04f 37ff 	mov.w	r7, #4294967295
 800aef0:	e7e6      	b.n	800aec0 <_strtol_l.constprop.0+0x8c>
 800aef2:	2f00      	cmp	r7, #0
 800aef4:	da07      	bge.n	800af06 <_strtol_l.constprop.0+0xd2>
 800aef6:	2322      	movs	r3, #34	; 0x22
 800aef8:	4670      	mov	r0, lr
 800aefa:	f8c8 3000 	str.w	r3, [r8]
 800aefe:	2a00      	cmp	r2, #0
 800af00:	d0a4      	beq.n	800ae4c <_strtol_l.constprop.0+0x18>
 800af02:	1e69      	subs	r1, r5, #1
 800af04:	e005      	b.n	800af12 <_strtol_l.constprop.0+0xde>
 800af06:	b106      	cbz	r6, 800af0a <_strtol_l.constprop.0+0xd6>
 800af08:	4240      	negs	r0, r0
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	d09e      	beq.n	800ae4c <_strtol_l.constprop.0+0x18>
 800af0e:	2f00      	cmp	r7, #0
 800af10:	d1f7      	bne.n	800af02 <_strtol_l.constprop.0+0xce>
 800af12:	6011      	str	r1, [r2, #0]
 800af14:	e79a      	b.n	800ae4c <_strtol_l.constprop.0+0x18>
 800af16:	2430      	movs	r4, #48	; 0x30
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1b5      	bne.n	800ae88 <_strtol_l.constprop.0+0x54>
 800af1c:	2308      	movs	r3, #8
 800af1e:	e7b3      	b.n	800ae88 <_strtol_l.constprop.0+0x54>
 800af20:	2c30      	cmp	r4, #48	; 0x30
 800af22:	d0a9      	beq.n	800ae78 <_strtol_l.constprop.0+0x44>
 800af24:	230a      	movs	r3, #10
 800af26:	e7af      	b.n	800ae88 <_strtol_l.constprop.0+0x54>
 800af28:	0801f7e1 	.word	0x0801f7e1

0800af2c <_strtol_r>:
 800af2c:	f7ff bf82 	b.w	800ae34 <_strtol_l.constprop.0>

0800af30 <strtol>:
 800af30:	4613      	mov	r3, r2
 800af32:	460a      	mov	r2, r1
 800af34:	4601      	mov	r1, r0
 800af36:	4802      	ldr	r0, [pc, #8]	; (800af40 <strtol+0x10>)
 800af38:	6800      	ldr	r0, [r0, #0]
 800af3a:	f7ff bf7b 	b.w	800ae34 <_strtol_l.constprop.0>
 800af3e:	bf00      	nop
 800af40:	2000000c 	.word	0x2000000c

0800af44 <quorem>:
 800af44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	6903      	ldr	r3, [r0, #16]
 800af4a:	690c      	ldr	r4, [r1, #16]
 800af4c:	4607      	mov	r7, r0
 800af4e:	42a3      	cmp	r3, r4
 800af50:	f2c0 8082 	blt.w	800b058 <quorem+0x114>
 800af54:	3c01      	subs	r4, #1
 800af56:	f100 0514 	add.w	r5, r0, #20
 800af5a:	f101 0814 	add.w	r8, r1, #20
 800af5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af6c:	3301      	adds	r3, #1
 800af6e:	429a      	cmp	r2, r3
 800af70:	fbb2 f6f3 	udiv	r6, r2, r3
 800af74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af7c:	d331      	bcc.n	800afe2 <quorem+0x9e>
 800af7e:	f04f 0e00 	mov.w	lr, #0
 800af82:	4640      	mov	r0, r8
 800af84:	46ac      	mov	ip, r5
 800af86:	46f2      	mov	sl, lr
 800af88:	f850 2b04 	ldr.w	r2, [r0], #4
 800af8c:	b293      	uxth	r3, r2
 800af8e:	fb06 e303 	mla	r3, r6, r3, lr
 800af92:	0c12      	lsrs	r2, r2, #16
 800af94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af98:	b29b      	uxth	r3, r3
 800af9a:	fb06 e202 	mla	r2, r6, r2, lr
 800af9e:	ebaa 0303 	sub.w	r3, sl, r3
 800afa2:	f8dc a000 	ldr.w	sl, [ip]
 800afa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afaa:	fa1f fa8a 	uxth.w	sl, sl
 800afae:	4453      	add	r3, sl
 800afb0:	f8dc a000 	ldr.w	sl, [ip]
 800afb4:	b292      	uxth	r2, r2
 800afb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc4:	4581      	cmp	r9, r0
 800afc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afca:	f84c 3b04 	str.w	r3, [ip], #4
 800afce:	d2db      	bcs.n	800af88 <quorem+0x44>
 800afd0:	f855 300b 	ldr.w	r3, [r5, fp]
 800afd4:	b92b      	cbnz	r3, 800afe2 <quorem+0x9e>
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	3b04      	subs	r3, #4
 800afda:	429d      	cmp	r5, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	d32f      	bcc.n	800b040 <quorem+0xfc>
 800afe0:	613c      	str	r4, [r7, #16]
 800afe2:	4638      	mov	r0, r7
 800afe4:	f001 fc92 	bl	800c90c <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	db25      	blt.n	800b038 <quorem+0xf4>
 800afec:	4628      	mov	r0, r5
 800afee:	f04f 0c00 	mov.w	ip, #0
 800aff2:	3601      	adds	r6, #1
 800aff4:	f858 1b04 	ldr.w	r1, [r8], #4
 800aff8:	f8d0 e000 	ldr.w	lr, [r0]
 800affc:	b28b      	uxth	r3, r1
 800affe:	ebac 0303 	sub.w	r3, ip, r3
 800b002:	fa1f f28e 	uxth.w	r2, lr
 800b006:	4413      	add	r3, r2
 800b008:	0c0a      	lsrs	r2, r1, #16
 800b00a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b00e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b012:	b29b      	uxth	r3, r3
 800b014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b018:	45c1      	cmp	r9, r8
 800b01a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b01e:	f840 3b04 	str.w	r3, [r0], #4
 800b022:	d2e7      	bcs.n	800aff4 <quorem+0xb0>
 800b024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b02c:	b922      	cbnz	r2, 800b038 <quorem+0xf4>
 800b02e:	3b04      	subs	r3, #4
 800b030:	429d      	cmp	r5, r3
 800b032:	461a      	mov	r2, r3
 800b034:	d30a      	bcc.n	800b04c <quorem+0x108>
 800b036:	613c      	str	r4, [r7, #16]
 800b038:	4630      	mov	r0, r6
 800b03a:	b003      	add	sp, #12
 800b03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b040:	6812      	ldr	r2, [r2, #0]
 800b042:	3b04      	subs	r3, #4
 800b044:	2a00      	cmp	r2, #0
 800b046:	d1cb      	bne.n	800afe0 <quorem+0x9c>
 800b048:	3c01      	subs	r4, #1
 800b04a:	e7c6      	b.n	800afda <quorem+0x96>
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	3b04      	subs	r3, #4
 800b050:	2a00      	cmp	r2, #0
 800b052:	d1f0      	bne.n	800b036 <quorem+0xf2>
 800b054:	3c01      	subs	r4, #1
 800b056:	e7eb      	b.n	800b030 <quorem+0xec>
 800b058:	2000      	movs	r0, #0
 800b05a:	e7ee      	b.n	800b03a <quorem+0xf6>
 800b05c:	0000      	movs	r0, r0
	...

0800b060 <_dtoa_r>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	4616      	mov	r6, r2
 800b066:	461f      	mov	r7, r3
 800b068:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b06a:	b099      	sub	sp, #100	; 0x64
 800b06c:	4605      	mov	r5, r0
 800b06e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b072:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b076:	b974      	cbnz	r4, 800b096 <_dtoa_r+0x36>
 800b078:	2010      	movs	r0, #16
 800b07a:	f001 f949 	bl	800c310 <malloc>
 800b07e:	4602      	mov	r2, r0
 800b080:	6268      	str	r0, [r5, #36]	; 0x24
 800b082:	b920      	cbnz	r0, 800b08e <_dtoa_r+0x2e>
 800b084:	21ea      	movs	r1, #234	; 0xea
 800b086:	4ba8      	ldr	r3, [pc, #672]	; (800b328 <_dtoa_r+0x2c8>)
 800b088:	48a8      	ldr	r0, [pc, #672]	; (800b32c <_dtoa_r+0x2cc>)
 800b08a:	f002 f8b3 	bl	800d1f4 <__assert_func>
 800b08e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b092:	6004      	str	r4, [r0, #0]
 800b094:	60c4      	str	r4, [r0, #12]
 800b096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b098:	6819      	ldr	r1, [r3, #0]
 800b09a:	b151      	cbz	r1, 800b0b2 <_dtoa_r+0x52>
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4093      	lsls	r3, r2
 800b0a2:	604a      	str	r2, [r1, #4]
 800b0a4:	608b      	str	r3, [r1, #8]
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f001 f9a8 	bl	800c3fc <_Bfree>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0b0:	601a      	str	r2, [r3, #0]
 800b0b2:	1e3b      	subs	r3, r7, #0
 800b0b4:	bfaf      	iteee	ge
 800b0b6:	2300      	movge	r3, #0
 800b0b8:	2201      	movlt	r2, #1
 800b0ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0be:	9305      	strlt	r3, [sp, #20]
 800b0c0:	bfa8      	it	ge
 800b0c2:	f8c8 3000 	strge.w	r3, [r8]
 800b0c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b0ca:	4b99      	ldr	r3, [pc, #612]	; (800b330 <_dtoa_r+0x2d0>)
 800b0cc:	bfb8      	it	lt
 800b0ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b0d2:	ea33 0309 	bics.w	r3, r3, r9
 800b0d6:	d119      	bne.n	800b10c <_dtoa_r+0xac>
 800b0d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0e4:	4333      	orrs	r3, r6
 800b0e6:	f000 857f 	beq.w	800bbe8 <_dtoa_r+0xb88>
 800b0ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0ec:	b953      	cbnz	r3, 800b104 <_dtoa_r+0xa4>
 800b0ee:	4b91      	ldr	r3, [pc, #580]	; (800b334 <_dtoa_r+0x2d4>)
 800b0f0:	e022      	b.n	800b138 <_dtoa_r+0xd8>
 800b0f2:	4b91      	ldr	r3, [pc, #580]	; (800b338 <_dtoa_r+0x2d8>)
 800b0f4:	9303      	str	r3, [sp, #12]
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	9803      	ldr	r0, [sp, #12]
 800b0fe:	b019      	add	sp, #100	; 0x64
 800b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b104:	4b8b      	ldr	r3, [pc, #556]	; (800b334 <_dtoa_r+0x2d4>)
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	3303      	adds	r3, #3
 800b10a:	e7f5      	b.n	800b0f8 <_dtoa_r+0x98>
 800b10c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b110:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	f7fb fe96 	bl	8006e4c <__aeabi_dcmpeq>
 800b120:	4680      	mov	r8, r0
 800b122:	b158      	cbz	r0, 800b13c <_dtoa_r+0xdc>
 800b124:	2301      	movs	r3, #1
 800b126:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b128:	6013      	str	r3, [r2, #0]
 800b12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8558 	beq.w	800bbe2 <_dtoa_r+0xb82>
 800b132:	4882      	ldr	r0, [pc, #520]	; (800b33c <_dtoa_r+0x2dc>)
 800b134:	6018      	str	r0, [r3, #0]
 800b136:	1e43      	subs	r3, r0, #1
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	e7df      	b.n	800b0fc <_dtoa_r+0x9c>
 800b13c:	ab16      	add	r3, sp, #88	; 0x58
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	ab17      	add	r3, sp, #92	; 0x5c
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	4628      	mov	r0, r5
 800b146:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b14a:	f001 fd01 	bl	800cb50 <__d2b>
 800b14e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b152:	4683      	mov	fp, r0
 800b154:	2c00      	cmp	r4, #0
 800b156:	d07f      	beq.n	800b258 <_dtoa_r+0x1f8>
 800b158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b166:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b16a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b16e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b172:	2200      	movs	r2, #0
 800b174:	4b72      	ldr	r3, [pc, #456]	; (800b340 <_dtoa_r+0x2e0>)
 800b176:	f7fb fa49 	bl	800660c <__aeabi_dsub>
 800b17a:	a365      	add	r3, pc, #404	; (adr r3, 800b310 <_dtoa_r+0x2b0>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7fb fbfc 	bl	800697c <__aeabi_dmul>
 800b184:	a364      	add	r3, pc, #400	; (adr r3, 800b318 <_dtoa_r+0x2b8>)
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f7fb fa41 	bl	8006610 <__adddf3>
 800b18e:	4606      	mov	r6, r0
 800b190:	4620      	mov	r0, r4
 800b192:	460f      	mov	r7, r1
 800b194:	f7fb fb88 	bl	80068a8 <__aeabi_i2d>
 800b198:	a361      	add	r3, pc, #388	; (adr r3, 800b320 <_dtoa_r+0x2c0>)
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	f7fb fbed 	bl	800697c <__aeabi_dmul>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7fb fa31 	bl	8006610 <__adddf3>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	f7fb fe93 	bl	8006edc <__aeabi_d2iz>
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	4630      	mov	r0, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7fb fe4e 	bl	8006e60 <__aeabi_dcmplt>
 800b1c4:	b148      	cbz	r0, 800b1da <_dtoa_r+0x17a>
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7fb fb6e 	bl	80068a8 <__aeabi_i2d>
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	f7fb fe3c 	bl	8006e4c <__aeabi_dcmpeq>
 800b1d4:	b908      	cbnz	r0, 800b1da <_dtoa_r+0x17a>
 800b1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1da:	f1ba 0f16 	cmp.w	sl, #22
 800b1de:	d858      	bhi.n	800b292 <_dtoa_r+0x232>
 800b1e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1e4:	4b57      	ldr	r3, [pc, #348]	; (800b344 <_dtoa_r+0x2e4>)
 800b1e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7fb fe37 	bl	8006e60 <__aeabi_dcmplt>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d04f      	beq.n	800b296 <_dtoa_r+0x236>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b200:	1b1c      	subs	r4, r3, r4
 800b202:	1e63      	subs	r3, r4, #1
 800b204:	9309      	str	r3, [sp, #36]	; 0x24
 800b206:	bf49      	itett	mi
 800b208:	f1c4 0301 	rsbmi	r3, r4, #1
 800b20c:	2300      	movpl	r3, #0
 800b20e:	9306      	strmi	r3, [sp, #24]
 800b210:	2300      	movmi	r3, #0
 800b212:	bf54      	ite	pl
 800b214:	9306      	strpl	r3, [sp, #24]
 800b216:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b218:	f1ba 0f00 	cmp.w	sl, #0
 800b21c:	db3d      	blt.n	800b29a <_dtoa_r+0x23a>
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b224:	4453      	add	r3, sl
 800b226:	9309      	str	r3, [sp, #36]	; 0x24
 800b228:	2300      	movs	r3, #0
 800b22a:	930a      	str	r3, [sp, #40]	; 0x28
 800b22c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b22e:	2b09      	cmp	r3, #9
 800b230:	f200 808c 	bhi.w	800b34c <_dtoa_r+0x2ec>
 800b234:	2b05      	cmp	r3, #5
 800b236:	bfc4      	itt	gt
 800b238:	3b04      	subgt	r3, #4
 800b23a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b23c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b23e:	bfc8      	it	gt
 800b240:	2400      	movgt	r4, #0
 800b242:	f1a3 0302 	sub.w	r3, r3, #2
 800b246:	bfd8      	it	le
 800b248:	2401      	movle	r4, #1
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	f200 808a 	bhi.w	800b364 <_dtoa_r+0x304>
 800b250:	e8df f003 	tbb	[pc, r3]
 800b254:	5b4d4f2d 	.word	0x5b4d4f2d
 800b258:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b25c:	441c      	add	r4, r3
 800b25e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b262:	2b20      	cmp	r3, #32
 800b264:	bfc3      	ittte	gt
 800b266:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b26a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b26e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b272:	f1c3 0320 	rsble	r3, r3, #32
 800b276:	bfc6      	itte	gt
 800b278:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b27c:	4318      	orrgt	r0, r3
 800b27e:	fa06 f003 	lslle.w	r0, r6, r3
 800b282:	f7fb fb01 	bl	8006888 <__aeabi_ui2d>
 800b286:	2301      	movs	r3, #1
 800b288:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b28c:	3c01      	subs	r4, #1
 800b28e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b290:	e76f      	b.n	800b172 <_dtoa_r+0x112>
 800b292:	2301      	movs	r3, #1
 800b294:	e7b2      	b.n	800b1fc <_dtoa_r+0x19c>
 800b296:	900f      	str	r0, [sp, #60]	; 0x3c
 800b298:	e7b1      	b.n	800b1fe <_dtoa_r+0x19e>
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	eba3 030a 	sub.w	r3, r3, sl
 800b2a0:	9306      	str	r3, [sp, #24]
 800b2a2:	f1ca 0300 	rsb	r3, sl, #0
 800b2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ac:	e7be      	b.n	800b22c <_dtoa_r+0x1cc>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dc58      	bgt.n	800b36a <_dtoa_r+0x30a>
 800b2b8:	f04f 0901 	mov.w	r9, #1
 800b2bc:	464b      	mov	r3, r9
 800b2be:	f8cd 9020 	str.w	r9, [sp, #32]
 800b2c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b2ca:	6042      	str	r2, [r0, #4]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	f102 0614 	add.w	r6, r2, #20
 800b2d2:	429e      	cmp	r6, r3
 800b2d4:	6841      	ldr	r1, [r0, #4]
 800b2d6:	d94e      	bls.n	800b376 <_dtoa_r+0x316>
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f001 f84f 	bl	800c37c <_Balloc>
 800b2de:	9003      	str	r0, [sp, #12]
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d14c      	bne.n	800b37e <_dtoa_r+0x31e>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2ea:	4b17      	ldr	r3, [pc, #92]	; (800b348 <_dtoa_r+0x2e8>)
 800b2ec:	e6cc      	b.n	800b088 <_dtoa_r+0x28>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e7de      	b.n	800b2b0 <_dtoa_r+0x250>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2f8:	eb0a 0903 	add.w	r9, sl, r3
 800b2fc:	f109 0301 	add.w	r3, r9, #1
 800b300:	2b01      	cmp	r3, #1
 800b302:	9308      	str	r3, [sp, #32]
 800b304:	bfb8      	it	lt
 800b306:	2301      	movlt	r3, #1
 800b308:	e7dd      	b.n	800b2c6 <_dtoa_r+0x266>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7f2      	b.n	800b2f4 <_dtoa_r+0x294>
 800b30e:	bf00      	nop
 800b310:	636f4361 	.word	0x636f4361
 800b314:	3fd287a7 	.word	0x3fd287a7
 800b318:	8b60c8b3 	.word	0x8b60c8b3
 800b31c:	3fc68a28 	.word	0x3fc68a28
 800b320:	509f79fb 	.word	0x509f79fb
 800b324:	3fd34413 	.word	0x3fd34413
 800b328:	0801f8ee 	.word	0x0801f8ee
 800b32c:	0801f905 	.word	0x0801f905
 800b330:	7ff00000 	.word	0x7ff00000
 800b334:	0801f8ea 	.word	0x0801f8ea
 800b338:	0801f8e1 	.word	0x0801f8e1
 800b33c:	0801f765 	.word	0x0801f765
 800b340:	3ff80000 	.word	0x3ff80000
 800b344:	0801fa70 	.word	0x0801fa70
 800b348:	0801f960 	.word	0x0801f960
 800b34c:	2401      	movs	r4, #1
 800b34e:	2300      	movs	r3, #0
 800b350:	940b      	str	r4, [sp, #44]	; 0x2c
 800b352:	9322      	str	r3, [sp, #136]	; 0x88
 800b354:	f04f 39ff 	mov.w	r9, #4294967295
 800b358:	2200      	movs	r2, #0
 800b35a:	2312      	movs	r3, #18
 800b35c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b360:	9223      	str	r2, [sp, #140]	; 0x8c
 800b362:	e7b0      	b.n	800b2c6 <_dtoa_r+0x266>
 800b364:	2301      	movs	r3, #1
 800b366:	930b      	str	r3, [sp, #44]	; 0x2c
 800b368:	e7f4      	b.n	800b354 <_dtoa_r+0x2f4>
 800b36a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b36e:	464b      	mov	r3, r9
 800b370:	f8cd 9020 	str.w	r9, [sp, #32]
 800b374:	e7a7      	b.n	800b2c6 <_dtoa_r+0x266>
 800b376:	3101      	adds	r1, #1
 800b378:	6041      	str	r1, [r0, #4]
 800b37a:	0052      	lsls	r2, r2, #1
 800b37c:	e7a7      	b.n	800b2ce <_dtoa_r+0x26e>
 800b37e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b380:	9a03      	ldr	r2, [sp, #12]
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	9b08      	ldr	r3, [sp, #32]
 800b386:	2b0e      	cmp	r3, #14
 800b388:	f200 80a8 	bhi.w	800b4dc <_dtoa_r+0x47c>
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	f000 80a5 	beq.w	800b4dc <_dtoa_r+0x47c>
 800b392:	f1ba 0f00 	cmp.w	sl, #0
 800b396:	dd34      	ble.n	800b402 <_dtoa_r+0x3a2>
 800b398:	4a9a      	ldr	r2, [pc, #616]	; (800b604 <_dtoa_r+0x5a4>)
 800b39a:	f00a 030f 	and.w	r3, sl, #15
 800b39e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b3a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b3ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b3b2:	d016      	beq.n	800b3e2 <_dtoa_r+0x382>
 800b3b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3b8:	4b93      	ldr	r3, [pc, #588]	; (800b608 <_dtoa_r+0x5a8>)
 800b3ba:	2703      	movs	r7, #3
 800b3bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3c0:	f7fb fc06 	bl	8006bd0 <__aeabi_ddiv>
 800b3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3c8:	f004 040f 	and.w	r4, r4, #15
 800b3cc:	4e8e      	ldr	r6, [pc, #568]	; (800b608 <_dtoa_r+0x5a8>)
 800b3ce:	b954      	cbnz	r4, 800b3e6 <_dtoa_r+0x386>
 800b3d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d8:	f7fb fbfa 	bl	8006bd0 <__aeabi_ddiv>
 800b3dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e0:	e029      	b.n	800b436 <_dtoa_r+0x3d6>
 800b3e2:	2702      	movs	r7, #2
 800b3e4:	e7f2      	b.n	800b3cc <_dtoa_r+0x36c>
 800b3e6:	07e1      	lsls	r1, r4, #31
 800b3e8:	d508      	bpl.n	800b3fc <_dtoa_r+0x39c>
 800b3ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3f2:	f7fb fac3 	bl	800697c <__aeabi_dmul>
 800b3f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3fa:	3701      	adds	r7, #1
 800b3fc:	1064      	asrs	r4, r4, #1
 800b3fe:	3608      	adds	r6, #8
 800b400:	e7e5      	b.n	800b3ce <_dtoa_r+0x36e>
 800b402:	f000 80a5 	beq.w	800b550 <_dtoa_r+0x4f0>
 800b406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b40a:	f1ca 0400 	rsb	r4, sl, #0
 800b40e:	4b7d      	ldr	r3, [pc, #500]	; (800b604 <_dtoa_r+0x5a4>)
 800b410:	f004 020f 	and.w	r2, r4, #15
 800b414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7fb faae 	bl	800697c <__aeabi_dmul>
 800b420:	2702      	movs	r7, #2
 800b422:	2300      	movs	r3, #0
 800b424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b428:	4e77      	ldr	r6, [pc, #476]	; (800b608 <_dtoa_r+0x5a8>)
 800b42a:	1124      	asrs	r4, r4, #4
 800b42c:	2c00      	cmp	r4, #0
 800b42e:	f040 8084 	bne.w	800b53a <_dtoa_r+0x4da>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1d2      	bne.n	800b3dc <_dtoa_r+0x37c>
 800b436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 808b 	beq.w	800b554 <_dtoa_r+0x4f4>
 800b43e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b442:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b446:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b44a:	2200      	movs	r2, #0
 800b44c:	4b6f      	ldr	r3, [pc, #444]	; (800b60c <_dtoa_r+0x5ac>)
 800b44e:	f7fb fd07 	bl	8006e60 <__aeabi_dcmplt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d07e      	beq.n	800b554 <_dtoa_r+0x4f4>
 800b456:	9b08      	ldr	r3, [sp, #32]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d07b      	beq.n	800b554 <_dtoa_r+0x4f4>
 800b45c:	f1b9 0f00 	cmp.w	r9, #0
 800b460:	dd38      	ble.n	800b4d4 <_dtoa_r+0x474>
 800b462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b466:	2200      	movs	r2, #0
 800b468:	4b69      	ldr	r3, [pc, #420]	; (800b610 <_dtoa_r+0x5b0>)
 800b46a:	f7fb fa87 	bl	800697c <__aeabi_dmul>
 800b46e:	464c      	mov	r4, r9
 800b470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b474:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b478:	3701      	adds	r7, #1
 800b47a:	4638      	mov	r0, r7
 800b47c:	f7fb fa14 	bl	80068a8 <__aeabi_i2d>
 800b480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b484:	f7fb fa7a 	bl	800697c <__aeabi_dmul>
 800b488:	2200      	movs	r2, #0
 800b48a:	4b62      	ldr	r3, [pc, #392]	; (800b614 <_dtoa_r+0x5b4>)
 800b48c:	f7fb f8c0 	bl	8006610 <__adddf3>
 800b490:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b494:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b498:	9611      	str	r6, [sp, #68]	; 0x44
 800b49a:	2c00      	cmp	r4, #0
 800b49c:	d15d      	bne.n	800b55a <_dtoa_r+0x4fa>
 800b49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4b5c      	ldr	r3, [pc, #368]	; (800b618 <_dtoa_r+0x5b8>)
 800b4a6:	f7fb f8b1 	bl	800660c <__aeabi_dsub>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4b2:	4633      	mov	r3, r6
 800b4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4b6:	f7fb fcf1 	bl	8006e9c <__aeabi_dcmpgt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f040 829c 	bne.w	800b9f8 <_dtoa_r+0x998>
 800b4c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b4ca:	f7fb fcc9 	bl	8006e60 <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f040 8290 	bne.w	800b9f4 <_dtoa_r+0x994>
 800b4d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b4d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b4dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f2c0 8152 	blt.w	800b788 <_dtoa_r+0x728>
 800b4e4:	f1ba 0f0e 	cmp.w	sl, #14
 800b4e8:	f300 814e 	bgt.w	800b788 <_dtoa_r+0x728>
 800b4ec:	4b45      	ldr	r3, [pc, #276]	; (800b604 <_dtoa_r+0x5a4>)
 800b4ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b4fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f280 80db 	bge.w	800b6b8 <_dtoa_r+0x658>
 800b502:	9b08      	ldr	r3, [sp, #32]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f300 80d7 	bgt.w	800b6b8 <_dtoa_r+0x658>
 800b50a:	f040 8272 	bne.w	800b9f2 <_dtoa_r+0x992>
 800b50e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b512:	2200      	movs	r2, #0
 800b514:	4b40      	ldr	r3, [pc, #256]	; (800b618 <_dtoa_r+0x5b8>)
 800b516:	f7fb fa31 	bl	800697c <__aeabi_dmul>
 800b51a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b51e:	f7fb fcb3 	bl	8006e88 <__aeabi_dcmpge>
 800b522:	9c08      	ldr	r4, [sp, #32]
 800b524:	4626      	mov	r6, r4
 800b526:	2800      	cmp	r0, #0
 800b528:	f040 8248 	bne.w	800b9bc <_dtoa_r+0x95c>
 800b52c:	2331      	movs	r3, #49	; 0x31
 800b52e:	9f03      	ldr	r7, [sp, #12]
 800b530:	f10a 0a01 	add.w	sl, sl, #1
 800b534:	f807 3b01 	strb.w	r3, [r7], #1
 800b538:	e244      	b.n	800b9c4 <_dtoa_r+0x964>
 800b53a:	07e2      	lsls	r2, r4, #31
 800b53c:	d505      	bpl.n	800b54a <_dtoa_r+0x4ea>
 800b53e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b542:	f7fb fa1b 	bl	800697c <__aeabi_dmul>
 800b546:	2301      	movs	r3, #1
 800b548:	3701      	adds	r7, #1
 800b54a:	1064      	asrs	r4, r4, #1
 800b54c:	3608      	adds	r6, #8
 800b54e:	e76d      	b.n	800b42c <_dtoa_r+0x3cc>
 800b550:	2702      	movs	r7, #2
 800b552:	e770      	b.n	800b436 <_dtoa_r+0x3d6>
 800b554:	46d0      	mov	r8, sl
 800b556:	9c08      	ldr	r4, [sp, #32]
 800b558:	e78f      	b.n	800b47a <_dtoa_r+0x41a>
 800b55a:	9903      	ldr	r1, [sp, #12]
 800b55c:	4b29      	ldr	r3, [pc, #164]	; (800b604 <_dtoa_r+0x5a4>)
 800b55e:	4421      	add	r1, r4
 800b560:	9112      	str	r1, [sp, #72]	; 0x48
 800b562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b564:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b568:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b56c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b570:	2900      	cmp	r1, #0
 800b572:	d055      	beq.n	800b620 <_dtoa_r+0x5c0>
 800b574:	2000      	movs	r0, #0
 800b576:	4929      	ldr	r1, [pc, #164]	; (800b61c <_dtoa_r+0x5bc>)
 800b578:	f7fb fb2a 	bl	8006bd0 <__aeabi_ddiv>
 800b57c:	463b      	mov	r3, r7
 800b57e:	4632      	mov	r2, r6
 800b580:	f7fb f844 	bl	800660c <__aeabi_dsub>
 800b584:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b588:	9f03      	ldr	r7, [sp, #12]
 800b58a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b58e:	f7fb fca5 	bl	8006edc <__aeabi_d2iz>
 800b592:	4604      	mov	r4, r0
 800b594:	f7fb f988 	bl	80068a8 <__aeabi_i2d>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5a0:	f7fb f834 	bl	800660c <__aeabi_dsub>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	3430      	adds	r4, #48	; 0x30
 800b5aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5b2:	f807 4b01 	strb.w	r4, [r7], #1
 800b5b6:	f7fb fc53 	bl	8006e60 <__aeabi_dcmplt>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d174      	bne.n	800b6a8 <_dtoa_r+0x648>
 800b5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	4911      	ldr	r1, [pc, #68]	; (800b60c <_dtoa_r+0x5ac>)
 800b5c6:	f7fb f821 	bl	800660c <__aeabi_dsub>
 800b5ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5ce:	f7fb fc47 	bl	8006e60 <__aeabi_dcmplt>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	f040 80b7 	bne.w	800b746 <_dtoa_r+0x6e6>
 800b5d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5da:	429f      	cmp	r7, r3
 800b5dc:	f43f af7a 	beq.w	800b4d4 <_dtoa_r+0x474>
 800b5e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <_dtoa_r+0x5b0>)
 800b5e8:	f7fb f9c8 	bl	800697c <__aeabi_dmul>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <_dtoa_r+0x5b0>)
 800b5f8:	f7fb f9c0 	bl	800697c <__aeabi_dmul>
 800b5fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b600:	e7c3      	b.n	800b58a <_dtoa_r+0x52a>
 800b602:	bf00      	nop
 800b604:	0801fa70 	.word	0x0801fa70
 800b608:	0801fa48 	.word	0x0801fa48
 800b60c:	3ff00000 	.word	0x3ff00000
 800b610:	40240000 	.word	0x40240000
 800b614:	401c0000 	.word	0x401c0000
 800b618:	40140000 	.word	0x40140000
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7fb f9aa 	bl	800697c <__aeabi_dmul>
 800b628:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b62a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b62e:	9c03      	ldr	r4, [sp, #12]
 800b630:	9314      	str	r3, [sp, #80]	; 0x50
 800b632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b636:	f7fb fc51 	bl	8006edc <__aeabi_d2iz>
 800b63a:	9015      	str	r0, [sp, #84]	; 0x54
 800b63c:	f7fb f934 	bl	80068a8 <__aeabi_i2d>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b648:	f7fa ffe0 	bl	800660c <__aeabi_dsub>
 800b64c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b64e:	4606      	mov	r6, r0
 800b650:	3330      	adds	r3, #48	; 0x30
 800b652:	f804 3b01 	strb.w	r3, [r4], #1
 800b656:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b658:	460f      	mov	r7, r1
 800b65a:	429c      	cmp	r4, r3
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	d124      	bne.n	800b6ac <_dtoa_r+0x64c>
 800b662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b666:	4bb0      	ldr	r3, [pc, #704]	; (800b928 <_dtoa_r+0x8c8>)
 800b668:	f7fa ffd2 	bl	8006610 <__adddf3>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7fb fc12 	bl	8006e9c <__aeabi_dcmpgt>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d163      	bne.n	800b744 <_dtoa_r+0x6e4>
 800b67c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b680:	2000      	movs	r0, #0
 800b682:	49a9      	ldr	r1, [pc, #676]	; (800b928 <_dtoa_r+0x8c8>)
 800b684:	f7fa ffc2 	bl	800660c <__aeabi_dsub>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f7fb fbe6 	bl	8006e60 <__aeabi_dcmplt>
 800b694:	2800      	cmp	r0, #0
 800b696:	f43f af1d 	beq.w	800b4d4 <_dtoa_r+0x474>
 800b69a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b69c:	1e7b      	subs	r3, r7, #1
 800b69e:	9314      	str	r3, [sp, #80]	; 0x50
 800b6a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b6a4:	2b30      	cmp	r3, #48	; 0x30
 800b6a6:	d0f8      	beq.n	800b69a <_dtoa_r+0x63a>
 800b6a8:	46c2      	mov	sl, r8
 800b6aa:	e03b      	b.n	800b724 <_dtoa_r+0x6c4>
 800b6ac:	4b9f      	ldr	r3, [pc, #636]	; (800b92c <_dtoa_r+0x8cc>)
 800b6ae:	f7fb f965 	bl	800697c <__aeabi_dmul>
 800b6b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b6:	e7bc      	b.n	800b632 <_dtoa_r+0x5d2>
 800b6b8:	9f03      	ldr	r7, [sp, #12]
 800b6ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b6be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	f7fb fa83 	bl	8006bd0 <__aeabi_ddiv>
 800b6ca:	f7fb fc07 	bl	8006edc <__aeabi_d2iz>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	f7fb f8ea 	bl	80068a8 <__aeabi_i2d>
 800b6d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6d8:	f7fb f950 	bl	800697c <__aeabi_dmul>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7fa ff92 	bl	800660c <__aeabi_dsub>
 800b6e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b6ec:	f807 6b01 	strb.w	r6, [r7], #1
 800b6f0:	9e03      	ldr	r6, [sp, #12]
 800b6f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b6f6:	1bbe      	subs	r6, r7, r6
 800b6f8:	45b4      	cmp	ip, r6
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	d136      	bne.n	800b76e <_dtoa_r+0x70e>
 800b700:	f7fa ff86 	bl	8006610 <__adddf3>
 800b704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b708:	4680      	mov	r8, r0
 800b70a:	4689      	mov	r9, r1
 800b70c:	f7fb fbc6 	bl	8006e9c <__aeabi_dcmpgt>
 800b710:	bb58      	cbnz	r0, 800b76a <_dtoa_r+0x70a>
 800b712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b716:	4640      	mov	r0, r8
 800b718:	4649      	mov	r1, r9
 800b71a:	f7fb fb97 	bl	8006e4c <__aeabi_dcmpeq>
 800b71e:	b108      	cbz	r0, 800b724 <_dtoa_r+0x6c4>
 800b720:	07e1      	lsls	r1, r4, #31
 800b722:	d422      	bmi.n	800b76a <_dtoa_r+0x70a>
 800b724:	4628      	mov	r0, r5
 800b726:	4659      	mov	r1, fp
 800b728:	f000 fe68 	bl	800c3fc <_Bfree>
 800b72c:	2300      	movs	r3, #0
 800b72e:	703b      	strb	r3, [r7, #0]
 800b730:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b732:	f10a 0001 	add.w	r0, sl, #1
 800b736:	6018      	str	r0, [r3, #0]
 800b738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f43f acde 	beq.w	800b0fc <_dtoa_r+0x9c>
 800b740:	601f      	str	r7, [r3, #0]
 800b742:	e4db      	b.n	800b0fc <_dtoa_r+0x9c>
 800b744:	4627      	mov	r7, r4
 800b746:	463b      	mov	r3, r7
 800b748:	461f      	mov	r7, r3
 800b74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b74e:	2a39      	cmp	r2, #57	; 0x39
 800b750:	d107      	bne.n	800b762 <_dtoa_r+0x702>
 800b752:	9a03      	ldr	r2, [sp, #12]
 800b754:	429a      	cmp	r2, r3
 800b756:	d1f7      	bne.n	800b748 <_dtoa_r+0x6e8>
 800b758:	2230      	movs	r2, #48	; 0x30
 800b75a:	9903      	ldr	r1, [sp, #12]
 800b75c:	f108 0801 	add.w	r8, r8, #1
 800b760:	700a      	strb	r2, [r1, #0]
 800b762:	781a      	ldrb	r2, [r3, #0]
 800b764:	3201      	adds	r2, #1
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	e79e      	b.n	800b6a8 <_dtoa_r+0x648>
 800b76a:	46d0      	mov	r8, sl
 800b76c:	e7eb      	b.n	800b746 <_dtoa_r+0x6e6>
 800b76e:	2200      	movs	r2, #0
 800b770:	4b6e      	ldr	r3, [pc, #440]	; (800b92c <_dtoa_r+0x8cc>)
 800b772:	f7fb f903 	bl	800697c <__aeabi_dmul>
 800b776:	2200      	movs	r2, #0
 800b778:	2300      	movs	r3, #0
 800b77a:	4680      	mov	r8, r0
 800b77c:	4689      	mov	r9, r1
 800b77e:	f7fb fb65 	bl	8006e4c <__aeabi_dcmpeq>
 800b782:	2800      	cmp	r0, #0
 800b784:	d09b      	beq.n	800b6be <_dtoa_r+0x65e>
 800b786:	e7cd      	b.n	800b724 <_dtoa_r+0x6c4>
 800b788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b78a:	2a00      	cmp	r2, #0
 800b78c:	f000 80d0 	beq.w	800b930 <_dtoa_r+0x8d0>
 800b790:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b792:	2a01      	cmp	r2, #1
 800b794:	f300 80ae 	bgt.w	800b8f4 <_dtoa_r+0x894>
 800b798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	f000 80a6 	beq.w	800b8ec <_dtoa_r+0x88c>
 800b7a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7a6:	9f06      	ldr	r7, [sp, #24]
 800b7a8:	9a06      	ldr	r2, [sp, #24]
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	441a      	add	r2, r3
 800b7ae:	9206      	str	r2, [sp, #24]
 800b7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	441a      	add	r2, r3
 800b7b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7b8:	f000 ff20 	bl	800c5fc <__i2b>
 800b7bc:	4606      	mov	r6, r0
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	dd0c      	ble.n	800b7dc <_dtoa_r+0x77c>
 800b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd09      	ble.n	800b7dc <_dtoa_r+0x77c>
 800b7c8:	42bb      	cmp	r3, r7
 800b7ca:	bfa8      	it	ge
 800b7cc:	463b      	movge	r3, r7
 800b7ce:	9a06      	ldr	r2, [sp, #24]
 800b7d0:	1aff      	subs	r7, r7, r3
 800b7d2:	1ad2      	subs	r2, r2, r3
 800b7d4:	9206      	str	r2, [sp, #24]
 800b7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	9309      	str	r3, [sp, #36]	; 0x24
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	b1f3      	cbz	r3, 800b81e <_dtoa_r+0x7be>
 800b7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 80a8 	beq.w	800b938 <_dtoa_r+0x8d8>
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	dd10      	ble.n	800b80e <_dtoa_r+0x7ae>
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 ffc1 	bl	800c778 <__pow5mult>
 800b7f6:	465a      	mov	r2, fp
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	f000 ff13 	bl	800c628 <__multiply>
 800b802:	4680      	mov	r8, r0
 800b804:	4659      	mov	r1, fp
 800b806:	4628      	mov	r0, r5
 800b808:	f000 fdf8 	bl	800c3fc <_Bfree>
 800b80c:	46c3      	mov	fp, r8
 800b80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b810:	1b1a      	subs	r2, r3, r4
 800b812:	d004      	beq.n	800b81e <_dtoa_r+0x7be>
 800b814:	4659      	mov	r1, fp
 800b816:	4628      	mov	r0, r5
 800b818:	f000 ffae 	bl	800c778 <__pow5mult>
 800b81c:	4683      	mov	fp, r0
 800b81e:	2101      	movs	r1, #1
 800b820:	4628      	mov	r0, r5
 800b822:	f000 feeb 	bl	800c5fc <__i2b>
 800b826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b828:	4604      	mov	r4, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f340 8086 	ble.w	800b93c <_dtoa_r+0x8dc>
 800b830:	461a      	mov	r2, r3
 800b832:	4601      	mov	r1, r0
 800b834:	4628      	mov	r0, r5
 800b836:	f000 ff9f 	bl	800c778 <__pow5mult>
 800b83a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b83c:	4604      	mov	r4, r0
 800b83e:	2b01      	cmp	r3, #1
 800b840:	dd7f      	ble.n	800b942 <_dtoa_r+0x8e2>
 800b842:	f04f 0800 	mov.w	r8, #0
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b84c:	6918      	ldr	r0, [r3, #16]
 800b84e:	f000 fe87 	bl	800c560 <__hi0bits>
 800b852:	f1c0 0020 	rsb	r0, r0, #32
 800b856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b858:	4418      	add	r0, r3
 800b85a:	f010 001f 	ands.w	r0, r0, #31
 800b85e:	f000 8092 	beq.w	800b986 <_dtoa_r+0x926>
 800b862:	f1c0 0320 	rsb	r3, r0, #32
 800b866:	2b04      	cmp	r3, #4
 800b868:	f340 808a 	ble.w	800b980 <_dtoa_r+0x920>
 800b86c:	f1c0 001c 	rsb	r0, r0, #28
 800b870:	9b06      	ldr	r3, [sp, #24]
 800b872:	4407      	add	r7, r0
 800b874:	4403      	add	r3, r0
 800b876:	9306      	str	r3, [sp, #24]
 800b878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87a:	4403      	add	r3, r0
 800b87c:	9309      	str	r3, [sp, #36]	; 0x24
 800b87e:	9b06      	ldr	r3, [sp, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dd05      	ble.n	800b890 <_dtoa_r+0x830>
 800b884:	4659      	mov	r1, fp
 800b886:	461a      	mov	r2, r3
 800b888:	4628      	mov	r0, r5
 800b88a:	f000 ffcf 	bl	800c82c <__lshift>
 800b88e:	4683      	mov	fp, r0
 800b890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	dd05      	ble.n	800b8a2 <_dtoa_r+0x842>
 800b896:	4621      	mov	r1, r4
 800b898:	461a      	mov	r2, r3
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 ffc6 	bl	800c82c <__lshift>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d070      	beq.n	800b98a <_dtoa_r+0x92a>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4658      	mov	r0, fp
 800b8ac:	f001 f82e 	bl	800c90c <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	da6a      	bge.n	800b98a <_dtoa_r+0x92a>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4659      	mov	r1, fp
 800b8b8:	220a      	movs	r2, #10
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f000 fdc0 	bl	800c440 <__multadd>
 800b8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c2:	4683      	mov	fp, r0
 800b8c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8194 	beq.w	800bbf6 <_dtoa_r+0xb96>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 fdb3 	bl	800c440 <__multadd>
 800b8da:	f1b9 0f00 	cmp.w	r9, #0
 800b8de:	4606      	mov	r6, r0
 800b8e0:	f300 8093 	bgt.w	800ba0a <_dtoa_r+0x9aa>
 800b8e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	dc57      	bgt.n	800b99a <_dtoa_r+0x93a>
 800b8ea:	e08e      	b.n	800ba0a <_dtoa_r+0x9aa>
 800b8ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b8ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8f2:	e757      	b.n	800b7a4 <_dtoa_r+0x744>
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	1e5c      	subs	r4, r3, #1
 800b8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	bfb7      	itett	lt
 800b8fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b900:	1b1c      	subge	r4, r3, r4
 800b902:	1ae2      	sublt	r2, r4, r3
 800b904:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b906:	bfbe      	ittt	lt
 800b908:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b90a:	189b      	addlt	r3, r3, r2
 800b90c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b90e:	9b08      	ldr	r3, [sp, #32]
 800b910:	bfb8      	it	lt
 800b912:	2400      	movlt	r4, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	bfbb      	ittet	lt
 800b918:	9b06      	ldrlt	r3, [sp, #24]
 800b91a:	9a08      	ldrlt	r2, [sp, #32]
 800b91c:	9f06      	ldrge	r7, [sp, #24]
 800b91e:	1a9f      	sublt	r7, r3, r2
 800b920:	bfac      	ite	ge
 800b922:	9b08      	ldrge	r3, [sp, #32]
 800b924:	2300      	movlt	r3, #0
 800b926:	e73f      	b.n	800b7a8 <_dtoa_r+0x748>
 800b928:	3fe00000 	.word	0x3fe00000
 800b92c:	40240000 	.word	0x40240000
 800b930:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b932:	9f06      	ldr	r7, [sp, #24]
 800b934:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b936:	e742      	b.n	800b7be <_dtoa_r+0x75e>
 800b938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b93a:	e76b      	b.n	800b814 <_dtoa_r+0x7b4>
 800b93c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b93e:	2b01      	cmp	r3, #1
 800b940:	dc19      	bgt.n	800b976 <_dtoa_r+0x916>
 800b942:	9b04      	ldr	r3, [sp, #16]
 800b944:	b9bb      	cbnz	r3, 800b976 <_dtoa_r+0x916>
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b94c:	b99b      	cbnz	r3, 800b976 <_dtoa_r+0x916>
 800b94e:	9b05      	ldr	r3, [sp, #20]
 800b950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b954:	0d1b      	lsrs	r3, r3, #20
 800b956:	051b      	lsls	r3, r3, #20
 800b958:	b183      	cbz	r3, 800b97c <_dtoa_r+0x91c>
 800b95a:	f04f 0801 	mov.w	r8, #1
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	3301      	adds	r3, #1
 800b962:	9306      	str	r3, [sp, #24]
 800b964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b966:	3301      	adds	r3, #1
 800b968:	9309      	str	r3, [sp, #36]	; 0x24
 800b96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f47f af6a 	bne.w	800b846 <_dtoa_r+0x7e6>
 800b972:	2001      	movs	r0, #1
 800b974:	e76f      	b.n	800b856 <_dtoa_r+0x7f6>
 800b976:	f04f 0800 	mov.w	r8, #0
 800b97a:	e7f6      	b.n	800b96a <_dtoa_r+0x90a>
 800b97c:	4698      	mov	r8, r3
 800b97e:	e7f4      	b.n	800b96a <_dtoa_r+0x90a>
 800b980:	f43f af7d 	beq.w	800b87e <_dtoa_r+0x81e>
 800b984:	4618      	mov	r0, r3
 800b986:	301c      	adds	r0, #28
 800b988:	e772      	b.n	800b870 <_dtoa_r+0x810>
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dc36      	bgt.n	800b9fe <_dtoa_r+0x99e>
 800b990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b992:	2b02      	cmp	r3, #2
 800b994:	dd33      	ble.n	800b9fe <_dtoa_r+0x99e>
 800b996:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b99a:	f1b9 0f00 	cmp.w	r9, #0
 800b99e:	d10d      	bne.n	800b9bc <_dtoa_r+0x95c>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	2205      	movs	r2, #5
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f000 fd4a 	bl	800c440 <__multadd>
 800b9ac:	4601      	mov	r1, r0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4658      	mov	r0, fp
 800b9b2:	f000 ffab 	bl	800c90c <__mcmp>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f73f adb8 	bgt.w	800b52c <_dtoa_r+0x4cc>
 800b9bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9be:	9f03      	ldr	r7, [sp, #12]
 800b9c0:	ea6f 0a03 	mvn.w	sl, r3
 800b9c4:	f04f 0800 	mov.w	r8, #0
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f000 fd16 	bl	800c3fc <_Bfree>
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	f43f aea7 	beq.w	800b724 <_dtoa_r+0x6c4>
 800b9d6:	f1b8 0f00 	cmp.w	r8, #0
 800b9da:	d005      	beq.n	800b9e8 <_dtoa_r+0x988>
 800b9dc:	45b0      	cmp	r8, r6
 800b9de:	d003      	beq.n	800b9e8 <_dtoa_r+0x988>
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 fd0a 	bl	800c3fc <_Bfree>
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 fd06 	bl	800c3fc <_Bfree>
 800b9f0:	e698      	b.n	800b724 <_dtoa_r+0x6c4>
 800b9f2:	2400      	movs	r4, #0
 800b9f4:	4626      	mov	r6, r4
 800b9f6:	e7e1      	b.n	800b9bc <_dtoa_r+0x95c>
 800b9f8:	46c2      	mov	sl, r8
 800b9fa:	4626      	mov	r6, r4
 800b9fc:	e596      	b.n	800b52c <_dtoa_r+0x4cc>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 80fd 	beq.w	800bc04 <_dtoa_r+0xba4>
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	dd05      	ble.n	800ba1a <_dtoa_r+0x9ba>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	463a      	mov	r2, r7
 800ba12:	4628      	mov	r0, r5
 800ba14:	f000 ff0a 	bl	800c82c <__lshift>
 800ba18:	4606      	mov	r6, r0
 800ba1a:	f1b8 0f00 	cmp.w	r8, #0
 800ba1e:	d05c      	beq.n	800bada <_dtoa_r+0xa7a>
 800ba20:	4628      	mov	r0, r5
 800ba22:	6871      	ldr	r1, [r6, #4]
 800ba24:	f000 fcaa 	bl	800c37c <_Balloc>
 800ba28:	4607      	mov	r7, r0
 800ba2a:	b928      	cbnz	r0, 800ba38 <_dtoa_r+0x9d8>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba32:	4b7f      	ldr	r3, [pc, #508]	; (800bc30 <_dtoa_r+0xbd0>)
 800ba34:	f7ff bb28 	b.w	800b088 <_dtoa_r+0x28>
 800ba38:	6932      	ldr	r2, [r6, #16]
 800ba3a:	f106 010c 	add.w	r1, r6, #12
 800ba3e:	3202      	adds	r2, #2
 800ba40:	0092      	lsls	r2, r2, #2
 800ba42:	300c      	adds	r0, #12
 800ba44:	f000 fc8c 	bl	800c360 <memcpy>
 800ba48:	2201      	movs	r2, #1
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 feed 	bl	800c82c <__lshift>
 800ba52:	46b0      	mov	r8, r6
 800ba54:	4606      	mov	r6, r0
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	9308      	str	r3, [sp, #32]
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	444b      	add	r3, r9
 800ba60:	930a      	str	r3, [sp, #40]	; 0x28
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	4658      	mov	r0, fp
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	f7ff fa66 	bl	800af44 <quorem>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	3330      	adds	r3, #48	; 0x30
 800ba7e:	9006      	str	r0, [sp, #24]
 800ba80:	4658      	mov	r0, fp
 800ba82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba84:	f000 ff42 	bl	800c90c <__mcmp>
 800ba88:	4632      	mov	r2, r6
 800ba8a:	4681      	mov	r9, r0
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f000 ff58 	bl	800c944 <__mdiff>
 800ba94:	68c2      	ldr	r2, [r0, #12]
 800ba96:	4607      	mov	r7, r0
 800ba98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9a:	bb02      	cbnz	r2, 800bade <_dtoa_r+0xa7e>
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	4658      	mov	r0, fp
 800baa0:	f000 ff34 	bl	800c90c <__mcmp>
 800baa4:	4602      	mov	r2, r0
 800baa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa8:	4639      	mov	r1, r7
 800baaa:	4628      	mov	r0, r5
 800baac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bab0:	f000 fca4 	bl	800c3fc <_Bfree>
 800bab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab8:	9f08      	ldr	r7, [sp, #32]
 800baba:	ea43 0102 	orr.w	r1, r3, r2
 800babe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac0:	430b      	orrs	r3, r1
 800bac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bac4:	d10d      	bne.n	800bae2 <_dtoa_r+0xa82>
 800bac6:	2b39      	cmp	r3, #57	; 0x39
 800bac8:	d029      	beq.n	800bb1e <_dtoa_r+0xabe>
 800baca:	f1b9 0f00 	cmp.w	r9, #0
 800bace:	dd01      	ble.n	800bad4 <_dtoa_r+0xa74>
 800bad0:	9b06      	ldr	r3, [sp, #24]
 800bad2:	3331      	adds	r3, #49	; 0x31
 800bad4:	9a04      	ldr	r2, [sp, #16]
 800bad6:	7013      	strb	r3, [r2, #0]
 800bad8:	e776      	b.n	800b9c8 <_dtoa_r+0x968>
 800bada:	4630      	mov	r0, r6
 800badc:	e7b9      	b.n	800ba52 <_dtoa_r+0x9f2>
 800bade:	2201      	movs	r2, #1
 800bae0:	e7e2      	b.n	800baa8 <_dtoa_r+0xa48>
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	db06      	blt.n	800baf6 <_dtoa_r+0xa96>
 800bae8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800baea:	ea41 0909 	orr.w	r9, r1, r9
 800baee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baf0:	ea59 0101 	orrs.w	r1, r9, r1
 800baf4:	d120      	bne.n	800bb38 <_dtoa_r+0xad8>
 800baf6:	2a00      	cmp	r2, #0
 800baf8:	ddec      	ble.n	800bad4 <_dtoa_r+0xa74>
 800bafa:	4659      	mov	r1, fp
 800bafc:	2201      	movs	r2, #1
 800bafe:	4628      	mov	r0, r5
 800bb00:	9308      	str	r3, [sp, #32]
 800bb02:	f000 fe93 	bl	800c82c <__lshift>
 800bb06:	4621      	mov	r1, r4
 800bb08:	4683      	mov	fp, r0
 800bb0a:	f000 feff 	bl	800c90c <__mcmp>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	9b08      	ldr	r3, [sp, #32]
 800bb12:	dc02      	bgt.n	800bb1a <_dtoa_r+0xaba>
 800bb14:	d1de      	bne.n	800bad4 <_dtoa_r+0xa74>
 800bb16:	07da      	lsls	r2, r3, #31
 800bb18:	d5dc      	bpl.n	800bad4 <_dtoa_r+0xa74>
 800bb1a:	2b39      	cmp	r3, #57	; 0x39
 800bb1c:	d1d8      	bne.n	800bad0 <_dtoa_r+0xa70>
 800bb1e:	2339      	movs	r3, #57	; 0x39
 800bb20:	9a04      	ldr	r2, [sp, #16]
 800bb22:	7013      	strb	r3, [r2, #0]
 800bb24:	463b      	mov	r3, r7
 800bb26:	461f      	mov	r7, r3
 800bb28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	2a39      	cmp	r2, #57	; 0x39
 800bb30:	d050      	beq.n	800bbd4 <_dtoa_r+0xb74>
 800bb32:	3201      	adds	r2, #1
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	e747      	b.n	800b9c8 <_dtoa_r+0x968>
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	dd03      	ble.n	800bb44 <_dtoa_r+0xae4>
 800bb3c:	2b39      	cmp	r3, #57	; 0x39
 800bb3e:	d0ee      	beq.n	800bb1e <_dtoa_r+0xabe>
 800bb40:	3301      	adds	r3, #1
 800bb42:	e7c7      	b.n	800bad4 <_dtoa_r+0xa74>
 800bb44:	9a08      	ldr	r2, [sp, #32]
 800bb46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb48:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb4c:	428a      	cmp	r2, r1
 800bb4e:	d02a      	beq.n	800bba6 <_dtoa_r+0xb46>
 800bb50:	4659      	mov	r1, fp
 800bb52:	2300      	movs	r3, #0
 800bb54:	220a      	movs	r2, #10
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 fc72 	bl	800c440 <__multadd>
 800bb5c:	45b0      	cmp	r8, r6
 800bb5e:	4683      	mov	fp, r0
 800bb60:	f04f 0300 	mov.w	r3, #0
 800bb64:	f04f 020a 	mov.w	r2, #10
 800bb68:	4641      	mov	r1, r8
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	d107      	bne.n	800bb7e <_dtoa_r+0xb1e>
 800bb6e:	f000 fc67 	bl	800c440 <__multadd>
 800bb72:	4680      	mov	r8, r0
 800bb74:	4606      	mov	r6, r0
 800bb76:	9b08      	ldr	r3, [sp, #32]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	e775      	b.n	800ba6a <_dtoa_r+0xa0a>
 800bb7e:	f000 fc5f 	bl	800c440 <__multadd>
 800bb82:	4631      	mov	r1, r6
 800bb84:	4680      	mov	r8, r0
 800bb86:	2300      	movs	r3, #0
 800bb88:	220a      	movs	r2, #10
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 fc58 	bl	800c440 <__multadd>
 800bb90:	4606      	mov	r6, r0
 800bb92:	e7f0      	b.n	800bb76 <_dtoa_r+0xb16>
 800bb94:	f1b9 0f00 	cmp.w	r9, #0
 800bb98:	bfcc      	ite	gt
 800bb9a:	464f      	movgt	r7, r9
 800bb9c:	2701      	movle	r7, #1
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	9a03      	ldr	r2, [sp, #12]
 800bba4:	4417      	add	r7, r2
 800bba6:	4659      	mov	r1, fp
 800bba8:	2201      	movs	r2, #1
 800bbaa:	4628      	mov	r0, r5
 800bbac:	9308      	str	r3, [sp, #32]
 800bbae:	f000 fe3d 	bl	800c82c <__lshift>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4683      	mov	fp, r0
 800bbb6:	f000 fea9 	bl	800c90c <__mcmp>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	dcb2      	bgt.n	800bb24 <_dtoa_r+0xac4>
 800bbbe:	d102      	bne.n	800bbc6 <_dtoa_r+0xb66>
 800bbc0:	9b08      	ldr	r3, [sp, #32]
 800bbc2:	07db      	lsls	r3, r3, #31
 800bbc4:	d4ae      	bmi.n	800bb24 <_dtoa_r+0xac4>
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	461f      	mov	r7, r3
 800bbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbce:	2a30      	cmp	r2, #48	; 0x30
 800bbd0:	d0fa      	beq.n	800bbc8 <_dtoa_r+0xb68>
 800bbd2:	e6f9      	b.n	800b9c8 <_dtoa_r+0x968>
 800bbd4:	9a03      	ldr	r2, [sp, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d1a5      	bne.n	800bb26 <_dtoa_r+0xac6>
 800bbda:	2331      	movs	r3, #49	; 0x31
 800bbdc:	f10a 0a01 	add.w	sl, sl, #1
 800bbe0:	e779      	b.n	800bad6 <_dtoa_r+0xa76>
 800bbe2:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <_dtoa_r+0xbd4>)
 800bbe4:	f7ff baa8 	b.w	800b138 <_dtoa_r+0xd8>
 800bbe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f47f aa81 	bne.w	800b0f2 <_dtoa_r+0x92>
 800bbf0:	4b11      	ldr	r3, [pc, #68]	; (800bc38 <_dtoa_r+0xbd8>)
 800bbf2:	f7ff baa1 	b.w	800b138 <_dtoa_r+0xd8>
 800bbf6:	f1b9 0f00 	cmp.w	r9, #0
 800bbfa:	dc03      	bgt.n	800bc04 <_dtoa_r+0xba4>
 800bbfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	f73f aecb 	bgt.w	800b99a <_dtoa_r+0x93a>
 800bc04:	9f03      	ldr	r7, [sp, #12]
 800bc06:	4621      	mov	r1, r4
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f7ff f99b 	bl	800af44 <quorem>
 800bc0e:	9a03      	ldr	r2, [sp, #12]
 800bc10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc14:	f807 3b01 	strb.w	r3, [r7], #1
 800bc18:	1aba      	subs	r2, r7, r2
 800bc1a:	4591      	cmp	r9, r2
 800bc1c:	ddba      	ble.n	800bb94 <_dtoa_r+0xb34>
 800bc1e:	4659      	mov	r1, fp
 800bc20:	2300      	movs	r3, #0
 800bc22:	220a      	movs	r2, #10
 800bc24:	4628      	mov	r0, r5
 800bc26:	f000 fc0b 	bl	800c440 <__multadd>
 800bc2a:	4683      	mov	fp, r0
 800bc2c:	e7eb      	b.n	800bc06 <_dtoa_r+0xba6>
 800bc2e:	bf00      	nop
 800bc30:	0801f960 	.word	0x0801f960
 800bc34:	0801f764 	.word	0x0801f764
 800bc38:	0801f8e1 	.word	0x0801f8e1

0800bc3c <rshift>:
 800bc3c:	6903      	ldr	r3, [r0, #16]
 800bc3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc46:	f100 0414 	add.w	r4, r0, #20
 800bc4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc4e:	dd46      	ble.n	800bcde <rshift+0xa2>
 800bc50:	f011 011f 	ands.w	r1, r1, #31
 800bc54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc5c:	d10c      	bne.n	800bc78 <rshift+0x3c>
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f100 0710 	add.w	r7, r0, #16
 800bc64:	42b1      	cmp	r1, r6
 800bc66:	d335      	bcc.n	800bcd4 <rshift+0x98>
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	1eea      	subs	r2, r5, #3
 800bc6e:	4296      	cmp	r6, r2
 800bc70:	bf38      	it	cc
 800bc72:	2300      	movcc	r3, #0
 800bc74:	4423      	add	r3, r4
 800bc76:	e015      	b.n	800bca4 <rshift+0x68>
 800bc78:	46a1      	mov	r9, r4
 800bc7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc7e:	f1c1 0820 	rsb	r8, r1, #32
 800bc82:	40cf      	lsrs	r7, r1
 800bc84:	f105 0e04 	add.w	lr, r5, #4
 800bc88:	4576      	cmp	r6, lr
 800bc8a:	46f4      	mov	ip, lr
 800bc8c:	d816      	bhi.n	800bcbc <rshift+0x80>
 800bc8e:	1a9a      	subs	r2, r3, r2
 800bc90:	0092      	lsls	r2, r2, #2
 800bc92:	3a04      	subs	r2, #4
 800bc94:	3501      	adds	r5, #1
 800bc96:	42ae      	cmp	r6, r5
 800bc98:	bf38      	it	cc
 800bc9a:	2200      	movcc	r2, #0
 800bc9c:	18a3      	adds	r3, r4, r2
 800bc9e:	50a7      	str	r7, [r4, r2]
 800bca0:	b107      	cbz	r7, 800bca4 <rshift+0x68>
 800bca2:	3304      	adds	r3, #4
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	eba3 0204 	sub.w	r2, r3, r4
 800bcaa:	bf08      	it	eq
 800bcac:	2300      	moveq	r3, #0
 800bcae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bcb2:	6102      	str	r2, [r0, #16]
 800bcb4:	bf08      	it	eq
 800bcb6:	6143      	streq	r3, [r0, #20]
 800bcb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcbc:	f8dc c000 	ldr.w	ip, [ip]
 800bcc0:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcc4:	ea4c 0707 	orr.w	r7, ip, r7
 800bcc8:	f849 7b04 	str.w	r7, [r9], #4
 800bccc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcd0:	40cf      	lsrs	r7, r1
 800bcd2:	e7d9      	b.n	800bc88 <rshift+0x4c>
 800bcd4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bcd8:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcdc:	e7c2      	b.n	800bc64 <rshift+0x28>
 800bcde:	4623      	mov	r3, r4
 800bce0:	e7e0      	b.n	800bca4 <rshift+0x68>

0800bce2 <__hexdig_fun>:
 800bce2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	d802      	bhi.n	800bcf0 <__hexdig_fun+0xe>
 800bcea:	3820      	subs	r0, #32
 800bcec:	b2c0      	uxtb	r0, r0
 800bcee:	4770      	bx	lr
 800bcf0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bcf4:	2b05      	cmp	r3, #5
 800bcf6:	d801      	bhi.n	800bcfc <__hexdig_fun+0x1a>
 800bcf8:	3847      	subs	r0, #71	; 0x47
 800bcfa:	e7f7      	b.n	800bcec <__hexdig_fun+0xa>
 800bcfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd00:	2b05      	cmp	r3, #5
 800bd02:	d801      	bhi.n	800bd08 <__hexdig_fun+0x26>
 800bd04:	3827      	subs	r0, #39	; 0x27
 800bd06:	e7f1      	b.n	800bcec <__hexdig_fun+0xa>
 800bd08:	2000      	movs	r0, #0
 800bd0a:	4770      	bx	lr

0800bd0c <__gethex>:
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	b08b      	sub	sp, #44	; 0x2c
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	4bb2      	ldr	r3, [pc, #712]	; (800bfe0 <__gethex+0x2d4>)
 800bd16:	9002      	str	r0, [sp, #8]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	468b      	mov	fp, r1
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	4690      	mov	r8, r2
 800bd20:	9303      	str	r3, [sp, #12]
 800bd22:	f7fa fc67 	bl	80065f4 <strlen>
 800bd26:	4682      	mov	sl, r0
 800bd28:	9b03      	ldr	r3, [sp, #12]
 800bd2a:	f8db 2000 	ldr.w	r2, [fp]
 800bd2e:	4403      	add	r3, r0
 800bd30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd34:	9306      	str	r3, [sp, #24]
 800bd36:	1c93      	adds	r3, r2, #2
 800bd38:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd40:	32fe      	adds	r2, #254	; 0xfe
 800bd42:	18d1      	adds	r1, r2, r3
 800bd44:	461f      	mov	r7, r3
 800bd46:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd4a:	9101      	str	r1, [sp, #4]
 800bd4c:	2830      	cmp	r0, #48	; 0x30
 800bd4e:	d0f8      	beq.n	800bd42 <__gethex+0x36>
 800bd50:	f7ff ffc7 	bl	800bce2 <__hexdig_fun>
 800bd54:	4604      	mov	r4, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d13a      	bne.n	800bdd0 <__gethex+0xc4>
 800bd5a:	4652      	mov	r2, sl
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	9903      	ldr	r1, [sp, #12]
 800bd60:	f001 fa26 	bl	800d1b0 <strncmp>
 800bd64:	4605      	mov	r5, r0
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d166      	bne.n	800be38 <__gethex+0x12c>
 800bd6a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd6e:	eb07 060a 	add.w	r6, r7, sl
 800bd72:	f7ff ffb6 	bl	800bce2 <__hexdig_fun>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d060      	beq.n	800be3c <__gethex+0x130>
 800bd7a:	4633      	mov	r3, r6
 800bd7c:	7818      	ldrb	r0, [r3, #0]
 800bd7e:	461f      	mov	r7, r3
 800bd80:	2830      	cmp	r0, #48	; 0x30
 800bd82:	f103 0301 	add.w	r3, r3, #1
 800bd86:	d0f9      	beq.n	800bd7c <__gethex+0x70>
 800bd88:	f7ff ffab 	bl	800bce2 <__hexdig_fun>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	fab0 f480 	clz	r4, r0
 800bd92:	4635      	mov	r5, r6
 800bd94:	0964      	lsrs	r4, r4, #5
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	463a      	mov	r2, r7
 800bd9a:	4616      	mov	r6, r2
 800bd9c:	7830      	ldrb	r0, [r6, #0]
 800bd9e:	3201      	adds	r2, #1
 800bda0:	f7ff ff9f 	bl	800bce2 <__hexdig_fun>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1f8      	bne.n	800bd9a <__gethex+0x8e>
 800bda8:	4652      	mov	r2, sl
 800bdaa:	4630      	mov	r0, r6
 800bdac:	9903      	ldr	r1, [sp, #12]
 800bdae:	f001 f9ff 	bl	800d1b0 <strncmp>
 800bdb2:	b980      	cbnz	r0, 800bdd6 <__gethex+0xca>
 800bdb4:	b94d      	cbnz	r5, 800bdca <__gethex+0xbe>
 800bdb6:	eb06 050a 	add.w	r5, r6, sl
 800bdba:	462a      	mov	r2, r5
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	7830      	ldrb	r0, [r6, #0]
 800bdc0:	3201      	adds	r2, #1
 800bdc2:	f7ff ff8e 	bl	800bce2 <__hexdig_fun>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d1f8      	bne.n	800bdbc <__gethex+0xb0>
 800bdca:	1bad      	subs	r5, r5, r6
 800bdcc:	00ad      	lsls	r5, r5, #2
 800bdce:	e004      	b.n	800bdda <__gethex+0xce>
 800bdd0:	2400      	movs	r4, #0
 800bdd2:	4625      	mov	r5, r4
 800bdd4:	e7e0      	b.n	800bd98 <__gethex+0x8c>
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	d1f7      	bne.n	800bdca <__gethex+0xbe>
 800bdda:	7833      	ldrb	r3, [r6, #0]
 800bddc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bde0:	2b50      	cmp	r3, #80	; 0x50
 800bde2:	d139      	bne.n	800be58 <__gethex+0x14c>
 800bde4:	7873      	ldrb	r3, [r6, #1]
 800bde6:	2b2b      	cmp	r3, #43	; 0x2b
 800bde8:	d02a      	beq.n	800be40 <__gethex+0x134>
 800bdea:	2b2d      	cmp	r3, #45	; 0x2d
 800bdec:	d02c      	beq.n	800be48 <__gethex+0x13c>
 800bdee:	f04f 0900 	mov.w	r9, #0
 800bdf2:	1c71      	adds	r1, r6, #1
 800bdf4:	7808      	ldrb	r0, [r1, #0]
 800bdf6:	f7ff ff74 	bl	800bce2 <__hexdig_fun>
 800bdfa:	1e43      	subs	r3, r0, #1
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b18      	cmp	r3, #24
 800be00:	d82a      	bhi.n	800be58 <__gethex+0x14c>
 800be02:	f1a0 0210 	sub.w	r2, r0, #16
 800be06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be0a:	f7ff ff6a 	bl	800bce2 <__hexdig_fun>
 800be0e:	1e43      	subs	r3, r0, #1
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b18      	cmp	r3, #24
 800be14:	d91b      	bls.n	800be4e <__gethex+0x142>
 800be16:	f1b9 0f00 	cmp.w	r9, #0
 800be1a:	d000      	beq.n	800be1e <__gethex+0x112>
 800be1c:	4252      	negs	r2, r2
 800be1e:	4415      	add	r5, r2
 800be20:	f8cb 1000 	str.w	r1, [fp]
 800be24:	b1d4      	cbz	r4, 800be5c <__gethex+0x150>
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	bf14      	ite	ne
 800be2c:	2700      	movne	r7, #0
 800be2e:	2706      	moveq	r7, #6
 800be30:	4638      	mov	r0, r7
 800be32:	b00b      	add	sp, #44	; 0x2c
 800be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be38:	463e      	mov	r6, r7
 800be3a:	4625      	mov	r5, r4
 800be3c:	2401      	movs	r4, #1
 800be3e:	e7cc      	b.n	800bdda <__gethex+0xce>
 800be40:	f04f 0900 	mov.w	r9, #0
 800be44:	1cb1      	adds	r1, r6, #2
 800be46:	e7d5      	b.n	800bdf4 <__gethex+0xe8>
 800be48:	f04f 0901 	mov.w	r9, #1
 800be4c:	e7fa      	b.n	800be44 <__gethex+0x138>
 800be4e:	230a      	movs	r3, #10
 800be50:	fb03 0202 	mla	r2, r3, r2, r0
 800be54:	3a10      	subs	r2, #16
 800be56:	e7d6      	b.n	800be06 <__gethex+0xfa>
 800be58:	4631      	mov	r1, r6
 800be5a:	e7e1      	b.n	800be20 <__gethex+0x114>
 800be5c:	4621      	mov	r1, r4
 800be5e:	1bf3      	subs	r3, r6, r7
 800be60:	3b01      	subs	r3, #1
 800be62:	2b07      	cmp	r3, #7
 800be64:	dc0a      	bgt.n	800be7c <__gethex+0x170>
 800be66:	9802      	ldr	r0, [sp, #8]
 800be68:	f000 fa88 	bl	800c37c <_Balloc>
 800be6c:	4604      	mov	r4, r0
 800be6e:	b940      	cbnz	r0, 800be82 <__gethex+0x176>
 800be70:	4602      	mov	r2, r0
 800be72:	21de      	movs	r1, #222	; 0xde
 800be74:	4b5b      	ldr	r3, [pc, #364]	; (800bfe4 <__gethex+0x2d8>)
 800be76:	485c      	ldr	r0, [pc, #368]	; (800bfe8 <__gethex+0x2dc>)
 800be78:	f001 f9bc 	bl	800d1f4 <__assert_func>
 800be7c:	3101      	adds	r1, #1
 800be7e:	105b      	asrs	r3, r3, #1
 800be80:	e7ef      	b.n	800be62 <__gethex+0x156>
 800be82:	f04f 0b00 	mov.w	fp, #0
 800be86:	f100 0914 	add.w	r9, r0, #20
 800be8a:	f1ca 0301 	rsb	r3, sl, #1
 800be8e:	f8cd 9010 	str.w	r9, [sp, #16]
 800be92:	f8cd b004 	str.w	fp, [sp, #4]
 800be96:	9308      	str	r3, [sp, #32]
 800be98:	42b7      	cmp	r7, r6
 800be9a:	d33f      	bcc.n	800bf1c <__gethex+0x210>
 800be9c:	9f04      	ldr	r7, [sp, #16]
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	f847 3b04 	str.w	r3, [r7], #4
 800bea4:	eba7 0709 	sub.w	r7, r7, r9
 800bea8:	10bf      	asrs	r7, r7, #2
 800beaa:	6127      	str	r7, [r4, #16]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fb57 	bl	800c560 <__hi0bits>
 800beb2:	017f      	lsls	r7, r7, #5
 800beb4:	f8d8 6000 	ldr.w	r6, [r8]
 800beb8:	1a3f      	subs	r7, r7, r0
 800beba:	42b7      	cmp	r7, r6
 800bebc:	dd62      	ble.n	800bf84 <__gethex+0x278>
 800bebe:	1bbf      	subs	r7, r7, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 fef1 	bl	800ccaa <__any_on>
 800bec8:	4682      	mov	sl, r0
 800beca:	b1a8      	cbz	r0, 800bef8 <__gethex+0x1ec>
 800becc:	f04f 0a01 	mov.w	sl, #1
 800bed0:	1e7b      	subs	r3, r7, #1
 800bed2:	1159      	asrs	r1, r3, #5
 800bed4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bed8:	f003 021f 	and.w	r2, r3, #31
 800bedc:	fa0a f202 	lsl.w	r2, sl, r2
 800bee0:	420a      	tst	r2, r1
 800bee2:	d009      	beq.n	800bef8 <__gethex+0x1ec>
 800bee4:	4553      	cmp	r3, sl
 800bee6:	dd05      	ble.n	800bef4 <__gethex+0x1e8>
 800bee8:	4620      	mov	r0, r4
 800beea:	1eb9      	subs	r1, r7, #2
 800beec:	f000 fedd 	bl	800ccaa <__any_on>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d144      	bne.n	800bf7e <__gethex+0x272>
 800bef4:	f04f 0a02 	mov.w	sl, #2
 800bef8:	4639      	mov	r1, r7
 800befa:	4620      	mov	r0, r4
 800befc:	f7ff fe9e 	bl	800bc3c <rshift>
 800bf00:	443d      	add	r5, r7
 800bf02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf06:	42ab      	cmp	r3, r5
 800bf08:	da4a      	bge.n	800bfa0 <__gethex+0x294>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	9802      	ldr	r0, [sp, #8]
 800bf0e:	f000 fa75 	bl	800c3fc <_Bfree>
 800bf12:	2300      	movs	r3, #0
 800bf14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf16:	27a3      	movs	r7, #163	; 0xa3
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	e789      	b.n	800be30 <__gethex+0x124>
 800bf1c:	1e73      	subs	r3, r6, #1
 800bf1e:	9a06      	ldr	r2, [sp, #24]
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d019      	beq.n	800bf5e <__gethex+0x252>
 800bf2a:	f1bb 0f20 	cmp.w	fp, #32
 800bf2e:	d107      	bne.n	800bf40 <__gethex+0x234>
 800bf30:	9b04      	ldr	r3, [sp, #16]
 800bf32:	9a01      	ldr	r2, [sp, #4]
 800bf34:	f843 2b04 	str.w	r2, [r3], #4
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	469b      	mov	fp, r3
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf44:	f7ff fecd 	bl	800bce2 <__hexdig_fun>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	f000 000f 	and.w	r0, r0, #15
 800bf4e:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf52:	4303      	orrs	r3, r0
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	f10b 0b04 	add.w	fp, fp, #4
 800bf5a:	9b07      	ldr	r3, [sp, #28]
 800bf5c:	e00d      	b.n	800bf7a <__gethex+0x26e>
 800bf5e:	9a08      	ldr	r2, [sp, #32]
 800bf60:	1e73      	subs	r3, r6, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	42bb      	cmp	r3, r7
 800bf66:	d3e0      	bcc.n	800bf2a <__gethex+0x21e>
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4652      	mov	r2, sl
 800bf6c:	9903      	ldr	r1, [sp, #12]
 800bf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf70:	f001 f91e 	bl	800d1b0 <strncmp>
 800bf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d1d7      	bne.n	800bf2a <__gethex+0x21e>
 800bf7a:	461e      	mov	r6, r3
 800bf7c:	e78c      	b.n	800be98 <__gethex+0x18c>
 800bf7e:	f04f 0a03 	mov.w	sl, #3
 800bf82:	e7b9      	b.n	800bef8 <__gethex+0x1ec>
 800bf84:	da09      	bge.n	800bf9a <__gethex+0x28e>
 800bf86:	1bf7      	subs	r7, r6, r7
 800bf88:	4621      	mov	r1, r4
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	9802      	ldr	r0, [sp, #8]
 800bf8e:	f000 fc4d 	bl	800c82c <__lshift>
 800bf92:	4604      	mov	r4, r0
 800bf94:	1bed      	subs	r5, r5, r7
 800bf96:	f100 0914 	add.w	r9, r0, #20
 800bf9a:	f04f 0a00 	mov.w	sl, #0
 800bf9e:	e7b0      	b.n	800bf02 <__gethex+0x1f6>
 800bfa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bfa4:	42a8      	cmp	r0, r5
 800bfa6:	dd72      	ble.n	800c08e <__gethex+0x382>
 800bfa8:	1b45      	subs	r5, r0, r5
 800bfaa:	42ae      	cmp	r6, r5
 800bfac:	dc35      	bgt.n	800c01a <__gethex+0x30e>
 800bfae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d029      	beq.n	800c00a <__gethex+0x2fe>
 800bfb6:	2b03      	cmp	r3, #3
 800bfb8:	d02b      	beq.n	800c012 <__gethex+0x306>
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d11c      	bne.n	800bff8 <__gethex+0x2ec>
 800bfbe:	42ae      	cmp	r6, r5
 800bfc0:	d11a      	bne.n	800bff8 <__gethex+0x2ec>
 800bfc2:	2e01      	cmp	r6, #1
 800bfc4:	d112      	bne.n	800bfec <__gethex+0x2e0>
 800bfc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfca:	9a05      	ldr	r2, [sp, #20]
 800bfcc:	2762      	movs	r7, #98	; 0x62
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	6123      	str	r3, [r4, #16]
 800bfd4:	f8c9 3000 	str.w	r3, [r9]
 800bfd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfda:	601c      	str	r4, [r3, #0]
 800bfdc:	e728      	b.n	800be30 <__gethex+0x124>
 800bfde:	bf00      	nop
 800bfe0:	0801f9d8 	.word	0x0801f9d8
 800bfe4:	0801f960 	.word	0x0801f960
 800bfe8:	0801f971 	.word	0x0801f971
 800bfec:	4620      	mov	r0, r4
 800bfee:	1e71      	subs	r1, r6, #1
 800bff0:	f000 fe5b 	bl	800ccaa <__any_on>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1e6      	bne.n	800bfc6 <__gethex+0x2ba>
 800bff8:	4621      	mov	r1, r4
 800bffa:	9802      	ldr	r0, [sp, #8]
 800bffc:	f000 f9fe 	bl	800c3fc <_Bfree>
 800c000:	2300      	movs	r3, #0
 800c002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c004:	2750      	movs	r7, #80	; 0x50
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	e712      	b.n	800be30 <__gethex+0x124>
 800c00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1f3      	bne.n	800bff8 <__gethex+0x2ec>
 800c010:	e7d9      	b.n	800bfc6 <__gethex+0x2ba>
 800c012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1d6      	bne.n	800bfc6 <__gethex+0x2ba>
 800c018:	e7ee      	b.n	800bff8 <__gethex+0x2ec>
 800c01a:	1e6f      	subs	r7, r5, #1
 800c01c:	f1ba 0f00 	cmp.w	sl, #0
 800c020:	d132      	bne.n	800c088 <__gethex+0x37c>
 800c022:	b127      	cbz	r7, 800c02e <__gethex+0x322>
 800c024:	4639      	mov	r1, r7
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fe3f 	bl	800ccaa <__any_on>
 800c02c:	4682      	mov	sl, r0
 800c02e:	2101      	movs	r1, #1
 800c030:	117b      	asrs	r3, r7, #5
 800c032:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c036:	f007 071f 	and.w	r7, r7, #31
 800c03a:	fa01 f707 	lsl.w	r7, r1, r7
 800c03e:	421f      	tst	r7, r3
 800c040:	f04f 0702 	mov.w	r7, #2
 800c044:	4629      	mov	r1, r5
 800c046:	4620      	mov	r0, r4
 800c048:	bf18      	it	ne
 800c04a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c04e:	1b76      	subs	r6, r6, r5
 800c050:	f7ff fdf4 	bl	800bc3c <rshift>
 800c054:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	d048      	beq.n	800c0f0 <__gethex+0x3e4>
 800c05e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d015      	beq.n	800c092 <__gethex+0x386>
 800c066:	2b03      	cmp	r3, #3
 800c068:	d017      	beq.n	800c09a <__gethex+0x38e>
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d109      	bne.n	800c082 <__gethex+0x376>
 800c06e:	f01a 0f02 	tst.w	sl, #2
 800c072:	d006      	beq.n	800c082 <__gethex+0x376>
 800c074:	f8d9 0000 	ldr.w	r0, [r9]
 800c078:	ea4a 0a00 	orr.w	sl, sl, r0
 800c07c:	f01a 0f01 	tst.w	sl, #1
 800c080:	d10e      	bne.n	800c0a0 <__gethex+0x394>
 800c082:	f047 0710 	orr.w	r7, r7, #16
 800c086:	e033      	b.n	800c0f0 <__gethex+0x3e4>
 800c088:	f04f 0a01 	mov.w	sl, #1
 800c08c:	e7cf      	b.n	800c02e <__gethex+0x322>
 800c08e:	2701      	movs	r7, #1
 800c090:	e7e2      	b.n	800c058 <__gethex+0x34c>
 800c092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c094:	f1c3 0301 	rsb	r3, r3, #1
 800c098:	9315      	str	r3, [sp, #84]	; 0x54
 800c09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0f0      	beq.n	800c082 <__gethex+0x376>
 800c0a0:	f04f 0c00 	mov.w	ip, #0
 800c0a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0a8:	f104 0314 	add.w	r3, r4, #20
 800c0ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0be:	d01c      	beq.n	800c0fa <__gethex+0x3ee>
 800c0c0:	3201      	adds	r2, #1
 800c0c2:	6002      	str	r2, [r0, #0]
 800c0c4:	2f02      	cmp	r7, #2
 800c0c6:	f104 0314 	add.w	r3, r4, #20
 800c0ca:	d13d      	bne.n	800c148 <__gethex+0x43c>
 800c0cc:	f8d8 2000 	ldr.w	r2, [r8]
 800c0d0:	3a01      	subs	r2, #1
 800c0d2:	42b2      	cmp	r2, r6
 800c0d4:	d10a      	bne.n	800c0ec <__gethex+0x3e0>
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	1171      	asrs	r1, r6, #5
 800c0da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0de:	f006 061f 	and.w	r6, r6, #31
 800c0e2:	fa02 f606 	lsl.w	r6, r2, r6
 800c0e6:	421e      	tst	r6, r3
 800c0e8:	bf18      	it	ne
 800c0ea:	4617      	movne	r7, r2
 800c0ec:	f047 0720 	orr.w	r7, r7, #32
 800c0f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0f2:	601c      	str	r4, [r3, #0]
 800c0f4:	9b05      	ldr	r3, [sp, #20]
 800c0f6:	601d      	str	r5, [r3, #0]
 800c0f8:	e69a      	b.n	800be30 <__gethex+0x124>
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c100:	d8d8      	bhi.n	800c0b4 <__gethex+0x3a8>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	459b      	cmp	fp, r3
 800c106:	db17      	blt.n	800c138 <__gethex+0x42c>
 800c108:	6861      	ldr	r1, [r4, #4]
 800c10a:	9802      	ldr	r0, [sp, #8]
 800c10c:	3101      	adds	r1, #1
 800c10e:	f000 f935 	bl	800c37c <_Balloc>
 800c112:	4681      	mov	r9, r0
 800c114:	b918      	cbnz	r0, 800c11e <__gethex+0x412>
 800c116:	4602      	mov	r2, r0
 800c118:	2184      	movs	r1, #132	; 0x84
 800c11a:	4b19      	ldr	r3, [pc, #100]	; (800c180 <__gethex+0x474>)
 800c11c:	e6ab      	b.n	800be76 <__gethex+0x16a>
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	f104 010c 	add.w	r1, r4, #12
 800c124:	3202      	adds	r2, #2
 800c126:	0092      	lsls	r2, r2, #2
 800c128:	300c      	adds	r0, #12
 800c12a:	f000 f919 	bl	800c360 <memcpy>
 800c12e:	4621      	mov	r1, r4
 800c130:	9802      	ldr	r0, [sp, #8]
 800c132:	f000 f963 	bl	800c3fc <_Bfree>
 800c136:	464c      	mov	r4, r9
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	6122      	str	r2, [r4, #16]
 800c13e:	2201      	movs	r2, #1
 800c140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c144:	615a      	str	r2, [r3, #20]
 800c146:	e7bd      	b.n	800c0c4 <__gethex+0x3b8>
 800c148:	6922      	ldr	r2, [r4, #16]
 800c14a:	455a      	cmp	r2, fp
 800c14c:	dd0b      	ble.n	800c166 <__gethex+0x45a>
 800c14e:	2101      	movs	r1, #1
 800c150:	4620      	mov	r0, r4
 800c152:	f7ff fd73 	bl	800bc3c <rshift>
 800c156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c15a:	3501      	adds	r5, #1
 800c15c:	42ab      	cmp	r3, r5
 800c15e:	f6ff aed4 	blt.w	800bf0a <__gethex+0x1fe>
 800c162:	2701      	movs	r7, #1
 800c164:	e7c2      	b.n	800c0ec <__gethex+0x3e0>
 800c166:	f016 061f 	ands.w	r6, r6, #31
 800c16a:	d0fa      	beq.n	800c162 <__gethex+0x456>
 800c16c:	4453      	add	r3, sl
 800c16e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c172:	f000 f9f5 	bl	800c560 <__hi0bits>
 800c176:	f1c6 0620 	rsb	r6, r6, #32
 800c17a:	42b0      	cmp	r0, r6
 800c17c:	dbe7      	blt.n	800c14e <__gethex+0x442>
 800c17e:	e7f0      	b.n	800c162 <__gethex+0x456>
 800c180:	0801f960 	.word	0x0801f960

0800c184 <L_shift>:
 800c184:	f1c2 0208 	rsb	r2, r2, #8
 800c188:	0092      	lsls	r2, r2, #2
 800c18a:	b570      	push	{r4, r5, r6, lr}
 800c18c:	f1c2 0620 	rsb	r6, r2, #32
 800c190:	6843      	ldr	r3, [r0, #4]
 800c192:	6804      	ldr	r4, [r0, #0]
 800c194:	fa03 f506 	lsl.w	r5, r3, r6
 800c198:	432c      	orrs	r4, r5
 800c19a:	40d3      	lsrs	r3, r2
 800c19c:	6004      	str	r4, [r0, #0]
 800c19e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1a2:	4288      	cmp	r0, r1
 800c1a4:	d3f4      	bcc.n	800c190 <L_shift+0xc>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}

0800c1a8 <__match>:
 800c1a8:	b530      	push	{r4, r5, lr}
 800c1aa:	6803      	ldr	r3, [r0, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b2:	b914      	cbnz	r4, 800c1ba <__match+0x12>
 800c1b4:	6003      	str	r3, [r0, #0]
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	bd30      	pop	{r4, r5, pc}
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1c2:	2d19      	cmp	r5, #25
 800c1c4:	bf98      	it	ls
 800c1c6:	3220      	addls	r2, #32
 800c1c8:	42a2      	cmp	r2, r4
 800c1ca:	d0f0      	beq.n	800c1ae <__match+0x6>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e7f3      	b.n	800c1b8 <__match+0x10>

0800c1d0 <__hexnan>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	2500      	movs	r5, #0
 800c1d6:	680b      	ldr	r3, [r1, #0]
 800c1d8:	4682      	mov	sl, r0
 800c1da:	115e      	asrs	r6, r3, #5
 800c1dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1e0:	f013 031f 	ands.w	r3, r3, #31
 800c1e4:	bf18      	it	ne
 800c1e6:	3604      	addne	r6, #4
 800c1e8:	1f37      	subs	r7, r6, #4
 800c1ea:	46b9      	mov	r9, r7
 800c1ec:	463c      	mov	r4, r7
 800c1ee:	46ab      	mov	fp, r5
 800c1f0:	b087      	sub	sp, #28
 800c1f2:	4690      	mov	r8, r2
 800c1f4:	6802      	ldr	r2, [r0, #0]
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1fc:	9502      	str	r5, [sp, #8]
 800c1fe:	7851      	ldrb	r1, [r2, #1]
 800c200:	1c53      	adds	r3, r2, #1
 800c202:	9303      	str	r3, [sp, #12]
 800c204:	b341      	cbz	r1, 800c258 <__hexnan+0x88>
 800c206:	4608      	mov	r0, r1
 800c208:	9205      	str	r2, [sp, #20]
 800c20a:	9104      	str	r1, [sp, #16]
 800c20c:	f7ff fd69 	bl	800bce2 <__hexdig_fun>
 800c210:	2800      	cmp	r0, #0
 800c212:	d14f      	bne.n	800c2b4 <__hexnan+0xe4>
 800c214:	9904      	ldr	r1, [sp, #16]
 800c216:	9a05      	ldr	r2, [sp, #20]
 800c218:	2920      	cmp	r1, #32
 800c21a:	d818      	bhi.n	800c24e <__hexnan+0x7e>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	459b      	cmp	fp, r3
 800c220:	dd13      	ble.n	800c24a <__hexnan+0x7a>
 800c222:	454c      	cmp	r4, r9
 800c224:	d206      	bcs.n	800c234 <__hexnan+0x64>
 800c226:	2d07      	cmp	r5, #7
 800c228:	dc04      	bgt.n	800c234 <__hexnan+0x64>
 800c22a:	462a      	mov	r2, r5
 800c22c:	4649      	mov	r1, r9
 800c22e:	4620      	mov	r0, r4
 800c230:	f7ff ffa8 	bl	800c184 <L_shift>
 800c234:	4544      	cmp	r4, r8
 800c236:	d950      	bls.n	800c2da <__hexnan+0x10a>
 800c238:	2300      	movs	r3, #0
 800c23a:	f1a4 0904 	sub.w	r9, r4, #4
 800c23e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c242:	461d      	mov	r5, r3
 800c244:	464c      	mov	r4, r9
 800c246:	f8cd b008 	str.w	fp, [sp, #8]
 800c24a:	9a03      	ldr	r2, [sp, #12]
 800c24c:	e7d7      	b.n	800c1fe <__hexnan+0x2e>
 800c24e:	2929      	cmp	r1, #41	; 0x29
 800c250:	d156      	bne.n	800c300 <__hexnan+0x130>
 800c252:	3202      	adds	r2, #2
 800c254:	f8ca 2000 	str.w	r2, [sl]
 800c258:	f1bb 0f00 	cmp.w	fp, #0
 800c25c:	d050      	beq.n	800c300 <__hexnan+0x130>
 800c25e:	454c      	cmp	r4, r9
 800c260:	d206      	bcs.n	800c270 <__hexnan+0xa0>
 800c262:	2d07      	cmp	r5, #7
 800c264:	dc04      	bgt.n	800c270 <__hexnan+0xa0>
 800c266:	462a      	mov	r2, r5
 800c268:	4649      	mov	r1, r9
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7ff ff8a 	bl	800c184 <L_shift>
 800c270:	4544      	cmp	r4, r8
 800c272:	d934      	bls.n	800c2de <__hexnan+0x10e>
 800c274:	4623      	mov	r3, r4
 800c276:	f1a8 0204 	sub.w	r2, r8, #4
 800c27a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c27e:	429f      	cmp	r7, r3
 800c280:	f842 1f04 	str.w	r1, [r2, #4]!
 800c284:	d2f9      	bcs.n	800c27a <__hexnan+0xaa>
 800c286:	1b3b      	subs	r3, r7, r4
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3304      	adds	r3, #4
 800c28e:	3401      	adds	r4, #1
 800c290:	3e03      	subs	r6, #3
 800c292:	42b4      	cmp	r4, r6
 800c294:	bf88      	it	hi
 800c296:	2304      	movhi	r3, #4
 800c298:	2200      	movs	r2, #0
 800c29a:	4443      	add	r3, r8
 800c29c:	f843 2b04 	str.w	r2, [r3], #4
 800c2a0:	429f      	cmp	r7, r3
 800c2a2:	d2fb      	bcs.n	800c29c <__hexnan+0xcc>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	b91b      	cbnz	r3, 800c2b0 <__hexnan+0xe0>
 800c2a8:	4547      	cmp	r7, r8
 800c2aa:	d127      	bne.n	800c2fc <__hexnan+0x12c>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	2005      	movs	r0, #5
 800c2b2:	e026      	b.n	800c302 <__hexnan+0x132>
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	2d08      	cmp	r5, #8
 800c2b8:	f10b 0b01 	add.w	fp, fp, #1
 800c2bc:	dd06      	ble.n	800c2cc <__hexnan+0xfc>
 800c2be:	4544      	cmp	r4, r8
 800c2c0:	d9c3      	bls.n	800c24a <__hexnan+0x7a>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2501      	movs	r5, #1
 800c2c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ca:	3c04      	subs	r4, #4
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	f000 000f 	and.w	r0, r0, #15
 800c2d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c2d6:	6022      	str	r2, [r4, #0]
 800c2d8:	e7b7      	b.n	800c24a <__hexnan+0x7a>
 800c2da:	2508      	movs	r5, #8
 800c2dc:	e7b5      	b.n	800c24a <__hexnan+0x7a>
 800c2de:	9b01      	ldr	r3, [sp, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0df      	beq.n	800c2a4 <__hexnan+0xd4>
 800c2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e8:	f1c3 0320 	rsb	r3, r3, #32
 800c2ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2f4:	401a      	ands	r2, r3
 800c2f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800c2fa:	e7d3      	b.n	800c2a4 <__hexnan+0xd4>
 800c2fc:	3f04      	subs	r7, #4
 800c2fe:	e7d1      	b.n	800c2a4 <__hexnan+0xd4>
 800c300:	2004      	movs	r0, #4
 800c302:	b007      	add	sp, #28
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c308 <_localeconv_r>:
 800c308:	4800      	ldr	r0, [pc, #0]	; (800c30c <_localeconv_r+0x4>)
 800c30a:	4770      	bx	lr
 800c30c:	20000164 	.word	0x20000164

0800c310 <malloc>:
 800c310:	4b02      	ldr	r3, [pc, #8]	; (800c31c <malloc+0xc>)
 800c312:	4601      	mov	r1, r0
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	f000 bd65 	b.w	800cde4 <_malloc_r>
 800c31a:	bf00      	nop
 800c31c:	2000000c 	.word	0x2000000c

0800c320 <__ascii_mbtowc>:
 800c320:	b082      	sub	sp, #8
 800c322:	b901      	cbnz	r1, 800c326 <__ascii_mbtowc+0x6>
 800c324:	a901      	add	r1, sp, #4
 800c326:	b142      	cbz	r2, 800c33a <__ascii_mbtowc+0x1a>
 800c328:	b14b      	cbz	r3, 800c33e <__ascii_mbtowc+0x1e>
 800c32a:	7813      	ldrb	r3, [r2, #0]
 800c32c:	600b      	str	r3, [r1, #0]
 800c32e:	7812      	ldrb	r2, [r2, #0]
 800c330:	1e10      	subs	r0, r2, #0
 800c332:	bf18      	it	ne
 800c334:	2001      	movne	r0, #1
 800c336:	b002      	add	sp, #8
 800c338:	4770      	bx	lr
 800c33a:	4610      	mov	r0, r2
 800c33c:	e7fb      	b.n	800c336 <__ascii_mbtowc+0x16>
 800c33e:	f06f 0001 	mvn.w	r0, #1
 800c342:	e7f8      	b.n	800c336 <__ascii_mbtowc+0x16>

0800c344 <memchr>:
 800c344:	4603      	mov	r3, r0
 800c346:	b510      	push	{r4, lr}
 800c348:	b2c9      	uxtb	r1, r1
 800c34a:	4402      	add	r2, r0
 800c34c:	4293      	cmp	r3, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	d101      	bne.n	800c356 <memchr+0x12>
 800c352:	2000      	movs	r0, #0
 800c354:	e003      	b.n	800c35e <memchr+0x1a>
 800c356:	7804      	ldrb	r4, [r0, #0]
 800c358:	3301      	adds	r3, #1
 800c35a:	428c      	cmp	r4, r1
 800c35c:	d1f6      	bne.n	800c34c <memchr+0x8>
 800c35e:	bd10      	pop	{r4, pc}

0800c360 <memcpy>:
 800c360:	440a      	add	r2, r1
 800c362:	4291      	cmp	r1, r2
 800c364:	f100 33ff 	add.w	r3, r0, #4294967295
 800c368:	d100      	bne.n	800c36c <memcpy+0xc>
 800c36a:	4770      	bx	lr
 800c36c:	b510      	push	{r4, lr}
 800c36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c372:	4291      	cmp	r1, r2
 800c374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c378:	d1f9      	bne.n	800c36e <memcpy+0xe>
 800c37a:	bd10      	pop	{r4, pc}

0800c37c <_Balloc>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c380:	4604      	mov	r4, r0
 800c382:	460d      	mov	r5, r1
 800c384:	b976      	cbnz	r6, 800c3a4 <_Balloc+0x28>
 800c386:	2010      	movs	r0, #16
 800c388:	f7ff ffc2 	bl	800c310 <malloc>
 800c38c:	4602      	mov	r2, r0
 800c38e:	6260      	str	r0, [r4, #36]	; 0x24
 800c390:	b920      	cbnz	r0, 800c39c <_Balloc+0x20>
 800c392:	2166      	movs	r1, #102	; 0x66
 800c394:	4b17      	ldr	r3, [pc, #92]	; (800c3f4 <_Balloc+0x78>)
 800c396:	4818      	ldr	r0, [pc, #96]	; (800c3f8 <_Balloc+0x7c>)
 800c398:	f000 ff2c 	bl	800d1f4 <__assert_func>
 800c39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a0:	6006      	str	r6, [r0, #0]
 800c3a2:	60c6      	str	r6, [r0, #12]
 800c3a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c3a6:	68f3      	ldr	r3, [r6, #12]
 800c3a8:	b183      	cbz	r3, 800c3cc <_Balloc+0x50>
 800c3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3b2:	b9b8      	cbnz	r0, 800c3e4 <_Balloc+0x68>
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c3ba:	1d72      	adds	r2, r6, #5
 800c3bc:	4620      	mov	r0, r4
 800c3be:	0092      	lsls	r2, r2, #2
 800c3c0:	f000 fc94 	bl	800ccec <_calloc_r>
 800c3c4:	b160      	cbz	r0, 800c3e0 <_Balloc+0x64>
 800c3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3ca:	e00e      	b.n	800c3ea <_Balloc+0x6e>
 800c3cc:	2221      	movs	r2, #33	; 0x21
 800c3ce:	2104      	movs	r1, #4
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fc8b 	bl	800ccec <_calloc_r>
 800c3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d8:	60f0      	str	r0, [r6, #12]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e4      	bne.n	800c3aa <_Balloc+0x2e>
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	6802      	ldr	r2, [r0, #0]
 800c3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3f0:	e7f7      	b.n	800c3e2 <_Balloc+0x66>
 800c3f2:	bf00      	nop
 800c3f4:	0801f8ee 	.word	0x0801f8ee
 800c3f8:	0801f9ec 	.word	0x0801f9ec

0800c3fc <_Bfree>:
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b976      	cbnz	r6, 800c424 <_Bfree+0x28>
 800c406:	2010      	movs	r0, #16
 800c408:	f7ff ff82 	bl	800c310 <malloc>
 800c40c:	4602      	mov	r2, r0
 800c40e:	6268      	str	r0, [r5, #36]	; 0x24
 800c410:	b920      	cbnz	r0, 800c41c <_Bfree+0x20>
 800c412:	218a      	movs	r1, #138	; 0x8a
 800c414:	4b08      	ldr	r3, [pc, #32]	; (800c438 <_Bfree+0x3c>)
 800c416:	4809      	ldr	r0, [pc, #36]	; (800c43c <_Bfree+0x40>)
 800c418:	f000 feec 	bl	800d1f4 <__assert_func>
 800c41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c420:	6006      	str	r6, [r0, #0]
 800c422:	60c6      	str	r6, [r0, #12]
 800c424:	b13c      	cbz	r4, 800c436 <_Bfree+0x3a>
 800c426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c428:	6862      	ldr	r2, [r4, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c430:	6021      	str	r1, [r4, #0]
 800c432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	0801f8ee 	.word	0x0801f8ee
 800c43c:	0801f9ec 	.word	0x0801f9ec

0800c440 <__multadd>:
 800c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c444:	4607      	mov	r7, r0
 800c446:	460c      	mov	r4, r1
 800c448:	461e      	mov	r6, r3
 800c44a:	2000      	movs	r0, #0
 800c44c:	690d      	ldr	r5, [r1, #16]
 800c44e:	f101 0c14 	add.w	ip, r1, #20
 800c452:	f8dc 3000 	ldr.w	r3, [ip]
 800c456:	3001      	adds	r0, #1
 800c458:	b299      	uxth	r1, r3
 800c45a:	fb02 6101 	mla	r1, r2, r1, r6
 800c45e:	0c1e      	lsrs	r6, r3, #16
 800c460:	0c0b      	lsrs	r3, r1, #16
 800c462:	fb02 3306 	mla	r3, r2, r6, r3
 800c466:	b289      	uxth	r1, r1
 800c468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c46c:	4285      	cmp	r5, r0
 800c46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c472:	f84c 1b04 	str.w	r1, [ip], #4
 800c476:	dcec      	bgt.n	800c452 <__multadd+0x12>
 800c478:	b30e      	cbz	r6, 800c4be <__multadd+0x7e>
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	42ab      	cmp	r3, r5
 800c47e:	dc19      	bgt.n	800c4b4 <__multadd+0x74>
 800c480:	6861      	ldr	r1, [r4, #4]
 800c482:	4638      	mov	r0, r7
 800c484:	3101      	adds	r1, #1
 800c486:	f7ff ff79 	bl	800c37c <_Balloc>
 800c48a:	4680      	mov	r8, r0
 800c48c:	b928      	cbnz	r0, 800c49a <__multadd+0x5a>
 800c48e:	4602      	mov	r2, r0
 800c490:	21b5      	movs	r1, #181	; 0xb5
 800c492:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <__multadd+0x84>)
 800c494:	480c      	ldr	r0, [pc, #48]	; (800c4c8 <__multadd+0x88>)
 800c496:	f000 fead 	bl	800d1f4 <__assert_func>
 800c49a:	6922      	ldr	r2, [r4, #16]
 800c49c:	f104 010c 	add.w	r1, r4, #12
 800c4a0:	3202      	adds	r2, #2
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	300c      	adds	r0, #12
 800c4a6:	f7ff ff5b 	bl	800c360 <memcpy>
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	f7ff ffa5 	bl	800c3fc <_Bfree>
 800c4b2:	4644      	mov	r4, r8
 800c4b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	615e      	str	r6, [r3, #20]
 800c4bc:	6125      	str	r5, [r4, #16]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c4:	0801f960 	.word	0x0801f960
 800c4c8:	0801f9ec 	.word	0x0801f9ec

0800c4cc <__s2b>:
 800c4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	4615      	mov	r5, r2
 800c4d2:	2209      	movs	r2, #9
 800c4d4:	461f      	mov	r7, r3
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	460c      	mov	r4, r1
 800c4da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4de:	4606      	mov	r6, r0
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	db09      	blt.n	800c4fc <__s2b+0x30>
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f7ff ff47 	bl	800c37c <_Balloc>
 800c4ee:	b940      	cbnz	r0, 800c502 <__s2b+0x36>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	21ce      	movs	r1, #206	; 0xce
 800c4f4:	4b18      	ldr	r3, [pc, #96]	; (800c558 <__s2b+0x8c>)
 800c4f6:	4819      	ldr	r0, [pc, #100]	; (800c55c <__s2b+0x90>)
 800c4f8:	f000 fe7c 	bl	800d1f4 <__assert_func>
 800c4fc:	0052      	lsls	r2, r2, #1
 800c4fe:	3101      	adds	r1, #1
 800c500:	e7f0      	b.n	800c4e4 <__s2b+0x18>
 800c502:	9b08      	ldr	r3, [sp, #32]
 800c504:	2d09      	cmp	r5, #9
 800c506:	6143      	str	r3, [r0, #20]
 800c508:	f04f 0301 	mov.w	r3, #1
 800c50c:	6103      	str	r3, [r0, #16]
 800c50e:	dd16      	ble.n	800c53e <__s2b+0x72>
 800c510:	f104 0909 	add.w	r9, r4, #9
 800c514:	46c8      	mov	r8, r9
 800c516:	442c      	add	r4, r5
 800c518:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c51c:	4601      	mov	r1, r0
 800c51e:	220a      	movs	r2, #10
 800c520:	4630      	mov	r0, r6
 800c522:	3b30      	subs	r3, #48	; 0x30
 800c524:	f7ff ff8c 	bl	800c440 <__multadd>
 800c528:	45a0      	cmp	r8, r4
 800c52a:	d1f5      	bne.n	800c518 <__s2b+0x4c>
 800c52c:	f1a5 0408 	sub.w	r4, r5, #8
 800c530:	444c      	add	r4, r9
 800c532:	1b2d      	subs	r5, r5, r4
 800c534:	1963      	adds	r3, r4, r5
 800c536:	42bb      	cmp	r3, r7
 800c538:	db04      	blt.n	800c544 <__s2b+0x78>
 800c53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53e:	2509      	movs	r5, #9
 800c540:	340a      	adds	r4, #10
 800c542:	e7f6      	b.n	800c532 <__s2b+0x66>
 800c544:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c548:	4601      	mov	r1, r0
 800c54a:	220a      	movs	r2, #10
 800c54c:	4630      	mov	r0, r6
 800c54e:	3b30      	subs	r3, #48	; 0x30
 800c550:	f7ff ff76 	bl	800c440 <__multadd>
 800c554:	e7ee      	b.n	800c534 <__s2b+0x68>
 800c556:	bf00      	nop
 800c558:	0801f960 	.word	0x0801f960
 800c55c:	0801f9ec 	.word	0x0801f9ec

0800c560 <__hi0bits>:
 800c560:	0c02      	lsrs	r2, r0, #16
 800c562:	0412      	lsls	r2, r2, #16
 800c564:	4603      	mov	r3, r0
 800c566:	b9ca      	cbnz	r2, 800c59c <__hi0bits+0x3c>
 800c568:	0403      	lsls	r3, r0, #16
 800c56a:	2010      	movs	r0, #16
 800c56c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c570:	bf04      	itt	eq
 800c572:	021b      	lsleq	r3, r3, #8
 800c574:	3008      	addeq	r0, #8
 800c576:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c57a:	bf04      	itt	eq
 800c57c:	011b      	lsleq	r3, r3, #4
 800c57e:	3004      	addeq	r0, #4
 800c580:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c584:	bf04      	itt	eq
 800c586:	009b      	lsleq	r3, r3, #2
 800c588:	3002      	addeq	r0, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	db05      	blt.n	800c59a <__hi0bits+0x3a>
 800c58e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c592:	f100 0001 	add.w	r0, r0, #1
 800c596:	bf08      	it	eq
 800c598:	2020      	moveq	r0, #32
 800c59a:	4770      	bx	lr
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7e5      	b.n	800c56c <__hi0bits+0xc>

0800c5a0 <__lo0bits>:
 800c5a0:	6803      	ldr	r3, [r0, #0]
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	f013 0007 	ands.w	r0, r3, #7
 800c5a8:	d00b      	beq.n	800c5c2 <__lo0bits+0x22>
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d421      	bmi.n	800c5f2 <__lo0bits+0x52>
 800c5ae:	0798      	lsls	r0, r3, #30
 800c5b0:	bf49      	itett	mi
 800c5b2:	085b      	lsrmi	r3, r3, #1
 800c5b4:	089b      	lsrpl	r3, r3, #2
 800c5b6:	2001      	movmi	r0, #1
 800c5b8:	6013      	strmi	r3, [r2, #0]
 800c5ba:	bf5c      	itt	pl
 800c5bc:	2002      	movpl	r0, #2
 800c5be:	6013      	strpl	r3, [r2, #0]
 800c5c0:	4770      	bx	lr
 800c5c2:	b299      	uxth	r1, r3
 800c5c4:	b909      	cbnz	r1, 800c5ca <__lo0bits+0x2a>
 800c5c6:	2010      	movs	r0, #16
 800c5c8:	0c1b      	lsrs	r3, r3, #16
 800c5ca:	b2d9      	uxtb	r1, r3
 800c5cc:	b909      	cbnz	r1, 800c5d2 <__lo0bits+0x32>
 800c5ce:	3008      	adds	r0, #8
 800c5d0:	0a1b      	lsrs	r3, r3, #8
 800c5d2:	0719      	lsls	r1, r3, #28
 800c5d4:	bf04      	itt	eq
 800c5d6:	091b      	lsreq	r3, r3, #4
 800c5d8:	3004      	addeq	r0, #4
 800c5da:	0799      	lsls	r1, r3, #30
 800c5dc:	bf04      	itt	eq
 800c5de:	089b      	lsreq	r3, r3, #2
 800c5e0:	3002      	addeq	r0, #2
 800c5e2:	07d9      	lsls	r1, r3, #31
 800c5e4:	d403      	bmi.n	800c5ee <__lo0bits+0x4e>
 800c5e6:	085b      	lsrs	r3, r3, #1
 800c5e8:	f100 0001 	add.w	r0, r0, #1
 800c5ec:	d003      	beq.n	800c5f6 <__lo0bits+0x56>
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	4770      	bx	lr
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	4770      	bx	lr
 800c5f6:	2020      	movs	r0, #32
 800c5f8:	4770      	bx	lr
	...

0800c5fc <__i2b>:
 800c5fc:	b510      	push	{r4, lr}
 800c5fe:	460c      	mov	r4, r1
 800c600:	2101      	movs	r1, #1
 800c602:	f7ff febb 	bl	800c37c <_Balloc>
 800c606:	4602      	mov	r2, r0
 800c608:	b928      	cbnz	r0, 800c616 <__i2b+0x1a>
 800c60a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c60e:	4b04      	ldr	r3, [pc, #16]	; (800c620 <__i2b+0x24>)
 800c610:	4804      	ldr	r0, [pc, #16]	; (800c624 <__i2b+0x28>)
 800c612:	f000 fdef 	bl	800d1f4 <__assert_func>
 800c616:	2301      	movs	r3, #1
 800c618:	6144      	str	r4, [r0, #20]
 800c61a:	6103      	str	r3, [r0, #16]
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	bf00      	nop
 800c620:	0801f960 	.word	0x0801f960
 800c624:	0801f9ec 	.word	0x0801f9ec

0800c628 <__multiply>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	4691      	mov	r9, r2
 800c62e:	690a      	ldr	r2, [r1, #16]
 800c630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c634:	460c      	mov	r4, r1
 800c636:	429a      	cmp	r2, r3
 800c638:	bfbe      	ittt	lt
 800c63a:	460b      	movlt	r3, r1
 800c63c:	464c      	movlt	r4, r9
 800c63e:	4699      	movlt	r9, r3
 800c640:	6927      	ldr	r7, [r4, #16]
 800c642:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	6861      	ldr	r1, [r4, #4]
 800c64a:	eb07 060a 	add.w	r6, r7, sl
 800c64e:	42b3      	cmp	r3, r6
 800c650:	b085      	sub	sp, #20
 800c652:	bfb8      	it	lt
 800c654:	3101      	addlt	r1, #1
 800c656:	f7ff fe91 	bl	800c37c <_Balloc>
 800c65a:	b930      	cbnz	r0, 800c66a <__multiply+0x42>
 800c65c:	4602      	mov	r2, r0
 800c65e:	f240 115d 	movw	r1, #349	; 0x15d
 800c662:	4b43      	ldr	r3, [pc, #268]	; (800c770 <__multiply+0x148>)
 800c664:	4843      	ldr	r0, [pc, #268]	; (800c774 <__multiply+0x14c>)
 800c666:	f000 fdc5 	bl	800d1f4 <__assert_func>
 800c66a:	f100 0514 	add.w	r5, r0, #20
 800c66e:	462b      	mov	r3, r5
 800c670:	2200      	movs	r2, #0
 800c672:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c676:	4543      	cmp	r3, r8
 800c678:	d321      	bcc.n	800c6be <__multiply+0x96>
 800c67a:	f104 0314 	add.w	r3, r4, #20
 800c67e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c682:	f109 0314 	add.w	r3, r9, #20
 800c686:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c68a:	9202      	str	r2, [sp, #8]
 800c68c:	1b3a      	subs	r2, r7, r4
 800c68e:	3a15      	subs	r2, #21
 800c690:	f022 0203 	bic.w	r2, r2, #3
 800c694:	3204      	adds	r2, #4
 800c696:	f104 0115 	add.w	r1, r4, #21
 800c69a:	428f      	cmp	r7, r1
 800c69c:	bf38      	it	cc
 800c69e:	2204      	movcc	r2, #4
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	9a02      	ldr	r2, [sp, #8]
 800c6a4:	9303      	str	r3, [sp, #12]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d80c      	bhi.n	800c6c4 <__multiply+0x9c>
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	dd03      	ble.n	800c6b6 <__multiply+0x8e>
 800c6ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d059      	beq.n	800c76a <__multiply+0x142>
 800c6b6:	6106      	str	r6, [r0, #16]
 800c6b8:	b005      	add	sp, #20
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	f843 2b04 	str.w	r2, [r3], #4
 800c6c2:	e7d8      	b.n	800c676 <__multiply+0x4e>
 800c6c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6c8:	f1ba 0f00 	cmp.w	sl, #0
 800c6cc:	d023      	beq.n	800c716 <__multiply+0xee>
 800c6ce:	46a9      	mov	r9, r5
 800c6d0:	f04f 0c00 	mov.w	ip, #0
 800c6d4:	f104 0e14 	add.w	lr, r4, #20
 800c6d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6dc:	f8d9 1000 	ldr.w	r1, [r9]
 800c6e0:	fa1f fb82 	uxth.w	fp, r2
 800c6e4:	b289      	uxth	r1, r1
 800c6e6:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6ea:	4461      	add	r1, ip
 800c6ec:	f8d9 c000 	ldr.w	ip, [r9]
 800c6f0:	0c12      	lsrs	r2, r2, #16
 800c6f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c6f6:	fb0a c202 	mla	r2, sl, r2, ip
 800c6fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6fe:	b289      	uxth	r1, r1
 800c700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c704:	4577      	cmp	r7, lr
 800c706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c70a:	f849 1b04 	str.w	r1, [r9], #4
 800c70e:	d8e3      	bhi.n	800c6d8 <__multiply+0xb0>
 800c710:	9a01      	ldr	r2, [sp, #4]
 800c712:	f845 c002 	str.w	ip, [r5, r2]
 800c716:	9a03      	ldr	r2, [sp, #12]
 800c718:	3304      	adds	r3, #4
 800c71a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c71e:	f1b9 0f00 	cmp.w	r9, #0
 800c722:	d020      	beq.n	800c766 <__multiply+0x13e>
 800c724:	46ae      	mov	lr, r5
 800c726:	f04f 0a00 	mov.w	sl, #0
 800c72a:	6829      	ldr	r1, [r5, #0]
 800c72c:	f104 0c14 	add.w	ip, r4, #20
 800c730:	f8bc b000 	ldrh.w	fp, [ip]
 800c734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c738:	b289      	uxth	r1, r1
 800c73a:	fb09 220b 	mla	r2, r9, fp, r2
 800c73e:	4492      	add	sl, r2
 800c740:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c744:	f84e 1b04 	str.w	r1, [lr], #4
 800c748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c74c:	f8be 1000 	ldrh.w	r1, [lr]
 800c750:	0c12      	lsrs	r2, r2, #16
 800c752:	fb09 1102 	mla	r1, r9, r2, r1
 800c756:	4567      	cmp	r7, ip
 800c758:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c75c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c760:	d8e6      	bhi.n	800c730 <__multiply+0x108>
 800c762:	9a01      	ldr	r2, [sp, #4]
 800c764:	50a9      	str	r1, [r5, r2]
 800c766:	3504      	adds	r5, #4
 800c768:	e79b      	b.n	800c6a2 <__multiply+0x7a>
 800c76a:	3e01      	subs	r6, #1
 800c76c:	e79d      	b.n	800c6aa <__multiply+0x82>
 800c76e:	bf00      	nop
 800c770:	0801f960 	.word	0x0801f960
 800c774:	0801f9ec 	.word	0x0801f9ec

0800c778 <__pow5mult>:
 800c778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c77c:	4615      	mov	r5, r2
 800c77e:	f012 0203 	ands.w	r2, r2, #3
 800c782:	4606      	mov	r6, r0
 800c784:	460f      	mov	r7, r1
 800c786:	d007      	beq.n	800c798 <__pow5mult+0x20>
 800c788:	4c25      	ldr	r4, [pc, #148]	; (800c820 <__pow5mult+0xa8>)
 800c78a:	3a01      	subs	r2, #1
 800c78c:	2300      	movs	r3, #0
 800c78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c792:	f7ff fe55 	bl	800c440 <__multadd>
 800c796:	4607      	mov	r7, r0
 800c798:	10ad      	asrs	r5, r5, #2
 800c79a:	d03d      	beq.n	800c818 <__pow5mult+0xa0>
 800c79c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c79e:	b97c      	cbnz	r4, 800c7c0 <__pow5mult+0x48>
 800c7a0:	2010      	movs	r0, #16
 800c7a2:	f7ff fdb5 	bl	800c310 <malloc>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	6270      	str	r0, [r6, #36]	; 0x24
 800c7aa:	b928      	cbnz	r0, 800c7b8 <__pow5mult+0x40>
 800c7ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7b0:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <__pow5mult+0xac>)
 800c7b2:	481d      	ldr	r0, [pc, #116]	; (800c828 <__pow5mult+0xb0>)
 800c7b4:	f000 fd1e 	bl	800d1f4 <__assert_func>
 800c7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7bc:	6004      	str	r4, [r0, #0]
 800c7be:	60c4      	str	r4, [r0, #12]
 800c7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7c8:	b94c      	cbnz	r4, 800c7de <__pow5mult+0x66>
 800c7ca:	f240 2171 	movw	r1, #625	; 0x271
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7ff ff14 	bl	800c5fc <__i2b>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7dc:	6003      	str	r3, [r0, #0]
 800c7de:	f04f 0900 	mov.w	r9, #0
 800c7e2:	07eb      	lsls	r3, r5, #31
 800c7e4:	d50a      	bpl.n	800c7fc <__pow5mult+0x84>
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ff1c 	bl	800c628 <__multiply>
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff fe01 	bl	800c3fc <_Bfree>
 800c7fa:	4647      	mov	r7, r8
 800c7fc:	106d      	asrs	r5, r5, #1
 800c7fe:	d00b      	beq.n	800c818 <__pow5mult+0xa0>
 800c800:	6820      	ldr	r0, [r4, #0]
 800c802:	b938      	cbnz	r0, 800c814 <__pow5mult+0x9c>
 800c804:	4622      	mov	r2, r4
 800c806:	4621      	mov	r1, r4
 800c808:	4630      	mov	r0, r6
 800c80a:	f7ff ff0d 	bl	800c628 <__multiply>
 800c80e:	6020      	str	r0, [r4, #0]
 800c810:	f8c0 9000 	str.w	r9, [r0]
 800c814:	4604      	mov	r4, r0
 800c816:	e7e4      	b.n	800c7e2 <__pow5mult+0x6a>
 800c818:	4638      	mov	r0, r7
 800c81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c81e:	bf00      	nop
 800c820:	0801fb38 	.word	0x0801fb38
 800c824:	0801f8ee 	.word	0x0801f8ee
 800c828:	0801f9ec 	.word	0x0801f9ec

0800c82c <__lshift>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	460c      	mov	r4, r1
 800c832:	4607      	mov	r7, r0
 800c834:	4691      	mov	r9, r2
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	6849      	ldr	r1, [r1, #4]
 800c83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c83e:	68a3      	ldr	r3, [r4, #8]
 800c840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c844:	f108 0601 	add.w	r6, r8, #1
 800c848:	42b3      	cmp	r3, r6
 800c84a:	db0b      	blt.n	800c864 <__lshift+0x38>
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff fd95 	bl	800c37c <_Balloc>
 800c852:	4605      	mov	r5, r0
 800c854:	b948      	cbnz	r0, 800c86a <__lshift+0x3e>
 800c856:	4602      	mov	r2, r0
 800c858:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c85c:	4b29      	ldr	r3, [pc, #164]	; (800c904 <__lshift+0xd8>)
 800c85e:	482a      	ldr	r0, [pc, #168]	; (800c908 <__lshift+0xdc>)
 800c860:	f000 fcc8 	bl	800d1f4 <__assert_func>
 800c864:	3101      	adds	r1, #1
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	e7ee      	b.n	800c848 <__lshift+0x1c>
 800c86a:	2300      	movs	r3, #0
 800c86c:	f100 0114 	add.w	r1, r0, #20
 800c870:	f100 0210 	add.w	r2, r0, #16
 800c874:	4618      	mov	r0, r3
 800c876:	4553      	cmp	r3, sl
 800c878:	db37      	blt.n	800c8ea <__lshift+0xbe>
 800c87a:	6920      	ldr	r0, [r4, #16]
 800c87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c880:	f104 0314 	add.w	r3, r4, #20
 800c884:	f019 091f 	ands.w	r9, r9, #31
 800c888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c88c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c890:	d02f      	beq.n	800c8f2 <__lshift+0xc6>
 800c892:	468a      	mov	sl, r1
 800c894:	f04f 0c00 	mov.w	ip, #0
 800c898:	f1c9 0e20 	rsb	lr, r9, #32
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	fa02 f209 	lsl.w	r2, r2, r9
 800c8a2:	ea42 020c 	orr.w	r2, r2, ip
 800c8a6:	f84a 2b04 	str.w	r2, [sl], #4
 800c8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ae:	4298      	cmp	r0, r3
 800c8b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8b4:	d8f2      	bhi.n	800c89c <__lshift+0x70>
 800c8b6:	1b03      	subs	r3, r0, r4
 800c8b8:	3b15      	subs	r3, #21
 800c8ba:	f023 0303 	bic.w	r3, r3, #3
 800c8be:	3304      	adds	r3, #4
 800c8c0:	f104 0215 	add.w	r2, r4, #21
 800c8c4:	4290      	cmp	r0, r2
 800c8c6:	bf38      	it	cc
 800c8c8:	2304      	movcc	r3, #4
 800c8ca:	f841 c003 	str.w	ip, [r1, r3]
 800c8ce:	f1bc 0f00 	cmp.w	ip, #0
 800c8d2:	d001      	beq.n	800c8d8 <__lshift+0xac>
 800c8d4:	f108 0602 	add.w	r6, r8, #2
 800c8d8:	3e01      	subs	r6, #1
 800c8da:	4638      	mov	r0, r7
 800c8dc:	4621      	mov	r1, r4
 800c8de:	612e      	str	r6, [r5, #16]
 800c8e0:	f7ff fd8c 	bl	800c3fc <_Bfree>
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	e7c1      	b.n	800c876 <__lshift+0x4a>
 800c8f2:	3904      	subs	r1, #4
 800c8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f8:	4298      	cmp	r0, r3
 800c8fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8fe:	d8f9      	bhi.n	800c8f4 <__lshift+0xc8>
 800c900:	e7ea      	b.n	800c8d8 <__lshift+0xac>
 800c902:	bf00      	nop
 800c904:	0801f960 	.word	0x0801f960
 800c908:	0801f9ec 	.word	0x0801f9ec

0800c90c <__mcmp>:
 800c90c:	4603      	mov	r3, r0
 800c90e:	690a      	ldr	r2, [r1, #16]
 800c910:	6900      	ldr	r0, [r0, #16]
 800c912:	b530      	push	{r4, r5, lr}
 800c914:	1a80      	subs	r0, r0, r2
 800c916:	d10d      	bne.n	800c934 <__mcmp+0x28>
 800c918:	3314      	adds	r3, #20
 800c91a:	3114      	adds	r1, #20
 800c91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c92c:	4295      	cmp	r5, r2
 800c92e:	d002      	beq.n	800c936 <__mcmp+0x2a>
 800c930:	d304      	bcc.n	800c93c <__mcmp+0x30>
 800c932:	2001      	movs	r0, #1
 800c934:	bd30      	pop	{r4, r5, pc}
 800c936:	42a3      	cmp	r3, r4
 800c938:	d3f4      	bcc.n	800c924 <__mcmp+0x18>
 800c93a:	e7fb      	b.n	800c934 <__mcmp+0x28>
 800c93c:	f04f 30ff 	mov.w	r0, #4294967295
 800c940:	e7f8      	b.n	800c934 <__mcmp+0x28>
	...

0800c944 <__mdiff>:
 800c944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	460d      	mov	r5, r1
 800c94a:	4607      	mov	r7, r0
 800c94c:	4611      	mov	r1, r2
 800c94e:	4628      	mov	r0, r5
 800c950:	4614      	mov	r4, r2
 800c952:	f7ff ffdb 	bl	800c90c <__mcmp>
 800c956:	1e06      	subs	r6, r0, #0
 800c958:	d111      	bne.n	800c97e <__mdiff+0x3a>
 800c95a:	4631      	mov	r1, r6
 800c95c:	4638      	mov	r0, r7
 800c95e:	f7ff fd0d 	bl	800c37c <_Balloc>
 800c962:	4602      	mov	r2, r0
 800c964:	b928      	cbnz	r0, 800c972 <__mdiff+0x2e>
 800c966:	f240 2132 	movw	r1, #562	; 0x232
 800c96a:	4b3a      	ldr	r3, [pc, #232]	; (800ca54 <__mdiff+0x110>)
 800c96c:	483a      	ldr	r0, [pc, #232]	; (800ca58 <__mdiff+0x114>)
 800c96e:	f000 fc41 	bl	800d1f4 <__assert_func>
 800c972:	2301      	movs	r3, #1
 800c974:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c978:	4610      	mov	r0, r2
 800c97a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97e:	bfa4      	itt	ge
 800c980:	4623      	movge	r3, r4
 800c982:	462c      	movge	r4, r5
 800c984:	4638      	mov	r0, r7
 800c986:	6861      	ldr	r1, [r4, #4]
 800c988:	bfa6      	itte	ge
 800c98a:	461d      	movge	r5, r3
 800c98c:	2600      	movge	r6, #0
 800c98e:	2601      	movlt	r6, #1
 800c990:	f7ff fcf4 	bl	800c37c <_Balloc>
 800c994:	4602      	mov	r2, r0
 800c996:	b918      	cbnz	r0, 800c9a0 <__mdiff+0x5c>
 800c998:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c99c:	4b2d      	ldr	r3, [pc, #180]	; (800ca54 <__mdiff+0x110>)
 800c99e:	e7e5      	b.n	800c96c <__mdiff+0x28>
 800c9a0:	f102 0814 	add.w	r8, r2, #20
 800c9a4:	46c2      	mov	sl, r8
 800c9a6:	f04f 0c00 	mov.w	ip, #0
 800c9aa:	6927      	ldr	r7, [r4, #16]
 800c9ac:	60c6      	str	r6, [r0, #12]
 800c9ae:	692e      	ldr	r6, [r5, #16]
 800c9b0:	f104 0014 	add.w	r0, r4, #20
 800c9b4:	f105 0914 	add.w	r9, r5, #20
 800c9b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9c0:	3410      	adds	r4, #16
 800c9c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c9c6:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9ca:	fa1f f18b 	uxth.w	r1, fp
 800c9ce:	448c      	add	ip, r1
 800c9d0:	b299      	uxth	r1, r3
 800c9d2:	0c1b      	lsrs	r3, r3, #16
 800c9d4:	ebac 0101 	sub.w	r1, ip, r1
 800c9d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c9e0:	b289      	uxth	r1, r1
 800c9e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c9e6:	454e      	cmp	r6, r9
 800c9e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c9ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c9f0:	d8e7      	bhi.n	800c9c2 <__mdiff+0x7e>
 800c9f2:	1b73      	subs	r3, r6, r5
 800c9f4:	3b15      	subs	r3, #21
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	3515      	adds	r5, #21
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	42ae      	cmp	r6, r5
 800ca00:	bf38      	it	cc
 800ca02:	2304      	movcc	r3, #4
 800ca04:	4418      	add	r0, r3
 800ca06:	4443      	add	r3, r8
 800ca08:	461e      	mov	r6, r3
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	4575      	cmp	r5, lr
 800ca0e:	d30e      	bcc.n	800ca2e <__mdiff+0xea>
 800ca10:	f10e 0103 	add.w	r1, lr, #3
 800ca14:	1a09      	subs	r1, r1, r0
 800ca16:	f021 0103 	bic.w	r1, r1, #3
 800ca1a:	3803      	subs	r0, #3
 800ca1c:	4586      	cmp	lr, r0
 800ca1e:	bf38      	it	cc
 800ca20:	2100      	movcc	r1, #0
 800ca22:	4419      	add	r1, r3
 800ca24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ca28:	b18b      	cbz	r3, 800ca4e <__mdiff+0x10a>
 800ca2a:	6117      	str	r7, [r2, #16]
 800ca2c:	e7a4      	b.n	800c978 <__mdiff+0x34>
 800ca2e:	f855 8b04 	ldr.w	r8, [r5], #4
 800ca32:	fa1f f188 	uxth.w	r1, r8
 800ca36:	4461      	add	r1, ip
 800ca38:	140c      	asrs	r4, r1, #16
 800ca3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca3e:	b289      	uxth	r1, r1
 800ca40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ca44:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ca48:	f846 1b04 	str.w	r1, [r6], #4
 800ca4c:	e7de      	b.n	800ca0c <__mdiff+0xc8>
 800ca4e:	3f01      	subs	r7, #1
 800ca50:	e7e8      	b.n	800ca24 <__mdiff+0xe0>
 800ca52:	bf00      	nop
 800ca54:	0801f960 	.word	0x0801f960
 800ca58:	0801f9ec 	.word	0x0801f9ec

0800ca5c <__ulp>:
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <__ulp+0x48>)
 800ca5e:	400b      	ands	r3, r1
 800ca60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	dd02      	ble.n	800ca6e <__ulp+0x12>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4770      	bx	lr
 800ca6e:	425b      	negs	r3, r3
 800ca70:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ca74:	f04f 0000 	mov.w	r0, #0
 800ca78:	f04f 0100 	mov.w	r1, #0
 800ca7c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca80:	da04      	bge.n	800ca8c <__ulp+0x30>
 800ca82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca86:	fa43 f102 	asr.w	r1, r3, r2
 800ca8a:	4770      	bx	lr
 800ca8c:	f1a2 0314 	sub.w	r3, r2, #20
 800ca90:	2b1e      	cmp	r3, #30
 800ca92:	bfd6      	itet	le
 800ca94:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ca98:	2301      	movgt	r3, #1
 800ca9a:	fa22 f303 	lsrle.w	r3, r2, r3
 800ca9e:	4618      	mov	r0, r3
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	7ff00000 	.word	0x7ff00000

0800caa8 <__b2d>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	6907      	ldr	r7, [r0, #16]
 800caae:	f100 0914 	add.w	r9, r0, #20
 800cab2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cab6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800caba:	f1a7 0804 	sub.w	r8, r7, #4
 800cabe:	4630      	mov	r0, r6
 800cac0:	f7ff fd4e 	bl	800c560 <__hi0bits>
 800cac4:	f1c0 0320 	rsb	r3, r0, #32
 800cac8:	280a      	cmp	r0, #10
 800caca:	600b      	str	r3, [r1, #0]
 800cacc:	491f      	ldr	r1, [pc, #124]	; (800cb4c <__b2d+0xa4>)
 800cace:	dc17      	bgt.n	800cb00 <__b2d+0x58>
 800cad0:	45c1      	cmp	r9, r8
 800cad2:	bf28      	it	cs
 800cad4:	2200      	movcs	r2, #0
 800cad6:	f1c0 0c0b 	rsb	ip, r0, #11
 800cada:	fa26 f30c 	lsr.w	r3, r6, ip
 800cade:	bf38      	it	cc
 800cae0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cae4:	ea43 0501 	orr.w	r5, r3, r1
 800cae8:	f100 0315 	add.w	r3, r0, #21
 800caec:	fa06 f303 	lsl.w	r3, r6, r3
 800caf0:	fa22 f20c 	lsr.w	r2, r2, ip
 800caf4:	ea43 0402 	orr.w	r4, r3, r2
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb00:	45c1      	cmp	r9, r8
 800cb02:	bf2e      	itee	cs
 800cb04:	2200      	movcs	r2, #0
 800cb06:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cb0a:	f1a7 0808 	subcc.w	r8, r7, #8
 800cb0e:	f1b0 030b 	subs.w	r3, r0, #11
 800cb12:	d016      	beq.n	800cb42 <__b2d+0x9a>
 800cb14:	f1c3 0720 	rsb	r7, r3, #32
 800cb18:	fa22 f107 	lsr.w	r1, r2, r7
 800cb1c:	45c8      	cmp	r8, r9
 800cb1e:	fa06 f603 	lsl.w	r6, r6, r3
 800cb22:	ea46 0601 	orr.w	r6, r6, r1
 800cb26:	bf94      	ite	ls
 800cb28:	2100      	movls	r1, #0
 800cb2a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cb2e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cb32:	fa02 f003 	lsl.w	r0, r2, r3
 800cb36:	40f9      	lsrs	r1, r7
 800cb38:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cb3c:	ea40 0401 	orr.w	r4, r0, r1
 800cb40:	e7da      	b.n	800caf8 <__b2d+0x50>
 800cb42:	4614      	mov	r4, r2
 800cb44:	ea46 0501 	orr.w	r5, r6, r1
 800cb48:	e7d6      	b.n	800caf8 <__b2d+0x50>
 800cb4a:	bf00      	nop
 800cb4c:	3ff00000 	.word	0x3ff00000

0800cb50 <__d2b>:
 800cb50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cb54:	2101      	movs	r1, #1
 800cb56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cb5a:	4690      	mov	r8, r2
 800cb5c:	461d      	mov	r5, r3
 800cb5e:	f7ff fc0d 	bl	800c37c <_Balloc>
 800cb62:	4604      	mov	r4, r0
 800cb64:	b930      	cbnz	r0, 800cb74 <__d2b+0x24>
 800cb66:	4602      	mov	r2, r0
 800cb68:	f240 310a 	movw	r1, #778	; 0x30a
 800cb6c:	4b24      	ldr	r3, [pc, #144]	; (800cc00 <__d2b+0xb0>)
 800cb6e:	4825      	ldr	r0, [pc, #148]	; (800cc04 <__d2b+0xb4>)
 800cb70:	f000 fb40 	bl	800d1f4 <__assert_func>
 800cb74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cb78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cb7c:	bb2d      	cbnz	r5, 800cbca <__d2b+0x7a>
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	f1b8 0300 	subs.w	r3, r8, #0
 800cb84:	d026      	beq.n	800cbd4 <__d2b+0x84>
 800cb86:	4668      	mov	r0, sp
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	f7ff fd09 	bl	800c5a0 <__lo0bits>
 800cb8e:	9900      	ldr	r1, [sp, #0]
 800cb90:	b1f0      	cbz	r0, 800cbd0 <__d2b+0x80>
 800cb92:	9a01      	ldr	r2, [sp, #4]
 800cb94:	f1c0 0320 	rsb	r3, r0, #32
 800cb98:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9c:	430b      	orrs	r3, r1
 800cb9e:	40c2      	lsrs	r2, r0
 800cba0:	6163      	str	r3, [r4, #20]
 800cba2:	9201      	str	r2, [sp, #4]
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bf14      	ite	ne
 800cbaa:	2102      	movne	r1, #2
 800cbac:	2101      	moveq	r1, #1
 800cbae:	61a3      	str	r3, [r4, #24]
 800cbb0:	6121      	str	r1, [r4, #16]
 800cbb2:	b1c5      	cbz	r5, 800cbe6 <__d2b+0x96>
 800cbb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbb8:	4405      	add	r5, r0
 800cbba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbbe:	603d      	str	r5, [r7, #0]
 800cbc0:	6030      	str	r0, [r6, #0]
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	b002      	add	sp, #8
 800cbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbce:	e7d6      	b.n	800cb7e <__d2b+0x2e>
 800cbd0:	6161      	str	r1, [r4, #20]
 800cbd2:	e7e7      	b.n	800cba4 <__d2b+0x54>
 800cbd4:	a801      	add	r0, sp, #4
 800cbd6:	f7ff fce3 	bl	800c5a0 <__lo0bits>
 800cbda:	2101      	movs	r1, #1
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	6121      	str	r1, [r4, #16]
 800cbe0:	6163      	str	r3, [r4, #20]
 800cbe2:	3020      	adds	r0, #32
 800cbe4:	e7e5      	b.n	800cbb2 <__d2b+0x62>
 800cbe6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cbea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbee:	6038      	str	r0, [r7, #0]
 800cbf0:	6918      	ldr	r0, [r3, #16]
 800cbf2:	f7ff fcb5 	bl	800c560 <__hi0bits>
 800cbf6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cbfa:	6031      	str	r1, [r6, #0]
 800cbfc:	e7e1      	b.n	800cbc2 <__d2b+0x72>
 800cbfe:	bf00      	nop
 800cc00:	0801f960 	.word	0x0801f960
 800cc04:	0801f9ec 	.word	0x0801f9ec

0800cc08 <__ratio>:
 800cc08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4688      	mov	r8, r1
 800cc0e:	4669      	mov	r1, sp
 800cc10:	4681      	mov	r9, r0
 800cc12:	f7ff ff49 	bl	800caa8 <__b2d>
 800cc16:	460f      	mov	r7, r1
 800cc18:	4604      	mov	r4, r0
 800cc1a:	460d      	mov	r5, r1
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	a901      	add	r1, sp, #4
 800cc20:	f7ff ff42 	bl	800caa8 <__b2d>
 800cc24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cc2c:	468b      	mov	fp, r1
 800cc2e:	eba3 0c02 	sub.w	ip, r3, r2
 800cc32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	bfd5      	itete	le
 800cc40:	460a      	movle	r2, r1
 800cc42:	462a      	movgt	r2, r5
 800cc44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc4c:	bfd8      	it	le
 800cc4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cc52:	465b      	mov	r3, fp
 800cc54:	4602      	mov	r2, r0
 800cc56:	4639      	mov	r1, r7
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f7f9 ffb9 	bl	8006bd0 <__aeabi_ddiv>
 800cc5e:	b003      	add	sp, #12
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc64 <__copybits>:
 800cc64:	3901      	subs	r1, #1
 800cc66:	b570      	push	{r4, r5, r6, lr}
 800cc68:	1149      	asrs	r1, r1, #5
 800cc6a:	6914      	ldr	r4, [r2, #16]
 800cc6c:	3101      	adds	r1, #1
 800cc6e:	f102 0314 	add.w	r3, r2, #20
 800cc72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc7a:	1f05      	subs	r5, r0, #4
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	d30c      	bcc.n	800cc9a <__copybits+0x36>
 800cc80:	1aa3      	subs	r3, r4, r2
 800cc82:	3b11      	subs	r3, #17
 800cc84:	f023 0303 	bic.w	r3, r3, #3
 800cc88:	3211      	adds	r2, #17
 800cc8a:	42a2      	cmp	r2, r4
 800cc8c:	bf88      	it	hi
 800cc8e:	2300      	movhi	r3, #0
 800cc90:	4418      	add	r0, r3
 800cc92:	2300      	movs	r3, #0
 800cc94:	4288      	cmp	r0, r1
 800cc96:	d305      	bcc.n	800cca4 <__copybits+0x40>
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cca2:	e7eb      	b.n	800cc7c <__copybits+0x18>
 800cca4:	f840 3b04 	str.w	r3, [r0], #4
 800cca8:	e7f4      	b.n	800cc94 <__copybits+0x30>

0800ccaa <__any_on>:
 800ccaa:	f100 0214 	add.w	r2, r0, #20
 800ccae:	6900      	ldr	r0, [r0, #16]
 800ccb0:	114b      	asrs	r3, r1, #5
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	db11      	blt.n	800ccdc <__any_on+0x32>
 800ccb8:	dd0a      	ble.n	800ccd0 <__any_on+0x26>
 800ccba:	f011 011f 	ands.w	r1, r1, #31
 800ccbe:	d007      	beq.n	800ccd0 <__any_on+0x26>
 800ccc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccc4:	fa24 f001 	lsr.w	r0, r4, r1
 800ccc8:	fa00 f101 	lsl.w	r1, r0, r1
 800cccc:	428c      	cmp	r4, r1
 800ccce:	d10b      	bne.n	800cce8 <__any_on+0x3e>
 800ccd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d803      	bhi.n	800cce0 <__any_on+0x36>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	bd10      	pop	{r4, pc}
 800ccdc:	4603      	mov	r3, r0
 800ccde:	e7f7      	b.n	800ccd0 <__any_on+0x26>
 800cce0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cce4:	2900      	cmp	r1, #0
 800cce6:	d0f5      	beq.n	800ccd4 <__any_on+0x2a>
 800cce8:	2001      	movs	r0, #1
 800ccea:	e7f6      	b.n	800ccda <__any_on+0x30>

0800ccec <_calloc_r>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	fba1 5402 	umull	r5, r4, r1, r2
 800ccf2:	b934      	cbnz	r4, 800cd02 <_calloc_r+0x16>
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	f000 f875 	bl	800cde4 <_malloc_r>
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	b928      	cbnz	r0, 800cd0a <_calloc_r+0x1e>
 800ccfe:	4630      	mov	r0, r6
 800cd00:	bd70      	pop	{r4, r5, r6, pc}
 800cd02:	220c      	movs	r2, #12
 800cd04:	2600      	movs	r6, #0
 800cd06:	6002      	str	r2, [r0, #0]
 800cd08:	e7f9      	b.n	800ccfe <_calloc_r+0x12>
 800cd0a:	462a      	mov	r2, r5
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f7fc fbe7 	bl	80094e0 <memset>
 800cd12:	e7f4      	b.n	800ccfe <_calloc_r+0x12>

0800cd14 <_free_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4605      	mov	r5, r0
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	d040      	beq.n	800cd9e <_free_r+0x8a>
 800cd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd20:	1f0c      	subs	r4, r1, #4
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bfb8      	it	lt
 800cd26:	18e4      	addlt	r4, r4, r3
 800cd28:	f000 faae 	bl	800d288 <__malloc_lock>
 800cd2c:	4a1c      	ldr	r2, [pc, #112]	; (800cda0 <_free_r+0x8c>)
 800cd2e:	6813      	ldr	r3, [r2, #0]
 800cd30:	b933      	cbnz	r3, 800cd40 <_free_r+0x2c>
 800cd32:	6063      	str	r3, [r4, #4]
 800cd34:	6014      	str	r4, [r2, #0]
 800cd36:	4628      	mov	r0, r5
 800cd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd3c:	f000 baaa 	b.w	800d294 <__malloc_unlock>
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	d908      	bls.n	800cd56 <_free_r+0x42>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	1821      	adds	r1, r4, r0
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	bf01      	itttt	eq
 800cd4c:	6819      	ldreq	r1, [r3, #0]
 800cd4e:	685b      	ldreq	r3, [r3, #4]
 800cd50:	1809      	addeq	r1, r1, r0
 800cd52:	6021      	streq	r1, [r4, #0]
 800cd54:	e7ed      	b.n	800cd32 <_free_r+0x1e>
 800cd56:	461a      	mov	r2, r3
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	b10b      	cbz	r3, 800cd60 <_free_r+0x4c>
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	d9fa      	bls.n	800cd56 <_free_r+0x42>
 800cd60:	6811      	ldr	r1, [r2, #0]
 800cd62:	1850      	adds	r0, r2, r1
 800cd64:	42a0      	cmp	r0, r4
 800cd66:	d10b      	bne.n	800cd80 <_free_r+0x6c>
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	4401      	add	r1, r0
 800cd6c:	1850      	adds	r0, r2, r1
 800cd6e:	4283      	cmp	r3, r0
 800cd70:	6011      	str	r1, [r2, #0]
 800cd72:	d1e0      	bne.n	800cd36 <_free_r+0x22>
 800cd74:	6818      	ldr	r0, [r3, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	4401      	add	r1, r0
 800cd7a:	6011      	str	r1, [r2, #0]
 800cd7c:	6053      	str	r3, [r2, #4]
 800cd7e:	e7da      	b.n	800cd36 <_free_r+0x22>
 800cd80:	d902      	bls.n	800cd88 <_free_r+0x74>
 800cd82:	230c      	movs	r3, #12
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	e7d6      	b.n	800cd36 <_free_r+0x22>
 800cd88:	6820      	ldr	r0, [r4, #0]
 800cd8a:	1821      	adds	r1, r4, r0
 800cd8c:	428b      	cmp	r3, r1
 800cd8e:	bf01      	itttt	eq
 800cd90:	6819      	ldreq	r1, [r3, #0]
 800cd92:	685b      	ldreq	r3, [r3, #4]
 800cd94:	1809      	addeq	r1, r1, r0
 800cd96:	6021      	streq	r1, [r4, #0]
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	6054      	str	r4, [r2, #4]
 800cd9c:	e7cb      	b.n	800cd36 <_free_r+0x22>
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	20000978 	.word	0x20000978

0800cda4 <sbrk_aligned>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	4e0e      	ldr	r6, [pc, #56]	; (800cde0 <sbrk_aligned+0x3c>)
 800cda8:	460c      	mov	r4, r1
 800cdaa:	6831      	ldr	r1, [r6, #0]
 800cdac:	4605      	mov	r5, r0
 800cdae:	b911      	cbnz	r1, 800cdb6 <sbrk_aligned+0x12>
 800cdb0:	f000 f9ee 	bl	800d190 <_sbrk_r>
 800cdb4:	6030      	str	r0, [r6, #0]
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f000 f9e9 	bl	800d190 <_sbrk_r>
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	d00a      	beq.n	800cdd8 <sbrk_aligned+0x34>
 800cdc2:	1cc4      	adds	r4, r0, #3
 800cdc4:	f024 0403 	bic.w	r4, r4, #3
 800cdc8:	42a0      	cmp	r0, r4
 800cdca:	d007      	beq.n	800cddc <sbrk_aligned+0x38>
 800cdcc:	1a21      	subs	r1, r4, r0
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f000 f9de 	bl	800d190 <_sbrk_r>
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d101      	bne.n	800cddc <sbrk_aligned+0x38>
 800cdd8:	f04f 34ff 	mov.w	r4, #4294967295
 800cddc:	4620      	mov	r0, r4
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	2000097c 	.word	0x2000097c

0800cde4 <_malloc_r>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	1ccd      	adds	r5, r1, #3
 800cdea:	f025 0503 	bic.w	r5, r5, #3
 800cdee:	3508      	adds	r5, #8
 800cdf0:	2d0c      	cmp	r5, #12
 800cdf2:	bf38      	it	cc
 800cdf4:	250c      	movcc	r5, #12
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	4607      	mov	r7, r0
 800cdfa:	db01      	blt.n	800ce00 <_malloc_r+0x1c>
 800cdfc:	42a9      	cmp	r1, r5
 800cdfe:	d905      	bls.n	800ce0c <_malloc_r+0x28>
 800ce00:	230c      	movs	r3, #12
 800ce02:	2600      	movs	r6, #0
 800ce04:	603b      	str	r3, [r7, #0]
 800ce06:	4630      	mov	r0, r6
 800ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0c:	4e2e      	ldr	r6, [pc, #184]	; (800cec8 <_malloc_r+0xe4>)
 800ce0e:	f000 fa3b 	bl	800d288 <__malloc_lock>
 800ce12:	6833      	ldr	r3, [r6, #0]
 800ce14:	461c      	mov	r4, r3
 800ce16:	bb34      	cbnz	r4, 800ce66 <_malloc_r+0x82>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f7ff ffc2 	bl	800cda4 <sbrk_aligned>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	4604      	mov	r4, r0
 800ce24:	d14d      	bne.n	800cec2 <_malloc_r+0xde>
 800ce26:	6834      	ldr	r4, [r6, #0]
 800ce28:	4626      	mov	r6, r4
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	d140      	bne.n	800ceb0 <_malloc_r+0xcc>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	4631      	mov	r1, r6
 800ce32:	4638      	mov	r0, r7
 800ce34:	eb04 0803 	add.w	r8, r4, r3
 800ce38:	f000 f9aa 	bl	800d190 <_sbrk_r>
 800ce3c:	4580      	cmp	r8, r0
 800ce3e:	d13a      	bne.n	800ceb6 <_malloc_r+0xd2>
 800ce40:	6821      	ldr	r1, [r4, #0]
 800ce42:	3503      	adds	r5, #3
 800ce44:	1a6d      	subs	r5, r5, r1
 800ce46:	f025 0503 	bic.w	r5, r5, #3
 800ce4a:	3508      	adds	r5, #8
 800ce4c:	2d0c      	cmp	r5, #12
 800ce4e:	bf38      	it	cc
 800ce50:	250c      	movcc	r5, #12
 800ce52:	4638      	mov	r0, r7
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7ff ffa5 	bl	800cda4 <sbrk_aligned>
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	d02b      	beq.n	800ceb6 <_malloc_r+0xd2>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	442b      	add	r3, r5
 800ce62:	6023      	str	r3, [r4, #0]
 800ce64:	e00e      	b.n	800ce84 <_malloc_r+0xa0>
 800ce66:	6822      	ldr	r2, [r4, #0]
 800ce68:	1b52      	subs	r2, r2, r5
 800ce6a:	d41e      	bmi.n	800ceaa <_malloc_r+0xc6>
 800ce6c:	2a0b      	cmp	r2, #11
 800ce6e:	d916      	bls.n	800ce9e <_malloc_r+0xba>
 800ce70:	1961      	adds	r1, r4, r5
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	6025      	str	r5, [r4, #0]
 800ce76:	bf18      	it	ne
 800ce78:	6059      	strne	r1, [r3, #4]
 800ce7a:	6863      	ldr	r3, [r4, #4]
 800ce7c:	bf08      	it	eq
 800ce7e:	6031      	streq	r1, [r6, #0]
 800ce80:	5162      	str	r2, [r4, r5]
 800ce82:	604b      	str	r3, [r1, #4]
 800ce84:	4638      	mov	r0, r7
 800ce86:	f104 060b 	add.w	r6, r4, #11
 800ce8a:	f000 fa03 	bl	800d294 <__malloc_unlock>
 800ce8e:	f026 0607 	bic.w	r6, r6, #7
 800ce92:	1d23      	adds	r3, r4, #4
 800ce94:	1af2      	subs	r2, r6, r3
 800ce96:	d0b6      	beq.n	800ce06 <_malloc_r+0x22>
 800ce98:	1b9b      	subs	r3, r3, r6
 800ce9a:	50a3      	str	r3, [r4, r2]
 800ce9c:	e7b3      	b.n	800ce06 <_malloc_r+0x22>
 800ce9e:	6862      	ldr	r2, [r4, #4]
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	bf0c      	ite	eq
 800cea4:	6032      	streq	r2, [r6, #0]
 800cea6:	605a      	strne	r2, [r3, #4]
 800cea8:	e7ec      	b.n	800ce84 <_malloc_r+0xa0>
 800ceaa:	4623      	mov	r3, r4
 800ceac:	6864      	ldr	r4, [r4, #4]
 800ceae:	e7b2      	b.n	800ce16 <_malloc_r+0x32>
 800ceb0:	4634      	mov	r4, r6
 800ceb2:	6876      	ldr	r6, [r6, #4]
 800ceb4:	e7b9      	b.n	800ce2a <_malloc_r+0x46>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	4638      	mov	r0, r7
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	f000 f9ea 	bl	800d294 <__malloc_unlock>
 800cec0:	e7a1      	b.n	800ce06 <_malloc_r+0x22>
 800cec2:	6025      	str	r5, [r4, #0]
 800cec4:	e7de      	b.n	800ce84 <_malloc_r+0xa0>
 800cec6:	bf00      	nop
 800cec8:	20000978 	.word	0x20000978

0800cecc <__ssputs_r>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	688e      	ldr	r6, [r1, #8]
 800ced2:	4682      	mov	sl, r0
 800ced4:	429e      	cmp	r6, r3
 800ced6:	460c      	mov	r4, r1
 800ced8:	4690      	mov	r8, r2
 800ceda:	461f      	mov	r7, r3
 800cedc:	d838      	bhi.n	800cf50 <__ssputs_r+0x84>
 800cede:	898a      	ldrh	r2, [r1, #12]
 800cee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cee4:	d032      	beq.n	800cf4c <__ssputs_r+0x80>
 800cee6:	6825      	ldr	r5, [r4, #0]
 800cee8:	6909      	ldr	r1, [r1, #16]
 800ceea:	3301      	adds	r3, #1
 800ceec:	eba5 0901 	sub.w	r9, r5, r1
 800cef0:	6965      	ldr	r5, [r4, #20]
 800cef2:	444b      	add	r3, r9
 800cef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cefc:	106d      	asrs	r5, r5, #1
 800cefe:	429d      	cmp	r5, r3
 800cf00:	bf38      	it	cc
 800cf02:	461d      	movcc	r5, r3
 800cf04:	0553      	lsls	r3, r2, #21
 800cf06:	d531      	bpl.n	800cf6c <__ssputs_r+0xa0>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7ff ff6b 	bl	800cde4 <_malloc_r>
 800cf0e:	4606      	mov	r6, r0
 800cf10:	b950      	cbnz	r0, 800cf28 <__ssputs_r+0x5c>
 800cf12:	230c      	movs	r3, #12
 800cf14:	f04f 30ff 	mov.w	r0, #4294967295
 800cf18:	f8ca 3000 	str.w	r3, [sl]
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf28:	464a      	mov	r2, r9
 800cf2a:	6921      	ldr	r1, [r4, #16]
 800cf2c:	f7ff fa18 	bl	800c360 <memcpy>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	6126      	str	r6, [r4, #16]
 800cf3e:	444e      	add	r6, r9
 800cf40:	6026      	str	r6, [r4, #0]
 800cf42:	463e      	mov	r6, r7
 800cf44:	6165      	str	r5, [r4, #20]
 800cf46:	eba5 0509 	sub.w	r5, r5, r9
 800cf4a:	60a5      	str	r5, [r4, #8]
 800cf4c:	42be      	cmp	r6, r7
 800cf4e:	d900      	bls.n	800cf52 <__ssputs_r+0x86>
 800cf50:	463e      	mov	r6, r7
 800cf52:	4632      	mov	r2, r6
 800cf54:	4641      	mov	r1, r8
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	f000 f97c 	bl	800d254 <memmove>
 800cf5c:	68a3      	ldr	r3, [r4, #8]
 800cf5e:	2000      	movs	r0, #0
 800cf60:	1b9b      	subs	r3, r3, r6
 800cf62:	60a3      	str	r3, [r4, #8]
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	4433      	add	r3, r6
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	e7db      	b.n	800cf24 <__ssputs_r+0x58>
 800cf6c:	462a      	mov	r2, r5
 800cf6e:	f000 f997 	bl	800d2a0 <_realloc_r>
 800cf72:	4606      	mov	r6, r0
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d1e1      	bne.n	800cf3c <__ssputs_r+0x70>
 800cf78:	4650      	mov	r0, sl
 800cf7a:	6921      	ldr	r1, [r4, #16]
 800cf7c:	f7ff feca 	bl	800cd14 <_free_r>
 800cf80:	e7c7      	b.n	800cf12 <__ssputs_r+0x46>
	...

0800cf84 <_svfiprintf_r>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	4698      	mov	r8, r3
 800cf8a:	898b      	ldrh	r3, [r1, #12]
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	061b      	lsls	r3, r3, #24
 800cf90:	460d      	mov	r5, r1
 800cf92:	4614      	mov	r4, r2
 800cf94:	b09d      	sub	sp, #116	; 0x74
 800cf96:	d50e      	bpl.n	800cfb6 <_svfiprintf_r+0x32>
 800cf98:	690b      	ldr	r3, [r1, #16]
 800cf9a:	b963      	cbnz	r3, 800cfb6 <_svfiprintf_r+0x32>
 800cf9c:	2140      	movs	r1, #64	; 0x40
 800cf9e:	f7ff ff21 	bl	800cde4 <_malloc_r>
 800cfa2:	6028      	str	r0, [r5, #0]
 800cfa4:	6128      	str	r0, [r5, #16]
 800cfa6:	b920      	cbnz	r0, 800cfb2 <_svfiprintf_r+0x2e>
 800cfa8:	230c      	movs	r3, #12
 800cfaa:	603b      	str	r3, [r7, #0]
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb0:	e0d1      	b.n	800d156 <_svfiprintf_r+0x1d2>
 800cfb2:	2340      	movs	r3, #64	; 0x40
 800cfb4:	616b      	str	r3, [r5, #20]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfba:	2320      	movs	r3, #32
 800cfbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc0:	2330      	movs	r3, #48	; 0x30
 800cfc2:	f04f 0901 	mov.w	r9, #1
 800cfc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d170 <_svfiprintf_r+0x1ec>
 800cfce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	469a      	mov	sl, r3
 800cfd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfda:	b10a      	cbz	r2, 800cfe0 <_svfiprintf_r+0x5c>
 800cfdc:	2a25      	cmp	r2, #37	; 0x25
 800cfde:	d1f9      	bne.n	800cfd4 <_svfiprintf_r+0x50>
 800cfe0:	ebba 0b04 	subs.w	fp, sl, r4
 800cfe4:	d00b      	beq.n	800cffe <_svfiprintf_r+0x7a>
 800cfe6:	465b      	mov	r3, fp
 800cfe8:	4622      	mov	r2, r4
 800cfea:	4629      	mov	r1, r5
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff ff6d 	bl	800cecc <__ssputs_r>
 800cff2:	3001      	adds	r0, #1
 800cff4:	f000 80aa 	beq.w	800d14c <_svfiprintf_r+0x1c8>
 800cff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cffa:	445a      	add	r2, fp
 800cffc:	9209      	str	r2, [sp, #36]	; 0x24
 800cffe:	f89a 3000 	ldrb.w	r3, [sl]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80a2 	beq.w	800d14c <_svfiprintf_r+0x1c8>
 800d008:	2300      	movs	r3, #0
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d012:	f10a 0a01 	add.w	sl, sl, #1
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	9307      	str	r3, [sp, #28]
 800d01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d01e:	931a      	str	r3, [sp, #104]	; 0x68
 800d020:	4654      	mov	r4, sl
 800d022:	2205      	movs	r2, #5
 800d024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d028:	4851      	ldr	r0, [pc, #324]	; (800d170 <_svfiprintf_r+0x1ec>)
 800d02a:	f7ff f98b 	bl	800c344 <memchr>
 800d02e:	9a04      	ldr	r2, [sp, #16]
 800d030:	b9d8      	cbnz	r0, 800d06a <_svfiprintf_r+0xe6>
 800d032:	06d0      	lsls	r0, r2, #27
 800d034:	bf44      	itt	mi
 800d036:	2320      	movmi	r3, #32
 800d038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d03c:	0711      	lsls	r1, r2, #28
 800d03e:	bf44      	itt	mi
 800d040:	232b      	movmi	r3, #43	; 0x2b
 800d042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d046:	f89a 3000 	ldrb.w	r3, [sl]
 800d04a:	2b2a      	cmp	r3, #42	; 0x2a
 800d04c:	d015      	beq.n	800d07a <_svfiprintf_r+0xf6>
 800d04e:	4654      	mov	r4, sl
 800d050:	2000      	movs	r0, #0
 800d052:	f04f 0c0a 	mov.w	ip, #10
 800d056:	9a07      	ldr	r2, [sp, #28]
 800d058:	4621      	mov	r1, r4
 800d05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d05e:	3b30      	subs	r3, #48	; 0x30
 800d060:	2b09      	cmp	r3, #9
 800d062:	d94e      	bls.n	800d102 <_svfiprintf_r+0x17e>
 800d064:	b1b0      	cbz	r0, 800d094 <_svfiprintf_r+0x110>
 800d066:	9207      	str	r2, [sp, #28]
 800d068:	e014      	b.n	800d094 <_svfiprintf_r+0x110>
 800d06a:	eba0 0308 	sub.w	r3, r0, r8
 800d06e:	fa09 f303 	lsl.w	r3, r9, r3
 800d072:	4313      	orrs	r3, r2
 800d074:	46a2      	mov	sl, r4
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	e7d2      	b.n	800d020 <_svfiprintf_r+0x9c>
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	1d19      	adds	r1, r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	9103      	str	r1, [sp, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	bfbb      	ittet	lt
 800d086:	425b      	neglt	r3, r3
 800d088:	f042 0202 	orrlt.w	r2, r2, #2
 800d08c:	9307      	strge	r3, [sp, #28]
 800d08e:	9307      	strlt	r3, [sp, #28]
 800d090:	bfb8      	it	lt
 800d092:	9204      	strlt	r2, [sp, #16]
 800d094:	7823      	ldrb	r3, [r4, #0]
 800d096:	2b2e      	cmp	r3, #46	; 0x2e
 800d098:	d10c      	bne.n	800d0b4 <_svfiprintf_r+0x130>
 800d09a:	7863      	ldrb	r3, [r4, #1]
 800d09c:	2b2a      	cmp	r3, #42	; 0x2a
 800d09e:	d135      	bne.n	800d10c <_svfiprintf_r+0x188>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	3402      	adds	r4, #2
 800d0a4:	1d1a      	adds	r2, r3, #4
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	9203      	str	r2, [sp, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bfb8      	it	lt
 800d0ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d174 <_svfiprintf_r+0x1f0>
 800d0b8:	2203      	movs	r2, #3
 800d0ba:	4650      	mov	r0, sl
 800d0bc:	7821      	ldrb	r1, [r4, #0]
 800d0be:	f7ff f941 	bl	800c344 <memchr>
 800d0c2:	b140      	cbz	r0, 800d0d6 <_svfiprintf_r+0x152>
 800d0c4:	2340      	movs	r3, #64	; 0x40
 800d0c6:	eba0 000a 	sub.w	r0, r0, sl
 800d0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	4303      	orrs	r3, r0
 800d0d4:	9304      	str	r3, [sp, #16]
 800d0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0da:	2206      	movs	r2, #6
 800d0dc:	4826      	ldr	r0, [pc, #152]	; (800d178 <_svfiprintf_r+0x1f4>)
 800d0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0e2:	f7ff f92f 	bl	800c344 <memchr>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d038      	beq.n	800d15c <_svfiprintf_r+0x1d8>
 800d0ea:	4b24      	ldr	r3, [pc, #144]	; (800d17c <_svfiprintf_r+0x1f8>)
 800d0ec:	bb1b      	cbnz	r3, 800d136 <_svfiprintf_r+0x1b2>
 800d0ee:	9b03      	ldr	r3, [sp, #12]
 800d0f0:	3307      	adds	r3, #7
 800d0f2:	f023 0307 	bic.w	r3, r3, #7
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fc:	4433      	add	r3, r6
 800d0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d100:	e767      	b.n	800cfd2 <_svfiprintf_r+0x4e>
 800d102:	460c      	mov	r4, r1
 800d104:	2001      	movs	r0, #1
 800d106:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10a:	e7a5      	b.n	800d058 <_svfiprintf_r+0xd4>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f04f 0c0a 	mov.w	ip, #10
 800d112:	4619      	mov	r1, r3
 800d114:	3401      	adds	r4, #1
 800d116:	9305      	str	r3, [sp, #20]
 800d118:	4620      	mov	r0, r4
 800d11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d11e:	3a30      	subs	r2, #48	; 0x30
 800d120:	2a09      	cmp	r2, #9
 800d122:	d903      	bls.n	800d12c <_svfiprintf_r+0x1a8>
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0c5      	beq.n	800d0b4 <_svfiprintf_r+0x130>
 800d128:	9105      	str	r1, [sp, #20]
 800d12a:	e7c3      	b.n	800d0b4 <_svfiprintf_r+0x130>
 800d12c:	4604      	mov	r4, r0
 800d12e:	2301      	movs	r3, #1
 800d130:	fb0c 2101 	mla	r1, ip, r1, r2
 800d134:	e7f0      	b.n	800d118 <_svfiprintf_r+0x194>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462a      	mov	r2, r5
 800d13c:	4638      	mov	r0, r7
 800d13e:	4b10      	ldr	r3, [pc, #64]	; (800d180 <_svfiprintf_r+0x1fc>)
 800d140:	a904      	add	r1, sp, #16
 800d142:	f7fc fa73 	bl	800962c <_printf_float>
 800d146:	1c42      	adds	r2, r0, #1
 800d148:	4606      	mov	r6, r0
 800d14a:	d1d6      	bne.n	800d0fa <_svfiprintf_r+0x176>
 800d14c:	89ab      	ldrh	r3, [r5, #12]
 800d14e:	065b      	lsls	r3, r3, #25
 800d150:	f53f af2c 	bmi.w	800cfac <_svfiprintf_r+0x28>
 800d154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d156:	b01d      	add	sp, #116	; 0x74
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15c:	ab03      	add	r3, sp, #12
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	462a      	mov	r2, r5
 800d162:	4638      	mov	r0, r7
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <_svfiprintf_r+0x1fc>)
 800d166:	a904      	add	r1, sp, #16
 800d168:	f7fc fcfc 	bl	8009b64 <_printf_i>
 800d16c:	e7eb      	b.n	800d146 <_svfiprintf_r+0x1c2>
 800d16e:	bf00      	nop
 800d170:	0801fb44 	.word	0x0801fb44
 800d174:	0801fb4a 	.word	0x0801fb4a
 800d178:	0801fb4e 	.word	0x0801fb4e
 800d17c:	0800962d 	.word	0x0800962d
 800d180:	0800cecd 	.word	0x0800cecd

0800d184 <nan>:
 800d184:	2000      	movs	r0, #0
 800d186:	4901      	ldr	r1, [pc, #4]	; (800d18c <nan+0x8>)
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	7ff80000 	.word	0x7ff80000

0800d190 <_sbrk_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	2300      	movs	r3, #0
 800d194:	4d05      	ldr	r5, [pc, #20]	; (800d1ac <_sbrk_r+0x1c>)
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	602b      	str	r3, [r5, #0]
 800d19c:	f7f9 fa02 	bl	80065a4 <_sbrk>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_sbrk_r+0x1a>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_sbrk_r+0x1a>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	20000980 	.word	0x20000980

0800d1b0 <strncmp>:
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	b510      	push	{r4, lr}
 800d1b4:	b172      	cbz	r2, 800d1d4 <strncmp+0x24>
 800d1b6:	3901      	subs	r1, #1
 800d1b8:	1884      	adds	r4, r0, r2
 800d1ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d1c2:	4290      	cmp	r0, r2
 800d1c4:	d101      	bne.n	800d1ca <strncmp+0x1a>
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	d101      	bne.n	800d1ce <strncmp+0x1e>
 800d1ca:	1a80      	subs	r0, r0, r2
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d1f3      	bne.n	800d1ba <strncmp+0xa>
 800d1d2:	e7fa      	b.n	800d1ca <strncmp+0x1a>
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	e7f9      	b.n	800d1cc <strncmp+0x1c>

0800d1d8 <__ascii_wctomb>:
 800d1d8:	4603      	mov	r3, r0
 800d1da:	4608      	mov	r0, r1
 800d1dc:	b141      	cbz	r1, 800d1f0 <__ascii_wctomb+0x18>
 800d1de:	2aff      	cmp	r2, #255	; 0xff
 800d1e0:	d904      	bls.n	800d1ec <__ascii_wctomb+0x14>
 800d1e2:	228a      	movs	r2, #138	; 0x8a
 800d1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	4770      	bx	lr
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	700a      	strb	r2, [r1, #0]
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <__assert_func>:
 800d1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1f6:	4614      	mov	r4, r2
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <__assert_func+0x2c>)
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68d8      	ldr	r0, [r3, #12]
 800d202:	b14c      	cbz	r4, 800d218 <__assert_func+0x24>
 800d204:	4b07      	ldr	r3, [pc, #28]	; (800d224 <__assert_func+0x30>)
 800d206:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d20a:	9100      	str	r1, [sp, #0]
 800d20c:	462b      	mov	r3, r5
 800d20e:	4906      	ldr	r1, [pc, #24]	; (800d228 <__assert_func+0x34>)
 800d210:	f000 f80e 	bl	800d230 <fiprintf>
 800d214:	f000 fa8a 	bl	800d72c <abort>
 800d218:	4b04      	ldr	r3, [pc, #16]	; (800d22c <__assert_func+0x38>)
 800d21a:	461c      	mov	r4, r3
 800d21c:	e7f3      	b.n	800d206 <__assert_func+0x12>
 800d21e:	bf00      	nop
 800d220:	2000000c 	.word	0x2000000c
 800d224:	0801fb55 	.word	0x0801fb55
 800d228:	0801fb62 	.word	0x0801fb62
 800d22c:	0801fb90 	.word	0x0801fb90

0800d230 <fiprintf>:
 800d230:	b40e      	push	{r1, r2, r3}
 800d232:	b503      	push	{r0, r1, lr}
 800d234:	4601      	mov	r1, r0
 800d236:	ab03      	add	r3, sp, #12
 800d238:	4805      	ldr	r0, [pc, #20]	; (800d250 <fiprintf+0x20>)
 800d23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23e:	6800      	ldr	r0, [r0, #0]
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	f000 f883 	bl	800d34c <_vfiprintf_r>
 800d246:	b002      	add	sp, #8
 800d248:	f85d eb04 	ldr.w	lr, [sp], #4
 800d24c:	b003      	add	sp, #12
 800d24e:	4770      	bx	lr
 800d250:	2000000c 	.word	0x2000000c

0800d254 <memmove>:
 800d254:	4288      	cmp	r0, r1
 800d256:	b510      	push	{r4, lr}
 800d258:	eb01 0402 	add.w	r4, r1, r2
 800d25c:	d902      	bls.n	800d264 <memmove+0x10>
 800d25e:	4284      	cmp	r4, r0
 800d260:	4623      	mov	r3, r4
 800d262:	d807      	bhi.n	800d274 <memmove+0x20>
 800d264:	1e43      	subs	r3, r0, #1
 800d266:	42a1      	cmp	r1, r4
 800d268:	d008      	beq.n	800d27c <memmove+0x28>
 800d26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d26e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d272:	e7f8      	b.n	800d266 <memmove+0x12>
 800d274:	4601      	mov	r1, r0
 800d276:	4402      	add	r2, r0
 800d278:	428a      	cmp	r2, r1
 800d27a:	d100      	bne.n	800d27e <memmove+0x2a>
 800d27c:	bd10      	pop	{r4, pc}
 800d27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d286:	e7f7      	b.n	800d278 <memmove+0x24>

0800d288 <__malloc_lock>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__malloc_lock+0x8>)
 800d28a:	f000 bc0b 	b.w	800daa4 <__retarget_lock_acquire_recursive>
 800d28e:	bf00      	nop
 800d290:	20000984 	.word	0x20000984

0800d294 <__malloc_unlock>:
 800d294:	4801      	ldr	r0, [pc, #4]	; (800d29c <__malloc_unlock+0x8>)
 800d296:	f000 bc06 	b.w	800daa6 <__retarget_lock_release_recursive>
 800d29a:	bf00      	nop
 800d29c:	20000984 	.word	0x20000984

0800d2a0 <_realloc_r>:
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	4614      	mov	r4, r2
 800d2a8:	460e      	mov	r6, r1
 800d2aa:	b921      	cbnz	r1, 800d2b6 <_realloc_r+0x16>
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b2:	f7ff bd97 	b.w	800cde4 <_malloc_r>
 800d2b6:	b92a      	cbnz	r2, 800d2c4 <_realloc_r+0x24>
 800d2b8:	f7ff fd2c 	bl	800cd14 <_free_r>
 800d2bc:	4625      	mov	r5, r4
 800d2be:	4628      	mov	r0, r5
 800d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c4:	f000 fc56 	bl	800db74 <_malloc_usable_size_r>
 800d2c8:	4284      	cmp	r4, r0
 800d2ca:	4607      	mov	r7, r0
 800d2cc:	d802      	bhi.n	800d2d4 <_realloc_r+0x34>
 800d2ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2d2:	d812      	bhi.n	800d2fa <_realloc_r+0x5a>
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	f7ff fd84 	bl	800cde4 <_malloc_r>
 800d2dc:	4605      	mov	r5, r0
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d0ed      	beq.n	800d2be <_realloc_r+0x1e>
 800d2e2:	42bc      	cmp	r4, r7
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	bf28      	it	cs
 800d2ea:	463a      	movcs	r2, r7
 800d2ec:	f7ff f838 	bl	800c360 <memcpy>
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f7ff fd0e 	bl	800cd14 <_free_r>
 800d2f8:	e7e1      	b.n	800d2be <_realloc_r+0x1e>
 800d2fa:	4635      	mov	r5, r6
 800d2fc:	e7df      	b.n	800d2be <_realloc_r+0x1e>

0800d2fe <__sfputc_r>:
 800d2fe:	6893      	ldr	r3, [r2, #8]
 800d300:	b410      	push	{r4}
 800d302:	3b01      	subs	r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	6093      	str	r3, [r2, #8]
 800d308:	da07      	bge.n	800d31a <__sfputc_r+0x1c>
 800d30a:	6994      	ldr	r4, [r2, #24]
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	db01      	blt.n	800d314 <__sfputc_r+0x16>
 800d310:	290a      	cmp	r1, #10
 800d312:	d102      	bne.n	800d31a <__sfputc_r+0x1c>
 800d314:	bc10      	pop	{r4}
 800d316:	f000 b949 	b.w	800d5ac <__swbuf_r>
 800d31a:	6813      	ldr	r3, [r2, #0]
 800d31c:	1c58      	adds	r0, r3, #1
 800d31e:	6010      	str	r0, [r2, #0]
 800d320:	7019      	strb	r1, [r3, #0]
 800d322:	4608      	mov	r0, r1
 800d324:	bc10      	pop	{r4}
 800d326:	4770      	bx	lr

0800d328 <__sfputs_r>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	4606      	mov	r6, r0
 800d32c:	460f      	mov	r7, r1
 800d32e:	4614      	mov	r4, r2
 800d330:	18d5      	adds	r5, r2, r3
 800d332:	42ac      	cmp	r4, r5
 800d334:	d101      	bne.n	800d33a <__sfputs_r+0x12>
 800d336:	2000      	movs	r0, #0
 800d338:	e007      	b.n	800d34a <__sfputs_r+0x22>
 800d33a:	463a      	mov	r2, r7
 800d33c:	4630      	mov	r0, r6
 800d33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d342:	f7ff ffdc 	bl	800d2fe <__sfputc_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	d1f3      	bne.n	800d332 <__sfputs_r+0xa>
 800d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d34c <_vfiprintf_r>:
 800d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	460d      	mov	r5, r1
 800d352:	4614      	mov	r4, r2
 800d354:	4698      	mov	r8, r3
 800d356:	4606      	mov	r6, r0
 800d358:	b09d      	sub	sp, #116	; 0x74
 800d35a:	b118      	cbz	r0, 800d364 <_vfiprintf_r+0x18>
 800d35c:	6983      	ldr	r3, [r0, #24]
 800d35e:	b90b      	cbnz	r3, 800d364 <_vfiprintf_r+0x18>
 800d360:	f000 fb02 	bl	800d968 <__sinit>
 800d364:	4b89      	ldr	r3, [pc, #548]	; (800d58c <_vfiprintf_r+0x240>)
 800d366:	429d      	cmp	r5, r3
 800d368:	d11b      	bne.n	800d3a2 <_vfiprintf_r+0x56>
 800d36a:	6875      	ldr	r5, [r6, #4]
 800d36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d36e:	07d9      	lsls	r1, r3, #31
 800d370:	d405      	bmi.n	800d37e <_vfiprintf_r+0x32>
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	059a      	lsls	r2, r3, #22
 800d376:	d402      	bmi.n	800d37e <_vfiprintf_r+0x32>
 800d378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d37a:	f000 fb93 	bl	800daa4 <__retarget_lock_acquire_recursive>
 800d37e:	89ab      	ldrh	r3, [r5, #12]
 800d380:	071b      	lsls	r3, r3, #28
 800d382:	d501      	bpl.n	800d388 <_vfiprintf_r+0x3c>
 800d384:	692b      	ldr	r3, [r5, #16]
 800d386:	b9eb      	cbnz	r3, 800d3c4 <_vfiprintf_r+0x78>
 800d388:	4629      	mov	r1, r5
 800d38a:	4630      	mov	r0, r6
 800d38c:	f000 f960 	bl	800d650 <__swsetup_r>
 800d390:	b1c0      	cbz	r0, 800d3c4 <_vfiprintf_r+0x78>
 800d392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d394:	07dc      	lsls	r4, r3, #31
 800d396:	d50e      	bpl.n	800d3b6 <_vfiprintf_r+0x6a>
 800d398:	f04f 30ff 	mov.w	r0, #4294967295
 800d39c:	b01d      	add	sp, #116	; 0x74
 800d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a2:	4b7b      	ldr	r3, [pc, #492]	; (800d590 <_vfiprintf_r+0x244>)
 800d3a4:	429d      	cmp	r5, r3
 800d3a6:	d101      	bne.n	800d3ac <_vfiprintf_r+0x60>
 800d3a8:	68b5      	ldr	r5, [r6, #8]
 800d3aa:	e7df      	b.n	800d36c <_vfiprintf_r+0x20>
 800d3ac:	4b79      	ldr	r3, [pc, #484]	; (800d594 <_vfiprintf_r+0x248>)
 800d3ae:	429d      	cmp	r5, r3
 800d3b0:	bf08      	it	eq
 800d3b2:	68f5      	ldreq	r5, [r6, #12]
 800d3b4:	e7da      	b.n	800d36c <_vfiprintf_r+0x20>
 800d3b6:	89ab      	ldrh	r3, [r5, #12]
 800d3b8:	0598      	lsls	r0, r3, #22
 800d3ba:	d4ed      	bmi.n	800d398 <_vfiprintf_r+0x4c>
 800d3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3be:	f000 fb72 	bl	800daa6 <__retarget_lock_release_recursive>
 800d3c2:	e7e9      	b.n	800d398 <_vfiprintf_r+0x4c>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3ce:	2330      	movs	r3, #48	; 0x30
 800d3d0:	f04f 0901 	mov.w	r9, #1
 800d3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d598 <_vfiprintf_r+0x24c>
 800d3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3e0:	4623      	mov	r3, r4
 800d3e2:	469a      	mov	sl, r3
 800d3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e8:	b10a      	cbz	r2, 800d3ee <_vfiprintf_r+0xa2>
 800d3ea:	2a25      	cmp	r2, #37	; 0x25
 800d3ec:	d1f9      	bne.n	800d3e2 <_vfiprintf_r+0x96>
 800d3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f2:	d00b      	beq.n	800d40c <_vfiprintf_r+0xc0>
 800d3f4:	465b      	mov	r3, fp
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7ff ff94 	bl	800d328 <__sfputs_r>
 800d400:	3001      	adds	r0, #1
 800d402:	f000 80aa 	beq.w	800d55a <_vfiprintf_r+0x20e>
 800d406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d408:	445a      	add	r2, fp
 800d40a:	9209      	str	r2, [sp, #36]	; 0x24
 800d40c:	f89a 3000 	ldrb.w	r3, [sl]
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 80a2 	beq.w	800d55a <_vfiprintf_r+0x20e>
 800d416:	2300      	movs	r3, #0
 800d418:	f04f 32ff 	mov.w	r2, #4294967295
 800d41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d420:	f10a 0a01 	add.w	sl, sl, #1
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	9307      	str	r3, [sp, #28]
 800d428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d42c:	931a      	str	r3, [sp, #104]	; 0x68
 800d42e:	4654      	mov	r4, sl
 800d430:	2205      	movs	r2, #5
 800d432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d436:	4858      	ldr	r0, [pc, #352]	; (800d598 <_vfiprintf_r+0x24c>)
 800d438:	f7fe ff84 	bl	800c344 <memchr>
 800d43c:	9a04      	ldr	r2, [sp, #16]
 800d43e:	b9d8      	cbnz	r0, 800d478 <_vfiprintf_r+0x12c>
 800d440:	06d1      	lsls	r1, r2, #27
 800d442:	bf44      	itt	mi
 800d444:	2320      	movmi	r3, #32
 800d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d44a:	0713      	lsls	r3, r2, #28
 800d44c:	bf44      	itt	mi
 800d44e:	232b      	movmi	r3, #43	; 0x2b
 800d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d454:	f89a 3000 	ldrb.w	r3, [sl]
 800d458:	2b2a      	cmp	r3, #42	; 0x2a
 800d45a:	d015      	beq.n	800d488 <_vfiprintf_r+0x13c>
 800d45c:	4654      	mov	r4, sl
 800d45e:	2000      	movs	r0, #0
 800d460:	f04f 0c0a 	mov.w	ip, #10
 800d464:	9a07      	ldr	r2, [sp, #28]
 800d466:	4621      	mov	r1, r4
 800d468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46c:	3b30      	subs	r3, #48	; 0x30
 800d46e:	2b09      	cmp	r3, #9
 800d470:	d94e      	bls.n	800d510 <_vfiprintf_r+0x1c4>
 800d472:	b1b0      	cbz	r0, 800d4a2 <_vfiprintf_r+0x156>
 800d474:	9207      	str	r2, [sp, #28]
 800d476:	e014      	b.n	800d4a2 <_vfiprintf_r+0x156>
 800d478:	eba0 0308 	sub.w	r3, r0, r8
 800d47c:	fa09 f303 	lsl.w	r3, r9, r3
 800d480:	4313      	orrs	r3, r2
 800d482:	46a2      	mov	sl, r4
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	e7d2      	b.n	800d42e <_vfiprintf_r+0xe2>
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	1d19      	adds	r1, r3, #4
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	9103      	str	r1, [sp, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	bfbb      	ittet	lt
 800d494:	425b      	neglt	r3, r3
 800d496:	f042 0202 	orrlt.w	r2, r2, #2
 800d49a:	9307      	strge	r3, [sp, #28]
 800d49c:	9307      	strlt	r3, [sp, #28]
 800d49e:	bfb8      	it	lt
 800d4a0:	9204      	strlt	r2, [sp, #16]
 800d4a2:	7823      	ldrb	r3, [r4, #0]
 800d4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4a6:	d10c      	bne.n	800d4c2 <_vfiprintf_r+0x176>
 800d4a8:	7863      	ldrb	r3, [r4, #1]
 800d4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ac:	d135      	bne.n	800d51a <_vfiprintf_r+0x1ce>
 800d4ae:	9b03      	ldr	r3, [sp, #12]
 800d4b0:	3402      	adds	r4, #2
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9203      	str	r2, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfb8      	it	lt
 800d4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4c0:	9305      	str	r3, [sp, #20]
 800d4c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d59c <_vfiprintf_r+0x250>
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	7821      	ldrb	r1, [r4, #0]
 800d4cc:	f7fe ff3a 	bl	800c344 <memchr>
 800d4d0:	b140      	cbz	r0, 800d4e4 <_vfiprintf_r+0x198>
 800d4d2:	2340      	movs	r3, #64	; 0x40
 800d4d4:	eba0 000a 	sub.w	r0, r0, sl
 800d4d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	3401      	adds	r4, #1
 800d4e0:	4303      	orrs	r3, r0
 800d4e2:	9304      	str	r3, [sp, #16]
 800d4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e8:	2206      	movs	r2, #6
 800d4ea:	482d      	ldr	r0, [pc, #180]	; (800d5a0 <_vfiprintf_r+0x254>)
 800d4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4f0:	f7fe ff28 	bl	800c344 <memchr>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d03f      	beq.n	800d578 <_vfiprintf_r+0x22c>
 800d4f8:	4b2a      	ldr	r3, [pc, #168]	; (800d5a4 <_vfiprintf_r+0x258>)
 800d4fa:	bb1b      	cbnz	r3, 800d544 <_vfiprintf_r+0x1f8>
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	3307      	adds	r3, #7
 800d500:	f023 0307 	bic.w	r3, r3, #7
 800d504:	3308      	adds	r3, #8
 800d506:	9303      	str	r3, [sp, #12]
 800d508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50a:	443b      	add	r3, r7
 800d50c:	9309      	str	r3, [sp, #36]	; 0x24
 800d50e:	e767      	b.n	800d3e0 <_vfiprintf_r+0x94>
 800d510:	460c      	mov	r4, r1
 800d512:	2001      	movs	r0, #1
 800d514:	fb0c 3202 	mla	r2, ip, r2, r3
 800d518:	e7a5      	b.n	800d466 <_vfiprintf_r+0x11a>
 800d51a:	2300      	movs	r3, #0
 800d51c:	f04f 0c0a 	mov.w	ip, #10
 800d520:	4619      	mov	r1, r3
 800d522:	3401      	adds	r4, #1
 800d524:	9305      	str	r3, [sp, #20]
 800d526:	4620      	mov	r0, r4
 800d528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d52c:	3a30      	subs	r2, #48	; 0x30
 800d52e:	2a09      	cmp	r2, #9
 800d530:	d903      	bls.n	800d53a <_vfiprintf_r+0x1ee>
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0c5      	beq.n	800d4c2 <_vfiprintf_r+0x176>
 800d536:	9105      	str	r1, [sp, #20]
 800d538:	e7c3      	b.n	800d4c2 <_vfiprintf_r+0x176>
 800d53a:	4604      	mov	r4, r0
 800d53c:	2301      	movs	r3, #1
 800d53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d542:	e7f0      	b.n	800d526 <_vfiprintf_r+0x1da>
 800d544:	ab03      	add	r3, sp, #12
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	462a      	mov	r2, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <_vfiprintf_r+0x25c>)
 800d54e:	a904      	add	r1, sp, #16
 800d550:	f7fc f86c 	bl	800962c <_printf_float>
 800d554:	4607      	mov	r7, r0
 800d556:	1c78      	adds	r0, r7, #1
 800d558:	d1d6      	bne.n	800d508 <_vfiprintf_r+0x1bc>
 800d55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d55c:	07d9      	lsls	r1, r3, #31
 800d55e:	d405      	bmi.n	800d56c <_vfiprintf_r+0x220>
 800d560:	89ab      	ldrh	r3, [r5, #12]
 800d562:	059a      	lsls	r2, r3, #22
 800d564:	d402      	bmi.n	800d56c <_vfiprintf_r+0x220>
 800d566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d568:	f000 fa9d 	bl	800daa6 <__retarget_lock_release_recursive>
 800d56c:	89ab      	ldrh	r3, [r5, #12]
 800d56e:	065b      	lsls	r3, r3, #25
 800d570:	f53f af12 	bmi.w	800d398 <_vfiprintf_r+0x4c>
 800d574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d576:	e711      	b.n	800d39c <_vfiprintf_r+0x50>
 800d578:	ab03      	add	r3, sp, #12
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	462a      	mov	r2, r5
 800d57e:	4630      	mov	r0, r6
 800d580:	4b09      	ldr	r3, [pc, #36]	; (800d5a8 <_vfiprintf_r+0x25c>)
 800d582:	a904      	add	r1, sp, #16
 800d584:	f7fc faee 	bl	8009b64 <_printf_i>
 800d588:	e7e4      	b.n	800d554 <_vfiprintf_r+0x208>
 800d58a:	bf00      	nop
 800d58c:	0801fbb4 	.word	0x0801fbb4
 800d590:	0801fbd4 	.word	0x0801fbd4
 800d594:	0801fb94 	.word	0x0801fb94
 800d598:	0801fb44 	.word	0x0801fb44
 800d59c:	0801fb4a 	.word	0x0801fb4a
 800d5a0:	0801fb4e 	.word	0x0801fb4e
 800d5a4:	0800962d 	.word	0x0800962d
 800d5a8:	0800d329 	.word	0x0800d329

0800d5ac <__swbuf_r>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	460e      	mov	r6, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	b118      	cbz	r0, 800d5be <__swbuf_r+0x12>
 800d5b6:	6983      	ldr	r3, [r0, #24]
 800d5b8:	b90b      	cbnz	r3, 800d5be <__swbuf_r+0x12>
 800d5ba:	f000 f9d5 	bl	800d968 <__sinit>
 800d5be:	4b21      	ldr	r3, [pc, #132]	; (800d644 <__swbuf_r+0x98>)
 800d5c0:	429c      	cmp	r4, r3
 800d5c2:	d12b      	bne.n	800d61c <__swbuf_r+0x70>
 800d5c4:	686c      	ldr	r4, [r5, #4]
 800d5c6:	69a3      	ldr	r3, [r4, #24]
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	071a      	lsls	r2, r3, #28
 800d5ce:	d52f      	bpl.n	800d630 <__swbuf_r+0x84>
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	b36b      	cbz	r3, 800d630 <__swbuf_r+0x84>
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	b2f6      	uxtb	r6, r6
 800d5da:	1ac0      	subs	r0, r0, r3
 800d5dc:	6963      	ldr	r3, [r4, #20]
 800d5de:	4637      	mov	r7, r6
 800d5e0:	4283      	cmp	r3, r0
 800d5e2:	dc04      	bgt.n	800d5ee <__swbuf_r+0x42>
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f000 f92a 	bl	800d840 <_fflush_r>
 800d5ec:	bb30      	cbnz	r0, 800d63c <__swbuf_r+0x90>
 800d5ee:	68a3      	ldr	r3, [r4, #8]
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	60a3      	str	r3, [r4, #8]
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	1c5a      	adds	r2, r3, #1
 800d5fa:	6022      	str	r2, [r4, #0]
 800d5fc:	701e      	strb	r6, [r3, #0]
 800d5fe:	6963      	ldr	r3, [r4, #20]
 800d600:	4283      	cmp	r3, r0
 800d602:	d004      	beq.n	800d60e <__swbuf_r+0x62>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	07db      	lsls	r3, r3, #31
 800d608:	d506      	bpl.n	800d618 <__swbuf_r+0x6c>
 800d60a:	2e0a      	cmp	r6, #10
 800d60c:	d104      	bne.n	800d618 <__swbuf_r+0x6c>
 800d60e:	4621      	mov	r1, r4
 800d610:	4628      	mov	r0, r5
 800d612:	f000 f915 	bl	800d840 <_fflush_r>
 800d616:	b988      	cbnz	r0, 800d63c <__swbuf_r+0x90>
 800d618:	4638      	mov	r0, r7
 800d61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d61c:	4b0a      	ldr	r3, [pc, #40]	; (800d648 <__swbuf_r+0x9c>)
 800d61e:	429c      	cmp	r4, r3
 800d620:	d101      	bne.n	800d626 <__swbuf_r+0x7a>
 800d622:	68ac      	ldr	r4, [r5, #8]
 800d624:	e7cf      	b.n	800d5c6 <__swbuf_r+0x1a>
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <__swbuf_r+0xa0>)
 800d628:	429c      	cmp	r4, r3
 800d62a:	bf08      	it	eq
 800d62c:	68ec      	ldreq	r4, [r5, #12]
 800d62e:	e7ca      	b.n	800d5c6 <__swbuf_r+0x1a>
 800d630:	4621      	mov	r1, r4
 800d632:	4628      	mov	r0, r5
 800d634:	f000 f80c 	bl	800d650 <__swsetup_r>
 800d638:	2800      	cmp	r0, #0
 800d63a:	d0cb      	beq.n	800d5d4 <__swbuf_r+0x28>
 800d63c:	f04f 37ff 	mov.w	r7, #4294967295
 800d640:	e7ea      	b.n	800d618 <__swbuf_r+0x6c>
 800d642:	bf00      	nop
 800d644:	0801fbb4 	.word	0x0801fbb4
 800d648:	0801fbd4 	.word	0x0801fbd4
 800d64c:	0801fb94 	.word	0x0801fb94

0800d650 <__swsetup_r>:
 800d650:	4b32      	ldr	r3, [pc, #200]	; (800d71c <__swsetup_r+0xcc>)
 800d652:	b570      	push	{r4, r5, r6, lr}
 800d654:	681d      	ldr	r5, [r3, #0]
 800d656:	4606      	mov	r6, r0
 800d658:	460c      	mov	r4, r1
 800d65a:	b125      	cbz	r5, 800d666 <__swsetup_r+0x16>
 800d65c:	69ab      	ldr	r3, [r5, #24]
 800d65e:	b913      	cbnz	r3, 800d666 <__swsetup_r+0x16>
 800d660:	4628      	mov	r0, r5
 800d662:	f000 f981 	bl	800d968 <__sinit>
 800d666:	4b2e      	ldr	r3, [pc, #184]	; (800d720 <__swsetup_r+0xd0>)
 800d668:	429c      	cmp	r4, r3
 800d66a:	d10f      	bne.n	800d68c <__swsetup_r+0x3c>
 800d66c:	686c      	ldr	r4, [r5, #4]
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d674:	0719      	lsls	r1, r3, #28
 800d676:	d42c      	bmi.n	800d6d2 <__swsetup_r+0x82>
 800d678:	06dd      	lsls	r5, r3, #27
 800d67a:	d411      	bmi.n	800d6a0 <__swsetup_r+0x50>
 800d67c:	2309      	movs	r3, #9
 800d67e:	6033      	str	r3, [r6, #0]
 800d680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	81a3      	strh	r3, [r4, #12]
 800d68a:	e03e      	b.n	800d70a <__swsetup_r+0xba>
 800d68c:	4b25      	ldr	r3, [pc, #148]	; (800d724 <__swsetup_r+0xd4>)
 800d68e:	429c      	cmp	r4, r3
 800d690:	d101      	bne.n	800d696 <__swsetup_r+0x46>
 800d692:	68ac      	ldr	r4, [r5, #8]
 800d694:	e7eb      	b.n	800d66e <__swsetup_r+0x1e>
 800d696:	4b24      	ldr	r3, [pc, #144]	; (800d728 <__swsetup_r+0xd8>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	bf08      	it	eq
 800d69c:	68ec      	ldreq	r4, [r5, #12]
 800d69e:	e7e6      	b.n	800d66e <__swsetup_r+0x1e>
 800d6a0:	0758      	lsls	r0, r3, #29
 800d6a2:	d512      	bpl.n	800d6ca <__swsetup_r+0x7a>
 800d6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6a6:	b141      	cbz	r1, 800d6ba <__swsetup_r+0x6a>
 800d6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6ac:	4299      	cmp	r1, r3
 800d6ae:	d002      	beq.n	800d6b6 <__swsetup_r+0x66>
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f7ff fb2f 	bl	800cd14 <_free_r>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d6ba:	89a3      	ldrh	r3, [r4, #12]
 800d6bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	6063      	str	r3, [r4, #4]
 800d6c6:	6923      	ldr	r3, [r4, #16]
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f043 0308 	orr.w	r3, r3, #8
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	b94b      	cbnz	r3, 800d6ea <__swsetup_r+0x9a>
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6e0:	d003      	beq.n	800d6ea <__swsetup_r+0x9a>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f000 fa05 	bl	800daf4 <__smakebuf_r>
 800d6ea:	89a0      	ldrh	r0, [r4, #12]
 800d6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6f0:	f010 0301 	ands.w	r3, r0, #1
 800d6f4:	d00a      	beq.n	800d70c <__swsetup_r+0xbc>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	60a3      	str	r3, [r4, #8]
 800d6fa:	6963      	ldr	r3, [r4, #20]
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	61a3      	str	r3, [r4, #24]
 800d700:	6923      	ldr	r3, [r4, #16]
 800d702:	b943      	cbnz	r3, 800d716 <__swsetup_r+0xc6>
 800d704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d708:	d1ba      	bne.n	800d680 <__swsetup_r+0x30>
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	0781      	lsls	r1, r0, #30
 800d70e:	bf58      	it	pl
 800d710:	6963      	ldrpl	r3, [r4, #20]
 800d712:	60a3      	str	r3, [r4, #8]
 800d714:	e7f4      	b.n	800d700 <__swsetup_r+0xb0>
 800d716:	2000      	movs	r0, #0
 800d718:	e7f7      	b.n	800d70a <__swsetup_r+0xba>
 800d71a:	bf00      	nop
 800d71c:	2000000c 	.word	0x2000000c
 800d720:	0801fbb4 	.word	0x0801fbb4
 800d724:	0801fbd4 	.word	0x0801fbd4
 800d728:	0801fb94 	.word	0x0801fb94

0800d72c <abort>:
 800d72c:	2006      	movs	r0, #6
 800d72e:	b508      	push	{r3, lr}
 800d730:	f000 fa50 	bl	800dbd4 <raise>
 800d734:	2001      	movs	r0, #1
 800d736:	f7f8 ff05 	bl	8006544 <_exit>
	...

0800d73c <__sflush_r>:
 800d73c:	898a      	ldrh	r2, [r1, #12]
 800d73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d740:	4605      	mov	r5, r0
 800d742:	0710      	lsls	r0, r2, #28
 800d744:	460c      	mov	r4, r1
 800d746:	d457      	bmi.n	800d7f8 <__sflush_r+0xbc>
 800d748:	684b      	ldr	r3, [r1, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	dc04      	bgt.n	800d758 <__sflush_r+0x1c>
 800d74e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d750:	2b00      	cmp	r3, #0
 800d752:	dc01      	bgt.n	800d758 <__sflush_r+0x1c>
 800d754:	2000      	movs	r0, #0
 800d756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	d0fa      	beq.n	800d754 <__sflush_r+0x18>
 800d75e:	2300      	movs	r3, #0
 800d760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d764:	682f      	ldr	r7, [r5, #0]
 800d766:	602b      	str	r3, [r5, #0]
 800d768:	d032      	beq.n	800d7d0 <__sflush_r+0x94>
 800d76a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	075a      	lsls	r2, r3, #29
 800d770:	d505      	bpl.n	800d77e <__sflush_r+0x42>
 800d772:	6863      	ldr	r3, [r4, #4]
 800d774:	1ac0      	subs	r0, r0, r3
 800d776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d778:	b10b      	cbz	r3, 800d77e <__sflush_r+0x42>
 800d77a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d77c:	1ac0      	subs	r0, r0, r3
 800d77e:	2300      	movs	r3, #0
 800d780:	4602      	mov	r2, r0
 800d782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d784:	4628      	mov	r0, r5
 800d786:	6a21      	ldr	r1, [r4, #32]
 800d788:	47b0      	blx	r6
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	d106      	bne.n	800d79e <__sflush_r+0x62>
 800d790:	6829      	ldr	r1, [r5, #0]
 800d792:	291d      	cmp	r1, #29
 800d794:	d82c      	bhi.n	800d7f0 <__sflush_r+0xb4>
 800d796:	4a29      	ldr	r2, [pc, #164]	; (800d83c <__sflush_r+0x100>)
 800d798:	40ca      	lsrs	r2, r1
 800d79a:	07d6      	lsls	r6, r2, #31
 800d79c:	d528      	bpl.n	800d7f0 <__sflush_r+0xb4>
 800d79e:	2200      	movs	r2, #0
 800d7a0:	6062      	str	r2, [r4, #4]
 800d7a2:	6922      	ldr	r2, [r4, #16]
 800d7a4:	04d9      	lsls	r1, r3, #19
 800d7a6:	6022      	str	r2, [r4, #0]
 800d7a8:	d504      	bpl.n	800d7b4 <__sflush_r+0x78>
 800d7aa:	1c42      	adds	r2, r0, #1
 800d7ac:	d101      	bne.n	800d7b2 <__sflush_r+0x76>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	b903      	cbnz	r3, 800d7b4 <__sflush_r+0x78>
 800d7b2:	6560      	str	r0, [r4, #84]	; 0x54
 800d7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7b6:	602f      	str	r7, [r5, #0]
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	d0cb      	beq.n	800d754 <__sflush_r+0x18>
 800d7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	d002      	beq.n	800d7ca <__sflush_r+0x8e>
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f7ff faa5 	bl	800cd14 <_free_r>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	6360      	str	r0, [r4, #52]	; 0x34
 800d7ce:	e7c2      	b.n	800d756 <__sflush_r+0x1a>
 800d7d0:	6a21      	ldr	r1, [r4, #32]
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	47b0      	blx	r6
 800d7d8:	1c41      	adds	r1, r0, #1
 800d7da:	d1c7      	bne.n	800d76c <__sflush_r+0x30>
 800d7dc:	682b      	ldr	r3, [r5, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0c4      	beq.n	800d76c <__sflush_r+0x30>
 800d7e2:	2b1d      	cmp	r3, #29
 800d7e4:	d001      	beq.n	800d7ea <__sflush_r+0xae>
 800d7e6:	2b16      	cmp	r3, #22
 800d7e8:	d101      	bne.n	800d7ee <__sflush_r+0xb2>
 800d7ea:	602f      	str	r7, [r5, #0]
 800d7ec:	e7b2      	b.n	800d754 <__sflush_r+0x18>
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f4:	81a3      	strh	r3, [r4, #12]
 800d7f6:	e7ae      	b.n	800d756 <__sflush_r+0x1a>
 800d7f8:	690f      	ldr	r7, [r1, #16]
 800d7fa:	2f00      	cmp	r7, #0
 800d7fc:	d0aa      	beq.n	800d754 <__sflush_r+0x18>
 800d7fe:	0793      	lsls	r3, r2, #30
 800d800:	bf18      	it	ne
 800d802:	2300      	movne	r3, #0
 800d804:	680e      	ldr	r6, [r1, #0]
 800d806:	bf08      	it	eq
 800d808:	694b      	ldreq	r3, [r1, #20]
 800d80a:	1bf6      	subs	r6, r6, r7
 800d80c:	600f      	str	r7, [r1, #0]
 800d80e:	608b      	str	r3, [r1, #8]
 800d810:	2e00      	cmp	r6, #0
 800d812:	dd9f      	ble.n	800d754 <__sflush_r+0x18>
 800d814:	4633      	mov	r3, r6
 800d816:	463a      	mov	r2, r7
 800d818:	4628      	mov	r0, r5
 800d81a:	6a21      	ldr	r1, [r4, #32]
 800d81c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d820:	47e0      	blx	ip
 800d822:	2800      	cmp	r0, #0
 800d824:	dc06      	bgt.n	800d834 <__sflush_r+0xf8>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	f04f 30ff 	mov.w	r0, #4294967295
 800d82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d830:	81a3      	strh	r3, [r4, #12]
 800d832:	e790      	b.n	800d756 <__sflush_r+0x1a>
 800d834:	4407      	add	r7, r0
 800d836:	1a36      	subs	r6, r6, r0
 800d838:	e7ea      	b.n	800d810 <__sflush_r+0xd4>
 800d83a:	bf00      	nop
 800d83c:	20400001 	.word	0x20400001

0800d840 <_fflush_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	690b      	ldr	r3, [r1, #16]
 800d844:	4605      	mov	r5, r0
 800d846:	460c      	mov	r4, r1
 800d848:	b913      	cbnz	r3, 800d850 <_fflush_r+0x10>
 800d84a:	2500      	movs	r5, #0
 800d84c:	4628      	mov	r0, r5
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	b118      	cbz	r0, 800d85a <_fflush_r+0x1a>
 800d852:	6983      	ldr	r3, [r0, #24]
 800d854:	b90b      	cbnz	r3, 800d85a <_fflush_r+0x1a>
 800d856:	f000 f887 	bl	800d968 <__sinit>
 800d85a:	4b14      	ldr	r3, [pc, #80]	; (800d8ac <_fflush_r+0x6c>)
 800d85c:	429c      	cmp	r4, r3
 800d85e:	d11b      	bne.n	800d898 <_fflush_r+0x58>
 800d860:	686c      	ldr	r4, [r5, #4]
 800d862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0ef      	beq.n	800d84a <_fflush_r+0xa>
 800d86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d86c:	07d0      	lsls	r0, r2, #31
 800d86e:	d404      	bmi.n	800d87a <_fflush_r+0x3a>
 800d870:	0599      	lsls	r1, r3, #22
 800d872:	d402      	bmi.n	800d87a <_fflush_r+0x3a>
 800d874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d876:	f000 f915 	bl	800daa4 <__retarget_lock_acquire_recursive>
 800d87a:	4628      	mov	r0, r5
 800d87c:	4621      	mov	r1, r4
 800d87e:	f7ff ff5d 	bl	800d73c <__sflush_r>
 800d882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d884:	4605      	mov	r5, r0
 800d886:	07da      	lsls	r2, r3, #31
 800d888:	d4e0      	bmi.n	800d84c <_fflush_r+0xc>
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	059b      	lsls	r3, r3, #22
 800d88e:	d4dd      	bmi.n	800d84c <_fflush_r+0xc>
 800d890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d892:	f000 f908 	bl	800daa6 <__retarget_lock_release_recursive>
 800d896:	e7d9      	b.n	800d84c <_fflush_r+0xc>
 800d898:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <_fflush_r+0x70>)
 800d89a:	429c      	cmp	r4, r3
 800d89c:	d101      	bne.n	800d8a2 <_fflush_r+0x62>
 800d89e:	68ac      	ldr	r4, [r5, #8]
 800d8a0:	e7df      	b.n	800d862 <_fflush_r+0x22>
 800d8a2:	4b04      	ldr	r3, [pc, #16]	; (800d8b4 <_fflush_r+0x74>)
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	bf08      	it	eq
 800d8a8:	68ec      	ldreq	r4, [r5, #12]
 800d8aa:	e7da      	b.n	800d862 <_fflush_r+0x22>
 800d8ac:	0801fbb4 	.word	0x0801fbb4
 800d8b0:	0801fbd4 	.word	0x0801fbd4
 800d8b4:	0801fb94 	.word	0x0801fb94

0800d8b8 <std>:
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	b510      	push	{r4, lr}
 800d8bc:	4604      	mov	r4, r0
 800d8be:	e9c0 3300 	strd	r3, r3, [r0]
 800d8c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8c6:	6083      	str	r3, [r0, #8]
 800d8c8:	8181      	strh	r1, [r0, #12]
 800d8ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d8cc:	81c2      	strh	r2, [r0, #14]
 800d8ce:	6183      	str	r3, [r0, #24]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	2208      	movs	r2, #8
 800d8d4:	305c      	adds	r0, #92	; 0x5c
 800d8d6:	f7fb fe03 	bl	80094e0 <memset>
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <std+0x38>)
 800d8dc:	6224      	str	r4, [r4, #32]
 800d8de:	6263      	str	r3, [r4, #36]	; 0x24
 800d8e0:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <std+0x3c>)
 800d8e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8e4:	4b04      	ldr	r3, [pc, #16]	; (800d8f8 <std+0x40>)
 800d8e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8e8:	4b04      	ldr	r3, [pc, #16]	; (800d8fc <std+0x44>)
 800d8ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0800dc0d 	.word	0x0800dc0d
 800d8f4:	0800dc2f 	.word	0x0800dc2f
 800d8f8:	0800dc67 	.word	0x0800dc67
 800d8fc:	0800dc8b 	.word	0x0800dc8b

0800d900 <_cleanup_r>:
 800d900:	4901      	ldr	r1, [pc, #4]	; (800d908 <_cleanup_r+0x8>)
 800d902:	f000 b8af 	b.w	800da64 <_fwalk_reent>
 800d906:	bf00      	nop
 800d908:	0800d841 	.word	0x0800d841

0800d90c <__sfmoreglue>:
 800d90c:	2268      	movs	r2, #104	; 0x68
 800d90e:	b570      	push	{r4, r5, r6, lr}
 800d910:	1e4d      	subs	r5, r1, #1
 800d912:	4355      	muls	r5, r2
 800d914:	460e      	mov	r6, r1
 800d916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d91a:	f7ff fa63 	bl	800cde4 <_malloc_r>
 800d91e:	4604      	mov	r4, r0
 800d920:	b140      	cbz	r0, 800d934 <__sfmoreglue+0x28>
 800d922:	2100      	movs	r1, #0
 800d924:	e9c0 1600 	strd	r1, r6, [r0]
 800d928:	300c      	adds	r0, #12
 800d92a:	60a0      	str	r0, [r4, #8]
 800d92c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d930:	f7fb fdd6 	bl	80094e0 <memset>
 800d934:	4620      	mov	r0, r4
 800d936:	bd70      	pop	{r4, r5, r6, pc}

0800d938 <__sfp_lock_acquire>:
 800d938:	4801      	ldr	r0, [pc, #4]	; (800d940 <__sfp_lock_acquire+0x8>)
 800d93a:	f000 b8b3 	b.w	800daa4 <__retarget_lock_acquire_recursive>
 800d93e:	bf00      	nop
 800d940:	20000985 	.word	0x20000985

0800d944 <__sfp_lock_release>:
 800d944:	4801      	ldr	r0, [pc, #4]	; (800d94c <__sfp_lock_release+0x8>)
 800d946:	f000 b8ae 	b.w	800daa6 <__retarget_lock_release_recursive>
 800d94a:	bf00      	nop
 800d94c:	20000985 	.word	0x20000985

0800d950 <__sinit_lock_acquire>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__sinit_lock_acquire+0x8>)
 800d952:	f000 b8a7 	b.w	800daa4 <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	20000986 	.word	0x20000986

0800d95c <__sinit_lock_release>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__sinit_lock_release+0x8>)
 800d95e:	f000 b8a2 	b.w	800daa6 <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	20000986 	.word	0x20000986

0800d968 <__sinit>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	f7ff fff0 	bl	800d950 <__sinit_lock_acquire>
 800d970:	69a3      	ldr	r3, [r4, #24]
 800d972:	b11b      	cbz	r3, 800d97c <__sinit+0x14>
 800d974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d978:	f7ff bff0 	b.w	800d95c <__sinit_lock_release>
 800d97c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d980:	6523      	str	r3, [r4, #80]	; 0x50
 800d982:	4b13      	ldr	r3, [pc, #76]	; (800d9d0 <__sinit+0x68>)
 800d984:	4a13      	ldr	r2, [pc, #76]	; (800d9d4 <__sinit+0x6c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	62a2      	str	r2, [r4, #40]	; 0x28
 800d98a:	42a3      	cmp	r3, r4
 800d98c:	bf08      	it	eq
 800d98e:	2301      	moveq	r3, #1
 800d990:	4620      	mov	r0, r4
 800d992:	bf08      	it	eq
 800d994:	61a3      	streq	r3, [r4, #24]
 800d996:	f000 f81f 	bl	800d9d8 <__sfp>
 800d99a:	6060      	str	r0, [r4, #4]
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 f81b 	bl	800d9d8 <__sfp>
 800d9a2:	60a0      	str	r0, [r4, #8]
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 f817 	bl	800d9d8 <__sfp>
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2104      	movs	r1, #4
 800d9ae:	60e0      	str	r0, [r4, #12]
 800d9b0:	6860      	ldr	r0, [r4, #4]
 800d9b2:	f7ff ff81 	bl	800d8b8 <std>
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	2109      	movs	r1, #9
 800d9ba:	68a0      	ldr	r0, [r4, #8]
 800d9bc:	f7ff ff7c 	bl	800d8b8 <std>
 800d9c0:	2202      	movs	r2, #2
 800d9c2:	2112      	movs	r1, #18
 800d9c4:	68e0      	ldr	r0, [r4, #12]
 800d9c6:	f7ff ff77 	bl	800d8b8 <std>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	61a3      	str	r3, [r4, #24]
 800d9ce:	e7d1      	b.n	800d974 <__sinit+0xc>
 800d9d0:	0801f750 	.word	0x0801f750
 800d9d4:	0800d901 	.word	0x0800d901

0800d9d8 <__sfp>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	4607      	mov	r7, r0
 800d9dc:	f7ff ffac 	bl	800d938 <__sfp_lock_acquire>
 800d9e0:	4b1e      	ldr	r3, [pc, #120]	; (800da5c <__sfp+0x84>)
 800d9e2:	681e      	ldr	r6, [r3, #0]
 800d9e4:	69b3      	ldr	r3, [r6, #24]
 800d9e6:	b913      	cbnz	r3, 800d9ee <__sfp+0x16>
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f7ff ffbd 	bl	800d968 <__sinit>
 800d9ee:	3648      	adds	r6, #72	; 0x48
 800d9f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	d503      	bpl.n	800da00 <__sfp+0x28>
 800d9f8:	6833      	ldr	r3, [r6, #0]
 800d9fa:	b30b      	cbz	r3, 800da40 <__sfp+0x68>
 800d9fc:	6836      	ldr	r6, [r6, #0]
 800d9fe:	e7f7      	b.n	800d9f0 <__sfp+0x18>
 800da00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da04:	b9d5      	cbnz	r5, 800da3c <__sfp+0x64>
 800da06:	4b16      	ldr	r3, [pc, #88]	; (800da60 <__sfp+0x88>)
 800da08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da0c:	60e3      	str	r3, [r4, #12]
 800da0e:	6665      	str	r5, [r4, #100]	; 0x64
 800da10:	f000 f847 	bl	800daa2 <__retarget_lock_init_recursive>
 800da14:	f7ff ff96 	bl	800d944 <__sfp_lock_release>
 800da18:	2208      	movs	r2, #8
 800da1a:	4629      	mov	r1, r5
 800da1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da24:	6025      	str	r5, [r4, #0]
 800da26:	61a5      	str	r5, [r4, #24]
 800da28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da2c:	f7fb fd58 	bl	80094e0 <memset>
 800da30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da38:	4620      	mov	r0, r4
 800da3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3c:	3468      	adds	r4, #104	; 0x68
 800da3e:	e7d9      	b.n	800d9f4 <__sfp+0x1c>
 800da40:	2104      	movs	r1, #4
 800da42:	4638      	mov	r0, r7
 800da44:	f7ff ff62 	bl	800d90c <__sfmoreglue>
 800da48:	4604      	mov	r4, r0
 800da4a:	6030      	str	r0, [r6, #0]
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d1d5      	bne.n	800d9fc <__sfp+0x24>
 800da50:	f7ff ff78 	bl	800d944 <__sfp_lock_release>
 800da54:	230c      	movs	r3, #12
 800da56:	603b      	str	r3, [r7, #0]
 800da58:	e7ee      	b.n	800da38 <__sfp+0x60>
 800da5a:	bf00      	nop
 800da5c:	0801f750 	.word	0x0801f750
 800da60:	ffff0001 	.word	0xffff0001

0800da64 <_fwalk_reent>:
 800da64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da68:	4606      	mov	r6, r0
 800da6a:	4688      	mov	r8, r1
 800da6c:	2700      	movs	r7, #0
 800da6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da76:	f1b9 0901 	subs.w	r9, r9, #1
 800da7a:	d505      	bpl.n	800da88 <_fwalk_reent+0x24>
 800da7c:	6824      	ldr	r4, [r4, #0]
 800da7e:	2c00      	cmp	r4, #0
 800da80:	d1f7      	bne.n	800da72 <_fwalk_reent+0xe>
 800da82:	4638      	mov	r0, r7
 800da84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da88:	89ab      	ldrh	r3, [r5, #12]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d907      	bls.n	800da9e <_fwalk_reent+0x3a>
 800da8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da92:	3301      	adds	r3, #1
 800da94:	d003      	beq.n	800da9e <_fwalk_reent+0x3a>
 800da96:	4629      	mov	r1, r5
 800da98:	4630      	mov	r0, r6
 800da9a:	47c0      	blx	r8
 800da9c:	4307      	orrs	r7, r0
 800da9e:	3568      	adds	r5, #104	; 0x68
 800daa0:	e7e9      	b.n	800da76 <_fwalk_reent+0x12>

0800daa2 <__retarget_lock_init_recursive>:
 800daa2:	4770      	bx	lr

0800daa4 <__retarget_lock_acquire_recursive>:
 800daa4:	4770      	bx	lr

0800daa6 <__retarget_lock_release_recursive>:
 800daa6:	4770      	bx	lr

0800daa8 <__swhatbuf_r>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	460e      	mov	r6, r1
 800daac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab0:	4614      	mov	r4, r2
 800dab2:	2900      	cmp	r1, #0
 800dab4:	461d      	mov	r5, r3
 800dab6:	b096      	sub	sp, #88	; 0x58
 800dab8:	da08      	bge.n	800dacc <__swhatbuf_r+0x24>
 800daba:	2200      	movs	r2, #0
 800dabc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dac0:	602a      	str	r2, [r5, #0]
 800dac2:	061a      	lsls	r2, r3, #24
 800dac4:	d410      	bmi.n	800dae8 <__swhatbuf_r+0x40>
 800dac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daca:	e00e      	b.n	800daea <__swhatbuf_r+0x42>
 800dacc:	466a      	mov	r2, sp
 800dace:	f000 f903 	bl	800dcd8 <_fstat_r>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	dbf1      	blt.n	800daba <__swhatbuf_r+0x12>
 800dad6:	9a01      	ldr	r2, [sp, #4]
 800dad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dadc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dae0:	425a      	negs	r2, r3
 800dae2:	415a      	adcs	r2, r3
 800dae4:	602a      	str	r2, [r5, #0]
 800dae6:	e7ee      	b.n	800dac6 <__swhatbuf_r+0x1e>
 800dae8:	2340      	movs	r3, #64	; 0x40
 800daea:	2000      	movs	r0, #0
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	b016      	add	sp, #88	; 0x58
 800daf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800daf4 <__smakebuf_r>:
 800daf4:	898b      	ldrh	r3, [r1, #12]
 800daf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daf8:	079d      	lsls	r5, r3, #30
 800dafa:	4606      	mov	r6, r0
 800dafc:	460c      	mov	r4, r1
 800dafe:	d507      	bpl.n	800db10 <__smakebuf_r+0x1c>
 800db00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	6123      	str	r3, [r4, #16]
 800db08:	2301      	movs	r3, #1
 800db0a:	6163      	str	r3, [r4, #20]
 800db0c:	b002      	add	sp, #8
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	466a      	mov	r2, sp
 800db12:	ab01      	add	r3, sp, #4
 800db14:	f7ff ffc8 	bl	800daa8 <__swhatbuf_r>
 800db18:	9900      	ldr	r1, [sp, #0]
 800db1a:	4605      	mov	r5, r0
 800db1c:	4630      	mov	r0, r6
 800db1e:	f7ff f961 	bl	800cde4 <_malloc_r>
 800db22:	b948      	cbnz	r0, 800db38 <__smakebuf_r+0x44>
 800db24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db28:	059a      	lsls	r2, r3, #22
 800db2a:	d4ef      	bmi.n	800db0c <__smakebuf_r+0x18>
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	f043 0302 	orr.w	r3, r3, #2
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	e7e3      	b.n	800db00 <__smakebuf_r+0xc>
 800db38:	4b0d      	ldr	r3, [pc, #52]	; (800db70 <__smakebuf_r+0x7c>)
 800db3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	6020      	str	r0, [r4, #0]
 800db40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db44:	81a3      	strh	r3, [r4, #12]
 800db46:	9b00      	ldr	r3, [sp, #0]
 800db48:	6120      	str	r0, [r4, #16]
 800db4a:	6163      	str	r3, [r4, #20]
 800db4c:	9b01      	ldr	r3, [sp, #4]
 800db4e:	b15b      	cbz	r3, 800db68 <__smakebuf_r+0x74>
 800db50:	4630      	mov	r0, r6
 800db52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db56:	f000 f8d1 	bl	800dcfc <_isatty_r>
 800db5a:	b128      	cbz	r0, 800db68 <__smakebuf_r+0x74>
 800db5c:	89a3      	ldrh	r3, [r4, #12]
 800db5e:	f023 0303 	bic.w	r3, r3, #3
 800db62:	f043 0301 	orr.w	r3, r3, #1
 800db66:	81a3      	strh	r3, [r4, #12]
 800db68:	89a0      	ldrh	r0, [r4, #12]
 800db6a:	4305      	orrs	r5, r0
 800db6c:	81a5      	strh	r5, [r4, #12]
 800db6e:	e7cd      	b.n	800db0c <__smakebuf_r+0x18>
 800db70:	0800d901 	.word	0x0800d901

0800db74 <_malloc_usable_size_r>:
 800db74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db78:	1f18      	subs	r0, r3, #4
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	bfbc      	itt	lt
 800db7e:	580b      	ldrlt	r3, [r1, r0]
 800db80:	18c0      	addlt	r0, r0, r3
 800db82:	4770      	bx	lr

0800db84 <_raise_r>:
 800db84:	291f      	cmp	r1, #31
 800db86:	b538      	push	{r3, r4, r5, lr}
 800db88:	4604      	mov	r4, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	d904      	bls.n	800db98 <_raise_r+0x14>
 800db8e:	2316      	movs	r3, #22
 800db90:	6003      	str	r3, [r0, #0]
 800db92:	f04f 30ff 	mov.w	r0, #4294967295
 800db96:	bd38      	pop	{r3, r4, r5, pc}
 800db98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db9a:	b112      	cbz	r2, 800dba2 <_raise_r+0x1e>
 800db9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dba0:	b94b      	cbnz	r3, 800dbb6 <_raise_r+0x32>
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 f830 	bl	800dc08 <_getpid_r>
 800dba8:	462a      	mov	r2, r5
 800dbaa:	4601      	mov	r1, r0
 800dbac:	4620      	mov	r0, r4
 800dbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbb2:	f000 b817 	b.w	800dbe4 <_kill_r>
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d00a      	beq.n	800dbd0 <_raise_r+0x4c>
 800dbba:	1c59      	adds	r1, r3, #1
 800dbbc:	d103      	bne.n	800dbc6 <_raise_r+0x42>
 800dbbe:	2316      	movs	r3, #22
 800dbc0:	6003      	str	r3, [r0, #0]
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	e7e7      	b.n	800db96 <_raise_r+0x12>
 800dbc6:	2400      	movs	r4, #0
 800dbc8:	4628      	mov	r0, r5
 800dbca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbce:	4798      	blx	r3
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	e7e0      	b.n	800db96 <_raise_r+0x12>

0800dbd4 <raise>:
 800dbd4:	4b02      	ldr	r3, [pc, #8]	; (800dbe0 <raise+0xc>)
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	6818      	ldr	r0, [r3, #0]
 800dbda:	f7ff bfd3 	b.w	800db84 <_raise_r>
 800dbde:	bf00      	nop
 800dbe0:	2000000c 	.word	0x2000000c

0800dbe4 <_kill_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	4d06      	ldr	r5, [pc, #24]	; (800dc04 <_kill_r+0x20>)
 800dbea:	4604      	mov	r4, r0
 800dbec:	4608      	mov	r0, r1
 800dbee:	4611      	mov	r1, r2
 800dbf0:	602b      	str	r3, [r5, #0]
 800dbf2:	f7f8 fc9d 	bl	8006530 <_kill>
 800dbf6:	1c43      	adds	r3, r0, #1
 800dbf8:	d102      	bne.n	800dc00 <_kill_r+0x1c>
 800dbfa:	682b      	ldr	r3, [r5, #0]
 800dbfc:	b103      	cbz	r3, 800dc00 <_kill_r+0x1c>
 800dbfe:	6023      	str	r3, [r4, #0]
 800dc00:	bd38      	pop	{r3, r4, r5, pc}
 800dc02:	bf00      	nop
 800dc04:	20000980 	.word	0x20000980

0800dc08 <_getpid_r>:
 800dc08:	f7f8 bc90 	b.w	800652c <_getpid>

0800dc0c <__sread>:
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	460c      	mov	r4, r1
 800dc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc14:	f000 f894 	bl	800dd40 <_read_r>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	bfab      	itete	ge
 800dc1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc1e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc20:	181b      	addge	r3, r3, r0
 800dc22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc26:	bfac      	ite	ge
 800dc28:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc2a:	81a3      	strhlt	r3, [r4, #12]
 800dc2c:	bd10      	pop	{r4, pc}

0800dc2e <__swrite>:
 800dc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc32:	461f      	mov	r7, r3
 800dc34:	898b      	ldrh	r3, [r1, #12]
 800dc36:	4605      	mov	r5, r0
 800dc38:	05db      	lsls	r3, r3, #23
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	d505      	bpl.n	800dc4c <__swrite+0x1e>
 800dc40:	2302      	movs	r3, #2
 800dc42:	2200      	movs	r2, #0
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	f000 f868 	bl	800dd1c <_lseek_r>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	4632      	mov	r2, r6
 800dc50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc54:	81a3      	strh	r3, [r4, #12]
 800dc56:	4628      	mov	r0, r5
 800dc58:	463b      	mov	r3, r7
 800dc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc62:	f000 b817 	b.w	800dc94 <_write_r>

0800dc66 <__sseek>:
 800dc66:	b510      	push	{r4, lr}
 800dc68:	460c      	mov	r4, r1
 800dc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc6e:	f000 f855 	bl	800dd1c <_lseek_r>
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	89a3      	ldrh	r3, [r4, #12]
 800dc76:	bf15      	itete	ne
 800dc78:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc82:	81a3      	strheq	r3, [r4, #12]
 800dc84:	bf18      	it	ne
 800dc86:	81a3      	strhne	r3, [r4, #12]
 800dc88:	bd10      	pop	{r4, pc}

0800dc8a <__sclose>:
 800dc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8e:	f000 b813 	b.w	800dcb8 <_close_r>
	...

0800dc94 <_write_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4604      	mov	r4, r0
 800dc98:	4608      	mov	r0, r1
 800dc9a:	4611      	mov	r1, r2
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4d05      	ldr	r5, [pc, #20]	; (800dcb4 <_write_r+0x20>)
 800dca0:	602a      	str	r2, [r5, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	f7f8 fc62 	bl	800656c <_write>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d102      	bne.n	800dcb2 <_write_r+0x1e>
 800dcac:	682b      	ldr	r3, [r5, #0]
 800dcae:	b103      	cbz	r3, 800dcb2 <_write_r+0x1e>
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	bd38      	pop	{r3, r4, r5, pc}
 800dcb4:	20000980 	.word	0x20000980

0800dcb8 <_close_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	2300      	movs	r3, #0
 800dcbc:	4d05      	ldr	r5, [pc, #20]	; (800dcd4 <_close_r+0x1c>)
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	602b      	str	r3, [r5, #0]
 800dcc4:	f7f8 fc60 	bl	8006588 <_close>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_close_r+0x1a>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_close_r+0x1a>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	20000980 	.word	0x20000980

0800dcd8 <_fstat_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	2300      	movs	r3, #0
 800dcdc:	4d06      	ldr	r5, [pc, #24]	; (800dcf8 <_fstat_r+0x20>)
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	602b      	str	r3, [r5, #0]
 800dce6:	f7f8 fc53 	bl	8006590 <_fstat>
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	d102      	bne.n	800dcf4 <_fstat_r+0x1c>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	b103      	cbz	r3, 800dcf4 <_fstat_r+0x1c>
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	bd38      	pop	{r3, r4, r5, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20000980 	.word	0x20000980

0800dcfc <_isatty_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4d05      	ldr	r5, [pc, #20]	; (800dd18 <_isatty_r+0x1c>)
 800dd02:	4604      	mov	r4, r0
 800dd04:	4608      	mov	r0, r1
 800dd06:	602b      	str	r3, [r5, #0]
 800dd08:	f7f8 fc48 	bl	800659c <_isatty>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d102      	bne.n	800dd16 <_isatty_r+0x1a>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b103      	cbz	r3, 800dd16 <_isatty_r+0x1a>
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	20000980 	.word	0x20000980

0800dd1c <_lseek_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	2200      	movs	r2, #0
 800dd26:	4d05      	ldr	r5, [pc, #20]	; (800dd3c <_lseek_r+0x20>)
 800dd28:	602a      	str	r2, [r5, #0]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	f7f8 fc38 	bl	80065a0 <_lseek>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	d102      	bne.n	800dd3a <_lseek_r+0x1e>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	b103      	cbz	r3, 800dd3a <_lseek_r+0x1e>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	20000980 	.word	0x20000980

0800dd40 <_read_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	4611      	mov	r1, r2
 800dd48:	2200      	movs	r2, #0
 800dd4a:	4d05      	ldr	r5, [pc, #20]	; (800dd60 <_read_r+0x20>)
 800dd4c:	602a      	str	r2, [r5, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f7f8 fbfe 	bl	8006550 <_read>
 800dd54:	1c43      	adds	r3, r0, #1
 800dd56:	d102      	bne.n	800dd5e <_read_r+0x1e>
 800dd58:	682b      	ldr	r3, [r5, #0]
 800dd5a:	b103      	cbz	r3, 800dd5e <_read_r+0x1e>
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	20000980 	.word	0x20000980
 800dd64:	00000000 	.word	0x00000000

0800dd68 <floor>:
 800dd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd6c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800dd70:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800dd74:	2e13      	cmp	r6, #19
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	4605      	mov	r5, r0
 800dd80:	dc33      	bgt.n	800ddea <floor+0x82>
 800dd82:	2e00      	cmp	r6, #0
 800dd84:	da14      	bge.n	800ddb0 <floor+0x48>
 800dd86:	a334      	add	r3, pc, #208	; (adr r3, 800de58 <floor+0xf0>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	f7f8 fc40 	bl	8006610 <__adddf3>
 800dd90:	2200      	movs	r2, #0
 800dd92:	2300      	movs	r3, #0
 800dd94:	f7f9 f882 	bl	8006e9c <__aeabi_dcmpgt>
 800dd98:	b138      	cbz	r0, 800ddaa <floor+0x42>
 800dd9a:	2c00      	cmp	r4, #0
 800dd9c:	da58      	bge.n	800de50 <floor+0xe8>
 800dd9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dda2:	431d      	orrs	r5, r3
 800dda4:	d001      	beq.n	800ddaa <floor+0x42>
 800dda6:	2500      	movs	r5, #0
 800dda8:	4c2d      	ldr	r4, [pc, #180]	; (800de60 <floor+0xf8>)
 800ddaa:	4623      	mov	r3, r4
 800ddac:	462f      	mov	r7, r5
 800ddae:	e025      	b.n	800ddfc <floor+0x94>
 800ddb0:	4a2c      	ldr	r2, [pc, #176]	; (800de64 <floor+0xfc>)
 800ddb2:	fa42 f806 	asr.w	r8, r2, r6
 800ddb6:	ea01 0208 	and.w	r2, r1, r8
 800ddba:	4302      	orrs	r2, r0
 800ddbc:	d01e      	beq.n	800ddfc <floor+0x94>
 800ddbe:	a326      	add	r3, pc, #152	; (adr r3, 800de58 <floor+0xf0>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	f7f8 fc24 	bl	8006610 <__adddf3>
 800ddc8:	2200      	movs	r2, #0
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f7f9 f866 	bl	8006e9c <__aeabi_dcmpgt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d0ea      	beq.n	800ddaa <floor+0x42>
 800ddd4:	2c00      	cmp	r4, #0
 800ddd6:	bfbe      	ittt	lt
 800ddd8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dddc:	fa43 f606 	asrlt.w	r6, r3, r6
 800dde0:	19a4      	addlt	r4, r4, r6
 800dde2:	2500      	movs	r5, #0
 800dde4:	ea24 0408 	bic.w	r4, r4, r8
 800dde8:	e7df      	b.n	800ddaa <floor+0x42>
 800ddea:	2e33      	cmp	r6, #51	; 0x33
 800ddec:	dd0a      	ble.n	800de04 <floor+0x9c>
 800ddee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ddf2:	d103      	bne.n	800ddfc <floor+0x94>
 800ddf4:	f7f8 fc0c 	bl	8006610 <__adddf3>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	4619      	mov	r1, r3
 800de00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de04:	f04f 32ff 	mov.w	r2, #4294967295
 800de08:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800de0c:	fa22 f808 	lsr.w	r8, r2, r8
 800de10:	ea18 0f00 	tst.w	r8, r0
 800de14:	d0f2      	beq.n	800ddfc <floor+0x94>
 800de16:	a310      	add	r3, pc, #64	; (adr r3, 800de58 <floor+0xf0>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	f7f8 fbf8 	bl	8006610 <__adddf3>
 800de20:	2200      	movs	r2, #0
 800de22:	2300      	movs	r3, #0
 800de24:	f7f9 f83a 	bl	8006e9c <__aeabi_dcmpgt>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d0be      	beq.n	800ddaa <floor+0x42>
 800de2c:	2c00      	cmp	r4, #0
 800de2e:	da02      	bge.n	800de36 <floor+0xce>
 800de30:	2e14      	cmp	r6, #20
 800de32:	d103      	bne.n	800de3c <floor+0xd4>
 800de34:	3401      	adds	r4, #1
 800de36:	ea25 0508 	bic.w	r5, r5, r8
 800de3a:	e7b6      	b.n	800ddaa <floor+0x42>
 800de3c:	2301      	movs	r3, #1
 800de3e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800de42:	fa03 f606 	lsl.w	r6, r3, r6
 800de46:	4435      	add	r5, r6
 800de48:	42bd      	cmp	r5, r7
 800de4a:	bf38      	it	cc
 800de4c:	18e4      	addcc	r4, r4, r3
 800de4e:	e7f2      	b.n	800de36 <floor+0xce>
 800de50:	2500      	movs	r5, #0
 800de52:	462c      	mov	r4, r5
 800de54:	e7a9      	b.n	800ddaa <floor+0x42>
 800de56:	bf00      	nop
 800de58:	8800759c 	.word	0x8800759c
 800de5c:	7e37e43c 	.word	0x7e37e43c
 800de60:	bff00000 	.word	0xbff00000
 800de64:	000fffff 	.word	0x000fffff

0800de68 <_init>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	bf00      	nop
 800de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6e:	bc08      	pop	{r3}
 800de70:	469e      	mov	lr, r3
 800de72:	4770      	bx	lr

0800de74 <_fini>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	bf00      	nop
 800de78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de7a:	bc08      	pop	{r3}
 800de7c:	469e      	mov	lr, r3
 800de7e:	4770      	bx	lr
